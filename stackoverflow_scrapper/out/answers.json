[
    {
        "_id": 0,
        "fecha": { "$date" : "2021-07-24T20:43:05Z" },
        "decripcion": "\nNote: The ideas here are pretty generic for Stack Overflow, indeed questions.\nDisclaimer: Writing a good question is hard.\nThe Good:\n\ndo include small* example DataFrame, either as runnable code:\n  In [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\n\nor make it \"copy and pasteable\" using pd.read_clipboard(sep='\\s\\s+'), you can format the text for Stack Overflow highlight and use Ctrl+K (or prepend four spaces to each line), or place three tildes above and below your code with your code unindented:\n  In [2]: df\n  Out[2]:\n     A  B\n  0  1  2\n  1  1  3\n  2  4  6\n\ntest pd.read_clipboard(sep='\\s\\s+') yourself.\n* I really do mean small, the vast majority of example DataFrames could be fewer than 6 rowscitation needed, and I bet I can do it in 5 rows. Can you reproduce the error with df = df.head(), if not fiddle around to see if you can make up a small DataFrame which exhibits the issue you are facing.\n* Every rule has an exception, the obvious one is for performance issues  (in which case definitely use %timeit and possibly %prun), where you should generate (consider using np.random.seed so we have the exact same frame): df = pd.DataFrame(np.random.randn(100000000, 10)). Saying that, \"make this code fast for me\" is not strictly on topic for the site...\n\nwrite out the outcome you desire (similarly to above)\n  In [3]: iwantthis\n  Out[3]:\n     A  B\n  0  1  5\n  1  4  6\n\nExplain what the numbers come from: the 5 is sum of the B column for the rows where A is 1.\n\ndo show the code you've tried:\n  In [4]: df.groupby('A').sum()\n  Out[4]:\n     B\n  A\n  1  5\n  4  6\n\nBut say what's incorrect: the A column is in the index rather than a column.\n\ndo show you've done some research (search the documentation, search Stack\u00a0Overflow), and give a summary:\n\nThe docstring for sum simply states \"Compute sum of group values\"\n\n\nThe groupby documentation doesn't give any examples for this.\n\nAside: the answer here is to use df.groupby('A', as_index=False).sum().\n\nif it's relevant that you have Timestamp columns, e.g. you're resampling or something, then be explicit and apply pd.to_datetime to them for good measure**.\n  df['date'] = pd.to_datetime(df['date']) # this column ought to be date..\n\n** Sometimes this is the issue itself: they were strings.\n\n\nThe Bad:\n\ndon't include a MultiIndex, which we can't copy and paste (see above). This is kind of a grievance with Pandas' default display, but nonetheless annoying:\n  In [11]: df\n  Out[11]:\n       C\n  A B\n  1 2  3\n    2  6\n\nThe correct way is to include an ordinary DataFrame with a set_index call:\n  In [12]: df = pd.DataFrame([[1, 2, 3], [1, 2, 6]], columns=['A', 'B', 'C']).set_index(['A', 'B'])\n\n  In [13]: df\n  Out[13]:\n       C\n  A B\n  1 2  3\n    2  6\n\n\ndo provide insight to what it is when giving the outcome you want:\n     B\n  A\n  1  1\n  5  0\n\nBe specific about how you got the numbers (what are they)... double check they're correct.\n\nIf your code throws an error, do include the entire stack trace (this can be edited out later if it's too noisy). Show the line number (and the corresponding line of your code which it's raising against).\n\n\nThe Ugly:\n\ndon't link to a CSV file we don't have access to (ideally don't link to an external source at all...)\n  df = pd.read_csv('my_secret_file.csv')  # ideally with lots of parsing options\n\nMost data is proprietary we get that: Make up similar data and see if you can reproduce the problem (something small).\n\ndon't explain the situation vaguely in words, like you have a DataFrame which is \"large\", mention some of the column names in passing (be sure not to mention their dtypes). Try and go into lots of detail about something which is completely meaningless without seeing the actual context. Presumably no one is even going to read to the end of this paragraph.\nEssays are bad, it's easier with small examples.\n\ndon't include 10+ (100+??) lines of data munging before getting to your actual question.\nPlease, we see enough of this in our day jobs. We want to help, but not like this....\nCut the intro, and just show the relevant DataFrames (or small versions of them) in the step which is causing you trouble.\n\n\nAnyway, have fun learning Python, NumPy and Pandas!\n    ",
        "votes": 402,
        "comentarios": [
            {
                "decripcion": "+1 for the pd.read_clipboard(sep='\\s\\s+') tip. When I post SO questions that need a special but easily shared dataframe, like this one I build it in excel, copy it to my clipboard, then instruct SOers to do the same. Saves so much time!",
                "fecha": { "$date" : "2016-04-13T17:32:12Z" },
                "usuario": "zelusp",
                "usuario_id": 0
            },
            {
                "decripcion": "the pd.read_clipboard(sep='\\s\\s+') suggestion does not seem to work if you're using Python on a remote server, which is where a lot of large data sets live.",
                "fecha": { "$date" : "2016-12-09T17:50:15Z" },
                "usuario": "user5359531",
                "usuario_id": 1
            },
            {
                "decripcion": "Why pd.read_clipboard(sep='\\s\\s+'), and not a simpler pd.read_clipboard() (with the default \u2018s+\u2019)? The first need at least 2 whitespace characters, which may cause problems if there is only 1 (e. g. see such in the @JohnE 's answer).",
                "fecha": { "$date" : "2018-12-26T22:32:33Z" },
                "usuario": "MarianD",
                "usuario_id": 2
            },
            {
                "decripcion": "@MarianD the reason that \\s\\s+ is so popular is that there is often one e.g. in a column name, but multiple is rarer, and pandas output nicely puts in at least two between columns. Since this is just for toy/small datasets it's pretty powerful/majority of cases. Note: tabs separated would be a different story, though stackoverflow replaces tabs with spaces, but if you have a tsv then just use \\t.",
                "fecha": { "$date" : "2018-12-27T20:45:57Z" },
                "usuario": "Andy Hayden",
                "usuario_id": 3
            },
            {
                "decripcion": "Ugh, i always use pd.read_clipboard(), when their are spaces, i do: pd.read_clipboard(sep='\\s+{2,}', engine='python') :P",
                "fecha": { "$date" : "2019-06-10T11:26:36Z" },
                "usuario": "U12-Forward",
                "usuario_id": 4
            }
        ],
        "usuario": "Andy Hayden",
        "usuario_id": 3
    },
    {
        "_id": 1,
        "fecha": { "$date" : "2021-07-24T21:01:22Z" },
        "decripcion": "\nHow to create sample datasets\nThis is to mainly to expand on AndyHayden's answer by providing examples of how you can create sample dataframes.  Pandas and (especially) NumPy give you a variety of tools for this such that you can generally create a reasonable facsimile of any real dataset with just a few lines of code.\nAfter importing NumPy and Pandas, be sure to provide a random seed if you want folks to be able to exactly reproduce your data and results.\nimport numpy as np\nimport pandas as pd\n\nnp.random.seed(123)\n\nA kitchen sink example\nHere's an example showing a variety of things you can do.  All kinds of useful sample dataframes could be created from a subset of this:\ndf = pd.DataFrame({\n\n    # some ways to create random data\n    'a':np.random.randn(6),\n    'b':np.random.choice( [5,7,np.nan], 6),\n    'c':np.random.choice( ['panda','python','shark'], 6),\n\n    # some ways to create systematic groups for indexing or groupby\n    # this is similar to R's expand.grid(), see note 2 below\n    'd':np.repeat( range(3), 2 ),\n    'e':np.tile(   range(2), 3 ),\n\n    # a date range and set of random dates\n    'f':pd.date_range('1/1/2011', periods=6, freq='D'),\n    'g':np.random.choice( pd.date_range('1/1/2011', periods=365,\n                          freq='D'), 6, replace=False)\n    })\n\nThis produces:\n          a   b       c  d  e          f          g\n0 -1.085631 NaN   panda  0  0 2011-01-01 2011-08-12\n1  0.997345   7   shark  0  1 2011-01-02 2011-11-10\n2  0.282978   5   panda  1  0 2011-01-03 2011-10-30\n3 -1.506295   7  python  1  1 2011-01-04 2011-09-07\n4 -0.578600 NaN   shark  2  0 2011-01-05 2011-02-27\n5  1.651437   7  python  2  1 2011-01-06 2011-02-03\n\nSome notes:\n\nnp.repeat and np.tile (columns d and e) are very useful for creating groups and indices in a very regular way.  For 2 columns, this can be used to easily duplicate r's expand.grid() but is also more flexible in ability to provide a subset of all permutations.  However, for 3 or more columns the syntax quickly becomes unwieldy.\nFor a more direct replacement for R's expand.grid() see the itertools solution in the pandas cookbook or the np.meshgrid solution shown here.  Those will allow any number of dimensions.\nYou can do quite a bit with np.random.choice.  For example, in column g, we have a random selection of six dates from 2011.  Additionally, by setting replace=False we can assure these dates are unique -- very handy if we want to use this as an index with unique values.\n\nFake stock market data\nIn addition to taking subsets of the above code, you can further combine the techniques to do just about anything.  For example, here's a short example that combines np.tile and date_range to create sample ticker data for 4 stocks covering the same dates:\nstocks = pd.DataFrame({\n    'ticker':np.repeat( ['aapl','goog','yhoo','msft'], 25 ),\n    'date':np.tile( pd.date_range('1/1/2011', periods=25, freq='D'), 4 ),\n    'price':(np.random.randn(100).cumsum() + 10) })\n\nNow we have a sample dataset with 100 lines (25 dates per ticker), but we have only used 4 lines to do it, making it easy for everyone else to reproduce without copying and pasting 100 lines of code.  You can then display subsets of the data if it helps to explain your question:\n>>> stocks.head(5)\n\n        date      price ticker\n0 2011-01-01   9.497412   aapl\n1 2011-01-02  10.261908   aapl\n2 2011-01-03   9.438538   aapl\n3 2011-01-04   9.515958   aapl\n4 2011-01-05   7.554070   aapl\n\n>>> stocks.groupby('ticker').head(2)\n\n         date      price ticker\n0  2011-01-01   9.497412   aapl\n1  2011-01-02  10.261908   aapl\n25 2011-01-01   8.277772   goog\n26 2011-01-02   7.714916   goog\n50 2011-01-01   5.613023   yhoo\n51 2011-01-02   6.397686   yhoo\n75 2011-01-01  11.736584   msft\n76 2011-01-02  11.944519   msft\n\n    ",
        "votes": 78,
        "comentarios": [
            {
                "decripcion": "Great answer. After writing this question I actually did write a very short, simple implementation of expand.grid() that's included in the pandas cookbook, you could include that in your answer as well. Your answer shows how to create more complex datasets than my expand_grid() function could handle, which is great.",
                "fecha": { "$date" : "2015-05-24T23:29:16Z" },
                "usuario": "Marius",
                "usuario_id": 5
            },
            {
                "decripcion": "This is a really useful example and I'll be using it as a base for examples. Many thanks!",
                "fecha": { "$date" : "2020-11-08T05:42:32Z" },
                "usuario": "Serge de Gosson de Varennes",
                "usuario_id": 6
            }
        ],
        "usuario": "JohnE",
        "usuario_id": 7
    },
    {
        "_id": 2,
        "fecha": { "$date" : "2018-01-01T09:39:28Z" },
        "decripcion": "\nDiary of an Answerer\n\nMy best advice for asking questions would be to play on the psychology of the people who answer questions.  Being one of those people, I can give insight into why I answer certain questions and why I don't answer others.\n\nMotivations\n\nI'm motivated to answer questions for several reasons\n\n\nStackoverflow.com has been a tremendously valuable resource to me.  I wanted to give back.\nIn my efforts to give back, I've found this site to be an even more powerful resource than before.  Answering questions is a learning experience for me and I like to learn.  Read this answer and comment from another vet.  This kind of interaction makes me happy.\nI like points!\nSee #3.\nI like interesting problems.\n\n\nAll my purest intentions are great and all, but I get that satisfaction if I answer 1 question or 30.  What drives my choices for which questions to answer has a huge component of point maximization.\n\nI'll also spend time on interesting problems but that is few and far between and doesn't help an asker who needs a solution to a non-interesting question.  Your best bet to get me to answer a question is to serve that question up on a platter ripe for me to answer it with as little effort as possible.  If I'm looking at two questions and one has code I can copy paste to create all the variables I need... I'm taking that one!  I'll come back to the other one if I have time, maybe.\n\nMain Advice\n\nMake it easy for the people answering questions.\n\n\nProvide code that creates variables that are needed.\nMinimize that code.  If my eyes glaze over as I look at the post, I'm on to the next question or getting back to whatever else I'm doing.\nThink about what you're asking and be specific.  We want to see what you've done because natural languages (English) are inexact and confusing.  Code samples of what you've tried help resolve inconsistencies in a natural language description.\nPLEASE show what you expect!!!  I have to sit down and try things.  I almost never know the answer to a question without trying some things out.  If I don't see an example of what you're looking for, I might pass on the question because I don't feel like guessing.\n\n\nYour reputation is more than just your reputation.\n\nI like points (I mentioned that above).  But those points aren't really really my reputation.  My real reputation is an amalgamation of what others on the site think of me.  I strive to be fair and honest and I hope others can see that.  What that means for an asker is, we remember the behaviors of askers.  If you don't select answers and upvote good answers, I remember.  If you behave in ways I don't like or in ways I do like, I remember.  This also plays into which questions I'll answer.\n\n\n\nAnyway, I can probably go on, but I'll spare all of you who actually read this.\n    ",
        "votes": 55,
        "comentarios": [],
        "usuario": "piRSquared",
        "usuario_id": 8
    },
    {
        "_id": 3,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nThe Challenge One of the most challenging aspects of responding to SO questions is the time it takes to recreate the problem (including the data).  Questions which don't have a clear way to reproduce the data are less likely to be answered.  Given that you are taking the time to write a question and you have an issue that you'd like help with, you can easily help yourself by providing data that others can then use to help solve your problem.\nThe instructions provided by @Andy for writing good Pandas questions are an excellent place to start.  For more information, refer to how to ask and how to create Minimal, Complete, and Verifiable examples.\nPlease clearly state your question upfront.  After taking the time to write your question and any sample code, try to read it and provide an 'Executive Summary' for your reader which summarizes the problem and clearly states the question.\nOriginal question:\n\nI have this data...\nI want to do this...\nI want my result to look like this...\nHowever, when I try to do [this], I get the following problem...\nI've tried to find solutions by doing [this] and [that].\nHow do I fix it?\n\nDepending on the amount of data, sample code and error stacks provided, the reader needs to go a long way before understanding what the problem is.  Try restating your question so that the question itself is on top, and then provide the necessary details.\nRevised Question:\n\nQustion:  How can I do [this]?\nI've tried to find solutions by doing [this] and [that].\nWhen I've tried to do [this], I get the following problem...\nI'd like my final results to look like this...\nHere is some minimal code that can reproduce my problem...\nAnd here is how to recreate my sample data:\ndf = pd.DataFrame({'A': [...], 'B': [...], ...})\n\nPROVIDE SAMPLE DATA IF NEEDED!!!\nSometimes just the head or tail of the DataFrame is all that is needed.  You can also use the methods proposed by @JohnE to create larger datasets that can be reproduced by others.  Using his example to generate a 100 row DataFrame of stock prices:\nstocks = pd.DataFrame({ \n    'ticker':np.repeat( ['aapl','goog','yhoo','msft'], 25 ),\n    'date':np.tile( pd.date_range('1/1/2011', periods=25, freq='D'), 4 ),\n    'price':(np.random.randn(100).cumsum() + 10) })\n\nIf this was your actual data, you may just want to include the head and/or tail of the dataframe as follows (be sure to anonymize any sensitive data):\n>>> stocks.head(5).to_dict()\n{'date': {0: Timestamp('2011-01-01 00:00:00'),\n  1: Timestamp('2011-01-01 00:00:00'),\n  2: Timestamp('2011-01-01 00:00:00'),\n  3: Timestamp('2011-01-01 00:00:00'),\n  4: Timestamp('2011-01-02 00:00:00')},\n 'price': {0: 10.284260107718254,\n  1: 11.930300761831457,\n  2: 10.93741046217319,\n  3: 10.884574289565609,\n  4: 11.78005850418319},\n 'ticker': {0: 'aapl', 1: 'aapl', 2: 'aapl', 3: 'aapl', 4: 'aapl'}}\n\n>>> pd.concat([stocks.head(), stocks.tail()], ignore_index=True).to_dict()\n{'date': {0: Timestamp('2011-01-01 00:00:00'),\n  1: Timestamp('2011-01-01 00:00:00'),\n  2: Timestamp('2011-01-01 00:00:00'),\n  3: Timestamp('2011-01-01 00:00:00'),\n  4: Timestamp('2011-01-02 00:00:00'),\n  5: Timestamp('2011-01-24 00:00:00'),\n  6: Timestamp('2011-01-25 00:00:00'),\n  7: Timestamp('2011-01-25 00:00:00'),\n  8: Timestamp('2011-01-25 00:00:00'),\n  9: Timestamp('2011-01-25 00:00:00')},\n 'price': {0: 10.284260107718254,\n  1: 11.930300761831457,\n  2: 10.93741046217319,\n  3: 10.884574289565609,\n  4: 11.78005850418319,\n  5: 10.017209045035006,\n  6: 10.57090128181566,\n  7: 11.442792747870204,\n  8: 11.592953372130493,\n  9: 12.864146419530938},\n 'ticker': {0: 'aapl',\n  1: 'aapl',\n  2: 'aapl',\n  3: 'aapl',\n  4: 'aapl',\n  5: 'msft',\n  6: 'msft',\n  7: 'msft',\n  8: 'msft',\n  9: 'msft'}}\n\nYou may also want to provide a description of the DataFrame (using only the relevant columns).  This makes it easier for others to check the data types of each column and identify other common errors (e.g. dates as string vs. datetime64 vs. object):\nstocks.info()\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 100 entries, 0 to 99\nData columns (total 3 columns):\ndate      100 non-null datetime64[ns]\nprice     100 non-null float64\nticker    100 non-null object\ndtypes: datetime64[ns](1), float64(1), object(1)\n\nNOTE:  If your DataFrame has a MultiIndex:\nIf your DataFrame has a multiindex, you must first reset before calling to_dict.  You then need to recreate the index using set_index:\n# MultiIndex example.  First create a MultiIndex DataFrame.\ndf = stocks.set_index(['date', 'ticker'])\n>>> df\n                       price\ndate       ticker           \n2011-01-01 aapl    10.284260\n           aapl    11.930301\n           aapl    10.937410\n           aapl    10.884574\n2011-01-02 aapl    11.780059\n...\n\n# After resetting the index and passing the DataFrame to `to_dict`, make sure to use \n# `set_index` to restore the original MultiIndex.  This DataFrame can then be restored.\n\nd = df.reset_index().to_dict()\ndf_new = pd.DataFrame(d).set_index(['date', 'ticker'])\n>>> df_new.head()\n                       price\ndate       ticker           \n2011-01-01 aapl    10.284260\n           aapl    11.930301\n           aapl    10.937410\n           aapl    10.884574\n2011-01-02 aapl    11.780059\n\n    ",
        "votes": 34,
        "comentarios": [],
        "usuario": "Alexander",
        "usuario_id": 9
    },
    {
        "_id": 4,
        "fecha": { "$date" : "2020-11-08T03:20:49Z" },
        "decripcion": "\nHere is my version of dput - the standard R tool to produce reproducible reports - for Pandas DataFrames.\nIt will probably fail for more complex frames, but it seems to do the job in simple cases:\nimport pandas as pd\ndef dput(x):\n    if isinstance(x,pd.Series):\n        return \"pd.Series(%s,dtype='%s',index=pd.%s)\" % (list(x),x.dtype,x.index)\n    if isinstance(x,pd.DataFrame):\n        return \"pd.DataFrame({\" + \", \".join([\n            \"'%s': %s\" % (c,dput(x[c])) for c in x.columns]) + (\n                \"}, index=pd.%s)\" % (x.index))\n    raise NotImplementedError(\"dput\",type(x),x)\n\nnow,\ndf = pd.DataFrame({'a':[1,2,3,4,2,1,3,1]})\nassert df.equals(eval(dput(df)))\ndu = pd.get_dummies(df.a,\"foo\")\nassert du.equals(eval(dput(du)))\ndi = df\ndi.index = list('abcdefgh')\nassert di.equals(eval(dput(di)))\n\nNote that this produces a much more verbose output than DataFrame.to_dict, e.g.,\n\npd.DataFrame({\n  'foo_1':pd.Series([1, 0, 0, 0, 0, 1, 0, 1],dtype='uint8',index=pd.RangeIndex(start=0, stop=8, step=1)),\n  'foo_2':pd.Series([0, 1, 0, 0, 1, 0, 0, 0],dtype='uint8',index=pd.RangeIndex(start=0, stop=8, step=1)),\n  'foo_3':pd.Series([0, 0, 1, 0, 0, 0, 1, 0],dtype='uint8',index=pd.RangeIndex(start=0, stop=8, step=1)),\n  'foo_4':pd.Series([0, 0, 0, 1, 0, 0, 0, 0],dtype='uint8',index=pd.RangeIndex(start=0, stop=8, step=1))},\n  index=pd.RangeIndex(start=0, stop=8, step=1))\n\n\nvs\n\n{'foo_1': {0: 1, 1: 0, 2: 0, 3: 0, 4: 0, 5: 1, 6: 0, 7: 1}, \n 'foo_2': {0: 0, 1: 1, 2: 0, 3: 0, 4: 1, 5: 0, 6: 0, 7: 0}, \n 'foo_3': {0: 0, 1: 0, 2: 1, 3: 0, 4: 0, 5: 0, 6: 1, 7: 0}, \n 'foo_4': {0: 0, 1: 0, 2: 0, 3: 1, 4: 0, 5: 0, 6: 0, 7: 0}}\n\n\nfor du above, but it preserves column types.\nE.g., in the above test case,\ndu.equals(pd.DataFrame(du.to_dict()))\n==> False\n\nbecause du.dtypes is uint8 and pd.DataFrame(du.to_dict()).dtypes is int64.\n    ",
        "votes": 19,
        "comentarios": [
            {
                "decripcion": "it is clearer, though i admit i don't see why i would want to use it over to_dict",
                "fecha": { "$date" : "2017-02-23T16:55:01Z" },
                "usuario": "Paul H",
                "usuario_id": 10
            },
            {
                "decripcion": "Because it preserves column types. More specifically, du.equals(eval(dput(df))).",
                "fecha": { "$date" : "2017-02-23T16:57:25Z" },
                "usuario": "sds",
                "usuario_id": 11
            }
        ],
        "usuario": "sds",
        "usuario_id": 11
    },
    {
        "_id": 5,
        "fecha": { "$date" : "2021-04-02T01:51:27Z" },
        "decripcion": "\nYou misunderstand how boolean expressions work; they don't work like an English sentence and guess that you are talking about the same comparison for all names here. You are looking for:\nif x == 1 or y == 1 or z == 1:\n\nx and y are otherwise evaluated on their own (False if 0, True otherwise).\nYou can shorten that using a containment test against a tuple:\nif 1 in (x, y, z):\n\nor better still:\nif 1 in {x, y, z}:\n\nusing a set to take advantage of the constant-cost membership test (i.e. in takes a fixed amount of time whatever the left-hand operand is).\nExplanation\nWhen you use or, python sees each side of the operator as separate expressions. The expression x or y == 1 is treated as first a boolean test for x, then if that is False, the expression y == 1 is tested.\nThis is due to operator precedence. The or operator has a lower precedence than the == test, so the latter is evaluated first.\nHowever, even if this were not the case, and the expression x or y or z == 1 was actually interpreted as (x or y or z) == 1 instead, this would still not do what you expect it to do.\nx or y or z would evaluate to the first argument that is 'truthy', e.g. not False, numeric 0 or empty (see boolean expressions for details on what Python considers false in a boolean context).\nSo for the values x = 2; y = 1; z = 0, x or y or z would resolve to 2, because that is the first true-like value in the arguments. Then 2 == 1 would be False, even though y == 1 would be True.\nThe same would apply to the inverse; testing multiple values against a single variable; x == 1 or 2 or 3 would fail for the same reasons. Use x == 1 or x == 2 or x == 3 or x in {1, 2, 3}.\n    ",
        "votes": 991,
        "comentarios": [
            {
                "decripcion": "I wouldn't be so quick to go for the set version.  Tuple's are very cheap to create and iterate over.  On my machine at least, tuples are faster than sets so long as the size of the tuple is around 4-8 elements.  If you have to scan more than that, use a set, but if you are looking for an item out of 2-4 possibilities, a tuple is still faster!  If you can arrange for the most likely case to be first in the tuple, the win is even bigger: (my test: timeit.timeit('0 in {seq}'.format(seq=tuple(range(9, -1, -1)))))",
                "fecha": { "$date" : "2013-10-24T15:27:12Z" },
                "usuario": "SingleNegationElimination",
                "usuario_id": 12
            },
            {
                "decripcion": "@dequestarmappartialsetattr: In Python 3.3 and up, the set is stored as a constant, bypassing the creation time altogether, eliminating the creation time. Tuples can be cheap to create as Python caches a bundle of them to avoid memory churn, making that the biggest difference with sets here.",
                "fecha": { "$date" : "2013-10-24T15:29:51Z" },
                "usuario": "Martijn Pieters\u2666",
                "usuario_id": 13
            },
            {
                "decripcion": "@dequestarmappartialsetattr: If you time just the membership test, for integers sets and tuples are equally fast for the ideal scenario; matching the first element. After that tuples lose out to sets.",
                "fecha": { "$date" : "2013-10-24T15:37:11Z" },
                "usuario": "Martijn Pieters\u2666",
                "usuario_id": 13
            },
            {
                "decripcion": "@MartijnPieters: Using the set literal notation for this test isn't a savings unless the contents of the set literal are also literals, right? if 1 in {x, y, z}: can't cache the set, because x, y and z could change, so either solution needs to build a tuple or set from scratch, and I suspect whatever lookup savings you might get when checking for membership would be swamped by greater set creation time.",
                "fecha": { "$date" : "2016-09-04T00:37:09Z" },
                "usuario": "ShadowRanger",
                "usuario_id": 14
            },
            {
                "decripcion": "@ShadowRanger: yes, peephole optimisation (be it for in [...] or in {...}) only works if the contents of the list or set are immutable literals too.",
                "fecha": { "$date" : "2016-09-04T07:58:07Z" },
                "usuario": "Martijn Pieters\u2666",
                "usuario_id": 13
            }
        ],
        "usuario": "Martijn Pieters",
        "usuario_id": 15
    },
    {
        "_id": 6,
        "fecha": { "$date" : "2017-10-25T14:45:52Z" },
        "decripcion": "\nYour problem is more easily addressed with a dictionary structure like:\n\nx = 0\ny = 1\nz = 3\nd = {0: 'c', 1:'d', 2:'e', 3:'f'}\nmylist = [d[k] for k in [x, y, z]]\n\n    ",
        "votes": 108,
        "comentarios": [
            {
                "decripcion": "Or even d = \"cdef\" which leads to MyList = [\"cdef\"[k] for k in [x, y, z]]",
                "fecha": { "$date" : "2013-10-24T15:39:35Z" },
                "usuario": "aragaer",
                "usuario_id": 16
            },
            {
                "decripcion": "or map(lambda i: 'cdef'[i], [x, y, z])",
                "fecha": { "$date" : "2014-05-08T14:36:49Z" },
                "usuario": "dansalmo",
                "usuario_id": 17
            },
            {
                "decripcion": "Aside from the list comprehension which I'm not yet fully accustomed to, most of us had the same reflex: build that dict !",
                "fecha": { "$date" : "2019-03-10T18:57:53Z" },
                "usuario": "LoneWanderer",
                "usuario_id": 18
            }
        ],
        "usuario": "dansalmo",
        "usuario_id": 17
    },
    {
        "_id": 7,
        "fecha": { "$date" : "2019-05-07T09:30:20Z" },
        "decripcion": "\nAs stated by Martijn Pieters, the correct, and fastest, format is:\n\nif 1 in {x, y, z}:\n\n\nUsing his advice you would now have separate if-statements so that Python will read each statement whether the former were True or False. Such as:\n\nif 0 in {x, y, z}:\n    mylist.append(\"c\")\nif 1 in {x, y, z}:\n    mylist.append(\"d\")\nif 2 in {x, y, z}:\n    mylist.append(\"e\")\n...\n\n\nThis will work, but if you are comfortable using dictionaries (see what I did there), you can clean this up by making an initial dictionary mapping the numbers to the letters you want, then just using a for-loop:\n\nnum_to_letters = {0: \"c\", 1: \"d\", 2: \"e\", 3: \"f\"}\nfor number in num_to_letters:\n    if number in {x, y, z}:\n        mylist.append(num_to_letters[number])\n\n    ",
        "votes": 71,
        "comentarios": [
            {
                "decripcion": "@VisioN You mean for number in num_to_letters? You don't need .keys(), dicts iterate over keys by default. Regarding using a string, you mean something like this, right? for i, c in enumerate('cdef'): if i in {x, y, z}: mylist.append(c) Agreed, that would be simpler. Or better yet, s = 'cdef'; mylist = [s[i] for i in [x, y, z]]",
                "fecha": { "$date" : "2020-11-28T22:03:13Z" },
                "usuario": "wjandrea",
                "usuario_id": 19
            },
            {
                "decripcion": "@wjandrea Yes, you are right, it's my mistake! I completely forgot about the default behaviour. Unfortunately, I cannot edit my comment, so I have deleted it since you have highlighted the better approach in your comment.",
                "fecha": { "$date" : "2020-11-29T11:09:08Z" },
                "usuario": "VisioN",
                "usuario_id": 20
            }
        ],
        "usuario": "ThatGuyRussell",
        "usuario_id": 21
    },
    {
        "_id": 8,
        "fecha": { "$date" : "2013-07-11T21:24:59Z" },
        "decripcion": "\nThe direct way to write x or y or z == 0 is\n\nif any(map((lambda value: value == 0), (x,y,z))):\n    pass # write your logic.\n\n\nBut I dont think, you like it. :)\nAnd this way is ugly.\n\nThe other way (a better) is:\n\n0 in (x, y, z)\n\n\nBTW lots of ifs could be written as something like this\n\nmy_cases = {\n    0: Mylist.append(\"c\"),\n    1: Mylist.append(\"d\")\n    # ..\n}\n\nfor key in my_cases:\n    if key in (x,y,z):\n        my_cases[key]()\n        break\n\n    ",
        "votes": 50,
        "comentarios": [
            {
                "decripcion": "In your example of the dict instead of a key, you will get errors because the return value of .append is None, and calling None gives an AttributeError.  In general I agree with this method, though.",
                "fecha": { "$date" : "2014-02-08T20:57:33Z" },
                "usuario": "SethMMorton",
                "usuario_id": 22
            },
            {
                "decripcion": "the dict instead of a key is wrong, you will get Mylist=['c', 'd'] when the dictionary get initialized even if you commented out \"for..loop\" part",
                "fecha": { "$date" : "2019-04-07T01:41:32Z" },
                "usuario": "Mahmoud Elshahat",
                "usuario_id": 23
            },
            {
                "decripcion": "In your first example filter would be better than map, as it will return only instances where lambda evaluates to true",
                "fecha": { "$date" : "2019-09-16T05:17:22Z" },
                "usuario": "Alex",
                "usuario_id": 24
            },
            {
                "decripcion": "A comprehension is much simpler than a map of a lambda: any(v == 0 for v in (x, y, z))",
                "fecha": { "$date" : "2020-02-08T05:21:05Z" },
                "usuario": "wjandrea",
                "usuario_id": 19
            }
        ],
        "usuario": "akaRem",
        "usuario_id": 25
    },
    {
        "_id": 9,
        "fecha": { "$date" : "2015-08-13T18:06:52Z" },
        "decripcion": "\nIf you ARE very very lazy, you can put the values inside an array. Such as\n\nlist = []\nlist.append(x)\nlist.append(y)\nlist.append(z)\nnums = [add numbers here]\nletters = [add corresponding letters here]\nfor index in range(len(nums)):\n    for obj in list:\n        if obj == num[index]:\n            MyList.append(letters[index])\n            break\n\n\nYou can also put the numbers and letters in a dictionary and do it, but this is probably a LOT more complicated than simply if statements. That's what you get for trying to be extra lazy :)\n\nOne more thing, your \n\nif x or y or z == 0:\n\n\nwill compile, but not in the way you want it to. When you simply put a variable in an if statement (example)\n\nif b\n\n\nthe program will check if the variable is not null. Another way to write the above statement (which makes more sense) is \n\nif bool(b)\n\n\nBool is an inbuilt function in python which basically does the command of verifying a boolean statement (If you don't know what that is, it is what you are trying to make in your if statement right now :))\n\nAnother lazy way I found is :\n\nif any([x==0, y==0, z==0])\n\n    ",
        "votes": 36,
        "comentarios": [
            {
                "decripcion": "-1 There's a lot of bad practice here. list is a Python builtin; use another name instead, like xyz for example. Why do you construct the list in four steps when you can do one, i.e. xyz = [x, y, z]? Don't use parallel lists, use a dict instead. All in all, this solution is much more convoluted than ThatGuyRussell's. Also for the last part, why not do a comprehension, i.e. any(v == 0 for v in (x, y, z))? Also arrays are something else in Python.",
                "fecha": { "$date" : "2020-02-08T05:36:16Z" },
                "usuario": "wjandrea",
                "usuario_id": 19
            }
        ],
        "usuario": "ytpillai",
        "usuario_id": 26
    },
    {
        "_id": 10,
        "fecha": { "$date" : "2014-06-05T11:31:39Z" },
        "decripcion": "\nTo check if a value is contained within a set of variables you can use the inbuilt modules           itertools and operator.\n\nFor example:\n\nImports:\n\nfrom itertools import repeat\nfrom operator import contains\n\n\nDeclare variables:\n\nx = 0\ny = 1\nz = 3\n\n\nCreate mapping of values (in the order you want to check):\n\ncheck_values = (0, 1, 3)\n\n\nUse itertools to allow repetition of the variables:\n\ncheck_vars = repeat((x, y, z))\n\n\nFinally, use the map function to create an iterator:\n\nchecker = map(contains, check_vars, check_values)\n\n\nThen, when checking for the values (in the original order), use next():\n\nif next(checker)  # Checks for 0\n    # Do something\n    pass\nelif next(checker)  # Checks for 1\n    # Do something\n    pass\n\n\netc...\n\nThis has an advantage over the lambda x: x in (variables) because operator is an inbuilt module and is faster and more efficient than using lambda which has to create a custom in-place function.\n\nAnother option for checking if there is a non-zero (or False) value in a list:\n\nnot (x and y and z)\n\n\nEquivalent:\n\nnot all((x, y, z))\n\n    ",
        "votes": 33,
        "comentarios": [
            {
                "decripcion": "This doesn't answer the OP's question.  It only covers the first case in the provided example.",
                "fecha": { "$date" : "2014-06-04T17:39:09Z" },
                "usuario": "wallacer",
                "usuario_id": 27
            }
        ],
        "usuario": "GuiltyDolphin",
        "usuario_id": 28
    },
    {
        "_id": 11,
        "fecha": { "$date" : "2015-02-10T14:58:02Z" },
        "decripcion": "\nI think this will handle it better:\n\nmy_dict = {0: \"c\", 1: \"d\", 2: \"e\", 3: \"f\"}\n\ndef validate(x, y, z):\n    for ele in [x, y, z]:\n        if ele in my_dict.keys():\n            return my_dict[ele]\n\n\nOutput:\n\nprint validate(0, 8, 9)\nc\nprint validate(9, 8, 9)\nNone\nprint validate(9, 8, 2)\ne\n\n    ",
        "votes": 31,
        "comentarios": [],
        "usuario": "Bhargav Boda",
        "usuario_id": 29
    },
    {
        "_id": 12,
        "fecha": { "$date" : "2018-04-01T13:10:46Z" },
        "decripcion": "\nSet is the good approach here, because it orders the variables, what seems to be your goal here. {z,y,x} is {0,1,3} whatever the order of the parameters.\n\n>>> [\"cdef\"[i] for i in {z,x,y}]\n['c', 'd', 'f']\n\n\nThis way, the whole solution is O(n).\n    ",
        "votes": 31,
        "comentarios": [
            {
                "decripcion": "You should add a description of what your code accomplishes and how it does it. Short answers using only code is discouraged",
                "fecha": { "$date" : "2015-06-10T04:19:22Z" },
                "usuario": "Raniz",
                "usuario_id": 30
            }
        ],
        "usuario": "B. M.",
        "usuario_id": 31
    },
    {
        "_id": 13,
        "fecha": { "$date" : "2018-09-04T11:59:05Z" },
        "decripcion": "\nAll of the excellent answers provided here concentrate on the specific requirement of the original poster and concentrate on the if 1 in {x,y,z} solution put forward by Martijn Pieters.\nWhat they ignore is the broader implication of the question:\nHow do I test one variable against multiple values?\nThe solution provided will not work for partial hits if using strings for example:\nTest if the string \"Wild\" is in multiple values\n\n>>> x = \"Wild things\"\n>>> y = \"throttle it back\"\n>>> z = \"in the beginning\"\n>>> if \"Wild\" in {x, y, z}: print (True)\n... \n\n\nor\n\n>>> x = \"Wild things\"\n>>> y = \"throttle it back\"\n>>> z = \"in the beginning\"\n>>> if \"Wild\" in [x, y, z]: print (True)\n... \n\n\nfor this scenario it's easiest to convert to a string\n\n>>> [x, y, z]\n['Wild things', 'throttle it back', 'in the beginning']\n>>> {x, y, z}\n{'in the beginning', 'throttle it back', 'Wild things'}\n>>> \n\n>>> if \"Wild\" in str([x, y, z]): print (True)\n... \nTrue\n>>> if \"Wild\" in str({x, y, z}): print (True)\n... \nTrue\n\n\nIt should be noted however, as mentioned by @codeforester, that word boundries are lost with this method, as in:    \n\n>>> x=['Wild things', 'throttle it back', 'in the beginning']\n>>> if \"rot\" in str(x): print(True)\n... \nTrue\n\n\nthe 3 letters rot do exist in combination in the list but not as an individual word. Testing for \" rot \" would fail but if one of the list items were \"rot in hell\", that would fail as well.\nThe upshot being, be careful with your search criteria if using this method and be aware that it does have this limitation.\n    ",
        "votes": 31,
        "comentarios": [],
        "usuario": "Rolf of Saxony",
        "usuario_id": 32
    },
    {
        "_id": 14,
        "fecha": { "$date" : "2018-09-04T03:53:17Z" },
        "decripcion": "\nIf you want to use if, else statements following is another solution:\n\nmyList = []\naList = [0, 1, 3]\n\nfor l in aList:\n    if l==0: myList.append('c')\n    elif l==1: myList.append('d')\n    elif l==2: myList.append('e')\n    elif l==3: myList.append('f')\n\nprint(myList)\n\n    ",
        "votes": 30,
        "comentarios": [],
        "usuario": "hamid",
        "usuario_id": 33
    },
    {
        "_id": 15,
        "fecha": { "$date" : "2015-06-29T07:03:58Z" },
        "decripcion": "\nThis code may be helpful\n\nL ={x, y, z}\nT= ((0,\"c\"),(1,\"d\"),(2,\"e\"),(3,\"f\"),)\nList2=[]\nfor t in T :\nif t[0] in L :\n    List2.append(t[1])\n    break;\n\n    ",
        "votes": 27,
        "comentarios": [],
        "usuario": "michael zxc858",
        "usuario_id": 34
    },
    {
        "_id": 16,
        "fecha": { "$date" : "2015-02-27T01:48:29Z" },
        "decripcion": "\nd = {0:'c', 1:'d', 2:'e', 3: 'f'}\nx, y, z = (0, 1, 3)\nprint [v for (k,v) in d.items() if x==k or y==k or z==k]\n\n    ",
        "votes": 26,
        "comentarios": [],
        "usuario": "Saksham Varma",
        "usuario_id": 35
    },
    {
        "_id": 17,
        "fecha": { "$date" : "2018-12-03T05:13:18Z" },
        "decripcion": "\nYou can try the method shown below. In this method, you will have the freedom to specify/input the number of variables that you wish to enter.\n\nmydict = {0:\"c\", 1:\"d\", 2:\"e\", 3:\"f\"}\nmylist= []\n\nnum_var = int(raw_input(\"How many variables? \")) #Enter 3 when asked for input.\n\nfor i in range(num_var): \n    ''' Enter 0 as first input, 1 as second input and 3 as third input.'''\n    globals()['var'+str('i').zfill(3)] = int(raw_input(\"Enter an integer between 0 and 3 \"))\n    mylist += mydict[globals()['var'+str('i').zfill(3)]]\n\nprint mylist\n>>> ['c', 'd', 'f']\n\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "Siddharth Satpathy",
        "usuario_id": 36
    },
    {
        "_id": 18,
        "fecha": { "$date" : "2017-06-05T06:50:28Z" },
        "decripcion": "\nOne line solution:\n\nmylist = [{0: 'c', 1: 'd', 2: 'e', 3: 'f'}[i] for i in [0, 1, 2, 3] if i in (x, y, z)]\n\n\nOr:\n\nmylist = ['cdef'[i] for i in range(4) if i in (x, y, z)]\n\n    ",
        "votes": 11,
        "comentarios": [],
        "usuario": "Vinayak Kaniyarakkal",
        "usuario_id": 37
    },
    {
        "_id": 19,
        "fecha": { "$date" : "2020-07-11T00:08:50Z" },
        "decripcion": "\nThe most pythonic way of representing your pseudo-code in Python would be:\nx = 0\ny = 1\nz = 3\nmylist = []\n\nif any(v == 0 for v in (x, y, z)):\n    mylist.append(\"c\")\nif any(v == 1 for v in (x, y, z)):\n    mylist.append(\"d\")\nif any(v == 2 for v in (x, y, z)):\n    mylist.append(\"e\")\nif any(v == 3 for v in (x, y, z)):\n    mylist.append(\"f\")\n\n    ",
        "votes": 10,
        "comentarios": [
            {
                "decripcion": "This approach is more universal than ` if 2 in (x, y, z): mylist.append('e')` because allows arbitrary comparisons (e.g. if any(v >= 42 for v in (x, y, z)): ).  And performance of all 3 methods (2 in {x,y,z}, 2 in (x,y,z), any(_v == 2 for _v in (x,y,z))) seems to be almost the same in CPython3.6 (see Gist)",
                "fecha": { "$date" : "2019-05-04T04:47:11Z" },
                "usuario": "imposeren",
                "usuario_id": 38
            }
        ],
        "usuario": "rsalmei",
        "usuario_id": 39
    },
    {
        "_id": 20,
        "fecha": { "$date" : "2019-04-10T17:49:04Z" },
        "decripcion": "\nMaybe you need direct formula for output bits set.\n\nx=0 or y=0 or z=0   is equivalent to x*y*z = 0\n\nx=1 or y=1 or z=1   is equivalent to (x-1)*(y-1)*(z-1)=0\n\nx=2 or y=2 or z=2   is equivalent to (x-2)*(y-2)*(z-2)=0\n\n\nLet's map to bits: 'c':1 'd':0xb10 'e':0xb100 'f':0xb1000\n\nRelation of isc (is 'c'):\n\nif xyz=0 then isc=1 else isc=0\n\n\nUse math if formula https://youtu.be/KAdKCgBGK0k?list=PLnI9xbPdZUAmUL8htSl6vToPQRRN3hhFp&t=315\n\n[c]: (xyz=0 and isc=1) or (((xyz=0 and isc=1) or (isc=0)) and (isc=0))\n\n[d]: ((x-1)(y-1)(z-1)=0 and isc=2) or (((xyz=0 and isd=2) or (isc=0)) and (isc=0))\n\n...\n\nConnect these formulas by following logic:\n\n\nlogic and is the sum of squares of equations\nlogic or is the product of equations\n\n\nand you'll have a total equation\nexpress sum and you have total formula of sum\n\nthen sum&1 is c, sum&2 is d, sum&4 is e, sum&5 is f\n\nAfter this you may form predefined array where index of string elements would correspond to ready string.\n\narray[sum] gives you the string.\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "Serg",
        "usuario_id": 40
    },
    {
        "_id": 21,
        "fecha": { "$date" : "2018-11-06T14:26:24Z" },
        "decripcion": "\nIt can be done easily as \n\nfor value in [var1,var2,var3]:\n     li.append(\"targetValue\")\n\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "Seeni",
        "usuario_id": 41
    },
    {
        "_id": 22,
        "fecha": { "$date" : "2018-09-20T02:18:55Z" },
        "decripcion": "\nTo test multiple variables with one single value: if 1 in {a,b,c}:\n\nTo test multiple values with one variable: if a in {1, 2, 3}:\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "alamin",
        "usuario_id": 42
    },
    {
        "_id": 23,
        "fecha": { "$date" : "2018-08-27T09:45:00Z" },
        "decripcion": "\nLooks like you're building some kind of Caesar cipher.\n\nA much more generalized approach is this:\n\ninput_values = (0, 1, 3)\norigo = ord('c')\n[chr(val + origo) for val in inputs]\n\n\noutputs\n\n['c', 'd', 'f']\n\n\nNot sure if it's a desired side effect of your code, but the order of your output will always be sorted.\n\nIf this is what you want, the final line can be changed to:\n\nsorted([chr(val + origo) for val in inputs])\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "firelynx",
        "usuario_id": 43
    },
    {
        "_id": 24,
        "fecha": { "$date" : "2018-07-31T16:54:00Z" },
        "decripcion": "\nYou can use dictionary :\n\nx = 0\ny = 1\nz = 3\nlist=[]\ndict = {0: 'c', 1: 'd', 2: 'e', 3: 'f'}\nif x in dict:\n    list.append(dict[x])\nelse:\n    pass\n\nif y in dict:\n    list.append(dict[y])\nelse:\n    pass\nif z in dict:\n    list.append(dict[z])\nelse:\n    pass\n\nprint list\n\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "This may append same more then once this. Set?",
                "fecha": { "$date" : "2019-02-19T04:49:25Z" },
                "usuario": "Serg",
                "usuario_id": 40
            }
        ],
        "usuario": "Rohit Gawas",
        "usuario_id": 44
    },
    {
        "_id": 25,
        "fecha": { "$date" : "2019-10-11T12:17:15Z" },
        "decripcion": "\nWithout dict, try this solution:\n\nx, y, z = 0, 1, 3    \noffset = ord('c')\n[chr(i + offset) for i in (x,y,z)]\n\n\nand gives:\n\n['c', 'd', 'f']\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Massifox",
        "usuario_id": 45
    },
    {
        "_id": 26,
        "fecha": { "$date" : "2019-09-09T18:23:24Z" },
        "decripcion": "\nYou can unite this\n\nx = 0\ny = 1\nz = 3\n\n\nin one variable.\n\nIn [1]: xyz = (0,1,3,) \nIn [2]: mylist = []\n\n\nChange our conditions as:\n\nIn [3]: if 0 in xyz: \n    ...:     mylist.append(\"c\") \n    ...: if 1 in xyz: \n    ...:     mylist.append(\"d\") \n    ...: if 2 in xyz: \n    ...:     mylist.append(\"e\") \n    ...: if 3 in xyz:  \n    ...:     mylist.append(\"f\") \n\n\nOutput:\n\nIn [21]: mylist                                                                                \nOut[21]: ['c', 'd', 'f']\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Serhii",
        "usuario_id": 46
    },
    {
        "_id": 27,
        "fecha": { "$date" : "2019-04-08T05:18:38Z" },
        "decripcion": "\nThis will help you.\n\ndef test_fun(val):\n    x = 0\n    y = 1\n    z = 2\n    myList = []\n    if val in (x, y, z) and val == 0:\n        myList.append(\"C\")\n    if val in (x, y, z) and val == 1:\n        myList.append(\"D\")\n    if val in (x, y, z) and val == 2:\n        myList.append(\"E\")\n\ntest_fun(2);\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Mayur",
        "usuario_id": 47
    },
    {
        "_id": 28,
        "fecha": { "$date" : "2019-11-06T11:20:35Z" },
        "decripcion": "\nProblem\n\nWhile the pattern for testing multiple values\n\n>>> 2 in {1, 2, 3}\nTrue\n>>> 5 in {1, 2, 3}\nFalse\n\n\nis very readable and is working in many situation, there is one pitfall:\n\n>>> 0 in {True, False}\nTrue\n\n\nBut we want to have\n\n>>> (0 is True) or (0 is False)\nFalse\n\n\nSolution\n\nOne generalization of the previous expression is based on the answer from ytpillai:\n\n>>> any([0 is True, 0 is False])\nFalse\n\n\nwhich can be written as\n\n>>> any(0 is item for item in (True, False))\nFalse\n\n\nWhile this expression returns the right result it is not as readable as the first expression :-(\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "fhgd",
        "usuario_id": 48
    },
    {
        "_id": 29,
        "fecha": { "$date" : "2020-09-24T15:21:04Z" },
        "decripcion": "\nyou can develop it through two ways\n    def compareVariables(x,y,z):\n        mylist = []\n        if x==0 or y==0 or z==0:\n            mylist.append('c')\n        if  x==1 or y==1 or z==1:\n            mylist.append('d')\n        if  x==2 or y==2 or z==2:\n            mylist.append('e')\n        if  x==3 or y==3 or z==3:\n            mylist.append('f')\n        else:\n            print(\"wrong input value!\")\n        print('first:',mylist)\n\n        compareVariables(1, 3, 2)\n\nOr\n    def compareVariables(x,y,z):\n        mylist = []\n        if 0 in (x,y,z):\n             mylist.append('c')\n        if 1 in (x,y,z):\n             mylist.append('d')\n        if 2 in (x,y,z):\n             mylist.append('e')\n        if 3 in (x,y,z):\n             mylist.append('f')\n        else:\n             print(\"wrong input value!\")\n        print('second:',mylist)\n\n        compareVariables(1, 3, 2)\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "behnaz.sheikhi",
        "usuario_id": 49
    },
    {
        "_id": 30,
        "fecha": { "$date" : "2021-04-11T19:30:17Z" },
        "decripcion": "\nThe or does not work like that, as explained by this answer.\nWhile the generic answer would be use\nif 0 in (x, y, z):\n    ...\n\nthis is not the best one for the specific problem. In your case you're doing repeated tests, therefore it is worthwhile to compose a set of these variables:\nvalues = {x, y, z}\n\nif 0 in values:\n    mylist.append(\"c\")\n\nif 1 in values:\n    mylist.append(\"d\")\n\nWe can simplify this using a dictionary - this will result in the same values:\nmappings = {0: \"c\", 1: \"d\", ...}\nfor k in mappings:\n    if k in values:\n        mylist.append(mappings[k])\n\nOr if the ordering of the mylist is arbitrary, you can loop over the values instead and match them to the mappings:\nmappings = {0: \"c\", 1: \"d\", ...}\nfor v in (x, y, z):\n    if v in mappings:\n        mylist.append(mappings[v])\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Antti Haapala",
        "usuario_id": 50
    },
    {
        "_id": 31,
        "fecha": { "$date" : "2021-04-12T01:33:17Z" },
        "decripcion": "\nHere is one more way to do it:\nx = 0\ny = 1\nz = 3\nmylist = []\n\nif any(i in [0] for i in[x,y,z]):\n    mylist.append(\"c\")\nif any(i in [1] for i in[x,y,z]):\n    mylist.append(\"d\")\nif any(i in [2] for i in[x,y,z]):\n    mylist.append(\"e\")\nif any(i in [3] for i in[x,y,z]):\n    mylist.append(\"f\")\n\nIt is a mix of list comprehension and any keyword.\n    ",
        "votes": -1,
        "comentarios": [
            {
                "decripcion": "Why i in [0] instead of just i == 0?",
                "fecha": { "$date" : "2021-04-12T17:08:48Z" },
                "usuario": "Tomerikoo",
                "usuario_id": 51
            },
            {
                "decripcion": "For a single comparison like in this question, you can use \"==\" but if you want multiple comparisons with multiple variables, then you can use the \"in\" operator like: if any(i in [0,5,4,9,7] for i in[x,y,z] )",
                "fecha": { "$date" : "2021-04-13T01:21:26Z" },
                "usuario": "Abhishek Kumar Saw",
                "usuario_id": 52
            }
        ],
        "usuario": "Abhishek Kumar Saw",
        "usuario_id": 52
    },
    {
        "_id": 32,
        "fecha": { "$date" : "2020-06-06T17:56:58Z" },
        "decripcion": "\nThe simplest way to accomplish this is to put the input method in a while loop. Use continue when you get bad input, and break out of the loop when you're satisfied.\n\nWhen Your Input Might Raise an Exception\n\nUse try and except to detect when the user enters data that can't be parsed.\n\nwhile True:\n    try:\n        # Note: Python 2.x users should use raw_input, the equivalent of 3.x's input\n        age = int(input(\"Please enter your age: \"))\n    except ValueError:\n        print(\"Sorry, I didn't understand that.\")\n        #better try again... Return to the start of the loop\n        continue\n    else:\n        #age was successfully parsed!\n        #we're ready to exit the loop.\n        break\nif age >= 18: \n    print(\"You are able to vote in the United States!\")\nelse:\n    print(\"You are not able to vote in the United States.\")\n\n\nImplementing Your Own Validation Rules\n\nIf you want to reject values that Python can successfully parse, you can add your own validation logic.\n\nwhile True:\n    data = input(\"Please enter a loud message (must be all caps): \")\n    if not data.isupper():\n        print(\"Sorry, your response was not loud enough.\")\n        continue\n    else:\n        #we're happy with the value given.\n        #we're ready to exit the loop.\n        break\n\nwhile True:\n    data = input(\"Pick an answer from A to D:\")\n    if data.lower() not in ('a', 'b', 'c', 'd'):\n        print(\"Not an appropriate choice.\")\n    else:\n        break\n\n\nCombining Exception Handling and Custom Validation\n\nBoth of the above techniques can be combined into one loop.\n\nwhile True:\n    try:\n        age = int(input(\"Please enter your age: \"))\n    except ValueError:\n        print(\"Sorry, I didn't understand that.\")\n        continue\n\n    if age < 0:\n        print(\"Sorry, your response must not be negative.\")\n        continue\n    else:\n        #age was successfully parsed, and we're happy with its value.\n        #we're ready to exit the loop.\n        break\nif age >= 18: \n    print(\"You are able to vote in the United States!\")\nelse:\n    print(\"You are not able to vote in the United States.\")\n\n\nEncapsulating it All in a Function\n\nIf you need to ask your user for a lot of different values, it might be useful to put this code in a function, so you don't have to retype it every time.\n\ndef get_non_negative_int(prompt):\n    while True:\n        try:\n            value = int(input(prompt))\n        except ValueError:\n            print(\"Sorry, I didn't understand that.\")\n            continue\n\n        if value < 0:\n            print(\"Sorry, your response must not be negative.\")\n            continue\n        else:\n            break\n    return value\n\nage = get_non_negative_int(\"Please enter your age: \")\nkids = get_non_negative_int(\"Please enter the number of children you have: \")\nsalary = get_non_negative_int(\"Please enter your yearly earnings, in dollars: \")\n\n\nPutting It All Together\n\nYou can extend this idea to make a very generic input function:\n\ndef sanitised_input(prompt, type_=None, min_=None, max_=None, range_=None):\n    if min_ is not None and max_ is not None and max_ < min_:\n        raise ValueError(\"min_ must be less than or equal to max_.\")\n    while True:\n        ui = input(prompt)\n        if type_ is not None:\n            try:\n                ui = type_(ui)\n            except ValueError:\n                print(\"Input type must be {0}.\".format(type_.__name__))\n                continue\n        if max_ is not None and ui > max_:\n            print(\"Input must be less than or equal to {0}.\".format(max_))\n        elif min_ is not None and ui < min_:\n            print(\"Input must be greater than or equal to {0}.\".format(min_))\n        elif range_ is not None and ui not in range_:\n            if isinstance(range_, range):\n                template = \"Input must be between {0.start} and {0.stop}.\"\n                print(template.format(range_))\n            else:\n                template = \"Input must be {0}.\"\n                if len(range_) == 1:\n                    print(template.format(*range_))\n                else:\n                    expected = \" or \".join((\n                        \", \".join(str(x) for x in range_[:-1]),\n                        str(range_[-1])\n                    ))\n                    print(template.format(expected))\n        else:\n            return ui\n\n\nWith usage such as:\n\nage = sanitised_input(\"Enter your age: \", int, 1, 101)\nanswer = sanitised_input(\"Enter your answer: \", str.lower, range_=('a', 'b', 'c', 'd'))\n\n\nCommon Pitfalls, and Why you Should Avoid Them\n\nThe Redundant Use of Redundant input Statements\n\nThis method works but is generally considered poor style:\n\ndata = input(\"Please enter a loud message (must be all caps): \")\nwhile not data.isupper():\n    print(\"Sorry, your response was not loud enough.\")\n    data = input(\"Please enter a loud message (must be all caps): \")\n\n\nIt might look attractive initially because it's shorter than the while True method, but it violates the Don't Repeat Yourself principle of software development. This increases the likelihood of bugs in your system. What if you want to backport to 2.7 by changing input to raw_input, but accidentally change only the first input above? It's a SyntaxError just waiting to happen.\n\nRecursion Will Blow Your Stack\n\nIf you've just learned about recursion, you might be tempted to use it in get_non_negative_int so you can dispose of the while loop.\n\ndef get_non_negative_int(prompt):\n    try:\n        value = int(input(prompt))\n    except ValueError:\n        print(\"Sorry, I didn't understand that.\")\n        return get_non_negative_int(prompt)\n\n    if value < 0:\n        print(\"Sorry, your response must not be negative.\")\n        return get_non_negative_int(prompt)\n    else:\n        return value\n\n\nThis appears to work fine most of the time, but if the user enters invalid data enough times, the script will terminate with a RuntimeError: maximum recursion depth exceeded. You may think \"no fool would make 1000 mistakes in a row\", but you're underestimating the ingenuity of fools!\n    ",
        "votes": 852,
        "comentarios": [
            {
                "decripcion": "Its fun reading it with many examples, kudos. Underrated lesson: \"Don't underestimate the ingenuity of fools!\"",
                "fecha": { "$date" : "2017-01-03T02:02:47Z" },
                "usuario": "vpibano",
                "usuario_id": 59
            },
            {
                "decripcion": "Not only would I have upvoted both the Q&A anyway, as they're great, but you sealed the deal with \"dickety six\". Well done, @Kevin.",
                "fecha": { "$date" : "2018-02-02T15:58:58Z" },
                "usuario": "erekalper",
                "usuario_id": 60
            },
            {
                "decripcion": "Don't estimate the ingenuity of fools... and clever attackers. A DOS attack would be easiest for this sort of thing, but others may be possible.",
                "fecha": { "$date" : "2019-04-28T02:53:37Z" },
                "usuario": "Solomon Ucko",
                "usuario_id": 61
            },
            {
                "decripcion": "@JArunMani I don't think it would be poor style, but might be a little less readable. You will indeed have only one input per loop and the loop will become very short, but the condition might become pretty long...",
                "fecha": { "$date" : "2020-05-09T08:40:15Z" },
                "usuario": "Tomerikoo",
                "usuario_id": 51
            },
            {
                "decripcion": "@laundmo,certainly I release the code blocks that I wrote into the public domain. Feel free to use them in any context, without my explicit permission or knowledge. Regarding the non-code-block segments, If you want to paste my entire answer into a \"Learn Python\" book you're writing, let's talk royalties ;-)",
                "fecha": { "$date" : "2020-07-24T13:50:12Z" },
                "usuario": "Kevin",
                "usuario_id": 62
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 33,
        "fecha": { "$date" : "2018-02-24T16:44:54Z" },
        "decripcion": "\nWhy would you do a while True and then break out of this loop while you can also just put your requirements in the while statement since all you want is to stop once you have the age?\n\nage = None\nwhile age is None:\n    input_value = input(\"Please enter your age: \")\n    try:\n        # try and convert the string input to a number\n        age = int(input_value)\n    except ValueError:\n        # tell the user off\n        print(\"{input} is not a number, please enter a number only\".format(input=input_value))\nif age >= 18:\n    print(\"You are able to vote in the United States!\")\nelse:\n    print(\"You are not able to vote in the United States.\")\n\n\nThis would result in the following:\n\nPlease enter your age: *potato*\npotato is not a number, please enter a number only\nPlease enter your age: *5*\nYou are not able to vote in the United States.\n\n\nthis will work since age will never have a value that will not make sense and the code follows the logic of your \"business process\"\n    ",
        "votes": 50,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 34,
        "fecha": { "$date" : "2018-12-21T18:25:22Z" },
        "decripcion": "\nThough the accepted answer is amazing. I would also like to share a quick hack for this problem. (This takes care of the negative age problem as well.) \n\nf=lambda age: (age.isdigit() and ((int(age)>=18  and \"Can vote\" ) or \"Cannot vote\")) or \\\nf(input(\"invalid input. Try again\\nPlease enter your age: \"))\nprint(f(input(\"Please enter your age: \")))\n\n\nP.S. This code is for python 3.x.\n    ",
        "votes": 26,
        "comentarios": [
            {
                "decripcion": "Note that this code is recursive, but recursion isn't necessary here, and as Kevin said, it can blow your stack.",
                "fecha": { "$date" : "2016-01-31T08:12:08Z" },
                "usuario": "PM 2Ring",
                "usuario_id": 64
            },
            {
                "decripcion": "@PM2Ring - you are right. But my purpose here was just to show how \"short circuiting\" can minimise (beautify) long pieces of code.",
                "fecha": { "$date" : "2016-02-03T08:58:15Z" },
                "usuario": "aaveg",
                "usuario_id": 65
            },
            {
                "decripcion": "Why would you assign a lambda to a variable, just use def instead. def f(age): is far clearer than f = lambda age:",
                "fecha": { "$date" : "2017-05-16T22:29:33Z" },
                "usuario": "GP89",
                "usuario_id": 66
            },
            {
                "decripcion": "In some cases, you may need the age just once and then there is no use of that function. One may want to use a function and throw it away after the job is done. Also, this may not be the best way, but it definitely is a different way of doing it (which was the purpose of my solution).",
                "fecha": { "$date" : "2017-05-16T23:17:04Z" },
                "usuario": "aaveg",
                "usuario_id": 65
            },
            {
                "decripcion": "@aaveg how would you turn this code to actually save the age provided by the user?",
                "fecha": { "$date" : "2019-07-04T20:04:31Z" },
                "usuario": "Tytire Recubans",
                "usuario_id": 67
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 35,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nFunctional approach or \"look mum no loops!\":\nfrom itertools import chain, repeat\n\nprompts = chain([\"Enter a number: \"], repeat(\"Not a number! Try again: \"))\nreplies = map(input, prompts)\nvalid_response = next(filter(str.isdigit, replies))\nprint(valid_response)\n\nEnter a number:  a\nNot a number! Try again:  b\nNot a number! Try again:  1\n1\n\nor if you want to have a \"bad input\" message separated from an input prompt as in other answers:\nprompt_msg = \"Enter a number: \"\nbad_input_msg = \"Sorry, I didn't understand that.\"\nprompts = chain([prompt_msg], repeat('\\n'.join([bad_input_msg, prompt_msg])))\nreplies = map(input, prompts)\nvalid_response = next(filter(str.isdigit, replies))\nprint(valid_response)\n\nEnter a number:  a\nSorry, I didn't understand that.\nEnter a number:  b\nSorry, I didn't understand that.\nEnter a number:  1\n1\n\nHow does it work?\n\n\nprompts = chain([\"Enter a number: \"], repeat(\"Not a number! Try again: \"))\n\nThis combination of itertools.chain and itertools.repeat will create an iterator\nwhich will yield strings \"Enter a number: \" once, and \"Not a number! Try again: \" an infinite number of times:\nfor prompt in prompts:\n    print(prompt)\n\nEnter a number: \nNot a number! Try again: \nNot a number! Try again: \nNot a number! Try again: \n# ... and so on\n\n\nreplies = map(input, prompts) - here map will apply all the prompts strings from the previous step to the input function. E.g.:\nfor reply in replies:\n    print(reply)\n\nEnter a number:  a\na\nNot a number! Try again:  1\n1\nNot a number! Try again:  it doesn't care now\nit doesn't care now\n# and so on...\n\n\nWe use filter and str.isdigit to filter out those strings that contain only digits:\nonly_digits = filter(str.isdigit, replies)\nfor reply in only_digits:\n    print(reply)\n\nEnter a number:  a\nNot a number! Try again:  1\n1\nNot a number! Try again:  2\n2\nNot a number! Try again:  b\nNot a number! Try again: # and so on...\n\nAnd to get only the first digits-only string we use next.\n\nOther validation rules:\n\nString methods: Of course you can use other string methods like str.isalpha to get only alphabetic strings, or str.isupper to get only uppercase. See docs for the full list.\n\nMembership testing:\nThere are several different ways to perform it. One of them is by using __contains__ method:\nfrom itertools import chain, repeat\n\nfruits = {'apple', 'orange', 'peach'}\nprompts = chain([\"Enter a fruit: \"], repeat(\"I don't know this one! Try again: \"))\nreplies = map(input, prompts)\nvalid_response = next(filter(fruits.__contains__, replies))\nprint(valid_response)\n\nEnter a fruit:  1\nI don't know this one! Try again:  foo\nI don't know this one! Try again:  apple\napple\n\n\nNumbers comparison:\nThere are useful comparison methods which we can use here. For example, for __lt__ (<):\nfrom itertools import chain, repeat\n\nprompts = chain([\"Enter a positive number:\"], repeat(\"I need a positive number! Try again:\"))\nreplies = map(input, prompts)\nnumeric_strings = filter(str.isnumeric, replies)\nnumbers = map(float, numeric_strings)\nis_positive = (0.).__lt__\nvalid_response = next(filter(is_positive, numbers))\nprint(valid_response)\n\nEnter a positive number: a\nI need a positive number! Try again: -5\nI need a positive number! Try again: 0\nI need a positive number! Try again: 5\n5.0\n\nOr, if you don't like using dunder methods (dunder = double-underscore), you can always define your own function, or use the ones from the operator module.\n\nPath existance:\nHere one can use pathlib library and its Path.exists method:\nfrom itertools import chain, repeat\nfrom pathlib import Path\n\nprompts = chain([\"Enter a path: \"], repeat(\"This path doesn't exist! Try again: \"))\nreplies = map(input, prompts)\npaths = map(Path, replies)\nvalid_response = next(filter(Path.exists, paths))\nprint(valid_response)\n\nEnter a path:  a b c\nThis path doesn't exist! Try again:  1\nThis path doesn't exist! Try again:  existing_file.txt\nexisting_file.txt\n\n\n\nLimiting number of tries:\nIf you don't want to torture a user by asking him something an infinite number of times, you can specify a limit in a call of itertools.repeat. This can be combined with providing a default value to the next function:\nfrom itertools import chain, repeat\n\nprompts = chain([\"Enter a number:\"], repeat(\"Not a number! Try again:\", 2))\nreplies = map(input, prompts)\nvalid_response = next(filter(str.isdigit, replies), None)\nprint(\"You've failed miserably!\" if valid_response is None else 'Well done!')\n\nEnter a number: a\nNot a number! Try again: b\nNot a number! Try again: c\nYou've failed miserably!\n\nPreprocessing input data:\nSometimes we don't want to reject an input if the user accidentally supplied it IN CAPS or with a space in the beginning or an end of the string. To take these simple mistakes into account we can preprocess the input data by applying str.lower and str.strip methods. For example, for the case of membership testing the code will look like this:\nfrom itertools import chain, repeat\n\nfruits = {'apple', 'orange', 'peach'}\nprompts = chain([\"Enter a fruit: \"], repeat(\"I don't know this one! Try again: \"))\nreplies = map(input, prompts)\nlowercased_replies = map(str.lower, replies)\nstripped_replies = map(str.strip, lowercased_replies)\nvalid_response = next(filter(fruits.__contains__, stripped_replies))\nprint(valid_response)\n\nEnter a fruit:  duck\nI don't know this one! Try again:     Orange\norange\n\nIn the case when you have many functions to use for preprocessing, it might be easier to use a function performing a function composition. For example, using the one from here:\nfrom itertools import chain, repeat\n\nfrom lz.functional import compose\n\nfruits = {'apple', 'orange', 'peach'}\nprompts = chain([\"Enter a fruit: \"], repeat(\"I don't know this one! Try again: \"))\nreplies = map(input, prompts)\nprocess = compose(str.strip, str.lower)  # you can add more functions here\nprocessed_replies = map(process, replies)\nvalid_response = next(filter(fruits.__contains__, processed_replies))\nprint(valid_response)\n\nEnter a fruit:  potato\nI don't know this one! Try again:   PEACH\npeach\n\nCombining validation rules:\nFor a simple case, for example, when the program asks for age between 1 and 120, one can just add another filter:\nfrom itertools import chain, repeat\n\nprompt_msg = \"Enter your age (1-120): \"\nbad_input_msg = \"Wrong input.\"\nprompts = chain([prompt_msg], repeat('\\n'.join([bad_input_msg, prompt_msg])))\nreplies = map(input, prompts)\nnumeric_replies = filter(str.isdigit, replies)\nages = map(int, numeric_replies)\npositive_ages = filter((0).__lt__, ages)\nnot_too_big_ages = filter((120).__ge__, positive_ages)\nvalid_response = next(not_too_big_ages)\nprint(valid_response)\n\nBut in the case when there are many rules, it's better to implement a function performing a logical conjunction. In the following example I will use a ready one from here:\nfrom functools import partial\nfrom itertools import chain, repeat\n\nfrom lz.logical import conjoin\n\n\ndef is_one_letter(string: str) -> bool:\n    return len(string) == 1\n\n\nrules = [str.isalpha, str.isupper, is_one_letter, 'C'.__le__, 'P'.__ge__]\n\nprompt_msg = \"Enter a letter (C-P): \"\nbad_input_msg = \"Wrong input.\"\nprompts = chain([prompt_msg], repeat('\\n'.join([bad_input_msg, prompt_msg])))\nreplies = map(input, prompts)\nvalid_response = next(filter(conjoin(*rules), replies))\nprint(valid_response)\n\nEnter a letter (C-P):  5\nWrong input.\nEnter a letter (C-P):  f\nWrong input.\nEnter a letter (C-P):  CDE\nWrong input.\nEnter a letter (C-P):  Q\nWrong input.\nEnter a letter (C-P):  N\nN\n\nUnfortunately, if someone needs a custom message for each failed case, then, I'm afraid, there is no pretty functional way. Or, at least, I couldn't find one.\n    ",
        "votes": 23,
        "comentarios": [
            {
                "decripcion": "What a thorough and wonderful answer, the explanation breakdown was great.",
                "fecha": { "$date" : "2019-09-05T16:32:10Z" },
                "usuario": "Locane",
                "usuario_id": 68
            },
            {
                "decripcion": "Using your style, how would one go about stripping whitespace and lower-casing the input for membership testing? I don't want to create a set that must include both upper and lowercase examples. I would also like to allow for whitespace input mistakes.",
                "fecha": { "$date" : "2019-09-06T03:53:35Z" },
                "usuario": "Austin",
                "usuario_id": 69
            },
            {
                "decripcion": "@Austin I added a new section on preprocessing. Take a look.",
                "fecha": { "$date" : "2019-09-06T13:19:06Z" },
                "usuario": "Georgy",
                "usuario_id": 70
            },
            {
                "decripcion": "That reminds me of ReactiveX. But perhaps that was inspired by functional languages in the first place?",
                "fecha": { "$date" : "2020-06-06T18:02:11Z" },
                "usuario": "Mateen Ulhaq",
                "usuario_id": 71
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 36,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nUsing Click:\nClick is a library for command-line interfaces and it provides functionality for asking a valid response from a user.\nSimple example:\nimport click\n\nnumber = click.prompt('Please enter a number', type=float)\nprint(number)\n\nPlease enter a number: \n a\nError: a is not a valid floating point value\nPlease enter a number: \n 10\n10.0\n\nNote how it converted the string value to a float automatically.\nChecking if a value is within a range:\nThere are different custom types provided. To get a number in a specific range we can use IntRange:\nage = click.prompt(\"What's your age?\", type=click.IntRange(1, 120))\nprint(age)\n\nWhat's your age?: \n a\nError: a is not a valid integer\nWhat's your age?: \n 0\nError: 0 is not in the valid range of 1 to 120.\nWhat's your age?: \n 5\n5\n\nWe can also specify just one of the limits, min or max:\nage = click.prompt(\"What's your age?\", type=click.IntRange(min=14))\nprint(age)\n\nWhat's your age?: \n 0\nError: 0 is smaller than the minimum valid value 14.\nWhat's your age?: \n 18\n18\n\nMembership testing:\nUsing click.Choice type. By default this check is case-sensitive.\nchoices = {'apple', 'orange', 'peach'}\nchoice = click.prompt('Provide a fruit', type=click.Choice(choices, case_sensitive=False))\nprint(choice)\n\nProvide a fruit (apple, peach, orange): \n banana\nError: invalid choice: banana. (choose from apple, peach, orange)\nProvide a fruit (apple, peach, orange): \n OrAnGe\norange\n\nWorking with paths and files:\nUsing a click.Path type we can check for existing paths and also resolve them:\npath = click.prompt('Provide path', type=click.Path(exists=True, resolve_path=True))\nprint(path)\n\nProvide path: \n nonexistent\nError: Path \"nonexistent\" does not exist.\nProvide path: \n existing_folder\n'/path/to/existing_folder\n\nReading and writing files can be done by click.File:\nfile = click.prompt('In which file to write data?', type=click.File('w'))\nwith file.open():\n    file.write('Hello!')\n# More info about `lazy=True` at:\n# https://click.palletsprojects.com/en/7.x/arguments/#file-opening-safety\nfile = click.prompt('Which file you wanna read?', type=click.File(lazy=True))\nwith file.open():\n    print(file.read())\n\nIn which file to write data?: \n         # <-- provided an empty string, which is an illegal name for a file\nIn which file to write data?: \n some_file.txt\nWhich file you wanna read?: \n nonexistent.txt\nError: Could not open file: nonexistent.txt: No such file or directory\nWhich file you wanna read?: \n some_file.txt\nHello!\n\nOther examples:\nPassword confirmation:\npassword = click.prompt('Enter password', hide_input=True, confirmation_prompt=True)\nprint(password)\n\nEnter password: \n \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nRepeat for confirmation: \n \u00b7\nError: the two entered values do not match\nEnter password: \n \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nRepeat for confirmation: \n \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nqwerty\n\nDefault values:\nIn this case, simply pressing Enter (or whatever key you use) without entering a value, will give you a default one:\nnumber = click.prompt('Please enter a number', type=int, default=42)\nprint(number)\n\nPlease enter a number [42]: \n a\nError: a is not a valid integer\nPlease enter a number [42]: \n \n42\n\n    ",
        "votes": 16,
        "comentarios": [
            {
                "decripcion": "Thanks, this is perfect. Looping with a number selection in a valid range was exactly what i was looking for.",
                "fecha": { "$date" : "2020-06-15T11:57:19Z" },
                "usuario": "Amir",
                "usuario_id": 72
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 37,
        "fecha": { "$date" : "2017-05-23T12:34:45Z" },
        "decripcion": "\nSo, I was messing around with something similar to this recently, and I came up with the following solution, which uses a way of getting input that rejects junk, before it's even checked in any logical way.\n\nread_single_keypress() courtesy https://stackoverflow.com/a/6599441/4532996\n\ndef read_single_keypress() -> str:\n    \"\"\"Waits for a single keypress on stdin.\n    -- from :: https://stackoverflow.com/a/6599441/4532996\n    \"\"\"\n\n    import termios, fcntl, sys, os\n    fd = sys.stdin.fileno()\n    # save old state\n    flags_save = fcntl.fcntl(fd, fcntl.F_GETFL)\n    attrs_save = termios.tcgetattr(fd)\n    # make raw - the way to do this comes from the termios(3) man page.\n    attrs = list(attrs_save) # copy the stored version to update\n    # iflag\n    attrs[0] &= ~(termios.IGNBRK | termios.BRKINT | termios.PARMRK\n                  | termios.ISTRIP | termios.INLCR | termios. IGNCR\n                  | termios.ICRNL | termios.IXON )\n    # oflag\n    attrs[1] &= ~termios.OPOST\n    # cflag\n    attrs[2] &= ~(termios.CSIZE | termios. PARENB)\n    attrs[2] |= termios.CS8\n    # lflag\n    attrs[3] &= ~(termios.ECHONL | termios.ECHO | termios.ICANON\n                  | termios.ISIG | termios.IEXTEN)\n    termios.tcsetattr(fd, termios.TCSANOW, attrs)\n    # turn off non-blocking\n    fcntl.fcntl(fd, fcntl.F_SETFL, flags_save & ~os.O_NONBLOCK)\n    # read a single keystroke\n    try:\n        ret = sys.stdin.read(1) # returns a single character\n    except KeyboardInterrupt:\n        ret = 0\n    finally:\n        # restore old state\n        termios.tcsetattr(fd, termios.TCSAFLUSH, attrs_save)\n        fcntl.fcntl(fd, fcntl.F_SETFL, flags_save)\n    return ret\n\ndef until_not_multi(chars) -> str:\n    \"\"\"read stdin until !(chars)\"\"\"\n    import sys\n    chars = list(chars)\n    y = \"\"\n    sys.stdout.flush()\n    while True:\n        i = read_single_keypress()\n        _ = sys.stdout.write(i)\n        sys.stdout.flush()\n        if i not in chars:\n            break\n        y += i\n    return y\n\ndef _can_you_vote() -> str:\n    \"\"\"a practical example:\n    test if a user can vote based purely on keypresses\"\"\"\n    print(\"can you vote? age : \", end=\"\")\n    x = int(\"0\" + until_not_multi(\"0123456789\"))\n    if not x:\n        print(\"\\nsorry, age can only consist of digits.\")\n        return\n    print(\"your age is\", x, \"\\nYou can vote!\" if x >= 18 else \"Sorry! you can't vote\")\n\n_can_you_vote()\n\n\nYou can find the complete module here.\n\nExample:\n\n$ ./input_constrain.py\ncan you vote? age : a\nsorry, age can only consist of digits.\n$ ./input_constrain.py \ncan you vote? age : 23<RETURN>\nyour age is 23\nYou can vote!\n$ _\n\n\nNote that the nature of this implementation is it closes stdin as soon as something that isn't a digit is read. I didn't hit enter after a, but I needed to after the numbers.\n\nYou could merge this with the thismany() function in the same module to only allow, say, three digits.\n    ",
        "votes": 13,
        "comentarios": [
            {
                "decripcion": "If you're already detecting key strokes, why allow characters at all and throw errors around, when you can just silently ignore them, until you get the desired number?",
                "fecha": { "$date" : "2020-10-31T14:27:28Z" },
                "usuario": "Kebman",
                "usuario_id": 73
            },
            {
                "decripcion": "@Kebman you could do that but it might be less obvious to the user what they can type",
                "fecha": { "$date" : "2020-11-01T13:50:25Z" },
                "usuario": "cat",
                "usuario_id": 74
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 38,
        "fecha": { "$date" : "2020-10-30T07:12:59Z" },
        "decripcion": "\nYeah I'm 6 years late from the \ud83c\udf89 but this question deserves more up-to-date answer.\nSeparation of concerns\nI am a big fan of Unix philosophy \"Do one thing and do it well\". In this type of problem, it is better practice to split the problem to\n\nAsk input with get_input until the input is ok.\nValidate in validator function. You could write different validators for different input queries.\n\nAsking for input\nIt can be kept as simple as (Python 3+)\ndef myvalidator(value):\n    try:\n        value = int(value)\n    except ValueError:\n        return False\n    return value >= 0\n\ndef get_input(prompt, validator, on_validationerror):\n    while True:\n        value = input(prompt)\n        if validator(value):\n            return value\n        print(on_validationerror)\n\nExample\nIn [2]: get_input('Give a positive number: ', myvalidator, 'Please, try again')\nGive a positive number: foobar\nPlease, try again\nGive a positive number: -10\nPlease, try again\nGive a positive number: 42\nOut[2]: '42'\n\n\nPython 3.8+ Note\nIn Python 3.8+ you could use the walrus operator\ndef get_input(prompt, validator, on_validationerror):\n    while not validator(value := input(prompt)):\n        print(on_validationerror)\n    return value \n\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 39,
        "fecha": { "$date" : "2016-06-23T10:34:14Z" },
        "decripcion": "\ndef validate_age(age):\n    if age >=0 :\n        return True\n    return False\n\nwhile True:\n    try:\n        age = int(raw_input(\"Please enter your age:\"))\n        if validate_age(age): break\n    except ValueError:\n        print \"Error: Invalid age.\"\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 40,
        "fecha": { "$date" : "2018-12-01T11:17:14Z" },
        "decripcion": "\nBuilding upon Daniel Q's and Patrick Artner's excellent suggestions,\nhere is an even more generalized solution.\n\n# Assuming Python3\nimport sys\n\nclass ValidationError(ValueError):  # thanks Patrick Artner\n    pass\n\ndef validate_input(prompt, cast=str, cond=(lambda x: True), onerror=None):\n    if onerror==None: onerror = {}\n    while True:\n        try:\n            data = cast(input(prompt))\n            if not cond(data): raise ValidationError\n            return data\n        except tuple(onerror.keys()) as e:  # thanks Daniel Q\n            print(onerror[type(e)], file=sys.stderr)\n\n\nI opted for explicit if and raise statements instead of an assert,\nbecause assertion checking may be turned off,\nwhereas validation should always be on to provide robustness.\n\nThis may be used to get different kinds of input,\nwith different validation conditions.\nFor example:\n\n# No validation, equivalent to simple input:\nanystr = validate_input(\"Enter any string: \")\n\n# Get a string containing only letters:\nletters = validate_input(\"Enter letters: \",\n    cond=str.isalpha,\n    onerror={ValidationError: \"Only letters, please!\"})\n\n# Get a float in [0, 100]:\npercentage = validate_input(\"Percentage? \",\n    cast=float, cond=lambda x: 0.0<=x<=100.0,\n    onerror={ValidationError: \"Must be between 0 and 100!\",\n             ValueError: \"Not a number!\"})\n\n\nOr, to answer the original question:\n\nage = validate_input(\"Please enter your age: \",\n        cast=int, cond=lambda a:0<=a<150,\n        onerror={ValidationError: \"Enter a plausible age, please!\",\n                 ValueError: \"Enter an integer, please!\"})\nif age >= 18: \n    print(\"You are able to vote in the United States!\")\nelse:\n    print(\"You are not able to vote in the United States.\")\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 41,
        "fecha": { "$date" : "2020-09-11T14:11:56Z" },
        "decripcion": "\nUse try-except to handle the error and repeat it again:\nwhile True:\n    try:\n        age = int(input(\"Please enter your age: \"))\n        if age >= 18:\n            print(\"You are able to vote in the United States!\")\n        else:\n            print(\"You are not able to vote in the United States.\")\n    except Exception as e:\n        print(\"please enter number\")\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "You are missing a break statement, and the print(\"please enter number\") is unnecessary.",
                "fecha": { "$date" : "2020-09-11T14:13:27Z" },
                "usuario": "Georgy",
                "usuario_id": 70
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 42,
        "fecha": { "$date" : "2017-04-30T09:29:28Z" },
        "decripcion": "\nTry this one:- \n\ndef takeInput(required):\n  print 'ooo or OOO to exit'\n  ans = raw_input('Enter: ')\n\n  if not ans:\n      print \"You entered nothing...!\"\n      return takeInput(required) \n\n      ##  FOR Exit  ## \n  elif ans in ['ooo', 'OOO']:\n    print \"Closing instance.\"\n    exit()\n\n  else:\n    if ans.isdigit():\n      current = 'int'\n    elif set('[~!@#$%^&*()_+{}\":/\\']+$').intersection(ans):\n      current = 'other'\n    elif isinstance(ans,basestring):\n      current = 'str'        \n    else:\n      current = 'none'\n\n  if required == current :\n    return ans\n  else:\n    return takeInput(required)\n\n## pass the value in which type you want [str/int/special character(as other )]\nprint \"input: \", takeInput('str')\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 43,
        "fecha": { "$date" : "2016-06-06T07:15:17Z" },
        "decripcion": "\nWhile a try/except block will work, a much faster and cleaner way to accomplish this task would be to use str.isdigit().\n\nwhile True:\n    age = input(\"Please enter your age: \")\n    if age.isdigit():\n        age = int(age)\n        break\n    else:\n        print(\"Invalid number '{age}'. Try again.\".format(age=age))\n\nif age >= 18: \n    print(\"You are able to vote in the United States!\")\nelse:\n    print(\"You are not able to vote in the United States.\")\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 44,
        "fecha": { "$date" : "2018-12-18T06:54:35Z" },
        "decripcion": "\nGood question! You can try the following code for this. =)\n\nThis code uses ast.literal_eval() to find the data type of the input (age). Then it follows the following algorithm:\n\n\n  \n  Ask user to input her/his age.\n  \n  1.1. If age is float or int data type:\n  \n  \n  Check if age>=18. If age>=18, print appropriate output and exit.\n  Check if 0<age<18. If 0<age<18, print appropriate output and exit.\n  If age<=0, ask the user to input a valid number for age again, (i.e. go back to step 1.) \n  \n  \n  1.2. If age is not float or int data type, then ask user to input her/his age again (i.e. go back to step 1.) \n  \n\n\nHere is the code.\n\nfrom ast import literal_eval\n\n''' This function is used to identify the data type of input data.'''\ndef input_type(input_data):\n    try:\n        return type(literal_eval(input_data))\n    except (ValueError, SyntaxError):\n        return str\n\nflag = True\n\nwhile(flag):\n    age = raw_input(\"Please enter your age: \")\n\n    if input_type(age)==float or input_type(age)==int:\n        if eval(age)>=18: \n            print(\"You are able to vote in the United States!\") \n            flag = False \n        elif eval(age)>0 and eval(age)<18: \n            print(\"You are not able to vote in the United States.\") \n            flag = False\n        else: print(\"Please enter a valid number as your age.\")\n\n    else: print(\"Sorry, I didn't understand that.\") \n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 45,
        "fecha": { "$date" : "2019-07-01T14:17:43Z" },
        "decripcion": "\nYou can always apply simple if-else logic and add one more if logic to your code along with a for loop.\n\nwhile True:\n     age = int(input(\"Please enter your age: \"))\n     if (age >= 18)  : \n         print(\"You are able to vote in the United States!\")\n     if (age < 18) & (age > 0):\n         print(\"You are not able to vote in the United States.\")\n     else:\n         print(\"Wrong characters, the input must be numeric\")\n         continue\n\n\nThis will be an infinite loo and you would be asked to enter the age, indefinitely.\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "This doesn't really answer the question. The question was about getting a user input until they give a valid response, not indefinitely.",
                "fecha": { "$date" : "2019-07-01T10:25:41Z" },
                "usuario": "Georgy",
                "usuario_id": 70
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 46,
        "fecha": { "$date" : "2020-08-17T17:21:22Z" },
        "decripcion": "\nBelow code may help.\nage=(lambda i,f: f(i,f))(input(\"Please enter your age: \"),lambda i,f: i if i.isdigit() else f(input(\"Please enter your age: \"),f))\nprint(\"You are able to vote in the united states\" if int(age)>=18 else \"You are not able to vote in the united states\",end='')\n\nIf you want to have maximum tries, say 3, use below code\nage=(lambda i,n,f: f(i,n,f))(input(\"Please enter your age: \"),1,lambda i,n,f: i if i.isdigit() else (None if n==3 else f(input(\"Please enter your age: \"),n+1,f)))\nprint(\"You are able to vote in the united states\" if age and int(age)>=18 else \"You are not able to vote in the united states\",end='')\n\nNote: This uses recursion.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 47,
        "fecha": { "$date" : "2016-11-03T07:49:29Z" },
        "decripcion": "\nYou can write more general logic to allow user to enter only specific number of times, as the same use-case arises in many real-world applications.\n\ndef getValidInt(iMaxAttemps = None):\n  iCount = 0\n  while True:\n    # exit when maximum attempt limit has expired\n    if iCount != None and iCount > iMaxAttemps:\n       return 0     # return as default value\n\n    i = raw_input(\"Enter no\")\n    try:\n       i = int(i)\n    except ValueError as e:\n       print \"Enter valid int value\"\n    else:\n       break\n\n    return i\n\nage = getValidInt()\n# do whatever you want to do.\n\n    ",
        "votes": -1,
        "comentarios": [
            {
                "decripcion": "you forget to increase the iCount value after each loop",
                "fecha": { "$date" : "2017-03-01T08:49:03Z" },
                "usuario": "Hoai-Thu Vuong",
                "usuario_id": 75
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 48,
        "fecha": { "$date" : "2018-01-03T00:59:37Z" },
        "decripcion": "\nYou can make the input statement a while True loop so it repeatedly asks for the users input and then break that loop if the user enters the response you would like. And you can use try and except blocks to handle invalid responses.\n\nwhile True:\n\n    var = True\n\n    try:\n        age = int(input(\"Please enter your age: \"))\n\n    except ValueError:\n        print(\"Invalid input.\")\n        var = False\n\n    if var == True:\n        if age >= 18:\n                print(\"You are able to vote in the United States.\")\n                break\n        else:\n            print(\"You are not able to vote in the United States.\")\n\n\nThe var variable is just so that if the user enters a string instead of a integer the program wont return \"You are not able to vote in the United States.\"\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 49,
        "fecha": { "$date" : "2018-07-07T09:28:33Z" },
        "decripcion": "\nUse \"while\" statement till user enter a true value and if the input value is not a number or it's a null value skip it and try to ask again and so on. \nIn example I tried to answer truly your question. If we suppose that our age is between 1 and 150 then input value accepted, else it's a wrong value.\nFor terminating program, the user can use 0 key and enter it as a value.\n\n\n  Note: Read comments top of code.\n\n\n# If your input value is only a number then use \"Value.isdigit() == False\".\n# If you need an input that is a text, you should remove \"Value.isdigit() == False\".\ndef Input(Message):\n    Value = None\n    while Value == None or Value.isdigit() == False:\n        try:        \n            Value = str(input(Message)).strip()\n        except InputError:\n            Value = None\n    return Value\n\n# Example:\nage = 0\n# If we suppose that our age is between 1 and 150 then input value accepted,\n# else it's a wrong value.\nwhile age <=0 or age >150:\n    age = int(Input(\"Please enter your age: \"))\n    # For terminating program, the user can use 0 key and enter it as an a value.\n    if age == 0:\n        print(\"Terminating ...\")\n        exit(0)\n\nif age >= 18 and age <=150: \n    print(\"You are able to vote in the United States!\")\nelse:\n    print(\"You are not able to vote in the United States.\")\n\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 50,
        "fecha": { "$date" : "2018-11-08T12:04:20Z" },
        "decripcion": "\nOne more solution for using input validation using a customized ValidationError and a (optional) range validation for integer inputs:\n\nclass ValidationError(ValueError): \n    \"\"\"Special validation error - its message is supposed to be printed\"\"\"\n    pass\n\ndef RangeValidator(text,num,r):\n    \"\"\"Generic validator - raises 'text' as ValidationError if 'num' not in range 'r'.\"\"\"\n    if num in r:\n        return num\n    raise ValidationError(text)\n\ndef ValidCol(c): \n    \"\"\"Specialized column validator providing text and range.\"\"\"\n    return RangeValidator(\"Columns must be in the range of 0 to 3 (inclusive)\", \n                          c, range(4))\n\ndef ValidRow(r): \n    \"\"\"Specialized row validator providing text and range.\"\"\"\n    return RangeValidator(\"Rows must be in the range of 5 to 15(exclusive)\",\n                          r, range(5,15))\n\n\nUsage:\n\ndef GetInt(text, validator=None):\n    \"\"\"Aks user for integer input until a valid integer is given. If provided, \n    a 'validator' function takes the integer and either raises a \n    ValidationError to be printed or returns the valid number. \n    Non integers display a simple error message.\"\"\"\n    print()\n    while True:\n        n = input(text)\n        try:\n            n = int(n)\n\n            return n if validator is None else validator(n)\n\n        except ValueError as ve:\n            # prints ValidationErrors directly - else generic message:\n            if isinstance(ve, ValidationError):\n                print(ve)\n            else:\n                print(\"Invalid input: \", n)\n\n\ncolumn = GetInt(\"Pleased enter column: \", ValidCol)\nrow = GetInt(\"Pleased enter row: \", ValidRow)\nprint( row, column)\n\n\nOutput:\n\nPleased enter column: 22\nColumns must be in the range of 0 to 3 (inclusive)\nPleased enter column: -2\nColumns must be in the range of 0 to 3 (inclusive)\nPleased enter column: 2\nPleased enter row: a\nInvalid input:  a\nPleased enter row: 72\nRows must be in the range of 5 to 15(exclusive)\nPleased enter row: 9  \n\n9, 2\n\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 51,
        "fecha": { "$date" : "2019-04-15T13:56:05Z" },
        "decripcion": "\nPersistent user input using recursive function:\n\nString\n\ndef askName():\n    return input(\"Write your name: \").strip() or askName()\n\nname = askName()\n\n\nInteger\n\ndef askAge():\n    try: return int(input(\"Enter your age: \"))\n    except ValueError: return askAge()\n\nage = askAge()\n\n\nand finally, the question requirement:\n\ndef askAge():\n    try: return int(input(\"Enter your age: \"))\n    except ValueError: return askAge()\n\nage = askAge()\n\nresponseAge = [\n    \"You are able to vote in the United States!\",\n    \"You are not able to vote in the United States.\",\n][int(age < 18)]\n\nprint(responseAge)\n\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 52,
        "fecha": { "$date" : "2021-06-30T00:03:48Z" },
        "decripcion": "\nUse isdigit() to check if a string represents a valid integer.\nYou could use a recursive function.\ndef ask():\n    answer = input(\"Please enter amount to convert: \")\n    if not answer.isdigit():\n        print(\"Invalid\")\n        return ask()\n\n    return int(answer)\n\nGdp = ask()\n\nOr a while loop\nwhile True:\n    answer = input(\"Please enter amount to convert: \")\n    if not answer.isdigit():\n        print(\"Invalid\")\n        continue\n\n    Gbp = int(answer)\n\n    ",
        "votes": -1,
        "comentarios": [
            {
                "decripcion": "You're missing a return from the function. You return the recursive call, but that call returns None... And you while loop is infinite...",
                "fecha": { "$date" : "2021-05-04T19:16:01Z" },
                "usuario": "Tomerikoo",
                "usuario_id": 51
            },
            {
                "decripcion": "@Tomerikoo It recursively asks until the answer is valid, which I think is what was asked. I meant to write it in a way where you can put any code inside the recursive function or while loop. This was actually written for a different question, which got marked as a duplicate to this one so I posted it here instead.",
                "fecha": { "$date" : "2021-05-05T16:15:49Z" },
                "usuario": "Rein F",
                "usuario_id": 76
            },
            {
                "decripcion": "What I mean is that you should test your code with some scenarios. In the first case, the Gbp = int(answer) should probably be return int(answer) and in the second there should probably be a break somewhere",
                "fecha": { "$date" : "2021-05-05T16:55:40Z" },
                "usuario": "Tomerikoo",
                "usuario_id": 51
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 53,
        "fecha": { "$date" : "2019-12-24T03:33:56Z" },
        "decripcion": "\nThe simple solution would be:\n\nwhile True:\n    age = int(input(\"Please enter your age: \"))\n\n    if (age<=0) or (age>120):\n        print('Sorry, I did not understand that.Please try again')\n        continue\n    else:\n\n        if age>=18:\n            print(\"You are able to vote in the United States!\")\n        else:\n            print(\"You are not able to vote in the United States.\")\n        break\n\n\nExplanation of above code:\nIn order for a valid age,it should be positive and should not be more than normal physical age,say for example maximum age is 120.\n\nThen we can ask user for age and if age input is negative or more than 120,we consider it invalid input and ask the user to try again.\n\nOnce the valid input is entered, we perform a check (using nested if-else statement) whether the age is >=18 or vice versa and print a message whether the user is eligible to vote\n    ",
        "votes": -2,
        "comentarios": [
            {
                "decripcion": "\"Please enter your age: dickety six\"': same crash as stated in the question...",
                "fecha": { "$date" : "2020-05-16T22:28:35Z" },
                "usuario": "BDL",
                "usuario_id": 77
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 54,
        "fecha": { "$date" : "2020-06-12T16:56:19Z" },
        "decripcion": "\nYou can use dictionaries to accomplish this. Dictionaries are stores of keys and values. \n\n>>> dct = {'x': 1, 'y': 2, 'z': 3}\n>>> dct\n{'y': 2, 'x': 1, 'z': 3}\n>>> dct[\"y\"]\n2\n\n\nYou can use variable key names to achieve the effect of variable variables without the security risk.\n\n>>> x = \"spam\"\n>>> z = {x: \"eggs\"}\n>>> z[\"spam\"]\n'eggs'\n\n\nFor cases where you're thinking of doing something like\n\nvar1 = 'foo'\nvar2 = 'bar'\nvar3 = 'baz'\n...\n\n\na list may be more appropriate than a dict. A list represents an ordered sequence of objects, with integer indices:\n\nlst = ['foo', 'bar', 'baz']\nprint(lst[1])           # prints bar, because indices start at 0\nlst.append('potatoes')  # lst is now ['foo', 'bar', 'baz', 'potatoes']\n\n\nFor ordered sequences, lists are more convenient than dicts with integer keys, because lists support iteration in index order, slicing, append, and other operations that would require awkward key management with a dict.\n    ",
        "votes": 365,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 55,
        "fecha": { "$date" : "2016-04-21T15:23:52Z" },
        "decripcion": "\nUse the built-in getattr function to get an attribute on an object by name.  Modify the name as needed.\n\nobj.spam = 'eggs'\nname = 'spam'\ngetattr(obj, name)  # returns 'eggs'\n\n    ",
        "votes": 104,
        "comentarios": [],
        "usuario": "SilentGhost",
        "usuario_id": 79
    },
    {
        "_id": 56,
        "fecha": { "$date" : "2017-04-24T02:03:14Z" },
        "decripcion": "\nIt's not a good idea. If you are accessing a global variable you can use globals().\n\n>>> a = 10\n>>> globals()['a']\n10\n\n\nIf you want to access a variable in the local scope you can use locals(), but you cannot assign values to the returned dict.\n\nA better solution is to use getattr or store your variables in a dictionary and then access them by name.\n    ",
        "votes": 80,
        "comentarios": [
            {
                "decripcion": "locals().update({'new_local_var':'some local value'}) works just fine for me in Python 3.7.6; so I'm not sure what you mean when you say you cannot assign values through it.",
                "fecha": { "$date" : "2020-03-19T09:04:55Z" },
                "usuario": "Jim Dennis",
                "usuario_id": 80
            },
            {
                "decripcion": "Given x = \"foo\" and locals()[\"x\"] = \"bar\" using print x gives the output bar for Jython 2.5.2. This was tested with an On Demand Automation Script in maximo.",
                "fecha": { "$date" : "2020-03-30T22:52:39Z" },
                "usuario": "Preacher",
                "usuario_id": 81
            },
            {
                "decripcion": "The documentation of locals() specifically says: \"The contents of this dictionary should not be modified.\" (emphasis mine)",
                "fecha": { "$date" : "2021-06-23T21:14:16Z" },
                "usuario": "martineau",
                "usuario_id": 82
            }
        ],
        "usuario": "Nadia Alramli",
        "usuario_id": 83
    },
    {
        "_id": 57,
        "fecha": { "$date" : "2016-08-16T10:41:07Z" },
        "decripcion": "\nNew coders sometimes write code like this:\n\nmy_calculator.button_0 = tkinter.Button(root, text=0)\nmy_calculator.button_1 = tkinter.Button(root, text=1)\nmy_calculator.button_2 = tkinter.Button(root, text=2)\n...\n\n\nThe coder is then left with a pile of named variables, with a coding effort of O(m * n), where m is the number of named variables and n is the number of times that group of variables needs to be accessed (including creation). The more astute beginner observes that the only difference in each of those lines is a number that changes based on a rule, and decides to use a loop. However, they get stuck on how to dynamically create those variable names, and may try something like this:\n\nfor i in range(10):\n    my_calculator.('button_%d' % i) = tkinter.Button(root, text=i)\n\n\nThey soon find that this does not work.\n\nIf the program requires arbitrary variable \"names,\" a dictionary is the best choice, as explained in other answers. However, if you're simply trying to create many variables and you don't mind referring to them with a sequence of integers, you're probably looking for a list. This is particularly true if your data are homogeneous, such as daily temperature readings, weekly quiz scores, or a grid of graphical widgets.\n\nThis can be assembled as follows:\n\nmy_calculator.buttons = []\nfor i in range(10):\n    my_calculator.buttons.append(tkinter.Button(root, text=i))\n\n\nThis list can also be created in one line with a comprehension:\n\nmy_calculator.buttons = [tkinter.Button(root, text=i) for i in range(10)]\n\n\nThe result in either case is a populated list, with the first element accessed with my_calculator.buttons[0], the next with my_calculator.buttons[1], and so on. The \"base\" variable name becomes the name of the list and the varying identifier is used to access it.\n\nFinally, don't forget other data structures, such as the set - this is similar to a dictionary, except that each \"name\" doesn't have a value attached to it. If you simply need a \"bag\" of objects, this can be a great choice. Instead of something like this:\n\nkeyword_1 = 'apple'\nkeyword_2 = 'banana'\n\nif query == keyword_1 or query == keyword_2:\n    print('Match.')\n\n\nYou will have this:\n\nkeywords = {'apple', 'banana'}\nif query in keywords:\n    print('Match.')\n\n\nUse a list for a sequence of similar objects, a set for an arbitrarily-ordered bag of objects, or a dict for a bag of names with associated values.\n    ",
        "votes": 54,
        "comentarios": [],
        "usuario": "TigerhawkT3",
        "usuario_id": 84
    },
    {
        "_id": 58,
        "fecha": { "$date" : "2009-09-03T12:42:00Z" },
        "decripcion": "\nWhenever you want to use variable variables, it's probably better to use a dictionary. So instead of writing\n\n$foo = \"bar\"\n$$foo = \"baz\"\n\n\nyou write \n\nmydict = {}\nfoo = \"bar\"\nmydict[foo] = \"baz\"\n\n\nThis way you won't accidentally overwrite previously existing variables (which is the security aspect) and you can have different \"namespaces\".\n    ",
        "votes": 42,
        "comentarios": [],
        "usuario": "sepp2k",
        "usuario_id": 85
    },
    {
        "_id": 59,
        "fecha": { "$date" : "2018-11-27T15:34:22Z" },
        "decripcion": "\nUse globals()\n\nYou can actually assign variables to global scope dynamically, for instance, if you want 10 variables that can be accessed on a global scope i_1, i_2 ... i_10:\n\nfor i in range(10):\n    globals()['i_{}'.format(i)] = 'a'\n\n\nThis will assign 'a' to all of these 10 variables, of course you can change the value dynamically as well. All of these variables can be accessed now like other globally declared variable:\n\n>>> i_5\n'a'\n\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "Rocky Li",
        "usuario_id": 86
    },
    {
        "_id": 60,
        "fecha": { "$date" : "2019-05-13T14:39:12Z" },
        "decripcion": "\nInstead of a dictionary you can also use namedtuple from the collections module, which makes access easier.\n\nFor example:\n\n# using dictionary\nvariables = {}\nvariables[\"first\"] = 34\nvariables[\"second\"] = 45\nprint(variables[\"first\"], variables[\"second\"])\n\n# using namedtuple\nVariables = namedtuple('Variables', ['first', 'second'])\nvars = Variables(34, 45)\nprint(vars.first, vars.second)\n\n    ",
        "votes": 14,
        "comentarios": [
            {
                "decripcion": "Keep in mind namedtuples are immutable so they're a bit different than simply dicts with dot notation. Having said that, both options promote good design principles and don't abuse the global namespace like half the answers in this thread do.",
                "fecha": { "$date" : "2020-10-17T02:23:49Z" },
                "usuario": "ggorlen",
                "usuario_id": 87
            }
        ],
        "usuario": "ojas mohril",
        "usuario_id": 88
    },
    {
        "_id": 61,
        "fecha": { "$date" : "2019-05-24T13:22:33Z" },
        "decripcion": "\nThe SimpleNamespace class could be used to create new attributes with setattr, or subclass SimpleNamespace and create your own function to add new attribute names (variables). \n\nfrom types import SimpleNamespace\n\nvariables = {\"b\":\"B\",\"c\":\"C\"}\na = SimpleNamespace(**variables)\nsetattr(a,\"g\",\"G\")\na.g = \"G+\"\nsomething = a.a\n\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "Bill Oldroyd",
        "usuario_id": 89
    },
    {
        "_id": 62,
        "fecha": { "$date" : "2017-10-23T19:24:10Z" },
        "decripcion": "\nIf you don't want to use any object, you can still use setattr() inside your current module:\n\nimport sys\ncurrent_module = module = sys.modules[__name__]  # i.e the \"file\" where your code is written\nsetattr(current_module, 'variable_name', 15)  # 15 is the value you assign to the var\nprint(variable_name)  # >>> 15, created from a string\n\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "This does not work with __dict__ variable however. I wonder if there is a general mechanism to create any global variable dynamically.",
                "fecha": { "$date" : "2018-01-30T18:25:02Z" },
                "usuario": "Alexey",
                "usuario_id": 90
            },
            {
                "decripcion": "globals() can do this",
                "fecha": { "$date" : "2018-01-31T07:42:21Z" },
                "usuario": "Guillaume Lebreton",
                "usuario_id": 91
            }
        ],
        "usuario": "Guillaume Lebreton",
        "usuario_id": 91
    },
    {
        "_id": 63,
        "fecha": { "$date" : "2020-10-17T07:06:59Z" },
        "decripcion": "\nYou have to use globals() built in method  to achieve that behaviour:\ndef var_of_var(k, v):\n    globals()[k] = v\n\nprint variable_name # NameError: name 'variable_name' is not defined\nsome_name = 'variable_name'\nglobals()[some_name] = 123\nprint(variable_name) # 123\n\nsome_name = 'variable_name2'\nvar_of_var(some_name, 456)\nprint(variable_name2) # 456\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Andriy Ivaneyko",
        "usuario_id": 92
    },
    {
        "_id": 64,
        "fecha": { "$date" : "2017-05-23T12:10:47Z" },
        "decripcion": "\nI'm am answering the question: How to get the value of a variable given its name in a string?\nwhich is closed as a duplicate with a link to this question. \n\nIf the variables in question are part of an object (part of a class for example) then some useful functions to achieve exactly that are hasattr, getattr, and setattr. \n\nSo for example you can have:\n\nclass Variables(object):\n    def __init__(self):\n        self.foo = \"initial_variable\"\n    def create_new_var(self,name,value):\n        setattr(self,name,value)\n    def get_var(self,name):\n        if hasattr(self,name):\n            return getattr(self,name)\n        else:\n            raise(\"Class does not have a variable named: \"+name)\n\n\nThen you can do:\n\nv = Variables()\nv.get_var(\"foo\")\n\n\n\n  \"initial_variable\"\n\n\nv.create_new_var(v.foo,\"is actually not initial\")\nv.initial_variable\n\n\n\n  \"is actually not initial\"\n\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "patapouf_ai",
        "usuario_id": 93
    },
    {
        "_id": 65,
        "fecha": { "$date" : "2019-12-14T09:39:02Z" },
        "decripcion": "\nI have tried both in python 3.7.3, you can use either globals() or vars()\n\n>>> food #Error\n>>> milkshake #Error\n>>> food=\"bread\"\n>>> drink=\"milkshake\"\n>>> globals()[food] = \"strawberry flavor\"\n>>> vars()[drink] = \"chocolate flavor\"\n>>> bread\n'strawberry flavor'\n>>> milkshake\n'chocolate flavor'\n>>> globals()[drink]\n'chocolate flavor'\n>>> vars()[food]\n'strawberry flavor'\n\n\n\n\nReference:\nhttps://www.daniweb.com/programming/software-development/threads/111526/setting-a-string-as-a-variable-name#post548936\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Hzzkygcs",
        "usuario_id": 94
    },
    {
        "_id": 66,
        "fecha": { "$date" : "2016-06-09T12:10:59Z" },
        "decripcion": "\nThe consensus is to use a dictionary for this - see the other answers. This is a good idea for most cases, however, there are many aspects arising from this:\n\n\nyou'll yourself be responsible for this dictionary, including garbage collection (of in-dict variables) etc.\nthere's either no locality or globality for variable variables, it depends on the globality of the dictionary\nif you want to rename a variable name, you'll have to do it manually\nhowever, you are much more flexible, e.g. \n\n\nyou can decide to overwrite existing variables or  ...\n... choose to implement const variables\nto raise an exception on overwriting for different types\netc.\n\n\n\nThat said, I've implemented a variable variables manager-class which provides some of the above ideas. It works for python 2 and 3.\n\nYou'd use the class like this:\n\nfrom variableVariablesManager import VariableVariablesManager\n\nmyVars = VariableVariablesManager()\nmyVars['test'] = 25\nprint(myVars['test'])\n\n# define a const variable\nmyVars.defineConstVariable('myconst', 13)\ntry:\n    myVars['myconst'] = 14 # <- this raises an error, since 'myconst' must not be changed\n    print(\"not allowed\")\nexcept AttributeError as e:\n    pass\n\n# rename a variable\nmyVars.renameVariable('myconst', 'myconstOther')\n\n# preserve locality\ndef testLocalVar():\n    myVars = VariableVariablesManager()\n    myVars['test'] = 13\n    print(\"inside function myVars['test']:\", myVars['test'])\ntestLocalVar()\nprint(\"outside function myVars['test']:\", myVars['test'])\n\n# define a global variable\nmyVars.defineGlobalVariable('globalVar', 12)\ndef testGlobalVar():\n    myVars = VariableVariablesManager()\n    print(\"inside function myVars['globalVar']:\", myVars['globalVar'])\n    myVars['globalVar'] = 13\n    print(\"inside function myVars['globalVar'] (having been changed):\", myVars['globalVar'])\ntestGlobalVar()\nprint(\"outside function myVars['globalVar']:\", myVars['globalVar'])\n\n\nIf you wish to allow overwriting of variables with the same type only:\n\nmyVars = VariableVariablesManager(enforceSameTypeOnOverride = True)\nmyVars['test'] = 25\nmyVars['test'] = \"Cat\" # <- raises Exception (different type on overwriting)\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "DomTomCat",
        "usuario_id": 95
    },
    {
        "_id": 67,
        "fecha": { "$date" : "2021-03-09T16:18:44Z" },
        "decripcion": "\n# Python 3.8.2 (default, Feb 26 2020, 02:56:10)\n\nVariable variables in Python\n\"\"\"\n<?php\n$a = 'hello';\n$e = 'wow'\n?>\n<?php\n$$a = 'world';\n?>\n<?php\necho \"$a ${$a}\\n\";\necho \"$a ${$a[1]}\\n\";\n?>\n<?php\necho \"$a $hello\";\n?>\n\"\"\"\n\na = 'hello'  #<?php $a = 'hello'; ?>\ne = 'wow'   #<?php $e = 'wow'; ?>\nvars()[a] = 'world' #<?php $$a = 'world'; ?>\nprint(a, vars()[a]) #<?php echo \"$a ${$a}\\n\"; ?>\nprint(a, vars()[vars()['a'][1]]) #<?php echo \"$a ${$a[1]}\\n\"; ?>\nprint(a, hello) #<?php echo \"$a $hello\"; ?>\n\nOutput:\nhello world\nhello wow\nhello world\n\n\nUsing globals(), locals(), or vars() will produce the same results\n# Python 3.8.2 (default, Feb 26 2020, 02:56:10)\n\n#<?php $a = 'hello'; ?>\n#<?php $e = 'wow'; ?>\n#<?php $$a = 'world'; ?>\n#<?php echo \"$a ${$a}\\n\"; ?>\n#<?php echo \"$a ${$a[1]}\\n\"; ?>\n#<?php echo \"$a $hello\"; ?>\n\nprint('locals():\\n')\na = 'hello'\ne = 'wow'\nlocals()[a] = 'world'\nprint(a, locals()[a])\nprint(a, locals()[locals()['a'][1]])\nprint(a, hello)\n\nprint('\\n\\nglobals():\\n')\na = 'hello'\ne = 'wow'\nglobals()[a] = 'world'\nprint(a, globals()[a])\nprint(a, globals()[globals()['a'][1]])\nprint(a, hello)\n\nOutput:\nlocals():\n\nhello world\nhello wow\nhello world\n\n\nglobals():\n\nhello world\nhello wow\nhello world\n\n\nBonus (creating variables from strings)\n# Python 2.7.16 (default, Jul 13 2019, 16:01:51)\n# [GCC 8.3.0] on linux2\n\nCreating variables and unpacking tuple:\ng = globals()\nlistB = []\nfor i in range(10):\n    g[\"num%s\" % i] = i ** 10\n    listB.append(\"num{0}\".format(i))\n\ndef printNum():\n    print \"Printing num0 to num9:\"\n    for i in range(10):\n        print \"num%s = \" % i, \n        print g[\"num%s\" % i]\n\nprintNum()\n\nlistA = []\nfor i in range(10):\n    listA.append(i)\n\nlistA = tuple(listA)\nprint listA, '\"Tuple to unpack\"'\n\nlistB = str(str(listB).strip(\"[]\").replace(\"'\", \"\") + \" = listA\")\n\nprint listB\n\nexec listB\n\nprintNum()\n\nOutput:\nPrinting num0 to num9:\nnum0 =  0\nnum1 =  1\nnum2 =  1024\nnum3 =  59049\nnum4 =  1048576\nnum5 =  9765625\nnum6 =  60466176\nnum7 =  282475249\nnum8 =  1073741824\nnum9 =  3486784401\n(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) \"Tuple to unpack\"\nnum0, num1, num2, num3, num4, num5, num6, num7, num8, num9 = listA\nPrinting num0 to num9:\nnum0 =  0\nnum1 =  1\nnum2 =  2\nnum3 =  3\nnum4 =  4\nnum5 =  5\nnum6 =  6\nnum7 =  7\nnum8 =  8\nnum9 =  9\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "mOmOney",
        "usuario_id": 96
    },
    {
        "_id": 68,
        "fecha": { "$date" : "2021-01-30T01:15:36Z" },
        "decripcion": "\nIt should be extremely risky...\nbut you can use exec():\na = 'b=5'\nexec(a)\nc = b*2\nprint (c)\n\nResult:\n10\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Ruben Medrano",
        "usuario_id": 97
    },
    {
        "_id": 69,
        "fecha": { "$date" : "2017-08-11T21:13:57Z" },
        "decripcion": "\nAny set of variables can also be wrapped up in a class. \n\"Variable\" variables may be added to the class instance during runtime by directly accessing the built-in dictionary through __dict__ attribute. \n\nThe following code defines Variables class, which adds variables (in this case attributes) to its instance during the construction. Variable names are taken from a specified list (which, for example, could have been generated by program code):\n\n# some list of variable names\nL = ['a', 'b', 'c']\n\nclass Variables:\n    def __init__(self, L):\n        for item in L:\n            self.__dict__[item] = 100\n\nv = Variables(L)\nprint(v.a, v.b, v.c)\n#will produce 100 100 100\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "ru13r",
        "usuario_id": 98
    },
    {
        "_id": 70,
        "fecha": { "$date" : "2020-02-24T19:27:21Z" },
        "decripcion": "\nIt's pretty simple really:\n\na[start:stop]  # items start through stop-1\na[start:]      # items start through the rest of the array\na[:stop]       # items from the beginning through stop-1\na[:]           # a copy of the whole array\n\n\nThere is also the step value, which can be used with any of the above:\n\na[start:stop:step] # start through not past stop, by step\n\n\nThe key point to remember is that the :stop value represents the first value that is not in the selected slice. So, the difference between stop and start is the number of elements selected (if step is 1, the default).\n\nThe other feature is that start or stop may be a negative number, which means it counts from the end of the array instead of the beginning. So:\n\na[-1]    # last item in the array\na[-2:]   # last two items in the array\na[:-2]   # everything except the last two items\n\n\nSimilarly, step may be a negative number:\n\na[::-1]    # all items in the array, reversed\na[1::-1]   # the first two items, reversed\na[:-3:-1]  # the last two items, reversed\na[-3::-1]  # everything except the last two items, reversed\n\n\nPython is kind to the programmer if there are fewer items than you ask for. For example, if you ask for a[:-2] and a only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.\n\nRelation to slice() object\n\nThe slicing operator [] is actually being used in the above code with a slice() object using the : notation (which is only valid within []), i.e.:\n\na[start:stop:step]\n\n\nis equivalent to:\n\na[slice(start, stop, step)]\n\n\nSlice objects also behave slightly differently depending on the number of arguments, similarly to range(), i.e. both slice(stop) and slice(start, stop[, step]) are supported.\nTo skip specifying a given argument, one might use None, so that e.g. a[start:] is equivalent to a[slice(start, None)] or a[::-1] is equivalent to a[slice(None, None, -1)].\n\nWhile the :-based notation is very helpful for simple slicing, the explicit use of slice() objects simplifies the programmatic generation of slicing.\n    ",
        "votes": 5551,
        "comentarios": [
            {
                "decripcion": "Slicing builtin types returns a copy but that's not universal.  Notably, slicing NumPy arrays returns a view that shares memory with the original.",
                "fecha": { "$date" : "2013-09-23T00:13:06Z" },
                "usuario": "Beni Cherniavsky-Paskin",
                "usuario_id": 103
            },
            {
                "decripcion": "This is a beautiful answer with the votes to prove it, but it misses one thing: you can substitute None for any of the empty spaces. For example [None:None] makes a whole copy. This is useful when you need to specify the end of the range using a variable and need to include the last item.",
                "fecha": { "$date" : "2019-01-16T18:49:18Z" },
                "usuario": "Mark Ransom",
                "usuario_id": 104
            },
            {
                "decripcion": "Note that contrary to usual Python slices (see above), in Pandas Dataframes both the start and the stop are included when present in the index. For further info see the Pandas indexing documentation.",
                "fecha": { "$date" : "2019-05-29T12:54:33Z" },
                "usuario": "vreyespue",
                "usuario_id": 105
            },
            {
                "decripcion": "What really annoys me is that python says that when you don't set the start and the end, they default to 0 and the length of sequence. So, in theory, when you use \"abcdef\"[::-1] it should be transformed to \"abcdef\"[0:6:-1], but these two expressions does not get the same output. I feel that something is missing in python documentation since the creation of the language.",
                "fecha": { "$date" : "2019-06-30T14:00:10Z" },
                "usuario": "axell-brendow",
                "usuario_id": 106
            },
            {
                "decripcion": "And I know that \"abcdef\"[::-1] is transformed to \"abcdef\"[6:-7:-1], so, the best way to explain would be: let len be the length of the sequence. If step is positive, the defaults for start and end are 0 and len. Else if step is negative, the defaults for start and end are len and -len - 1.",
                "fecha": { "$date" : "2019-06-30T14:22:35Z" },
                "usuario": "axell-brendow",
                "usuario_id": 106
            }
        ],
        "usuario": "Greg Hewgill",
        "usuario_id": 107
    },
    {
        "_id": 71,
        "fecha": { "$date" : "2017-09-18T11:02:56Z" },
        "decripcion": "\nThe Python tutorial talks about it (scroll down a bit until you get to the part about slicing).\n\nThe ASCII art diagram is helpful too for remembering how slices work:\n\n +---+---+---+---+---+---+\n | P | y | t | h | o | n |\n +---+---+---+---+---+---+\n 0   1   2   3   4   5   6\n-6  -5  -4  -3  -2  -1\n\n\n\n  One way to remember how slices work is to think of the indices as pointing between characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of n characters has index n.\n\n    ",
        "votes": 610,
        "comentarios": [
            {
                "decripcion": "This suggestion works for positive stride, but does not for a negative stride. From the diagram, I expect a[-4,-6,-1] to be yP but it is ty. What always work is to think in characters or slots and use indexing as a half-open interval -- right-open if positive stride, left-open if negative stride.",
                "fecha": { "$date" : "2019-05-27T20:05:24Z" },
                "usuario": "aguadopd",
                "usuario_id": 108
            },
            {
                "decripcion": "But there's no way to collapse to an empty set starting from the end (like x[:0] does when starting from the beginning), so you have to special-case small arrays.  :/",
                "fecha": { "$date" : "2019-07-06T20:07:48Z" },
                "usuario": "endolith",
                "usuario_id": 109
            },
            {
                "decripcion": "@aguadopd You are absolutely right. The solution is to have the indices shifted to the right, centered just below the characters, and notice that the stop is always excluded. See another response just below.",
                "fecha": { "$date" : "2021-04-05T21:32:00Z" },
                "usuario": "Javier Ruiz",
                "usuario_id": 110
            },
            {
                "decripcion": "Addendum to my comment: see my answer with diagrams below: stackoverflow.com/a/56332104/2343869",
                "fecha": { "$date" : "2021-04-15T01:04:50Z" },
                "usuario": "aguadopd",
                "usuario_id": 108
            }
        ],
        "usuario": "Hans Nowak",
        "usuario_id": 111
    },
    {
        "_id": 72,
        "fecha": { "$date" : "2019-05-07T12:16:22Z" },
        "decripcion": "\nEnumerating the possibilities allowed by the grammar:\n\n>>> seq[:]                # [seq[0],   seq[1],          ..., seq[-1]    ]\n>>> seq[low:]             # [seq[low], seq[low+1],      ..., seq[-1]    ]\n>>> seq[:high]            # [seq[0],   seq[1],          ..., seq[high-1]]\n>>> seq[low:high]         # [seq[low], seq[low+1],      ..., seq[high-1]]\n>>> seq[::stride]         # [seq[0],   seq[stride],     ..., seq[-1]    ]\n>>> seq[low::stride]      # [seq[low], seq[low+stride], ..., seq[-1]    ]\n>>> seq[:high:stride]     # [seq[0],   seq[stride],     ..., seq[high-1]]\n>>> seq[low:high:stride]  # [seq[low], seq[low+stride], ..., seq[high-1]]\n\n\nOf course, if (high-low)%stride != 0, then the end point will be a little lower than high-1.\n\nIf stride is negative, the ordering is changed a bit since we're counting down:\n\n>>> seq[::-stride]        # [seq[-1],   seq[-1-stride],   ..., seq[0]    ]\n>>> seq[high::-stride]    # [seq[high], seq[high-stride], ..., seq[0]    ]\n>>> seq[:low:-stride]     # [seq[-1],   seq[-1-stride],   ..., seq[low+1]]\n>>> seq[high:low:-stride] # [seq[high], seq[high-stride], ..., seq[low+1]]\n\n\nExtended slicing (with commas and ellipses) are mostly used only by special data structures (like NumPy); the basic sequences don't support them.\n\n>>> class slicee:\n...     def __getitem__(self, item):\n...         return repr(item)\n...\n>>> slicee()[0, 1:2, ::5, ...]\n'(0, slice(1, 2, None), slice(None, None, 5), Ellipsis)'\n\n    ",
        "votes": 459,
        "comentarios": [
            {
                "decripcion": "Actually there is still something left out e.g. if I type 'apple'[4:-4:-1] I get 'elp', python is translating the -4 to a 1 maybe?",
                "fecha": { "$date" : "2018-01-01T16:39:09Z" },
                "usuario": "liyuan",
                "usuario_id": 112
            },
            {
                "decripcion": "note that backticks are deprecated in favour of repr",
                "fecha": { "$date" : "2019-01-27T01:36:46Z" },
                "usuario": "wjandrea",
                "usuario_id": 19
            },
            {
                "decripcion": "@liyuan The type implementing __getitem__ is; your example is equivalent to apple[slice(4, -4, -1)].",
                "fecha": { "$date" : "2019-09-10T14:26:28Z" },
                "usuario": "chepner",
                "usuario_id": 113
            }
        ],
        "usuario": "ephemient",
        "usuario_id": 114
    },
    {
        "_id": 73,
        "fecha": { "$date" : "2019-01-02T16:44:22Z" },
        "decripcion": "\nThe answers above don't discuss slice assignment. To understand slice assignment, it's helpful to add another concept to the ASCII art:\n\n                +---+---+---+---+---+---+\n                | P | y | t | h | o | n |\n                +---+---+---+---+---+---+\nSlice position: 0   1   2   3   4   5   6\nIndex position:   0   1   2   3   4   5\n\n>>> p = ['P','y','t','h','o','n']\n# Why the two sets of numbers:\n# indexing gives items, not lists\n>>> p[0]\n 'P'\n>>> p[5]\n 'n'\n\n# Slicing gives lists\n>>> p[0:1]\n ['P']\n>>> p[0:2]\n ['P','y']\n\n\nOne heuristic is, for a slice from zero to n, think: \"zero is the beginning, start at the beginning and take n items in a list\".\n\n>>> p[5] # the last of six items, indexed from zero\n 'n'\n>>> p[0:5] # does NOT include the last item!\n ['P','y','t','h','o']\n>>> p[0:6] # not p[0:5]!!!\n ['P','y','t','h','o','n']\n\n\nAnother heuristic is, \"for any slice, replace the start by zero, apply the previous heuristic to get the end of the list, then count the first number back up to chop items off the beginning\"\n\n>>> p[0:4] # Start at the beginning and count out 4 items\n ['P','y','t','h']\n>>> p[1:4] # Take one item off the front\n ['y','t','h']\n>>> p[2:4] # Take two items off the front\n ['t','h']\n# etc.\n\n\nThe first rule of slice assignment is that since slicing returns a list, slice assignment requires a list (or other iterable):\n\n>>> p[2:3]\n ['t']\n>>> p[2:3] = ['T']\n>>> p\n ['P','y','T','h','o','n']\n>>> p[2:3] = 't'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: can only assign an iterable\n\n\nThe second rule of slice assignment, which you can also see above, is that whatever portion of the list is returned by slice indexing, that's the same portion that is changed by slice assignment:\n\n>>> p[2:4]\n ['T','h']\n>>> p[2:4] = ['t','r']\n>>> p\n ['P','y','t','r','o','n']\n\n\nThe third rule of slice assignment is, the assigned list (iterable) doesn't have to have the same length; the indexed slice is simply sliced out and replaced en masse by whatever is being assigned:\n\n>>> p = ['P','y','t','h','o','n'] # Start over\n>>> p[2:4] = ['s','p','a','m']\n>>> p\n ['P','y','s','p','a','m','o','n']\n\n\nThe trickiest part to get used to is assignment to empty slices. Using heuristic 1 and 2 it's easy to get your head around indexing an empty slice:\n\n>>> p = ['P','y','t','h','o','n']\n>>> p[0:4]\n ['P','y','t','h']\n>>> p[1:4]\n ['y','t','h']\n>>> p[2:4]\n ['t','h']\n>>> p[3:4]\n ['h']\n>>> p[4:4]\n []\n\n\nAnd then once you've seen that, slice assignment to the empty slice makes sense too:\n\n>>> p = ['P','y','t','h','o','n']\n>>> p[2:4] = ['x','y'] # Assigned list is same length as slice\n>>> p\n ['P','y','x','y','o','n'] # Result is same length\n>>> p = ['P','y','t','h','o','n']\n>>> p[3:4] = ['x','y'] # Assigned list is longer than slice\n>>> p\n ['P','y','t','x','y','o','n'] # The result is longer\n>>> p = ['P','y','t','h','o','n']\n>>> p[4:4] = ['x','y']\n>>> p\n ['P','y','t','h','x','y','o','n'] # The result is longer still\n\n\nNote that, since we are not changing the second number of the slice (4), the inserted items always stack right up against the 'o', even when we're assigning to the empty slice. So the position for the empty slice assignment is the logical extension of the positions for the non-empty slice assignments.\n\nBacking up a little bit, what happens when you keep going with our procession of counting up the slice beginning?\n\n>>> p = ['P','y','t','h','o','n']\n>>> p[0:4]\n ['P','y','t','h']\n>>> p[1:4]\n ['y','t','h']\n>>> p[2:4]\n ['t','h']\n>>> p[3:4]\n ['h']\n>>> p[4:4]\n []\n>>> p[5:4]\n []\n>>> p[6:4]\n []\n\n\nWith slicing, once you're done, you're done; it doesn't start slicing backwards. In Python you don't get negative strides unless you explicitly ask for them by using a negative number.\n\n>>> p[5:3:-1]\n ['n','o']\n\n\nThere are some weird consequences to the \"once you're done, you're done\" rule:\n\n>>> p[4:4]\n []\n>>> p[5:4]\n []\n>>> p[6:4]\n []\n>>> p[6]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n\n\nIn fact, compared to indexing, Python slicing is bizarrely error-proof:\n\n>>> p[100:200]\n []\n>>> p[int(2e99):int(1e99)]\n []\n\n\nThis can come in handy sometimes, but it can also lead to somewhat strange behavior:\n\n>>> p\n ['P', 'y', 't', 'h', 'o', 'n']\n>>> p[int(2e99):int(1e99)] = ['p','o','w','e','r']\n>>> p\n ['P', 'y', 't', 'h', 'o', 'n', 'p', 'o', 'w', 'e', 'r']\n\n\nDepending on your application, that might... or might not... be what you were hoping for there!\n\n\n\nBelow is the text of my original answer. It has been useful to many people, so I didn't want to delete it.\n\n>>> r=[1,2,3,4]\n>>> r[1:1]\n[]\n>>> r[1:1]=[9,8]\n>>> r\n[1, 9, 8, 2, 3, 4]\n>>> r[1:1]=['blah']\n>>> r\n[1, 'blah', 9, 8, 2, 3, 4]\n\n\nThis may also clarify the difference between slicing and indexing.\n    ",
        "votes": 381,
        "comentarios": [
            {
                "decripcion": "Excellent explanation. But the logic behind slicing is very non-intuitive.",
                "fecha": { "$date" : "2020-08-19T10:06:49Z" },
                "usuario": "Moss",
                "usuario_id": 115
            }
        ],
        "usuario": "David M. Perlman",
        "usuario_id": 116
    },
    {
        "_id": 74,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\n\nExplain Python's slice notation\n\nIn short, the colons (:) in subscript notation (subscriptable[subscriptarg]) make slice notation - which has the optional arguments, start, stop, step:\nsliceable[start:stop:step]\n\nPython slicing is a computationally fast way to methodically access parts of your data. In my opinion, to be even an intermediate Python programmer, it's one aspect of the language that it is necessary to be familiar with.\nImportant Definitions\nTo begin with, let's define a few terms:\n\nstart: the beginning index of the slice, it will include the element at this index unless it is the same as stop, defaults to 0, i.e. the first index. If it's negative, it means to start n items from the end.\nstop: the ending index of the slice, it does not include the element at this index, defaults to length of the sequence being sliced, that is, up to and including the end.\nstep: the amount by which the index increases, defaults to 1. If it's negative, you're slicing over the iterable in reverse.\n\nHow Indexing Works\nYou can make any of these positive or negative numbers. The meaning of the positive numbers is straightforward, but for negative numbers, just like indexes in Python, you count backwards from the end for the start and stop, and for the step, you simply decrement your index. This example is from the documentation's tutorial, but I've modified it slightly to indicate which item in a sequence each index references:\n +---+---+---+---+---+---+\n | P | y | t | h | o | n |\n +---+---+---+---+---+---+\n   0   1   2   3   4   5 \n  -6  -5  -4  -3  -2  -1\n\nHow Slicing Works\nTo use slice notation with a sequence that supports it, you must include at least one colon in the square brackets that follow the sequence (which actually implement the __getitem__ method of the sequence, according to the Python data model.)\nSlice notation works like this:\nsequence[start:stop:step]\n\nAnd recall that there are defaults for start, stop, and step, so to access the defaults, simply leave out the argument.\nSlice notation to get the last nine elements from a list (or any other sequence that supports it, like a string) would look like this:\nmy_list[-9:]\n\nWhen I see this, I read the part in the brackets as \"9th from the end, to the end.\" (Actually, I abbreviate it mentally as \"-9, on\")\nExplanation:\nThe full notation is\nmy_list[-9:None:None]\n\nand to substitute the defaults (actually when step is negative, stop's default is -len(my_list) - 1, so None for stop really just means it goes to whichever end step takes it to):\nmy_list[-9:len(my_list):1]\n\nThe colon, :,  is what tells Python you're giving it a slice and not a regular index. That's why the idiomatic way of making a shallow copy of lists in Python 2 is\nlist_copy = sequence[:]\n\nAnd clearing them is with:\ndel my_list[:]\n\n(Python 3 gets a list.copy and list.clear method.)\nWhen step is negative, the defaults for start and stop change\nBy default, when the step argument is empty (or None), it is assigned to +1.\nBut you can pass in a negative integer, and the list (or most other standard slicables) will be sliced from the end to the beginning.\nThus a negative slice will change the defaults for start and stop!\nConfirming this in the source\nI like to encourage users to read the source as well as the documentation. The source code for slice objects and this logic is found here. First we determine if step is negative:\n\n step_is_negative = step_sign < 0;\n\n\nIf so, the lower bound is -1  meaning we slice all the way up to and including the beginning, and the upper bound is the length minus 1, meaning we start at the end. (Note that the semantics of this -1 is different from a -1 that users may pass indexes in Python indicating the last item.)\n\nif (step_is_negative) {\n    lower = PyLong_FromLong(-1L);\n    if (lower == NULL)\n        goto error;\n\n    upper = PyNumber_Add(length, lower);\n    if (upper == NULL)\n        goto error;\n}\n\n\nOtherwise step is positive, and the lower bound will be zero and the upper bound (which we go up to but not including) the length of the sliced list.\n\nelse {\n    lower = _PyLong_Zero;\n    Py_INCREF(lower);\n    upper = length;\n    Py_INCREF(upper);\n}\n\n\nThen, we may need to apply the defaults for start and stop - the default then for start is calculated as the upper bound when step is negative:\n\nif (self->start == Py_None) {\n    start = step_is_negative ? upper : lower;\n    Py_INCREF(start);\n}\n\n\nand stop, the lower bound:\n\nif (self->stop == Py_None) {\n    stop = step_is_negative ? lower : upper;\n    Py_INCREF(stop);\n}\n\n\nGive your slices a descriptive name!\nYou may find it useful to separate forming the slice from passing it to the list.__getitem__ method (that's what the square brackets do). Even if you're not new to it, it keeps your code more readable so that others that may have to read your code can more readily understand what you're doing.\nHowever, you can't just assign some integers separated by colons to a variable. You need to use the slice object:\nlast_nine_slice = slice(-9, None)\n\nThe second argument, None, is required, so that the first argument is interpreted as the start argument otherwise it would be the stop argument.\nYou can then pass the slice object to your sequence:\n>>> list(range(100))[last_nine_slice]\n[91, 92, 93, 94, 95, 96, 97, 98, 99]\n\nIt's interesting that ranges also take slices:\n>>> range(100)[last_nine_slice]\nrange(91, 100)\n\nMemory Considerations:\nSince slices of Python lists create new objects in memory, another important function to be aware of is itertools.islice. Typically you'll want to iterate over a slice, not just have it created statically in memory. islice is perfect for this. A caveat, it doesn't support negative arguments to start, stop, or step, so if that's an issue you may need to calculate indices or reverse the iterable in advance.\nlength = 100\nlast_nine_iter = itertools.islice(list(range(length)), length-9, None, 1)\nlist_last_nine = list(last_nine_iter)\n\nand now:\n>>> list_last_nine\n[91, 92, 93, 94, 95, 96, 97, 98, 99]\n\nThe fact that list slices make a copy is a feature of lists themselves. If you're slicing advanced objects like a Pandas DataFrame, it may return a view on the original, and not a copy.\n    ",
        "votes": 267,
        "comentarios": [
            {
                "decripcion": "I like the idea of naming slices. I would suggest (start:stop) notation is misleading and (start_at:stop_before) notation may have preventing me searching out this Q&A in the first place.",
                "fecha": { "$date" : "2020-09-29T23:59:26Z" },
                "usuario": "WinEunuuchs2Unix",
                "usuario_id": 117
            },
            {
                "decripcion": "@WinEunuuchs2Unix that's great feedback - this is a standard Python behavior, but it could be made clearer in that sort of way, so I'll consider updating my material to include this semantic.",
                "fecha": { "$date" : "2020-09-30T01:37:49Z" },
                "usuario": "Aaron Hall\u2666",
                "usuario_id": 118
            }
        ],
        "usuario": "Aaron Hall",
        "usuario_id": 119
    },
    {
        "_id": 75,
        "fecha": { "$date" : "2009-02-03T23:15:02Z" },
        "decripcion": "\nAnd a couple of things that weren't immediately obvious to me when I first saw the slicing syntax:\n\n>>> x = [1,2,3,4,5,6]\n>>> x[::-1]\n[6,5,4,3,2,1]\n\n\nEasy way to reverse sequences!\n\nAnd if you wanted, for some reason, every second item in the reversed sequence:\n\n>>> x = [1,2,3,4,5,6]\n>>> x[::-2]\n[6,4,2]\n\n    ",
        "votes": 151,
        "comentarios": [],
        "usuario": "Dana",
        "usuario_id": 120
    },
    {
        "_id": 76,
        "fecha": { "$date" : "2017-07-10T16:59:26Z" },
        "decripcion": "\nIn Python 2.7\n\nSlicing in Python\n\n[a:b:c]\n\nlen = length of string, tuple or list\n\nc -- default is +1. The sign of c indicates forward or backward, absolute value of c indicates steps. Default is forward with step size 1. Positive means forward, negative means backward.\n\na --  When c is positive or blank, default is 0. When c is negative, default is -1.\n\nb --  When c is positive or blank, default is len. When c is negative, default is -(len+1).\n\n\nUnderstanding index assignment is very important.\n\nIn forward direction, starts at 0 and ends at len-1\n\nIn backward direction, starts at -1 and ends at -len\n\n\nWhen you say [a:b:c], you are saying depending on the sign of c (forward or backward), start at a and end at b (excluding element at bth index). Use the indexing rule above and remember you will only find elements in this range:\n\n-len, -len+1, -len+2, ..., 0, 1, 2,3,4 , len -1\n\n\nBut this range continues in both directions infinitely:\n\n...,-len -2 ,-len-1,-len, -len+1, -len+2, ..., 0, 1, 2,3,4 , len -1, len, len +1, len+2 , ....\n\n\nFor example:\n\n             0    1    2   3    4   5   6   7   8   9   10   11\n             a    s    t   r    i   n   g\n    -9  -8  -7   -6   -5  -4   -3  -2  -1\n\n\nIf your choice of a, b, and c allows overlap with the range above as you traverse using rules for a,b,c above you will either get a list with elements (touched during traversal) or you will get an empty list.\n\nOne last thing: if a and b are equal, then also you get an empty list:\n\n>>> l1\n[2, 3, 4]\n\n>>> l1[:]\n[2, 3, 4]\n\n>>> l1[::-1] # a default is -1 , b default is -(len+1)\n[4, 3, 2]\n\n>>> l1[:-4:-1] # a default is -1\n[4, 3, 2]\n\n>>> l1[:-3:-1] # a default is -1\n[4, 3]\n\n>>> l1[::] # c default is +1, so a default is 0, b default is len\n[2, 3, 4]\n\n>>> l1[::-1] # c is -1 , so a default is -1 and b default is -(len+1)\n[4, 3, 2]\n\n\n>>> l1[-100:-200:-1] # Interesting\n[]\n\n>>> l1[-1:-200:-1] # Interesting\n[4, 3, 2]\n\n\n>>> l1[-1:-1:1]\n[]\n\n\n>>> l1[-1:5:1] # Interesting\n[4]\n\n\n>>> l1[1:-7:1]\n[]\n\n>>> l1[1:-7:-1] # Interesting\n[3, 2]\n\n>>> l1[:-2:-2] # a default is -1, stop(b) at -2 , step(c) by 2 in reverse direction\n[4]\n\n    ",
        "votes": 103,
        "comentarios": [
            {
                "decripcion": "another one interesting example: a = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]; a[:-2:-2] which results to [9]",
                "fecha": { "$date" : "2017-07-10T13:59:59Z" },
                "usuario": "Deviacium",
                "usuario_id": 121
            }
        ],
        "usuario": "Ankur Agarwal",
        "usuario_id": 122
    },
    {
        "_id": 77,
        "fecha": { "$date" : "2011-09-06T06:50:08Z" },
        "decripcion": "\nFound this great table at http://wiki.python.org/moin/MovingToPythonFromOtherLanguages\n\nPython indexes and slices for a six-element list.\nIndexes enumerate the elements, slices enumerate the spaces between the elements.\n\nIndex from rear:    -6  -5  -4  -3  -2  -1      a=[0,1,2,3,4,5]    a[1:]==[1,2,3,4,5]\nIndex from front:    0   1   2   3   4   5      len(a)==6          a[:5]==[0,1,2,3,4]\n                   +---+---+---+---+---+---+    a[0]==0            a[:-2]==[0,1,2,3]\n                   | a | b | c | d | e | f |    a[5]==5            a[1:2]==[1]\n                   +---+---+---+---+---+---+    a[-1]==5           a[1:-1]==[1,2,3,4]\nSlice from front:  :   1   2   3   4   5   :    a[-2]==4\nSlice from rear:   :  -5  -4  -3  -2  -1   :\n                                                b=a[:]\n                                                b==[0,1,2,3,4,5] (shallow copy of a)\n    ",
        "votes": 98,
        "comentarios": [],
        "usuario": "AdrianoFerrari",
        "usuario_id": 123
    },
    {
        "_id": 78,
        "fecha": { "$date" : "2019-01-02T16:40:20Z" },
        "decripcion": "\nAfter using it a bit I realise that the simplest description is that it is exactly the same as the arguments in a for loop...\n\n(from:to:step)\n\n\nAny of them are optional:\n\n(:to:step)\n(from::step)\n(from:to)\n\n\nThen the negative indexing just needs you to add the length of the string to the negative indices to understand it.\n\nThis works for me anyway...\n    ",
        "votes": 68,
        "comentarios": [],
        "usuario": "Simon",
        "usuario_id": 124
    },
    {
        "_id": 79,
        "fecha": { "$date" : "2019-01-02T16:46:18Z" },
        "decripcion": "\nI find it easier to remember how it works, and then I can figure out any specific start/stop/step combination.\n\nIt's instructive to understand range() first:\n\ndef range(start=0, stop, step=1):  # Illegal syntax, but that's the effect\n    i = start\n    while (i < stop if step > 0 else i > stop):\n        yield i\n        i += step\n\n\nBegin from start, increment by step, do not reach stop.  Very simple.\n\nThe thing to remember about negative step is that stop is always the excluded end, whether it's higher or lower. If you want same slice in opposite order, it's much cleaner to do the reversal separately: e.g. 'abcde'[1:-2][::-1] slices off one char from left, two from right, then reverses. (See also reversed().)\n\nSequence slicing is same, except it first normalizes negative indexes, and it can never go outside the sequence:\n\nTODO: The code below had a bug with \"never go outside the sequence\" when abs(step)>1; I think I patched it to be correct, but it's hard to understand.\n\ndef this_is_how_slicing_works(seq, start=None, stop=None, step=1):\n    if start is None:\n        start = (0 if step > 0 else len(seq)-1)\n    elif start < 0:\n        start += len(seq)\n    if not 0 <= start < len(seq):  # clip if still outside bounds\n        start = (0 if step > 0 else len(seq)-1)\n    if stop is None:\n        stop = (len(seq) if step > 0 else -1)  # really -1, not last element\n    elif stop < 0:\n        stop += len(seq)\n    for i in range(start, stop, step):\n        if 0 <= i < len(seq):\n            yield seq[i]\n\n\nDon't worry about the is None details - just remember that omitting start and/or stop always does the right thing to give you the whole sequence.\n\nNormalizing negative indexes first allows start and/or stop to be counted from the end independently: 'abcde'[1:-2] == 'abcde'[1:3] == 'bc' despite range(1,-2) == [].\nThe normalization is sometimes thought of as \"modulo the length\", but note it adds the length just once: e.g. 'abcde'[-53:42] is just the whole string.\n    ",
        "votes": 52,
        "comentarios": [
            {
                "decripcion": "The this_is_how_slicing_works is not the same as python slice. E.G. [0, 1, 2][-5:3:3] will get [0] in python, but list(this_is_how_slicing_works([0, 1, 2], -5, 3, 3)) get [1].",
                "fecha": { "$date" : "2016-10-29T12:56:59Z" },
                "usuario": "Eastsun",
                "usuario_id": 125
            },
            {
                "decripcion": "@Eastsun Oops, you're right!  A clearer case: range(4)[-200:200:3] == [0, 3] but list(this_is_how_slicing_works([0, 1, 2, 3], -200, 200, 3)) == [2]. My if 0 <= i < len(seq): was an attempt to implement \"never go outside the sequence\" simply but is wrong for step>1.  I'll rewrite it later today (with tests).",
                "fecha": { "$date" : "2016-10-30T12:36:59Z" },
                "usuario": "Beni Cherniavsky-Paskin",
                "usuario_id": 103
            }
        ],
        "usuario": "Beni Cherniavsky-Paskin",
        "usuario_id": 103
    },
    {
        "_id": 80,
        "fecha": { "$date" : "2009-02-06T21:16:28Z" },
        "decripcion": "\nI use the \"an index points between elements\" method of thinking about it myself, but one way of describing it which sometimes helps others get it is this:\n\nmylist[X:Y]\n\n\nX is the index of the first element you want.\nY is the index of the first element you don't want.\n    ",
        "votes": 42,
        "comentarios": [],
        "usuario": "Steve Losh",
        "usuario_id": 126
    },
    {
        "_id": 81,
        "fecha": { "$date" : "2017-02-11T19:56:15Z" },
        "decripcion": "\nIndex:\n      ------------>\n  0   1   2   3   4\n+---+---+---+---+---+\n| a | b | c | d | e |\n+---+---+---+---+---+\n  0  -4  -3  -2  -1\n      <------------\n\nSlice:\n    <---------------|\n|--------------->\n:   1   2   3   4   :\n+---+---+---+---+---+\n| a | b | c | d | e |\n+---+---+---+---+---+\n:  -4  -3  -2  -1   :\n|--------------->\n    <---------------|\n\n\nI hope this will help you to model the list in Python.\n\nReference: http://wiki.python.org/moin/MovingToPythonFromOtherLanguages\n    ",
        "votes": 42,
        "comentarios": [],
        "usuario": "xiaoyu",
        "usuario_id": 127
    },
    {
        "_id": 82,
        "fecha": { "$date" : "2017-05-23T12:34:44Z" },
        "decripcion": "\nPython slicing notation:\n\na[start:end:step]\n\n\n\nFor start and end, negative values are interpreted as being relative to the end of the sequence.\nPositive indices for end indicate the position after the last element to be included.\nBlank values are defaulted as follows: [+0:-0:1].\nUsing a negative step reverses the interpretation of start and end\n\n\nThe notation extends to (numpy) matrices and multidimensional arrays.  For example, to slice entire columns you can use:\n\nm[::,0:2:] ## slice the first two columns\n\n\nSlices hold references, not copies, of the array elements.  If you want to make a separate copy an array, you can use deepcopy().\n    ",
        "votes": 38,
        "comentarios": [],
        "usuario": "Brent Bradburn",
        "usuario_id": 128
    },
    {
        "_id": 83,
        "fecha": { "$date" : "2019-09-26T07:58:01Z" },
        "decripcion": "\nThis is how I teach slices to newbies:\n\nUnderstanding the difference between indexing and slicing:\n\nWiki Python has this amazing picture which clearly distinguishes indexing and slicing.\n\n\n\nIt is a list with six elements in it. To understand slicing better, consider that list as a set of six boxes placed together. Each box has an alphabet in it.\n\nIndexing is like dealing with the contents of box. You can check contents of any box. But you can't check the contents of multiple boxes at once. You can even replace the contents of the box. But you can't place two balls in one box or replace two balls at a time.\n\nIn [122]: alpha = ['a', 'b', 'c', 'd', 'e', 'f']\n\nIn [123]: alpha\nOut[123]: ['a', 'b', 'c', 'd', 'e', 'f']\n\nIn [124]: alpha[0]\nOut[124]: 'a'\n\nIn [127]: alpha[0] = 'A'\n\nIn [128]: alpha\nOut[128]: ['A', 'b', 'c', 'd', 'e', 'f']\n\nIn [129]: alpha[0,1]\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-129-c7eb16585371> in <module>()\n----> 1 alpha[0,1]\n\nTypeError: list indices must be integers, not tuple\n\n\nSlicing is like dealing with boxes themselves. You can pick up the first box and place it on another table. To pick up the box, all you need to know is the position of beginning and ending of the box.\n\nYou can even pick up the first three boxes or the last two boxes or all boxes between 1 and 4. So, you can pick any set of boxes if you know the beginning and ending. These positions are called start and stop positions.\n\nThe interesting thing is that you can replace multiple boxes at once. Also you can place multiple boxes wherever you like.\n\nIn [130]: alpha[0:1]\nOut[130]: ['A']\n\nIn [131]: alpha[0:1] = 'a'\n\nIn [132]: alpha\nOut[132]: ['a', 'b', 'c', 'd', 'e', 'f']\n\nIn [133]: alpha[0:2] = ['A', 'B']\n\nIn [134]: alpha\nOut[134]: ['A', 'B', 'c', 'd', 'e', 'f']\n\nIn [135]: alpha[2:2] = ['x', 'xx']\n\nIn [136]: alpha\nOut[136]: ['A', 'B', 'x', 'xx', 'c', 'd', 'e', 'f']\n\n\nSlicing With Step:\n\nTill now you have picked boxes continuously. But sometimes you need to pick up discretely. For example, you can pick up every second box. You can even pick up every third box from the end. This value is called step size. This represents the gap between your successive pickups. The step size should be positive if You are picking boxes from the beginning to end and vice versa.\n\nIn [137]: alpha = ['a', 'b', 'c', 'd', 'e', 'f']\n\nIn [142]: alpha[1:5:2]\nOut[142]: ['b', 'd']\n\nIn [143]: alpha[-1:-5:-2]\nOut[143]: ['f', 'd']\n\nIn [144]: alpha[1:5:-2]\nOut[144]: []\n\nIn [145]: alpha[-1:-5:2]\nOut[145]: []\n\n\nHow Python Figures Out Missing Parameters:\n\nWhen slicing, if you leave out any parameter, Python tries to figure it out automatically.\n\nIf you check the source code of CPython, you will find a function called PySlice_GetIndicesEx() which figures out indices to a slice for any given parameters. Here is the logical equivalent code in Python.\n\nThis function takes a Python object and optional parameters for slicing and returns the start, stop, step, and slice length for the requested slice.\n\ndef py_slice_get_indices_ex(obj, start=None, stop=None, step=None):\n\n    length = len(obj)\n\n    if step is None:\n        step = 1\n    if step == 0:\n        raise Exception(\"Step cannot be zero.\")\n\n    if start is None:\n        start = 0 if step > 0 else length - 1\n    else:\n        if start < 0:\n            start += length\n        if start < 0:\n            start = 0 if step > 0 else -1\n        if start >= length:\n            start = length if step > 0 else length - 1\n\n    if stop is None:\n        stop = length if step > 0 else -1\n    else:\n        if stop < 0:\n            stop += length\n        if stop < 0:\n            stop = 0 if step > 0 else -1\n        if stop >= length:\n            stop = length if step > 0 else length - 1\n\n    if (step < 0 and stop >= start) or (step > 0 and start >= stop):\n        slice_length = 0\n    elif step < 0:\n        slice_length = (stop - start + 1)/(step) + 1\n    else:\n        slice_length = (stop - start - 1)/(step) + 1\n\n    return (start, stop, step, slice_length)\n\n\nThis is the intelligence that is present behind slices. Since Python has an built-in function called slice, you can pass some parameters and check how smartly it calculates missing parameters.\n\nIn [21]: alpha = ['a', 'b', 'c', 'd', 'e', 'f']\n\nIn [22]: s = slice(None, None, None)\n\nIn [23]: s\nOut[23]: slice(None, None, None)\n\nIn [24]: s.indices(len(alpha))\nOut[24]: (0, 6, 1)\n\nIn [25]: range(*s.indices(len(alpha)))\nOut[25]: [0, 1, 2, 3, 4, 5]\n\nIn [26]: s = slice(None, None, -1)\n\nIn [27]: range(*s.indices(len(alpha)))\nOut[27]: [5, 4, 3, 2, 1, 0]\n\nIn [28]: s = slice(None, 3, -1)\n\nIn [29]: range(*s.indices(len(alpha)))\nOut[29]: [5, 4]\n\n\nNote: This post was originally written in my blog, The Intelligence Behind Python Slices.\n    ",
        "votes": 36,
        "comentarios": [],
        "usuario": "ChillarAnand",
        "usuario_id": 129
    },
    {
        "_id": 84,
        "fecha": { "$date" : "2013-04-19T16:28:16Z" },
        "decripcion": "\nYou can also use slice assignment to remove one or more elements from a list:\n\nr = [1, 'blah', 9, 8, 2, 3, 4]\n>>> r[1:4] = []\n>>> r\n[1, 2, 3, 4]\n\n    ",
        "votes": 34,
        "comentarios": [],
        "usuario": "dansalmo",
        "usuario_id": 17
    },
    {
        "_id": 85,
        "fecha": { "$date" : "2019-05-08T08:35:55Z" },
        "decripcion": "\nThis is just for some extra info...\nConsider the list below \n\n>>> l=[12,23,345,456,67,7,945,467]\n\n\nFew other tricks for reversing the list:\n\n>>> l[len(l):-len(l)-1:-1]\n[467, 945, 7, 67, 456, 345, 23, 12]\n\n>>> l[:-len(l)-1:-1]\n[467, 945, 7, 67, 456, 345, 23, 12]\n\n>>> l[len(l)::-1]\n[467, 945, 7, 67, 456, 345, 23, 12]\n\n>>> l[::-1]\n[467, 945, 7, 67, 456, 345, 23, 12]\n\n>>> l[-1:-len(l)-1:-1]\n[467, 945, 7, 67, 456, 345, 23, 12]\n\n    ",
        "votes": 33,
        "comentarios": [],
        "usuario": "Arindam Roychowdhury",
        "usuario_id": 130
    },
    {
        "_id": 86,
        "fecha": { "$date" : "2013-12-07T16:52:45Z" },
        "decripcion": "\nAs a general rule, writing code with a lot of hardcoded index values leads to a readability\nand maintenance mess. For example, if you come back to the code a year later, you\u2019ll\nlook at it and wonder what you were thinking when you wrote it. The solution shown\nis simply a way of more clearly stating what your code is actually doing.\nIn general, the built-in slice() creates a slice object that can be used anywhere a slice\nis allowed. For example:\n\n>>> items = [0, 1, 2, 3, 4, 5, 6]\n>>> a = slice(2, 4)\n>>> items[2:4]\n[2, 3]\n>>> items[a]\n[2, 3]\n>>> items[a] = [10,11]\n>>> items\n[0, 1, 10, 11, 4, 5, 6]\n>>> del items[a]\n>>> items\n[0, 1, 4, 5, 6]\n\n\nIf you have a slice instance s, you can get more information about it by looking at its\ns.start, s.stop, and s.step attributes, respectively. For example:\n\n\n>>> a = slice(10, 50, 2)\n>>> a.start\n10\n>>> a.stop\n50\n>>> a.step\n2\n>>>\n\n\n    ",
        "votes": 29,
        "comentarios": [],
        "usuario": "Python_Dude",
        "usuario_id": 131
    },
    {
        "_id": 87,
        "fecha": { "$date" : "2019-09-26T08:04:23Z" },
        "decripcion": "\n1. Slice Notation\n\nTo make it simple, remember slice has only one form\uff1a\n\ns[start:end:step]\n\n\nand here is how it works:\n\n\ns: an object that can be sliced\nstart: first index to start iteration\nend: last index, NOTE that end index will not be included in the resulted slice\nstep: pick element every step index\n\n\nAnother import thing: all start,end, step can be omitted! And if they are omitted, their default value will be used: 0,len(s),1 accordingly.\n\nSo possible variations are:\n\n# Mostly used variations\ns[start:end]\ns[start:]\ns[:end]\n\n# Step-related variations\ns[:end:step]\ns[start::step]\ns[::step]\n\n# Make a copy\ns[:]\n\n\nNOTE: If start >= end (considering only when step>0), Python will return a empty slice [].\n\n2. Pitfalls\n\nThe above part explains the core features on how slice works, and it will work on most occasions. However, there can be pitfalls you should watch out, and this part explains them.\n\nNegative indexes\n\nThe very first thing that confuses Python learners is that an index can be negative!\nDon't panic: a negative index means count backwards.\n\nFor example:\n\ns[-5:]    # Start at the 5th index from the end of array,\n          # thus returning the last 5 elements.\ns[:-5]    # Start at index 0, and end until the 5th index from end of array,\n          # thus returning s[0:len(s)-5].\n\n\nNegative step\n\nMaking things more confusing is that step can be negative too!\n\nA negative step means iterate the array backwards: from the end to start, with the end index included, and the start index excluded from the result.\n\nNOTE: when step is negative, the default value for start is len(s) (while end does not equal to 0, because s[::-1] contains s[0]). For example:\n\ns[::-1]            # Reversed slice\ns[len(s)::-1]      # The same as above, reversed slice\ns[0:len(s):-1]     # Empty list\n\n\nOut of range error?\n\nBe surprised: slice does not raise an IndexError when the index is out of range!\n\nIf the index is out of range, Python will try its best to set the index to 0 or len(s) according to the situation. For example:\n\ns[:len(s)+5]      # The same as s[:len(s)]\ns[-len(s)-5::]    # The same as s[0:]\ns[len(s)+5::-1]   # The same as s[len(s)::-1], and the same as s[::-1]\n\n\n3. Examples\n\nLet's finish this answer with examples, explaining everything we have discussed:\n\n# Create our array for demonstration\nIn [1]: s = [i for i in range(10)]\n\nIn [2]: s\nOut[2]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nIn [3]: s[2:]   # From index 2 to last index\nOut[3]: [2, 3, 4, 5, 6, 7, 8, 9]\n\nIn [4]: s[:8]   # From index 0 up to index 8\nOut[4]: [0, 1, 2, 3, 4, 5, 6, 7]\n\nIn [5]: s[4:7]  # From index 4 (included) up to index 7(excluded)\nOut[5]: [4, 5, 6]\n\nIn [6]: s[:-2]  # Up to second last index (negative index)\nOut[6]: [0, 1, 2, 3, 4, 5, 6, 7]\n\nIn [7]: s[-2:]  # From second last index (negative index)\nOut[7]: [8, 9]\n\nIn [8]: s[::-1] # From last to first in reverse order (negative step)\nOut[8]: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\nIn [9]: s[::-2] # All odd numbers in reversed order\nOut[9]: [9, 7, 5, 3, 1]\n\nIn [11]: s[-2::-2] # All even numbers in reversed order\nOut[11]: [8, 6, 4, 2, 0]\n\nIn [12]: s[3:15]   # End is out of range, and Python will set it to len(s).\nOut[12]: [3, 4, 5, 6, 7, 8, 9]\n\nIn [14]: s[5:1]    # Start > end; return empty list\nOut[14]: []\n\nIn [15]: s[11]     # Access index 11 (greater than len(s)) will raise an IndexError\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n<ipython-input-15-79ffc22473a3> in <module>()\n----> 1 s[11]\n\nIndexError: list index out of range\n\n    ",
        "votes": 28,
        "comentarios": [],
        "usuario": "cizixs",
        "usuario_id": 132
    },
    {
        "_id": 88,
        "fecha": { "$date" : "2019-09-26T08:08:54Z" },
        "decripcion": "\nThe previous answers don't discuss multi-dimensional array slicing which is possible using the famous NumPy package:\n\nSlicing can also be applied to multi-dimensional arrays.\n\n# Here, a is a NumPy array\n\n>>> a\narray([[ 1,  2,  3,  4],\n       [ 5,  6,  7,  8],\n       [ 9, 10, 11, 12]])\n>>> a[:2, 0:3:2]\narray([[1, 3],\n       [5, 7]])\n\n\nThe \":2\" before the comma operates on the first dimension and the \"0:3:2\" after the comma operates on the second dimension.\n    ",
        "votes": 27,
        "comentarios": [
            {
                "decripcion": "Just a friendly reminder that you cannot do this on Python list but only on array in Numpy",
                "fecha": { "$date" : "2019-07-26T21:46:53Z" },
                "usuario": "Mars Lee",
                "usuario_id": 133
            }
        ],
        "usuario": "Statham",
        "usuario_id": 134
    },
    {
        "_id": 89,
        "fecha": { "$date" : "2020-01-15T12:29:43Z" },
        "decripcion": "\nI personally think about it like a for loop:\n\na[start:end:step]\n# for(i = start; i < end; i += step)\n\n\nAlso, note that negative values for start and end are relative to the end of the list and computed in the example above by given_index + a.shape[0].\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "Raman",
        "usuario_id": 135
    },
    {
        "_id": 90,
        "fecha": { "$date" : "2020-01-08T16:12:41Z" },
        "decripcion": "\nIn my opinion, you will understand and memorize better the Python string slicing notation if you look at it the following way (read on).\n\nLet's work with the following string ...\n\nazString = \"abcdefghijklmnopqrstuvwxyz\"\n\n\nFor those who don't know, you can create any substring from azString using the notation azString[x:y]\n\nComing from other programming languages, that's when the common sense gets compromised. What are x and y?\n\nI had to sit down and run several scenarios in my quest for a memorization technique that will help me remember what x and y are and help me slice strings properly at the first attempt.\n\nMy conclusion is that x and y should be seen as the boundary indexes that are surrounding the strings that we want to extra. So we should see the expression as azString[index1, index2] or even more clearer as azString[index_of_first_character, index_after_the_last_character].\n\nHere is an example visualization of that ...\n\nLetters   a b c d e f g h i j ...\n         \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191\n             \u250a           \u250a\nIndexes  0 1 2 3 4 5 6 7 8 9 ...\n             \u250a           \u250a\ncdefgh    index1       index2\n\n\nSo all you have to do is setting index1 and index2 to the values that will surround the desired substring. For instance, to get the substring \"cdefgh\", you can use azString[2:8], because the index on the left side of \"c\" is 2 and the one on the right size of \"h\" is 8.\n\nRemember that we are setting the boundaries. And those boundaries are the positions where you could place some brackets that will be wrapped around the substring like this ...\n\na b [ c d e f g h ] i j\n\nThat trick works all the time and is easy to memorize.\n    ",
        "votes": 17,
        "comentarios": [],
        "usuario": "asiby",
        "usuario_id": 136
    },
    {
        "_id": 91,
        "fecha": { "$date" : "2014-10-18T17:40:45Z" },
        "decripcion": "\n#!/usr/bin/env python\n\ndef slicegraphical(s, lista):\n\n    if len(s) > 9:\n        print \"\"\"Enter a string of maximum 9 characters,\n    so the printig would looki nice\"\"\"\n        return 0;\n    # print \" \",\n    print '  '+'+---' * len(s) +'+'\n    print ' ',\n    for letter in s:\n        print '| {}'.format(letter),\n    print '|'\n    print \" \",; print '+---' * len(s) +'+'\n\n    print \" \",\n    for letter in range(len(s) +1):\n        print '{}  '.format(letter),\n    print \"\"\n    for letter in range(-1*(len(s)), 0):\n        print ' {}'.format(letter),\n    print ''\n    print ''\n\n\n    for triada in lista:\n        if len(triada) == 3:\n            if triada[0]==None and triada[1] == None and triada[2] == None:\n                # 000\n                print s+'[   :   :   ]' +' = ', s[triada[0]:triada[1]:triada[2]]\n            elif triada[0] == None and triada[1] == None and triada[2] != None:\n                # 001\n                print s+'[   :   :{0:2d} ]'.format(triada[2], '','') +' = ', s[triada[0]:triada[1]:triada[2]]\n            elif triada[0] == None and triada[1] != None and triada[2] == None:\n                # 010\n                print s+'[   :{0:2d} :   ]'.format(triada[1]) +' = ', s[triada[0]:triada[1]:triada[2]]\n            elif triada[0] == None and triada[1] != None and triada[2] != None:\n                # 011\n                print s+'[   :{0:2d} :{1:2d} ]'.format(triada[1], triada[2]) +' = ', s[triada[0]:triada[1]:triada[2]]\n            elif triada[0] != None and triada[1] == None and triada[2] == None:\n                # 100\n                print s+'[{0:2d} :   :   ]'.format(triada[0]) +' = ', s[triada[0]:triada[1]:triada[2]]\n            elif triada[0] != None and triada[1] == None and triada[2] != None:\n                # 101\n                print s+'[{0:2d} :   :{1:2d} ]'.format(triada[0], triada[2]) +' = ', s[triada[0]:triada[1]:triada[2]]\n            elif triada[0] != None and triada[1] != None and triada[2] == None:\n                # 110\n                print s+'[{0:2d} :{1:2d} :   ]'.format(triada[0], triada[1]) +' = ', s[triada[0]:triada[1]:triada[2]]\n            elif triada[0] != None and triada[1] != None and triada[2] != None:\n                # 111\n                print s+'[{0:2d} :{1:2d} :{2:2d} ]'.format(triada[0], triada[1], triada[2]) +' = ', s[triada[0]:triada[1]:triada[2]]\n\n        elif len(triada) == 2:\n            if triada[0] == None and triada[1] == None:\n                # 00\n                print s+'[   :   ]    ' + ' = ', s[triada[0]:triada[1]]\n            elif triada[0] == None and triada[1] != None:\n                # 01\n                print s+'[   :{0:2d} ]    '.format(triada[1]) + ' = ', s[triada[0]:triada[1]]\n            elif triada[0] != None and triada[1] == None:\n                # 10\n                print s+'[{0:2d} :   ]    '.format(triada[0]) + ' = ', s[triada[0]:triada[1]]\n            elif triada[0] != None and triada[1] != None:\n                # 11\n                print s+'[{0:2d} :{1:2d} ]    '.format(triada[0],triada[1]) + ' = ', s[triada[0]:triada[1]]\n\n        elif len(triada) == 1:\n            print s+'[{0:2d} ]        '.format(triada[0]) + ' = ', s[triada[0]]\n\n\nif __name__ == '__main__':\n    # Change \"s\" to what ever string you like, make it 9 characters for\n    # better representation.\n    s = 'COMPUTERS'\n\n    # add to this list different lists to experement with indexes\n    # to represent ex. s[::], use s[None, None,None], otherwise you get an error\n    # for s[2:] use s[2:None]\n\n    lista = [[4,7],[2,5,2],[-5,1,-1],[4],[-4,-6,-1], [2,-3,1],[2,-3,-1], [None,None,-1],[-5,None],[-5,0,-1],[-5,None,-1],[-1,1,-2]]\n\n    slicegraphical(s, lista)\n\n\nYou can run this script and experiment with it, below is some samples that I got from the script.\n\n  +---+---+---+---+---+---+---+---+---+\n  | C | O | M | P | U | T | E | R | S |\n  +---+---+---+---+---+---+---+---+---+\n  0   1   2   3   4   5   6   7   8   9   \n -9  -8  -7  -6  -5  -4  -3  -2  -1 \n\nCOMPUTERS[ 4 : 7 ]     =  UTE\nCOMPUTERS[ 2 : 5 : 2 ] =  MU\nCOMPUTERS[-5 : 1 :-1 ] =  UPM\nCOMPUTERS[ 4 ]         =  U\nCOMPUTERS[-4 :-6 :-1 ] =  TU\nCOMPUTERS[ 2 :-3 : 1 ] =  MPUT\nCOMPUTERS[ 2 :-3 :-1 ] =  \nCOMPUTERS[   :   :-1 ] =  SRETUPMOC\nCOMPUTERS[-5 :   ]     =  UTERS\nCOMPUTERS[-5 : 0 :-1 ] =  UPMO\nCOMPUTERS[-5 :   :-1 ] =  UPMOC\nCOMPUTERS[-1 : 1 :-2 ] =  SEUM\n[Finished in 0.9s]\n\n\nWhen using a negative step, notice that the answer is shifted to the right by 1.\n    ",
        "votes": 15,
        "comentarios": [],
        "usuario": "mahmoh",
        "usuario_id": 137
    },
    {
        "_id": 92,
        "fecha": { "$date" : "2016-05-26T08:16:54Z" },
        "decripcion": "\nMy brain seems happy to accept that lst[start:end] contains the start-th item. I might even say that it is a 'natural assumption'.\n\nBut occasionally a doubt creeps in and my brain asks for reassurance that it does not contain the end-th element.\n\nIn these moments I rely on this simple theorem:\n\nfor any n,    lst = lst[:n] + lst[n:]\n\n\nThis pretty property tells me that lst[start:end] does not contain the end-th item because it is in lst[end:].\n\nNote that this theorem is true for any n at all. For example, you can check that\n\nlst = range(10)\nlst[:-42] + lst[-42:] == lst\n\n\nreturns True.\n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "Robert",
        "usuario_id": 138
    },
    {
        "_id": 93,
        "fecha": { "$date" : "2019-09-26T08:23:54Z" },
        "decripcion": "\nI want to add one Hello, World! example that explains the basics of slices for the very beginners. It helped me a lot.\n\nLet's have a list with six values ['P', 'Y', 'T', 'H', 'O', 'N']:\n\n+---+---+---+---+---+---+\n| P | Y | T | H | O | N |\n+---+---+---+---+---+---+\n  0   1   2   3   4   5\n\n\nNow the simplest slices of that list are its sublists. The notation is [<index>:<index>] and the key is to read it like this:\n\n[ start cutting before this index : end cutting before this index ]\n\n\nNow if you make a slice [2:5] of the list above, this will happen:\n\n        |           |\n+---+---|---+---+---|---+\n| P | Y | T | H | O | N |\n+---+---|---+---+---|---+\n  0   1 | 2   3   4 | 5\n\n\nYou made a cut before the element with index 2 and another cut before the element with index 5. So the result will be a slice between those two cuts, a list ['T', 'H', 'O'].\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "Jeyekomon",
        "usuario_id": 139
    },
    {
        "_id": 94,
        "fecha": { "$date" : "2019-09-26T08:16:53Z" },
        "decripcion": "\nIn Python, the most basic form for slicing is the following:\n\nl[start:end]\n\n\nwhere l is some collection, start is an inclusive index, and end is an exclusive index.\n\nIn [1]: l = list(range(10))\n\nIn [2]: l[:5] # First five elements\nOut[2]: [0, 1, 2, 3, 4]\n\nIn [3]: l[-5:] # Last five elements\nOut[3]: [5, 6, 7, 8, 9]\n\n\nWhen slicing from the start, you can omit the zero index, and when slicing to the end, you can omit the final index since it is redundant, so do not be verbose:\n\nIn [5]: l[:3] == l[0:3]\nOut[5]: True\n\nIn [6]: l[7:] == l[7:len(l)]\nOut[6]: True\n\n\nNegative integers are useful when doing offsets relative to the end of a collection:\n\nIn [7]: l[:-1] # Include all elements but the last one\nOut[7]: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\nIn [8]: l[-3:] # Take the last three elements\nOut[8]: [7, 8, 9]\n\n\nIt is possible to provide indices that are out of bounds when slicing such as:\n\nIn [9]: l[:20] # 20 is out of index bounds, and l[20] will raise an IndexError exception\nOut[9]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nIn [11]: l[-20:] # -20 is out of index bounds, and l[-20] will raise an IndexError exception\nOut[11]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nKeep in mind that the result of slicing a collection is a whole new collection. In addition, when using slice notation in assignments, the length of the slice assignments do not need to be the same. The values before and after the assigned slice will be kept, and the collection will shrink or grow to contain the new values:\n\nIn [16]: l[2:6] = list('abc') # Assigning fewer elements than the ones contained in the sliced collection l[2:6]\n\nIn [17]: l\nOut[17]: [0, 1, 'a', 'b', 'c', 6, 7, 8, 9]\n\nIn [18]: l[2:5] = list('hello') # Assigning more elements than the ones contained in the sliced collection l [2:5]\n\nIn [19]: l\nOut[19]: [0, 1, 'h', 'e', 'l', 'l', 'o', 6, 7, 8, 9]\n\n\nIf you omit the start and end index, you will make a copy of the collection:\n\nIn [14]: l_copy = l[:]\n\nIn [15]: l == l_copy and l is not l_copy\nOut[15]: True\n\n\nIf the start and end indexes are omitted when performing an assignment operation, the entire content of the collection will be replaced with a copy of what is referenced:\n\nIn [20]: l[:] = list('hello...')\n\nIn [21]: l\nOut[21]: ['h', 'e', 'l', 'l', 'o', '.', '.', '.']\n\n\nBesides basic slicing, it is also possible to apply the following notation:\n\nl[start:end:step]\n\n\nwhere l is a collection, start is an inclusive index, end is an exclusive index, and step is a stride that can be used to take every nth item in l.\n\nIn [22]: l = list(range(10))\n\nIn [23]: l[::2] # Take the elements which indexes are even\nOut[23]: [0, 2, 4, 6, 8]\n\nIn [24]: l[1::2] # Take the elements which indexes are odd\nOut[24]: [1, 3, 5, 7, 9]\n\n\nUsing step provides a useful trick to reverse a collection in Python:\n\nIn [25]: l[::-1]\nOut[25]: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\n\nIt is also possible to use negative integers for step as the following example:\n\nIn[28]:  l[::-2]\nOut[28]: [9, 7, 5, 3, 1]\n\n\nHowever, using a negative value for step could become very confusing. Moreover, in order to be Pythonic, you should avoid using start, end, and step in a single slice. In case this is required, consider doing this in two assignments (one to slice, and the other to stride).\n\nIn [29]: l = l[::2] # This step is for striding\n\nIn [30]: l\nOut[30]: [0, 2, 4, 6, 8]\n\nIn [31]: l = l[1:-1] # This step is for slicing\n\nIn [32]: l\nOut[32]: [2, 4, 6]\n\n    ",
        "votes": 11,
        "comentarios": [],
        "usuario": "lmiguelvargasf",
        "usuario_id": 140
    },
    {
        "_id": 95,
        "fecha": { "$date" : "2019-09-26T08:19:02Z" },
        "decripcion": "\nMost of the previous answers clears up questions about slice notation.\n\nThe extended indexing syntax used for slicing is aList[start:stop:step], and basic examples are:\n\n:\n\nMore slicing examples: 15 Extended Slices\n    ",
        "votes": 11,
        "comentarios": [],
        "usuario": "Roshan Bagdiya",
        "usuario_id": 141
    },
    {
        "_id": 96,
        "fecha": { "$date" : "2019-09-26T08:10:54Z" },
        "decripcion": "\nThe below is the example of an index of a string:\n\n +---+---+---+---+---+\n | H | e | l | p | A |\n +---+---+---+---+---+\n 0   1   2   3   4   5\n-5  -4  -3  -2  -1\n\nstr=\"Name string\"\n\n\nSlicing example: [start:end:step]\n\nstr[start:end] # Items start through end-1\nstr[start:]    # Items start through the rest of the array\nstr[:end]      # Items from the beginning through end-1\nstr[:]         # A copy of the whole array\n\n\nBelow is the example usage:\n\nprint str[0] = N\nprint str[0:2] = Na\nprint str[0:7] = Name st\nprint str[0:7:2] = Nm t\nprint str[0:-1:2] = Nm ti\n\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "Prince Dhadwal",
        "usuario_id": 142
    },
    {
        "_id": 97,
        "fecha": { "$date" : "2019-09-26T08:22:50Z" },
        "decripcion": "\nIf you feel negative indices in slicing is confusing, here's a very easy way to think about it: just replace the negative index with len - index. So for example, replace -3 with len(list) - 3.\n\nThe best way to illustrate what slicing does internally is just show it in code that implements this operation:\n\ndef slice(list, start = None, end = None, step = 1):\n  # Take care of missing start/end parameters\n  start = 0 if start is None else start\n  end = len(list) if end is None else end\n\n  # Take care of negative start/end parameters\n  start = len(list) + start if start < 0 else start\n  end = len(list) + end if end < 0 else end\n\n  # Now just execute a for-loop with start, end and step\n  return [list[i] for i in range(start, end, step)]\n\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "Shital Shah",
        "usuario_id": 143
    },
    {
        "_id": 98,
        "fecha": { "$date" : "2020-07-23T05:22:23Z" },
        "decripcion": "\nThe rules of slicing are as follows:\n[lower bound : upper bound : step size]\n\nI- Convert upper bound  and lower bound into common signs.\nII- Then check if the step size is a positive or a negative value.\n(i) If the step size is a positive value, upper bound should be greater than lower bound, otherwise empty string is printed. For example:\ns=\"Welcome\"\ns1=s[0:3:1]\nprint(s1)\n\nThe output:\nWel\n\nHowever if we run the following code:\ns=\"Welcome\"\ns1=s[3:0:1]\nprint(s1)\n\nIt will return an empty string.\n(ii) If the step size if a negative value, upper bound should be lesser than lower bound, otherwise empty string will be printed. For example:\ns=\"Welcome\"\ns1=s[3:0:-1]\nprint(s1)\n\nThe output:\ncle\n\nBut if we run the following code:\ns=\"Welcome\"\ns1=s[0:5:-1]\nprint(s1)\n\nThe output will be an empty string.\nThus in the code:\nstr = 'abcd'\nl = len(str)\nstr2 = str[l-1:0:-1]    #str[3:0:-1] \nprint(str2)\nstr2 = str[l-1:-1:-1]    #str[3:-1:-1]\nprint(str2)\n\nIn the first str2=str[l-1:0:-1], the upper bound is lesser than the lower bound, thus dcb is printed.\nHowever in str2=str[l-1:-1:-1], the upper bound is not less than the lower bound (upon converting lower bound into negative value which is -1: since index of last element is -1 as well as 3).\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "Anshika Singh",
        "usuario_id": 144
    },
    {
        "_id": 99,
        "fecha": { "$date" : "2019-09-26T08:25:46Z" },
        "decripcion": "\nThe basic slicing technique is to define the starting point, the stopping point, and the step size - also known as stride.\n\nFirst, we will create a list of values to use in our slicing.\n\nCreate two lists to slice. The first is a numeric list from 1 to 9 (List A). The second is also a numeric list, from 0 to 9 (List B):\n\nA = list(range(1, 10, 1)) # Start, stop, and step\nB = list(range(9))\n\nprint(\"This is List A:\", A)\nprint(\"This is List B:\", B)\n\n\nIndex the number 3 from A and the number 6 from B.\n\nprint(A[2])\nprint(B[6])\n\n\nBasic Slicing\n\nExtended indexing syntax used for slicing is aList[start:stop:step]. The start argument and the step argument both default to none - the only required argument is stop. Did you notice this is similar to how range was used to define lists A and B? This is because the slice object represents the set of indices specified by range(start, stop, step). Python 3.4 documentation.\n\nAs you can see, defining only stop returns one element. Since the start defaults to none, this translates into retrieving only one element.\n\nIt is important to note, the first element is index 0, not index 1. This is why we are using 2 lists for this exercise. List A's elements are numbered according to the ordinal position (the first element is 1, the second element is 2, etc.) while List B's elements are the numbers that would be used to index them ([0] for the first element 0, etc.).\n\nWith extended indexing syntax, we retrieve a range of values. For example, all values are retrieved with a colon.\n\nA[:]\n\n\nTo retrieve a subset of elements, the start and stop positions need to be defined.\n\nGiven the pattern aList[start:stop], retrieve the first two elements from List A.\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Babu Chandermani",
        "usuario_id": 145
    },
    {
        "_id": 100,
        "fecha": { "$date" : "2021-07-30T23:41:21Z" },
        "decripcion": "\nActually, this is not a design flaw, and it is not because of internals or performance.\nIt comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.\nAs soon as you think of it this way, then it completely makes sense: a function is an object being evaluated on its definition; default parameters are kind of \"member data\" and therefore their state may change from one call to the other - exactly as in any other object.\nIn any case, Effbot has a very nice explanation of the reasons for this behavior in Default Parameter Values in Python.\nI found it very clear, and I really suggest reading it for a better knowledge of how function objects work.\n    ",
        "votes": 1761,
        "comentarios": [
            {
                "decripcion": "To anyone reading the above answer, I strongly recommend you take the time to read through the linked Effbot article. As well as all the other useful info, the part on how this language feature can be used for result caching/memoisation is very handy to know!",
                "fecha": { "$date" : "2011-10-14T00:05:52Z" },
                "usuario": "Cam Jackson",
                "usuario_id": 146
            },
            {
                "decripcion": "Even if it's a first-class object, one might still envision a design where the code for each default value is stored along with the object and re-evaluated each time the function is called. I'm not saying that would be better, just that functions being first-class objects does not fully preclude it.",
                "fecha": { "$date" : "2013-01-11T10:55:25Z" },
                "usuario": "gerrit",
                "usuario_id": 147
            },
            {
                "decripcion": "Sorry, but anything considered \"The biggest WTF in Python\" is most definitely a design flaw.  This is a source of bugs for everyone at some point, because no one expects that behavior at first - which means it should not have been designed that way to begin with.  I don't care what hoops they had to jump through, they should have designed Python so that default arguments are non-static.",
                "fecha": { "$date" : "2013-06-07T21:28:27Z" },
                "usuario": "BlueRaja - Danny Pflughoeft",
                "usuario_id": 148
            },
            {
                "decripcion": "Whether or not it's a design flaw, your answer seems to imply that this behaviour is somehow necessary, natural and obvious given that functions are first-class objects, and that simply isn't the case. Python has closures. If you replace the default argument with an assignment on the first line of the function, it evaluates the expression each call (potentially using names declared in an enclosing scope). There is no reason at all that it wouldn't be possible or reasonable to have default arguments evaluated each time the function is called in exactly the same way.",
                "fecha": { "$date" : "2014-01-08T22:16:13Z" },
                "usuario": "Mark Amery",
                "usuario_id": 149
            },
            {
                "decripcion": "The design doesn't directly follow from functions are objects. In your paradigm, the proposal would be to implement functions' default values as properties rather than attributes.",
                "fecha": { "$date" : "2014-05-03T20:46:09Z" },
                "usuario": "bukzor",
                "usuario_id": 150
            }
        ],
        "usuario": "rob",
        "usuario_id": 151
    },
    {
        "_id": 101,
        "fecha": { "$date" : "2021-07-30T23:44:28Z" },
        "decripcion": "\nSuppose you have the following code\nfruits = (\"apples\", \"bananas\", \"loganberries\")\n\ndef eat(food=fruits):\n    ...\n\nWhen I see the declaration of eat, the least astonishing thing is to think that if the first parameter is not given, that it will be equal to the tuple (\"apples\", \"bananas\", \"loganberries\")\nHowever, suppose later on in the code, I do something like\ndef some_random_function():\n    global fruits\n    fruits = (\"blueberries\", \"mangos\")\n\nthen if default parameters were bound at function execution rather than function declaration, I would be astonished (in a very bad way) to discover that fruits had been changed. This would be more astonishing IMO than discovering that your foo function above was mutating the list.\nThe real problem lies with mutable variables, and all languages have this problem to some extent. Here's a question: suppose in Java I have the following code:\nStringBuffer s = new StringBuffer(\"Hello World!\");\nMap<StringBuffer,Integer> counts = new HashMap<StringBuffer,Integer>();\ncounts.put(s, 5);\ns.append(\"!!!!\");\nSystem.out.println( counts.get(s) );  // does this work?\n\nNow, does my map use the value of the StringBuffer key when it was placed into the map, or does it store the key by reference? Either way, someone is astonished; either the person who tried to get the object out of the Map using a value identical to the one they put it in with, or the person who can't seem to retrieve their object even though the key they're using is literally the same object that was used to put it into the map (this is actually why Python doesn't allow its mutable built-in data types to be used as dictionary keys).\nYour example is a good one of a case where Python newcomers will be surprised and bitten. But I'd argue that if we \"fixed\" this, then that would only create a different situation where they'd be bitten instead, and that one would be even less intuitive. Moreover, this is always the case when dealing with mutable variables; you always run into cases where someone could intuitively expect one or the opposite behavior depending on what code they're writing.\nI personally like Python's current approach: default function arguments are evaluated when the function is defined and that object is always the default. I suppose they could special-case using an empty list, but that kind of special casing would cause even more astonishment, not to mention be backwards incompatible.\n    ",
        "votes": 295,
        "comentarios": [
            {
                "decripcion": "I think it's a matter of debate. You are acting on a global variable. Any evaluation performed anywhere in your code involving your global variable will now (correctly) refer to (\"blueberries\", \"mangos\"). the default parameter could just be like any other case.",
                "fecha": { "$date" : "2009-07-15T18:16:08Z" },
                "usuario": "Stefano Borini",
                "usuario_id": 152
            },
            {
                "decripcion": "Actually, I don't think I agree with your first example.  I'm not sure I like the idea of modifying an initializer like that in the first place, but if I did, I'd expect it to behave exactly as you describe \u2014 changing the default value to (\"blueberries\", \"mangos\").",
                "fecha": { "$date" : "2009-07-15T18:26:45Z" },
                "usuario": "Ben Blank",
                "usuario_id": 153
            },
            {
                "decripcion": "The default parameter is like any other case. What is unexpected is that the parameter is a global variable, and not a local one. Which in turn is because the code is executed at function definition, not call. Once you get that, and that the same goes for classes, it's perfectly clear.",
                "fecha": { "$date" : "2009-07-15T18:59:01Z" },
                "usuario": "Lennart Regebro",
                "usuario_id": 154
            },
            {
                "decripcion": "I find the example misleading rather than brilliant. If some_random_function() appends to fruits instead of assigning to it, the behaviour of eat() will change. So much for the current wonderful design. If you use a default argument that's referenced elsewhere and then modify the reference from outside the function, you are asking for trouble. The real WTF is when people define a fresh default argument (a list literal or a call to a constructor), and still get bit.",
                "fecha": { "$date" : "2014-10-09T15:37:29Z" },
                "usuario": "alexis",
                "usuario_id": 155
            },
            {
                "decripcion": "You just explicitly declared global and reassigned the tuple - there is absolutely nothing surprising if eat works differently after that.",
                "fecha": { "$date" : "2015-01-26T16:07:31Z" },
                "usuario": "user3467349",
                "usuario_id": 156
            }
        ],
        "usuario": "Eli Courtwright",
        "usuario_id": 157
    },
    {
        "_id": 102,
        "fecha": { "$date" : "2020-01-30T18:00:14Z" },
        "decripcion": "\nThe relevant part of the documentation:\n\n\n  Default parameter values are evaluated from left to right when the function definition is executed. This means that the expression is evaluated once, when the function is defined, and that the same \u201cpre-computed\u201d value is used for each call. This is especially important to understand when a default parameter is a mutable object, such as a list or a dictionary: if the function modifies the object (e.g. by appending an item to a list), the default value is in effect modified. This is generally not what was intended. A way around this is to use None as the default, and explicitly test for it in the body of the function, e.g.:\n\ndef whats_on_the_telly(penguin=None):\n    if penguin is None:\n        penguin = []\n    penguin.append(\"property of the zoo\")\n    return penguin\n\n\n    ",
        "votes": 263,
        "comentarios": [
            {
                "decripcion": "The phrases \"this is not generally what was intended\" and \"a way around this is\" smell like they're documenting a design flaw.",
                "fecha": { "$date" : "2014-05-03T20:53:15Z" },
                "usuario": "bukzor",
                "usuario_id": 150
            },
            {
                "decripcion": "@bukzor: Pitfalls need to be noted and documented, which is why this question is good and has received so many upvotes. At the same time, pitfalls don't necessarily need to be removed. How many Python beginners have passed a list to a function that modified it, and were shocked to see the changes show up in the original variable? Yet mutable object types are wonderful, when you understand how to use them. I guess it just boils down to opinion on this particular pitfall.",
                "fecha": { "$date" : "2014-06-19T17:54:06Z" },
                "usuario": "Matthew",
                "usuario_id": 158
            },
            {
                "decripcion": "The phrase \"this is not generally what was intended\" means \"not what the programmer actually wanted to happen,\" not \"not what Python is supposed to do.\"",
                "fecha": { "$date" : "2014-12-19T11:48:14Z" },
                "usuario": "holdenweb",
                "usuario_id": 100
            },
            {
                "decripcion": "@holdenweb Wow, I'm mega-late to the party. Given the context, bukzor is completely right: they're documenting behavior/consequence that was not \"intended\" when they they decided the language should exec the function's definition. Since it's an unintended consequence of their design choice, it's a design flaw. If it were not a design flaw, there'd be no need to even offer \"a way around this\".",
                "fecha": { "$date" : "2017-10-03T07:35:53Z" },
                "usuario": "code_dredd",
                "usuario_id": 159
            },
            {
                "decripcion": "We could take it to chat and discuss how else it could be, but the semantics have been thoroughly debated and nobody could come up with a sensible mechanism for create-default-value-on-call. One serious issue is that the scope on call is often entirely different from that on definition, making name resolution uncertain if defaults were evaluated at call time. A \"way around\" means \"you can achieve your desired end in the following way,\" not \"this is a mistake in Python's design.\"",
                "fecha": { "$date" : "2017-10-03T16:03:13Z" },
                "usuario": "holdenweb",
                "usuario_id": 100
            }
        ],
        "usuario": "glglgl",
        "usuario_id": 160
    },
    {
        "_id": 103,
        "fecha": { "$date" : "2019-05-09T09:15:36Z" },
        "decripcion": "\nI know nothing about the Python interpreter inner workings (and I'm not an expert in compilers and interpreters either) so don't blame me if I propose anything unsensible or impossible.\n\nProvided that python objects are mutable I think that this should be taken into account when designing the default arguments stuff.\nWhen you instantiate a list:\n\na = []\n\n\nyou expect to get a new list referenced by a.\n\nWhy should the a=[] in\n\ndef x(a=[]):\n\n\ninstantiate a new list on function definition and not on invocation?\nIt's just like you're asking \"if the user doesn't provide the argument then instantiate a new list and use it as if it was produced by the caller\".\nI think this is ambiguous instead:\n\ndef x(a=datetime.datetime.now()):\n\n\nuser, do you want a to default to the datetime corresponding to when you're defining or executing x?\nIn this case, as in the previous one, I'll keep the same behaviour as if the default argument \"assignment\" was the first instruction of the function (datetime.now() called on function invocation).\nOn the other hand, if the user wanted the definition-time mapping he could write:\n\nb = datetime.datetime.now()\ndef x(a=b):\n\n\nI know, I know: that's a closure. Alternatively Python might provide a keyword to force definition-time binding:\n\ndef x(static a=b):\n\n    ",
        "votes": 125,
        "comentarios": [
            {
                "decripcion": "You could do: def x(a=None): And then, if a is None, set a=datetime.datetime.now()",
                "fecha": { "$date" : "2009-07-16T00:18:29Z" },
                "usuario": "Anon",
                "usuario_id": 161
            },
            {
                "decripcion": "Thank you for this. I couldn't really put my finger on why this  irks me to no end. You have done it beautifully with a minimum of fuzz and confusion. As someone comming from systems programming in C++ and sometimes naively \"translating\" language features, this false friend kicked me in the in the soft of the head big time, just like class attributes. I understand why things are this way, but I cannot help but dislike it, no matter what positive might come of it. At least it is so contrary to my experience, that I'll probably (hopefully) never forget it...",
                "fecha": { "$date" : "2011-04-22T09:33:25Z" },
                "usuario": "AndreasT",
                "usuario_id": 162
            },
            {
                "decripcion": "@Andreas once you use Python for long enough, you begin to see how logical it is for Python to interpret things as class attributes the way it does - it is only because of the particular quirks and limitations of languages like C++ (and Java, and C#...) that it makes any sense for contents of the class {} block to be interpreted as belonging to the instances :) But when classes are first-class objects, obviously the natural thing is for their contents (in memory) to reflect their contents (in code).",
                "fecha": { "$date" : "2011-07-22T19:55:07Z" },
                "usuario": "Karl Knechtel",
                "usuario_id": 163
            },
            {
                "decripcion": "Normative structure is no quirk or limitation in my book. I know it can be clumsy and ugly, but you can call it a \"definition\" of something. The dynamic languages seem a bit like anarchists to me: Sure everybody is free, but you need structure to get someone to empty the trash and pave the road. Guess I'm old... :)",
                "fecha": { "$date" : "2011-07-26T08:54:28Z" },
                "usuario": "AndreasT",
                "usuario_id": 162
            },
            {
                "decripcion": "The function definition is executed at module load time. The function body is executed at function call time. The default argument is part of the function definition, not of the function body. (It gets more complicated for nested functions.)",
                "fecha": { "$date" : "2015-03-30T11:28:13Z" },
                "usuario": "Lutz Prechelt",
                "usuario_id": 164
            }
        ],
        "usuario": "Utaal",
        "usuario_id": 165
    },
    {
        "_id": 104,
        "fecha": { "$date" : "2014-12-19T22:53:35Z" },
        "decripcion": "\nWell, the reason is quite simply that bindings are done when code is executed, and the function definition is executed, well... when the functions is defined.\n\nCompare this:\n\nclass BananaBunch:\n    bananas = []\n\n    def addBanana(self, banana):\n        self.bananas.append(banana)\n\n\nThis code suffers from the exact same unexpected happenstance. bananas is a class attribute, and hence, when you add things to it, it's added to all instances of that class. The reason is exactly the same.\n\nIt's just \"How It Works\", and making it work differently in the function case would probably be complicated, and in the class case likely impossible, or at least slow down object instantiation a lot, as you would have to keep the class code around and execute it when objects are created.\n\nYes, it is unexpected. But once the penny drops, it fits in perfectly with how Python works in general. In fact, it's a good teaching aid, and once you understand why this happens, you'll grok python much better.\n\nThat said it should feature prominently in any good Python tutorial. Because as you mention, everyone runs into this problem sooner or later.\n    ",
        "votes": 88,
        "comentarios": [
            {
                "decripcion": "How do you define a class attribute that is different for each instance of a class?",
                "fecha": { "$date" : "2009-07-15T19:04:39Z" },
                "usuario": "Kieveli",
                "usuario_id": 166
            },
            {
                "decripcion": "If it's different for each instance it's not a class attribute. Class attributes are attributes on the CLASS. Hence the name. Hence they are the same for all instances.",
                "fecha": { "$date" : "2009-07-15T19:17:21Z" },
                "usuario": "Lennart Regebro",
                "usuario_id": 154
            },
            {
                "decripcion": "How do you define an attribute in a class that is different for each instance of a class? (Re-defined for those who could not determine that a person not familiar with Python's naming convenctions might be asking about normal member variables of a class).",
                "fecha": { "$date" : "2009-07-16T14:03:46Z" },
                "usuario": "Kieveli",
                "usuario_id": 166
            },
            {
                "decripcion": "@Kievieli: You ARE talking about normal member variables of a class. :-)  You define instance attributes by saying self.attribute = value in any method. For example __init__().",
                "fecha": { "$date" : "2009-07-16T14:14:18Z" },
                "usuario": "Lennart Regebro",
                "usuario_id": 154
            },
            {
                "decripcion": "@Kieveli: Two answers:  you can't, because any thing you define at a class level will be a class attribute, and any instance that accesses that attribute will access the same class attribute; you can, /sort of/, by using propertys -- which are actually class level functions that act like normal attributes but save the attribute in the instance instead of the class (by using self.attribute = value as Lennart said).",
                "fecha": { "$date" : "2012-01-07T04:45:56Z" },
                "usuario": "Ethan Furman",
                "usuario_id": 167
            }
        ],
        "usuario": "Lennart Regebro",
        "usuario_id": 154
    },
    {
        "_id": 105,
        "fecha": { "$date" : "2018-10-11T16:33:49Z" },
        "decripcion": "\nWhy don't you introspect?\n\nI'm really surprised no one has performed the insightful introspection offered by Python (2 and 3 apply) on callables. \n\nGiven a simple little function func defined as:\n\n>>> def func(a = []):\n...    a.append(5)\n\n\nWhen Python encounters it, the first thing it will do is compile it in order to create a code object for this function. While this compilation step is done, Python evaluates* and then stores the default arguments (an empty list [] here) in the function object itself. As the top answer mentioned: the list a can now be considered a member of the function func.\n\nSo, let's do some introspection, a before and after to examine how the list gets expanded inside the function object. I'm using Python 3.x for this, for Python 2 the same applies (use __defaults__ or func_defaults in Python 2; yes, two names for the same thing).\n\nFunction Before Execution:\n\n>>> def func(a = []):\n...     a.append(5)\n...     \n\n\nAfter Python executes this definition it will take any default parameters specified (a = [] here) and cram them in the __defaults__ attribute for the function object (relevant section: Callables):     \n\n>>> func.__defaults__\n([],)\n\n\nO.k, so an empty list as the single entry in __defaults__, just as expected. \n\nFunction After Execution:\n\nLet's now execute this function:\n\n>>> func()\n\n\nNow, let's see those __defaults__ again: \n\n>>> func.__defaults__\n([5],)\n\n\nAstonished? The value inside the object changes! Consecutive calls to the function will now simply append to that embedded list object:\n\n>>> func(); func(); func()\n>>> func.__defaults__\n([5, 5, 5, 5],)\n\n\nSo, there you have it, the reason why this 'flaw' happens, is because default arguments are part of the function object. There's nothing weird going on here, it's all just a bit surprising.\n\nThe common solution to combat this is to use None as the default and then initialize in the function body:\n\ndef func(a = None):\n    # or: a = [] if a is None else a\n    if a is None:\n        a = []\n\n\nSince the function body is executed anew each time, you always get a fresh new empty list if no argument was passed for a.\n\n\n\nTo further verify that the list in __defaults__ is the same as that used in the function func you can just change your function to return the id of the list a used inside the function body. Then, compare it to the list in __defaults__ (position [0] in __defaults__) and you'll see how these are indeed refering to the same list instance:\n\n>>> def func(a = []): \n...     a.append(5)\n...     return id(a)\n>>>\n>>> id(func.__defaults__[0]) == func()\nTrue\n\n\nAll with the power of introspection! \n\n\n\n* To verify that Python evaluates the default arguments during compilation of the function, try executing the following:\n\ndef bar(a=input('Did you just see me without calling the function?')): \n    pass  # use raw_input in Py2\n\n\nas you'll notice, input() is called before the process of building the function and binding it to the name bar is made.\n    ",
        "votes": 77,
        "comentarios": [
            {
                "decripcion": "Is id(...) needed for that last verification, or would the is operator answer the same question?",
                "fecha": { "$date" : "2016-03-09T08:09:30Z" },
                "usuario": "das-g",
                "usuario_id": 168
            },
            {
                "decripcion": "@das-g is would do just fine, I just used id(val) because I think it might be more intuitive.",
                "fecha": { "$date" : "2016-03-09T08:20:27Z" },
                "usuario": "Dimitris Fasarakis Hilliard",
                "usuario_id": 169
            },
            {
                "decripcion": "Using None as the default severely limits the usefulness of the __defaults__ introspection, so I don't think that works well as a defense of having __defaults__ work the way it does.  Lazy-evaluation would do more to keep function defaults useful from both sides.",
                "fecha": { "$date" : "2019-10-18T05:32:26Z" },
                "usuario": "Brilliand",
                "usuario_id": 170
            }
        ],
        "usuario": "Dimitris Fasarakis Hilliard",
        "usuario_id": 169
    },
    {
        "_id": 106,
        "fecha": { "$date" : "2021-01-21T12:41:46Z" },
        "decripcion": "\n5 points in defense of Python\n\nSimplicity: The behavior is simple in the following sense:\nMost people fall into this trap only once, not several times.\n\nConsistency: Python always passes objects, not names.\nThe default parameter is, obviously, part of the function\nheading (not the function body). It therefore ought to be evaluated\nat module load time (and only at module load time, unless nested), not\nat function call time.\n\nUsefulness: As Frederik Lundh points out in his explanation\nof \"Default Parameter Values in Python\", the\ncurrent behavior can be quite useful for advanced programming.\n(Use sparingly.)\n\nSufficient documentation: In the most basic Python documentation,\nthe tutorial, the issue is loudly announced as\nan \"Important warning\" in the first subsection of Section\n\"More on Defining Functions\".\nThe warning even uses boldface,\nwhich is rarely applied outside of headings.\nRTFM: Read the fine manual.\n\nMeta-learning: Falling into the trap is actually a very\nhelpful moment (at least if you are a reflective learner),\nbecause you will subsequently better understand the point\n\"Consistency\" above and that will\nteach you a great deal about Python.\n\n\n    ",
        "votes": 65,
        "comentarios": [
            {
                "decripcion": "It took me a year to find this behavior is messing up my code on production, ended up removing a complete feature until I bumped into this design flaw by chance.  I'm using Django.  Since the staging environment did not have many requests, this bug never had any impact on QA.  When we went live and received many simultaneous requests - some utility functions started overwriting each other's parameters!  Making security holes, bugs and what not.",
                "fecha": { "$date" : "2015-09-05T13:09:46Z" },
                "usuario": "oriadam",
                "usuario_id": 171
            },
            {
                "decripcion": "@oriadam, no offense, but I wonder how you learned Python without running into this before.  I am just learning Python now and this possible pitfall is mentioned in the official Python tutorial right alongside the first mention of default arguments.  (As mentioned in point 4 of this answer.)  I suppose the moral is\u2014rather unsympathetically\u2014to read the official docs of the language you use to create production software.",
                "fecha": { "$date" : "2016-08-30T02:26:54Z" },
                "usuario": "Wildcard",
                "usuario_id": 172
            },
            {
                "decripcion": "Also, it would be surprising (to me) if a function of unknown complexity was called in addition to the function call I am making.",
                "fecha": { "$date" : "2016-09-02T13:26:15Z" },
                "usuario": "Vatine",
                "usuario_id": 173
            },
            {
                "decripcion": "@oriadam, your company needs code review and actual expert coders in the language they write in by the time they have development, staging and production environments. Newbie bugs and bad code habits should not make it to production code",
                "fecha": { "$date" : "2021-01-04T22:03:04Z" },
                "usuario": "Robin De Schepper",
                "usuario_id": 174
            }
        ],
        "usuario": "Lutz Prechelt",
        "usuario_id": 164
    },
    {
        "_id": 107,
        "fecha": { "$date" : "2009-07-16T19:13:35Z" },
        "decripcion": "\nI used to think that creating the objects at runtime would be the better approach.  I'm less certain now, since you do lose some useful features, though it may be worth it regardless simply to prevent newbie confusion.  The disadvantages of doing so are:\n\n1. Performance\n\ndef foo(arg=something_expensive_to_compute())):\n    ...\n\n\nIf call-time evaluation is used, then the expensive function is called every time your function is used without an argument.  You'd either pay an expensive price on each call, or need to manually cache the value externally, polluting your namespace and adding verbosity.\n\n2. Forcing bound parameters\n\nA useful trick is to bind parameters of a lambda to the current binding of a variable when the lambda is created.  For example:\n\nfuncs = [ lambda i=i: i for i in range(10)]\n\n\nThis returns a list of functions that return 0,1,2,3... respectively.  If the behaviour is changed, they will instead bind i to the call-time value of i, so you would get a list of functions that all returned 9.\n\nThe only way to implement this otherwise would be to create a further closure with the i bound, ie:\n\ndef make_func(i): return lambda: i\nfuncs = [make_func(i) for i in range(10)]\n\n\n3. Introspection\n\nConsider the code:\n\ndef foo(a='test', b=100, c=[]):\n   print a,b,c\n\n\nWe can get information about the arguments and defaults using the inspect module, which \n\n>>> inspect.getargspec(foo)\n(['a', 'b', 'c'], None, None, ('test', 100, []))\n\n\nThis information is very useful for things like document generation, metaprogramming, decorators etc.\n\nNow, suppose the behaviour of defaults could be changed so that this is the equivalent of:\n\n_undefined = object()  # sentinel value\n\ndef foo(a=_undefined, b=_undefined, c=_undefined)\n    if a is _undefined: a='test'\n    if b is _undefined: b=100\n    if c is _undefined: c=[]\n\n\nHowever, we've lost the ability to introspect, and see what the default arguments are.  Because the objects haven't been constructed, we can't ever get hold of them without actually calling the function.  The best we could do is to store off the source code and return that as a string.\n    ",
        "votes": 64,
        "comentarios": [
            {
                "decripcion": "you could achieve introspection also if for each there was a function to create the default argument instead of a value. the inspect module will just call that function.",
                "fecha": { "$date" : "2009-07-16T10:24:57Z" },
                "usuario": "yairchu",
                "usuario_id": 175
            },
            {
                "decripcion": "@SilentGhost:  I'm talking about if the behaviour was changed to recreate it - creating it once is the current behaviour, and why the mutable default problem exists.",
                "fecha": { "$date" : "2009-07-16T10:59:05Z" },
                "usuario": "Brian",
                "usuario_id": 176
            },
            {
                "decripcion": "@yairchu: That assumes the construction is safe to so (ie has no side effects).  Introspecting the args shouldn't do anything, but evaluating arbitrary code could well end up having an effect.",
                "fecha": { "$date" : "2009-07-16T11:02:31Z" },
                "usuario": "Brian",
                "usuario_id": 176
            },
            {
                "decripcion": "A different language design often just means writing things differently.  Your first example could easily be written as: _expensive = expensive(); def foo(arg=_expensive), if you specifically don't want it reevaluated.",
                "fecha": { "$date" : "2009-07-16T18:23:28Z" },
                "usuario": "Glenn Maynard",
                "usuario_id": 177
            },
            {
                "decripcion": "@Glenn - that's what I was referring to with \"cache the variable externally\" - it is a bit more verbose, and you end up with extra variables in your namespace though.",
                "fecha": { "$date" : "2009-07-16T19:04:51Z" },
                "usuario": "Brian",
                "usuario_id": 176
            }
        ],
        "usuario": "Brian",
        "usuario_id": 176
    },
    {
        "_id": 108,
        "fecha": { "$date" : "2017-10-24T06:34:34Z" },
        "decripcion": "\nThis behavior is easy explained by:\n\n\nfunction (class etc.) declaration is executed only once, creating all default value objects\neverything is passed by reference\n\n\nSo:\n\ndef x(a=0, b=[], c=[], d=0):\n    a = a + 1\n    b = b + [1]\n    c.append(1)\n    print a, b, c\n\n\n\na doesn't change - every assignment call creates new int object - new object is printed\nb doesn't change - new array is build from default value and printed\nc changes - operation is performed on same object - and it is printed\n\n    ",
        "votes": 55,
        "comentarios": [
            {
                "decripcion": "(Actually, add is a bad example, but integers being immutable still is my main point.)",
                "fecha": { "$date" : "2009-07-15T23:54:43Z" },
                "usuario": "Anon",
                "usuario_id": 161
            },
            {
                "decripcion": "Realized it to my chagrin after checking to see that, with b set to [], b.__add__([1]) returns [1] but also leaves b still [] even though lists are mutable.  My bad.",
                "fecha": { "$date" : "2009-07-16T00:03:30Z" },
                "usuario": "Anon",
                "usuario_id": 161
            },
            {
                "decripcion": "@ANon: there is __iadd__, but it doesn't work with int. Of course. :-)",
                "fecha": { "$date" : "2014-05-08T13:16:31Z" },
                "usuario": "Veky",
                "usuario_id": 178
            }
        ],
        "usuario": "ymv",
        "usuario_id": 179
    },
    {
        "_id": 109,
        "fecha": { "$date" : "2009-07-15T20:18:14Z" },
        "decripcion": "\nWhat you're asking is why this:\n\ndef func(a=[], b = 2):\n    pass\n\n\nisn't internally equivalent to this:\n\ndef func(a=None, b = None):\n    a_default = lambda: []\n    b_default = lambda: 2\n    def actual_func(a=None, b=None):\n        if a is None: a = a_default()\n        if b is None: b = b_default()\n    return actual_func\nfunc = func()\n\n\nexcept for the case of explicitly calling func(None, None), which we'll ignore.\n\nIn other words, instead of evaluating default parameters, why not store each of them, and evaluate them when the function is called?\n\nOne answer is probably right there--it would effectively turn every function with default parameters into a closure.  Even if it's all hidden away in the interpreter and not a full-blown closure, the data's got to be stored somewhere.  It'd be slower and use more memory.\n    ",
        "votes": 36,
        "comentarios": [
            {
                "decripcion": "It wouldn't need to be a closure - a better way to think of it would simply to make the bytecode creating defaults the first line of code - after all you're compiling the body at that point anyway - there's no real difference between code in the arguments and code in the body.",
                "fecha": { "$date" : "2009-07-16T09:39:20Z" },
                "usuario": "Brian",
                "usuario_id": 176
            },
            {
                "decripcion": "True, but it would still slow Python down, and it would actually be quite surprising, unless you do the same for class definitions, which would make it stupidly slow as you would have to re-run the whole class definition each time you instantiate a class.  As mentioned, the fix would be more surprising than the problem.",
                "fecha": { "$date" : "2009-07-16T11:49:40Z" },
                "usuario": "Lennart Regebro",
                "usuario_id": 154
            },
            {
                "decripcion": "Agreed with Lennart.  As Guido is fond of saying, for every language feature or standard library, there's someone out there using it.",
                "fecha": { "$date" : "2009-07-16T13:21:22Z" },
                "usuario": "Jason Baker",
                "usuario_id": 180
            },
            {
                "decripcion": "Changing it now would be insanity--we're just exploring why it is the way it is.  If it did late default evaluation to begin with, it wouldn't necessarily be surprising.  It's definitely true that such a core a difference of parsing would have sweeping, and probably many obscure, effects on the language as a whole.",
                "fecha": { "$date" : "2009-07-16T18:10:05Z" },
                "usuario": "Glenn Maynard",
                "usuario_id": 177
            }
        ],
        "usuario": "Glenn Maynard",
        "usuario_id": 177
    },
    {
        "_id": 110,
        "fecha": { "$date" : "2017-05-23T11:47:32Z" },
        "decripcion": "\n1)  The so-called problem of \"Mutable Default Argument\" is in general a special example demonstrating that:\n\"All functions with this problem suffer also from similar side effect problem on the actual parameter,\"\nThat is against the rules of functional programming, usually undesiderable and should be fixed both together.\n\nExample:\n\ndef foo(a=[]):                 # the same problematic function\n    a.append(5)\n    return a\n\n>>> somevar = [1, 2]           # an example without a default parameter\n>>> foo(somevar)\n[1, 2, 5]\n>>> somevar\n[1, 2, 5]                      # usually expected [1, 2]\n\n\nSolution:  a copy\nAn absolutely safe solution is to copy or deepcopy the input object first and then to do whatever with the copy.\n\ndef foo(a=[]):\n    a = a[:]     # a copy\n    a.append(5)\n    return a     # or everything safe by one line: \"return a + [5]\"\n\n\nMany builtin mutable types have a copy method like some_dict.copy() or some_set.copy() or can be copied easy like somelist[:] or list(some_list). Every object can be also copied by copy.copy(any_object) or more thorough by copy.deepcopy() (the latter useful if the mutable object is composed from mutable objects). Some objects are fundamentally based on side effects like \"file\" object and can not be meaningfully reproduced by copy. copying\n\nExample problem for a similar SO question\n\nclass Test(object):            # the original problematic class\n  def __init__(self, var1=[]):\n    self._var1 = var1\n\nsomevar = [1, 2]               # an example without a default parameter\nt1 = Test(somevar)\nt2 = Test(somevar)\nt1._var1.append([1])\nprint somevar                  # [1, 2, [1]] but usually expected [1, 2]\nprint t2._var1                 # [1, 2, [1]] but usually expected [1, 2]\n\n\nIt shouldn't be neither saved in any public attribute of an instance returned by this function. (Assuming that private attributes of instance should not be modified from outside of this class or subclasses by convention. i.e. _var1 is a private attribute )\n\nConclusion:\nInput parameters objects shouldn't be modified in place (mutated) nor they should not be binded into an object returned by the function. (If we prefere programming without side effects which is strongly recommended. see Wiki about \"side effect\" (The first two paragraphs are relevent in this context.)\n.)\n\n2)\nOnly if the side effect on the actual parameter is required but unwanted on the default parameter then the useful solution is def ...(var1=None): if var1 is None: var1 = [] More..\n\n3) In some cases is the mutable behavior of default parameters useful.\n    ",
        "votes": 36,
        "comentarios": [
            {
                "decripcion": "I hope you're aware that Python is not a functional programming language.",
                "fecha": { "$date" : "2014-05-08T13:18:07Z" },
                "usuario": "Veky",
                "usuario_id": 178
            },
            {
                "decripcion": "Yes, Python is a multi-paragigm language with some functional features. (\"Don't make every problem look like a nail just because you have a hammer.\") Many of them are in Python best practicies. Python has an interesting HOWTO Functional Programming Other features are closures and currying, not mentioned here.",
                "fecha": { "$date" : "2014-05-08T15:54:34Z" },
                "usuario": "hynekcer",
                "usuario_id": 181
            },
            {
                "decripcion": "I'd also add, at this late stage, that Python's assignment semantics have been designed explicitly to avoid data copying where necessary, so the creation of copies (and especially of deep copies) will affect both run-time and memory usage adversely. They should therefore be used only when necessary, but newcomers often have difficulty understanding when that is.",
                "fecha": { "$date" : "2018-01-16T14:27:07Z" },
                "usuario": "holdenweb",
                "usuario_id": 100
            },
            {
                "decripcion": "@holdenweb I agree. A temporary copy is the most usual way and sometimes the only possible way how to protect the original mutable data from an extraneous function that modifies them potentially. Fortunately a function that unreasonably modifies data is considered a bug and therefore uncommon.",
                "fecha": { "$date" : "2018-01-17T21:41:33Z" },
                "usuario": "hynekcer",
                "usuario_id": 181
            },
            {
                "decripcion": "I agree with this answer. And I don't understand why the def f( a = None ) construct is recommended when you really mean something else. Copying is ok, because you shouldn't mutate arguments. And when you do if a is None: a = [1, 2, 3], you do copy the list anyway.",
                "fecha": { "$date" : "2018-02-16T16:15:52Z" },
                "usuario": "koddo",
                "usuario_id": 182
            }
        ],
        "usuario": "hynekcer",
        "usuario_id": 181
    },
    {
        "_id": 111,
        "fecha": { "$date" : "2011-05-23T04:24:30Z" },
        "decripcion": "\nThis actually has nothing to do with default values, other than that it often comes up as an unexpected behaviour when you write functions with mutable default values.\n\n>>> def foo(a):\n    a.append(5)\n    print a\n\n>>> a  = [5]\n>>> foo(a)\n[5, 5]\n>>> foo(a)\n[5, 5, 5]\n>>> foo(a)\n[5, 5, 5, 5]\n>>> foo(a)\n[5, 5, 5, 5, 5]\n\n\nNo default values in sight in this code, but you get exactly the same problem.\n\nThe problem is that foo is modifying a mutable variable passed in from the caller, when the caller doesn't expect this. Code like this would be fine if the function was called something like append_5; then the caller would be calling the function in order to modify the value they pass in, and the behaviour would be expected. But such a function would be very unlikely to take a default argument, and probably wouldn't return the list (since the caller already has a reference to that list; the one it just passed in).\n\nYour original foo, with a default argument, shouldn't be modifying a whether it was explicitly passed in or got the default value. Your code should leave mutable arguments alone unless it is clear from the context/name/documentation that the arguments are supposed to be modified. Using mutable values passed in as arguments as local temporaries is an extremely bad idea, whether we're in Python or not and whether there are default arguments involved or not.\n\nIf you need to destructively manipulate a local temporary in the course of computing something, and you need to start your manipulation from an argument value, you need to make a copy.\n    ",
        "votes": 30,
        "comentarios": [
            {
                "decripcion": "Although related, I think this is distinct behaviour (as we expect append to change a \"in-place\"). That a default mutable is not re-instantiated on each call is the \"unexpected\" bit... at least for me. :)",
                "fecha": { "$date" : "2012-08-24T12:27:38Z" },
                "usuario": "Andy Hayden",
                "usuario_id": 3
            },
            {
                "decripcion": "@AndyHayden if the function is expected to modify the argument, why would it make sense to have a default?",
                "fecha": { "$date" : "2017-10-17T13:31:05Z" },
                "usuario": "Mark Ransom",
                "usuario_id": 104
            },
            {
                "decripcion": "@AndyHayden I left my own answer here with an expansion of that sentiment. Let me know what you think. I might add your example of cache={} into it for completeness.",
                "fecha": { "$date" : "2017-10-17T18:02:52Z" },
                "usuario": "Mark Ransom",
                "usuario_id": 104
            },
            {
                "decripcion": "@AndyHayden The point of my answer is that if you are ever astonished by accidentally mutating the default value of an argument, then you have another bug, which is that your code can accidentally mutate a caller's value when the default wasn't used. And note that using None and assigning the real default if the arg is None does not resolve that problem (I consider it an anti pattern for that reason). If you fix the other bug by avoiding mutating argument values whether or not they have defaults then you'll never notice or care about this \"astonishing\" behavior.",
                "fecha": { "$date" : "2017-10-17T21:44:29Z" },
                "usuario": "Ben",
                "usuario_id": 183
            },
            {
                "decripcion": "@AndyHayden And if you're putting self.foo = foo.copy() in there anyway, what harm is it if the default value for foo is []? It's the copy that protects you from mutable argument woes, not setting the default to None when you really want a default of []. Sure you could write if foo is None: self.foo = []; else: self.foo = foo.copy(), but why when you could replace 4 lines with a single line (which is one of the 4 you need anyway), and have the real value of the default argument be clearer in the function definition?",
                "fecha": { "$date" : "2017-10-18T00:51:58Z" },
                "usuario": "Ben",
                "usuario_id": 183
            }
        ],
        "usuario": "Ben",
        "usuario_id": 183
    },
    {
        "_id": 112,
        "fecha": { "$date" : "2015-03-26T23:14:01Z" },
        "decripcion": "\nAlready busy topic, but from what I read here, the following helped me realizing how it's working internally:\n\ndef bar(a=[]):\n     print id(a)\n     a = a + [1]\n     print id(a)\n     return a\n\n>>> bar()\n4484370232\n4484524224\n[1]\n>>> bar()\n4484370232\n4484524152\n[1]\n>>> bar()\n4484370232 # Never change, this is 'class property' of the function\n4484523720 # Always a new object \n[1]\n>>> id(bar.func_defaults[0])\n4484370232\n\n    ",
        "votes": 27,
        "comentarios": [
            {
                "decripcion": "actually this might be a bit confusing for newcomers as a = a + [1] overloads a... consider changing it to b = a + [1] ; print id(b) and add a line a.append(2). That will make it more obvious that + on two lists always creates a new list (assigned to b), while a modified a can still have the same id(a).",
                "fecha": { "$date" : "2017-04-08T13:47:17Z" },
                "usuario": "J\u00f6rn Hees",
                "usuario_id": 184
            }
        ],
        "usuario": "St\u00e9phane",
        "usuario_id": 185
    },
    {
        "_id": 113,
        "fecha": { "$date" : "2013-04-02T21:52:30Z" },
        "decripcion": "\nIt's a performance optimization.  As a result of this functionality, which of these two function calls do you think is faster?\n\ndef print_tuple(some_tuple=(1,2,3)):\n    print some_tuple\n\nprint_tuple()        #1\nprint_tuple((1,2,3)) #2\n\n\nI'll give you a hint.  Here's the disassembly (see http://docs.python.org/library/dis.html):\n\n#1\n\n0 LOAD_GLOBAL              0 (print_tuple)\n3 CALL_FUNCTION            0\n6 POP_TOP\n7 LOAD_CONST               0 (None)\n10 RETURN_VALUE\n\n\n#2\n\n 0 LOAD_GLOBAL              0 (print_tuple)\n 3 LOAD_CONST               4 ((1, 2, 3))\n 6 CALL_FUNCTION            1\n 9 POP_TOP\n10 LOAD_CONST               0 (None)\n13 RETURN_VALUE\n\n\n\n  I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs ?)\n\n\nAs you can see, there is a performance benefit when using immutable default arguments.  This can make a difference if it's a frequently called function or the default argument takes a long time to construct.  Also, bear in mind that Python isn't C.  In C you have constants that are pretty much free.  In Python you don't have this benefit.\n    ",
        "votes": 26,
        "comentarios": [],
        "usuario": "Jason Baker",
        "usuario_id": 180
    },
    {
        "_id": 114,
        "fecha": { "$date" : "2017-12-23T21:18:35Z" },
        "decripcion": "\nPython: The Mutable Default Argument\n\nDefault arguments get evaluated at the time the function is compiled into a function object. When used by the function, multiple times by that function, they are and remain the same object. \n\nWhen they are mutable, when mutated (for example, by adding an element to it) they remain mutated on consecutive calls.\n\nThey stay mutated because they are the same object each time.\n\nEquivalent code:\n\nSince the list is bound to the function when the function object is compiled and instantiated, this:\n\ndef foo(mutable_default_argument=[]): # make a list the default argument\n    \"\"\"function that uses a list\"\"\"\n\n\nis almost exactly equivalent to this:\n\n_a_list = [] # create a list in the globals\n\ndef foo(mutable_default_argument=_a_list): # make it the default argument\n    \"\"\"function that uses a list\"\"\"\n\ndel _a_list # remove globals name binding\n\n\nDemonstration\n\nHere's a demonstration - you can verify that they are the same object each time they are referenced by \n\n\nseeing that the list is created before the function has finished compiling to a function object,\nobserving that the id is the same each time the list is referenced,\nobserving that the list stays changed when the function that uses it is called a second time,\nobserving the order in which the output is printed from the source (which I conveniently numbered for you):\n\n\nexample.py\n\nprint('1. Global scope being evaluated')\n\ndef create_list():\n    '''noisily create a list for usage as a kwarg'''\n    l = []\n    print('3. list being created and returned, id: ' + str(id(l)))\n    return l\n\nprint('2. example_function about to be compiled to an object')\n\ndef example_function(default_kwarg1=create_list()):\n    print('appending \"a\" in default default_kwarg1')\n    default_kwarg1.append(\"a\")\n    print('list with id: ' + str(id(default_kwarg1)) + \n          ' - is now: ' + repr(default_kwarg1))\n\nprint('4. example_function compiled: ' + repr(example_function))\n\n\nif __name__ == '__main__':\n    print('5. calling example_function twice!:')\n    example_function()\n    example_function()\n\n\nand running it with python example.py:\n\n1. Global scope being evaluated\n2. example_function about to be compiled to an object\n3. list being created and returned, id: 140502758808032\n4. example_function compiled: <function example_function at 0x7fc9590905f0>\n5. calling example_function twice!:\nappending \"a\" in default default_kwarg1\nlist with id: 140502758808032 - is now: ['a']\nappending \"a\" in default default_kwarg1\nlist with id: 140502758808032 - is now: ['a', 'a']\n\n\nDoes this violate the principle of \"Least Astonishment\"?\n\nThis order of execution is frequently confusing to new users of Python. If you understand the Python execution model, then it becomes quite expected. \n\nThe usual instruction to new Python users:\n\nBut this is why the usual instruction to new users is to create their default arguments like this instead:\n\ndef example_function_2(default_kwarg=None):\n    if default_kwarg is None:\n        default_kwarg = []\n\n\nThis uses the None singleton as a sentinel object to tell the function whether or not we've gotten an argument other than the default. If we get no argument, then we actually want to use a new empty list, [], as the default.\n\nAs the tutorial section on control flow says:\n\n\n  If you don\u2019t want the default to be shared between subsequent calls,\n  you can write the function like this instead:\n\ndef f(a, L=None):\n    if L is None:\n        L = []\n    L.append(a)\n    return L\n\n\n    ",
        "votes": 25,
        "comentarios": [],
        "usuario": "Aaron Hall",
        "usuario_id": 119
    },
    {
        "_id": 115,
        "fecha": { "$date" : "2018-05-20T23:22:19Z" },
        "decripcion": "\nThe shortest answer would probably be \"definition is execution\", therefore the whole argument makes no strict sense. As a more contrived example, you may cite this:\n\ndef a(): return []\n\ndef b(x=a()):\n    print x\n\n\nHopefully it's enough to show that not executing the default argument expressions at the execution time of the def statement isn't easy or doesn't make sense, or both.\n\nI agree it's a gotcha when you try to use default constructors, though.\n    ",
        "votes": 25,
        "comentarios": [],
        "usuario": "Baczek",
        "usuario_id": 186
    },
    {
        "_id": 116,
        "fecha": { "$date" : "2020-08-27T20:44:25Z" },
        "decripcion": "\nThis behavior is not surprising if you take the following into consideration:\n\nThe behavior of read-only class attributes upon assignment attempts, and that\nFunctions are objects (explained well in the accepted answer).\n\nThe role of (2) has been covered extensively in this thread. (1) is likely the astonishment causing factor, as this behavior is not \"intuitive\" when coming from other languages.\n(1) is described in the Python tutorial on classes. In an attempt to assign a value to a read-only class attribute:\n\n...all variables found outside of the innermost scope are\nread-only (an attempt to write to such a variable will simply create a\nnew local variable in the innermost scope, leaving the identically\nnamed outer variable unchanged).\n\nLook back to the original example and consider the above points:\ndef foo(a=[]):\n    a.append(5)\n    return a\n\nHere foo is an object and a is an attribute of foo (available at foo.func_defs[0]). Since a is a list, a is mutable and is thus a read-write attribute of foo. It is initialized to the empty list as specified by the signature when the function is instantiated, and is available for reading and writing as long as the function object exists.\nCalling foo without overriding a default uses that default's value from foo.func_defs. In this case, foo.func_defs[0] is used for a within function object's code scope. Changes to a change foo.func_defs[0], which is part of the foo object and persists between execution of the code in foo.\nNow, compare this to the example from the documentation on emulating the default argument behavior of other languages, such that the function signature defaults are used every time the function is executed:\ndef foo(a, L=None):\n    if L is None:\n        L = []\n    L.append(a)\n    return L\n\nTaking (1) and (2) into account, one can see why this accomplishes the desired behavior:\n\nWhen the foo function object is instantiated, foo.func_defs[0] is set to None, an immutable object.\nWhen the function is executed with defaults (with no parameter specified for L in the function call), foo.func_defs[0] (None) is available in the local scope as L.\nUpon L = [], the assignment cannot succeed at foo.func_defs[0], because that attribute is read-only.\nPer (1), a new local variable also named L is created in the local scope and used for the remainder of the function call. foo.func_defs[0] thus remains unchanged for future invocations of foo.\n\n    ",
        "votes": 22,
        "comentarios": [],
        "usuario": "Dmitry Minkovsky",
        "usuario_id": 187
    },
    {
        "_id": 117,
        "fecha": { "$date" : "2013-02-28T11:10:16Z" },
        "decripcion": "\nA simple workaround using None\n\n>>> def bar(b, data=None):\n...     data = data or []\n...     data.append(b)\n...     return data\n... \n>>> bar(3)\n[3]\n>>> bar(3)\n[3]\n>>> bar(3)\n[3]\n>>> bar(3, [34])\n[34, 3]\n>>> bar(3, [34])\n[34, 3]\n\n    ",
        "votes": 21,
        "comentarios": [],
        "usuario": "hugo24",
        "usuario_id": 188
    },
    {
        "_id": 118,
        "fecha": { "$date" : "2015-09-12T20:41:53Z" },
        "decripcion": "\nI am going to demonstrate an alternative structure to pass a default list value to a function (it works equally well with dictionaries).  \n\nAs others have extensively commented, the list parameter is bound to the function when it is defined as opposed to when it is executed.  Because lists and dictionaries are mutable, any alteration to this parameter will affect other calls to this function.  As a result, subsequent calls to the function will receive this shared list which may have been altered by any other calls to the function.  Worse yet, two parameters are using this function's shared parameter at the same time oblivious to the changes made by the other.\n\nWrong Method (probably...):\n\ndef foo(list_arg=[5]):\n    return list_arg\n\na = foo()\na.append(6)\n>>> a\n[5, 6]\n\nb = foo()\nb.append(7)\n# The value of 6 appended to variable 'a' is now part of the list held by 'b'.\n>>> b\n[5, 6, 7]  \n\n# Although 'a' is expecting to receive 6 (the last element it appended to the list),\n# it actually receives the last element appended to the shared list.\n# It thus receives the value 7 previously appended by 'b'.\n>>> a.pop()             \n7\n\n\nYou can verify that they are one and the same object by using id:\n\n>>> id(a)\n5347866528\n\n>>> id(b)\n5347866528\n\n\nPer Brett Slatkin's \"Effective Python: 59 Specific Ways to Write Better Python\", Item 20: Use None and Docstrings to specify dynamic default arguments (p. 48)\n\n\n  The convention for achieving the desired result in Python is to\n  provide a default value of None and to document the actual behaviour\n  in the docstring.\n\n\nThis implementation ensures that each call to the function either receives the default list or else the list passed to the function.\n\nPreferred Method:\n\ndef foo(list_arg=None):\n   \"\"\"\n   :param list_arg:  A list of input values. \n                     If none provided, used a list with a default value of 5.\n   \"\"\"\n   if not list_arg:\n       list_arg = [5]\n   return list_arg\n\na = foo()\na.append(6)\n>>> a\n[5, 6]\n\nb = foo()\nb.append(7)\n>>> b\n[5, 7]\n\nc = foo([10])\nc.append(11)\n>>> c\n[10, 11]\n\n\nThere may be legitimate use cases for the 'Wrong Method' whereby the programmer intended the default list parameter to be shared, but this is more likely the exception than the rule.\n    ",
        "votes": 19,
        "comentarios": [],
        "usuario": "Alexander",
        "usuario_id": 9
    },
    {
        "_id": 119,
        "fecha": { "$date" : "2013-06-30T16:20:35Z" },
        "decripcion": "\nThe solutions here are:\n\n\nUse None as your default value (or a nonce object), and switch on that to create your values at runtime; or\nUse a lambda as your default parameter, and call it within a try block to get the default value (this is the sort of thing that lambda abstraction is for).\n\n\nThe second option is nice because users of the function can pass in a callable, which may be already existing (such as a type)\n    ",
        "votes": 17,
        "comentarios": [],
        "usuario": "Marcin",
        "usuario_id": 189
    },
    {
        "_id": 120,
        "fecha": { "$date" : "2013-01-15T11:02:03Z" },
        "decripcion": "\nYou can get round this by replacing the object (and therefore the tie with the scope):\n\ndef foo(a=[]):\n    a = list(a)\n    a.append(5)\n    return a\n\n\nUgly, but it works.\n    ",
        "votes": 16,
        "comentarios": [
            {
                "decripcion": "This is a nice solution in cases where you're using automatic documentation generation software to document the types of arguments expected by the function.  Putting a=None and then setting a to [] if a is None doesn't help a reader understand at a glance what is expected.",
                "fecha": { "$date" : "2013-01-20T06:55:05Z" },
                "usuario": "Michael Scott Cuthbert",
                "usuario_id": 190
            },
            {
                "decripcion": "Cool idea: rebinding that name guarantees it can never be modified. I really like that.",
                "fecha": { "$date" : "2018-01-16T14:29:04Z" },
                "usuario": "holdenweb",
                "usuario_id": 100
            },
            {
                "decripcion": "This is exactly the way to do it. Python doesn't make a copy of the parameter, so it's up to you to make the copy explicitly. Once you have a copy, it's yours to modify as you please without any unexpected side effects.",
                "fecha": { "$date" : "2018-05-25T16:56:48Z" },
                "usuario": "Mark Ransom",
                "usuario_id": 104
            }
        ],
        "usuario": "joedborg",
        "usuario_id": 191
    },
    {
        "_id": 121,
        "fecha": { "$date" : "2014-09-11T22:05:43Z" },
        "decripcion": "\nWhen we do this:\n\ndef foo(a=[]):\n    ...\n\n\n... we assign the argument a to an unnamed list, if the caller does not pass the value of a.\n\nTo make things simpler for this discussion, let's temporarily give the unnamed list a name. How about pavlo ?\n\ndef foo(a=pavlo):\n   ...\n\n\nAt any time, if the caller doesn't tell us what a is, we reuse pavlo.\n\nIf pavlo is mutable (modifiable), and foo ends up modifying it, an effect we notice the next time foo is called without specifying a.\n\nSo this is what you see (Remember, pavlo is initialized to []):\n\n >>> foo()\n [5]\n\n\nNow, pavlo is [5].\n\nCalling foo() again modifies pavlo again:\n\n>>> foo()\n[5, 5]\n\n\nSpecifying a when calling foo() ensures pavlo is not touched.\n\n>>> ivan = [1, 2, 3, 4]\n>>> foo(a=ivan)\n[1, 2, 3, 4, 5]\n>>> ivan\n[1, 2, 3, 4, 5]\n\n\nSo, pavlo is still [5, 5].\n\n>>> foo()\n[5, 5, 5]\n\n    ",
        "votes": 16,
        "comentarios": [],
        "usuario": "Saish",
        "usuario_id": 192
    },
    {
        "_id": 122,
        "fecha": { "$date" : "2015-02-06T12:56:53Z" },
        "decripcion": "\nI sometimes exploit this behavior as an alternative to the following pattern:\n\nsingleton = None\n\ndef use_singleton():\n    global singleton\n\n    if singleton is None:\n        singleton = _make_singleton()\n\n    return singleton.use_me()\n\n\nIf singleton is only used by use_singleton, I like the following pattern as a replacement:\n\n# _make_singleton() is called only once when the def is executed\ndef use_singleton(singleton=_make_singleton()):\n    return singleton.use_me()\n\n\nI've used this for instantiating client classes that access external resources, and also for creating dicts or lists for memoization.\n\nSince I don't think this pattern is well known, I do put a short comment in to guard against future misunderstandings.\n    ",
        "votes": 16,
        "comentarios": [
            {
                "decripcion": "I prefer to add a decorator for memoization, and put the memoization cache onto the function object itself.",
                "fecha": { "$date" : "2015-02-06T07:34:32Z" },
                "usuario": "Stefano Borini",
                "usuario_id": 152
            },
            {
                "decripcion": "This example doesn't replace the more complex pattern you show, because you call _make_singleton at def time in the default argument example, but at call time in the global example. A true substitution would use some sort of mutable box for the default argument value, but the addition of the argument makes an opportunity to pass alternate values.",
                "fecha": { "$date" : "2017-11-19T08:29:15Z" },
                "usuario": "Yann Vernier",
                "usuario_id": 193
            }
        ],
        "usuario": "bgreen-litl",
        "usuario_id": 194
    },
    {
        "_id": 123,
        "fecha": { "$date" : "2009-07-16T19:17:59Z" },
        "decripcion": "\nIt may be true that:\n\n\nSomeone is using every language/library feature, and\nSwitching the behavior here would be ill-advised, but\n\n\nit is entirely consistent to hold to both of the features above and still make another point:\n\n\nIt is a confusing feature and it is unfortunate in Python.\n\n\nThe other answers, or at least some of them either make points 1 and 2 but not 3, or make point 3 and downplay points 1 and 2. But all three are true.\n\nIt may be true that switching horses in midstream here would be asking for significant breakage, and that there could be more problems created by changing Python to intuitively handle Stefano's opening snippet. And it may be true that someone who knew Python internals well could explain a minefield of consequences. However,\n\nThe existing behavior is not Pythonic, and Python is successful because very little about the language violates the principle of least astonishment anywhere near this badly. It is a real problem, whether or not it would be wise to uproot it. It is a design flaw. If you understand the language much better by trying to trace out the behavior, I can say that C++ does all of this and more; you learn a lot by navigating, for instance, subtle pointer errors. But this is not Pythonic: people who care about Python enough to persevere in the face of this behavior are people who are drawn to the language because Python has far fewer surprises than other language. Dabblers and the curious become Pythonistas when they are astonished at how little time it takes to get something working--not because of a design fl--I mean, hidden logic puzzle--that cuts against the intuitions of programmers who are drawn to Python because it Just Works.\n    ",
        "votes": 15,
        "comentarios": [
            {
                "decripcion": "-1 Although a defensible perspective, this not an answer, and I disagree with it. Too many special exceptions beget their own corner cases.",
                "fecha": { "$date" : "2012-07-07T19:24:33Z" },
                "usuario": "Marcin",
                "usuario_id": 189
            },
            {
                "decripcion": "So then, it is \"amazingly ignorant\" to say that in Python it would make more sense for a default argument of [] to remain [] every time the function is called?",
                "fecha": { "$date" : "2012-12-27T22:09:35Z" },
                "usuario": "Christos Hayward",
                "usuario_id": 195
            },
            {
                "decripcion": "And it is ignorant to consider as an unfortunate idiom setting a default argument to None, and then in the body of the body of the function setting if argument == None: argument = []? Is it ignorant to consider this idiom unfortunate as often people want what a naive newcomer would expect, that if you assign f(argument = []), argument will automatically default to a value of []?",
                "fecha": { "$date" : "2012-12-27T22:11:58Z" },
                "usuario": "Christos Hayward",
                "usuario_id": 195
            },
            {
                "decripcion": "But in Python, part of the spirit of the language is that you don't have to take too many deep dives; array.sort() works, and works  regardless of how little you understand about sorting, big-O, and constants. The beauty of Python in the array sorting mechanism, to give one of innumerable examples, is that you are not required to take a deep dive into internals. And to say it differently, the beauty of Python is that one is not ordinarily required to take a deep dive into implementation to get something that Just Works. And there is a workaround (...if argument == None: argument = []), FAIL.",
                "fecha": { "$date" : "2012-12-27T22:41:56Z" },
                "usuario": "Christos Hayward",
                "usuario_id": 195
            },
            {
                "decripcion": "As a standalone, the statement x=[] means \"create an empty list object, and bind the name 'x' to it.\"  So, in def f(x=[]), an empty list is also created.  It doesn't always get bound to x, so instead it gets bound to the default surrogate.  Later when f() is called, the default is hauled out and bound to x.  Since it was the empty list itself that was squirreled away, that same list is the only thing available to bind to x, whether anything has been stuck inside it or not.  How could it be otherwise?",
                "fecha": { "$date" : "2013-10-05T06:18:32Z" },
                "usuario": "Jerry B",
                "usuario_id": 196
            }
        ],
        "usuario": "Christos Hayward",
        "usuario_id": 195
    },
    {
        "_id": 124,
        "fecha": { "$date" : "2013-07-23T10:07:58Z" },
        "decripcion": "\nThis \"bug\" gave me a lot of overtime work hours! But I'm beginning to see a potential use of it (but I would have liked it to be at the execution time, still)\n\nI'm gonna give you what I see as a useful example.\n\ndef example(errors=[]):\n    # statements\n    # Something went wrong\n    mistake = True\n    if mistake:\n        tryToFixIt(errors)\n        # Didn't work.. let's try again\n        tryToFixItAnotherway(errors)\n        # This time it worked\n    return errors\n\ndef tryToFixIt(err):\n    err.append('Attempt to fix it')\n\ndef tryToFixItAnotherway(err):\n    err.append('Attempt to fix it by another way')\n\ndef main():\n    for item in range(2):\n        errors = example()\n    print '\\n'.join(errors)\n\nmain()\n\n\nprints the following\n\nAttempt to fix it\nAttempt to fix it by another way\nAttempt to fix it\nAttempt to fix it by another way\n\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "Your example doesn't seem very realistic.  Why would you pass errors as a parameter rather than starting from scratch every time?",
                "fecha": { "$date" : "2021-05-25T23:39:48Z" },
                "usuario": "Mark Ransom",
                "usuario_id": 104
            }
        ],
        "usuario": "Norfeldt",
        "usuario_id": 197
    },
    {
        "_id": 125,
        "fecha": { "$date" : "2017-10-17T18:04:59Z" },
        "decripcion": "\nThis is not a design flaw. Anyone who trips over this is doing something wrong.\n\nThere are 3 cases I see where you might run into this problem:\n\n\nYou intend to modify the argument as a side effect of the function. In this case it never makes sense to have a default argument. The only exception is when you're abusing the argument list to have function attributes, e.g. cache={}, and you wouldn't be expected to call the function with an actual argument at all.\nYou intend to leave the argument unmodified, but you accidentally did modify it. That's a bug, fix it.\nYou intend to modify the argument for use inside the function, but didn't expect the modification to be viewable outside of the function. In that case you need to make a copy of the argument, whether it was the default or not! Python is not a call-by-value language so it doesn't make the copy for you, you need to be explicit about it.\n\n\nThe example in the question could fall into category 1 or 3. It's odd that it both modifies the passed list and returns it; you should pick one or the other.\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "\"Doing something wrong\" is the diagnosis. That said, I think there are times were =None pattern is useful, but generally you don't want to modify if passed a mutable in that case (2). The cache={} pattern is really an interview-only solution, in real code you probably want @lru_cache!",
                "fecha": { "$date" : "2017-10-17T18:19:46Z" },
                "usuario": "Andy Hayden",
                "usuario_id": 3
            },
            {
                "decripcion": "Totally disagree, its absolutely a design flaw in many cases and not the programmer doing something wong",
                "fecha": { "$date" : "2021-05-25T10:44:49Z" },
                "usuario": "aCuria",
                "usuario_id": 198
            },
            {
                "decripcion": "@aCuria so you have a case 4 that's different from the 3 I presented?  I'd love to hear about it, please tell me more.  Python's behavior may not make sense in this circumstance, but it's very useful in other places and to change it would be a disaster.",
                "fecha": { "$date" : "2021-05-25T13:04:18Z" },
                "usuario": "Mark Ransom",
                "usuario_id": 104
            },
            {
                "decripcion": "I have never run into the problem of the OP even though it is so highly upvoted, because having a default argument be mutable is weird design to me.",
                "fecha": { "$date" : "2021-05-25T19:56:36Z" },
                "usuario": "qwr",
                "usuario_id": 199
            },
            {
                "decripcion": "@MarkRansom If we take it as given that side effects are OK, there's nothing wrong with modifying a default argument as part of a side-effect-ful function. Let's say you have a function that does something to a list and returns the list. We want to ensure that the function always returns a list. Then having an empty (or non-empty) list as a default makes perfect sense. The language is violating a large proportion of new Python programmers' expectations. Why are they wrong and the language right? Would you be making the opposite argument if the language had the opposite behavior?",
                "fecha": { "$date" : "2021-06-03T14:05:01Z" },
                "usuario": "Clement Cherlin",
                "usuario_id": 200
            }
        ],
        "usuario": "Mark Ransom",
        "usuario_id": 104
    },
    {
        "_id": 126,
        "fecha": { "$date" : "2018-09-06T21:29:08Z" },
        "decripcion": "\nJust change the function to be:\n\ndef notastonishinganymore(a = []): \n    '''The name is just a joke :)'''\n    a = a[:]\n    a.append(5)\n    return a\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "ytpillai",
        "usuario_id": 26
    },
    {
        "_id": 127,
        "fecha": { "$date" : "2019-01-03T07:38:50Z" },
        "decripcion": "\nEvery other answer explains why this is actually a nice and desired behavior, or why you shouldn't be needing this anyway. Mine is for those stubborn ones who want to exercise their right to bend the language to their will, not the other way around.\n\nWe will \"fix\" this behavior with a decorator that will copy the default value instead of reusing the same instance for each positional argument left at its default value.\n\n\n\nimport inspect\nfrom copy import copy\n\ndef sanify(function):\n    def wrapper(*a, **kw):\n        # store the default values\n        defaults = inspect.getargspec(function).defaults # for python2\n        # construct a new argument list\n        new_args = []\n        for i, arg in enumerate(defaults):\n            # allow passing positional arguments\n            if i in range(len(a)):\n                new_args.append(a[i])\n            else:\n                # copy the value\n                new_args.append(copy(arg))\n        return function(*new_args, **kw)\n    return wrapper\n\n\nNow let's redefine our function using this decorator:\n\n@sanify\ndef foo(a=[]):\n    a.append(5)\n    return a\n\nfoo() # '[5]'\nfoo() # '[5]' -- as desired\n\n\nThis is particularly neat for functions that take multiple arguments. Compare:\n\n# the 'correct' approach\ndef bar(a=None, b=None, c=None):\n    if a is None:\n        a = []\n    if b is None:\n        b = []\n    if c is None:\n        c = []\n    # finally do the actual work\n\n\nwith\n\n# the nasty decorator hack\n@sanify\ndef bar(a=[], b=[], c=[]):\n    # wow, works right out of the box!\n\n\nIt's important to note that the above solution breaks if you try to use keyword args, like so:\n\nfoo(a=[4])\n\n\nThe decorator could be adjusted to allow for that, but we leave this as an exercise for the reader ;)\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Przemek D",
        "usuario_id": 201
    },
    {
        "_id": 128,
        "fecha": { "$date" : "2019-08-08T07:39:43Z" },
        "decripcion": "\nTLDR: Define-time defaults are consistent and strictly more expressive.\n\n\n\nDefining a function affects two scopes: the defining scope containing the function, and the execution  scope contained by the function. While it is pretty clear how blocks map to scopes, the question is where def <name>(<args=defaults>): belongs to:\n\n...                           # defining scope\ndef name(parameter=default):  # ???\n    ...                       # execution scope\n\n\nThe def name part must evaluate in the defining scope - we want name to be available there, after all. Evaluating the function only inside itself would make it inaccessible.\n\nSince parameter is a constant name, we can \"evaluate\" it at the same time as def name. This also has the advantage it produces the function with a known signature as name(parameter=...):, instead of a bare name(...):.\n\nNow, when to evaluate default?\n\nConsistency already says \"at definition\": everything else of def <name>(<args=defaults>): is best evaluated at definition as well. Delaying parts of it would be the astonishing choice.\n\nThe two choices are not equivalent, either: If default is evaluated at definition time, it can still affect execution time. If default is evaluated at execution time, it cannot affect definition time. Choosing \"at definition\" allows expressing both cases, while choosing \"at execution\" can express only one:\n\ndef name(parameter=defined):  # set default at definition time\n    ...\n\ndef name(parameter=default):     # delay default until execution time\n    parameter = default if parameter is None else parameter\n    ...\n\n    ",
        "votes": 7,
        "comentarios": [
            {
                "decripcion": "\"Consistency already says \"at definition\": everything else of def <name>(<args=defaults>): is best evaluated at definition as well.\" I don't think the conclusion follows from the premise. Just because two things are on the same line doesn't mean they should be evaluated in the same scope. default is a different thing than the rest of the line: it's an expression. Evaluating an expression is a very different process from defining a function.",
                "fecha": { "$date" : "2019-09-23T14:38:21Z" },
                "usuario": "LarsH",
                "usuario_id": 202
            },
            {
                "decripcion": "@LarsH Function definitions are are evaluated in Python. Whether that is from a statement (def) or expression (lambda) does not change that creating a function means evaluation -- especially of its signature. And defaults are part of a function's signature. That does not mean defaults have to be evaluated immediately -- type hints may not, for example. But it certainly suggests they should unless there is a good reason not to.",
                "fecha": { "$date" : "2019-09-23T15:22:41Z" },
                "usuario": "MisterMiyagi",
                "usuario_id": 203
            },
            {
                "decripcion": "OK, creating a function means evaluation in some sense, but obviously not in the sense that every expression within it is evaluated at the time of definition. Most aren't. It's not clear to me in what sense the signature is especially \"evaluated\" at definition time any more than the function body is \"evaluated\" (parsed into a suitable representation); whereas expressions in the function body are clearly not evaluated in the full sense. From this point of view, consistency would say that expressions in the signature shouldn't be \"fully\" evaluated either.",
                "fecha": { "$date" : "2019-09-24T15:09:18Z" },
                "usuario": "LarsH",
                "usuario_id": 202
            },
            {
                "decripcion": "I don't mean that you're wrong, only that your conclusion doesn't follow from consistency alone.",
                "fecha": { "$date" : "2019-09-24T15:09:22Z" },
                "usuario": "LarsH",
                "usuario_id": 202
            },
            {
                "decripcion": "@LarsH Defaults are neither part of the body, nor am I claiming that consistency is the only criteria. Can you make a suggestion how to clarify the answer?",
                "fecha": { "$date" : "2019-09-24T15:15:33Z" },
                "usuario": "MisterMiyagi",
                "usuario_id": 203
            }
        ],
        "usuario": "MisterMiyagi",
        "usuario_id": 203
    },
    {
        "_id": 129,
        "fecha": { "$date" : "2013-08-22T05:58:41Z" },
        "decripcion": "\nI think the answer to this question lies in how python pass data to parameter (pass by value or by reference), not mutability or how python handle the \"def\" statement.\n\nA brief introduction. First, there are two type of data types in python, one is simple elementary data type, like numbers, and another data type is objects. Second, when passing data to parameters, python pass elementary data type by value, i.e., make a local copy of the value to a local variable, but pass object by reference, i.e., pointers to the object.\n\nAdmitting the above two points, let's explain what happened to the python code. It's only because of passing by reference for objects, but has nothing to do with mutable/immutable, or arguably the fact that \"def\" statement is executed only once when it is defined.\n\n[] is an object, so python pass the reference of [] to a, i.e., a is only a pointer to [] which lies in memory as an object. There is only one copy of [] with, however, many references to it. For the first foo(), the list [] is changed to 1 by append method. But Note that there is only one copy of the list object and this object now becomes 1. When running the second foo(), what effbot webpage says (items is not evaluated any more) is wrong. a is evaluated to be the list object, although now the content of the object is 1. This is the effect of passing by reference! The result of foo(3) can be easily derived in the same way.\n\nTo further validate my answer, let's take a look at two additional codes.\n\n====== No. 2 ========\n\ndef foo(x, items=None):\n    if items is None:\n        items = []\n    items.append(x)\n    return items\n\nfoo(1)  #return [1]\nfoo(2)  #return [2]\nfoo(3)  #return [3]\n\n\n[] is an object, so is None (the former is mutable while the latter is immutable. But the mutability has nothing to do with the question). None is somewhere in the space but we know it's there and there is only one copy of None there. So every time foo is invoked, items is evaluated (as opposed to some answer that it is only evaluated once) to be None, to be clear, the reference (or the address) of None. Then in the foo, item is changed to [], i.e., points to another object which has a different address. \n\n====== No. 3 =======\n\ndef foo(x, items=[]):\n    items.append(x)\n    return items\n\nfoo(1)    # returns [1]\nfoo(2,[]) # returns [2]\nfoo(3)    # returns [1,3]\n\n\nThe invocation of foo(1) make items point to a list object [] with an address, say, 11111111. the content of the list is changed to 1 in the foo function in the sequel, but the address is not changed, still 11111111. Then foo(2,[]) is coming. Although the [] in foo(2,[]) has the same content as the default parameter [] when calling foo(1), their address are different! Since we provide the parameter explicitly, items has to take the address of this new [], say 2222222, and return it after making some change. Now foo(3) is executed. since only x is provided, items has to take its default value again. What's the default value? It is set when defining the foo function: the list object located in 11111111. So the items is evaluated to be the address 11111111 having an element 1. The list located at 2222222 also contains one element 2, but it is not pointed by items any more. Consequently, An append of 3 will make items [1,3]. \n\nFrom the above explanations, we can see that the effbot webpage recommended in the accepted answer failed to give a relevant answer to this question. What is more, I think a point in the effbot webpage is wrong. I think the code regarding the UI.Button is correct:\n\nfor i in range(10):\n    def callback():\n        print \"clicked button\", i\n    UI.Button(\"button %s\" % i, callback)\n\n\nEach button can hold a distinct callback function which will display different value of i. I can provide an example to show this:\n\nx=[]\nfor i in range(10):\n    def callback():\n        print(i)\n    x.append(callback) \n\n\nIf we execute x[7]() we'll get 7 as expected, and x[9]() will gives 9, another value of i.\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "Your last point is wrong. Try it and you'll see that x[7]() is 9.",
                "fecha": { "$date" : "2013-10-02T13:29:23Z" },
                "usuario": "Duncan",
                "usuario_id": 204
            },
            {
                "decripcion": "\"python pass elementary data type by value, i.e., make a local copy of the value to a local variable\" is completely incorrect. I am astonished that someone can obviously know Python very well, yet have such horrible misunderstanding of fundamentals. :-(",
                "fecha": { "$date" : "2014-11-19T09:07:54Z" },
                "usuario": "Veky",
                "usuario_id": 178
            }
        ],
        "usuario": "user2384994",
        "usuario_id": 205
    },
    {
        "_id": 130,
        "fecha": { "$date" : "2020-01-18T21:04:41Z" },
        "decripcion": "\nWhen you write [x]*3 you get, essentially, the list [x, x, x]. That is, a list with 3 references to the same x. When you then modify this single x it is visible via all three references to it:\n\nx = [1] * 4\nl = [x] * 3\nprint(f\"id(x): {id(x)}\")\n# id(x): 140560897920048\nprint(\n    f\"id(l[0]): {id(l[0])}\\n\"\n    f\"id(l[1]): {id(l[1])}\\n\"\n    f\"id(l[2]): {id(l[2])}\"\n)\n# id(l[0]): 140560897920048\n# id(l[1]): 140560897920048\n# id(l[2]): 140560897920048\n\nx[0] = 42\nprint(f\"x: {x}\")\n# x: [42, 1, 1, 1]\nprint(f\"l: {l}\")\n# l: [[42, 1, 1, 1], [42, 1, 1, 1], [42, 1, 1, 1]]\n\n\nTo fix it, you need to make sure that you create a new list at each position. One way to do it is\n\n[[1]*4 for _ in range(3)]\n\n\nwhich will reevaluate [1]*4 each time instead of evaluating it once and making 3 references to 1 list.\n\n\n\nYou might wonder why * can't make independent objects the way the list comprehension does. That's because the multiplication operator * operates on objects, without seeing expressions. When you use * to multiply [[1] * 4] by 3, * only sees the 1-element list [[1] * 4] evaluates to, not the [[1] * 4 expression text. * has no idea how to make copies of that element, no idea how to reevaluate [[1] * 4], and no idea you even want copies, and in general, there might not even be a way to copy the element.\n\nThe only option * has is to make new references to the existing sublist instead of trying to make new sublists. Anything else would be inconsistent or require major redesigning of fundamental language design decisions.\n\nIn contrast, a list comprehension reevaluates the element expression on every iteration. [[1] * 4 for n in range(3)] reevaluates [1] * 4 every time for the same reason [x**2 for x in range(3)] reevaluates x**2 every time. Every evaluation of [1] * 4 generates a new list, so the list comprehension does what you wanted.\n\nIncidentally, [1] * 4 also doesn't copy the elements of [1], but that doesn't matter, since integers are immutable. You can't do something like 1.value = 2 and turn a 1 into a 2.\n    ",
        "votes": 686,
        "comentarios": [
            {
                "decripcion": "I am surprised that no body points out  that, the answer here is misleading. [x]*3 store 3 references like [x, x, x] is only right when x is mutable. This does't work for e.g. a=[4]*3, where after a[0]=5, a=[5,4,4].",
                "fecha": { "$date" : "2015-05-22T00:16:41Z" },
                "usuario": "Allanqunzi",
                "usuario_id": 210
            },
            {
                "decripcion": "Technically, it's still correct. [4]*3 is essentially equivalent to x = 4; [x, x, x]. It's true, though, that this will never cause any problem since 4 is immutable. Also, your other example isn't really a different case. a = [x]*3; a[0] = 5 won't cause problems even if x is mutable, since you're not modifying x, only modifying a. I wouldn't describe my answer as misleading or incorrect - you just can't shoot yourself in the foot if you're dealing with immutable objects.",
                "fecha": { "$date" : "2015-05-22T08:04:09Z" },
                "usuario": "CAdaker",
                "usuario_id": 211
            },
            {
                "decripcion": "@Allanqunzi you are wrong. Do x = 1000; lst = [x]*2; lst[0] is lst[1] -> True. Python does not distinguish between mutable and immutable objects here whatsoever.",
                "fecha": { "$date" : "2016-04-17T18:08:26Z" },
                "usuario": "timgeb",
                "usuario_id": 212
            }
        ],
        "usuario": "CAdaker",
        "usuario_id": 211
    },
    {
        "_id": 131,
        "fecha": { "$date" : "2021-06-18T17:12:23Z" },
        "decripcion": "\nsize = 3\nmatrix_surprise = [[0] * size] * size\nmatrix = [[0]*size for _ in range(size)]\n\nLive visualization using Python Tutor:\n\n    ",
        "votes": 149,
        "comentarios": [
            {
                "decripcion": "So, why if we write matrix= [[x] * 2] doesn't make 2 elemnts for the same object like the example you describe, it seems to be the same concept, what am i missing?",
                "fecha": { "$date" : "2017-07-01T17:55:18Z" },
                "usuario": "Ahmed Mohamed",
                "usuario_id": 213
            },
            {
                "decripcion": "@AhmedMohamed Indeed it does make a list with two elements of the exact same object that x refers to. If you make a globally unique object with  x = object() and then make matrix = [[x] * 2] these does come as true: matrix[0][0] is matrix[0][1]",
                "fecha": { "$date" : "2017-07-02T13:13:23Z" },
                "usuario": "nadrimajstor",
                "usuario_id": 214
            },
            {
                "decripcion": "@nadrimajstor so why the change in matrix[0] doesn't affect matrix[1] like the example above with 2d matrix.",
                "fecha": { "$date" : "2017-07-02T13:31:54Z" },
                "usuario": "Ahmed Mohamed",
                "usuario_id": 213
            },
            {
                "decripcion": "@AhmedMohamed Surprise come when you make a \"copy\" of mutable sequence (in our example it is a list) so if a row = [x] * 2 than a matrix = [row] * 2 where both rows are exactly the same object, and now changes to one row matrix[0][0] = y suddenly reflect in the other one (matrix[0][0] is matrix[1][0]) == True",
                "fecha": { "$date" : "2017-07-02T15:44:00Z" },
                "usuario": "nadrimajstor",
                "usuario_id": 214
            },
            {
                "decripcion": "@AhmedMohamed Take a look at Ned Batchelder - Facts and Myths about Python names and values as it might offer a better explanation. :)",
                "fecha": { "$date" : "2017-07-02T16:11:30Z" },
                "usuario": "nadrimajstor",
                "usuario_id": 214
            }
        ],
        "usuario": "nadrimajstor",
        "usuario_id": 214
    },
    {
        "_id": 132,
        "fecha": { "$date" : "2021-06-18T16:49:18Z" },
        "decripcion": "\nActually, this is exactly what you would expect. Let's decompose what is happening here:\nYou write\nlst = [[1] * 4] * 3\n\nThis is equivalent to:\nlst1 = [1]*4\nlst = [lst1]*3\n\nThis means lst is a list with 3 elements all pointing to lst1. This means the two following lines are equivalent:\nlst[0][0] = 5\nlst1[0] = 5\n\nAs lst[0] is nothing but lst1.\nTo obtain the desired behavior, you can use a list comprehension:\nlst = [ [1]*4 for n in range(3) ]\n\nIn this case, the expression is re-evaluated for each n, leading to a different list.\n    ",
        "votes": 62,
        "comentarios": [
            {
                "decripcion": "Just a small addition to the nice answer here: it's evident that you're dealing with same object if you do id(lst[0][0]) and id(lst[1][0]) or even id(lst[0]) and id(lst[1])",
                "fecha": { "$date" : "2017-05-17T07:08:16Z" },
                "usuario": "Sergiy Kolodyazhnyy",
                "usuario_id": 215
            }
        ],
        "usuario": "PierreBdR",
        "usuario_id": 216
    },
    {
        "_id": 133,
        "fecha": { "$date" : "2017-01-14T07:54:00Z" },
        "decripcion": "\n[[1] * 4] * 3\n\n\nor even:\n\n[[1, 1, 1, 1]] * 3\n\n\nCreates a list that references the internal [1,1,1,1] 3 times - not three copies of the inner list, so any time you modify the list (in any position), you'll see the change three times.\n\nIt's the same as this example:\n\n>>> inner = [1,1,1,1]\n>>> outer = [inner]*3\n>>> outer\n[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\n>>> inner[0] = 5\n>>> outer\n[[5, 1, 1, 1], [5, 1, 1, 1], [5, 1, 1, 1]]\n\n\nwhere it's probably a little less surprising.\n    ",
        "votes": 41,
        "comentarios": [
            {
                "decripcion": "You can use the \"is\" operator to discover this. ls[0] is ls[1] returns True.",
                "fecha": { "$date" : "2008-10-27T15:03:52Z" },
                "usuario": "mipadi",
                "usuario_id": 217
            }
        ],
        "usuario": "Blair Conrad",
        "usuario_id": 218
    },
    {
        "_id": 134,
        "fecha": { "$date" : "2021-06-18T17:26:13Z" },
        "decripcion": "\nAlongside the accepted answer that explained the problem correctly, instead of creating a list with duplicated elements using following code:\n[[1]*4 for _ in range(3)]\n\nAlso, you can use itertools.repeat() to create an iterator object of repeated elements:\n>>> a = list(repeat(1,4))\n[1, 1, 1, 1]\n>>> a[0] = 5\n>>> a\n[5, 1, 1, 1]\n\nP.S. If you're using NumPy and you only want to create an array of ones or zeroes you can use np.ones and np.zeros and/or for other numbers use np.repeat:\n>>> import numpy as np\n>>> np.ones(4)\narray([1., 1., 1., 1.])\n>>> np.ones((4, 2))\narray([[1., 1.],\n       [1., 1.],\n       [1., 1.],\n       [1., 1.]])\n>>> np.zeros((4, 2))\narray([[0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.]])\n>>> np.repeat([7], 10)\narray([7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "kasravnd",
        "usuario_id": 219
    },
    {
        "_id": 135,
        "fecha": { "$date" : "2021-06-18T16:32:37Z" },
        "decripcion": "\nmy_list = [[1]*4] * 3 creates one list object [1,1,1,1] in memory and copies its reference 3 times over. This is equivalent to obj = [1,1,1,1]; my_list = [obj]*3. Any modification to obj will be reflected at three places, wherever obj is referenced in the list.\nThe right statement would be:\nmy_list = [[1]*4 for _ in range(3)]\n\nor\nmy_list = [[1 for __ in range(4)] for _ in range(3)]\n\nImportant thing to note here is that the * operator is mostly used to create a list of literals. Although 1 is immutable, obj = [1]*4 will still create a list of 1 repeated 4 times over to form [1,1,1,1]. But if any reference to an immutable object is made, the object is overwritten with a new one.\nThis means if we do obj[1] = 42, then obj will become [1,42,1,1] not [42,42,42,42] as some may assume. This can also be verified:\n>>> my_list = [1]*4\n>>> my_list\n[1, 1, 1, 1]\n\n>>> id(my_list[0])\n4522139440\n>>> id(my_list[1])  # Same as my_list[0]\n4522139440\n\n\n>>> my_list[1] = 42  # Since my_list[1] is immutable, this operation overwrites my_list[1] with a new object changing its id.\n>>> my_list\n[1, 42, 1, 1]\n\n>>> id(my_list[0])\n4522139440\n>>> id(my_list[1])  # id changed\n4522140752\n>>> id(my_list[2])  # id still same as my_list[0], still referring to value `1`.\n4522139440\n\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "It's not about literals. obj[2] = 42 replaces the reference at index 2, as opposed to mutating the object referenced by that index, which is what myList[2][0] = ... does (myList[2] is a list, and the assigment alters the reference at index 0 in tha list). Of course, integers are not mutable, but plenty of object types are. And note that the [....] list display notation is also a form of literal syntax! Don't confuse compound (such as lists) and scalar objects (such as integers), with mutable vs. immutable objects.",
                "fecha": { "$date" : "2018-07-25T15:52:05Z" },
                "usuario": "Martijn Pieters\u2666",
                "usuario_id": 13
            }
        ],
        "usuario": "jerrymouse",
        "usuario_id": 220
    },
    {
        "_id": 136,
        "fecha": { "$date" : "2016-04-06T13:40:43Z" },
        "decripcion": "\nPython containers contain references to other objects. See this example:\n\n>>> a = []\n>>> b = [a]\n>>> b\n[[]]\n>>> a.append(1)\n>>> b\n[[1]]\n\n\nIn this b is a list that contains one item that is a reference to list a. The list a is mutable.\n\nThe multiplication of a list by an integer is equivalent to adding the list to itself multiple times (see common sequence operations). So continuing with the example:\n\n>>> c = b + b\n>>> c\n[[1], [1]]\n>>>\n>>> a[0] = 2\n>>> c\n[[2], [2]]\n\n\nWe can see that the list c now contains two references to list a which is equivalent to c = b * 2.\n\nPython FAQ also contains explanation of this behavior: How do I create a multidimensional list?\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "Zbyn\u011bk Winkler",
        "usuario_id": 221
    },
    {
        "_id": 137,
        "fecha": { "$date" : "2021-06-18T16:36:25Z" },
        "decripcion": "\nLet's rewrite your code in the following way:\nx = 1\ny = [x]\nz = y * 4\n\nmy_list = [z] * 3\n\nThen having this, run the following code to make everything more clear. What the code does is basically print the ids of the obtained objects, which\n\nReturn[s] the \u201cidentity\u201d of an object\n\nand will help us identify them and analyse what happens:\nprint(\"my_list:\")\nfor i, sub_list in enumerate(my_list):\n    print(\"\\t[{}]: {}\".format(i, id(sub_list)))\n    for j, elem in enumerate(sub_list):\n        print(\"\\t\\t[{}]: {}\".format(j, id(elem)))\n\nAnd you will get the following output:\nx: 1\ny: [1]\nz: [1, 1, 1, 1]\nmy_list:\n    [0]: 4300763792\n        [0]: 4298171528\n        [1]: 4298171528\n        [2]: 4298171528\n        [3]: 4298171528\n    [1]: 4300763792\n        [0]: 4298171528\n        [1]: 4298171528\n        [2]: 4298171528\n        [3]: 4298171528\n    [2]: 4300763792\n        [0]: 4298171528\n        [1]: 4298171528\n        [2]: 4298171528\n        [3]: 4298171528\n\n\nSo now let's go step-by-step. You have x which is 1, and a single element list y containing x. Your first step is y * 4 which will get you a new list z, which is basically [x, x, x, x], i.e. it creates a new list which will have 4 elements, which are references to the initial x object. The next step is pretty similar. You basically do z * 3, which is [[x, x, x, x]] * 3 and returns [[x, x, x, x], [x, x, x, x], [x, x, x, x]], for the same reason as for the first step.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "bagrat",
        "usuario_id": 222
    },
    {
        "_id": 138,
        "fecha": { "$date" : "2016-06-14T06:36:52Z" },
        "decripcion": "\nIn simple words this is happening because in python everything works by reference, so when you create a list of list that way you basically end up with such problems.\n\nTo solve your issue you can do either one of them:\n1. Use numpy array documentation for numpy.empty\n2. Append the list as you get to a list.\n3. You can also use dictionary if you want  \n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Neeraj Komuravalli",
        "usuario_id": 223
    },
    {
        "_id": 139,
        "fecha": { "$date" : "2021-06-18T16:39:24Z" },
        "decripcion": "\nEveryone is explaining what is happening. I'll suggest one way to solve it:\nmy_list = [[1 for i in range(4)] for j in range(3)]\n\nmy_list[0][0] = 5\nprint(my_list)\n\nAnd then you get:\n[[5, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "awulll",
        "usuario_id": 224
    },
    {
        "_id": 140,
        "fecha": { "$date" : "2016-08-10T07:29:38Z" },
        "decripcion": "\nTrying to explain it more descriptively,\n\nOperation 1:\n\nx = [[0, 0], [0, 0]]\nprint(type(x)) # <class 'list'>\nprint(x) # [[0, 0], [0, 0]]\n\nx[0][0] = 1\nprint(x) # [[1, 0], [0, 0]]\n\n\nOperation 2:\n\ny = [[0] * 2] * 2\nprint(type(y)) # <class 'list'>\nprint(y) # [[0, 0], [0, 0]]\n\ny[0][0] = 1\nprint(y) # [[1, 0], [1, 0]]\n\n\nNoticed why doesn't modifying the first element of the first list didn't modify the second element of each list? That's because [0] * 2 really is a list of two numbers, and a reference to 0 cannot be modified.\n\nIf you want to create clone copies, try Operation 3:\n\nimport copy\ny = [0] * 2   \nprint(y)   # [0, 0]\n\ny = [y, copy.deepcopy(y)]  \nprint(y) # [[0, 0], [0, 0]]\n\ny[0][0] = 1\nprint(y) # [[1, 0], [0, 0]]\n\n\nanother interesting way to create clone copies, Operation 4:\n\nimport copy\ny = [0] * 2\nprint(y) # [0, 0]\n\ny = [copy.deepcopy(y) for num in range(1,5)]\nprint(y) # [[0, 0], [0, 0], [0, 0], [0, 0]]\n\ny[0][0] = 5\nprint(y) # [[5, 0], [0, 0], [0, 0], [0, 0]]\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Adil Abbasi",
        "usuario_id": 225
    },
    {
        "_id": 141,
        "fecha": { "$date" : "2020-06-21T11:43:44Z" },
        "decripcion": "\nThese questions have a lot of answers, I am adding my answer to explain the same diagrammatically.\nThe way you created the 2D, creates a shallow list\n    arr = [[0]*cols]*row\n\nInstead, if you want to update the elements of the list, you should use\n   rows, cols = (5, 5) \n   arr = [[0 for i in range(cols)] for j in range(rows)] \n\n\nExplanation:\nOne can create a list using :\n   arr = [0]*N \n\nor\n   arr = [0 for i in range(N)] \n\nIn the first case all the indices of the array point to the same integer object\n\nand when you assign a value to a particular index, a new int object is created, for eg arr[4] = 5 creates\n\nNow let us see what happens when we create a list of list, in this case, all the elements of our top list will point to the same list\n\nAnd if you update the value of any index a new int object will be created. But since all the top-level list indexes are pointing at the same list, all the rows will look the same. And you will get the feeling that updating an element is updating all the elements in that column.\n\nCredits: Thanks to Pranav Devarakonda for the easy explanation here\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Deepak Patankar",
        "usuario_id": 226
    },
    {
        "_id": 142,
        "fecha": { "$date" : "2021-06-18T17:02:12Z" },
        "decripcion": "\n@spelchekr from Python list multiplication: [[...]]*3 makes 3 lists which mirror each other when modified and I had the same question about\n\"Why does only the outer *3 create more references while the inner one doesn't? Why isn't it all 1s?\"\nli = [0] * 3\nprint([id(v) for v in li])  # [140724141863728, 140724141863728, 140724141863728]\nli[0] = 1\nprint([id(v) for v in li])  # [140724141863760, 140724141863728, 140724141863728]\nprint(id(0))  # 140724141863728\nprint(id(1))  # 140724141863760\nprint(li)     # [1, 0, 0]\n\nma = [[0]*3] * 3  # mainly discuss inner & outer *3 here\nprint([id(li) for li in ma])  # [1987013355080, 1987013355080, 1987013355080]\nma[0][0] = 1\nprint([id(li) for li in ma])  # [1987013355080, 1987013355080, 1987013355080]\nprint(ma)  # [[1, 0, 0], [1, 0, 0], [1, 0, 0]]\n\nHere is my explanation after trying the code above:\n\nThe inner *3 also creates references, but its references are immutable, something like [&0, &0, &0], then when you change li[0], you can't change any underlying reference of const int 0, so you can just change the reference address into the new one &1;\nwhile ma = [&li, &li, &li] and li is mutable, so when you call ma[0][0] = 1, ma[0][0] is equal to &li[0], so all the &li instances will change its 1st address into &1.\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "ouxiaogu",
        "usuario_id": 227
    },
    {
        "_id": 143,
        "fecha": { "$date" : "2016-07-25T09:09:59Z" },
        "decripcion": "\nBy using the inbuilt list function you can do like this\n\na\nout:[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\n#Displaying the list\n\na.remove(a[0])\nout:[[1, 1, 1, 1], [1, 1, 1, 1]]\n# Removed the first element of the list in which you want altered number\n\na.append([5,1,1,1])\nout:[[1, 1, 1, 1], [1, 1, 1, 1], [5, 1, 1, 1]]\n# append the element in the list but the appended element as you can see is appended in last but you want that in starting\n\na.reverse()\nout:[[5, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\n#So at last reverse the whole list to get the desired list\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "Note, fourth step can be dropped if you make second step: a.insert(0,[5,1,1,1])",
                "fecha": { "$date" : "2018-10-19T05:29:03Z" },
                "usuario": "U12-Forward",
                "usuario_id": 4
            }
        ],
        "usuario": "Anand Tripathi",
        "usuario_id": 228
    },
    {
        "_id": 144,
        "fecha": { "$date" : "2020-10-22T19:57:45Z" },
        "decripcion": "\nI arrived here because I was looking to see how I could nest an arbitrary number of lists. There are a lot of explanations and specific examples above, but you can generalize N dimensional list of lists of lists of ... with the following recursive function:\nimport copy\n\ndef list_ndim(dim, el=None, init=None):\n    if init is None:\n        init = el\n\n    if len(dim)> 1:\n        return list_ndim(dim[0:-1], None, [copy.copy(init) for x in range(dim[-1])])\n\n    return [copy.deepcopy(init) for x in range(dim[0])]\n\nYou make your first call to the function like this:\ndim = (3,5,2)\nel = 1.0\nl = list_ndim(dim, el)\n\nwhere (3,5,2) is a tuple of the dimensions of the structure (similar to numpy shape argument), and 1.0 is the element you want the structure to be initialized with (works with None as well). Note that the init argument is only provided by the recursive call to carry forward the nested child lists\noutput of above:\n[[[1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0]],\n [[1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0]],\n [[1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0]]]\n\nset specific elements:\nl[1][3][1] = 56\nl[2][2][0] = 36.0+0.0j\nl[0][1][0] = 'abc'\n\nresulting output:\n[[[1.0, 1.0], ['abc', 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0]],\n [[1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 56.0], [1.0, 1.0]],\n [[1.0, 1.0], [1.0, 1.0], [(36+0j), 1.0], [1.0, 1.0], [1.0, 1.0]]]\n\nthe non-typed nature of lists is demonstrated above\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Brian",
        "usuario_id": 176
    },
    {
        "_id": 145,
        "fecha": { "$date" : "2021-01-07T16:39:52Z" },
        "decripcion": "\nWhile the original question constructed the sublists with the multiplication operator, I'll add an example that uses the same list for the sublists. Adding this answer for completeness as this question is often used as a canonical for the issue\nnode_count = 4\ncolors = [0,1,2,3]\nsol_dict = {node:colors for node in range(0,node_count)}\n\nThe list in each dictionary value is the same object, trying to change one of the dictionaries values will be seen in all.\n>>> sol_dict\n{0: [0, 1, 2, 3], 1: [0, 1, 2, 3], 2: [0, 1, 2, 3], 3: [0, 1, 2, 3]}\n>>> [v is colors for v in sol_dict.values()]\n[True, True, True, True]\n>>> sol_dict[0].remove(1)\n>>> sol_dict\n{0: [0, 2, 3], 1: [0, 2, 3], 2: [0, 2, 3], 3: [0, 2, 3]}\n\nThe correct way to construct the dictionary would be to use a copy of the list for each value.\n>>> colors = [0,1,2,3]\n>>> sol_dict = {node:colors[:] for node in range(0,node_count)}\n>>> sol_dict\n{0: [0, 1, 2, 3], 1: [0, 1, 2, 3], 2: [0, 1, 2, 3], 3: [0, 1, 2, 3]}\n>>> sol_dict[0].remove(1)\n>>> sol_dict\n{0: [0, 2, 3], 1: [0, 1, 2, 3], 2: [0, 1, 2, 3], 3: [0, 1, 2, 3]}\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 146,
        "fecha": { "$date" : "2021-03-20T14:25:08Z" },
        "decripcion": "\nNote that items in the sequence are not copied; they are referenced multiple times. This often haunts new Python programmers; consider:\n>>> lists = [[]] * 3\n>>> lists\n[[], [], []]\n>>> lists[0].append(3)\n>>> lists\n[[3], [3], [3]]\n\nWhat has happened is that [[]] is a one-element list containing an empty list, so all three elements of [[]] * 3 are references to this single empty list. Modifying any of the elements of lists modifies this single list.\nAnother example to explain this is using multi-dimensional arrays.\nYou probably tried to make a multidimensional array like this:\n>>> A = [[None] * 2] * 3\n\nThis looks correct if you print it:\n>>> A\n[[None, None], [None, None], [None, None]]\n\nBut when you assign a value, it shows up in multiple places:\n>>> A[0][0] = 5\n>>> A\n[[5, None], [5, None], [5, None]]\n\nThe reason is that replicating a list with\u00a0*\u00a0doesn\u2019t create copies, it only creates references to the existing objects. The\u00a03\u00a0creates a list containing 3 references to the same list of length two. Changes to one row will show in all rows, which is almost certainly not what you want.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "mishsx",
        "usuario_id": 229
    },
    {
        "_id": 147,
        "fecha": { "$date" : "2020-03-09T01:52:34Z" },
        "decripcion": "\nWith new_list = my_list, you don't actually have two lists. The assignment just copies the reference to the list, not the actual list, so both new_list and my_list refer to the same list after the assignment.\n\nTo actually copy the list, you have various possibilities:\n\n\nYou can use the builtin list.copy() method (available since Python 3.3):\n\nnew_list = old_list.copy()\n\nYou can slice it: \n\nnew_list = old_list[:]\n\n\nAlex Martelli's opinion (at least back in 2007) about this is, that it is a weird syntax and it does not make sense to use it ever. ;) (In his opinion, the next one is more readable).\nYou can use the built in list() function:\n\nnew_list = list(old_list)\n\nYou can use generic copy.copy():\n\nimport copy\nnew_list = copy.copy(old_list)\n\n\nThis is a little slower than list() because it has to find out the datatype of old_list first.\nIf the list contains objects and you want to copy them as well, use generic copy.deepcopy():\n\nimport copy\nnew_list = copy.deepcopy(old_list)\n\n\nObviously the slowest and most memory-needing method, but sometimes unavoidable.\n\n\nExample:\n\nimport copy\n\nclass Foo(object):\n    def __init__(self, val):\n         self.val = val\n\n    def __repr__(self):\n        return 'Foo({!r})'.format(self.val)\n\nfoo = Foo(1)\n\na = ['foo', foo]\nb = a.copy()\nc = a[:]\nd = list(a)\ne = copy.copy(a)\nf = copy.deepcopy(a)\n\n# edit orignal list and instance \na.append('baz')\nfoo.val = 5\n\nprint('original: %r\\nlist.copy(): %r\\nslice: %r\\nlist(): %r\\ncopy: %r\\ndeepcopy: %r'\n      % (a, b, c, d, e, f))\n\n\nResult:\n\noriginal: ['foo', Foo(5), 'baz']\nlist.copy(): ['foo', Foo(5)]\nslice: ['foo', Foo(5)]\nlist(): ['foo', Foo(5)]\ncopy: ['foo', Foo(5)]\ndeepcopy: ['foo', Foo(1)]\n\n    ",
        "votes": 3690,
        "comentarios": [
            {
                "decripcion": "As @Georgy points out correctly in the answer below, any changes to the new_list values will also change the values in my_list. So actually the copy.deepcopy() method is the only real copy without reference to the original list and it's values.",
                "fecha": { "$date" : "2020-12-21T17:27:56Z" },
                "usuario": "moojen",
                "usuario_id": 231
            },
            {
                "decripcion": "@Erri I think you made a mistake. I didn't post any answers or comments here :)",
                "fecha": { "$date" : "2020-12-21T17:33:34Z" },
                "usuario": "Georgy",
                "usuario_id": 70
            },
            {
                "decripcion": "You're right, it was edited by you, but posted by @cryo Sorry for the mixup!",
                "fecha": { "$date" : "2020-12-21T17:52:36Z" },
                "usuario": "moojen",
                "usuario_id": 231
            },
            {
                "decripcion": "Which one is fastest?",
                "fecha": { "$date" : "2021-05-04T18:10:13Z" },
                "usuario": "zzz777",
                "usuario_id": 232
            },
            {
                "decripcion": "I was having the same issue with a list of json (each element of a list was a json) and the only one that worked was new_list = copy.deepcopy(old_list) ; I'm writing this since anyone can encounter the same issue. Thanks!",
                "fecha": { "$date" : "2021-05-11T15:23:44Z" },
                "usuario": "Tom",
                "usuario_id": 233
            }
        ],
        "usuario": "Felix Kling",
        "usuario_id": 234
    },
    {
        "_id": 148,
        "fecha": { "$date" : "2021-05-11T21:36:34Z" },
        "decripcion": "\nFelix already provided an excellent answer, but I thought I'd do a speed comparison of the various methods:\n\n10.59 sec (105.9 \u00b5s/itn) -  copy.deepcopy(old_list)\n10.16 sec (101.6 \u00b5s/itn) - pure Python Copy() method copying classes with deepcopy\n1.488 sec (14.88 \u00b5s/itn) - pure Python Copy() method not copying classes (only dicts/lists/tuples)\n0.325 sec (3.25 \u00b5s/itn) - for item in old_list: new_list.append(item)\n0.217 sec (2.17 \u00b5s/itn) - [i for i in old_list] (a list comprehension)\n0.186 sec (1.86 \u00b5s/itn) - copy.copy(old_list)\n0.075 sec (0.75 \u00b5s/itn) - list(old_list)\n0.053 sec (0.53 \u00b5s/itn) - new_list = []; new_list.extend(old_list)\n0.039 sec (0.39 \u00b5s/itn) - old_list[:] (list slicing)\n\nSo the fastest is list slicing. But be aware that copy.copy(), list[:] and list(list), unlike copy.deepcopy() and the python version don't copy any lists, dictionaries and class instances in the list, so if the originals change, they will change in the copied list too and vice versa.\n(Here's the script if anyone's interested or wants to raise any issues:)\nfrom copy import deepcopy\n\nclass old_class:\n    def __init__(self):\n        self.blah = 'blah'\n\nclass new_class(object):\n    def __init__(self):\n        self.blah = 'blah'\n\ndignore = {str: None, unicode: None, int: None, type(None): None}\n\ndef Copy(obj, use_deepcopy=True):\n    t = type(obj)\n\n    if t in (list, tuple):\n        if t == tuple:\n            # Convert to a list if a tuple to\n            # allow assigning to when copying\n            is_tuple = True\n            obj = list(obj)\n        else:\n            # Otherwise just do a quick slice copy\n            obj = obj[:]\n            is_tuple = False\n\n        # Copy each item recursively\n        for x in xrange(len(obj)):\n            if type(obj[x]) in dignore:\n                continue\n            obj[x] = Copy(obj[x], use_deepcopy)\n\n        if is_tuple:\n            # Convert back into a tuple again\n            obj = tuple(obj)\n\n    elif t == dict:\n        # Use the fast shallow dict copy() method and copy any\n        # values which aren't immutable (like lists, dicts etc)\n        obj = obj.copy()\n        for k in obj:\n            if type(obj[k]) in dignore:\n                continue\n            obj[k] = Copy(obj[k], use_deepcopy)\n\n    elif t in dignore:\n        # Numeric or string/unicode?\n        # It's immutable, so ignore it!\n        pass\n\n    elif use_deepcopy:\n        obj = deepcopy(obj)\n    return obj\n\nif __name__ == '__main__':\n    import copy\n    from time import time\n\n    num_times = 100000\n    L = [None, 'blah', 1, 543.4532,\n         ['foo'], ('bar',), {'blah': 'blah'},\n         old_class(), new_class()]\n\n    t = time()\n    for i in xrange(num_times):\n        Copy(L)\n    print 'Custom Copy:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        Copy(L, use_deepcopy=False)\n    print 'Custom Copy Only Copying Lists/Tuples/Dicts (no classes):', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        copy.copy(L)\n    print 'copy.copy:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        copy.deepcopy(L)\n    print 'copy.deepcopy:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        L[:]\n    print 'list slicing [:]:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        list(L)\n    print 'list(L):', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        [i for i in L]\n    print 'list expression(L):', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        a.extend(L)\n    print 'list extend:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        for y in L:\n            a.append(y)\n    print 'list append:', time()-t\n\n    t = time()\n    for i in xrange(num_times):\n        a = []\n        a.extend(i for i in L)\n    print 'generator expression extend:', time()-t\n\n    ",
        "votes": 689,
        "comentarios": [
            {
                "decripcion": "Does it mean that append and list comprehension are the best options?",
                "fecha": { "$date" : "2021-05-04T18:24:27Z" },
                "usuario": "zzz777",
                "usuario_id": 232
            },
            {
                "decripcion": "I have a cache containing a list of classes, I want to take lock, copy out the list, release lock. I hope that it is enough to use built-in copy to protect copied out list from changing when cached copy is changed.",
                "fecha": { "$date" : "2021-05-04T18:32:44Z" },
                "usuario": "zzz777",
                "usuario_id": 232
            }
        ],
        "usuario": "cryo",
        "usuario_id": 235
    },
    {
        "_id": 149,
        "fecha": { "$date" : "2021-05-11T21:37:30Z" },
        "decripcion": "\nI've been told that Python 3.3+ adds the list.copy() method, which should be as fast as slicing:\nnewlist = old_list.copy()\n\n    ",
        "votes": 173,
        "comentarios": [
            {
                "decripcion": "Yes, and as per docs docs.python.org/3/library/stdtypes.html#mutable-sequence-types, s.copy() creates a shallow copy of s (same as s[:]).",
                "fecha": { "$date" : "2018-09-25T18:07:46Z" },
                "usuario": "CyberMew",
                "usuario_id": 236
            },
            {
                "decripcion": "Actually it seems that currently, python3.8, .copy() is slightly faster than slicing. See below @AaronsHall answer.",
                "fecha": { "$date" : "2020-04-24T08:11:09Z" },
                "usuario": "loved.by.Jesus",
                "usuario_id": 237
            },
            {
                "decripcion": "@loved.by.Jesus: Yeah, they added optimizations for Python level method calls in 3.7 that were extended to C extension method calls in 3.8 by PEP 590 that remove the overhead of creating a bound method each time you call a method, so the cost to call alist.copy() is now a dict lookup on the list type, then a relatively cheap no-arg function call that ultimately invokes the same thing as slicing. Slicing still has to build a slice object, then go through type checks and unpacking to do the same thing.",
                "fecha": { "$date" : "2020-11-30T18:33:23Z" },
                "usuario": "ShadowRanger",
                "usuario_id": 14
            },
            {
                "decripcion": "Of course, they're working on optimizing out the repeated builds of constant slices, so in 3.10 slicing might win again. It's all pretty meaningless though; the asymptotic performance is identical, and the fixed overhead relatively small, so it doesn't really matter which approach you use.",
                "fecha": { "$date" : "2020-11-30T18:36:02Z" },
                "usuario": "ShadowRanger",
                "usuario_id": 14
            }
        ],
        "usuario": "anatoly techtonik",
        "usuario_id": 238
    },
    {
        "_id": 150,
        "fecha": { "$date" : "2018-01-09T15:33:11Z" },
        "decripcion": "\n\n  What are the options to clone or copy a list in Python?\n\n\nIn Python 3, a shallow copy can be made with:\n\na_copy = a_list.copy()\n\n\nIn Python 2 and 3, you can get a shallow copy with a full slice of the original:\n\na_copy = a_list[:]\n\n\nExplanation\n\nThere are two semantic ways to copy a list. A shallow copy creates a new list of the same objects, a deep copy creates a new list containing new equivalent objects.\n\nShallow list copy\n\nA shallow copy only copies the list itself, which is a container of references to the objects in the list. If the objects contained themselves are mutable and one is changed, the change will be reflected in both lists. \n\nThere are different ways to do this in Python 2 and 3. The Python 2 ways will also work in Python 3.\n\nPython 2\n\nIn Python 2, the idiomatic way of making a shallow copy of a list is with a complete slice of the original:\n\na_copy = a_list[:]\n\n\nYou can also accomplish the same thing by passing the list through the list constructor, \n\na_copy = list(a_list)\n\n\nbut using the constructor is less efficient:\n\n>>> timeit\n>>> l = range(20)\n>>> min(timeit.repeat(lambda: l[:]))\n0.30504298210144043\n>>> min(timeit.repeat(lambda: list(l)))\n0.40698814392089844\n\n\nPython 3\n\nIn Python 3, lists get the list.copy method:\n\na_copy = a_list.copy()\n\n\nIn Python 3.5:\n\n>>> import timeit\n>>> l = list(range(20))\n>>> min(timeit.repeat(lambda: l[:]))\n0.38448613602668047\n>>> min(timeit.repeat(lambda: list(l)))\n0.6309100328944623\n>>> min(timeit.repeat(lambda: l.copy()))\n0.38122922903858125\n\n\nMaking another pointer does not make a copy\n\n\n  Using new_list = my_list then modifies new_list every time my_list changes. Why is this?\n\n\nmy_list is just a name that points to the actual list in memory. When you say new_list = my_list you're not making a copy, you're just adding another name that points at that original list in memory. We can have similar issues when we make copies of lists. \n\n>>> l = [[], [], []]\n>>> l_copy = l[:]\n>>> l_copy\n[[], [], []]\n>>> l_copy[0].append('foo')\n>>> l_copy\n[['foo'], [], []]\n>>> l\n[['foo'], [], []]\n\n\nThe list is just an array of pointers to the contents, so a shallow copy just copies the pointers, and so you have two different lists, but they have the same contents. To make copies of the contents, you need a deep copy.\n\nDeep copies\n\nTo make a deep copy of a list, in Python 2 or 3, use deepcopy in the copy module:\n\nimport copy\na_deep_copy = copy.deepcopy(a_list)\n\n\nTo demonstrate how this allows us to make new sub-lists:\n\n>>> import copy\n>>> l\n[['foo'], [], []]\n>>> l_deep_copy = copy.deepcopy(l)\n>>> l_deep_copy[0].pop()\n'foo'\n>>> l_deep_copy\n[[], [], []]\n>>> l\n[['foo'], [], []]\n\n\nAnd so we see that the deep copied list is an entirely different list from the original. You could roll your own function - but don't. You're likely to create bugs you otherwise wouldn't have by using the standard library's deepcopy function.\n\nDon't use eval\n\nYou may see this used as a way to deepcopy, but don't do it:\n\nproblematic_deep_copy = eval(repr(a_list))\n\n\n\nIt's dangerous, particularly if you're evaluating something from a source you don't trust.\nIt's not reliable, if a subelement you're copying doesn't have a representation that can be eval'd to reproduce an equivalent element.\nIt's also less performant. \n\n\nIn 64 bit Python 2.7:\n\n>>> import timeit\n>>> import copy\n>>> l = range(10)\n>>> min(timeit.repeat(lambda: copy.deepcopy(l)))\n27.55826997756958\n>>> min(timeit.repeat(lambda: eval(repr(l))))\n29.04534101486206\n\n\non 64 bit Python 3.5:\n\n>>> import timeit\n>>> import copy\n>>> l = list(range(10))\n>>> min(timeit.repeat(lambda: copy.deepcopy(l)))\n16.84255409205798\n>>> min(timeit.repeat(lambda: eval(repr(l))))\n34.813894678023644\n\n    ",
        "votes": 138,
        "comentarios": [
            {
                "decripcion": "You don't need a deepcopy if the list is 2D. If it is a list of lists, and those lists don't have lists inside of them, you can use a for loop. Presently, I am using   list_copy=[] for item in list:     list_copy.append(copy(item)) and it is much faster.",
                "fecha": { "$date" : "2019-01-10T12:44:59Z" },
                "usuario": "John Locke",
                "usuario_id": 239
            }
        ],
        "usuario": "Aaron Hall",
        "usuario_id": 119
    },
    {
        "_id": 151,
        "fecha": { "$date" : "2020-06-05T16:01:12Z" },
        "decripcion": "\nThere are many answers already that tell you how to make a proper copy, but none of them say why your original 'copy' failed. \n\nPython doesn't store values in variables; it binds names to objects. Your original assignment took the object referred to by my_list and bound it to new_list as well. No matter which name you use there is still only one list, so changes made when referring to it as my_list will persist when referring to it as new_list. Each of the other answers to this question give you different ways of creating a new object to bind to new_list. \n\nEach element of a list acts like a name, in that each element binds non-exclusively to an object. A shallow copy creates a new list whose elements bind to the same objects as before.\n\nnew_list = list(my_list)  # or my_list[:], but I prefer this syntax\n# is simply a shorter way of:\nnew_list = [element for element in my_list]\n\n\nTo take your list copy one step further, copy each object that your list refers to, and bind those element copies to a new list. \n\nimport copy  \n# each element must have __copy__ defined for this...\nnew_list = [copy.copy(element) for element in my_list]\n\n\nThis is not yet a deep copy, because each element of a list may refer to other objects, just like the list is bound to its elements. To recursively copy every element in the list, and then each other object referred to by each element, and so on: perform a deep copy. \n\nimport copy\n# each element must have __deepcopy__ defined for this...\nnew_list = copy.deepcopy(my_list)\n\n\nSee the documentation for more information about corner cases in copying.\n    ",
        "votes": 62,
        "comentarios": [
            {
                "decripcion": "I should have scrolled down to your answer when dealing with this topic. I've had hard times trying to figure out why my copy of \"list of lists\" is actually not a copy... :-) Thanks for this one!",
                "fecha": { "$date" : "2020-09-10T15:37:28Z" },
                "usuario": "MrZH6",
                "usuario_id": 240
            }
        ],
        "usuario": "jack",
        "usuario_id": 241
    },
    {
        "_id": 152,
        "fecha": { "$date" : "2021-05-11T21:53:58Z" },
        "decripcion": "\nLet's start from the beginning and explore this question.\nSo let's suppose you have two lists:\nlist_1 = ['01', '98']\nlist_2 = [['01', '98']]\n\nAnd we have to copy both lists, now starting from the first list:\nSo first let's try by setting the variable copy to our original list, list_1:\ncopy = list_1\n\nNow if you are thinking copy copied the list_1, then you are wrong. The id function can show us if two variables can point to the same object. Let's try this:\nprint(id(copy))\nprint(id(list_1))\n\nThe output is:\n4329485320\n4329485320\n\nBoth variables are the exact same argument. Are you surprised?\nSo as we know, Python doesn't store anything in a variable, Variables are just referencing to the object and object store the value. Here object is a list but we created two references to that same object by two different variable names. This means that both variables are pointing to the same object, just with different names.\nWhen you do copy = list_1, it is actually doing:\n\nHere in the image list_1 and copy are two variable names, but the object is same for both variable which is list.\nSo if you try to modify copied list then it will modify the original list too because the list is only one there, you will modify that list no matter you do from the copied list or from the original list:\ncopy[0] = \"modify\"\n\nprint(copy)\nprint(list_1)\n\nOutput:\n['modify', '98']\n['modify', '98']\n\nSo it modified the original list:\nNow let's move onto a Pythonic method for copying lists.\ncopy_1 = list_1[:]\n\nThis method fixes the first issue we had:\nprint(id(copy_1))\nprint(id(list_1))\n\n4338792136\n4338791432\n\nSo as we can see our both list having different id and it means that both variables are pointing to different objects. So what actually going on here is:\n\nNow let's try to modify the list and let's see if we still face the previous problem:\ncopy_1[0] = \"modify\"\n\nprint(list_1)\nprint(copy_1)\n\nThe output is:\n['01', '98']\n['modify', '98']\n\nAs you can see, it only modified the copied list. That means it worked.\nDo you think we're done? No. Let's try to copy our nested list.\ncopy_2 = list_2[:]\n\nlist_2 should reference to another object which is copy of list_2. Let's check:\nprint(id((list_2)), id(copy_2))\n\nWe get the output:\n4330403592 4330403528\n\nNow we can assume both lists are pointing different object, so now let's try to modify it and let's see it is giving what we want:\ncopy_2[0][1] = \"modify\"\n\nprint(list_2, copy_2)\n\nThis gives us the output:\n[['01', 'modify']] [['01', 'modify']]\n\nThis may seem a little bit confusing, because the same method we previously used worked. Let's try to understand this.\nWhen you do:\ncopy_2 = list_2[:]\n\nYou're only copying the outer list, not the inside list. We can use the id function once again to check this.\nprint(id(copy_2[0]))\nprint(id(list_2[0]))\n\nThe output is:\n4329485832\n4329485832\n\nWhen we do copy_2 = list_2[:], this happens:\n\nIt creates the copy of list, but only outer list copy, not the nested list copy. The nested list is same for both variable, so if you try to modify the nested list then it will modify the original list too as the nested list object is same for both lists.\nWhat is the solution? The solution is the deepcopy function.\nfrom copy import deepcopy\ndeep = deepcopy(list_2)\n\nLet's check this:\nprint(id((list_2)), id(deep))\n\n4322146056 4322148040\n\nBoth outer lists have different IDs. Let's try this on the inner nested lists.\nprint(id(deep[0]))\nprint(id(list_2[0]))\n\nThe output is:\n4322145992\n4322145800\n\nAs you can see both IDs are different, meaning we can assume that both nested lists are pointing different object now.\nThis means when you do deep = deepcopy(list_2) what actually happens:\n\nBoth nested lists are pointing different object and they have separate copy of nested list now.\nNow let's try to modify the nested list and see if it solved the previous issue or not:\ndeep[0][1] = \"modify\"\nprint(list_2, deep)\n\nIt outputs:\n[['01', '98']] [['01', 'modify']]\n\nAs you can see, it didn't modify the original nested list, it only modified the copied list.\n    ",
        "votes": 55,
        "comentarios": [],
        "usuario": "Aaditya Ura",
        "usuario_id": 242
    },
    {
        "_id": 153,
        "fecha": { "$date" : "2010-04-10T08:53:06Z" },
        "decripcion": "\nUse thing[:]\n\n>>> a = [1,2]\n>>> b = a[:]\n>>> a += [3]\n>>> a\n[1, 2, 3]\n>>> b\n[1, 2]\n>>> \n\n    ",
        "votes": 40,
        "comentarios": [],
        "usuario": "Paul Tarjan",
        "usuario_id": 243
    },
    {
        "_id": 154,
        "fecha": { "$date" : "2021-05-11T21:40:12Z" },
        "decripcion": "\nPython 3.6 Timings\nHere are the timing results using Python 3.6.8. Keep in mind these times are relative to one another, not absolute.\nI stuck to only doing shallow copies, and also added some new methods that weren't possible in Python\u00a02, such as list.copy() (the Python\u00a03 slice equivalent) and two forms of list unpacking (*new_list, = list and new_list = [*list]):\nMETHOD                TIME TAKEN\nb = [*a]               2.75180600000021\nb = a * 1              3.50215399999990\nb = a[:]               3.78278899999986  # Python 2 winner (see above)\nb = a.copy()           4.20556500000020  # Python 3 \"slice equivalent\" (see above)\nb = []; b.extend(a)    4.68069800000012\nb = a[0:len(a)]        6.84498999999959\n*b, = a                7.54031799999984\nb = list(a)            7.75815899999997\nb = [i for i in a]    18.4886440000000\nb = copy.copy(a)      18.8254879999999\nb = []\nfor item in a:\n  b.append(item)      35.4729199999997\n\nWe can see the Python 2 winner still does well, but doesn't edge out Python 3 list.copy() by much, especially considering the superior readability of the latter.\nThe dark horse is the unpacking and repacking method (b = [*a]), which is ~25% faster than raw slicing, and more than twice as fast as the other unpacking method (*b, = a).\nb = a * 1 also does surprisingly well.\nNote that these methods do not output equivalent results for any input other than lists. They all work for sliceable objects, a few work for any iterable, but only copy.copy() works for more general Python objects.\n\nHere is the testing code for interested parties (Template from here):\nimport timeit\n\nCOUNT = 50000000\nprint(\"Array duplicating. Tests run\", COUNT, \"times\")\nsetup = 'a = [0,1,2,3,4,5,6,7,8,9]; import copy'\n\nprint(\"b = list(a)\\t\\t\", timeit.timeit(stmt='b = list(a)', setup=setup, number=COUNT))\nprint(\"b = copy.copy(a)\\t\", timeit.timeit(stmt='b = copy.copy(a)', setup=setup, number=COUNT))\nprint(\"b = a.copy()\\t\\t\", timeit.timeit(stmt='b = a.copy()', setup=setup, number=COUNT))\nprint(\"b = a[:]\\t\\t\", timeit.timeit(stmt='b = a[:]', setup=setup, number=COUNT))\nprint(\"b = a[0:len(a)]\\t\\t\", timeit.timeit(stmt='b = a[0:len(a)]', setup=setup, number=COUNT))\nprint(\"*b, = a\\t\\t\\t\", timeit.timeit(stmt='*b, = a', setup=setup, number=COUNT))\nprint(\"b = []; b.extend(a)\\t\", timeit.timeit(stmt='b = []; b.extend(a)', setup=setup, number=COUNT))\nprint(\"b = []; for item in a: b.append(item)\\t\", timeit.timeit(stmt='b = []\\nfor item in a:  b.append(item)', setup=setup, number=COUNT))\nprint(\"b = [i for i in a]\\t\", timeit.timeit(stmt='b = [i for i in a]', setup=setup, number=COUNT))\nprint(\"b = [*a]\\t\\t\", timeit.timeit(stmt='b = [*a]', setup=setup, number=COUNT))\nprint(\"b = a * 1\\t\\t\", timeit.timeit(stmt='b = a * 1', setup=setup, number=COUNT))\n\n    ",
        "votes": 37,
        "comentarios": [
            {
                "decripcion": "Can confirm still a similar story on 3.8 b=[*a] - the one obvious way to do it;).",
                "fecha": { "$date" : "2020-03-02T00:02:40Z" },
                "usuario": "SuperShoot",
                "usuario_id": 244
            },
            {
                "decripcion": "Some of these timing comparisons aren't particularly meaningful when copying such tiny lists. It would be more informative to test with a range of list lengths (including some very large ones).",
                "fecha": { "$date" : "2020-11-21T20:15:28Z" },
                "usuario": "ekhumoro",
                "usuario_id": 245
            },
            {
                "decripcion": "The timing numbers ought to rounded to the appropriate number of significant digits. 15 significant digits do not make any sense.",
                "fecha": { "$date" : "2021-05-11T21:43:46Z" },
                "usuario": "Peter Mortensen",
                "usuario_id": 246
            },
            {
                "decripcion": "I've essentially just pasted the raw output of the timing code here. Seems like your gripe is more about how timeit displays timings, which I have little control over.",
                "fecha": { "$date" : "2021-05-18T00:38:32Z" },
                "usuario": "River",
                "usuario_id": 247
            }
        ],
        "usuario": "River",
        "usuario_id": 247
    },
    {
        "_id": 155,
        "fecha": { "$date" : "2010-04-10T08:53:19Z" },
        "decripcion": "\nPython's idiom for doing this is newList = oldList[:]\n    ",
        "votes": 35,
        "comentarios": [],
        "usuario": "erisco",
        "usuario_id": 248
    },
    {
        "_id": 156,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nAll of the other contributors gave great answers, which work when you have a single dimension (leveled) list, however of the methods mentioned so far, only copy.deepcopy() works to clone/copy a list and not have it point to the nested list objects when you are working with multidimensional, nested lists (list of lists). While Felix Kling refers to it in his answer, there is a little bit more to the issue and possibly a workaround using built-ins that might prove a faster alternative to deepcopy.\nWhile new_list = old_list[:], copy.copy(old_list)' and for Py3k old_list.copy() work for single-leveled lists, they revert to pointing at the list objects nested within the old_list and the new_list, and changes to one of the list objects are perpetuated in the other.\nEdit: New information brought to light\n\nAs was pointed out by both Aaron Hall and PM 2Ring using eval() is not only a bad idea, it is also much slower than copy.deepcopy().\nThis means that for multidimensional lists, the only option is copy.deepcopy(). With that being said, it really isn't an option as the performance goes way south when you try to use it on a moderately sized multidimensional array.  I tried to timeit using a 42x42 array, not unheard of or even that large for bioinformatics applications, and I gave up on waiting for a response and just started typing my edit to this post.\nIt would seem that the only real option then is to initialize multiple lists and work on them independently. If anyone has any other suggestions, for how to handle multidimensional list copying, it would be appreciated.\n\nAs others have stated, there  are significant performance issues using the copy module and copy.deepcopy for multidimensional lists.\n    ",
        "votes": 22,
        "comentarios": [
            {
                "decripcion": "This won't always work, since there's no guarantee that the string returned by repr() is sufficient to re-create the object. Also, eval() is a tool of last resort; see Eval really is dangerous by SO veteran Ned Batchelder for details. So when you advocate the use eval() you really should mention that it can be dangerous.",
                "fecha": { "$date" : "2015-07-10T14:51:30Z" },
                "usuario": "PM 2Ring",
                "usuario_id": 64
            },
            {
                "decripcion": "Fair point. Though I think that Batchelder's point is that the having the eval() function in Python in general is a risk. It isn't so much whether or not you make use of the function in code but that it is a security hole in Python in and of itself.  My example isn't using it with a function that receives input from input(), sys.agrv, or even a text file. It is more along the lines of initializing a blank multidimensional list once, and then just having a way of copying it in a loop instead of reinitializing at each iteration of the loop.",
                "fecha": { "$date" : "2015-07-10T16:41:36Z" },
                "usuario": "AMR",
                "usuario_id": 249
            },
            {
                "decripcion": "As @AaronHall has pointed out, there is likely a significant performance issue to using new_list = eval(repr(old_list)), so besides it being a bad idea, it probably is also way too slow to work.",
                "fecha": { "$date" : "2015-07-10T17:19:53Z" },
                "usuario": "AMR",
                "usuario_id": 249
            }
        ],
        "usuario": "AMR",
        "usuario_id": 249
    },
    {
        "_id": 157,
        "fecha": { "$date" : "2018-02-26T02:33:47Z" },
        "decripcion": "\nIt surprises me that this hasn't been mentioned yet, so for the sake of completeness...\n\nYou can perform list unpacking with the \"splat operator\": *, which will also copy elements of your list.\n\nold_list = [1, 2, 3]\n\nnew_list = [*old_list]\n\nnew_list.append(4)\nold_list == [1, 2, 3]\nnew_list == [1, 2, 3, 4]\n\n\nThe obvious downside to this method is that it is only available in Python 3.5+.\n\nTiming wise though, this appears to perform better than other common methods.\n\nx = [random.random() for _ in range(1000)]\n\n%timeit a = list(x)\n%timeit a = x.copy()\n%timeit a = x[:]\n\n%timeit a = [*x]\n\n#: 2.47 \u00b5s \u00b1 38.1 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n#: 2.47 \u00b5s \u00b1 54.6 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n#: 2.39 \u00b5s \u00b1 58.2 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\n#: 2.22 \u00b5s \u00b1 43.2 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\n    ",
        "votes": 16,
        "comentarios": [
            {
                "decripcion": "How does this method behave when modifying copies?",
                "fecha": { "$date" : "2018-09-24T13:35:16Z" },
                "usuario": "not2qubit",
                "usuario_id": 250
            },
            {
                "decripcion": "@not2qubit do you mean appending to or editing elements of the new list. In the example old_list and new_list are two different lists, editing one will not change the other (unless you\u2019re directly mutating the elements themselves (such as list of list), none-of these methods are deep copies).",
                "fecha": { "$date" : "2018-09-25T14:07:07Z" },
                "usuario": "SCB",
                "usuario_id": 251
            }
        ],
        "usuario": "SCB",
        "usuario_id": 251
    },
    {
        "_id": 158,
        "fecha": { "$date" : "2021-05-11T21:48:59Z" },
        "decripcion": "\nA very simple approach independent of python version was missing in already-given answers which you can use most of the time (at least I do):\nnew_list = my_list * 1       # Solution 1 when you are not using nested lists\n\nHowever, if my_list contains other containers (for example, nested lists) you must use deepcopy as others suggested in the answers above from the copy library. For example:\nimport copy\nnew_list = copy.deepcopy(my_list)   # Solution 2 when you are using nested lists\n\n.Bonus: If you don't want to copy elements use (AKA shallow copy):\nnew_list = my_list[:]\n\n\nLet's understand difference between solution #1 and solution #2\n>>> a = range(5)\n>>> b = a*1\n>>> a,b\n([0, 1, 2, 3, 4], [0, 1, 2, 3, 4])\n>>> a[2] = 55\n>>> a,b\n([0, 1, 55, 3, 4], [0, 1, 2, 3, 4])\n\nAs you can see, solution #1 worked perfectly when we were not using the nested lists. Let's check what will happen when we apply solution #1 to nested lists.\n>>> from copy import deepcopy\n>>> a = [range(i,i+4) for i in range(3)]\n>>> a\n[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]\n>>> b = a*1\n>>> c = deepcopy(a)\n>>> for i in (a, b, c): print i\n[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]\n[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]\n[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]\n>>> a[2].append('99')\n>>> for i in (a, b, c): print i\n[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5, 99]]\n[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5, 99]]   # Solution #1 didn't work in nested list\n[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]       # Solution #2 - DeepCopy worked in nested list\n\n    ",
        "votes": 11,
        "comentarios": [],
        "usuario": "jainashish",
        "usuario_id": 252
    },
    {
        "_id": 159,
        "fecha": { "$date" : "2018-05-16T14:31:22Z" },
        "decripcion": "\nNote that there are some cases where if you have defined your own custom class and you want to keep the attributes then you should use copy.copy() or copy.deepcopy() rather than the alternatives, for example in Python 3:\n\nimport copy\n\nclass MyList(list):\n    pass\n\nlst = MyList([1,2,3])\n\nlst.name = 'custom list'\n\nd = {\n'original': lst,\n'slicecopy' : lst[:],\n'lstcopy' : lst.copy(),\n'copycopy': copy.copy(lst),\n'deepcopy': copy.deepcopy(lst)\n}\n\n\nfor k,v in d.items():\n    print('lst: {}'.format(k), end=', ')\n    try:\n        name = v.name\n    except AttributeError:\n        name = 'NA'\n    print('name: {}'.format(name))\n\n\nOutputs:\n\nlst: original, name: custom list\nlst: slicecopy, name: NA\nlst: lstcopy, name: NA\nlst: copycopy, name: custom list\nlst: deepcopy, name: custom list\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Chris_Rands",
        "usuario_id": 253
    },
    {
        "_id": 160,
        "fecha": { "$date" : "2021-05-11T21:45:51Z" },
        "decripcion": "\nnew_list = my_list[:]\n\nnew_list = my_list\nTry to understand this. Let's say that my_list is in the heap memory at location X, i.e., my_list is pointing to the X. Now by assigning new_list = my_list you're letting new_list point to the X. This is known as a shallow copy.\nNow if you assign new_list = my_list[:], you're simply copying each object of my_list to new_list. This is known as a deep copy.\nThe other way you can do this are:\n\nnew_list = list(old_list)\nimport copy new_list = copy.deepcopy(old_list)\n\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Ravi Shankar",
        "usuario_id": 254
    },
    {
        "_id": 161,
        "fecha": { "$date" : "2020-02-22T12:44:40Z" },
        "decripcion": "\nRemember that in Python when you do:\n\n    list1 = ['apples','bananas','pineapples']\n    list2 = list1\n\n\nList2 isn't storing the actual list, but a reference to list1. So when you do anything to list1, list2 changes as well. use the copy module (not default, download on pip) to make an original copy of the list(copy.copy() for simple lists, copy.deepcopy() for nested ones). This makes a copy that doesn't change with the first list.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Dr. Hippo",
        "usuario_id": 255
    },
    {
        "_id": 162,
        "fecha": { "$date" : "2021-08-26T16:10:55Z" },
        "decripcion": "\nI wanted to post something a bit different than some of the other answers. Even though this is most likely not the most understandable, or fastest option, it provides a bit of an inside view of how deep copy works, as well as being another alternative option for deep copying. It doesn't really matter if my function has bugs, since the point of this is to show a way to copy objects like the question answers, but also to use this as a point to explain how deepcopy works at its core.\nAt the core of any deep copy function is way to make a shallow copy. How? Simple. Any deep copy function only duplicates the containers of immutable objects. When you deepcopy a nested list, you are only duplicating the outer lists, not the mutable objects inside of the lists. You are only duplicating the containers. The same works for classes, too. When you deepcopy a class, you deepcopy all of its mutable attributes. So, how? How come you only have to copy the containers, like lists, dicts, tuples, iters, classes, and class instances?\nIt's simple. A mutable object can't really be duplicated. It can never be changed, so it is only a single value. That means you never have to duplicate strings, numbers, bools, or any of those. But how would you duplicate the containers? Simple. You make just initialize a new container with all of the values. Deepcopy relies on recursion. It duplicates all the containers, even ones with containers inside of them, until no containers are left. A container is an immutable object.\nOnce you know that, completely duplicating an object without any references is pretty easy. Here's a function for deepcopying basic data-types (wouldn't work for custom classes but you could always add that)\ndef deepcopy(x):\n  immutables = (str, int, bool, float)\n  mutables = (list, dict, tuple)\n  if isinstance(x, immutables):\n    return x\n  elif isinstance(x, mutables):\n    if isinstance(x, tuple):\n      return tuple(deepcopy(list(x)))\n    elif isinstance(x, list):\n      return [deepcopy(y) for y in x]\n    elif isinstance(x, dict):\n      values = [deepcopy(y) for y in list(x.values())]\n      keys = list(x.keys())\n      return dict(zip(keys, values))\n\nPython's own built-in deepcopy is based around that example. The only difference is it supports other types, and also supports user-classes by duplicating the attributes into a new duplicate class, and also blocks infinite-recursion with a reference to an object it's already seen using a memo list or dictionary. And that's really it for making deep copies. At its core, making a deep copy is just making shallow copies. I hope this answer adds something to the question.\nEXAMPLES\nSay you have this list: [1, 2, 3]. The immutable numbers cannot be duplicated, but the other layer can. You can duplicate it using a list comprehension: [x for x in [1, 2, 3]]\nNow, imagine you have this list: [[1, 2], [3, 4], [5, 6]]. This time, you want to make a function, which uses recursion to deep copy all layers of the list. Instead of the previous list comprehension:\n[x for x in _list]\n\nIt uses a new one for lists:\n[deepcopy_list(x) for x in _list]\n\nAnd deepcopy_list looks like this:\ndef deepcopy_list(x):\n  if isinstance(x, (str, bool, float, int)):\n    return x\n  else:\n    return [deepcopy_list(y) for y in x]\n\nThen now you have a function which can deepcopy any list of strs, bools, floast, ints and even lists to infinitely many layers using recursion. And there you have it, deepcopying.\nTLDR: Deepcopy uses recursion to duplicate objects, and merely returns the same immutable objects as before, as immutable objects cannot be duplicated. However, it deepcopies the most inner layers of mutable objects until it reaches the outermost mutable layer of an object.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Corman",
        "usuario_id": 256
    },
    {
        "_id": 163,
        "fecha": { "$date" : "2019-11-23T19:01:46Z" },
        "decripcion": "\nA slight practical perspective to look into memory through id and gc. \n\n>>> b = a = ['hell', 'word']\n>>> c = ['hell', 'word']\n\n>>> id(a), id(b), id(c)\n(4424020872, 4424020872, 4423979272) \n     |           |\n      -----------\n\n>>> id(a[0]), id(b[0]), id(c[0])\n(4424018328, 4424018328, 4424018328) # all referring to same 'hell'\n     |           |           |\n      -----------------------\n\n>>> id(a[0][0]), id(b[0][0]), id(c[0][0])\n(4422785208, 4422785208, 4422785208) # all referring to same 'h'\n     |           |           |\n      -----------------------\n\n>>> a[0] += 'o'\n>>> a,b,c\n(['hello', 'word'], ['hello', 'word'], ['hell', 'word'])  # b changed too\n>>> id(a[0]), id(b[0]), id(c[0])\n(4424018384, 4424018384, 4424018328) # augmented assignment changed a[0],b[0]\n     |           |\n      -----------\n\n>>> b = a = ['hell', 'word']\n>>> id(a[0]), id(b[0]), id(c[0])\n(4424018328, 4424018328, 4424018328) # the same hell\n     |           |           |\n      -----------------------\n\n>>> import gc\n>>> gc.get_referrers(a[0]) \n[['hell', 'word'], ['hell', 'word']]  # one copy belong to a,b, the another for c\n>>> gc.get_referrers(('hell'))\n[['hell', 'word'], ['hell', 'word'], ('hell', None)] # ('hello', None) \n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "B.Mr.W.",
        "usuario_id": 257
    },
    {
        "_id": 164,
        "fecha": { "$date" : "2020-04-11T11:19:40Z" },
        "decripcion": "\nThe deepcopy option is the only method that works for me:\n\nfrom copy import deepcopy\n\na = [   [ list(range(1, 3)) for i in range(3) ]   ]\nb = deepcopy(a)\nb[0][1]=[3]\nprint('Deep:')\nprint(a)\nprint(b)\nprint('-----------------------------')\na = [   [ list(range(1, 3)) for i in range(3) ]   ]\nb = a*1\nb[0][1]=[3]\nprint('*1:')\nprint(a)\nprint(b)\nprint('-----------------------------')\na = [   [ list(range(1, 3)) for i in range(3) ] ]\nb = a[:]\nb[0][1]=[3]\nprint('Vector copy:')\nprint(a)\nprint(b)\nprint('-----------------------------')\na = [   [ list(range(1, 3)) for i in range(3) ]  ]\nb = list(a)\nb[0][1]=[3]\nprint('List copy:')\nprint(a)\nprint(b)\nprint('-----------------------------')\na = [   [ list(range(1, 3)) for i in range(3) ]  ]\nb = a.copy()\nb[0][1]=[3]\nprint('.copy():')\nprint(a)\nprint(b)\nprint('-----------------------------')\na = [   [ list(range(1, 3)) for i in range(3) ]  ]\nb = a\nb[0][1]=[3]\nprint('Shallow:')\nprint(a)\nprint(b)\nprint('-----------------------------')\n\n\nleads to output of:\n\nDeep:\n[[[1, 2], [1, 2], [1, 2]]]\n[[[1, 2], [3], [1, 2]]]\n-----------------------------\n*1:\n[[[1, 2], [3], [1, 2]]]\n[[[1, 2], [3], [1, 2]]]\n-----------------------------\nVector copy:\n[[[1, 2], [3], [1, 2]]]\n[[[1, 2], [3], [1, 2]]]\n-----------------------------\nList copy:\n[[[1, 2], [3], [1, 2]]]\n[[[1, 2], [3], [1, 2]]]\n-----------------------------\n.copy():\n[[[1, 2], [3], [1, 2]]]\n[[[1, 2], [3], [1, 2]]]\n-----------------------------\nShallow:\n[[[1, 2], [3], [1, 2]]]\n[[[1, 2], [3], [1, 2]]]\n-----------------------------\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "deepcopy must be used only when needed and one should be aware of what it really does.",
                "fecha": { "$date" : "2020-11-19T13:43:05Z" },
                "usuario": "Jean-Fran\u00e7ois Fabre\u2666",
                "usuario_id": 258
            }
        ],
        "usuario": "shahar_m",
        "usuario_id": 259
    },
    {
        "_id": 165,
        "fecha": { "$date" : "2020-06-04T10:40:28Z" },
        "decripcion": "\nThis is because, the line new_list = my_list assigns a new reference to the variable my_list which is new_list\nThis is similar to the C code given below,\n\nint my_list[] = [1,2,3,4];\nint *new_list;\nnew_list = my_list;\n\n\nYou should use the copy module to create a new list by\n\nimport copy\nnew_list = copy.deepcopy(my_list)\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Roshin Raphel",
        "usuario_id": 260
    },
    {
        "_id": 166,
        "fecha": { "$date" : "2021-01-30T20:17:42Z" },
        "decripcion": "\nThe method to use depends on the contents of the list being copied. If the list contains nested dicts than deepcopy is the only method that works, otherwise most of the methods listed in the answers (slice, loop [for], copy, extend, combine, or unpack) will work and execute in similar time (except for loop and deepcopy, which preformed the worst).\nScript\nfrom random import randint\nfrom time import time\nimport copy\n\nitem_count = 100000\n\ndef copy_type(l1: list, l2: list):\n  if l1 == l2:\n    return 'shallow'\n  return 'deep'\n\ndef run_time(start, end):\n  run = end - start\n  return int(run * 1000000)\n\ndef list_combine(data):\n  l1 = [data for i in range(item_count)]\n  start = time()\n  l2 = [] + l1\n  end = time()\n  if type(data) == dict:\n    l2[0]['test'].append(1)\n  elif type(data) == list:\n    l2.append(1)\n  return {'method': 'combine', 'copy_type': copy_type(l1, l2), \n          'time_\u00b5s': run_time(start, end)}\n\ndef list_extend(data):\n  l1 = [data for i in range(item_count)]\n  start = time()\n  l2 = []\n  l2.extend(l1)\n  end = time()\n  if type(data) == dict:\n    l2[0]['test'].append(1)\n  elif type(data) == list:\n    l2.append(1)\n  return {'method': 'extend', 'copy_type': copy_type(l1, l2), \n          'time_\u00b5s': run_time(start, end)}\n\ndef list_unpack(data):\n  l1 = [data for i in range(item_count)]\n  start = time()\n  l2 = [*l1]\n  end = time()\n  if type(data) == dict:\n    l2[0]['test'].append(1)\n  elif type(data) == list:\n    l2.append(1)\n  return {'method': 'unpack', 'copy_type': copy_type(l1, l2), \n          'time_\u00b5s': run_time(start, end)}\n\ndef list_deepcopy(data):\n  l1 = [data for i in range(item_count)]\n  start = time()\n  l2 = copy.deepcopy(l1)\n  end = time()\n  if type(data) == dict:\n    l2[0]['test'].append(1)\n  elif type(data) == list:\n    l2.append(1)\n  return {'method': 'deepcopy', 'copy_type': copy_type(l1, l2), \n          'time_\u00b5s': run_time(start, end)}\n\ndef list_copy(data):\n  l1 = [data for i in range(item_count)]\n  start = time()\n  l2 = list.copy(l1)\n  end = time()\n  if type(data) == dict:\n    l2[0]['test'].append(1)\n  elif type(data) == list:\n    l2.append(1)\n  return {'method': 'copy', 'copy_type': copy_type(l1, l2), \n          'time_\u00b5s': run_time(start, end)}\n\ndef list_slice(data):\n  l1 = [data for i in range(item_count)]\n  start = time()\n  l2 = l1[:]\n  end = time()\n  if type(data) == dict:\n    l2[0]['test'].append(1)\n  elif type(data) == list:\n    l2.append(1)\n  return {'method': 'slice', 'copy_type': copy_type(l1, l2), \n          'time_\u00b5s': run_time(start, end)}\n\ndef list_loop(data):\n  l1 = [data for i in range(item_count)]\n  start = time()\n  l2 = []\n  for i in range(len(l1)):\n    l2.append(l1[i])\n  end = time()\n  if type(data) == dict:\n    l2[0]['test'].append(1)\n  elif type(data) == list:\n    l2.append(1)\n  return {'method': 'loop', 'copy_type': copy_type(l1, l2), \n          'time_\u00b5s': run_time(start, end)}\n\ndef list_list(data):\n  l1 = [data for i in range(item_count)]\n  start = time()\n  l2 = list(l1)\n  end = time()\n  if type(data) == dict:\n    l2[0]['test'].append(1)\n  elif type(data) == list:\n    l2.append(1)\n  return {'method': 'list()', 'copy_type': copy_type(l1, l2), \n          'time_\u00b5s': run_time(start, end)}\n\nif __name__ == '__main__':\n  list_type = [{'list[dict]': {'test': [1, 1]}}, \n          {'list[list]': [1, 1]}]\n  store = []\n  for data in list_type:\n    key = list(data.keys())[0]\n    store.append({key: [list_unpack(data[key]), list_extend(data[key]), \n                list_combine(data[key]), list_deepcopy(data[key]), \n                list_copy(data[key]), list_slice(data[key]),           \n                list_loop(data[key])]})\n  print(store)\n\nResults\n[{\"list[dict]\": [\n  {\"method\": \"unpack\", \"copy_type\": \"shallow\", \"time_\u00b5s\": 56149},\n  {\"method\": \"extend\", \"copy_type\": \"shallow\", \"time_\u00b5s\": 52991},\n  {\"method\": \"combine\", \"copy_type\": \"shallow\", \"time_\u00b5s\": 53726},\n  {\"method\": \"deepcopy\", \"copy_type\": \"deep\", \"time_\u00b5s\": 2702616},\n  {\"method\": \"copy\", \"copy_type\": \"shallow\", \"time_\u00b5s\": 52204},\n  {\"method\": \"slice\", \"copy_type\": \"shallow\", \"time_\u00b5s\": 52223},\n  {\"method\": \"loop\", \"copy_type\": \"shallow\", \"time_\u00b5s\": 836928}]},\n{\"list[list]\": [\n  {\"method\": \"unpack\", \"copy_type\": \"deep\", \"time_\u00b5s\": 52313},\n  {\"method\": \"extend\", \"copy_type\": \"deep\", \"time_\u00b5s\": 52550},\n  {\"method\": \"combine\", \"copy_type\": \"deep\", \"time_\u00b5s\": 53203},\n  {\"method\": \"deepcopy\", \"copy_type\": \"deep\", \"time_\u00b5s\": 2608560},\n  {\"method\": \"copy\", \"copy_type\": \"deep\", \"time_\u00b5s\": 53210},\n  {\"method\": \"slice\", \"copy_type\": \"deep\", \"time_\u00b5s\": 52937},\n  {\"method\": \"loop\", \"copy_type\": \"deep\", \"time_\u00b5s\": 834774}\n]}]\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "fjemi",
        "usuario_id": 261
    },
    {
        "_id": 167,
        "fecha": { "$date" : "2020-07-03T03:38:24Z" },
        "decripcion": "\nThere is a simple technique to handle this.\nCode:\nnumber=[1,2,3,4,5,6] #Original list\nanother=[] #another empty list\nfor a in number: #here I am declaring variable (a) as an item in the list (number)\n    another.append(a) #here we are adding the items of list (number) to list (another)\nprint(another)\n\nOutput:\n>>> [1,2,3,4,5,6]\n\nI hope this was useful for your query.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Code Carbonate",
        "usuario_id": 262
    },
    {
        "_id": 168,
        "fecha": { "$date" : "2021-05-11T22:02:57Z" },
        "decripcion": "\nThere is another way of copying a list that was not listed until now: adding an empty list: l2 = l + [].\nI tested it with Python 3.8:\nl = [1,2,3]\nl2 = l + []\nprint(l,l2)\nl[0] = 'a'\nprint(l,l2)\n\nIt is not the best answer, but it works.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Laurent Lyaudet",
        "usuario_id": 263
    },
    {
        "_id": 169,
        "fecha": { "$date" : "2021-08-07T11:42:55Z" },
        "decripcion": "\nWe start by answering the first question:\nQuestion 1\n\nWhy do I get ValueError: Index contains duplicate entries, cannot reshape\n\nThis occurs because pandas is attempting to reindex either a columns or index object with duplicate entries.  There are varying methods to use that can perform a pivot.  Some of them are not well suited to when there are duplicates of the keys in which it is being asked to pivot on.  For example.  Consider pd.DataFrame.pivot.  I know there are duplicate entries that share the row and col values:\ndf.duplicated(['row', 'col']).any()\n\nTrue\n\nSo when I pivot using\ndf.pivot(index='row', columns='col', values='val0')\n\nI get the error mentioned above.  In fact, I get the same error when I try to perform the same task with:\ndf.set_index(['row', 'col'])['val0'].unstack()\n\nHere is a list of idioms we can use to pivot\n\npd.DataFrame.groupby + pd.DataFrame.unstack\n\nGood general approach for doing just about any type of pivot\nYou specify all columns that will constitute the pivoted row levels and column levels in one group by.  You follow that by selecting the remaining columns you want to aggregate and the function(s) you want to perform the aggregation.  Finally, you unstack the levels that you want to be in the column index.\n\n\npd.DataFrame.pivot_table\n\nA glorified version of groupby with more intuitive API.  For many people, this is the preferred approach.  And is the intended approach by the developers.\nSpecify row level, column levels, values to be aggregated, and function(s) to perform aggregations.\n\n\npd.DataFrame.set_index + pd.DataFrame.unstack\n\nConvenient and intuitive for some (myself included).  Cannot handle duplicate grouped keys.\nSimilar to the groupby paradigm, we specify all columns that will eventually be either row or column levels and set those to be the index.  We then unstack the levels we want in the columns.  If either the remaining index levels or column levels are not unique, this method will fail.\n\n\npd.DataFrame.pivot\n\nVery similar to set_index in that it shares the duplicate key limitation.  The API is very limited as well.  It only takes scalar values for index, columns, values.\nSimilar to the pivot_table method in that we select rows, columns, and values on which to pivot.  However, we cannot aggregate and if either rows or columns are not unique, this method will fail.\n\n\npd.crosstab\n\nThis a specialized version of pivot_table and in its purest form is the most intuitive way to perform several tasks.\n\n\npd.factorize + np.bincount\n\nThis is a highly advanced technique that is very obscure but is very fast.  It cannot be used in all circumstances, but when it can be used and you are comfortable using it, you will reap the performance rewards.\n\n\npd.get_dummies + pd.DataFrame.dot\n\nI use this for cleverly performing cross tabulation.\n\n\n\n\nExamples\nWhat I'm going to do for each subsequent answer and question is to answer it using pd.DataFrame.pivot_table.  Then I'll provide alternatives to perform the same task.\nQuestion 3\n\nHow do I pivot df such that the col values are columns, row values are the index, mean of val0 are the values, and missing values are 0?\n\n\npd.DataFrame.pivot_table\n\nfill_value is not set by default.  I tend to set it appropriately.  In this case I set it to 0.  Notice I skipped question 2 as it's the same as this answer without the fill_value\n\naggfunc='mean' is the default and I didn't have to set it.  I included it to be explicit.\n    df.pivot_table(\n        values='val0', index='row', columns='col',\n        fill_value=0, aggfunc='mean')\n\n    col   col0   col1   col2   col3  col4\n    row\n    row0  0.77  0.605  0.000  0.860  0.65\n    row2  0.13  0.000  0.395  0.500  0.25\n    row3  0.00  0.310  0.000  0.545  0.00\n    row4  0.00  0.100  0.395  0.760  0.24\n\n\n\n\npd.DataFrame.groupby\n  df.groupby(['row', 'col'])['val0'].mean().unstack(fill_value=0)\n\n\npd.crosstab\n  pd.crosstab(\n      index=df['row'], columns=df['col'],\n      values=df['val0'], aggfunc='mean').fillna(0)\n\n\n\n\nQuestion 4\n\nCan I get something other than mean, like maybe sum?\n\n\npd.DataFrame.pivot_table\n  df.pivot_table(\n      values='val0', index='row', columns='col',\n      fill_value=0, aggfunc='sum')\n\n  col   col0  col1  col2  col3  col4\n  row\n  row0  0.77  1.21  0.00  0.86  0.65\n  row2  0.13  0.00  0.79  0.50  0.50\n  row3  0.00  0.31  0.00  1.09  0.00\n  row4  0.00  0.10  0.79  1.52  0.24\n\n\npd.DataFrame.groupby\n  df.groupby(['row', 'col'])['val0'].sum().unstack(fill_value=0)\n\n\npd.crosstab\n  pd.crosstab(\n      index=df['row'], columns=df['col'],\n      values=df['val0'], aggfunc='sum').fillna(0)\n\n\n\n\nQuestion 5\n\nCan I do more that one aggregation at a time?\n\nNotice that for pivot_table and crosstab I needed to pass list of callables.  On the other hand, groupby.agg is able to take strings for a limited number of special functions.  groupby.agg would also have taken the same callables we passed to the others, but it is often more efficient to leverage the string function names as there are efficiencies to be gained.\n\npd.DataFrame.pivot_table\n  df.pivot_table(\n      values='val0', index='row', columns='col',\n      fill_value=0, aggfunc=[np.size, np.mean])\n\n       size                      mean\n  col  col0 col1 col2 col3 col4  col0   col1   col2   col3  col4\n  row\n  row0    1    2    0    1    1  0.77  0.605  0.000  0.860  0.65\n  row2    1    0    2    1    2  0.13  0.000  0.395  0.500  0.25\n  row3    0    1    0    2    0  0.00  0.310  0.000  0.545  0.00\n  row4    0    1    2    2    1  0.00  0.100  0.395  0.760  0.24\n\n\npd.DataFrame.groupby\n  df.groupby(['row', 'col'])['val0'].agg(['size', 'mean']).unstack(fill_value=0)\n\n\npd.crosstab\n  pd.crosstab(\n      index=df['row'], columns=df['col'],\n      values=df['val0'], aggfunc=[np.size, np.mean]).fillna(0, downcast='infer')\n\n\n\n\nQuestion 6\n\nCan I aggregate over multiple value columns?\n\n\npd.DataFrame.pivot_table we pass values=['val0', 'val1'] but we could've left that off completely\n  df.pivot_table(\n      values=['val0', 'val1'], index='row', columns='col',\n      fill_value=0, aggfunc='mean')\n\n        val0                             val1\n  col   col0   col1   col2   col3  col4  col0   col1  col2   col3  col4\n  row\n  row0  0.77  0.605  0.000  0.860  0.65  0.01  0.745  0.00  0.010  0.02\n  row2  0.13  0.000  0.395  0.500  0.25  0.45  0.000  0.34  0.440  0.79\n  row3  0.00  0.310  0.000  0.545  0.00  0.00  0.230  0.00  0.075  0.00\n  row4  0.00  0.100  0.395  0.760  0.24  0.00  0.070  0.42  0.300  0.46\n\n\npd.DataFrame.groupby\n  df.groupby(['row', 'col'])['val0', 'val1'].mean().unstack(fill_value=0)\n\n\n\n\nQuestion 7\n\nCan Subdivide by multiple columns?\n\n\npd.DataFrame.pivot_table\n  df.pivot_table(\n      values='val0', index='row', columns=['item', 'col'],\n      fill_value=0, aggfunc='mean')\n\n  item item0             item1                         item2\n  col   col2  col3  col4  col0  col1  col2  col3  col4  col0   col1  col3  col4\n  row\n  row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.605  0.86  0.65\n  row2  0.35  0.00  0.37  0.00  0.00  0.44  0.00  0.00  0.13  0.000  0.50  0.13\n  row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.000  0.28  0.00\n  row4  0.15  0.64  0.00  0.00  0.10  0.64  0.88  0.24  0.00  0.000  0.00  0.00\n\n\npd.DataFrame.groupby\n  df.groupby(\n      ['row', 'item', 'col']\n  )['val0'].mean().unstack(['item', 'col']).fillna(0).sort_index(1)\n\n\n\n\nQuestion 8\n\nCan Subdivide by multiple columns?\n\n\npd.DataFrame.pivot_table\n  df.pivot_table(\n      values='val0', index=['key', 'row'], columns=['item', 'col'],\n      fill_value=0, aggfunc='mean')\n\n  item      item0             item1                         item2\n  col        col2  col3  col4  col0  col1  col2  col3  col4  col0  col1  col3  col4\n  key  row\n  key0 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.86  0.00\n       row2  0.00  0.00  0.37  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.50  0.00\n       row3  0.00  0.00  0.00  0.00  0.31  0.00  0.81  0.00  0.00  0.00  0.00  0.00\n       row4  0.15  0.64  0.00  0.00  0.00  0.00  0.00  0.24  0.00  0.00  0.00  0.00\n  key1 row0  0.00  0.00  0.00  0.77  0.00  0.00  0.00  0.00  0.00  0.81  0.00  0.65\n       row2  0.35  0.00  0.00  0.00  0.00  0.44  0.00  0.00  0.00  0.00  0.00  0.13\n       row3  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.28  0.00\n       row4  0.00  0.00  0.00  0.00  0.10  0.00  0.00  0.00  0.00  0.00  0.00  0.00\n  key2 row0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.40  0.00  0.00\n       row2  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.13  0.00  0.00  0.00\n       row4  0.00  0.00  0.00  0.00  0.00  0.64  0.88  0.00  0.00  0.00  0.00  0.00\n\n\npd.DataFrame.groupby\n  df.groupby(\n      ['key', 'row', 'item', 'col']\n  )['val0'].mean().unstack(['item', 'col']).fillna(0).sort_index(1)\n\n\npd.DataFrame.set_index because the set of keys are unique for both rows and columns\n  df.set_index(\n      ['key', 'row', 'item', 'col']\n  )['val0'].unstack(['item', 'col']).fillna(0).sort_index(1)\n\n\n\n\nQuestion 9\n\nCan I aggregate the frequency in which the column and rows occur together, aka \"cross tabulation\"?\n\n\npd.DataFrame.pivot_table\n  df.pivot_table(index='row', columns='col', fill_value=0, aggfunc='size')\n\n      col   col0  col1  col2  col3  col4\n  row\n  row0     1     2     0     1     1\n  row2     1     0     2     1     2\n  row3     0     1     0     2     0\n  row4     0     1     2     2     1\n\n\npd.DataFrame.groupby\n  df.groupby(['row', 'col'])['val0'].size().unstack(fill_value=0)\n\n\npd.crosstab\n  pd.crosstab(df['row'], df['col'])\n\n\npd.factorize + np.bincount\n  # get integer factorization `i` and unique values `r`\n  # for column `'row'`\n  i, r = pd.factorize(df['row'].values)\n  # get integer factorization `j` and unique values `c`\n  # for column `'col'`\n  j, c = pd.factorize(df['col'].values)\n  # `n` will be the number of rows\n  # `m` will be the number of columns\n  n, m = r.size, c.size\n  # `i * m + j` is a clever way of counting the\n  # factorization bins assuming a flat array of length\n  # `n * m`.  Which is why we subsequently reshape as `(n, m)`\n  b = np.bincount(i * m + j, minlength=n * m).reshape(n, m)\n  # BTW, whenever I read this, I think 'Bean, Rice, and Cheese'\n  pd.DataFrame(b, r, c)\n\n        col3  col2  col0  col1  col4\n  row3     2     0     0     1     0\n  row2     1     2     1     0     2\n  row0     1     0     1     2     1\n  row4     2     2     0     1     1\n\n\npd.get_dummies\n  pd.get_dummies(df['row']).T.dot(pd.get_dummies(df['col']))\n\n        col0  col1  col2  col3  col4\n  row0     1     2     0     1     1\n  row2     1     0     2     1     2\n  row3     0     1     0     2     0\n  row4     0     1     2     2     1\n\n\n\n\nQuestion 10\n\nHow do I convert a DataFrame from long to wide by pivoting on ONLY two\ncolumns?\n\n\nDataFrame.pivot\nThe first step is to assign a number to each row - this number will be the row index of that value in the pivoted result. This is done using GroupBy.cumcount:\n  df2.insert(0, 'count', df2.groupby('A').cumcount())\n  df2\n\n     count  A   B\n  0      0  a   0\n  1      1  a  11\n  2      2  a   2\n  3      3  a  11\n  4      0  b  10\n  5      1  b  10\n  6      2  b  14\n  7      0  c   7\n\nThe second step is to use the newly created column as the index to call DataFrame.pivot.\n  df2.pivot(*df2)\n  # df2.pivot(index='count', columns='A', values='B')\n\n  A         a     b    c\n  count\n  0       0.0  10.0  7.0\n  1      11.0  10.0  NaN\n  2       2.0  14.0  NaN\n  3      11.0   NaN  NaN\n\n\nDataFrame.pivot_table\nWhereas DataFrame.pivot only accepts columns, DataFrame.pivot_table also accepts arrays, so the GroupBy.cumcount can be passed directly as the index without creating an explicit column.\n  df2.pivot_table(index=df2.groupby('A').cumcount(), columns='A', values='B')\n\n  A         a     b    c\n  0       0.0  10.0  7.0\n  1      11.0  10.0  NaN\n  2       2.0  14.0  NaN\n  3      11.0   NaN  NaN\n\n\n\n\nQuestion 11\n\nHow do I flatten the multiple index to single index after pivot\n\nIf columns type object with string join\ndf.columns = df.columns.map('|'.join)\n\nelse format\ndf.columns = df.columns.map('{0[0]}|{0[1]}'.format)\n\n    ",
        "votes": 373,
        "comentarios": [
            {
                "decripcion": "Could you please consider extending official docs?",
                "fecha": { "$date" : "2017-12-15T10:31:13Z" },
                "usuario": "MaxU",
                "usuario_id": 265
            },
            {
                "decripcion": "what happened with the answer to Question #10? I get KeyError: 'A'. Is there more to the answer?",
                "fecha": { "$date" : "2019-09-27T18:06:51Z" },
                "usuario": "Monica Heddneck",
                "usuario_id": 266
            },
            {
                "decripcion": "@MonicaHeddneck I'll review it again and update if necessary.  However, 'A' is assuming there is a column 'A' in your dataframe to group by.",
                "fecha": { "$date" : "2019-09-27T20:19:45Z" },
                "usuario": "piRSquared",
                "usuario_id": 8
            },
            {
                "decripcion": "it is not necessary to insert the column in question 10, it can be passed directly as an argument in the pivot table",
                "fecha": { "$date" : "2020-04-01T18:03:56Z" },
                "usuario": "ansev",
                "usuario_id": 267
            },
            {
                "decripcion": "@MonicaHeddneck I believe the references to df should be changed to df2. If you were following along like I was df is the earlier dataframe created.",
                "fecha": { "$date" : "2020-04-14T06:16:50Z" },
                "usuario": "CopOnTheRun",
                "usuario_id": 268
            }
        ],
        "usuario": "piRSquared",
        "usuario_id": 8
    },
    {
        "_id": 170,
        "fecha": { "$date" : "2020-06-05T20:59:49Z" },
        "decripcion": "\nTo extend @piRSquared's answer another version of Question 10\n\nQuestion 10.1\n\nDataFrame:\n\nd = data = {'A': {0: 1, 1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 5},\n 'B': {0: 'a', 1: 'b', 2: 'c', 3: 'a', 4: 'b', 5: 'a', 6: 'c'}}\ndf = pd.DataFrame(d)\n\n   A  B\n0  1  a\n1  1  b\n2  1  c\n3  2  a\n4  2  b\n5  3  a\n6  5  c\n\n\nOutput:\n\n   0     1     2\nA\n1  a     b     c\n2  a     b  None\n3  a  None  None\n5  c  None  None\n\n\n\n\nUsing df.groupby and pd.Series.tolist\n\nt = df.groupby('A')['B'].apply(list)\nout = pd.DataFrame(t.tolist(),index=t.index)\nout\n   0     1     2\nA\n1  a     b     c\n2  a     b  None\n3  a  None  None\n5  c  None  None\n\n\nOr \nA much better alternative using pd.pivot_table with df.squeeze.\n\nt = df.pivot_table(index='A',values='B',aggfunc=list).squeeze()\nout = pd.DataFrame(t.tolist(),index=t.index)\n\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "Ch3steR",
        "usuario_id": 269
    },
    {
        "_id": 171,
        "fecha": { "$date" : "2021-02-17T07:42:14Z" },
        "decripcion": "\nTo better understand how pivot works you can look at the example from Pandas documentation:\n\ndf = pd.DataFrame({\n    'foo': ['one', 'one', 'one', 'two', 'two', 'two'],\n    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n    'baz': [1, 2, 3, 4, 5, 6],\n    'zoo': ['x', 'y', 'z', 'q', 'w', 't']\n})\n\nInput Table:\n   foo bar  baz zoo\n0  one   A    1   x\n1  one   B    2   y\n2  one   C    3   z\n3  two   A    4   q\n4  two   B    5   w\n5  two   C    6   t\n\nPivot:\npd.pivot(\n    data=df,        \n    index='foo',    # Column to use to make new frame\u2019s index. If None, uses existing index.\n    columns='bar',  # Column to use to make new frame\u2019s columns.\n    values='baz'    # Column(s) to use for populating new frame\u2019s values.\n)\n\nOutput table:\nbar  A  B  C\nfoo         \none  1  2  3\ntwo  4  5  6\n\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "See this question.",
                "fecha": { "$date" : "2021-04-05T20:54:08Z" },
                "usuario": "Mykola Zotko",
                "usuario_id": 270
            }
        ],
        "usuario": "Mykola Zotko",
        "usuario_id": 270
    },
    {
        "_id": 172,
        "fecha": { "$date" : "2021-07-31T17:38:01Z" },
        "decripcion": "\nThis post aims to give readers a primer on SQL-flavored merging with Pandas, how to use it, and when not to use it.\nIn particular, here's what this post will go through:\n\nThe basics - types of joins (LEFT, RIGHT, OUTER, INNER)\n\nmerging with different column names\nmerging with multiple columns\navoiding duplicate merge key column in output\n\n\n\nWhat this post (and other posts by me on this thread) will not go through:\n\nPerformance-related discussions and timings (for now). Mostly notable mentions of better alternatives, wherever appropriate.\nHandling suffixes, removing extra columns, renaming outputs, and other specific use cases. There are other (read: better) posts that deal with that, so figure it out!\n\n\nNote\nMost examples default to INNER JOIN operations while demonstrating various features, unless otherwise specified.\nFurthermore, all the DataFrames here can be copied and replicated so\nyou can play with them. Also, see this\npost\non how to read DataFrames from your clipboard.\nLastly, all visual representation of JOIN operations have been hand-drawn using Google Drawings. Inspiration from here.\n\n\n\nEnough talk - just show me how to use merge!\nSetup & Basics\nnp.random.seed(0)\nleft = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'value': np.random.randn(4)})\nright = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'value': np.random.randn(4)})\n\nleft\n\n  key     value\n0   A  1.764052\n1   B  0.400157\n2   C  0.978738\n3   D  2.240893\n\nright\n\n  key     value\n0   B  1.867558\n1   D -0.977278\n2   E  0.950088\n3   F -0.151357\n\nFor the sake of simplicity, the key column has the same name (for now).\nAn INNER JOIN is represented by\n\n\nNote\nThis, along with the forthcoming figures all follow this convention:\n\nblue indicates rows that are present in the merge result\nred indicates rows that are excluded from the result (i.e., removed)\ngreen indicates missing values that are replaced with NaNs in the result\n\n\nTo perform an INNER JOIN, call merge on the left DataFrame, specifying the right DataFrame and the join key (at the very least) as arguments.\nleft.merge(right, on='key')\n# Or, if you want to be explicit\n# left.merge(right, on='key', how='inner')\n\n  key   value_x   value_y\n0   B  0.400157  1.867558\n1   D  2.240893 -0.977278\n\nThis returns only rows from left and right which share a common key (in this example, \"B\" and \"D).\nA LEFT OUTER JOIN, or LEFT JOIN  is represented by\n\nThis can be performed by specifying how='left'.\nleft.merge(right, on='key', how='left')\n\n  key   value_x   value_y\n0   A  1.764052       NaN\n1   B  0.400157  1.867558\n2   C  0.978738       NaN\n3   D  2.240893 -0.977278\n\nCarefully note the placement of NaNs here. If you specify how='left', then only keys from left are used, and missing data from right is replaced by NaN.\nAnd similarly, for a RIGHT OUTER JOIN, or RIGHT JOIN which is...\n\n...specify how='right':\nleft.merge(right, on='key', how='right')\n\n  key   value_x   value_y\n0   B  0.400157  1.867558\n1   D  2.240893 -0.977278\n2   E       NaN  0.950088\n3   F       NaN -0.151357\n\nHere, keys from right are used, and missing data from left is replaced by NaN.\nFinally, for the FULL OUTER JOIN, given by\n\nspecify how='outer'.\nleft.merge(right, on='key', how='outer')\n\n  key   value_x   value_y\n0   A  1.764052       NaN\n1   B  0.400157  1.867558\n2   C  0.978738       NaN\n3   D  2.240893 -0.977278\n4   E       NaN  0.950088\n5   F       NaN -0.151357\n\nThis uses the keys from both frames, and NaNs are inserted for missing rows in both.\nThe documentation summarizes these various merges nicely:\n\n\nOther JOINs - LEFT-Excluding, RIGHT-Excluding, and FULL-Excluding/ANTI JOINs\nIf you need LEFT-Excluding JOINs and RIGHT-Excluding JOINs in two steps.\nFor LEFT-Excluding JOIN, represented as\n\nStart by performing a LEFT OUTER JOIN and then filtering (excluding!) rows coming from left only,\n(left.merge(right, on='key', how='left', indicator=True)\n     .query('_merge == \"left_only\"')\n     .drop('_merge', 1))\n\n  key   value_x  value_y\n0   A  1.764052      NaN\n2   C  0.978738      NaN\n\nWhere,\nleft.merge(right, on='key', how='left', indicator=True)\n\n  key   value_x   value_y     _merge\n0   A  1.764052       NaN  left_only\n1   B  0.400157  1.867558       both\n2   C  0.978738       NaN  left_only\n3   D  2.240893 -0.977278       both\nAnd similarly, for a RIGHT-Excluding JOIN,\n\n(left.merge(right, on='key', how='right', indicator=True)\n     .query('_merge == \"right_only\"')\n     .drop('_merge', 1))\n\n  key  value_x   value_y\n2   E      NaN  0.950088\n3   F      NaN -0.151357\nLastly, if you are required to do a merge that only retains keys from the left or right, but not both (IOW, performing an ANTI-JOIN),\n\nYou can do this in similar fashion\u2014\n(left.merge(right, on='key', how='outer', indicator=True)\n     .query('_merge != \"both\"')\n     .drop('_merge', 1))\n\n  key   value_x   value_y\n0   A  1.764052       NaN\n2   C  0.978738       NaN\n4   E       NaN  0.950088\n5   F       NaN -0.151357\n\n\nDifferent names for key columns\nIf the key columns are named differently\u2014for example, left has keyLeft, and right has keyRight instead of key\u2014then you will have to specify left_on and right_on as arguments instead of on:\nleft2 = left.rename({'key':'keyLeft'}, axis=1)\nright2 = right.rename({'key':'keyRight'}, axis=1)\n\nleft2\n\n  keyLeft     value\n0       A  1.764052\n1       B  0.400157\n2       C  0.978738\n3       D  2.240893\n\nright2\n\n  keyRight     value\n0        B  1.867558\n1        D -0.977278\n2        E  0.950088\n3        F -0.151357\n\n\nleft2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')\n\n  keyLeft   value_x keyRight   value_y\n0       B  0.400157        B  1.867558\n1       D  2.240893        D -0.977278\n\n\nAvoiding duplicate key column in output\nWhen merging on keyLeft from left and keyRight from right, if you only want either of the keyLeft or keyRight (but not both) in the output, you can start by setting the index as a preliminary step.\nleft3 = left2.set_index('keyLeft')\nleft3.merge(right2, left_index=True, right_on='keyRight')\n\n    value_x keyRight   value_y\n0  0.400157        B  1.867558\n1  2.240893        D -0.977278\n\nContrast this with the output of the command just before (that is, the output of left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')), you'll notice keyLeft is missing. You can figure out what column to keep based on which frame's index is set as the key. This may matter when, say, performing some OUTER JOIN operation.\n\nMerging only a single column from one of the DataFrames\nFor example, consider\nright3 = right.assign(newcol=np.arange(len(right)))\nright3\n  key     value  newcol\n0   B  1.867558       0\n1   D -0.977278       1\n2   E  0.950088       2\n3   F -0.151357       3\n\nIf you are required to merge only \"new_val\" (without any of the other columns), you can usually just subset columns before merging:\nleft.merge(right3[['key', 'newcol']], on='key')\n\n  key     value  newcol\n0   B  0.400157       0\n1   D  2.240893       1\n\nIf you're doing a LEFT OUTER JOIN, a more performant solution would involve map:\n# left['newcol'] = left['key'].map(right3.set_index('key')['newcol']))\nleft.assign(newcol=left['key'].map(right3.set_index('key')['newcol']))\n\n  key     value  newcol\n0   A  1.764052     NaN\n1   B  0.400157     0.0\n2   C  0.978738     NaN\n3   D  2.240893     1.0\n\nAs mentioned, this is similar to, but faster than\nleft.merge(right3[['key', 'newcol']], on='key', how='left')\n\n  key     value  newcol\n0   A  1.764052     NaN\n1   B  0.400157     0.0\n2   C  0.978738     NaN\n3   D  2.240893     1.0\n\n\nMerging on multiple columns\nTo join on more than one column, specify a list for on (or left_on and right_on, as appropriate).\nleft.merge(right, on=['key1', 'key2'] ...)\n\nOr, in the event the names are different,\nleft.merge(right, left_on=['lkey1', 'lkey2'], right_on=['rkey1', 'rkey2'])\n\n\nOther useful merge* operations and functions\n\nMerging a DataFrame with Series on index: See this answer.\n\nBesides merge, DataFrame.update and DataFrame.combine_first are also used in certain cases to update one DataFrame with another.\n\npd.merge_ordered is a useful function for ordered JOINs.\n\npd.merge_asof (read: merge_asOf) is useful for approximate joins.\n\n\nThis section only covers the very basics, and is designed to only whet your appetite. For more examples and cases, see the documentation on merge, join, and concat as well as the links to the function specifications.\n\n\nContinue Reading\nJump to other topics in Pandas Merging 101 to continue learning:\n\nMerging basics - basic types of joins *\n\nIndex-based joins\n\nGeneralizing to multiple DataFrames\n\nCross join\n\n\n*You are here.\n    ",
        "votes": 880,
        "comentarios": [
            {
                "decripcion": "If anyone is confused by the table of contents at the end of each post, I split up this massive answer into 4 separate ones, 3 on this question and 1 on another. The way it was setup previously made it harder to reference folks to specific topics. This allows you to bookmark separate topics easily now!",
                "fecha": { "$date" : "2020-12-17T10:17:28Z" },
                "usuario": "cs95",
                "usuario_id": 271
            },
            {
                "decripcion": "This is an awesome resource! The only question I still have is why call it merge instead of join, and join instead of merge?",
                "fecha": { "$date" : "2021-04-08T22:31:14Z" },
                "usuario": "ThatNewGuy",
                "usuario_id": 272
            }
        ],
        "usuario": "cs95",
        "usuario_id": 271
    },
    {
        "_id": 173,
        "fecha": { "$date" : "2019-10-11T17:36:29Z" },
        "decripcion": "\nA supplemental visual view of pd.concat([df0, df1], kwargs). \nNotice that, kwarg axis=0 or axis=1 's meaning is not as intuitive as df.mean() or df.apply(func)\n\n\n\n\n    ",
        "votes": 75,
        "comentarios": [
            {
                "decripcion": "This is a nice diagram. May I ask how you produced it?",
                "fecha": { "$date" : "2019-05-20T17:27:56Z" },
                "usuario": "cs95",
                "usuario_id": 271
            },
            {
                "decripcion": "google doc's built-in \"insert ==> drawing... ==> new\" (as of 2019-May). But, to be clear: the only reason I used google doc for this picture  is because my notes is stored in google doc, and I would like a picture that can be modified quickly within google doc itself. Actually now you mentioned it, the google doc's drawing tool is pretty neat.",
                "fecha": { "$date" : "2019-05-21T18:19:31Z" },
                "usuario": "eliu",
                "usuario_id": 273
            },
            {
                "decripcion": "Wow, this is great. Coming from the SQL world, \"vertical\" join is not a join in my head, as the table's structure is always fixed. Now even think pandas should consolidate concat and merge with a direction parameter being horizontal or vertical.",
                "fecha": { "$date" : "2019-08-01T11:16:40Z" },
                "usuario": "Ufos",
                "usuario_id": 274
            },
            {
                "decripcion": "@Ufos Isn't that exactly what axis=1 and axis=0 is?",
                "fecha": { "$date" : "2019-08-06T17:31:44Z" },
                "usuario": "cs95",
                "usuario_id": 271
            },
            {
                "decripcion": "yes, there're now merge and concat and axis and whatever. However, as @eliu shows, it's all just the same concept of merge with \"left\" and \"right\" and \"horizontal\" or \"vertical\".  I, personally, have to look into the documentation every time I have to remember which \"axis\" is 0 and which is 1.",
                "fecha": { "$date" : "2019-08-19T09:32:30Z" },
                "usuario": "Ufos",
                "usuario_id": 274
            }
        ],
        "usuario": "eliu",
        "usuario_id": 273
    },
    {
        "_id": 174,
        "fecha": { "$date" : "2021-01-24T00:26:49Z" },
        "decripcion": "\nIn this answer, I will consider practical examples.\nThe first one, is of pandas.concat.\nThe second one, of merging dataframes from the index of one and the column of another one.\n\n1. pandas.concat\nConsidering the following DataFrames with the same column names:\nPreco2018 with size (8784, 5)\n\nPreco 2019 with size (8760, 5)\n\nThat have the same column names.\nYou can combine them using pandas.concat, by simply\nimport pandas as pd\n\nframes = [Preco2018, Preco2019]\n\ndf_merged = pd.concat(frames)\n\nWhich results in a DataFrame with the following size (17544, 5)\n\nIf you want to visualize, it ends up working like this\n\n(Source)\n\n2. Merge by Column and Index\nIn this part, I will consider a specific case: If one wants to merge the index of one dataframe and the column of another dataframe.\nLet's say one has the dataframe Geo with 54 columns, being one of the columns the Date Data, which is of type datetime64[ns].\n\nAnd the dataframe Price that has one column with the price and the index corresponds to the dates\n\nIn this specific case, to merge them, one uses pd.merge\nmerged = pd.merge(Price, Geo, left_index=True, right_on='Data')\n\nWhich results in the following dataframe\n\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "Gon\u00e7alo Peres \u9f9a\u71ff\u7984",
        "usuario_id": 275
    },
    {
        "_id": 175,
        "fecha": { "$date" : "2020-12-06T12:56:51Z" },
        "decripcion": "\nThis post will go through the following topics:\n\nMerging with index under different conditions\n\noptions for index-based joins: merge, join, concat\nmerging on indexes\nmerging on index of one, column of other\n\n\neffectively using named indexes to simplify merging syntax\n\nBACK TO TOP\n\n\nIndex-based joins\nTL;DR\n\nThere are a few options, some simpler than others depending on the use\ncase.\n\nDataFrame.merge with left_index and right_index (or left_on and right_on using names indexes)\n\nsupports inner/left/right/full\ncan only join two at a time\nsupports column-column, index-column, index-index joins\n\n\nDataFrame.join (join on index)\n\nsupports inner/left (default)/right/full\ncan join multiple DataFrames at a time\nsupports index-index joins\n\n\npd.concat (joins on index)\n\nsupports inner/full (default)\ncan join multiple DataFrames at a time\nsupports index-index joins\n\n\n\n\n\nIndex to index joins\nSetup & Basics\nimport pandas as pd\nimport numpy as np\n\nnp.random.seed([3, 14])\nleft = pd.DataFrame(data={'value': np.random.randn(4)}, \n                    index=['A', 'B', 'C', 'D'])    \nright = pd.DataFrame(data={'value': np.random.randn(4)},  \n                     index=['B', 'D', 'E', 'F'])\nleft.index.name = right.index.name = 'idxkey'\n\nleft\n           value\nidxkey          \nA      -0.602923\nB      -0.402655\nC       0.302329\nD      -0.524349\n\nright\n \n           value\nidxkey          \nB       0.543843\nD       0.013135\nE      -0.326498\nF       1.385076\n\nTypically, an inner join on index would look like this:\nleft.merge(right, left_index=True, right_index=True)\n\n         value_x   value_y\nidxkey                    \nB      -0.402655  0.543843\nD      -0.524349  0.013135\n\nOther joins follow similar syntax.\nNotable Alternatives\n\nDataFrame.join defaults to joins on the index. DataFrame.join does a LEFT OUTER JOIN by default, so how='inner' is necessary here.\n left.join(right, how='inner', lsuffix='_x', rsuffix='_y')\n\n          value_x   value_y\n idxkey                    \n B      -0.402655  0.543843\n D      -0.524349  0.013135\n\nNote that I needed to specify the lsuffix and rsuffix arguments since join would otherwise error out:\n left.join(right)\n ValueError: columns overlap but no suffix specified: Index(['value'], dtype='object')\n\nSince the column names are the same. This would not be a problem if they were differently named.\n left.rename(columns={'value':'leftvalue'}).join(right, how='inner')\n\n         leftvalue     value\n idxkey                     \n B       -0.402655  0.543843\n D       -0.524349  0.013135\n\n\npd.concat joins on the index and can join two or more DataFrames at once. It does a full outer join by default, so how='inner' is required here..\n pd.concat([left, right], axis=1, sort=False, join='inner')\n\n            value     value\n idxkey                    \n B      -0.402655  0.543843\n D      -0.524349  0.013135\n\nFor more information on concat, see this post.\n\n\n\nIndex to Column joins\nTo perform an inner join using index of left, column of right, you will use DataFrame.merge a combination of left_index=True and right_on=....\nright2 = right.reset_index().rename({'idxkey' : 'colkey'}, axis=1)\nright2\n \n  colkey     value\n0      B  0.543843\n1      D  0.013135\n2      E -0.326498\n3      F  1.385076\n\nleft.merge(right2, left_index=True, right_on='colkey')\n\n    value_x colkey   value_y\n0 -0.402655      B  0.543843\n1 -0.524349      D  0.013135\n\nOther joins follow a similar structure. Note that only merge can perform index to column joins. You can join on multiple columns, provided the number of index levels on the left equals the number of columns on the right.\njoin and concat are not capable of mixed merges. You will need to set the index as a pre-step using DataFrame.set_index.\n\nEffectively using Named Index [pandas >= 0.23]\nIf your index is named, then from pandas >= 0.23, DataFrame.merge allows you to specify the index name to on (or left_on and right_on as necessary).\nleft.merge(right, on='idxkey')\n\n         value_x   value_y\nidxkey                    \nB      -0.402655  0.543843\nD      -0.524349  0.013135\n\nFor the previous example of merging with the index of left, column of right, you can use left_on with the index name of left:\nleft.merge(right2, left_on='idxkey', right_on='colkey')\n\n    value_x colkey   value_y\n0 -0.402655      B  0.543843\n1 -0.524349      D  0.013135\n\n\n\nContinue Reading\nJump to other topics in Pandas Merging 101 to continue learning:\n\nMerging basics - basic types of joins\n\nIndex-based joins*\n\nGeneralizing to multiple DataFrames\n\nCross join\n\n\n* you are here \n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 176,
        "fecha": { "$date" : "2020-12-06T12:56:31Z" },
        "decripcion": "\nThis post will go through the following topics:\n\nhow to correctly generalize to multiple DataFrames (and why merge has shortcomings here)\nmerging on unique keys\nmerging on non-unqiue keys\n\nBACK TO TOP\n\n\nGeneralizing to multiple DataFrames\nOftentimes, the situation arises when multiple DataFrames are to be merged together. Naively, this can be done by chaining merge calls:\ndf1.merge(df2, ...).merge(df3, ...)\n\nHowever, this quickly gets out of hand for many DataFrames. Furthermore, it may be necessary to generalise for an unknown number of DataFrames.\nHere I introduce pd.concat for multi-way joins on unique keys, and DataFrame.join for multi-way joins on non-unique keys. First, the setup.\n# Setup.\nnp.random.seed(0)\nA = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'valueA': np.random.randn(4)})    \nB = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'valueB': np.random.randn(4)})\nC = pd.DataFrame({'key': ['D', 'E', 'J', 'C'], 'valueC': np.ones(4)})\ndfs = [A, B, C] \n\n# Note, the \"key\" column values are unique, so the index is unique.\nA2 = A.set_index('key')\nB2 = B.set_index('key')\nC2 = C.set_index('key')\n\ndfs2 = [A2, B2, C2]\n\n\nMultiway merge on unique keys\nIf your keys (here, the key could either be a column or an index) are unique, then you can use pd.concat. Note that pd.concat joins DataFrames on the index.\n# merge on `key` column, you'll need to set the index before concatenating\npd.concat([\n    df.set_index('key') for df in dfs], axis=1, join='inner'\n).reset_index()\n\n  key    valueA    valueB  valueC\n0   D  2.240893 -0.977278     1.0\n\n# merge on `key` index\npd.concat(dfs2, axis=1, sort=False, join='inner')\n\n       valueA    valueB  valueC\nkey                            \nD    2.240893 -0.977278     1.0\n\nOmit join='inner' for a FULL OUTER JOIN. Note that you cannot specify LEFT or RIGHT OUTER joins (if you need these, use join, described below).\n\nMultiway merge on keys with duplicates\nconcat is fast, but has its shortcomings. It cannot handle duplicates.\nA3 = pd.DataFrame({'key': ['A', 'B', 'C', 'D', 'D'], 'valueA': np.random.randn(5)})\n\n\npd.concat([df.set_index('key') for df in [A3, B, C]], axis=1, join='inner')\nValueError: Shape of passed values is (3, 4), indices imply (3, 2)\n\nIn this situation, we can use join since it can handle non-unique keys (note that join joins DataFrames on their index; it calls merge under the hood and does a LEFT OUTER JOIN unless otherwise specified).\n# join on `key` column, set as the index first\n# For inner join. For left join, omit the \"how\" argument.\nA.set_index('key').join(\n    [df.set_index('key') for df in (B, C)], how='inner').reset_index()\n\n  key    valueA    valueB  valueC\n0   D  2.240893 -0.977278     1.0\n\n# join on `key` index\nA3.set_index('key').join([B2, C2], how='inner')\n\n       valueA    valueB  valueC\nkey                            \nD    1.454274 -0.977278     1.0\nD    0.761038 -0.977278     1.0\n\n\n\nContinue Reading\nJump to other topics in Pandas Merging 101 to continue learning:\n\nMerging basics - basic types of joins\n\nIndex-based joins\n\nGeneralizing to multiple DataFrames *\n\nCross join\n\n\n* you are here \n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 177,
        "fecha": { "$date" : "2021-09-09T09:49:31Z" },
        "decripcion": "\nJoins 101\nThese animations might be better to explain you visually.\nCredits: [Garrick Aden-Buie tidyexplain repo (https://github.com/gadenbuie/tidyexplain)\nInner Join\n\nOuter Join or Full Join\n\nRight Join\n\nLeft Join\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Anurag Dhadse",
        "usuario_id": 276
    },
    {
        "_id": 178,
        "fecha": { "$date" : "2021-03-19T21:52:42Z" },
        "decripcion": "\nYou can use a list comprehension to create a new list containing only the elements you don't want to remove:\nsomelist = [x for x in somelist if not determine(x)]\n\nOr, by assigning to the slice somelist[:], you can mutate the existing list to contain only the items you want:\nsomelist[:] = [x for x in somelist if not determine(x)]\n\nThis approach could be useful if there are other references to somelist that need to reflect the changes.\nInstead of a comprehension, you could also use itertools. In Python 2:\nfrom itertools import ifilterfalse\nsomelist[:] = ifilterfalse(determine, somelist)\n\nOr in Python 3:\nfrom itertools import filterfalse\nsomelist[:] = filterfalse(determine, somelist)\n\n    ",
        "votes": 954,
        "comentarios": [
            {
                "decripcion": "Can you make it faster if you know only a few will be deleted, i.e., only delete those and leave the others in-place rather than re-writing them?",
                "fecha": { "$date" : "2011-04-20T19:25:57Z" },
                "usuario": "highBandWidth",
                "usuario_id": 277
            },
            {
                "decripcion": "What if my list is huge and can't afford making a copy?",
                "fecha": { "$date" : "2014-11-15T23:43:18Z" },
                "usuario": "jpcgt",
                "usuario_id": 278
            },
            {
                "decripcion": "@jpcgt You should use somelist[:] = (x for x in somelist if determine(x)) this will create generator that may not create any unnecessary copies.",
                "fecha": { "$date" : "2015-04-29T14:54:28Z" },
                "usuario": "Rostislav Kondratenko",
                "usuario_id": 279
            },
            {
                "decripcion": "@RostislavKondratenko: list_ass_slice() function that implements somelist[:]= calls PySequence_Fast() internally. This function always returns a list i.e., @Alex Martelli's solution that already uses a list instead of a generator is most probably more efficient",
                "fecha": { "$date" : "2015-05-07T20:48:28Z" },
                "usuario": "jfs",
                "usuario_id": 280
            },
            {
                "decripcion": "Would you care to explain what the differences are between assigning the list comprehension to the list and list clone please? Wouldn't the original list somelist be mutated in both methods?",
                "fecha": { "$date" : "2018-09-24T19:06:14Z" },
                "usuario": "Bowen Liu",
                "usuario_id": 281
            }
        ],
        "usuario": "David Raznick",
        "usuario_id": 282
    },
    {
        "_id": 179,
        "fecha": { "$date" : "2019-05-17T06:05:40Z" },
        "decripcion": "\nThe answers suggesting list comprehensions are ALMOST correct -- except that they build a completely new list and then give it the same name the old list as, they do NOT modify the old list in place. That's different from what you'd be doing by selective removal, as in @Lennart's suggestion -- it's faster, but if your list is accessed via multiple references the fact that you're just reseating one of the references and NOT altering the list object itself can lead to subtle, disastrous bugs.\n\nFortunately, it's extremely easy to get both the speed of list comprehensions AND the required semantics of in-place alteration -- just code:\n\nsomelist[:] = [tup for tup in somelist if determine(tup)]\n\n\nNote the subtle difference with other answers: this one is NOT assigning to a barename - it's assigning to a list slice that just happens to be the entire list, thereby replacing the list contents within the same Python list object, rather than just reseating one reference (from previous list object to new list object) like the other answers.\n    ",
        "votes": 641,
        "comentarios": [
            {
                "decripcion": "How do I do the same sliced assignment with a dict? In Python 2.6?",
                "fecha": { "$date" : "2011-03-25T19:29:37Z" },
                "usuario": "PaulMcG",
                "usuario_id": 283
            },
            {
                "decripcion": "@Paul: Since dicts are unordered, slices are meaningless for dicts.  If your want to replace the contents of dict a by the contents of dict b, use a.clear(); a.update(b).",
                "fecha": { "$date" : "2011-04-01T23:51:47Z" },
                "usuario": "Sven Marnach",
                "usuario_id": 284
            },
            {
                "decripcion": "Why can 'reseating' one of the references by replacing what the variable refers to cause bugs?  It seems like that would only be a potential problem in multi-threaded applications, not single-threaded.",
                "fecha": { "$date" : "2011-08-07T22:59:53Z" },
                "usuario": "Derek Dahmer",
                "usuario_id": 285
            },
            {
                "decripcion": "@Derek x = ['foo','bar','baz']; y = x; x = [item for item in x if determine(item)]; This reassigns x to the result of the list comprehension, but y still refers to the original list ['foo','bar','baz']. If you expected x and y to refer to the same list, you may have introduced bugs. You prevent this by assigning to a slice of the entire list, as Alex shows, and I show here: x = [\"foo\",\"bar\",\"baz\"]; y = x; x[:] = [item for item in x if determine(item)];. The list is modified in place. ensuring that all references to the list (both x and y here) refer to the new list.",
                "fecha": { "$date" : "2011-11-15T19:38:42Z" },
                "usuario": "Steven T. Snyder",
                "usuario_id": 286
            },
            {
                "decripcion": "in fact, using filter function too creates a new list, does not modify elements in place... only olist[:] = [i for i in olist if not dislike(i)]",
                "fecha": { "$date" : "2016-07-13T08:48:01Z" },
                "usuario": "John Strood",
                "usuario_id": 287
            }
        ],
        "usuario": "Alex Martelli",
        "usuario_id": 288
    },
    {
        "_id": 180,
        "fecha": { "$date" : "2019-12-02T14:50:05Z" },
        "decripcion": "\nYou need to take a copy of the list and iterate over it first, or the iteration will fail with what may be unexpected results.\n\nFor example (depends on what type of list):\n\nfor tup in somelist[:]:\n    etc....\n\n\nAn example:\n\n>>> somelist = range(10)\n>>> for x in somelist:\n...     somelist.remove(x)\n>>> somelist\n[1, 3, 5, 7, 9]\n\n>>> somelist = range(10)\n>>> for x in somelist[:]:\n...     somelist.remove(x)\n>>> somelist\n[]\n\n    ",
        "votes": 348,
        "comentarios": [
            {
                "decripcion": "@Zen Because the second one iterates over a copy of the list. So when you modify the original list, you do not modify the copy that you iterate over.",
                "fecha": { "$date" : "2014-06-18T13:47:31Z" },
                "usuario": "Lennart Regebro",
                "usuario_id": 154
            },
            {
                "decripcion": "What's better in doing somelist[:] compared to list(somelist) ?",
                "fecha": { "$date" : "2015-02-04T10:01:22Z" },
                "usuario": "Mariusz Jamro",
                "usuario_id": 289
            },
            {
                "decripcion": "list(somelist) will convert an iterable into a list. somelist[:] makes a copy of an object that supports slicing. So they don't necessarily do the same thing. In this case I want to make a copy of the somelistobject, so I use [:]",
                "fecha": { "$date" : "2015-02-05T12:21:22Z" },
                "usuario": "Lennart Regebro",
                "usuario_id": 154
            },
            {
                "decripcion": "Note to anyone reading this, this is VERY slow for lists. remove() has to go over the WHOLE list for every iteration, so it will take forever.",
                "fecha": { "$date" : "2015-02-11T23:22:14Z" },
                "usuario": "vitiral",
                "usuario_id": 290
            },
            {
                "decripcion": "Big O time doesn't matter when dealing with lists of only a dozen items.  Often clear and simple for future programmers to understand is far more valuable than performance.",
                "fecha": { "$date" : "2016-08-06T17:21:20Z" },
                "usuario": "Steve",
                "usuario_id": 291
            }
        ],
        "usuario": "Lennart Regebro",
        "usuario_id": 154
    },
    {
        "_id": 181,
        "fecha": { "$date" : "2018-10-26T15:10:03Z" },
        "decripcion": "\nfor i in range(len(somelist) - 1, -1, -1):\n    if some_condition(somelist, i):\n        del somelist[i]\n\n\nYou need to go backwards otherwise it's a bit like sawing off the tree-branch that you are sitting on :-)\n\nPython 2 users: replace range by xrange to avoid creating a hardcoded list\n    ",
        "votes": 153,
        "comentarios": [
            {
                "decripcion": "In recent versions of Python, you can do this even more cleanly by using the reversed() builtin",
                "fecha": { "$date" : "2011-03-23T07:08:43Z" },
                "usuario": "ncoghlan",
                "usuario_id": 292
            },
            {
                "decripcion": "reversed() does not create a new list, it creates a reverse iterator over the supplied sequence. Like enumerate(), you have to wrap it in list() to actually get a list out of it.  You may be thinking of sorted(), which does create a new list every time (it has to, so it can sort it).",
                "fecha": { "$date" : "2015-02-12T06:44:12Z" },
                "usuario": "ncoghlan",
                "usuario_id": 292
            },
            {
                "decripcion": "@Mauris because enumerate returns an iterator and reversed expects a sequence. I guess you could do reversed(list(enumerate(somelist))) if you don't mind creating an extra list in memory.",
                "fecha": { "$date" : "2015-08-02T23:27:15Z" },
                "usuario": "drevicko",
                "usuario_id": 293
            },
            {
                "decripcion": "This is O(N*M) for arrays, it is very slow if you remove many items from a large list.  So not recommended.",
                "fecha": { "$date" : "2015-09-15T15:04:59Z" },
                "usuario": "Sam Watkins",
                "usuario_id": 294
            },
            {
                "decripcion": "@SamWatkins Yeah, this answer is for when you're removing a couple of elements from a very large array. Less memory usage, but it can be m times slower.",
                "fecha": { "$date" : "2016-02-07T21:36:43Z" },
                "usuario": "Navin",
                "usuario_id": 295
            }
        ],
        "usuario": "John Machin",
        "usuario_id": 296
    },
    {
        "_id": 182,
        "fecha": { "$date" : "2020-09-25T05:15:39Z" },
        "decripcion": "\nOverview of workarounds\nEither:\n\nuse a linked list implementation/roll your own.\nA linked list is the proper data structure to support efficient item removal, and does not force you to make space/time tradeoffs.\nA CPython list is implemented with dynamic arrays as mentioned here, which is not a good data type to support removals.\nThere doesn't seem to be a linked list in the standard library however:\n\nIs there a linked list predefined library in Python?\nhttps://github.com/ajakubek/python-llist\n\n\nstart a new list() from scratch, and .append() back at the end as mentioned at: https://stackoverflow.com/a/1207460/895245\nThis time efficient, but less space efficient because it keeps an extra copy of the array around during iteration.\n\nuse del with an index as mentioned at: https://stackoverflow.com/a/1207485/895245\nThis is more space efficient since it dispenses the array copy, but it is less time efficient, because removal from dynamic arrays requires shifting all following items back by one, which is O(N).\n\n\nGenerally, if you are doing it quick and dirty and don't want to add a custom LinkedList class, you just want to go for the faster .append() option by default unless memory is a big concern.\nOfficial Python 2 tutorial 4.2. \"for Statements\"\nhttps://docs.python.org/2/tutorial/controlflow.html#for-statements\nThis part of the docs makes it clear that:\n\nyou need to make a copy of the iterated list to modify it\none way to do it is with the slice notation [:]\n\n\nIf you need to modify the sequence you are iterating over while inside the loop (for example to duplicate selected items), it is recommended that you first make a copy. Iterating over a sequence does not implicitly make a copy. The slice notation makes this especially convenient:\n>>> words = ['cat', 'window', 'defenestrate']\n>>> for w in words[:]:  # Loop over a slice copy of the entire list.\n...     if len(w) > 6:\n...         words.insert(0, w)\n...\n>>> words\n['defenestrate', 'cat', 'window', 'defenestrate']\n\n\nPython 2 documentation 7.3. \"The for statement\"\nhttps://docs.python.org/2/reference/compound_stmts.html#for\nThis part of the docs says once again that you have to make a copy, and gives an actual removal example:\n\nNote: There is a subtlety when the sequence is being modified by the loop (this can only occur for mutable sequences, i.e. lists). An internal counter is used to keep track of which item is used next, and this is incremented on each iteration. When this counter has reached the length of the sequence the loop terminates. This means that if the suite deletes the current (or a previous) item from the sequence, the next item will be skipped (since it gets the index of the current item which has already been treated). Likewise, if the suite inserts an item in the sequence before the current item, the current item will be treated again the next time through the loop. This can lead to nasty bugs that can be avoided by making a temporary copy using a slice of the whole sequence, e.g.,\nfor x in a[:]:\n\n\n    if x < 0: a.remove(x)\n\nHowever, I disagree with this implementation, since .remove() has to iterate the entire list to find the value.\nCould Python do this better?\nIt seems like this particular Python API could be improved. Compare it, for instance, with:\n\nJava ListIterator::remove which documents \"This call can only be made once per call to next or previous\"\nC++ std::vector::erase which returns a valid interator to the element after the one removed\n\nboth of which make it crystal clear that you cannot modify a list being iterated except with the iterator itself, and gives you efficient ways to do so without copying the list.\nPerhaps the underlying rationale is that Python lists are assumed to be dynamic array backed, and therefore any type of removal will be time inefficient anyways, while Java has a nicer interface hierarchy with both ArrayList and LinkedList implementations of ListIterator.\nThere doesn't seem to be an explicit linked list type in the Python stdlib either: Python Linked List\n    ",
        "votes": 63,
        "comentarios": [
            {
                "decripcion": "Finally someone pointed out the actual documentation. I couldn't understand any answers before this one.",
                "fecha": { "$date" : "2021-07-09T13:18:20Z" },
                "usuario": "Lukali",
                "usuario_id": 297
            }
        ],
        "usuario": "Ciro Santilli \u65b0\u7586\u518d\u6559\u80b2\u8425\u516d\u56db\u4e8b\u4ef6\u6cd5\u8f6e\u529f\u90dd\u6d77\u4e1c",
        "usuario_id": 298
    },
    {
        "_id": 183,
        "fecha": { "$date" : "2009-07-30T17:30:54Z" },
        "decripcion": "\nYour best approach for such an example would be a list comprehension\n\nsomelist = [tup for tup in somelist if determine(tup)]\n\n\nIn cases where you're doing something more complex than calling a determine function, I prefer constructing a new list and simply appending to it as I go.  For example\n\nnewlist = []\nfor tup in somelist:\n    # lots of code here, possibly setting things up for calling determine\n    if determine(tup):\n        newlist.append(tup)\nsomelist = newlist\n\n\nCopying the list using remove might make your code look a little cleaner, as described in one of the answers below.  You should definitely not do this for extremely large lists, since this involves first copying the entire list, and also performing an O(n) remove operation for each element being removed, making this an O(n^2) algorithm.\n\nfor tup in somelist[:]:\n    # lots of code here, possibly setting things up for calling determine\n    if determine(tup):\n        newlist.append(tup)\n\n    ",
        "votes": 49,
        "comentarios": [],
        "usuario": "Eli Courtwright",
        "usuario_id": 157
    },
    {
        "_id": 184,
        "fecha": { "$date" : "2016-05-24T12:50:20Z" },
        "decripcion": "\nFor those that like functional programming:\n\nsomelist[:] = filter(lambda tup: not determine(tup), somelist)\n\n\nor\n\nfrom itertools import ifilterfalse\nsomelist[:] = list(ifilterfalse(determine, somelist))\n\n    ",
        "votes": 38,
        "comentarios": [
            {
                "decripcion": "1. List comprehension and generator expressions are borrowed from Haskell, a pure functional language; they're exactly as functional as filter, and more Pythonic. 2. If you need a lambda to use map or filter, the list comp or genexpr is always the better option; map and filter can be slightly faster when the transform/predicate function is a Python built-in implemented in C and the iterable is not trivially small, but they're always slower when you need a lambda that the listcomp/genexpr could avoid.",
                "fecha": { "$date" : "2016-10-22T00:22:22Z" },
                "usuario": "ShadowRanger",
                "usuario_id": 14
            }
        ],
        "usuario": "Andr\u00e9 Eriksson",
        "usuario_id": 299
    },
    {
        "_id": 185,
        "fecha": { "$date" : "2017-03-13T20:54:41Z" },
        "decripcion": "\nI needed to do this with a huge list, and duplicating the list seemed expensive, especially since in my case the number of deletions would be few compared to the items that remain. I took this low-level approach.\n\narray = [lots of stuff]\narraySize = len(array)\ni = 0\nwhile i < arraySize:\n    if someTest(array[i]):\n        del array[i]\n        arraySize -= 1\n    else:\n        i += 1\n\n\nWhat I don't know is how efficient a couple of deletes are compared to copying a large list. Please comment if you have any insight.\n    ",
        "votes": 19,
        "comentarios": [
            {
                "decripcion": "In my case I need to move those 'unwanted' elements into another list. Do you have any new comment about this solution? I also think that it is better to use some deletions instead of duplicate the list.",
                "fecha": { "$date" : "2017-05-05T02:13:11Z" },
                "usuario": "gustavovelascoh",
                "usuario_id": 300
            },
            {
                "decripcion": "This is the right answer if performance is an issue (although same as @Alexey). That said, the choice of list as a data structure in the first place should be carefully considered since removal from the middle of a list takes linear time in the length of the list. If you don't really need random access to k-th sequential item, maybe consider OrderedDict?",
                "fecha": { "$date" : "2017-05-05T11:29:23Z" },
                "usuario": "max",
                "usuario_id": 301
            },
            {
                "decripcion": "@GVelascoh why not create newlist = [], and then newlist.append(array[i]) just before del array[i]?",
                "fecha": { "$date" : "2017-05-05T11:31:31Z" },
                "usuario": "max",
                "usuario_id": 301
            },
            {
                "decripcion": "Note that this is likely time inefficient: if list() is a linked list, the random access is expensive, if list() is an array, the deletes are expensive because they require to move all following elements forward. A decent iterator could make things good for the linked list implementation. This could however be space efficient.",
                "fecha": { "$date" : "2017-06-05T16:08:37Z" },
                "usuario": "Ciro Santilli \u65b0\u7586\u518d\u6559\u80b2\u8425\u516d\u56db\u4e8b\u4ef6\u6cd5\u8f6e\u529f\u90dd\u6d77\u4e1c",
                "usuario_id": 298
            },
            {
                "decripcion": "@CiroSantilli\u90dd\u6d77\u4e1c\u51a0\u72b6\u75c5\u516d\u56db\u4e8b\u4ef6\u6cd5\u8f6e\u529f : The pop(i) operation is still O(n). I'll take storage efficiency over incremental improvements in O(n), but I can see why someone might do this differently.",
                "fecha": { "$date" : "2021-01-06T01:08:38Z" },
                "usuario": "ingyhere",
                "usuario_id": 302
            }
        ],
        "usuario": "Michael",
        "usuario_id": 303
    },
    {
        "_id": 186,
        "fecha": { "$date" : "2016-10-23T02:33:13Z" },
        "decripcion": "\nIt might be smart to also just create a new list if the current list item meets the desired criteria. \n\nso:\n\nfor item in originalList:\n   if (item != badValue):\n        newList.append(item)\n\n\nand to avoid having to re-code the entire project with the new lists name:\n\noriginalList[:] = newList\n\n\nnote, from Python documentation: \n\n\n  copy.copy(x) \n  Return a shallow copy of x.\n  \n  copy.deepcopy(x) \n  Return a deep copy of x.\n\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "This adds no new information that wasn't in the accepted answer years earlier.",
                "fecha": { "$date" : "2016-06-21T22:36:22Z" },
                "usuario": "Mark Amery",
                "usuario_id": 149
            },
            {
                "decripcion": "It's simple and just another way to look at a problem @MarkAmery. It's less condensed for those people that don't like compressed coding syntax.",
                "fecha": { "$date" : "2016-06-23T03:08:11Z" },
                "usuario": "ntk4",
                "usuario_id": 304
            }
        ],
        "usuario": "ntk4",
        "usuario_id": 304
    },
    {
        "_id": 187,
        "fecha": { "$date" : "2017-05-23T12:18:24Z" },
        "decripcion": "\nThis answer was originally written in response to a question which has since been marked as duplicate:\nRemoving coordinates from list on python\n\nThere are two problems in your code:\n\n1) When using remove(), you attempt to remove integers whereas you need to remove a tuple.\n\n2) The for loop will skip items in your list.\n\nLet's run through what happens when we execute your code:\n\n>>> L1 = [(1,2), (5,6), (-1,-2), (1,-2)]\n>>> for (a,b) in L1:\n...   if a < 0 or b < 0:\n...     L1.remove(a,b)\n... \nTraceback (most recent call last):\n  File \"<stdin>\", line 3, in <module>\nTypeError: remove() takes exactly one argument (2 given)\n\n\nThe first problem is that you are passing both 'a' and 'b' to remove(), but remove() only accepts a single argument. So how can we get remove() to work properly with your list? We need to figure out what each element of your list is. In this case, each one is a tuple. To see this, let's access one element of the list (indexing starts at 0):\n\n>>> L1[1]\n(5, 6)\n>>> type(L1[1])\n<type 'tuple'>\n\n\nAha! Each element of L1 is actually a tuple. So that's what we need to be passing to remove(). Tuples in python are very easy, they're simply made by enclosing values in parentheses. \"a, b\" is not a tuple, but \"(a, b)\" is a tuple. So we modify your code and run it again:\n\n# The remove line now includes an extra \"()\" to make a tuple out of \"a,b\"\nL1.remove((a,b))\n\n\nThis code runs without any error, but let's look at the list it outputs: \n\nL1 is now: [(1, 2), (5, 6), (1, -2)]\n\n\nWhy is (1,-2) still in your list? It turns out modifying the list while using a loop to iterate over it is a very bad idea without special care. The reason that (1, -2) remains in the list is that the locations of each item within the list changed between iterations of the for loop. Let's look at what happens if we feed the above code a longer list:\n\nL1 = [(1,2),(5,6),(-1,-2),(1,-2),(3,4),(5,7),(-4,4),(2,1),(-3,-3),(5,-1),(0,6)]\n### Outputs:\nL1 is now: [(1, 2), (5, 6), (1, -2), (3, 4), (5, 7), (2, 1), (5, -1), (0, 6)]\n\n\nAs you can infer from that result, every time that the conditional statement evaluates to true and a list item is removed, the next iteration of the loop will skip evaluation of the next item in the list because its values are now located at different indices.\n\nThe most intuitive solution is to copy the list, then iterate over the original list and only modify the copy. You can try doing so like this:\n\nL2 = L1\nfor (a,b) in L1:\n    if a < 0 or b < 0 :\n        L2.remove((a,b))\n# Now, remove the original copy of L1 and replace with L2\nprint L2 is L1\ndel L1\nL1 = L2; del L2\nprint (\"L1 is now: \", L1)\n\n\nHowever, the output will be identical to before:\n\n'L1 is now: ', [(1, 2), (5, 6), (1, -2), (3, 4), (5, 7), (2, 1), (5, -1), (0, 6)]\n\n\nThis is because when we created L2, python did not actually create a new object. Instead, it merely referenced L2 to the same object as L1. We can verify this with 'is' which is different from merely \"equals\" (==).\n\n>>> L2=L1\n>>> L1 is L2\nTrue\n\n\nWe can make a true copy using copy.copy(). Then everything works as expected:\n\nimport copy\nL1 = [(1,2), (5,6),(-1,-2), (1,-2),(3,4),(5,7),(-4,4),(2,1),(-3,-3),(5,-1),(0,6)]\nL2 = copy.copy(L1)\nfor (a,b) in L1:\n    if a < 0 or b < 0 :\n        L2.remove((a,b))\n# Now, remove the original copy of L1 and replace with L2\ndel L1\nL1 = L2; del L2\n>>> L1 is now: [(1, 2), (5, 6), (3, 4), (5, 7), (2, 1), (0, 6)]\n\n\nFinally, there is one cleaner solution than having to make an entirely new copy of L1. The reversed() function:\n\nL1 = [(1,2), (5,6),(-1,-2), (1,-2),(3,4),(5,7),(-4,4),(2,1),(-3,-3),(5,-1),(0,6)]\nfor (a,b) in reversed(L1):\n    if a < 0 or b < 0 :\n        L1.remove((a,b))\nprint (\"L1 is now: \", L1)\n>>> L1 is now: [(1, 2), (5, 6), (3, 4), (5, 7), (2, 1), (0, 6)]\n\n\nUnfortunately, I cannot adequately describe how reversed() works. It returns a 'listreverseiterator' object when a list is passed to it. For practical purposes, you can think of it as creating a reversed copy of its argument. This is the solution I recommend.\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "Cinghiale",
        "usuario_id": 305
    },
    {
        "_id": 188,
        "fecha": { "$date" : "2018-10-23T11:13:00Z" },
        "decripcion": "\nMost of the answers here want you to create a copy of the list. I had a use case where the list was quite long (110K items) and it was smarter to keep reducing the list instead.\n\nFirst of all you'll need to replace foreach loop with while loop,\n\ni = 0\nwhile i < len(somelist):\n    if determine(somelist[i]):\n         del somelist[i]\n    else:\n        i += 1\n\n\nThe value of i is not changed in the if block because you'll want to get value of the new item FROM THE SAME INDEX, once the old item is deleted.\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Mujeeb",
        "usuario_id": 306
    },
    {
        "_id": 189,
        "fecha": { "$date" : "2019-10-10T02:24:59Z" },
        "decripcion": "\nIf you want to delete elements from a list while iterating, use a while-loop so you can alter the current index and end index after each deletion.\n\nExample:\n\ni = 0\nlength = len(list1)\n\nwhile i < length:\n    if condition:\n        list1.remove(list1[i])\n        i -= 1\n        length -= 1\n\n    i += 1\n\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "NoName",
        "usuario_id": 307
    },
    {
        "_id": 190,
        "fecha": { "$date" : "2014-08-18T12:30:16Z" },
        "decripcion": "\nIf you want to do anything else during the iteration, it may be nice to get both the index (which guarantees you being able to reference it, for example if you have a list of dicts) and the actual list item contents.\n\ninlist = [{'field1':10, 'field2':20}, {'field1':30, 'field2':15}]    \nfor idx, i in enumerate(inlist):\n    do some stuff with i['field1']\n    if somecondition:\n        xlist.append(idx)\nfor i in reversed(xlist): del inlist[i]\n\n\nenumerate gives you access to the item and the index at once. reversed is so that the indices that you're going to later delete don't change on you. \n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "Why is getting the index any more relevant in the case where you have a list of dicts than in the case of any other kind of list? This doesn't make sense as far as I can tell.",
                "fecha": { "$date" : "2016-06-21T22:33:52Z" },
                "usuario": "Mark Amery",
                "usuario_id": 149
            }
        ],
        "usuario": "fantabolous",
        "usuario_id": 308
    },
    {
        "_id": 191,
        "fecha": { "$date" : "2015-07-10T20:58:49Z" },
        "decripcion": "\nYou can try for-looping in reverse so for some_list you'll do something like:\n\nlist_len = len(some_list)\nfor i in range(list_len):\n    reverse_i = list_len - 1 - i\n    cur = some_list[reverse_i]\n\n    # some logic with cur element\n\n    if some_condition:\n        some_list.pop(reverse_i)\n\n\nThis way the index is aligned and doesn't suffer from the list updates (regardless whether you pop cur element or not).\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "Looping over reversed(list(enumerate(some_list))) would be simpler than computing indexes yourself.",
                "fecha": { "$date" : "2016-06-21T22:49:43Z" },
                "usuario": "Mark Amery",
                "usuario_id": 149
            },
            {
                "decripcion": "@MarkAmery don't think you can alter the list this way.",
                "fecha": { "$date" : "2016-06-28T18:29:06Z" },
                "usuario": "Queequeg",
                "usuario_id": 309
            }
        ],
        "usuario": "Queequeg",
        "usuario_id": 309
    },
    {
        "_id": 192,
        "fecha": { "$date" : "2017-07-27T07:40:53Z" },
        "decripcion": "\nYou might want to use filter() available as the built-in.\n\nFor more details check here\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Xolve",
        "usuario_id": 310
    },
    {
        "_id": 193,
        "fecha": { "$date" : "2018-06-13T19:38:52Z" },
        "decripcion": "\nOne possible solution, useful if you want not only remove some things, but also do something with all elements in a single loop:\n\nalist = ['good', 'bad', 'good', 'bad', 'good']\ni = 0\nfor x in alist[:]:\n    if x == 'bad':\n        alist.pop(i)\n        i -= 1\n    # do something cool with x or just print x\n    print(x)\n    i += 1\n\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "You should really just use comprehensions. They're much easier to understand.",
                "fecha": { "$date" : "2018-03-15T23:46:07Z" },
                "usuario": "Beefster",
                "usuario_id": 311
            },
            {
                "decripcion": "What if I want to remove bad things, do something with it and also do something with good things in one loop?",
                "fecha": { "$date" : "2018-03-16T07:38:18Z" },
                "usuario": "Alexey",
                "usuario_id": 90
            },
            {
                "decripcion": "Actually, I realized there's some cleverness here in that you make a copy of the list with an open slice (alist[:]) And since you might be doing something fancy, it actually has a use case. Good revision is good. Take my upvote.",
                "fecha": { "$date" : "2018-03-29T19:14:08Z" },
                "usuario": "Beefster",
                "usuario_id": 311
            }
        ],
        "usuario": "Alexey",
        "usuario_id": 90
    },
    {
        "_id": 194,
        "fecha": { "$date" : "2018-11-10T07:05:16Z" },
        "decripcion": "\nThe most effective method is list comprehension, many people show their case, of course, it is also a good way to get an iterator through filter.\n\n\n  Filter receives a function and a sequence. Filter applies the passed function to each element in turn, and then decides whether to retain or discard the element depending on whether the function return value is True or False.\n\n\nThere is an example  (get the odds in the tuple):\n\nlist(filter(lambda x:x%2==1, (1, 2, 4, 5, 6, 9, 10, 15)))  \n# result: [1, 5, 9, 15]\n\n\nCaution: You can also not handle iterators. Iterators are sometimes better than sequences.\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "I probably think this is the most idiomatic way of removing the items from list. This behaviour will also be thread safe since your application is not mutating the variable.",
                "fecha": { "$date" : "2021-08-10T05:24:24Z" },
                "usuario": "Supreet Sethi",
                "usuario_id": 312
            }
        ],
        "usuario": "chseng",
        "usuario_id": 313
    },
    {
        "_id": 195,
        "fecha": { "$date" : "2019-04-30T06:25:49Z" },
        "decripcion": "\nfor loop will be iterate through index..\n\nconsider you have a list,\n\n[5, 7, 13, 29, 65, 91]\n\n\nyou have using list variable called lis. and you using same to remove..\n\nyour variable \n\nlis = [5, 7, 13, 29, 35, 65, 91]\n       0  1   2   3   4   5   6\n\n\nduring 5th iteration,\n\nyour number 35 was not a prime so you removed it from a list.\n\nlis.remove(y)\n\n\nand then next value (65) move on to previous index.\n\nlis = [5, 7, 13, 29, 65, 91]\n       0  1   2   3   4   5\n\n\nso 4th iteration done pointer moved onto 5th.. \n\nthats why your loop doesnt cover 65 since its moved into previous index.\n\nso you shouldn't reference list into another variable which still reference original instead of copy.\n\nite = lis #dont do it will reference instead copy\n\n\nso do copy of list using list[::]\n\nnow you it will give,\n\n[5, 7, 13, 29]\n\n\nProblem is you removed a value from a list during iteration then your list index will collapse.\n\nso you can try comprehension instead.\n\nwhich supports all the iterable like, list, tuple, dict, string etc \n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Mohideen bin Mohammed",
        "usuario_id": 314
    },
    {
        "_id": 196,
        "fecha": { "$date" : "2015-12-16T11:05:41Z" },
        "decripcion": "\nI needed to do something similar and in my case the problem was memory - I needed to merge multiple dataset objects within a list, after doing some stuff with them, as a new object, and needed to get rid of each entry I was merging to avoid duplicating all of them and blowing up memory. In my case having the objects in a dictionary instead of a list worked fine:\n\n```\n\nk = range(5)\nv = ['a','b','c','d','e']\nd = {key:val for key,val in zip(k, v)}\n\nprint d\nfor i in range(5):\n    print d[i]\n    d.pop(i)\nprint d\n\n\n```\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "rafa",
        "usuario_id": 315
    },
    {
        "_id": 197,
        "fecha": { "$date" : "2017-05-23T12:18:24Z" },
        "decripcion": "\nTLDR:\n\nI wrote a library that allows you to do this:\n\nfrom fluidIter import FluidIterable\nfSomeList = FluidIterable(someList)  \nfor tup in fSomeList:\n    if determine(tup):\n        # remove 'tup' without \"breaking\" the iteration\n        fSomeList.remove(tup)\n        # tup has also been removed from 'someList'\n        # as well as 'fSomeList'\n\n\nIt's best to use another method if possible that doesn't require modifying your iterable while iterating over it, but for some algorithms it might not be that straight forward. And so if you are sure that you really do want the code pattern described in the original question, it is possible.\n\nShould work on all mutable sequences not just lists.\n\n\n\nFull answer:\n\nEdit: The last code example in this answer gives a use case for why you might sometimes want to modify a list in place rather than use a list comprehension. The first part of the answers serves as tutorial of how an array can be modified in place.\n\nThe solution follows on from this answer (for a related question) from senderle. Which explains how the the array index is updated while iterating through a list that has been modified. The solution below is designed to correctly track the array index even if the list is modified.\n\nDownload fluidIter.py from here https://github.com/alanbacon/FluidIterator, it is just a single file so no need to install git. There is no installer so you will need to make sure that the file is in the python path your self. The code has been written for python 3 and is untested on python 2.\n\nfrom fluidIter import FluidIterable\nl = [0,1,2,3,4,5,6,7,8]  \nfluidL = FluidIterable(l)                       \nfor i in fluidL:\n    print('initial state of list on this iteration: ' + str(fluidL)) \n    print('current iteration value: ' + str(i))\n    print('popped value: ' + str(fluidL.pop(2)))\n    print(' ')\n\nprint('Final List Value: ' + str(l))\n\n\nThis will produce the following output:\n\ninitial state of list on this iteration: [0, 1, 2, 3, 4, 5, 6, 7, 8]\ncurrent iteration value: 0\npopped value: 2\n\ninitial state of list on this iteration: [0, 1, 3, 4, 5, 6, 7, 8]\ncurrent iteration value: 1\npopped value: 3\n\ninitial state of list on this iteration: [0, 1, 4, 5, 6, 7, 8]\ncurrent iteration value: 4\npopped value: 4\n\ninitial state of list on this iteration: [0, 1, 5, 6, 7, 8]\ncurrent iteration value: 5\npopped value: 5\n\ninitial state of list on this iteration: [0, 1, 6, 7, 8]\ncurrent iteration value: 6\npopped value: 6\n\ninitial state of list on this iteration: [0, 1, 7, 8]\ncurrent iteration value: 7\npopped value: 7\n\ninitial state of list on this iteration: [0, 1, 8]\ncurrent iteration value: 8\npopped value: 8\n\nFinal List Value: [0, 1]\n\n\nAbove we have used the pop method on the fluid list object. Other common iterable methods are also implemented such as del fluidL[i], .remove, .insert, .append, .extend. The list can also be modified using slices (sort and reverse methods are not implemented).\n\nThe only condition is that you must only modify the list in place, if at any point fluidL or l were reassigned to a different list object the code would not work. The original fluidL object would still be used by the for loop but would become out of scope for us to modify.\n\ni.e.\n\nfluidL[2] = 'a'   # is OK\nfluidL = [0, 1, 'a', 3, 4, 5, 6, 7, 8]  # is not OK\n\n\nIf we want to access the current index value of the list we cannot use enumerate, as this only counts how many times the for loop has run. Instead we will use the iterator object directly.\n\nfluidArr = FluidIterable([0,1,2,3])\n# get iterator first so can query the current index\nfluidArrIter = fluidArr.__iter__()\nfor i, v in enumerate(fluidArrIter):\n    print('enum: ', i)\n    print('current val: ', v)\n    print('current ind: ', fluidArrIter.currentIndex)\n    print(fluidArr)\n    fluidArr.insert(0,'a')\n    print(' ')\n\nprint('Final List Value: ' + str(fluidArr))\n\n\nThis will output the following:\n\nenum:  0\ncurrent val:  0\ncurrent ind:  0\n[0, 1, 2, 3]\n\nenum:  1\ncurrent val:  1\ncurrent ind:  2\n['a', 0, 1, 2, 3]\n\nenum:  2\ncurrent val:  2\ncurrent ind:  4\n['a', 'a', 0, 1, 2, 3]\n\nenum:  3\ncurrent val:  3\ncurrent ind:  6\n['a', 'a', 'a', 0, 1, 2, 3]\n\nFinal List Value: ['a', 'a', 'a', 'a', 0, 1, 2, 3]\n\n\nThe FluidIterable class just provides a wrapper for the original list object. The original object can be accessed as a property of the fluid object like so:\n\noriginalList = fluidArr.fixedIterable\n\n\nMore examples / tests can be found in the if __name__ is \"__main__\": section at the bottom of fluidIter.py. These are worth looking at because they explain what happens in various situations. Such as: Replacing a large sections of the list using a slice. Or using (and modifying) the same iterable in nested for loops.\n\nAs I stated to start with: this is a complicated solution that will hurt the readability of your code and make it more difficult to debug. Therefore other solutions such as the list comprehensions mentioned in David Raznick's answer should be considered first. That being said, I have found times where this class has been useful to me and has been easier to use than keeping track of the indices of elements that need deleting.\n\n\n\nEdit: As mentioned in the comments, this answer does not really present a problem for which this approach provides a solution. I will try to address that here:\n\nList comprehensions provide a way to generate a new list but these approaches tend to look at each element in isolation rather than the current state of the list as a whole.\n\ni.e.\n\nnewList = [i for i in oldList if testFunc(i)]\n\n\nBut what if the result of the testFunc depends on the elements that have been added to newList already? Or the elements still in oldList that might be added next? There might still be a way to use a list comprehension but it will begin to lose it's elegance, and for me it feels easier to modify a list in place.\n\nThe code below is one example of an algorithm that suffers from the above problem. The algorithm will reduce a list so that no element is a multiple of any other element.\n\nrandInts = [70, 20, 61, 80, 54, 18, 7, 18, 55, 9]\nfRandInts = FluidIterable(randInts)\nfRandIntsIter = fRandInts.__iter__()\n# for each value in the list (outer loop)\n# test against every other value in the list (inner loop)\nfor i in fRandIntsIter:\n    print(' ')\n    print('outer val: ', i)\n    innerIntsIter = fRandInts.__iter__()\n    for j in innerIntsIter:\n        innerIndex = innerIntsIter.currentIndex\n        # skip the element that the outloop is currently on\n        # because we don't want to test a value against itself\n        if not innerIndex == fRandIntsIter.currentIndex:\n            # if the test element, j, is a multiple \n            # of the reference element, i, then remove 'j'\n            if j%i == 0:\n                print('remove val: ', j)\n                # remove element in place, without breaking the\n                # iteration of either loop\n                del fRandInts[innerIndex]\n            # end if multiple, then remove\n        # end if not the same value as outer loop\n    # end inner loop\n# end outerloop\n\nprint('')\nprint('final list: ', randInts)\n\n\nThe output and the final reduced list are shown below\n\nouter val:  70\n\nouter val:  20\nremove val:  80\n\nouter val:  61\n\nouter val:  54\n\nouter val:  18\nremove val:  54\nremove val:  18\n\nouter val:  7\nremove val:  70\n\nouter val:  55\n\nouter val:  9\nremove val:  18\n\nfinal list:  [20, 61, 7, 55, 9]\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "It's hard to tell whether this is over-engineered because it's unclear what problem it's trying to solve; what does removing elements using this approach achieve that some_list[:] = [x for x in some_list if not some_condition(x)] doesn't achieve? Without an answer to that, why should anyone believe that downloading and using your 600-line library complete with typos and commented-out code is a better solution to their problem than the one-liner? -1.",
                "fecha": { "$date" : "2016-06-21T22:47:31Z" },
                "usuario": "Mark Amery",
                "usuario_id": 149
            },
            {
                "decripcion": "@MarkAmery. The main use case for when this is when trying to determine if an item should be removed (or added or moved) based not on just the item itself, but on the state of another item in the list or the state of the list as a whole. For example, it is not possible with list comprehensions to write something like some_list[:] = [x for x in some_list if not some_condition(y)] where y is a different list element from x. Nor would it be possible to write some_list[:] = [x for x in some_list if not some_condition(intermediateStateOf_some_list)].",
                "fecha": { "$date" : "2016-06-28T13:27:10Z" },
                "usuario": "Resonance",
                "usuario_id": 316
            }
        ],
        "usuario": "Resonance",
        "usuario_id": 316
    },
    {
        "_id": 198,
        "fecha": { "$date" : "2018-03-15T23:42:50Z" },
        "decripcion": "\nThe other answers are correct that it is usually a bad idea to delete from a list that you're iterating. Reverse iterating avoids the pitfalls, but it is much more difficult to follow code that does that, so usually you're better off using a list comprehension or filter.\n\nThere is, however, one case where it is safe to remove elements from a sequence that you are iterating: if you're only removing one item while you're iterating. This can be ensured using a return or a break. For example:\n\nfor i, item in enumerate(lst):\n    if item % 4 == 0:\n        foo(item)\n        del lst[i]\n        break\n\n\nThis is often easier to understand than a list comprehension when you're doing some operations with side effects on the first item in a list that meets some condition and then removing that item from the list immediately after.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Beefster",
        "usuario_id": 311
    },
    {
        "_id": 199,
        "fecha": { "$date" : "2018-09-21T16:14:52Z" },
        "decripcion": "\nIn some situations, where you're doing more than simply filtering a list one item at time, you want your iteration to change while iterating.\n\nHere is an example where copying the list beforehand is incorrect, reverse iteration is impossible and a list comprehension is also not an option.\n\n\"\"\" Sieve of Eratosthenes \"\"\"\n\ndef generate_primes(n):\n    \"\"\" Generates all primes less than n. \"\"\"\n    primes = list(range(2,n))\n    idx = 0\n    while idx < len(primes):\n        p = primes[idx]\n        for multiple in range(p+p, n, p):\n            try:\n                primes.remove(multiple)\n            except ValueError:\n                pass #EAFP\n        idx += 1\n        yield p\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "CodeKid",
        "usuario_id": 317
    },
    {
        "_id": 200,
        "fecha": { "$date" : "2018-12-03T21:04:05Z" },
        "decripcion": "\nI can think of three approaches to solve your problem. As an example, I will create a random list of tuples somelist = [(1,2,3), (4,5,6), (3,6,6), (7,8,9), (15,0,0), (10,11,12)]. The condition that I choose is sum of elements of a tuple = 15. In the final list we will only have those tuples whose sum is not equal to 15. \n\nWhat I have chosen is a randomly chosen example. Feel free to change the list of tuples and the condition that I have chosen. \n\nMethod 1.> Use the framework that you had suggested (where one fills in a code inside a for loop). I use a small code with del to delete a tuple that meets the said condition. However, this method will miss a tuple (which satisfies the said condition) if two consecutively placed tuples meet the given condition. \n\nfor tup in somelist:\n    if ( sum(tup)==15 ): \n        del somelist[somelist.index(tup)]\n\nprint somelist\n>>> [(1, 2, 3), (3, 6, 6), (7, 8, 9), (10, 11, 12)]\n\n\nMethod 2.> Construct a new list which contains elements (tuples) where the given condition is not met (this is the same thing as removing elements of list where the given condition is met). Following is the code for that:\n\nnewlist1 = [somelist[tup] for tup in range(len(somelist)) if(sum(somelist[tup])!=15)]\n\nprint newlist1\n>>>[(1, 2, 3), (7, 8, 9), (10, 11, 12)]\n\n\nMethod 3.> Find indices where the given condition is met, and then use remove elements (tuples) corresponding to those indices. Following is the code for that.\n\nindices = [i for i in range(len(somelist)) if(sum(somelist[i])==15)]\nnewlist2 = [tup for j, tup in enumerate(somelist) if j not in indices]\n\nprint newlist2\n>>>[(1, 2, 3), (7, 8, 9), (10, 11, 12)]\n\n\nMethod 1 and method 2 are faster than method 3. Method2 and method3 are more efficient than method1. I prefer method2. For the aforementioned example, time(method1) : time(method2) : time(method3) = 1 : 1 : 1.7\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Siddharth Satpathy",
        "usuario_id": 36
    },
    {
        "_id": 201,
        "fecha": { "$date" : "2018-08-22T23:36:31Z" },
        "decripcion": "\nFor anything that has the potential to be really big, I use the following. \n\nimport numpy as np\n\norig_list = np.array([1, 2, 3, 4, 5, 100, 8, 13])\n\nremove_me = [100, 1]\n\ncleaned = np.delete(orig_list, remove_me)\nprint(cleaned)\n\n\nThat should be significantly faster than anything else. \n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "From what I measured, NumPy starts to be faster for lists of more than 20 elements, and reaches >12x faster filtering for big lists of 1000 elements and more.",
                "fecha": { "$date" : "2019-05-14T13:06:00Z" },
                "usuario": "Georgy",
                "usuario_id": 70
            }
        ],
        "usuario": "CENTURION",
        "usuario_id": 318
    },
    {
        "_id": 202,
        "fecha": { "$date" : "2019-04-16T09:08:13Z" },
        "decripcion": "\nIf you will use the new list later, you can simply set the elem to None, and then judge it in the later loop, like this\n\nfor i in li:\n    i = None\n\nfor elem in li:\n    if elem is None:\n        continue\n\n\nIn this way, you dont't need copy the list and it's easier to understand. \n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Mark Zhang",
        "usuario_id": 319
    },
    {
        "_id": 203,
        "fecha": { "$date" : "2021-07-04T18:40:40Z" },
        "decripcion": "\nGiven a list of lists t,\nflat_list = [item for sublist in t for item in sublist]\n\nwhich means:\nflat_list = []\nfor sublist in t:\n    for item in sublist:\n        flat_list.append(item)\n\nis faster than the shortcuts posted so far. (t is the list to flatten.)\nHere is the corresponding function:\ndef flatten(t):\n    return [item for sublist in t for item in sublist]\n\nAs evidence, you can use the timeit module in the standard library:\n$ python -mtimeit -s't=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in t for item in sublist]'\n10000 loops, best of 3: 143 usec per loop\n$ python -mtimeit -s't=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(t, [])'\n1000 loops, best of 3: 969 usec per loop\n$ python -mtimeit -s't=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,t)'\n1000 loops, best of 3: 1.1 msec per loop\n\nExplanation: the shortcuts based on + (including the implied use in sum) are, of necessity, O(T**2) when there are T sublists -- as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So, for simplicity and without actual loss of generality, say you have T sublists of k items each: the first k items are copied back and forth T-1 times, the second k items T-2 times, and so on; total number of copies is k times the sum of x for x from 1 to T excluded, i.e., k * (T**2)/2.\nThe list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once.\n    ",
        "votes": 6027,
        "comentarios": [
            {
                "decripcion": "I tried a test with the same data, using itertools.chain.from_iterable :         $ python -mtimeit -s'from itertools import chain; l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'list(chain.from_iterable(l))'.   It runs a bit more than twice as fast as the nested list comprehension that's the fastest of the alternatives shown here.",
                "fecha": { "$date" : "2010-10-15T01:21:33Z" },
                "usuario": "intuited",
                "usuario_id": 321
            },
            {
                "decripcion": "I found the syntax hard to understand until I realized you can think of it exactly like nested for loops.  for sublist in l: for item in sublist: yield item",
                "fecha": { "$date" : "2011-07-27T16:43:18Z" },
                "usuario": "Rob Crowell",
                "usuario_id": 322
            },
            {
                "decripcion": "[leaf for tree in forest for leaf in tree] might be easier to comprehend and apply.",
                "fecha": { "$date" : "2013-08-29T01:38:20Z" },
                "usuario": "John Mee",
                "usuario_id": 323
            },
            {
                "decripcion": "@RobCrowell Same here. To me the list comprehension one doesn't read right, something feels off about it - I always seem to get it wrong and end up googling. To me this reads right [leaf for leaf in tree for tree in forest]. I wish this is how it was. I am sure I am missing something about the grammar here, and I would appreciate if anyone could point that out.",
                "fecha": { "$date" : "2021-07-12T17:19:14Z" },
                "usuario": "S\u043d\u0430\u0111\u043e\u0448\u0192\u0430\u04fd",
                "usuario_id": 324
            },
            {
                "decripcion": "I kept looking here every time I wanted to flatten a list, but this gif is what drove it home: i.stack.imgur.com/0GoV5.gif",
                "fecha": { "$date" : "2021-08-11T12:04:22Z" },
                "usuario": "Gilthans",
                "usuario_id": 325
            }
        ],
        "usuario": "Alex Martelli",
        "usuario_id": 288
    },
    {
        "_id": 204,
        "fecha": { "$date" : "2021-03-11T11:25:08Z" },
        "decripcion": "\nYou can use itertools.chain():\nimport itertools\n\nlist2d = [[1,2,3], [4,5,6], [7], [8,9]]\nmerged = list(itertools.chain(*list2d))\n\nOr you can use itertools.chain.from_iterable() which doesn't require unpacking the list with the * operator:\nmerged = list(itertools.chain.from_iterable(list2d))\n\n    ",
        "votes": 1900,
        "comentarios": [
            {
                "decripcion": "The * is the tricky thing that makes chain less straightforward than the list comprehension. You have to know that chain only joins together the iterables passed as parameters, and the * causes the top-level list to be expanded into parameters, so chain joins together all those iterables, but doesn't descend further. I think this makes the comprehension more readable than the use of chain in this case.",
                "fecha": { "$date" : "2014-09-03T14:13:45Z" },
                "usuario": "Tim Dierks",
                "usuario_id": 326
            },
            {
                "decripcion": "@TimDierks: I'm not sure \"this requires you to understand Python syntax\" is an argument against using a given technique in Python. Sure, complex usage could confuse, but the \"splat\" operator is generally useful in many circumstances, and this isn't using it in a particularly obscure way; rejecting all language features that aren't necessarily obvious to beginning users means you're tying one hand behind your back. May as well throw out list comprehensions too while you're at it; users from other backgrounds would find a for loop that repeatedly appends more obvious.",
                "fecha": { "$date" : "2015-11-12T20:26:36Z" },
                "usuario": "ShadowRanger",
                "usuario_id": 14
            }
        ],
        "usuario": "Shawn Chin",
        "usuario_id": 327
    },
    {
        "_id": 205,
        "fecha": { "$date" : "2021-05-19T10:17:49Z" },
        "decripcion": "\nNote from the author: This is inefficient. But fun, because monoids are awesome. It's not appropriate for production Python code.\n>>> l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\n>>> sum(l, [])\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nThis just sums the elements of iterable passed in the first argument, treating second argument as the initial value of the sum (if not given, 0 is used instead and this case will give you an error).\nBecause you are summing nested lists, you actually get [1,3]+[2,4] as a result of sum([[1,3],[2,4]],[]), which is equal to [1,3,2,4].\nNote that only works on lists of lists. For lists of lists of lists, you'll need another solution.\n    ",
        "votes": 1095,
        "comentarios": [
            {
                "decripcion": "that's pretty neat and clever but I wouldn't use it because it's confusing to read.",
                "fecha": { "$date" : "2010-06-15T18:55:14Z" },
                "usuario": "andrewrk",
                "usuario_id": 328
            },
            {
                "decripcion": "This is a Shlemiel the painter's algorithm joelonsoftware.com/articles/fog0000000319.html -- unnecessarily inefficient as well as unnecessarily ugly.",
                "fecha": { "$date" : "2012-04-25T18:24:57Z" },
                "usuario": "Mike Graham",
                "usuario_id": 329
            },
            {
                "decripcion": "The append operation on lists forms a Monoid, which is one of the most convenient abstractions for thinking of a + operation in a general sense (not limited to numbers only). So this answer deserves a +1 from me for (correct) treatment of lists as a monoid. The performance is concerning though...",
                "fecha": { "$date" : "2014-12-03T10:35:23Z" },
                "usuario": "ulidtko",
                "usuario_id": 330
            },
            {
                "decripcion": "this is a very inefficient way because of the quadratic aspect of the sum.",
                "fecha": { "$date" : "2017-07-31T18:04:59Z" },
                "usuario": "Jean-Fran\u00e7ois Fabre\u2666",
                "usuario_id": 258
            },
            {
                "decripcion": "This article explains the maths of the inefficiency mathieularose.com/how-not-to-flatten-a-list-of-lists-in-python",
                "fecha": { "$date" : "2018-01-04T16:46:19Z" },
                "usuario": "ds4940",
                "usuario_id": 331
            }
        ],
        "usuario": "Triptych",
        "usuario_id": 332
    },
    {
        "_id": 206,
        "fecha": { "$date" : "2021-07-16T05:39:21Z" },
        "decripcion": "\nI tested most suggested solutions with perfplot (a pet project of mine, essentially a wrapper around timeit), and found\nimport functools\nimport operator\nfunctools.reduce(operator.iconcat, a, [])\n\nto be the fastest solution, both when many small lists and few long lists are concatenated. (operator.iadd is equally fast.)\n\n\n\nCode to reproduce the plot:\nimport functools\nimport itertools\nimport numpy\nimport operator\nimport perfplot\n\n\ndef forfor(a):\n    return [item for sublist in a for item in sublist]\n\n\ndef sum_brackets(a):\n    return sum(a, [])\n\n\ndef functools_reduce(a):\n    return functools.reduce(operator.concat, a)\n\n\ndef functools_reduce_iconcat(a):\n    return functools.reduce(operator.iconcat, a, [])\n\n\ndef itertools_chain(a):\n    return list(itertools.chain.from_iterable(a))\n\n\ndef numpy_flat(a):\n    return list(numpy.array(a).flat)\n\n\ndef numpy_concatenate(a):\n    return list(numpy.concatenate(a))\n\n\nperfplot.show(\n    setup=lambda n: [list(range(10))] * n,\n    # setup=lambda n: [list(range(n))] * 10,\n    kernels=[\n        forfor,\n        sum_brackets,\n        functools_reduce,\n        functools_reduce_iconcat,\n        itertools_chain,\n        numpy_flat,\n        numpy_concatenate,\n    ],\n    n_range=[2 ** k for k in range(16)],\n    xlabel=\"num lists (of length 10)\",\n    # xlabel=\"len lists (10 lists total)\"\n)\n\n    ",
        "votes": 670,
        "comentarios": [
            {
                "decripcion": "For huge nested lists,' list(numpy.array(a).flat)' is the fastest among all functions above.",
                "fecha": { "$date" : "2019-01-20T13:57:20Z" },
                "usuario": "Sara",
                "usuario_id": 333
            },
            {
                "decripcion": "Is there a way to do a 3-d perfplot? number of arrays by average size of array?",
                "fecha": { "$date" : "2020-04-30T00:31:34Z" },
                "usuario": "Leo",
                "usuario_id": 334
            },
            {
                "decripcion": "@Sara can you define \"huge\" please?",
                "fecha": { "$date" : "2020-11-14T06:05:23Z" },
                "usuario": "Boris",
                "usuario_id": 335
            },
            {
                "decripcion": "Tried numpy_flat on the test example from Rossetta Code (link) and got VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray",
                "fecha": { "$date" : "2020-12-05T11:08:25Z" },
                "usuario": "mirekphd",
                "usuario_id": 336
            }
        ],
        "usuario": "Nico Schl\u00f6mer",
        "usuario_id": 337
    },
    {
        "_id": 207,
        "fecha": { "$date" : "2021-03-18T12:33:47Z" },
        "decripcion": "\n>>> from functools import reduce\n>>> l = [[1,2,3], [4,5,6], [7], [8,9]]\n>>> reduce(lambda x, y: x+y, l)\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nThe extend() method in your example modifies x instead of returning a useful value (which functools.reduce() expects).\nA faster way to do the reduce version would be\n>>> import operator\n>>> l = [[1,2,3], [4,5,6], [7], [8,9]]\n>>> reduce(operator.concat, l)\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    ",
        "votes": 233,
        "comentarios": [],
        "usuario": "Greg Hewgill",
        "usuario_id": 107
    },
    {
        "_id": 208,
        "fecha": { "$date" : "2021-06-11T13:46:31Z" },
        "decripcion": "\nHere is a general approach that applies to numbers, strings, nested lists and mixed containers.  This can flatten both simple and complicated containers (see also Demo).\nCode\nfrom typing import Iterable \n#from collections import Iterable                            # < py38\n\n\ndef flatten(items):\n    \"\"\"Yield items from any nested iterable; see Reference.\"\"\"\n    for x in items:\n        if isinstance(x, Iterable) and not isinstance(x, (str, bytes)):\n            for sub_x in flatten(x):\n                yield sub_x\n        else:\n            yield x\n\nNotes:\n\nIn Python 3, yield from flatten(x) can replace for sub_x in flatten(x): yield sub_x\nIn Python 3.8, abstract base classes are moved from collection.abc to the typing module.\n\nDemo\nsimple = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nlist(flatten(simple))\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ncomplicated = [[1, [2]], (3, 4, {5, 6}, 7), 8, \"9\"]              # numbers, strs, nested & mixed\nlist(flatten(complicated))\n# [1, 2, 3, 4, 5, 6, 7, 8, '9']\n\nReference\n\nThis solution is modified from a recipe in Beazley, D. and B. Jones.  Recipe 4.14, Python Cookbook 3rd Ed., O'Reilly Media Inc. Sebastopol, CA: 2013.\nFound an earlier SO post, possibly the original demonstration.\n\n    ",
        "votes": 139,
        "comentarios": [
            {
                "decripcion": "I just wrote pretty much the same, because I didn't see your solution ... here is what I looked for  \"recursively flatten complete multiple lists\" ... (+1)",
                "fecha": { "$date" : "2017-03-25T15:32:05Z" },
                "usuario": "Martin Thoma",
                "usuario_id": 338
            },
            {
                "decripcion": "@MartinThoma Much appreciated.  FYI, if flattening nested iterables is a common practice for you, there are some third-party packages that handle this well.  This may save from reinventing the wheel. I've mentioned more_itertools among others discussed in this post.  Cheers.",
                "fecha": { "$date" : "2017-03-25T17:51:51Z" },
                "usuario": "pylang",
                "usuario_id": 339
            },
            {
                "decripcion": "Maybe traverse could also be a good name for this way of a tree, whereas I'd keep it less universal for this answer by sticking to nested lists.",
                "fecha": { "$date" : "2017-06-15T10:22:27Z" },
                "usuario": "Wolf",
                "usuario_id": 340
            },
            {
                "decripcion": "You can check if hasattr(x, '__iter__') instead of importing/checking against Iterable and that will exclude strings as well.",
                "fecha": { "$date" : "2018-04-30T16:46:07Z" },
                "usuario": "Ryan Allen",
                "usuario_id": 341
            },
            {
                "decripcion": "the above code doesnt seem to work for if one of the nested lists is having a list of strings. [1, 2, [3, 4], [4], [], 9, 9.5, 'ssssss', ['str', 'sss', 'ss'], [3, 4, 5]] output:- [1, 2, 3, 4, 4, 9, 9.5, 'ssssss', 3, 4, 5]",
                "fecha": { "$date" : "2019-06-12T21:35:28Z" },
                "usuario": "sunnyX",
                "usuario_id": 342
            }
        ],
        "usuario": "pylang",
        "usuario_id": 339
    },
    {
        "_id": 209,
        "fecha": { "$date" : "2021-07-31T18:29:39Z" },
        "decripcion": "\nIf you want to flatten a data-structure where you don't know how deep it's nested you could use iteration_utilities.deepflatten1\n>>> from iteration_utilities import deepflatten\n\n>>> l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\n>>> list(deepflatten(l, depth=1))\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n>>> l = [[1, 2, 3], [4, [5, 6]], 7, [8, 9]]\n>>> list(deepflatten(l))\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nIt's a generator so you need to cast the result to a list or explicitly iterate over it.\n\nTo flatten only one level and if each of the items is itself iterable you can also use iteration_utilities.flatten which itself is just a thin wrapper around itertools.chain.from_iterable:\n>>> from iteration_utilities import flatten\n>>> l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\n>>> list(flatten(l))\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nJust to add some timings (based on Nico Schl\u00f6mer's answer that didn't include the function presented in this answer):\n\nIt's a log-log plot to accommodate for the huge range of values spanned. For qualitative reasoning: Lower is better.\nThe results show that if the iterable contains only a few inner iterables then sum will be fastest, however for long iterables only the itertools.chain.from_iterable, iteration_utilities.deepflatten or the nested comprehension have reasonable performance with itertools.chain.from_iterable being the fastest (as already noticed by Nico Schl\u00f6mer).\nfrom itertools import chain\nfrom functools import reduce\nfrom collections import Iterable  # or from collections.abc import Iterable\nimport operator\nfrom iteration_utilities import deepflatten\n\ndef nested_list_comprehension(lsts):\n    return [item for sublist in lsts for item in sublist]\n\ndef itertools_chain_from_iterable(lsts):\n    return list(chain.from_iterable(lsts))\n\ndef pythons_sum(lsts):\n    return sum(lsts, [])\n\ndef reduce_add(lsts):\n    return reduce(lambda x, y: x + y, lsts)\n\ndef pylangs_flatten(lsts):\n    return list(flatten(lsts))\n\ndef flatten(items):\n    \"\"\"Yield items from any nested iterable; see REF.\"\"\"\n    for x in items:\n        if isinstance(x, Iterable) and not isinstance(x, (str, bytes)):\n            yield from flatten(x)\n        else:\n            yield x\n\ndef reduce_concat(lsts):\n    return reduce(operator.concat, lsts)\n\ndef iteration_utilities_deepflatten(lsts):\n    return list(deepflatten(lsts, depth=1))\n\n\nfrom simple_benchmark import benchmark\n\nb = benchmark(\n    [nested_list_comprehension, itertools_chain_from_iterable, pythons_sum, reduce_add,\n     pylangs_flatten, reduce_concat, iteration_utilities_deepflatten],\n    arguments={2**i: [[0]*5]*(2**i) for i in range(1, 13)},\n    argument_name='number of inner lists'\n)\n\nb.plot()\n\n\n1 Disclaimer: I'm the author of that library\n    ",
        "votes": 69,
        "comentarios": [],
        "usuario": "MSeifert",
        "usuario_id": 343
    },
    {
        "_id": 210,
        "fecha": { "$date" : "2020-09-08T19:44:09Z" },
        "decripcion": "\nConsider installing the more_itertools package.\n> pip install more_itertools\n\nIt ships with an implementation for flatten (source, from the itertools recipes):\nimport more_itertools\n\n\nlst = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nlist(more_itertools.flatten(lst))\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nNote: as mentioned in the docs, flatten requires a list of lists.  See below on flattening more irregular inputs.\n\nAs of version 2.4, you can flatten more complicated, nested iterables with more_itertools.collapse (source, contributed by  abarnet).\nlst = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nlist(more_itertools.collapse(lst)) \n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nlst = [[1, 2, 3], [[4, 5, 6]], [[[7]]], 8, 9]              # complex nesting\nlist(more_itertools.collapse(lst))\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    ",
        "votes": 36,
        "comentarios": [
            {
                "decripcion": "If you can afford adding a package to your project - this answer is best",
                "fecha": { "$date" : "2020-03-05T15:53:44Z" },
                "usuario": "viddik13",
                "usuario_id": 344
            },
            {
                "decripcion": "it fails when all elements are not list. (e.g. lst=[1, [2,3]]). of course integer is not iterable.",
                "fecha": { "$date" : "2020-09-08T08:32:47Z" },
                "usuario": "Sajad.sni",
                "usuario_id": 345
            },
            {
                "decripcion": "also, mind that list of strings will be flattened to a list of characters",
                "fecha": { "$date" : "2020-10-30T02:05:13Z" },
                "usuario": "viddik13",
                "usuario_id": 344
            }
        ],
        "usuario": "pylang",
        "usuario_id": 339
    },
    {
        "_id": 211,
        "fecha": { "$date" : "2019-11-19T16:26:36Z" },
        "decripcion": "\nThe reason your function didn't work is because the extend extends an array in-place and doesn't return it. You can still return x from lambda, using something like this:\n\nreduce(lambda x,y: x.extend(y) or x, l)\n\n\nNote: extend is more efficient than + on lists.\n    ",
        "votes": 29,
        "comentarios": [
            {
                "decripcion": "extend is better used as newlist = [], extend = newlist.extend, for sublist in l: extend(l) as it avoids the (rather large) overhead of the lambda, the attribute lookup on x, and the or.",
                "fecha": { "$date" : "2011-09-24T10:12:35Z" },
                "usuario": "agf",
                "usuario_id": 346
            },
            {
                "decripcion": "for python 3 add from functools import reduce",
                "fecha": { "$date" : "2019-07-02T12:24:14Z" },
                "usuario": "Markus Dutschke",
                "usuario_id": 347
            }
        ],
        "usuario": "Igor Krivokon",
        "usuario_id": 348
    },
    {
        "_id": 212,
        "fecha": { "$date" : "2021-07-31T18:46:27Z" },
        "decripcion": "\nThe following seems simplest to me:\n>>> import numpy as np\n>>> l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\n>>> print (np.concatenate(l))\n[1 2 3 4 5 6 7 8 9]\n\n    ",
        "votes": 19,
        "comentarios": [],
        "usuario": "devil in the detail",
        "usuario_id": 349
    },
    {
        "_id": 213,
        "fecha": { "$date" : "2018-07-20T18:16:43Z" },
        "decripcion": "\nmatplotlib.cbook.flatten() will work for nested lists even if they nest more deeply than the example.\n\nimport matplotlib\nl = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]\nprint(list(matplotlib.cbook.flatten(l)))\nl2 = [[1, 2, 3], [4, 5, 6], [7], [8, [9, 10, [11, 12, [13]]]]]\nprint list(matplotlib.cbook.flatten(l2))\n\n\nResult:\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n\nThis is 18x faster than underscore._.flatten:\n\nAverage time over 1000 trials of matplotlib.cbook.flatten: 2.55e-05 sec\nAverage time over 1000 trials of underscore._.flatten: 4.63e-04 sec\n(time for underscore._)/(time for matplotlib.cbook) = 18.1233394636\n\n    ",
        "votes": 18,
        "comentarios": [
            {
                "decripcion": "I think this is the fast of above all functions",
                "fecha": { "$date" : "2021-09-08T14:33:29Z" },
                "usuario": "abdul",
                "usuario_id": 350
            }
        ],
        "usuario": "EL_DON",
        "usuario_id": 351
    },
    {
        "_id": 214,
        "fecha": { "$date" : "2021-07-31T18:20:17Z" },
        "decripcion": "\nOne can also use NumPy's flat:\nimport numpy as np\nlist(np.array(l).flat)\n\nIt only works when sublists have identical dimensions.\n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "mdh",
        "usuario_id": 352
    },
    {
        "_id": 215,
        "fecha": { "$date" : "2020-01-28T13:06:28Z" },
        "decripcion": "\nyou can use list extend method, it shows to be the fastest:\n\nflat_list = []\nfor sublist in l:\n    flat_list.extend(sublist)\n\n\nperformance:\n\nimport functools\nimport itertools\nimport numpy\nimport operator\nimport perfplot\n\n\n\ndef functools_reduce_iconcat(a):\n    return functools.reduce(operator.iconcat, a, [])\n\n\ndef itertools_chain(a):\n    return list(itertools.chain.from_iterable(a))\n\n\ndef numpy_flat(a):\n    return list(numpy.array(a).flat)\n\n\ndef extend(a):\n    n = []\n\n    list(map(n.extend, a))\n\n    return n \n\n\nperfplot.show(\n    setup=lambda n: [list(range(10))] * n,\n    kernels=[\n        functools_reduce_iconcat, extend,itertools_chain, numpy_flat\n        ],\n    n_range=[2**k for k in range(16)],\n    xlabel='num lists',\n    )\n\n\noutput:\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "kederrac",
        "usuario_id": 353
    },
    {
        "_id": 216,
        "fecha": { "$date" : "2021-07-31T18:25:02Z" },
        "decripcion": "\nIf you are willing to give up a tiny amount of speed for a cleaner look, then you could use numpy.concatenate().tolist() or numpy.concatenate().ravel().tolist():\nimport numpy\n\nl = [[1, 2, 3], [4, 5, 6], [7], [8, 9]] * 99\n\n%timeit numpy.concatenate(l).ravel().tolist()\n1000 loops, best of 3: 313 \u00b5s per loop\n\n%timeit numpy.concatenate(l).tolist()\n1000 loops, best of 3: 312 \u00b5s per loop\n\n%timeit [item for sublist in l for item in sublist]\n1000 loops, best of 3: 31.5 \u00b5s per loop\n\nYou can find out more here in the documentation, numpy.concatenate and numpy.ravel.\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "Doesn't work for unevenly nested lists like [1, 2, [3], [[4]], [5, [6]]]",
                "fecha": { "$date" : "2019-04-22T21:39:37Z" },
                "usuario": "EL_DON",
                "usuario_id": 351
            },
            {
                "decripcion": "@EL_DON of course, that isn't what this question is asking, there is another question that deals with that case",
                "fecha": { "$date" : "2021-07-31T18:54:23Z" },
                "usuario": "juanpa.arrivillaga",
                "usuario_id": 102
            },
            {
                "decripcion": "@juanpa.arrivillaga it's a simple and natural extension of the question, though. Answers that can handle greater depth of nesting are more likely to be useful to someone who finds this question.",
                "fecha": { "$date" : "2021-08-02T19:53:32Z" },
                "usuario": "EL_DON",
                "usuario_id": 351
            }
        ],
        "usuario": "mkultra",
        "usuario_id": 354
    },
    {
        "_id": 217,
        "fecha": { "$date" : "2017-08-08T14:59:07Z" },
        "decripcion": "\ndef flatten(alist):\n    if alist == []:\n        return []\n    elif type(alist) is not list:\n        return [alist]\n    else:\n        return flatten(alist[0]) + flatten(alist[1:])\n\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "Fails for python2.7 for the example nested list in the question: [[1, 2, 3], [4, 5, 6], [7], [8, 9]]",
                "fecha": { "$date" : "2019-04-22T21:34:17Z" },
                "usuario": "EL_DON",
                "usuario_id": 351
            }
        ],
        "usuario": "englealuze",
        "usuario_id": 355
    },
    {
        "_id": 218,
        "fecha": { "$date" : "2018-06-19T19:38:25Z" },
        "decripcion": "\nNote: Below applies to Python 3.3+ because it uses yield_from.  six is also a third-party package, though it is stable.  Alternately, you could use sys.version.\n\n\n\nIn the case of obj = [[1, 2,], [3, 4], [5, 6]], all of the solutions here are good, including list comprehension and itertools.chain.from_iterable.\n\nHowever, consider this slightly more complex case:\n\n>>> obj = [[1, 2, 3], [4, 5], 6, 'abc', [7], [8, [9, 10]]]\n\n\nThere are several problems here:\n\n\nOne element, 6, is just a scalar; it's not iterable, so the above routes will fail here.\nOne element, 'abc', is technically iterable (all strs are).  However, reading between the lines a bit, you don't want to treat it as such--you want to treat it as a single element.\nThe final element, [8, [9, 10]] is itself a nested iterable.  Basic list comprehension and chain.from_iterable only extract \"1 level down.\"\n\n\nYou can remedy this as follows:\n\n>>> from collections import Iterable\n>>> from six import string_types\n\n>>> def flatten(obj):\n...     for i in obj:\n...         if isinstance(i, Iterable) and not isinstance(i, string_types):\n...             yield from flatten(i)\n...         else:\n...             yield i\n\n\n>>> list(flatten(obj))\n[1, 2, 3, 4, 5, 6, 'abc', 7, 8, 9, 10]\n\n\nHere, you check that the sub-element (1) is iterable with Iterable, an ABC from itertools, but also want to ensure that (2) the element is not \"string-like.\"\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "If you are still interested in Python 2 compatibility, change yield from to a for loop, e.g. for x in flatten(i): yield x",
                "fecha": { "$date" : "2018-06-19T19:06:43Z" },
                "usuario": "pylang",
                "usuario_id": 339
            }
        ],
        "usuario": "Brad Solomon",
        "usuario_id": 356
    },
    {
        "_id": 219,
        "fecha": { "$date" : "2018-05-20T08:47:32Z" },
        "decripcion": "\nThis may not be the most efficient way but I thought to put a one-liner (actually a two-liner). Both versions will work on arbitrary hierarchy nested lists, and exploits language features (Python3.5) and recursion.\n\ndef make_list_flat (l):\n    flist = []\n    flist.extend ([l]) if (type (l) is not list) else [flist.extend (make_list_flat (e)) for e in l]\n    return flist\n\na = [[1, 2], [[[[3, 4, 5], 6]]], 7, [8, [9, [10, 11], 12, [13, 14, [15, [[16, 17], 18]]]]]]\nflist = make_list_flat(a)\nprint (flist)\n\n\nThe output is\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n\n\nThis works in a depth first manner. The recursion goes down until it finds a non-list element, then extends the local variable flist and then rolls back it to the parent. Whenever flist is returned, it is extended to the parent's flist in the list comprehension. Therefore, at the root, a flat list is returned.\n\nThe above one creates several local lists and returns them which are used to extend the parent's list. I think the way around for this may be creating a gloabl flist, like below.\n\na = [[1, 2], [[[[3, 4, 5], 6]]], 7, [8, [9, [10, 11], 12, [13, 14, [15, [[16, 17], 18]]]]]]\nflist = []\ndef make_list_flat (l):\n    flist.extend ([l]) if (type (l) is not list) else [make_list_flat (e) for e in l]\n\nmake_list_flat(a)\nprint (flist)\n\n\nThe output is again\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n\n\nAlthough I am not sure at this time about the efficiency.\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "Why extend([l]) instead of append(l)?",
                "fecha": { "$date" : "2020-04-09T18:31:12Z" },
                "usuario": "Maciek",
                "usuario_id": 357
            }
        ],
        "usuario": "phoxis",
        "usuario_id": 358
    },
    {
        "_id": 220,
        "fecha": { "$date" : "2021-09-01T23:21:13Z" },
        "decripcion": "\nThere are several answers with the same recursive appending scheme as below, but none makes use of try, which makes the solution more robust and Pythonic.\ndef flatten(itr):\n    for x in itr:\n        try:\n            yield from flatten(x)\n        except TypeError:\n            yield x\n\nUsage: this is a generator, you typically want to enclose it in an iterable builder like list() or tuple() or use it in a for loop.\nAdvantages of this solution are:\n\nworks with any kind of iterable (even future ones!)\nworks with any combination and deepness of nesting\nworks also if top level contains bare items\nno dependencies\nefficient (you can flatten the nested iterable partially, without wasting time on the remaining part you don't need)\nversatile (you can use it to build an iterable of your choice or in a loop)\n\nN.B. since ALL iterables are flattened, strings are decomposed into sequences of single characters. If you don't like/want such behavior, you can use the following version which filters out from flattening iterables like strings and bytes:\ndef flatten(itr):\n    if type(itr) in (str,bytes):\n        yield itr\n    else:\n        for x in itr:\n            try:\n                yield from flatten(x)\n            except TypeError:\n                yield x\n\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "why would you use a tuple? now your solution is inefficient.",
                "fecha": { "$date" : "2021-07-31T18:53:23Z" },
                "usuario": "juanpa.arrivillaga",
                "usuario_id": 102
            },
            {
                "decripcion": "And with any sequence, sum((flatten(e) for e in itr), tuple()) is highly inefficient,",
                "fecha": { "$date" : "2021-07-31T18:53:53Z" },
                "usuario": "juanpa.arrivillaga",
                "usuario_id": 102
            },
            {
                "decripcion": "@juanpa.arrivillaga Your comment made me think about improving my answer and I think I found a better one, what do you think?",
                "fecha": { "$date" : "2021-08-01T17:37:17Z" },
                "usuario": "mmj",
                "usuario_id": 359
            }
        ],
        "usuario": "mmj",
        "usuario_id": 359
    },
    {
        "_id": 221,
        "fecha": { "$date" : "2018-09-13T11:34:20Z" },
        "decripcion": "\nAnother unusual approach that works for hetero- and homogeneous lists of integers:\n\nfrom typing import List\n\n\ndef flatten(l: list) -> List[int]:\n    \"\"\"Flatten an arbitrary deep nested list of lists of integers.\n\n    Examples:\n        >>> flatten([1, 2, [1, [10]]])\n        [1, 2, 1, 10]\n\n    Args:\n        l: Union[l, Union[int, List[int]]\n\n    Returns:\n        Flatted list of integer\n    \"\"\"\n    return [int(i.strip('[ ]')) for i in str(l).split(',')]\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "That's just a more complicated and a bit slower way of what \u1d21\u029c\u1d00\u1d04\u1d0b\u1d00\u1d0d\u1d00\u1d05\u1d0f\u1d0f\u1d05\u029f\u1d073000 already posted before. I reinvented his proposal yesterday, so this approach seems quite popular these days ;)",
                "fecha": { "$date" : "2018-01-10T22:03:32Z" },
                "usuario": "Darkonaut",
                "usuario_id": 360
            },
            {
                "decripcion": "Not quite:  wierd_list = [[1, 2, 3], [4, 5, 6], [7], [8, 9], 10] >> nice_list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0]",
                "fecha": { "$date" : "2018-01-11T08:17:10Z" },
                "usuario": "tharndt",
                "usuario_id": 361
            },
            {
                "decripcion": "my code as one liner would be :  flat_list = [int(e.replace('[','').replace(']','')) for e in str(deep_list).split(',')]",
                "fecha": { "$date" : "2018-01-11T08:32:18Z" },
                "usuario": "tharndt",
                "usuario_id": 361
            },
            {
                "decripcion": "You are indeed right +1, \u1d21\u029c\u1d00\u1d04\u1d0b\u1d00\u1d0d\u1d00\u1d05\u1d0f\u1d0f\u1d05\u029f\u1d073000's proposal won't work with multiple digit numbers, I also didn't test this before although it should be obvious. You could simplify your code and write [int(e.strip('[ ]')) for e in str(deep_list).split(',')]. But I'd suggest to stick with Deleet's proposal for real use cases. It doesn't contain hacky type transformations, it's faster and more versatile because it naturally also handles lists with mixed types.",
                "fecha": { "$date" : "2018-01-11T16:31:09Z" },
                "usuario": "Darkonaut",
                "usuario_id": 360
            },
            {
                "decripcion": "Unfortunately no. But I saw this code recently here: Python Practice Book 6.1.2",
                "fecha": { "$date" : "2018-01-15T08:18:01Z" },
                "usuario": "tharndt",
                "usuario_id": 361
            }
        ],
        "usuario": "tharndt",
        "usuario_id": 361
    },
    {
        "_id": 222,
        "fecha": { "$date" : "2020-11-06T17:13:39Z" },
        "decripcion": "\nnp.hstack(listoflist).tolist()\n\n    ",
        "votes": -2,
        "comentarios": [
            {
                "decripcion": "While this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value. Consider reading How to Answer and edit your answer to improve it.",
                "fecha": { "$date" : "2020-11-06T19:31:40Z" },
                "usuario": "Donald Duck",
                "usuario_id": 362
            }
        ],
        "usuario": "Mehmet Burak Say\u0131c\u0131",
        "usuario_id": 363
    },
    {
        "_id": 223,
        "fecha": { "$date" : "2021-01-28T13:45:16Z" },
        "decripcion": "\nSolution\nSince Python 3, input returns a string which you have to explicitly convert to ints, with int, like this\nx = int(input(\"Enter a number: \"))\ny = int(input(\"Enter a number: \"))\n\nYou can accept numbers of any base and convert them directly to base-10 with the int function, like this\n>>> data = int(input(\"Enter a number: \"), 8)\nEnter a number: 777\n>>> data\n511\n>>> data = int(input(\"Enter a number: \"), 16)\nEnter a number: FFFF\n>>> data\n65535\n>>> data = int(input(\"Enter a number: \"), 2)\nEnter a number: 10101010101\n>>> data\n1365\n\nThe second parameter tells what is the base of the numbers entered and then internally it understands and converts it. If the entered data is wrong it will throw a ValueError.\n>>> data = int(input(\"Enter a number: \"), 2)\nEnter a number: 1234\nTraceback (most recent call last):\n  File \"<input>\", line 1, in <module>\nValueError: invalid literal for int() with base 2: '1234'\n\nFor values that can have a fractional component, the type would be float rather than int:\nx = float(input(\"Enter a number:\"))\n\nDifferences between Python 2 and 3\nSummary\n\nPython 2's input function evaluated the received data, converting it to an integer implicitly (read the next section to understand the implication), but Python 3's input function does not do that anymore.\nPython 2's equivalent of Python 3's input is the raw_input function.\n\nPython 2.x\nThere were two functions to get user input, called input and raw_input. The difference between them is, raw_input doesn't evaluate the data and returns as it is, in string form. But, input will evaluate whatever you entered and the result of evaluation will be returned. For example,\n>>> import sys\n>>> sys.version\n'2.7.6 (default, Mar 22 2014, 22:59:56) \\n[GCC 4.8.2]'\n>>> data = input(\"Enter a number: \")\nEnter a number: 5 + 17\n>>> data, type(data)\n(22, <type 'int'>)\n\nThe data 5 + 17 is evaluated and the result is 22. When it evaluates the expression 5 + 17, it detects that you are adding two numbers and so the result will also be of the same int type. So, the type conversion is done for free and 22 is returned as the result of input and stored in data variable. You can think of input as the raw_input composed with an eval call.\n>>> data = eval(raw_input(\"Enter a number: \"))\nEnter a number: 5 + 17\n>>> data, type(data)\n(22, <type 'int'>)\n\nNote: you should be careful when you are using input in Python 2.x. I explained why one should be careful when using it, in this answer.\nBut, raw_input doesn't evaluate the input and returns as it is, as a string.\n>>> import sys\n>>> sys.version\n'2.7.6 (default, Mar 22 2014, 22:59:56) \\n[GCC 4.8.2]'\n>>> data = raw_input(\"Enter a number: \")\nEnter a number: 5 + 17\n>>> data, type(data)\n('5 + 17', <type 'str'>)\n\nPython 3.x\nPython 3.x's input and Python 2.x's raw_input are similar and raw_input is not available in Python 3.x.\n>>> import sys\n>>> sys.version\n'3.4.0 (default, Apr 11 2014, 13:05:11) \\n[GCC 4.8.2]'\n>>> data = input(\"Enter a number: \")\nEnter a number: 5 + 17\n>>> data, type(data)\n('5 + 17', <class 'str'>)\n\n    ",
        "votes": 354,
        "comentarios": [
            {
                "decripcion": "Is there any other way, like a function or something so that we dont need to convert to int in 3.x other than doing explicit conversion to int??",
                "fecha": { "$date" : "2016-04-09T06:19:24Z" },
                "usuario": "Shreyan Mehta",
                "usuario_id": 368
            },
            {
                "decripcion": "@ShreyanMehta eval would work, but don't go for that unless you have pressing reasons.",
                "fecha": { "$date" : "2016-04-09T07:01:32Z" },
                "usuario": "thefourtheye",
                "usuario_id": 369
            },
            {
                "decripcion": "@thefourtheye at least use ast.literal_eval for that. It does not have the security concerns of eval.",
                "fecha": { "$date" : "2018-04-06T12:48:28Z" },
                "usuario": "spectras",
                "usuario_id": 370
            }
        ],
        "usuario": "thefourtheye",
        "usuario_id": 369
    },
    {
        "_id": 224,
        "fecha": { "$date" : "2019-05-17T12:08:00Z" },
        "decripcion": "\nIn Python 3.x, raw_input was renamed to input and the Python 2.x input was removed.  \n\nThis means that, just like raw_input, input in Python 3.x always returns a string object.\n\nTo fix the problem, you need to explicitly make those inputs into integers by putting them in int:\n\nx = int(input(\"Enter a number: \"))\ny = int(input(\"Enter a number: \"))\n\n    ",
        "votes": 49,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 225,
        "fecha": { "$date" : "2019-05-17T12:11:57Z" },
        "decripcion": "\nFor multiple integer in a single line, map might be better.\n\narr = map(int, raw_input().split())\n\n\nIf the number is already known, (like 2 integers), you can use\n\nnum1, num2 = map(int, raw_input().split())\n\n    ",
        "votes": 32,
        "comentarios": [],
        "usuario": "user1341043",
        "usuario_id": 371
    },
    {
        "_id": 226,
        "fecha": { "$date" : "2019-05-17T12:12:35Z" },
        "decripcion": "\ninput() (Python 3) and raw_input() (Python 2) always return strings. Convert the result to integer explicitly with int().\n\nx = int(input(\"Enter a number: \"))\ny = int(input(\"Enter a number: \"))\n\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "Martijn Pieters",
        "usuario_id": 15
    },
    {
        "_id": 227,
        "fecha": { "$date" : "2020-05-27T09:51:58Z" },
        "decripcion": "\nMultiple questions require input for several integers on single line.  The best way is to input the whole string of numbers one one line and then split them to integers. Here is a Python 3 version:\n\na = []\np = input()\np = p.split()      \nfor i in p:\n    a.append(int(i))\n\n\nAlso a list comprehension can be used\n\np = input().split(\"whatever the seperator is\")\n\n\nAnd to convert all the inputs from string to int we do the following\n\nx = [int(i) for i in p]\nprint(x, end=' ')\n\n\nshall print the list elements in a straight line.\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "gumboy",
        "usuario_id": 372
    },
    {
        "_id": 228,
        "fecha": { "$date" : "2017-01-26T04:28:51Z" },
        "decripcion": "\nConvert to integers:\n\nmy_number = int(input(\"enter the number\"))\n\n\nSimilarly for floating point numbers:\n\nmy_decimalnumber = float(input(\"enter the number\"))\n\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Hemanth Savasere",
        "usuario_id": 373
    },
    {
        "_id": 229,
        "fecha": { "$date" : "2018-08-03T16:30:31Z" },
        "decripcion": "\nn=int(input())\nfor i in range(n):\n    n=input()\n    n=int(n)\n    arr1=list(map(int,input().split()))\n\n\nthe for loop shall run 'n' number of times . the second 'n' is the length of the array.\nthe last statement maps the integers to a list and takes input in space separated form .\nyou can also return the array at the end of for loop.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "ravi tanwar",
        "usuario_id": 374
    },
    {
        "_id": 230,
        "fecha": { "$date" : "2014-05-23T11:32:22Z" },
        "decripcion": "\nI encountered a problem of taking integer input while solving a problem on CodeChef, where two integers - separated by space - should be read from one line.\n\nWhile int(input()) is sufficient for a single integer, I did not find a direct way to input two integers.  I tried this:\n\nnum = input()\nnum1 = 0\nnum2 = 0\n\nfor i in range(len(num)):\n    if num[i] == ' ':\n        break\n\nnum1 = int(num[:i])\nnum2 = int(num[i+1:])\n\n\nNow I use num1 and  num2 as integers.  Hope this helps.\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "This looks very interesting.  However, isn't i destroyed when the for loop is exited?",
                "fecha": { "$date" : "2014-05-23T16:33:19Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "@hosch250 When a loop is exited, the value of the index variable (here, i) remains.  I tried this piece out, and it works correctly.",
                "fecha": { "$date" : "2014-05-24T15:18:11Z" },
                "usuario": "Aravind",
                "usuario_id": 375
            },
            {
                "decripcion": "For this kind of input manipulation, you can either num1, num2 = map(int, input().split()) if you know how much integers you will encounter or nums = list(map(int, input().split())) if you don't.",
                "fecha": { "$date" : "2018-07-12T12:58:38Z" },
                "usuario": "301_Moved_Permanently",
                "usuario_id": 376
            }
        ],
        "usuario": "Aravind",
        "usuario_id": 375
    },
    {
        "_id": 231,
        "fecha": { "$date" : "2019-04-04T08:47:19Z" },
        "decripcion": "\ndef dbz():\n    try:\n        r = raw_input(\"Enter number:\")\n        if r.isdigit():\n            i = int(raw_input(\"Enter divident:\"))\n            d = int(r)/i\n            print \"O/p is -:\",d\n        else:\n            print \"Not a number\"\n    except Exception ,e:\n        print \"Program halted incorrect data entered\",type(e)\ndbz()\n\nOr \n\nnum = input(\"Enter Number:\")#\"input\" will accept only numbers\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Sanyal",
        "usuario_id": 377
    },
    {
        "_id": 232,
        "fecha": { "$date" : "2016-11-23T12:19:52Z" },
        "decripcion": "\nWhile in your example, int(input(...)) does the trick in any case, python-future's builtins.input is worth consideration since that makes sure your code works for both Python 2 and 3 and disables Python2's default behaviour of input trying to be \"clever\" about the input data type (builtins.input basically just behaves like raw_input).\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Tobias Kienzler",
        "usuario_id": 378
    },
    {
        "_id": 233,
        "fecha": { "$date" : "2019-11-28T01:43:27Z" },
        "decripcion": "\nHere's a generator that yields the chunks you want:\n\ndef chunks(lst, n):\n    \"\"\"Yield successive n-sized chunks from lst.\"\"\"\n    for i in range(0, len(lst), n):\n        yield lst[i:i + n]\n\n\n\n\nimport pprint\npprint.pprint(list(chunks(range(10, 75), 10)))\n[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n [70, 71, 72, 73, 74]]\n\n\n\n\nIf you're using Python 2, you should use xrange() instead of range():\n\ndef chunks(lst, n):\n    \"\"\"Yield successive n-sized chunks from lst.\"\"\"\n    for i in xrange(0, len(lst), n):\n        yield lst[i:i + n]\n\n\n\n\nAlso you can simply use list comprehension instead of writing a function, though it's a good idea to encapsulate operations like this in named functions so that your code is easier to understand. Python 3:\n\n[lst[i:i + n] for i in range(0, len(lst), n)]\n\n\nPython 2 version:\n\n[lst[i:i + n] for i in xrange(0, len(lst), n)]\n\n    ",
        "votes": 3802,
        "comentarios": [
            {
                "decripcion": "What happens if we can't tell the length of the list? Try this on itertools.repeat([ 1, 2, 3 ]), e.g.",
                "fecha": { "$date" : "2008-11-23T12:51:10Z" },
                "usuario": "jespern",
                "usuario_id": 380
            },
            {
                "decripcion": "That's an interesting extension to the question, but the original question clearly asked about operating on a list.",
                "fecha": { "$date" : "2008-11-23T13:53:37Z" },
                "usuario": "Ned Batchelder",
                "usuario_id": 381
            },
            {
                "decripcion": "this functions needs to be in the damn standard library",
                "fecha": { "$date" : "2018-02-04T14:19:55Z" },
                "usuario": "dgan",
                "usuario_id": 382
            },
            {
                "decripcion": "@Calimo: what do you suggest? I hand you a list with 47 elements. How would you like to split it into \"evenly sized chunks\"? The OP accepted the answer, so they are clearly OK with the last differently sized chunk. Perhaps the English phrase is imprecise?",
                "fecha": { "$date" : "2018-06-14T15:29:23Z" },
                "usuario": "Ned Batchelder",
                "usuario_id": 381
            },
            {
                "decripcion": "Most people will be looking at this for batch processing and rate limiting, so it usually doesn't matter if the last chunk is smaller",
                "fecha": { "$date" : "2019-07-04T12:46:37Z" },
                "usuario": "Alvaro",
                "usuario_id": 383
            }
        ],
        "usuario": "Ned Batchelder",
        "usuario_id": 381
    },
    {
        "_id": 234,
        "fecha": { "$date" : "2020-01-06T10:56:07Z" },
        "decripcion": "\nIf you want something super simple:\n\ndef chunks(l, n):\n    n = max(1, n)\n    return (l[i:i+n] for i in range(0, len(l), n))\n\n\nUse xrange() instead of range() in the case of Python 2.x\n    ",
        "votes": 609,
        "comentarios": [
            {
                "decripcion": "Or (if we're doing different representations of this particular function) you could define a lambda function via: lambda x,y: [ x[i:i+y] for i in range(0,len(x),y)] . I love this list-comprehension method!",
                "fecha": { "$date" : "2011-08-20T13:54:34Z" },
                "usuario": "J-P",
                "usuario_id": 384
            },
            {
                "decripcion": "Using short circuiting, len(l) or 1 to deal with empty lists.",
                "fecha": { "$date" : "2021-08-12T15:24:35Z" },
                "usuario": "keepAlive",
                "usuario_id": 385
            }
        ],
        "usuario": "oremj",
        "usuario_id": 386
    },
    {
        "_id": 235,
        "fecha": { "$date" : "2017-09-21T09:47:29Z" },
        "decripcion": "\nDirectly from the (old) Python documentation (recipes for itertools):\n\nfrom itertools import izip, chain, repeat\n\ndef grouper(n, iterable, padvalue=None):\n    \"grouper(3, 'abcdefg', 'x') --> ('a','b','c'), ('d','e','f'), ('g','x','x')\"\n    return izip(*[chain(iterable, repeat(padvalue, n-1))]*n)\n\n\nThe current version, as suggested by J.F.Sebastian:\n\n#from itertools import izip_longest as zip_longest # for Python 2.x\nfrom itertools import zip_longest # for Python 3.x\n#from six.moves import zip_longest # for both (uses the six compat library)\n\ndef grouper(n, iterable, padvalue=None):\n    \"grouper(3, 'abcdefg', 'x') --> ('a','b','c'), ('d','e','f'), ('g','x','x')\"\n    return zip_longest(*[iter(iterable)]*n, fillvalue=padvalue)\n\n\nI guess Guido's time machine works\u2014worked\u2014will work\u2014will have worked\u2014was working again.\n\nThese solutions work because [iter(iterable)]*n (or the equivalent in the earlier version) creates one iterator, repeated n times in the list. izip_longest then effectively performs a round-robin of \"each\" iterator; because this is the same iterator, it is advanced by each such call, resulting in each such zip-roundrobin generating one tuple of n items.\n    ",
        "votes": 323,
        "comentarios": [
            {
                "decripcion": "upvoted this because it works on generators (no len) and uses the generally faster itertools module.",
                "fecha": { "$date" : "2012-01-30T23:47:08Z" },
                "usuario": "Michael Dillon",
                "usuario_id": 387
            },
            {
                "decripcion": "A classic example of fancy itertools functional approach turning out some unreadable sludge, when compared to a simple and naive pure python implementation",
                "fecha": { "$date" : "2013-04-12T05:40:11Z" },
                "usuario": "wim",
                "usuario_id": 388
            },
            {
                "decripcion": "@wim Given that this answer began as a snippet from the Python documentation, I'd suggest you open an issue on bugs.python.org .",
                "fecha": { "$date" : "2013-04-12T11:36:07Z" },
                "usuario": "tzot",
                "usuario_id": 389
            }
        ],
        "usuario": "tzot",
        "usuario_id": 389
    },
    {
        "_id": 236,
        "fecha": { "$date" : "2019-10-14T08:16:28Z" },
        "decripcion": "\nI know this is kind of old but nobody yet mentioned numpy.array_split:\n\nimport numpy as np\n\nlst = range(50)\nnp.array_split(lst, 5)\n# [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n#  array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),\n#  array([20, 21, 22, 23, 24, 25, 26, 27, 28, 29]),\n#  array([30, 31, 32, 33, 34, 35, 36, 37, 38, 39]),\n#  array([40, 41, 42, 43, 44, 45, 46, 47, 48, 49])]\n\n    ",
        "votes": 320,
        "comentarios": [
            {
                "decripcion": "This allows you to set the total number of chunks, not the number of elements per chunk.",
                "fecha": { "$date" : "2015-09-09T03:03:50Z" },
                "usuario": "FizxMike",
                "usuario_id": 390
            }
        ],
        "usuario": "Moj",
        "usuario_id": 391
    },
    {
        "_id": 237,
        "fecha": { "$date" : "2018-11-17T01:16:27Z" },
        "decripcion": "\nI'm surprised nobody has thought of using iter's two-argument form:\n\nfrom itertools import islice\n\ndef chunk(it, size):\n    it = iter(it)\n    return iter(lambda: tuple(islice(it, size)), ())\n\n\nDemo:\n\n>>> list(chunk(range(14), 3))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13)]\n\n\nThis works with any iterable and produces output lazily. It returns tuples rather than iterators, but I think it has a certain elegance nonetheless. It also doesn't pad; if you want padding, a simple variation on the above will suffice:\n\nfrom itertools import islice, chain, repeat\n\ndef chunk_pad(it, size, padval=None):\n    it = chain(iter(it), repeat(padval))\n    return iter(lambda: tuple(islice(it, size)), (padval,) * size)\n\n\nDemo:\n\n>>> list(chunk_pad(range(14), 3))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, None)]\n>>> list(chunk_pad(range(14), 3, 'a'))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, 'a')]\n\n\nLike the izip_longest-based solutions, the above always pads. As far as I know, there's no one- or two-line itertools recipe for a function that optionally pads. By combining the above two approaches, this one comes pretty close:\n\n_no_padding = object()\n\ndef chunk(it, size, padval=_no_padding):\n    if padval == _no_padding:\n        it = iter(it)\n        sentinel = ()\n    else:\n        it = chain(iter(it), repeat(padval))\n        sentinel = (padval,) * size\n    return iter(lambda: tuple(islice(it, size)), sentinel)\n\n\nDemo:\n\n>>> list(chunk(range(14), 3))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13)]\n>>> list(chunk(range(14), 3, None))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, None)]\n>>> list(chunk(range(14), 3, 'a'))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, 'a')]\n\n\nI believe this is the shortest chunker proposed that offers optional padding.\n\nAs Tomasz Gandor observed, the two padding chunkers will stop unexpectedly if they encounter a long sequence of pad values. Here's a final variation that works around that problem in a reasonable way:\n\n_no_padding = object()\ndef chunk(it, size, padval=_no_padding):\n    it = iter(it)\n    chunker = iter(lambda: tuple(islice(it, size)), ())\n    if padval == _no_padding:\n        yield from chunker\n    else:\n        for ch in chunker:\n            yield ch if len(ch) == size else ch + (padval,) * (size - len(ch))\n\n\nDemo:\n\n>>> list(chunk([1, 2, (), (), 5], 2))\n[(1, 2), ((), ()), (5,)]\n>>> list(chunk([1, 2, None, None, 5], 2, None))\n[(1, 2), (None, None), (5, None)]\n\n    ",
        "votes": 226,
        "comentarios": [
            {
                "decripcion": "Wonderful, your simple version is my favorite. Others too came up with the basic islice(it, size) expression and embedded it (like I had done) in a loop construct. Only you thought of the two-argument version of iter() (I was completely unaware of), which makes it super-elegant (and probably most performance-effective). I had no idea that the first argument to iter changes to a 0-argument function when given the sentinel. You return a (pot. infinite) iterator of chunks, can use a (pot. infinite) iterator as input, have no len() and no array slices. Awesome!",
                "fecha": { "$date" : "2016-09-15T19:58:02Z" },
                "usuario": "ThomasH",
                "usuario_id": 392
            }
        ],
        "usuario": "senderle",
        "usuario_id": 393
    },
    {
        "_id": 238,
        "fecha": { "$date" : "2012-09-17T21:22:03Z" },
        "decripcion": "\nHere is a generator that work on arbitrary iterables:\n\ndef split_seq(iterable, size):\n    it = iter(iterable)\n    item = list(itertools.islice(it, size))\n    while item:\n        yield item\n        item = list(itertools.islice(it, size))\n\n\nExample:\n\n>>> import pprint\n>>> pprint.pprint(list(split_seq(xrange(75), 10)))\n[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n [70, 71, 72, 73, 74]]\n\n    ",
        "votes": 106,
        "comentarios": [],
        "usuario": "Markus Jarderot",
        "usuario_id": 394
    },
    {
        "_id": 239,
        "fecha": { "$date" : "2021-04-26T08:35:26Z" },
        "decripcion": "\nSimple yet elegant\nL = range(1, 1000)\nprint [L[x:x+10] for x in xrange(0, len(L), 10)]\n\nor if you prefer:\ndef chunks(L, n): return [L[x: x+n] for x in xrange(0, len(L), n)]\nchunks(L, 10)\n\n    ",
        "votes": 66,
        "comentarios": [
            {
                "decripcion": "Thou shalt not dub a variable in the likeness of an Arabic number.  In some fonts, 1 and l are indistinguishable.  As are 0 and O.  And sometimes even I and 1.",
                "fecha": { "$date" : "2013-08-14T23:02:09Z" },
                "usuario": "Alfe",
                "usuario_id": 395
            },
            {
                "decripcion": "@Alfe Defective fonts.  People shouldn't use such fonts.  Not for programming, not for anything.",
                "fecha": { "$date" : "2013-10-05T08:14:31Z" },
                "usuario": "Jerry B",
                "usuario_id": 196
            },
            {
                "decripcion": "Lambdas are meant to be used as unnamed functions. There is no point in using them like that. In addition it makes debugging more difficult as the traceback will report \"in <lambda>\" instead of \"in chunks\" in case of error. I wish you luck finding a problem if you have whole bunch of these :)",
                "fecha": { "$date" : "2013-11-26T19:45:40Z" },
                "usuario": "Chris Koston",
                "usuario_id": 396
            }
        ],
        "usuario": "lebenf",
        "usuario_id": 397
    },
    {
        "_id": 240,
        "fecha": { "$date" : "2012-09-17T21:22:25Z" },
        "decripcion": "\ndef chunk(input, size):\n    return map(None, *([iter(input)] * size))\n\n    ",
        "votes": 60,
        "comentarios": [],
        "usuario": "Tomasz Wysocki",
        "usuario_id": 398
    },
    {
        "_id": 241,
        "fecha": { "$date" : "2021-01-24T04:42:44Z" },
        "decripcion": "\nHow do you split a list into evenly sized chunks?\n\"Evenly sized chunks\", to me, implies that they are all the same length, or barring that option, at minimal variance in length. E.g. 5 baskets for 21 items could have the following results:\n>>> import statistics\n>>> statistics.variance([5,5,5,5,1]) \n3.2\n>>> statistics.variance([5,4,4,4,4]) \n0.19999999999999998\n\nA practical reason to prefer the latter result: if you were using these functions to distribute work, you've built-in the prospect of one likely finishing well before the others, so it would sit around doing nothing while the others continued working hard.\nCritique of other answers here\nWhen I originally wrote this answer, none of the other answers were evenly sized chunks - they all leave a runt chunk at the end, so they're not well balanced, and have a higher than necessary variance of lengths.\nFor example, the current top answer ends with:\n[60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n[70, 71, 72, 73, 74]]\n\nOthers, like list(grouper(3, range(7))), and chunk(range(7), 3) both return: [(0, 1, 2), (3, 4, 5), (6, None, None)]. The None's are just padding, and rather inelegant in my opinion. They are NOT evenly chunking the iterables.\nWhy can't we divide these better?\nCycle Solution\nA high-level balanced solution using itertools.cycle, which is the way I might do it today. Here's the setup:\nfrom itertools import cycle\nitems = range(10, 75)\nnumber_of_baskets = 10\n\nNow we need our lists into which to populate the elements:\nbaskets = [[] for _ in range(number_of_baskets)]\n\nFinally, we zip the elements we're going to allocate together with a cycle of the baskets until we run out of elements, which, semantically, it exactly what we want:\nfor element, basket in zip(items, cycle(baskets)):\n    basket.append(element)\n\nHere's the result:\n>>> from pprint import pprint\n>>> pprint(baskets)\n[[10, 20, 30, 40, 50, 60, 70],\n [11, 21, 31, 41, 51, 61, 71],\n [12, 22, 32, 42, 52, 62, 72],\n [13, 23, 33, 43, 53, 63, 73],\n [14, 24, 34, 44, 54, 64, 74],\n [15, 25, 35, 45, 55, 65],\n [16, 26, 36, 46, 56, 66],\n [17, 27, 37, 47, 57, 67],\n [18, 28, 38, 48, 58, 68],\n [19, 29, 39, 49, 59, 69]]\n\nTo productionize this solution, we write a function, and provide the type annotations:\nfrom itertools import cycle\nfrom typing import List, Any\n\ndef cycle_baskets(items: List[Any], maxbaskets: int) -> List[List[Any]]:\n    baskets = [[] for _ in range(min(maxbaskets, len(items)))]\n    for item, basket in zip(items, cycle(baskets)):\n        basket.append(item)\n    return baskets\n\nIn the above, we take our list of items, and the max number of baskets. We create a list of empty lists, in which to append each element, in a round-robin style.\nSlices\nAnother elegant solution is to use slices - specifically the less-commonly used step argument to slices. i.e.:\nstart = 0\nstop = None\nstep = number_of_baskets\n\nfirst_basket = items[start:stop:step]\n\nThis is especially elegant in that slices don't care how long the data are - the result, our first basket, is only as long as it needs to be. We'll only need to increment the starting point for each basket.\nIn fact this could be a one-liner, but we'll go multiline for readability and to avoid an overlong line of code:\nfrom typing import List, Any\n\ndef slice_baskets(items: List[Any], maxbaskets: int) -> List[List[Any]]:\n    n_baskets = min(maxbaskets, len(items))\n    return [items[i::n_baskets] for i in range(n_baskets)]\n\nAnd islice from the itertools module will provide a lazily iterating approach, like that which was originally asked for in the question.\nI don't expect most use-cases to benefit very much, as the original data is already fully materialized in a list, but for large datasets, it could save nearly half the memory usage.\nfrom itertools import islice\nfrom typing import List, Any, Generator\n    \ndef yield_islice_baskets(items: List[Any], maxbaskets: int) -> Generator[List[Any], None, None]:\n    n_baskets = min(maxbaskets, len(items))\n    for i in range(n_baskets):\n        yield islice(items, i, None, n_baskets)\n\nView results with:\nfrom pprint import pprint\n\nitems = list(range(10, 75))\npprint(cycle_baskets(items, 10))\npprint(slice_baskets(items, 10))\npprint([list(s) for s in yield_islice_baskets(items, 10)])\n\nUpdated prior solutions\nHere's another balanced solution, adapted from a function I've used in production in the past, that uses the modulo operator:\ndef baskets_from(items, maxbaskets=25):\n    baskets = [[] for _ in range(maxbaskets)]\n    for i, item in enumerate(items):\n        baskets[i % maxbaskets].append(item)\n    return filter(None, baskets) \n\nAnd I created a generator that does the same if you put it into a list:\ndef iter_baskets_from(items, maxbaskets=3):\n    '''generates evenly balanced baskets from indexable iterable'''\n    item_count = len(items)\n    baskets = min(item_count, maxbaskets)\n    for x_i in range(baskets):\n        yield [items[y_i] for y_i in range(x_i, item_count, baskets)]\n    \n\nAnd finally, since I see that all of the above functions return elements in a contiguous order (as they were given):\ndef iter_baskets_contiguous(items, maxbaskets=3, item_count=None):\n    '''\n    generates balanced baskets from iterable, contiguous contents\n    provide item_count if providing a iterator that doesn't support len()\n    '''\n    item_count = item_count or len(items)\n    baskets = min(item_count, maxbaskets)\n    items = iter(items)\n    floor = item_count // baskets \n    ceiling = floor + 1\n    stepdown = item_count % baskets\n    for x_i in range(baskets):\n        length = ceiling if x_i < stepdown else floor\n        yield [items.next() for _ in range(length)]\n\nOutput\nTo test them out:\nprint(baskets_from(range(6), 8))\nprint(list(iter_baskets_from(range(6), 8)))\nprint(list(iter_baskets_contiguous(range(6), 8)))\nprint(baskets_from(range(22), 8))\nprint(list(iter_baskets_from(range(22), 8)))\nprint(list(iter_baskets_contiguous(range(22), 8)))\nprint(baskets_from('ABCDEFG', 3))\nprint(list(iter_baskets_from('ABCDEFG', 3)))\nprint(list(iter_baskets_contiguous('ABCDEFG', 3)))\nprint(baskets_from(range(26), 5))\nprint(list(iter_baskets_from(range(26), 5)))\nprint(list(iter_baskets_contiguous(range(26), 5)))\n\nWhich prints out:\n[[0], [1], [2], [3], [4], [5]]\n[[0], [1], [2], [3], [4], [5]]\n[[0], [1], [2], [3], [4], [5]]\n[[0, 8, 16], [1, 9, 17], [2, 10, 18], [3, 11, 19], [4, 12, 20], [5, 13, 21], [6, 14], [7, 15]]\n[[0, 8, 16], [1, 9, 17], [2, 10, 18], [3, 11, 19], [4, 12, 20], [5, 13, 21], [6, 14], [7, 15]]\n[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19], [20, 21]]\n[['A', 'D', 'G'], ['B', 'E'], ['C', 'F']]\n[['A', 'D', 'G'], ['B', 'E'], ['C', 'F']]\n[['A', 'B', 'C'], ['D', 'E'], ['F', 'G']]\n[[0, 5, 10, 15, 20, 25], [1, 6, 11, 16, 21], [2, 7, 12, 17, 22], [3, 8, 13, 18, 23], [4, 9, 14, 19, 24]]\n[[0, 5, 10, 15, 20, 25], [1, 6, 11, 16, 21], [2, 7, 12, 17, 22], [3, 8, 13, 18, 23], [4, 9, 14, 19, 24]]\n[[0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]\n\nNotice that the contiguous generator provide chunks in the same length patterns as the other two, but the items are all in order, and they are as evenly divided as one may divide a list of discrete elements.\n    ",
        "votes": 49,
        "comentarios": [
            {
                "decripcion": "You say that none of the above provides evenly-sized chunks. But this one does, as does this one.",
                "fecha": { "$date" : "2014-02-26T15:00:56Z" },
                "usuario": "senderle",
                "usuario_id": 393
            },
            {
                "decripcion": "@senderle, The first one, list(grouper(3, xrange(7))), and the second one, chunk(xrange(7), 3) both return: [(0, 1, 2), (3, 4, 5), (6, None, None)]. The None's are just padding, and rather inelegant in my opinion. They are NOT evenly chunking the iterables. Thanks for your vote!",
                "fecha": { "$date" : "2014-02-26T16:07:24Z" },
                "usuario": "Aaron Hall\u2666",
                "usuario_id": 118
            },
            {
                "decripcion": "You raise the question (without doing it explicitly, so I do that now here) whether equally-sized chunks (except the last, if not possible) or whether a balanced (as good as possible) result is more often what will be needed.  You assume that the balanced solution is to prefer; this might be true if what you program is close to the real world (e. g. a card-dealing algorithm for a simulated card game).  In other cases (like filling lines with words) one will rather like to keep the lines as full as possible.  So I can't really prefer one over the other; they are just for different use cases.",
                "fecha": { "$date" : "2014-08-02T23:14:52Z" },
                "usuario": "Alfe",
                "usuario_id": 395
            },
            {
                "decripcion": "@ChristopherBarrington-Leigh Good point, for DataFrames, you should probably use slices, since I believe DataFrame objects do not usually copy on slicing, e.g. import pandas as pd; [pd.DataFrame(np.arange(7))[i::3] for i in xrange(3)]",
                "fecha": { "$date" : "2014-09-03T17:10:35Z" },
                "usuario": "Aaron Hall\u2666",
                "usuario_id": 118
            },
            {
                "decripcion": "@AaronHall Oops. I deleted my comment because I second-guessed my critique, but you were quick on the draw. Thanks! In fact, my claim that it doesn't work for dataframes is true.  If items is a dataframe, just use yield items[range(x_i, item_count, baskets)] as the last line. I offered a separate (yet another) answer, in which you specify the desired (minimum) group size.",
                "fecha": { "$date" : "2014-09-03T17:47:40Z" },
                "usuario": "CPBL",
                "usuario_id": 399
            }
        ],
        "usuario": "Aaron Hall",
        "usuario_id": 119
    },
    {
        "_id": 242,
        "fecha": { "$date" : "2017-06-21T13:36:41Z" },
        "decripcion": "\nI saw the most awesome Python-ish answer in a duplicate of this question:\n\nfrom itertools import zip_longest\n\na = range(1, 16)\ni = iter(a)\nr = list(zip_longest(i, i, i))\n>>> print(r)\n[(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)]\n\n\nYou can create n-tuple for any n. If a = range(1, 15), then the result will be:\n\n[(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, None)]\n\n\nIf the list is divided evenly, then you can replace zip_longest with zip, otherwise the triplet (13, 14, None) would be lost. Python 3 is used above. For Python 2, use izip_longest.\n    ",
        "votes": 45,
        "comentarios": [
            {
                "decripcion": "that is nice if your list and chunks are short, how could you adapt this to split your list in to chunks of 1000 though? you\"re not going to code zip(i,i,i,i,i,i,i,i,i,i.....i=1000)",
                "fecha": { "$date" : "2015-05-18T14:21:47Z" },
                "usuario": "Tom Smith",
                "usuario_id": 400
            },
            {
                "decripcion": "zip(i, i, i, ... i) with \"chunk_size\" arguments to zip() can be written as zip(*[i]*chunk_size) Whether that's a good idea or not is debatable, of course.",
                "fecha": { "$date" : "2015-06-28T04:52:00Z" },
                "usuario": "Wilson F",
                "usuario_id": 401
            },
            {
                "decripcion": "The downside of this is that if you aren't dividing evenly, you'll drop elements, as zip stops at the shortest iterable - & izip_longest would add default elements.",
                "fecha": { "$date" : "2016-07-08T03:37:09Z" },
                "usuario": "Aaron Hall\u2666",
                "usuario_id": 118
            },
            {
                "decripcion": "zip_longest should be used, as done in: stackoverflow.com/a/434411/1959808",
                "fecha": { "$date" : "2017-06-21T13:28:18Z" },
                "usuario": "Ioannis Filippidis",
                "usuario_id": 402
            },
            {
                "decripcion": "The answer with range(1, 15) is already missing elements, because there are 14 elements in range(1, 15), not 15.",
                "fecha": { "$date" : "2017-06-21T13:34:47Z" },
                "usuario": "Ioannis Filippidis",
                "usuario_id": 402
            }
        ],
        "usuario": "Noich",
        "usuario_id": 403
    },
    {
        "_id": 243,
        "fecha": { "$date" : "2019-04-18T11:18:24Z" },
        "decripcion": "\nIf you know list size:\n\ndef SplitList(mylist, chunk_size):\n    return [mylist[offs:offs+chunk_size] for offs in range(0, len(mylist), chunk_size)]\n\n\nIf you don't (an iterator):\n\ndef IterChunks(sequence, chunk_size):\n    res = []\n    for item in sequence:\n        res.append(item)\n        if len(res) >= chunk_size:\n            yield res\n            res = []\n    if res:\n        yield res  # yield the last, incomplete, portion\n\n\nIn the latter case, it can be rephrased in a more beautiful way if you can be sure that the sequence always contains a whole number of chunks of given size (i.e. there is no incomplete last chunk).\n    ",
        "votes": 44,
        "comentarios": [],
        "usuario": "atzz",
        "usuario_id": 404
    },
    {
        "_id": 244,
        "fecha": { "$date" : "2011-04-19T05:27:19Z" },
        "decripcion": "\nIf you had a chunk size of 3 for example, you could do:\n\nzip(*[iterable[i::3] for i in range(3)]) \n\n\nsource:\nhttp://code.activestate.com/recipes/303060-group-a-list-into-sequential-n-tuples/\n\nI would use this when my chunk size is fixed number I can type, e.g. '3', and would never change.\n    ",
        "votes": 23,
        "comentarios": [
            {
                "decripcion": "This doesn't work if len(iterable)%3 != 0.  The last (short) group of numbers won't be returned.",
                "fecha": { "$date" : "2012-07-03T19:28:27Z" },
                "usuario": "sherbang",
                "usuario_id": 405
            }
        ],
        "usuario": "ninjagecko",
        "usuario_id": 406
    },
    {
        "_id": 245,
        "fecha": { "$date" : "2015-12-16T21:42:56Z" },
        "decripcion": "\n[AA[i:i+SS] for i in range(len(AA))[::SS]]\n\n\nWhere AA is array, SS is chunk size. For example:\n\n>>> AA=range(10,21);SS=3\n>>> [AA[i:i+SS] for i in range(len(AA))[::SS]]\n[[10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20]]\n# or [range(10, 13), range(13, 16), range(16, 19), range(19, 21)] in py3\n\n    ",
        "votes": 22,
        "comentarios": [],
        "usuario": "Riaz Rizvi",
        "usuario_id": 407
    },
    {
        "_id": 246,
        "fecha": { "$date" : "2013-11-20T20:55:22Z" },
        "decripcion": "\nThe toolz library has the partition function for this:\n\nfrom toolz.itertoolz.core import partition\n\nlist(partition(2, [1, 2, 3, 4]))\n[(1, 2), (3, 4)]\n\n    ",
        "votes": 21,
        "comentarios": [],
        "usuario": "zach",
        "usuario_id": 408
    },
    {
        "_id": 247,
        "fecha": { "$date" : "2019-12-10T11:59:57Z" },
        "decripcion": "\nWith Assignment Expressions in Python 3.8 it becomes quite nice:\n\nimport itertools\n\ndef batch(iterable, size):\n    it = iter(iterable)\n    while item := list(itertools.islice(it, size)):\n        yield item\n\n\nThis works on an arbitrary iterable, not just a list.\n\n>>> import pprint\n>>> pprint.pprint(list(batch(range(75), 10)))\n[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n [70, 71, 72, 73, 74]]\n\n    ",
        "votes": 21,
        "comentarios": [],
        "usuario": "nirvana-msu",
        "usuario_id": 409
    },
    {
        "_id": 248,
        "fecha": { "$date" : "2013-11-09T08:21:23Z" },
        "decripcion": "\nI like the Python doc's version proposed by tzot and J.F.Sebastian a lot,\n but it has two shortcomings:\n\n\nit is not very explicit\nI usually don't want a fill value in the last chunk\n\n\nI'm using this one a lot in my code:\n\nfrom itertools import islice\n\ndef chunks(n, iterable):\n    iterable = iter(iterable)\n    while True:\n        yield tuple(islice(iterable, n)) or iterable.next()\n\n\nUPDATE: A lazy chunks version:\n\nfrom itertools import chain, islice\n\ndef chunks(n, iterable):\n   iterable = iter(iterable)\n   while True:\n       yield chain([next(iterable)], islice(iterable, n-1))\n\n    ",
        "votes": 17,
        "comentarios": [],
        "usuario": "nikipore",
        "usuario_id": 410
    },
    {
        "_id": 249,
        "fecha": { "$date" : "2018-01-07T08:58:54Z" },
        "decripcion": "\nI was curious about the performance of different approaches and here it is:\n\nTested on Python 3.5.1\n\nimport time\nbatch_size = 7\narr_len = 298937\n\n#---------slice-------------\n\nprint(\"\\r\\nslice\")\nstart = time.time()\narr = [i for i in range(0, arr_len)]\nwhile True:\n    if not arr:\n        break\n\n    tmp = arr[0:batch_size]\n    arr = arr[batch_size:-1]\nprint(time.time() - start)\n\n#-----------index-----------\n\nprint(\"\\r\\nindex\")\narr = [i for i in range(0, arr_len)]\nstart = time.time()\nfor i in range(0, round(len(arr) / batch_size + 1)):\n    tmp = arr[batch_size * i : batch_size * (i + 1)]\nprint(time.time() - start)\n\n#----------batches 1------------\n\ndef batch(iterable, n=1):\n    l = len(iterable)\n    for ndx in range(0, l, n):\n        yield iterable[ndx:min(ndx + n, l)]\n\nprint(\"\\r\\nbatches 1\")\narr = [i for i in range(0, arr_len)]\nstart = time.time()\nfor x in batch(arr, batch_size):\n    tmp = x\nprint(time.time() - start)\n\n#----------batches 2------------\n\nfrom itertools import islice, chain\n\ndef batch(iterable, size):\n    sourceiter = iter(iterable)\n    while True:\n        batchiter = islice(sourceiter, size)\n        yield chain([next(batchiter)], batchiter)\n\n\nprint(\"\\r\\nbatches 2\")\narr = [i for i in range(0, arr_len)]\nstart = time.time()\nfor x in batch(arr, batch_size):\n    tmp = x\nprint(time.time() - start)\n\n#---------chunks-------------\ndef chunks(l, n):\n    \"\"\"Yield successive n-sized chunks from l.\"\"\"\n    for i in range(0, len(l), n):\n        yield l[i:i + n]\nprint(\"\\r\\nchunks\")\narr = [i for i in range(0, arr_len)]\nstart = time.time()\nfor x in chunks(arr, batch_size):\n    tmp = x\nprint(time.time() - start)\n\n#-----------grouper-----------\n\nfrom itertools import zip_longest # for Python 3.x\n#from six.moves import zip_longest # for both (uses the six compat library)\n\ndef grouper(iterable, n, padvalue=None):\n    \"grouper(3, 'abcdefg', 'x') --> ('a','b','c'), ('d','e','f'), ('g','x','x')\"\n    return zip_longest(*[iter(iterable)]*n, fillvalue=padvalue)\n\narr = [i for i in range(0, arr_len)]\nprint(\"\\r\\ngrouper\")\nstart = time.time()\nfor x in grouper(arr, batch_size):\n    tmp = x\nprint(time.time() - start)\n\n\nResults:\n\nslice\n31.18285083770752\n\nindex\n0.02184295654296875\n\nbatches 1\n0.03503894805908203\n\nbatches 2\n0.22681021690368652\n\nchunks\n0.019841909408569336\n\ngrouper\n0.006506919860839844\n\n    ",
        "votes": 17,
        "comentarios": [],
        "usuario": "Alex T",
        "usuario_id": 411
    },
    {
        "_id": 250,
        "fecha": { "$date" : "2016-08-31T17:30:54Z" },
        "decripcion": "\ncode:\n\ndef split_list(the_list, chunk_size):\n    result_list = []\n    while the_list:\n        result_list.append(the_list[:chunk_size])\n        the_list = the_list[chunk_size:]\n    return result_list\n\na_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint split_list(a_list, 3)\n\n\nresult:\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n\n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "Art B",
        "usuario_id": 412
    },
    {
        "_id": 251,
        "fecha": { "$date" : "2017-01-27T23:12:07Z" },
        "decripcion": "\nYou may also use get_chunks function of utilspie library as:\n\n>>> from utilspie import iterutils\n>>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n>>> list(iterutils.get_chunks(a, 5))\n[[1, 2, 3, 4, 5], [6, 7, 8, 9]]\n\n\nYou can install utilspie via pip:\n\nsudo pip install utilspie\n\n\nDisclaimer: I am the creator of utilspie library.\n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "Anonymous",
        "usuario_id": 413
    },
    {
        "_id": 252,
        "fecha": { "$date" : "2021-09-08T00:57:12Z" },
        "decripcion": "\nDon't reinvent the wheel.\nGiven\nimport itertools as it\nimport collections as ct\n\nimport more_itertools as mit\n\n\niterable = range(11)\nn = 3\n\nCode\nmore_itertools+\nlist(mit.chunked(iterable, n))\n# [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]\n\nlist(mit.sliced(iterable, n))\n# [range(0, 3), range(3, 6), range(6, 9), range(9, 11)]\n\nlist(mit.grouper(n, iterable))\n# [(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, None)]\n\nlist(mit.windowed(iterable, len(iterable)//n, step=n))\n# [(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, None)]\n\nlist(mit.chunked_even(iterable, n))\n# [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]\n\n(or DIY, if you want)\nThe Standard Library\nlist(it.zip_longest(*[iter(iterable)] * n))\n# [(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, None)]\n\n\nd = {}\nfor i, x in enumerate(iterable):\n    d.setdefault(i//n, []).append(x)\n    \n\nlist(d.values())\n# [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]\n\n\ndd = ct.defaultdict(list)\nfor i, x in enumerate(iterable):\n    dd[i//n].append(x)\n    \n\nlist(dd.values())\n# [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]\n\nReferences\n\nmore_itertools.chunked (related posted)\nmore_itertools.sliced\nmore_itertools.grouper (related post)\nmore_itertools.windowed (see also stagger, zip_offset)\nmore_itertools.chunked_even\nzip_longest (related post, related post)\nsetdefault (ordered results requires Python 3.6+)\ncollections.defaultdict  (ordered results requires Python 3.6+)\n\n+ A third-party library that implements itertools recipes and more. > pip install more_itertools \n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "pylang",
        "usuario_id": 339
    },
    {
        "_id": 253,
        "fecha": { "$date" : "2015-11-03T23:42:58Z" },
        "decripcion": "\nAt this point, I think we need a recursive generator, just in case...\n\nIn python 2:\n\ndef chunks(li, n):\n    if li == []:\n        return\n    yield li[:n]\n    for e in chunks(li[n:], n):\n        yield e\n\n\nIn python 3:\n\ndef chunks(li, n):\n    if li == []:\n        return\n    yield li[:n]\n    yield from chunks(li[n:], n)\n\n\nAlso, in case of massive Alien invasion, a decorated recursive generator might become handy:\n\ndef dec(gen):\n    def new_gen(li, n):\n        for e in gen(li, n):\n            if e == []:\n                return\n            yield e\n    return new_gen\n\n@dec\ndef chunks(li, n):\n    yield li[:n]\n    for e in chunks(li[n:], n):\n        yield e\n\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "mazieres",
        "usuario_id": 414
    },
    {
        "_id": 254,
        "fecha": { "$date" : "2008-11-24T16:56:57Z" },
        "decripcion": "\ndef split_seq(seq, num_pieces):\n    start = 0\n    for i in xrange(num_pieces):\n        stop = start + len(seq[i::num_pieces])\n        yield seq[start:stop]\n        start = stop\n\n\nusage:\n\nseq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfor seq in split_seq(seq, 3):\n    print seq\n\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "Corey Goldberg",
        "usuario_id": 415
    },
    {
        "_id": 255,
        "fecha": { "$date" : "2008-11-23T12:51:16Z" },
        "decripcion": "\nheh, one line version\n\nIn [48]: chunk = lambda ulist, step:  map(lambda i: ulist[i:i+step],  xrange(0, len(ulist), step))\n\nIn [49]: chunk(range(1,100), 10)\nOut[49]: \n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],\n [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],\n [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],\n [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],\n [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],\n [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],\n [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],\n [91, 92, 93, 94, 95, 96, 97, 98, 99]]\n\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "Please, use \"def chunk\" instead of \"chunk = lambda\".  It works the same.  One line.  Same features.  MUCH easier to the n00bz to read and understand.",
                "fecha": { "$date" : "2008-11-23T13:45:51Z" },
                "usuario": "S.Lott",
                "usuario_id": 416
            },
            {
                "decripcion": "@S.Lott: not if the n00bz come from scheme :P this isn't a real problem. there's even a keyword to google! what other features show we avoid for the sake of the n00bz? i guess yield isn't imperative/c-like enough to be n00b friendly either then.",
                "fecha": { "$date" : "2012-05-11T21:10:56Z" },
                "usuario": "Janus Troelsen",
                "usuario_id": 417
            },
            {
                "decripcion": "The function object resulting from def chunk instead of chunk=lambda has .__name__ attribute 'chunk' instead of '<lambda>'. The specific name is more useful in tracebacks.",
                "fecha": { "$date" : "2012-06-27T04:20:59Z" },
                "usuario": "Terry Jan Reedy",
                "usuario_id": 418
            }
        ],
        "usuario": "slav0nic",
        "usuario_id": 419
    },
    {
        "_id": 256,
        "fecha": { "$date" : "2015-02-28T20:05:03Z" },
        "decripcion": "\nAnother more explicit version.\n\ndef chunkList(initialList, chunkSize):\n    \"\"\"\n    This function chunks a list into sub lists \n    that have a length equals to chunkSize.\n\n    Example:\n    lst = [3, 4, 9, 7, 1, 1, 2, 3]\n    print(chunkList(lst, 3)) \n    returns\n    [[3, 4, 9], [7, 1, 1], [2, 3]]\n    \"\"\"\n    finalList = []\n    for i in range(0, len(initialList), chunkSize):\n        finalList.append(initialList[i:i+chunkSize])\n    return finalList\n\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "(2016 Sep 12) This answer is the most language independent and easiest to read.",
                "fecha": { "$date" : "2016-09-14T00:36:07Z" },
                "usuario": "D Adams",
                "usuario_id": 420
            }
        ],
        "usuario": "Ranaivo",
        "usuario_id": 421
    },
    {
        "_id": 257,
        "fecha": { "$date" : "2016-05-16T06:29:12Z" },
        "decripcion": "\nWithout calling len() which is good for large lists:\n\ndef splitter(l, n):\n    i = 0\n    chunk = l[:n]\n    while chunk:\n        yield chunk\n        i += n\n        chunk = l[i:i+n]\n\n\nAnd this is for iterables:\n\ndef isplitter(l, n):\n    l = iter(l)\n    chunk = list(islice(l, n))\n    while chunk:\n        yield chunk\n        chunk = list(islice(l, n))\n\n\nThe functional flavour of the above:\n\ndef isplitter2(l, n):\n    return takewhile(bool,\n                     (tuple(islice(start, n))\n                            for start in repeat(iter(l))))\n\n\nOR:\n\ndef chunks_gen_sentinel(n, seq):\n    continuous_slices = imap(islice, repeat(iter(seq)), repeat(0), repeat(n))\n    return iter(imap(tuple, continuous_slices).next,())\n\n\nOR:\n\ndef chunks_gen_filter(n, seq):\n    continuous_slices = imap(islice, repeat(iter(seq)), repeat(0), repeat(n))\n    return takewhile(bool,imap(tuple, continuous_slices))\n\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "There is no reason to avoid len() on large lists; it's a constant-time operation.",
                "fecha": { "$date" : "2011-05-30T10:03:12Z" },
                "usuario": "Thomas Wouters",
                "usuario_id": 422
            }
        ],
        "usuario": "Mars",
        "usuario_id": 423
    },
    {
        "_id": 258,
        "fecha": { "$date" : "2014-11-14T09:48:42Z" },
        "decripcion": "\nSee this reference\n\n>>> orange = range(1, 1001)\n>>> otuples = list( zip(*[iter(orange)]*10))\n>>> print(otuples)\n[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), ... (991, 992, 993, 994, 995, 996, 997, 998, 999, 1000)]\n>>> olist = [list(i) for i in otuples]\n>>> print(olist)\n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], ..., [991, 992, 993, 994, 995, 996, 997, 998, 999, 1000]]\n>>> \n\n\nPython3\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "Nice, but drops elements at the end if the size does not match whole numbers of chunks, e. g. zip(*[iter(range(7))]*3) only returns [(0, 1, 2), (3, 4, 5)] and forgets the 6 from the input.",
                "fecha": { "$date" : "2013-08-14T23:17:34Z" },
                "usuario": "Alfe",
                "usuario_id": 395
            },
            {
                "decripcion": "OP wrote: 'I have a list of arbitrary length, and I need to split it up into equal size chunks and operate on it.'. Maybe I miss something but how to get 'equal size chunks' from list of arbitrary length without dropping chunk which is shorter than 'equal size'",
                "fecha": { "$date" : "2020-09-27T09:57:46Z" },
                "usuario": "Aivar Paalberg",
                "usuario_id": 424
            }
        ],
        "usuario": "macm",
        "usuario_id": 425
    },
    {
        "_id": 259,
        "fecha": { "$date" : "2012-02-13T04:50:38Z" },
        "decripcion": "\ndef chunks(iterable,n):\n    \"\"\"assumes n is an integer>0\n    \"\"\"\n    iterable=iter(iterable)\n    while True:\n        result=[]\n        for i in range(n):\n            try:\n                a=next(iterable)\n            except StopIteration:\n                break\n            else:\n                result.append(a)\n        if result:\n            yield result\n        else:\n            break\n\ng1=(i*i for i in range(10))\ng2=chunks(g1,3)\nprint g2\n'<generator object chunks at 0x0337B9B8>'\nprint list(g2)\n'[[0, 1, 4], [9, 16, 25], [36, 49, 64], [81]]'\n\n    ",
        "votes": 7,
        "comentarios": [
            {
                "decripcion": "While this may not look as short or as pretty as many of the itertools based responses this one actually works if you want to print out the second sub-list before accessing the first, i.e., you can set i0=next(g2); i1=next(g2); and use i1 before using i0 and it doesn't break!!",
                "fecha": { "$date" : "2017-12-19T10:25:55Z" },
                "usuario": "Peter Gerdes",
                "usuario_id": 426
            }
        ],
        "usuario": "robert king",
        "usuario_id": 427
    },
    {
        "_id": 260,
        "fecha": { "$date" : "2012-03-08T18:27:15Z" },
        "decripcion": "\nConsider using matplotlib.cbook pieces\n\nfor example:\n\nimport matplotlib.cbook as cbook\nsegments = cbook.pieces(np.arange(20), 3)\nfor s in segments:\n     print s\n\n    ",
        "votes": 7,
        "comentarios": [
            {
                "decripcion": "Looks like you accidentally created two accounts. You can contact the team to have them merged, which will allow you to regain direct editing privileges on your contributions.",
                "fecha": { "$date" : "2019-05-15T15:15:26Z" },
                "usuario": "Georgy",
                "usuario_id": 70
            }
        ],
        "usuario": "schwater",
        "usuario_id": 428
    },
    {
        "_id": 261,
        "fecha": { "$date" : "2016-11-03T19:10:45Z" },
        "decripcion": "\nSince everybody here talking about iterators. boltons has perfect method for that, called iterutils.chunked_iter.\n\nfrom boltons import iterutils\n\nlist(iterutils.chunked_iter(list(range(50)), 11))\n\n\nOutput:\n\n[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32],\n [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],\n [44, 45, 46, 47, 48, 49]]\n\n\nBut if you don't want to be mercy on memory, you can use old-way and store the full list in the first place with iterutils.chunked.\n    ",
        "votes": 7,
        "comentarios": [
            {
                "decripcion": "And this one actually works regardless of order one looks at the subiterators!!",
                "fecha": { "$date" : "2017-12-19T10:32:55Z" },
                "usuario": "Peter Gerdes",
                "usuario_id": 426
            }
        ],
        "usuario": "vishes_shell",
        "usuario_id": 429
    },
    {
        "_id": 262,
        "fecha": { "$date" : "2015-07-15T23:27:19Z" },
        "decripcion": "\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nCHUNK = 4\n[a[i*CHUNK:(i+1)*CHUNK] for i in xrange((len(a) + CHUNK - 1) / CHUNK )]\n\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "Can you explain more your answer please ?",
                "fecha": { "$date" : "2015-07-16T00:06:31Z" },
                "usuario": "Zulu",
                "usuario_id": 430
            },
            {
                "decripcion": "Working from backwards:      (len(a) + CHUNK -1) / CHUNK  Gives you the number of chunks that you will end up with.  Then, for each chunk at index i, we are generating a sub-array of the original array like this:      a[ i * CHUNK : (i + 1) * CHUNK ]  where,      i * CHUNK is the index of the first element to put into the subarray, and,     (i + 1) * CHUNK is 1 past the last element to put into the subarray.  This solution uses list comprehension, so it might be faster for large arrays.",
                "fecha": { "$date" : "2015-07-29T00:29:20Z" },
                "usuario": "AdvilUser",
                "usuario_id": 431
            }
        ],
        "usuario": "AdvilUser",
        "usuario_id": 431
    },
    {
        "_id": 263,
        "fecha": { "$date" : "2017-04-03T02:13:38Z" },
        "decripcion": "\nArguments are passed by assignment. The rationale behind this is twofold:\n\n\nthe parameter passed in is actually a reference to an object (but the reference is passed by value)\nsome data types are mutable, but others aren't\n\n\nSo:\n\n\nIf you pass a mutable object into a method, the method gets a reference to that same object and you can mutate it to your heart's delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you're done, the outer reference will still point at the original object. \nIf you pass an immutable object to a method, you still can't rebind the outer reference, and you can't even mutate the object.\n\n\nTo make it even more clear, let's have some examples. \n\nList - a mutable type\n\nLet's try to modify the list that was passed to a method:\n\ndef try_to_change_list_contents(the_list):\n    print('got', the_list)\n    the_list.append('four')\n    print('changed to', the_list)\n\nouter_list = ['one', 'two', 'three']\n\nprint('before, outer_list =', outer_list)\ntry_to_change_list_contents(outer_list)\nprint('after, outer_list =', outer_list)\n\n\nOutput:\n\nbefore, outer_list = ['one', 'two', 'three']\ngot ['one', 'two', 'three']\nchanged to ['one', 'two', 'three', 'four']\nafter, outer_list = ['one', 'two', 'three', 'four']\n\n\nSince the parameter passed in is a reference to outer_list, not a copy of it, we can use the mutating list methods to change it and have the changes reflected in the outer scope.\n\nNow let's see what happens when we try to change the reference that was passed in as a parameter:\n\ndef try_to_change_list_reference(the_list):\n    print('got', the_list)\n    the_list = ['and', 'we', 'can', 'not', 'lie']\n    print('set to', the_list)\n\nouter_list = ['we', 'like', 'proper', 'English']\n\nprint('before, outer_list =', outer_list)\ntry_to_change_list_reference(outer_list)\nprint('after, outer_list =', outer_list)\n\n\nOutput:\n\nbefore, outer_list = ['we', 'like', 'proper', 'English']\ngot ['we', 'like', 'proper', 'English']\nset to ['and', 'we', 'can', 'not', 'lie']\nafter, outer_list = ['we', 'like', 'proper', 'English']\n\n\nSince the the_list parameter was passed by value, assigning a new list to it had no effect that the code outside the method could see. The the_list was a copy of the outer_list reference, and we had the_list point to a new list, but there was no way to change where outer_list pointed.\n\nString - an immutable type\n\nIt's immutable, so there's nothing we can do to change the contents of the string\n\nNow, let's try to change the reference\n\ndef try_to_change_string_reference(the_string):\n    print('got', the_string)\n    the_string = 'In a kingdom by the sea'\n    print('set to', the_string)\n\nouter_string = 'It was many and many a year ago'\n\nprint('before, outer_string =', outer_string)\ntry_to_change_string_reference(outer_string)\nprint('after, outer_string =', outer_string)\n\n\nOutput:\n\nbefore, outer_string = It was many and many a year ago\ngot It was many and many a year ago\nset to In a kingdom by the sea\nafter, outer_string = It was many and many a year ago\n\n\nAgain, since the the_string parameter was passed by value, assigning a new string to it had no effect that the code outside the method could see. The the_string was a copy of the outer_string reference, and we had the_string point to a new string, but there was no way to change where outer_string pointed.\n\nI hope this clears things up a little.\n\nEDIT: It's been noted that this doesn't answer the question that @David originally asked, \"Is there something I can do to pass the variable by actual reference?\". Let's work on that.\n\nHow do we get around this?\n\nAs @Andrea's answer shows, you could return the new value. This doesn't change the way things are passed in, but does let you get the information you want back out:\n\ndef return_a_whole_new_string(the_string):\n    new_string = something_to_do_with_the_old_string(the_string)\n    return new_string\n\n# then you could call it like\nmy_string = return_a_whole_new_string(my_string)\n\n\nIf you really wanted to avoid using a return value, you could create a class to hold your value and pass it into the function or use an existing class, like a list:\n\ndef use_a_wrapper_to_simulate_pass_by_reference(stuff_to_change):\n    new_string = something_to_do_with_the_old_string(stuff_to_change[0])\n    stuff_to_change[0] = new_string\n\n# then you could call it like\nwrapper = [my_string]\nuse_a_wrapper_to_simulate_pass_by_reference(wrapper)\n\ndo_something_with(wrapper[0])\n\n\nAlthough this seems a little cumbersome.\n    ",
        "votes": 3174,
        "comentarios": [
            {
                "decripcion": "Then the same is in C, when you pass \"by reference\" you're actually passing by value the reference... Define \"by reference\" :P",
                "fecha": { "$date" : "2009-06-12T11:52:33Z" },
                "usuario": "Andrea Ambu",
                "usuario_id": 434
            },
            {
                "decripcion": "I'm not sure I understand your terms. I've been out of the C game for a while, but back when I was in it, there was no \"pass by reference\" - you could pass things, and it was always pass by value, so whatever was in the parameter list was copied. But sometimes the thing was a pointer, which one could follow to the piece of memory (primitive, array, struct, whatever), but you couldn't change the pointer that was copied from the outer scope - when you were done with the function, the original pointer still pointed to the same address. C++ introduced references, which behaved differently.",
                "fecha": { "$date" : "2009-06-12T12:09:22Z" },
                "usuario": "Blair Conrad",
                "usuario_id": 218
            },
            {
                "decripcion": "@Zac Bowling I don't really get how what you're saying is relevant, in a practical sense, to this answer. If a Python newcomer wanted to know about passing by ref/val, then the takeaway from this answer is: 1- You can use the reference that a function receives as its arguments, to modify the 'outside' value of a variable, as long as you don't reassign the parameter to refer to a new object. 2- Assigning to an immutable type will always create a new object, which breaks the reference that you had to the outside variable.",
                "fecha": { "$date" : "2011-09-08T23:50:34Z" },
                "usuario": "Cam Jackson",
                "usuario_id": 146
            },
            {
                "decripcion": "@CamJackson, you need a better example - numbers are also immutable objects in Python. Besides, wouldn't it be true to say that any assignment without subscripting on the left side of the equals will reassign the name to a new object whether it is immutable or not? def Foo(alist): alist = [1,2,3] will not modify the contents of the list from the callers perspective.",
                "fecha": { "$date" : "2011-11-15T16:46:32Z" },
                "usuario": "Mark Ransom",
                "usuario_id": 104
            },
            {
                "decripcion": "-1. The code shown is good, the explanation as to how is completely wrong.  See the answers by DavidCournapeau or DarenThomas for correct explanations as to why.",
                "fecha": { "$date" : "2012-01-07T06:41:59Z" },
                "usuario": "Ethan Furman",
                "usuario_id": 167
            }
        ],
        "usuario": "Blair Conrad",
        "usuario_id": 218
    },
    {
        "_id": 264,
        "fecha": { "$date" : "2017-04-03T00:39:27Z" },
        "decripcion": "\nThe problem comes from a misunderstanding of what variables are in Python. If you're used to most traditional languages, you have a mental model of what happens in the following sequence:\n\na = 1\na = 2\n\n\nYou believe that a is a memory location that stores the value 1, then is updated to store the value 2. That's not how things work in Python. Rather, a starts as a reference to an object with the value 1, then gets reassigned as a reference to an object with the value 2. Those two objects may continue to coexist even though a doesn't refer to the first one anymore; in fact they may be shared by any number of other references within the program.\n\nWhen you call a function with a parameter, a new reference is created that refers to the object passed in. This is separate from the reference that was used in the function call, so there's no way to update that reference and make it refer to a new object. In your example:\n\ndef __init__(self):\n    self.variable = 'Original'\n    self.Change(self.variable)\n\ndef Change(self, var):\n    var = 'Changed'\n\n\nself.variable is a reference to the string object 'Original'. When you call Change you create a second reference var to the object. Inside the function you reassign the reference var to a different string object 'Changed', but the reference self.variable is separate and does not change.\n\nThe only way around this is to pass a mutable object. Because both references refer to the same object, any changes to the object are reflected in both places.\n\ndef __init__(self):         \n    self.variable = ['Original']\n    self.Change(self.variable)\n\ndef Change(self, var):\n    var[0] = 'Changed'\n\n    ",
        "votes": 786,
        "comentarios": [
            {
                "decripcion": "Good succinct explanation. Your paragraph \"When you call a function...\" is one of the best explanations I've heard of the rather cryptic phrase that 'Python function parameters are references, passed by value.' I think if you understand that paragraph alone, everything else kind of just makes sense and flows as a logical conclusion from there. Then you just have to be aware of when you're creating a new object and when you're modifying an existing one.",
                "fecha": { "$date" : "2011-11-16T00:03:53Z" },
                "usuario": "Cam Jackson",
                "usuario_id": 146
            },
            {
                "decripcion": "But how can you reassign the reference? I thought you can't change the address of 'var' but that your string \"Changed\" was now going to be stored in the 'var' memory address. Your description makes it seem like \"Changed\" and \"Original\" belong to different places in memory instead and you just switch 'var' to a different address. Is that correct?",
                "fecha": { "$date" : "2012-05-07T01:10:29Z" },
                "usuario": "Glassjawed",
                "usuario_id": 435
            },
            {
                "decripcion": "@Glassjawed, I think you're getting it. \"Changed\" and \"Original\" are two different string objects at different memory addresses and 'var' changes from pointing to one to pointing to the other.",
                "fecha": { "$date" : "2012-05-07T01:46:48Z" },
                "usuario": "Mark Ransom",
                "usuario_id": 104
            },
            {
                "decripcion": "using the id() function helps clarify matters, because it makes it clear when Python creates a new object (so I think, anyway).",
                "fecha": { "$date" : "2015-11-11T10:07:29Z" },
                "usuario": "Tim Richardson",
                "usuario_id": 436
            },
            {
                "decripcion": "@MinhTran in the simplest terms, a reference is something that \"refers\" to an object. The physical representation of that is most likely a pointer, but that's simply an implementation detail. It really is an abstract notion at heart.",
                "fecha": { "$date" : "2018-10-20T04:21:58Z" },
                "usuario": "Mark Ransom",
                "usuario_id": 104
            }
        ],
        "usuario": "Mark Ransom",
        "usuario_id": 104
    },
    {
        "_id": 265,
        "fecha": { "$date" : "2016-05-25T15:30:05Z" },
        "decripcion": "\nI found the other answers rather long and complicated, so I created this simple diagram to explain the way Python treats variables and parameters.\n\n    ",
        "votes": 385,
        "comentarios": [
            {
                "decripcion": "lovely, makes it easy to spot the subtle diff that there is an intermediate assignment, not obvious to a casual onlooker. +1",
                "fecha": { "$date" : "2016-01-03T15:02:44Z" },
                "usuario": "user22866",
                "usuario_id": 437
            },
            {
                "decripcion": "It doesn't matter if A is mutable or not. If you assign something different to B, A doesn't change. If an object is mutable, you can mutate it, sure. But that has nothing to do with assignment directly to a name..",
                "fecha": { "$date" : "2016-05-25T00:06:08Z" },
                "usuario": "Martijn Pieters\u2666",
                "usuario_id": 13
            },
            {
                "decripcion": "@Martijn You're right. I removed the part of the answer that mentions mutability. I don't think it can get any simpler now.",
                "fecha": { "$date" : "2016-05-25T16:19:27Z" },
                "usuario": "Zenadix",
                "usuario_id": 438
            },
            {
                "decripcion": "Thanks for the update, much better! What confuses most people is assignment to a subscription; e.g. B[0] = 2, vs. direct assignment, B = 2.",
                "fecha": { "$date" : "2016-05-25T16:32:34Z" },
                "usuario": "Martijn Pieters\u2666",
                "usuario_id": 13
            },
            {
                "decripcion": "\"A is assigned to B.\" Is that not ambiguous? I think in ordinary English that can mean either A=B or B=A.",
                "fecha": { "$date" : "2016-07-04T23:06:47Z" },
                "usuario": "Hatshepsut",
                "usuario_id": 439
            }
        ],
        "usuario": "Zenadix",
        "usuario_id": 438
    },
    {
        "_id": 266,
        "fecha": { "$date" : "2021-05-30T16:36:04Z" },
        "decripcion": "\nIt is neither pass-by-value or pass-by-reference - it is call-by-object. See this, by Fredrik Lundh:\nhttp://effbot.org/zone/call-by-object.htm\nHere is a significant quote:\n\n\"...variables [names] are not objects; they cannot be denoted by other variables or referred to by objects.\"\n\nIn your example, when the Change method is called--a namespace is created for it; and var becomes a name, within that namespace, for the string object 'Original'. That object then has a name in two namespaces. Next, var = 'Changed' binds var to a new string object, and thus the method's namespace forgets about 'Original'. Finally, that namespace is forgotten, and the string 'Changed' along with it.\n    ",
        "votes": 258,
        "comentarios": [
            {
                "decripcion": "I find it hard to buy. To me is just as Java, the parameters are pointers to objects in memory, and those pointers are passed via the stack, or registers.",
                "fecha": { "$date" : "2011-12-13T01:25:55Z" },
                "usuario": "Luciano",
                "usuario_id": 440
            },
            {
                "decripcion": "This is not like java. One of the case where it is not the same is immutable objects. Think about the trivial function lambda x: x. Apply this for x = [1, 2, 3] and x = (1, 2, 3). In the first case, the returned value will be a copy of the input, and identical in the second case.",
                "fecha": { "$date" : "2011-12-14T01:53:45Z" },
                "usuario": "David Cournapeau",
                "usuario_id": 441
            },
            {
                "decripcion": "No, it's exactly like Java's semantics for objects. I'm not sure what you mean by \"In the first case, the returned value will be a copy of the input, and identical in the second case.\" but that statement seems to be plainly incorrect.",
                "fecha": { "$date" : "2012-11-14T20:58:57Z" },
                "usuario": "Mike Graham",
                "usuario_id": 329
            },
            {
                "decripcion": "It is exactly the same as in Java. Object references are passed by value. Anyone who thinks differently should attach the Python code for a swap function that can swap two references, like this:  a = [42] ; b = 'Hello'; swap(a, b) # Now a is 'Hello', b is [42]",
                "fecha": { "$date" : "2012-12-20T03:42:47Z" },
                "usuario": "cayhorstmann",
                "usuario_id": 442
            },
            {
                "decripcion": "It is exactly the same as Java when you pass objects in Java. However, Java also have primitives, which are passed by copying the value of the primitive. Thus they differ in that case.",
                "fecha": { "$date" : "2013-07-17T18:59:25Z" },
                "usuario": "Claudiu",
                "usuario_id": 443
            }
        ],
        "usuario": "David Cournapeau",
        "usuario_id": 441
    },
    {
        "_id": 267,
        "fecha": { "$date" : "2019-11-20T04:37:51Z" },
        "decripcion": "\nThink of stuff being passed by assignment instead of by reference/by value. That way, it is always clear, what is happening as long as you understand what happens during the normal assignment.\n\nSo, when passing a list to a function/method, the list is assigned to the parameter name. Appending to the list will result in the list being modified. Reassigning the list inside the function will not change the original list, since:\n\na = [1, 2, 3]\nb = a\nb.append(4)\nb = ['a', 'b']\nprint a, b      # prints [1, 2, 3, 4] ['a', 'b']\n\n\nSince immutable types cannot be modified, they seem like being passed by value - passing an int into a function means assigning the int to the function's parameter. You can only ever reassign that, but it won't change the original variables value.\n    ",
        "votes": 202,
        "comentarios": [
            {
                "decripcion": "At first glance this answer seems to sidestep the original question. After a second read I've come to realize that this makes the matter quite clear. A good follow up to this \"name assignment\" concept may be found  here: Code Like a Pythonista: Idiomatic Python",
                "fecha": { "$date" : "2017-11-22T21:45:48Z" },
                "usuario": "Christian Groleau",
                "usuario_id": 444
            }
        ],
        "usuario": "Daren Thomas",
        "usuario_id": 445
    },
    {
        "_id": 268,
        "fecha": { "$date" : "2020-04-27T10:17:30Z" },
        "decripcion": "\nThere are no variables in Python\n\nThe key to understanding parameter passing is to stop thinking about \"variables\". There are names and objects in Python and together they\nappear like variables, but it is useful to always distinguish the three.\n\n\nPython has names and objects.\nAssignment binds a name to an object.\nPassing an argument into a function also binds a name (the parameter name of the function) to an object.\n\n\nThat is all there is to it. Mutability is irrelevant to this question.\n\nExample:\n\na = 1\n\n\nThis binds the name a to an object of type integer that holds the value 1.\n\nb = x\n\n\nThis binds the name b to the same object that the name x is currently bound to.\nAfterward, the name b has nothing to do with the name x anymore.\n\nSee sections 3.1 and 4.2 in the Python 3 language reference.\n\nHow to read the example in the question\n\nIn the code shown in the question, the statement self.Change(self.variable) binds the name var (in the scope of function Change) to the object that holds the value 'Original' and the assignment var = 'Changed' (in the body of function Change) assigns that same name again: to some other object (that happens to hold a string as well but could have been something else entirely).\n\nHow to pass by reference\n\nSo if the thing you want to change is a mutable object, there is no problem, as everything is effectively passed by reference.\n\nIf it is an immutable object (e.g. a bool, number, string), the way to go is to wrap it in a mutable object.\nThe quick-and-dirty solution for this is a one-element list (instead of self.variable, pass [self.variable] and in the function modify var[0]).\nThe more pythonic approach would be to introduce a trivial, one-attribute class. The function receives an instance of the class and manipulates the attribute.\n    ",
        "votes": 83,
        "comentarios": [
            {
                "decripcion": "\"Python has no variables\" is a silly and confusing slogan, and I really wish people would stop saying it... :(   The rest of this answer is good!",
                "fecha": { "$date" : "2014-06-23T21:53:13Z" },
                "usuario": "Ned Batchelder",
                "usuario_id": 381
            },
            {
                "decripcion": "It may be shocking, but it is not silly. And I don't think it is confusing either: It hopefully opens up the recipient's mind for the explanation that is coming and puts her in a useful \"I wonder what they have instead of variables\" attitude. (Yes, your mileage may vary.)",
                "fecha": { "$date" : "2014-06-25T07:30:38Z" },
                "usuario": "Lutz Prechelt",
                "usuario_id": 164
            },
            {
                "decripcion": "would you also say that Javascript has no variables? They work the same as Python's.  Also, Java, Ruby, PHP, ....   I think a better teaching technique is, \"Python's variables work differently than C's.\"",
                "fecha": { "$date" : "2014-06-25T11:09:48Z" },
                "usuario": "Ned Batchelder",
                "usuario_id": 381
            },
            {
                "decripcion": "Yes, Java has variables. So does Python, and JavaScript, Ruby, PHP, etc.  You wouldn't say in Java that int declares a variable, but Integer does not.  They both declare variables.  The Integer variable is an object, the int variable is a primitive.  As an example, you demonstrated how your variables work by showing a = 1; b = a; a++ # doesn't modify b.  That's exactly true in Python also (using += 1 since there is no ++ in Python)!",
                "fecha": { "$date" : "2014-10-29T16:29:37Z" },
                "usuario": "Ned Batchelder",
                "usuario_id": 381
            },
            {
                "decripcion": "The concept of \"variable\" is complex and often vague: A variable is a container for a value, identified by a name. In Python, the values are objects, the containers are objects (see the problem?) and the names are actually separate things. I believe it is much tougher to get an accurate understanding of variables in this manner. The names-and-objects explanation appears more difficult, but is actually simpler.",
                "fecha": { "$date" : "2015-10-09T10:51:43Z" },
                "usuario": "Lutz Prechelt",
                "usuario_id": 164
            }
        ],
        "usuario": "Lutz Prechelt",
        "usuario_id": 164
    },
    {
        "_id": 269,
        "fecha": { "$date" : "2013-03-29T04:41:44Z" },
        "decripcion": "\nEffbot (aka Fredrik Lundh) has described Python's variable passing style as call-by-object:  http://effbot.org/zone/call-by-object.htm\n\nObjects are allocated on the heap and pointers to them can be passed around anywhere.  \n\n\nWhen you make an assignment such as x = 1000, a dictionary entry is created that maps the string \"x\" in the current namespace to a pointer to the integer object containing one thousand.   \nWhen you update \"x\" with x = 2000, a new integer object is created and the dictionary is updated to point at the new object.  The old one thousand object is unchanged (and may or may not be alive depending on whether anything else refers to the object).\nWhen you do a new assignment such as y = x, a new dictionary entry \"y\" is created that points to the same object as the entry for \"x\".\nObjects like strings and integers are immutable.  This simply means that there are no methods that can change the object after it has been created.  For example, once the integer object one-thousand is created, it will never change.  Math is done by creating new integer objects.\nObjects like lists are mutable.  This means that the contents of the object can be changed by anything pointing to the object.  For example, x = []; y = x; x.append(10); print y will print [10].  The empty list was created.  Both \"x\" and \"y\" point to the same list.  The append method mutates (updates) the list object (like adding a record to a database) and the result is visible to both \"x\" and \"y\" (just as a database update would be visible to every connection to that database).\n\n\nHope that clarifies the issue for you. \n    ",
        "votes": 79,
        "comentarios": [
            {
                "decripcion": "I really appreciate learning about this from a developer. Is it true that the id() function returns the pointer's (object reference's) value, as pepr's answer suggests?",
                "fecha": { "$date" : "2014-01-13T22:21:16Z" },
                "usuario": "Honest Abe",
                "usuario_id": 446
            },
            {
                "decripcion": "@HonestAbe Yes, in CPython the id() returns the address.  But in other pythons such as PyPy and Jython, the id() is just a unique object identifier.",
                "fecha": { "$date" : "2014-01-14T09:03:32Z" },
                "usuario": "Raymond Hettinger",
                "usuario_id": 447
            }
        ],
        "usuario": "Raymond Hettinger",
        "usuario_id": 447
    },
    {
        "_id": 270,
        "fecha": { "$date" : "2017-05-23T12:18:21Z" },
        "decripcion": "\nTechnically, Python always uses pass by reference values. I am going to repeat my other answer to support my statement.\n\nPython always uses pass-by-reference values. There isn't any exception. Any variable assignment means copying the reference value. No exception. Any variable is the name bound to the reference value. Always.\n\nYou can think about a reference value as the address of the target object. The address is automatically dereferenced when used. This way, working with the reference value, it seems you work directly with the target object. But there always is a reference in between, one step more to jump to the target.\n\nHere is the example that proves that Python uses passing by reference:\n\n\n\nIf the argument was passed by value, the outer lst could not be modified. The green are the target objects (the black is the value stored inside, the red is the object type), the yellow is the memory with the reference value inside -- drawn as the arrow. The blue solid arrow is the reference value that was passed to the function (via the dashed blue arrow path). The ugly dark yellow is the internal dictionary. (It actually could be drawn also as a green ellipse. The colour and the shape only says it is internal.)\n\nYou can use the id() built-in function to learn what the reference value is (that is, the address of the target object).\n\nIn compiled languages, a variable is a memory space that is able to capture the value of the type. In Python, a variable is a name (captured internally as a string) bound to the reference variable that holds the reference value to the target object. The name of the variable is the key in the internal dictionary, the value part of that dictionary item stores the reference value to the target.\n\nReference values are hidden in Python. There isn't any explicit user type for storing the reference value. However, you can use a list element (or element in any other suitable container type) as the reference variable, because all containers do store the elements also as references to the target objects. In other words, elements are actually not contained inside the container -- only the references to elements are.\n    ",
        "votes": 65,
        "comentarios": [
            {
                "decripcion": "Actually this is confirmed its pass by reference value. +1 for this answer although the example wasnt good.",
                "fecha": { "$date" : "2012-10-04T17:03:47Z" },
                "usuario": "BugShotGG",
                "usuario_id": 448
            },
            {
                "decripcion": "Inventing new terminology (such as \"pass by reference value\" or \"call by object\" is not helpful). \"Call by (value|reference|name)\" are standard terms. \"reference\" is a standard term. Passing references by value accurately describes the behavior of Python, Java, and a host of other languages, using standard terminology.",
                "fecha": { "$date" : "2012-12-20T03:54:47Z" },
                "usuario": "cayhorstmann",
                "usuario_id": 442
            },
            {
                "decripcion": "@cayhorstmann: The problem is that Python variable has not the same terminology meaning as in other languages. This way, call by reference does not fit well here. Also, how do you exactly define the term reference? Informally, the Python way could be easily described as passing the address of the object. But it does not fit with a potentially distributed implementation of Python.",
                "fecha": { "$date" : "2012-12-20T08:54:24Z" },
                "usuario": "pepr",
                "usuario_id": 449
            },
            {
                "decripcion": "I like this answer, but you might consider if the example is really helping or hurting the flow. Also, if you replaced 'reference value' with 'object reference' you would be using terminology that we could consider 'official', as seen here: Defining Functions",
                "fecha": { "$date" : "2014-01-13T22:10:01Z" },
                "usuario": "Honest Abe",
                "usuario_id": 446
            },
            {
                "decripcion": "There is a footnote indicated at the end of that quote, which reads: \"Actually, call by object reference would be a better description, since if a mutable object is passed, the caller will see any changes the callee makes to it...\" I agree with you that confusion is caused by trying to fit terminology established with other languages. Semantics aside, the things that need to be understood are: dictionaries / namespaces, name binding operations and the relationship of name\u2192pointer\u2192object (as you already know).",
                "fecha": { "$date" : "2014-01-16T06:28:53Z" },
                "usuario": "Honest Abe",
                "usuario_id": 446
            }
        ],
        "usuario": "pepr",
        "usuario_id": 449
    },
    {
        "_id": 271,
        "fecha": { "$date" : "2011-08-08T10:39:48Z" },
        "decripcion": "\nA simple trick I normally use is to just wrap it in a list:\n\ndef Change(self, var):\n    var[0] = 'Changed'\n\nvariable = ['Original']\nself.Change(variable)      \nprint variable[0]\n\n\n(Yeah I know this can be inconvenient, but sometimes it is simple enough to do this.)\n    ",
        "votes": 51,
        "comentarios": [
            {
                "decripcion": "+1 for small amount of text giving the essential workaround to the problem of Python not having pass-by-reference. (As a follow-on comment/question that fits here as well as anywhere on this page: It's not clear to my why python can't provide a \"ref\" keyword like C# does, that simply wraps the caller's argument in a list like this, and treat references to the argument within the function as the 0th element of the list.)",
                "fecha": { "$date" : "2014-09-16T06:33:28Z" },
                "usuario": "M Katz",
                "usuario_id": 450
            },
            {
                "decripcion": "Nice. To pass by ref, wrap in [ ]'s.",
                "fecha": { "$date" : "2015-02-01T05:49:17Z" },
                "usuario": "Justas",
                "usuario_id": 451
            }
        ],
        "usuario": "AmanicA",
        "usuario_id": 452
    },
    {
        "_id": 272,
        "fecha": { "$date" : "2015-10-09T15:00:42Z" },
        "decripcion": "\n(edit - Blair has updated his enormously popular answer so that it is now accurate)\n\nI think it is important to note that the current post with the most votes (by Blair Conrad), while being correct with respect to its result, is misleading and is borderline incorrect based on its definitions.  While there are many languages (like C) that allow the user to either pass by reference or pass by value, Python is not one of them.\n\nDavid Cournapeau's answer points to the real answer and explains why the behavior in Blair Conrad's post seems to be correct while the definitions are not.\n\nTo the extent that Python is pass by value, all languages are pass by value since some piece of data (be it a \"value\" or a \"reference\") must be sent. However, that does not mean that Python is pass by value in the sense that a C programmer would think of it.\n\nIf you want the behavior, Blair Conrad's answer is fine.  But if you want to know the nuts and bolts of why Python is neither pass by value or pass by reference, read David Cournapeau's answer.\n    ",
        "votes": 40,
        "comentarios": [
            {
                "decripcion": "It is simply not true that all languages are call by value. In C++ or Pascal (and surely many others that I don't know), you have call by reference. For example, in C++, void swap(int& x, int& y) { int temp = x; x = y; y = temp; } will swap the variables passed to it. In Pascal, you use var instead of &.",
                "fecha": { "$date" : "2012-12-20T03:49:01Z" },
                "usuario": "cayhorstmann",
                "usuario_id": 442
            },
            {
                "decripcion": "I thought I had replied to this long ago but I don't see it. For completeness - cayhorstmann misunderstood my answer. I was not saying everything is call by value in the terms that most people first learn regarding C / C++. It was simply that some value is passed (value, name, pointer, etc.) and that the terms used in Blair's original answer were inaccurate.",
                "fecha": { "$date" : "2015-10-09T15:03:12Z" },
                "usuario": "KobeJohn",
                "usuario_id": 453
            }
        ],
        "usuario": "KobeJohn",
        "usuario_id": 453
    },
    {
        "_id": 273,
        "fecha": { "$date" : "2012-01-27T04:28:48Z" },
        "decripcion": "\nYou got some really good answers here.\n\nx = [ 2, 4, 4, 5, 5 ]\nprint x  # 2, 4, 4, 5, 5\n\ndef go( li ) :\n  li = [ 5, 6, 7, 8 ]  # re-assigning what li POINTS TO, does not\n  # change the value of the ORIGINAL variable x\n\ngo( x ) \nprint x  # 2, 4, 4, 5, 5  [ STILL! ]\n\n\nraw_input( 'press any key to continue' )\n\n    ",
        "votes": 28,
        "comentarios": [
            {
                "decripcion": "yea, however if you do   x = [ 2, 4, 4, 5, 5],  y = x,  X[0] = 1 , print x # [1, 4 ,4, 5, 5]  print y # [1, 4, 4, 5, 5]",
                "fecha": { "$date" : "2014-06-29T03:37:36Z" },
                "usuario": "laycat",
                "usuario_id": 454
            },
            {
                "decripcion": "X[0]   or x[0] ? don't get it",
                "fecha": { "$date" : "2021-08-01T07:16:57Z" },
                "usuario": "pippo1980",
                "usuario_id": 455
            }
        ],
        "usuario": "bobobobo",
        "usuario_id": 456
    },
    {
        "_id": 274,
        "fecha": { "$date" : "2015-03-27T04:38:18Z" },
        "decripcion": "\nPython\u2019s pass-by-assignment scheme isn\u2019t quite the same as C++\u2019s reference parameters option, but it turns out to be very similar to the argument-passing model of the C language (and others) in practice:\n\n\nImmutable arguments are effectively passed \u201cby value.\u201d Objects such as integers and strings are passed by object reference instead of by copying, but because you can\u2019t change immutable objects in place anyhow, the effect is much like making a copy.\nMutable arguments are effectively passed \u201cby pointer.\u201d Objects such as lists\nand dictionaries are also passed by object reference, which is similar to the way C\npasses arrays as pointers\u2014mutable objects can be changed in place in the function,\nmuch like C arrays.\n\n    ",
        "votes": 23,
        "comentarios": [],
        "usuario": "ajknzhol",
        "usuario_id": 457
    },
    {
        "_id": 275,
        "fecha": { "$date" : "2009-06-12T10:39:59Z" },
        "decripcion": "\nIn this case the variable titled var in the method Change is assigned a reference to self.variable, and you immediately assign a string to var. It's no longer pointing to self.variable. The following code snippet shows what would happen if you modify the data structure pointed to by var and self.variable, in this case a list:\n\n>>> class PassByReference:\n...     def __init__(self):\n...         self.variable = ['Original']\n...         self.change(self.variable)\n...         print self.variable\n...         \n...     def change(self, var):\n...         var.append('Changed')\n... \n>>> q = PassByReference()\n['Original', 'Changed']\n>>> \n\n\nI'm sure someone else could clarify this further.\n    ",
        "votes": 20,
        "comentarios": [],
        "usuario": "Mike Mazur",
        "usuario_id": 458
    },
    {
        "_id": 276,
        "fecha": { "$date" : "2016-08-09T02:23:54Z" },
        "decripcion": "\nAs you can state you need to have a mutable object, but let me suggest you to check over the global variables as they can help you or even solve this kind of issue!\n\nhttp://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python\n\nexample:\n\n>>> def x(y):\n...     global z\n...     z = y\n...\n\n>>> x\n<function x at 0x00000000020E1730>\n>>> y\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'y' is not defined\n>>> z\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'z' is not defined\n\n>>> x(2)\n>>> x\n<function x at 0x00000000020E1730>\n>>> y\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'y' is not defined\n>>> z\n2\n\n    ",
        "votes": 19,
        "comentarios": [
            {
                "decripcion": "I was tempted to post a similar response- the original questioner may not have known that what he wanted was in fact to use a global variable, shared among functions. Here's the link I would have shared: stackoverflow.com/questions/423379/\u2026  In answer to @Tim, Stack Overflow is not only a question and answer site, it's a vast repository of reference knowledge that only gets stronger and more nuanced- much like an active wiki- with more input.",
                "fecha": { "$date" : "2014-06-30T18:39:20Z" },
                "usuario": "Max P Magee",
                "usuario_id": 459
            }
        ],
        "usuario": "Nuno Aniceto",
        "usuario_id": 460
    },
    {
        "_id": 277,
        "fecha": { "$date" : "2014-09-29T07:12:10Z" },
        "decripcion": "\nA lot of insights in answers here, but i think an additional point is not clearly mentioned here explicitly.   Quoting from python documentation https://docs.python.org/2/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python  \n\n\"In Python, variables that are only referenced inside a function are implicitly global. If a variable is assigned a new value anywhere within the function\u2019s body, it\u2019s assumed to be a local. If a variable is ever assigned a new value inside the function, the variable is implicitly local, and you need to explicitly declare it as \u2018global\u2019.\nThough a bit surprising at first, a moment\u2019s consideration explains this. On one hand, requiring global for assigned variables provides a bar against unintended side-effects. On the other hand, if global was required for all global references, you\u2019d be using global all the time. You\u2019d have to declare as global every reference to a built-in function or to a component of an imported module. This clutter would defeat the usefulness of the global declaration for identifying side-effects.\"\n\nEven when passing a mutable object to a function this still applies. And to me clearly explains the reason for the difference in behavior between assigning to the object and operating on the object in the function.\n\ndef test(l):\n    print \"Received\", l , id(l)\n    l = [0, 0, 0]\n    print \"Changed to\", l, id(l)  # New local object created, breaking link to global l\n\nl= [1,2,3]\nprint \"Original\", l, id(l)\ntest(l)\nprint \"After\", l, id(l)\n\n\ngives:\n\nOriginal [1, 2, 3] 4454645632\nReceived [1, 2, 3] 4454645632\nChanged to [0, 0, 0] 4474591928\nAfter [1, 2, 3] 4454645632\n\n\nThe assignment to an global variable that is not declared global therefore creates a new local object and breaks the link to the original object.\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "Joop",
        "usuario_id": 461
    },
    {
        "_id": 278,
        "fecha": { "$date" : "2017-05-23T11:54:59Z" },
        "decripcion": "\nHere is the simple (I hope) explanation of the concept pass by object used in Python.\nWhenever you pass an object to the function, the object itself is passed (object in Python is actually what you'd call a value in other programming languages) not the reference to this object. In other words, when you call:\n\ndef change_me(list):\n   list = [1, 2, 3]\n\nmy_list = [0, 1]\nchange_me(my_list)\n\n\nThe actual object - [0, 1] (which would be called a value in other programming languages) is being passed. So in fact the function change_me will try to do something like:\n\n[0, 1] = [1, 2, 3]\n\n\nwhich obviously will not change the object passed to the function. If the function looked like this:\n\ndef change_me(list):\n   list.append(2)\n\n\nThen the call would result in:\n\n[0, 1].append(2)\n\n\nwhich obviously will change the object. This answer explains it well.\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "The problem is that the assignment does something else than you expect. The list = [1, 2, 3] causes reusing the list name for something else and forgeting the originally passed object. However, you can try list[:] = [1, 2, 3] (by the way list is wrong name for a variable. Thinking about [0, 1] = [1, 2, 3] is a complete nonsense. Anyway, what do you think means the object itself is passed? What is copied to the function in your opinion?",
                "fecha": { "$date" : "2012-10-03T20:46:23Z" },
                "usuario": "pepr",
                "usuario_id": 449
            },
            {
                "decripcion": "@pepr objects aren't literals. They are objects. The only way to talk about them is giving them some names. That's why it's so simple once you grasp it, but enormously complicated to explain. :-)",
                "fecha": { "$date" : "2014-05-09T09:10:45Z" },
                "usuario": "Veky",
                "usuario_id": 178
            },
            {
                "decripcion": "@Veky: I am aware of that. Anyway, the list literal is converted to the list object. Actually, any object in Python can exist without a name, and it can be used even when not given any name. And you can think about them as about anonymous objects. Think about objects being the elements of a lists. They need not a name. You can access them through indexing of or iterating through the list. Anyway, I insist on [0, 1] = [1, 2, 3] is simply a bad example. There is nothing like that in Python.",
                "fecha": { "$date" : "2014-05-12T11:05:32Z" },
                "usuario": "pepr",
                "usuario_id": 449
            },
            {
                "decripcion": "@pepr: I don't necessarily mean Python-definition names, just ordinary names. Of course alist[2] counts as a name of a third element of alist. But I think I misunderstood what your problem was. :-)",
                "fecha": { "$date" : "2014-05-12T12:35:58Z" },
                "usuario": "Veky",
                "usuario_id": 178
            },
            {
                "decripcion": "Argh. My English is obviously much worse than my Python. :-) I'll try just once more. I just said you have to give object some names just to talk about them. By that \"names\" I didn't mean \"names as defined by Python\". I know Python mechanisms, don't worry.",
                "fecha": { "$date" : "2014-05-15T05:20:34Z" },
                "usuario": "Veky",
                "usuario_id": 178
            }
        ],
        "usuario": "matino",
        "usuario_id": 462
    },
    {
        "_id": 279,
        "fecha": { "$date" : "2016-08-09T02:23:27Z" },
        "decripcion": "\nAside from all the great explanations on how this stuff works in Python, I don't see a simple suggestion for the problem. As you seem to do create objects and instances, the pythonic way of handling instance variables and changing them is the following:\n\nclass PassByReference:\n    def __init__(self):\n        self.variable = 'Original'\n        self.Change()\n        print self.variable\n\n    def Change(self):\n        self.variable = 'Changed'\n\n\nIn instance methods, you normally refer to self to access instance attributes. It is normal to set instance attributes in __init__ and read or change them in instance methods. That is also why you pass self als the first argument to def Change.\n\nAnother solution would be to create a static method like this:\n\nclass PassByReference:\n    def __init__(self):\n        self.variable = 'Original'\n        self.variable = PassByReference.Change(self.variable)\n        print self.variable\n\n    @staticmethod\n    def Change(var):\n        var = 'Changed'\n        return var\n\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "Dolf Andringa",
        "usuario_id": 463
    },
    {
        "_id": 280,
        "fecha": { "$date" : "2016-04-21T16:47:42Z" },
        "decripcion": "\nThere is a little trick to pass an object by reference, even though the language doesn't make it possible. It works in Java too, it's the list with one item. ;-)\n\nclass PassByReference:\n    def __init__(self, name):\n        self.name = name\n\ndef changeRef(ref):\n    ref[0] = PassByReference('Michael')\n\nobj = PassByReference('Peter')\nprint obj.name\n\np = [obj] # A pointer to obj! ;-)\nchangeRef(p)\n\nprint p[0].name # p->name\n\n\nIt's an ugly hack, but it works. ;-P\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "p is reference to a mutable list object which in turn stores the object obj. The reference 'p', gets passed into changeRef. Inside changeRef, a new reference is created (the new reference is called ref) that points to the same list object that p points to. But because lists are mutable, changes to the list are visible by both references. In this case, you used the ref reference to change the object at index 0 so that it subsequently stores the PassByReference('Michael') object. The change  to the list object was done using ref but this change is visible to p.",
                "fecha": { "$date" : "2018-10-20T03:19:21Z" },
                "usuario": "Minh Tran",
                "usuario_id": 464
            },
            {
                "decripcion": "So now, the references p and ref point to a list object that stores the single object, PassByReference('Michael'). So it follows that p[0].name returns Michael. Of course, ref has now gone out of scope and may be garbage collected but all the same.",
                "fecha": { "$date" : "2018-10-20T03:22:21Z" },
                "usuario": "Minh Tran",
                "usuario_id": 464
            },
            {
                "decripcion": "You have not changed the private instance variable, name, of the original PassByReference object associated with the reference obj, though. In fact, obj.name will return Peter. The aforementioned comments assumes the definition Mark Ransom gave.",
                "fecha": { "$date" : "2018-10-20T03:25:29Z" },
                "usuario": "Minh Tran",
                "usuario_id": 464
            },
            {
                "decripcion": "Point being, I don't agree that it's a hack (which I take to mean to refer to something that works but for reasons unknown, untested, or unintended by the implementer). You simply replaced one PassByReference object with another PassByReference object in your list and referred to the latter of the two objects.",
                "fecha": { "$date" : "2018-10-20T03:32:11Z" },
                "usuario": "Minh Tran",
                "usuario_id": 464
            }
        ],
        "usuario": "itmuckel",
        "usuario_id": 465
    },
    {
        "_id": 281,
        "fecha": { "$date" : "2016-08-09T02:22:25Z" },
        "decripcion": "\nI used the following method to quickly convert a couple of Fortran codes to Python.  True, it's not pass by reference as the original question was posed, but is a simple work around in some cases.\n\na=0\nb=0\nc=0\ndef myfunc(a,b,c):\n    a=1\n    b=2\n    c=3\n    return a,b,c\n\na,b,c = myfunc(a,b,c)\nprint a,b,c\n\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "Yes, this solves the 'pass by reference' in my use case as well. I have a function that basically cleans up values in a dict and then returns the dict. However, while cleaning up it may become apparent a rebuild of a part of the system is required. Therefore, the function must not only return the cleaned dict but also be able to signal the rebuild. I tried to pass a bool by reference, but ofc that doesn't work. Figuring out how to solve this, I found your solution (basically returning a tuple) to work best while also not being a hack/workaround at all (IMHO).",
                "fecha": { "$date" : "2020-05-01T16:08:54Z" },
                "usuario": "kasimir",
                "usuario_id": 466
            }
        ],
        "usuario": "Brad Porter",
        "usuario_id": 467
    },
    {
        "_id": 282,
        "fecha": { "$date" : "2016-10-31T15:33:23Z" },
        "decripcion": "\ngiven the way python handles values and references to them, the only way you can reference an arbitrary instance attribute is by name:\n\nclass PassByReferenceIsh:\n    def __init__(self):\n        self.variable = 'Original'\n        self.change('variable')\n        print self.variable\n\n    def change(self, var):\n        self.__dict__[var] = 'Changed'\n\n\nin real code you would, of course, add error checking on the dict lookup.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "mARK bLOORE",
        "usuario_id": 468
    },
    {
        "_id": 283,
        "fecha": { "$date" : "2021-06-01T08:29:19Z" },
        "decripcion": "\nSince dictionaries are passed by reference, you can use a dict variable to store any referenced values inside it.\n# returns the result of adding numbers `a` and `b`\ndef AddNumbers(a, b, ref): # using a dict for reference\n    result = a + b\n    ref['multi'] = a * b # reference the multi. ref['multi'] is number\n    ref['msg'] = \"The result: \" + str(result) + \" was nice!\"\n    return result\n\nnumber1 = 5\nnumber2 = 10\nref = {} # init a dict like that so it can save all the referenced values. this is because all dictionaries are passed by reference, while strings and numbers do not.\n\nsum = AddNumbers(number1, number2, ref)\nprint(\"sum: \", sum)             # the returned value\nprint(\"multi: \", ref['multi'])  # a referenced value\nprint(\"msg: \", ref['msg'])      # a referenced value\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Liakos",
        "usuario_id": 469
    },
    {
        "_id": 284,
        "fecha": { "$date" : "2017-09-10T02:19:53Z" },
        "decripcion": "\nSince your example happens to be object-oriented, you could make the following change to achieve a similar result:\n\nclass PassByReference:\n    def __init__(self):\n        self.variable = 'Original'\n        self.change('variable')\n        print(self.variable)\n\n    def change(self, var):\n        setattr(self, var, 'Changed')\n\n# o.variable will equal 'Changed'\no = PassByReference()\nassert o.variable == 'Changed'\n\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "Although this works. It is not pass by reference. It is 'pass by object reference'.",
                "fecha": { "$date" : "2018-03-14T11:48:30Z" },
                "usuario": "Bishwas Mishra",
                "usuario_id": 470
            }
        ],
        "usuario": "Jesse Hogan",
        "usuario_id": 471
    },
    {
        "_id": 285,
        "fecha": { "$date" : "2019-05-10T00:37:33Z" },
        "decripcion": "\nSince it seems to be nowhere mentioned an approach to simulate references as known from e.g. C++ is to use an \"update\" function and pass that instead of the actual variable (or rather, \"name\"):\n\ndef need_to_modify(update):\n    update(42) # set new value 42\n    # other code\n\ndef call_it():\n    value = 21\n    def update_value(new_value):\n        nonlocal value\n        value = new_value\n    need_to_modify(update_value)\n    print(value) # prints 42\n\n\nThis is mostly useful for \"out-only references\" or in a situation with multiple threads / processes (by making the update function thread / multiprocessing safe).\n\nObviously the above does not allow reading the value, only updating it.\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Daniel Jour",
        "usuario_id": 472
    },
    {
        "_id": 286,
        "fecha": { "$date" : "2016-08-20T14:02:37Z" },
        "decripcion": "\nWhile pass by reference is nothing that fits well into python and should be rarely used there are some workarounds that actually can work to get the object currently assigned to a local variable or even reassign a local variable from inside of a called function.\n\nThe basic idea is to have a function that can do that access and can be passed as object into other functions or stored in a class.\n\nOne way is to use global (for global variables) or nonlocal (for local variables in a function) in a wrapper function.\n\ndef change(wrapper):\n    wrapper(7)\n\nx = 5\ndef setter(val):\n    global x\n    x = val\nprint(x)\n\n\nThe same idea works for reading and deleting a variable.\n\nFor just reading there is even a shorter way of just using lambda: x which returns a callable that when called returns the current value of x. This is somewhat like \"call by name\" used in languages in the distant past.\n\nPassing 3 wrappers to access a variable is a bit unwieldy so those can be wrapped into a class that has a proxy attribute:\n\nclass ByRef:\n    def __init__(self, r, w, d):\n        self._read = r\n        self._write = w\n        self._delete = d\n    def set(self, val):\n        self._write(val)\n    def get(self):\n        return self._read()\n    def remove(self):\n        self._delete()\n    wrapped = property(get, set, remove)\n\n# left as an exercise for the reader: define set, get, remove as local functions using global / nonlocal\nr = ByRef(get, set, remove)\nr.wrapped = 15\n\n\nPythons \"reflection\" support makes it possible to get a object that is capable of reassigning a name/variable in a given scope without defining functions explicitly in that scope:\n\nclass ByRef:\n    def __init__(self, locs, name):\n        self._locs = locs\n        self._name = name\n    def set(self, val):\n        self._locs[self._name] = val\n    def get(self):\n        return self._locs[self._name]\n    def remove(self):\n        del self._locs[self._name]\n    wrapped = property(get, set, remove)\n\ndef change(x):\n    x.wrapped = 7\n\ndef test_me():\n    x = 6\n    print(x)\n    change(ByRef(locals(), \"x\"))\n    print(x)\n\n\nHere the ByRef class wraps a dictionary access. So attribute access to wrapped is translated to a item access in the passed dictionary. By passing the result of the builtin locals and the name of a local variable this ends up accessing a local variable. The python documentation as of 3.5 advises that changing the dictionary might not work but it seems to work for me.\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "textshell",
        "usuario_id": 473
    },
    {
        "_id": 287,
        "fecha": { "$date" : "2019-06-13T04:11:38Z" },
        "decripcion": "\nPass-By-Reference in Python is quite different from the concept of pass by reference in C++/Java. \n\n\nJava&C#: primitive types(include string)pass by value(copy), Reference type is passed by reference(address copy) so all changes made in the parameter in the called function are visible to the caller.\nC++: Both pass-by-reference or pass-by-value are allowed. If a parameter is passed by reference, you can either modify it or not depending upon whether the parameter was passed as const or not. However, const or not, the parameter maintains the reference to the object and reference cannot be assigned to point to a different object within the called function.\nPython: \nPython is \u201cpass-by-object-reference\u201d, of which it is often said: \u201cObject references are passed by value.\u201d[Read here]1. Both the caller and the function refer to the same object but the parameter in the function is a new variable which is just holding a copy of the object in the caller. Like C++, a parameter can be either modified or not in function - This depends upon the type of object passed. eg; An immutable object type cannot be modified in the called function whereas a mutable object can be either updated or re-initialized. A crucial difference between updating or re-assigning/re-initializing the mutable variable is that updated value gets reflected back in the called function whereas the reinitialized value does not. Scope of any assignment of new object to a mutable variable is local to the function in the python. Examples provided by @blair-conrad are great to understand this.\n\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "Old but I feel obliged to correct it. Strings are passed by reference in both Java and C#, NOT by value",
                "fecha": { "$date" : "2019-09-11T16:39:19Z" },
                "usuario": "John",
                "usuario_id": 474
            }
        ],
        "usuario": "Alok Garg",
        "usuario_id": 475
    },
    {
        "_id": 288,
        "fecha": { "$date" : "2018-05-03T14:14:11Z" },
        "decripcion": "\nYou can merely use an empty class as an instance to store reference objects because internally object attributes are stored in an instance dictionary. See the example.\n\nclass RefsObj(object):\n    \"A class which helps to create references to variables.\"\n    pass\n\n...\n\n# an example of usage\ndef change_ref_var(ref_obj):\n    ref_obj.val = 24\n\nref_obj = RefsObj()\nref_obj.val = 1\nprint(ref_obj.val) # or print ref_obj.val for python2\nchange_ref_var(ref_obj)\nprint(ref_obj.val)\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "sergzach",
        "usuario_id": 476
    },
    {
        "_id": 289,
        "fecha": { "$date" : "2020-07-21T20:38:03Z" },
        "decripcion": "\nI am new to Python, started yesterday (though I have been programming for 45 years).\nI came here because I was writing a function where I wanted to have two so called out-parameters. If it would have been only one out-parameter, I wouldn't get hung up right now on checking how reference/value works in Python. I would just have used the return value of the function instead. But since I needed two such out-parameters I felt I needed to sort it out.\nIn this post I am going to show how I solved my situation. Perhaps others coming here can find it valuable, even though it is not exactly an answer to the topic question. Experienced Python programmers of course already know about the solution I used, but it was new to me.\nFrom the answers here I could quickly see that Python works a bit like Javascript in this regard, and that you need to use workarounds if you want the reference functionality.\nBut then I found something neat in Python that I don't think I have seen in other languages before, namely that you can return more than one value from a function, in a simple comma separated way, like this:\ndef somefunction(p):\n    a=p+1\n    b=p+2\n    c=-p\n    return a, b, c\n\nand that you can handle that on the calling side similarly, like this\nx, y, z = somefunction(w)\n\nThat was good enough for me and I was satisfied. No need to use some workaround.\nIn other languages you can of course also return many values, but then usually in the from of an object, and you need to adjust the calling side accordingly.\nThe Python way of doing it was nice and simple.\nIf you want to mimic by reference even more, you could do as follows:\ndef somefunction(a, b, c):\n    a = a * 2\n    b = b + a\n    c = a * b * c\n    return a, b, c\n\nx = 3\ny = 5\nz = 10\nprint(F\"Before : {x}, {y}, {z}\")\n\nx, y, z = somefunction(x, y, z)\n\nprint(F\"After  : {x}, {y}, {z}\")\n\nwhich gives this result\nBefore : 3, 5, 10  \nAfter  : 6, 11, 660  \n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "\"But then I found something neat in Python that I don't think I have seen in other languages before, namely that you can return more than one value from a function\" No, you can't. What you are doing is returning a single value, a tuple, which is what the expression a, b, c creates. You then use iterable unpacking to unpack that tuple into separate variables. Of course, in effect, you can think of this as \"returning multiple values\", but you aren't actually doing that, you are returning a container.",
                "fecha": { "$date" : "2020-08-12T19:45:59Z" },
                "usuario": "juanpa.arrivillaga",
                "usuario_id": 102
            },
            {
                "decripcion": "@juanpa.arrivillaga, yes, I was aware of that when I wrote my answer, I had just read about it. But I just described the whole thing in a practical way without going into the details of how it works and add unnecessary length to my answer. You can indeed return multiple values from a function, if it is done in an object or similar, like in a tuple (which in Python is taken care of in the neat way I showed). When I order things from a company, they can send me multiple things, even if it is all in one package.",
                "fecha": { "$date" : "2020-08-13T09:01:53Z" },
                "usuario": "Magnus",
                "usuario_id": 477
            }
        ],
        "usuario": "Magnus",
        "usuario_id": 477
    },
    {
        "_id": 290,
        "fecha": { "$date" : "2021-01-28T11:06:18Z" },
        "decripcion": "\nalternatively you could use ctypes witch would look something like this\nimport ctypes\n\ndef f(a):\n    a.value=2398 ## resign the value in a function\n\na = ctypes.c_int(0)\nprint(\"pre f\", a)\nf(a)\nprint(\"post f\", a)\n\nas a is a c int and not a python integer and apperently passed by reference. however you have to be carefull as strange things could happen and is therefor not advised\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Julian wandhoven",
        "usuario_id": 478
    },
    {
        "_id": 291,
        "fecha": { "$date" : "2021-03-26T14:49:25Z" },
        "decripcion": "\nMost likely not the most reliable method but this works, keep in mind that you are overloading the built-in str function which is typically something you don't want to do:\nimport builtins\n\nclass sstr(str):\n    def __str__(self):\n        if hasattr(self, 'changed'):\n            return self.changed\n\n        return self\n\n    def change(self, value):\n        self.changed = value\n\nbuiltins.str = sstr\n\ndef change_the_value(val):\n    val.change('After')\n\nval = str('Before')\nprint (val)\nchange_the_value(val)\nprint (val)\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Jop Knoppers",
        "usuario_id": 479
    },
    {
        "_id": 292,
        "fecha": { "$date" : "2021-06-28T17:29:12Z" },
        "decripcion": "\nWhat about dataclasses? Also, it allows you to apply type restriction (aka \"type hint\").\nfrom dataclasses import dataclass\n\n@dataclass\nclass Holder:\n    obj: your_type # Need any type? Use \"obj: object\" then.\n\ndef foo(ref: Holder):\n    ref.obj = do_something()\n\nI agree with folks that in most cases you'd better consider not to use it.\nAnd yet, when we're talking about contexts it's worth to know that way.\nYou can design explicit context class though. When prototyping I prefer dataclasses, just because it's easy to serialize them back and forth.\nCheers!\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Stepan Dyatkovskiy",
        "usuario_id": 480
    },
    {
        "_id": 293,
        "fecha": { "$date" : "2021-05-07T10:09:05Z" },
        "decripcion": "\n\n\u2192 For a more general explanation of asynchronous behaviour with different examples, see Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference\n\u2192 If you already understand the problem, skip to the possible solutions below.\n\nThe problem\nThe A in Ajax stands for asynchronous. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, $.ajax returns immediately and the next statement, return result;, is executed before the function you passed as success callback was even called.\nHere is an analogy which hopefully makes the difference between synchronous and asynchronous flow clearer:\nSynchronous\nImagine you make a phone call to a friend and ask him to look something up for you. Although it might take a while, you wait on the phone and stare into space, until your friend gives you the answer that you needed.\nThe same is happening when you make a function call containing \"normal\" code:\nfunction findItem() {\n    var item;\n    while(item_not_found) {\n        // search\n    }\n    return item;\n}\n\nvar item = findItem();\n\n// Do something with item\ndoSomethingElse();\n\nEven though findItem might take a long time to execute, any code coming after var item = findItem(); has to wait until the function returns the result.\nAsynchronous\nYou call your friend again for the same reason. But this time you tell him that you are in a hurry and he should call you back on your mobile phone. You hang up, leave the house, and do whatever you planned to do. Once your friend calls you back, you are dealing with the information he gave to you.\nThat's exactly what's happening when you do an Ajax request.\nfindItem(function(item) {\n    // Do something with the item\n});\ndoSomethingElse();\n\nInstead of waiting for the response, the execution continues immediately and the statement after the Ajax call is executed. To get the response eventually, you provide a function to be called once the response was received, a callback (notice something? call back ?). Any statement coming after that call is executed before the callback is called.\n\nSolution(s)\nEmbrace the asynchronous nature of JavaScript! While certain asynchronous operations provide synchronous counterparts (so does \"Ajax\"), it's generally discouraged to use them, especially in a browser context.\nWhy is it bad do you ask?\nJavaScript runs in the UI thread of the browser and any long-running process will lock the UI, making it unresponsive. Additionally, there is an upper limit on the execution time for JavaScript and the browser will ask the user whether to continue the execution or not.\nAll of this results in a really bad user experience. The user won't be able to tell whether everything is working fine or not. Furthermore, the effect will be worse for users with a slow connection.\nIn the following we will look at three different solutions that are all building on top of each other:\n\nPromises with async/await (ES2017+, available in older browsers if you use a transpiler or regenerator)\nCallbacks (popular in node)\nPromises with then() (ES2015+, available in older browsers if you use one of the many promise libraries)\n\nAll three are available in current browsers, and node 7+.\n\nES2017+: Promises with async/await\nThe ECMAScript version released in 2017 introduced syntax-level support for asynchronous functions. With the help of async and await, you can write asynchronous in a \"synchronous style\". The code is still asynchronous, but it's easier to read/understand.\nasync/await builds on top of promises: an async function always returns a promise. await \"unwraps\" a promise and either result in the value the promise was resolved with or throws an error if the promise was rejected.\nImportant: You can only use await inside an async function. Right now, top-level await isn't yet supported, so you might have to make an async IIFE (Immediately Invoked Function Expression) to start an async context.\nYou can read more about async and await on MDN.\nHere is an example that elaborates the delay function findItem() above:\n// Using 'superagent' which will return a promise.\nvar superagent = require('superagent')\n\n// This is isn't declared as `async` because it already returns a promise\nfunction delay() {\n  // `delay` returns a promise\n  return new Promise(function(resolve, reject) {\n    // Only `delay` is able to resolve or reject the promise\n    setTimeout(function() {\n      resolve(42); // After 3 seconds, resolve the promise with value 42\n    }, 3000);\n  });\n}\n\nasync function getAllBooks() {\n  try {\n    // GET a list of book IDs of the current user\n    var bookIDs = await superagent.get('/user/books');\n    // wait for 3 seconds (just for the sake of this example)\n    await delay();\n    // GET information about each book\n    return await superagent.get('/books/ids='+JSON.stringify(bookIDs));\n  } catch(error) {\n    // If any of the awaited promises was rejected, this catch block\n    // would catch the rejection reason\n    return null;\n  }\n}\n\n// Start an IIFE to use `await` at the top level\n(async function(){\n  let books = await getAllBooks();\n  console.log(books);\n})();\n\nCurrent browser and node versions support async/await. You can also support older environments by transforming your code to ES5 with the help of regenerator (or tools that use regenerator, such as Babel).\n\nLet functions accept callbacks\nA callback is when function 1 is passed to function 2. Function 2 can call function 1 whenever it is ready. In the context of an asynchronous process, the callback will be called whenever the asynchronous process is done. Usually, the result is passed to the callback.\nIn the example of the question, you can make foo accept a callback and use it as success callback. So this\nvar result = foo();\n// Code that depends on 'result'\n\nbecomes\nfoo(function(result) {\n    // Code that depends on 'result'\n});\n\nHere we defined the function \"inline\" but you can pass any function reference:\nfunction myCallback(result) {\n    // Code that depends on 'result'\n}\n\nfoo(myCallback);\n\nfoo itself is defined as follows:\nfunction foo(callback) {\n    $.ajax({\n        // ...\n        success: callback\n    });\n}\n\ncallback will refer to the function we pass to foo when we call it and we pass it on to success. I.e. once the Ajax request is successful, $.ajax will call callback and pass the response to the callback (which can be referred to with result, since this is how we defined the callback).\nYou can also process the response before passing it to the callback:\nfunction foo(callback) {\n    $.ajax({\n        // ...\n        success: function(response) {\n            // For example, filter the response\n            callback(filtered_response);\n        }\n    });\n}\n\nIt's easier to write code using callbacks than it may seem. After all, JavaScript in the browser is heavily event-driven (DOM events). Receiving the Ajax response is nothing else but an event.\nDifficulties could arise when you have to work with third-party code, but most problems can be solved by just thinking through the application flow.\n\nES2015+: Promises with then()\nThe Promise API is a new feature of ECMAScript 6 (ES2015), but it has good browser support already. There are also many libraries which implement the standard Promises API and provide additional methods to ease the use and composition of asynchronous functions (e.g., bluebird).\nPromises are containers for future values. When the promise receives the value (it is resolved) or when it is canceled (rejected), it notifies all of its \"listeners\" who want to access this value.\nThe advantage over plain callbacks is that they allow you to decouple your code and they are easier to compose.\nHere is an example of using a promise:\n\n\nfunction delay() {\n  // `delay` returns a promise\n  return new Promise(function(resolve, reject) {\n    // Only `delay` is able to resolve or reject the promise\n    setTimeout(function() {\n      resolve(42); // After 3 seconds, resolve the promise with value 42\n    }, 3000);\n  });\n}\n\ndelay()\n  .then(function(v) { // `delay` returns a promise\n    console.log(v); // Log the value once it is resolved\n  })\n  .catch(function(v) {\n    // Or do something else if it is rejected\n    // (it would not happen in this example, since `reject` is not called).\n  });\n.as-console-wrapper { max-height: 100% !important; top: 0; }\n Run code snippetHide resultsExpand snippet\n\n\nApplied to our Ajax call we could use promises like this:\n\n\nfunction ajax(url) {\n  return new Promise(function(resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.onload = function() {\n      resolve(this.responseText);\n    };\n    xhr.onerror = reject;\n    xhr.open('GET', url);\n    xhr.send();\n  });\n}\n\najax(\"https://jsonplaceholder.typicode.com/todos/1\")\n  .then(function(result) {\n    console.log(result); // Code depending on result\n  })\n  .catch(function() {\n    // An error occurred\n  });\n.as-console-wrapper { max-height: 100% !important; top: 0; }\n Run code snippetHide resultsExpand snippet\n\n\nDescribing all the advantages that promise offer is beyond the scope of this answer, but if you write new code, you should seriously consider them. They provide a great abstraction and separation of your code.\nMore information about promises: HTML5 rocks - JavaScript Promises.\nSide note: jQuery's deferred objects\nDeferred objects are jQuery's custom implementation of promises (before the Promise API was standardized). They behave almost like promises but expose a slightly different API.\nEvery Ajax method of jQuery already returns a \"deferred object\" (actually a promise of a deferred object) which you can just return from your function:\nfunction ajax() {\n    return $.ajax(...);\n}\n\najax().done(function(result) {\n    // Code depending on result\n}).fail(function() {\n    // An error occurred\n});\n\nSide note: Promise gotchas\nKeep in mind that promises and deferred objects are just containers for a future value, they are not the value itself. For example, suppose you had the following:\nfunction checkPassword() {\n    return $.ajax({\n        url: '/password',\n        data: {\n            username: $('#username').val(),\n            password: $('#password').val()\n        },\n        type: 'POST',\n        dataType: 'json'\n    });\n}\n\nif (checkPassword()) {\n    // Tell the user they're logged in\n}\n\nThis code misunderstands the above asynchronous issues. Specifically, $.ajax() doesn't freeze the code while it checks the '/password' page on your server - it sends a request to the server and while it waits, it immediately returns a jQuery Ajax Deferred object, not the response from the server. That means the if statement is going to always get this Deferred object, treat it as true, and proceed as though the user is logged in. Not good.\nBut the fix is easy:\ncheckPassword()\n.done(function(r) {\n    if (r) {\n        // Tell the user they're logged in\n    } else {\n        // Tell the user their password was bad\n    }\n})\n.fail(function(x) {\n    // Tell the user something bad happened\n});\n\n\nNot recommended: Synchronous \"Ajax\" calls\nAs I mentioned, some(!) asynchronous operations have synchronous counterparts. I don't advocate their use, but for completeness' sake, here is how you would perform a synchronous call:\nWithout jQuery\nIf you directly use a XMLHttpRequest object, pass false as third argument to .open.\njQuery\nIf you use jQuery, you can set the async option to false. Note that this option is deprecated since jQuery 1.8.\nYou can then either still use a success callback or access the responseText property of the jqXHR object:\nfunction foo() {\n    var jqXHR = $.ajax({\n        //...\n        async: false\n    });\n    return jqXHR.responseText;\n}\n\nIf you use any other jQuery Ajax method, such as $.get, $.getJSON, etc., you have to change it to $.ajax (since you can only pass configuration parameters to $.ajax).\nHeads up! It is not possible to make a synchronous JSONP request. JSONP by its very nature is always asynchronous (one more reason to not even consider this option).\n    ",
        "votes": 6179,
        "comentarios": [
            {
                "decripcion": "@Pommy: If you want to use jQuery, you have to include it. Please refer to docs.jquery.com/Tutorials:Getting_Started_with_jQuery.",
                "fecha": { "$date" : "2013-01-17T10:47:54Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            },
            {
                "decripcion": "In Solution 1, sub jQuery, I could not understand this line: If you use any other jQuery AJAX method, such as $.get, $.getJSON, etc., you have them to $.ajax. (Yes, I realize my nick is a tad ironic in this case)",
                "fecha": { "$date" : "2013-02-06T21:07:03Z" },
                "usuario": "cssyphus",
                "usuario_id": 486
            },
            {
                "decripcion": "@gibberish: Mmmh, I don't know how it can be made clearer. Do you see how foo is called and a function is passed to it (foo(function(result) {....});)? result is used inside this function and is the response of the Ajax request. To refer to this function, the first parameter of foo is called callback and assigned to success instead of an anonymous function. So, $.ajax will call callback when the request was successful. I tried to explain it a bit more.",
                "fecha": { "$date" : "2013-02-06T23:29:52Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            },
            {
                "decripcion": "The Chat for this question is dead so I'm not sure where to propose outlined changes, but I propose: 1) Change the synchronous part to a simple discussion of why it's bad with no code example of how to do it. 2) Remove/merge the callback examples to only show the more flexible Deferred approach, which I think may also be a little easier to follow for those learning Javascript.",
                "fecha": { "$date" : "2013-04-16T02:45:22Z" },
                "usuario": "Chris Moschini",
                "usuario_id": 487
            },
            {
                "decripcion": "@Jessi: I think you misunderstood that part of the answer. You cannot use $.getJSON if you want the Ajax request to be synchronous. However, you should not event want the request to be synchronous, so that doesn't apply. You should be using callbacks or promises  to handle the response, as it is explained earlier in the answer.",
                "fecha": { "$date" : "2015-10-08T17:44:18Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            }
        ],
        "usuario": "Felix Kling",
        "usuario_id": 234
    },
    {
        "_id": 294,
        "fecha": { "$date" : "2021-04-09T11:45:40Z" },
        "decripcion": "\nIf you're not using jQuery in your code, this answer is for you\nYour code should be something along the lines of this:\nfunction foo() {\n    var httpRequest = new XMLHttpRequest();\n    httpRequest.open('GET', \"/echo/json\");\n    httpRequest.send();\n    return httpRequest.responseText;\n}\n\nvar result = foo(); // Always ends up being 'undefined'\n\nFelix Kling did a fine job writing an answer for people using jQuery for AJAX, but I've decided to provide an alternative for people who aren't.\n(Note, for those using the new fetch API, Angular or promises I've added another answer below)\n\nWhat you're facing\nThis is a short summary of \"Explanation of the problem\" from the other answer, if you're not sure after reading this, read that.\nThe A in AJAX stands for asynchronous. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, .send returns immediately and the next statement, return result;, is executed before the function you passed as success callback was even called.\nThis means when you're returning, the listener you've defined did not execute yet, which means the value you're returning has not been defined.\nHere is a simple analogy:\nfunction getFive(){\n    var a;\n    setTimeout(function(){\n         a=5;\n    },10);\n    return a;\n}\n\n(Fiddle)\nThe value of a returned is undefined since the a=5 part has not executed yet. AJAX acts like this, you're returning the value before the server got the chance to tell your browser what that value is.\nOne possible solution to this problem is to code re-actively , telling your program what to do when the calculation completed.\nfunction onComplete(a){ // When the code completes, do this\n    alert(a);\n}\n\nfunction getFive(whenDone){\n    var a;\n    setTimeout(function(){\n         a=5;\n         whenDone(a);\n    },10);\n}\n\nThis is called CPS. Basically, we're passing getFive an action to perform when it completes, we're telling our code how to react when an event completes (like our AJAX call, or in this case the timeout).\nUsage would be:\ngetFive(onComplete);\n\nWhich should alert \"5\" to the screen. (Fiddle).\nPossible solutions\nThere are basically two ways how to solve this:\n\nMake the AJAX call synchronous (let\u2019s call it SJAX).\nRestructure your code to work properly with callbacks.\n\n1. Synchronous AJAX - Don't do it!!\nAs for synchronous AJAX, don't do it! Felix's answer raises some compelling arguments about why it's a bad idea. To sum it up, it'll freeze the user's browser until the server returns the response and create a very bad user experience. Here is another short summary taken from MDN on why:\n\nXMLHttpRequest supports both synchronous and asynchronous communications. In general, however, asynchronous requests should be preferred to synchronous requests for performance reasons.\nIn short, synchronous requests block the execution of code... ...this can cause serious issues...\n\nIf you have to do it, you can pass a flag. Here is how:\nvar request = new XMLHttpRequest();\nrequest.open('GET', 'yourURL', false);  // `false` makes the request synchronous\nrequest.send(null);\n\nif (request.status === 200) {// That's HTTP for 'ok'\n  console.log(request.responseText);\n}\n\n2. Restructure code\nLet your function accept a callback. In the example code foo can be made to accept a callback. We'll be telling our code how to react when foo completes.\nSo:\nvar result = foo();\n// Code that depends on `result` goes here\n\nBecomes:\nfoo(function(result) {\n    // Code that depends on `result`\n});\n\nHere we passed an anonymous function, but we could just as easily pass a reference to an existing function, making it look like:\nfunction myHandler(result) {\n    // Code that depends on `result`\n}\nfoo(myHandler);\n\nFor more details on how this sort of callback design is done, check Felix's answer.\nNow, let's define foo itself to act accordingly\nfunction foo(callback) {\n    var httpRequest = new XMLHttpRequest();\n    httpRequest.onload = function(){ // When the request is loaded\n       callback(httpRequest.responseText);// We're calling our method\n    };\n    httpRequest.open('GET', \"/echo/json\");\n    httpRequest.send();\n}\n\n(fiddle)\nWe have now made our foo function accept an action to run when the AJAX completes successfully. We can extend this further by checking if the response status is not 200 and acting accordingly (create a fail handler and such). Effectively it is solving our issue.\nIf you're still having a hard time understanding this, read the AJAX getting started guide at MDN.\n    ",
        "votes": 1152,
        "comentarios": [
            {
                "decripcion": "\"synchronous requests block the execution of code and can leak memory and events\" how can a synchronous request leak memory?",
                "fecha": { "$date" : "2013-08-16T05:54:22Z" },
                "usuario": "Matthew G",
                "usuario_id": 488
            },
            {
                "decripcion": "@MatthewG I've added a bounty on it in this question, I'll see what I can fish out. I'm removing the quote from the answer in the mean time.",
                "fecha": { "$date" : "2013-08-16T08:28:00Z" },
                "usuario": "Benjamin Gruenbaum",
                "usuario_id": 489
            },
            {
                "decripcion": "Just for the reference, XHR 2 allows us to use the onload handler, which only fires when readyState is 4. Of course, it's not supported in IE8. (iirc, may need confirmation.)",
                "fecha": { "$date" : "2013-12-22T21:09:19Z" },
                "usuario": "Florian Margaine",
                "usuario_id": 490
            },
            {
                "decripcion": "Your explanation of how to pass an anonymous function as a callback is valid but misleading. The example var bar = foo(); is asking for a variable to be defined, whereas your suggested foo(functim() {}); doesn't define bar",
                "fecha": { "$date" : "2014-08-07T10:14:22Z" },
                "usuario": "scrowler",
                "usuario_id": 491
            },
            {
                "decripcion": "I can see why this might be a little misleading, but after months of not knowing the answer to this question, I finally understand what's going on and how to avoid it (you just want to make your async functions not use any public variables and pass their return data to functions with their own private variables).  I have no idea why this answer lead me to this/my solution, but it definitely did.  Thanks man!  I also realize this question may not be exactly asking what I'm describing, but it's at least related/similar.",
                "fecha": { "$date" : "2020-09-13T04:48:35Z" },
                "usuario": "Netside",
                "usuario_id": 492
            }
        ],
        "usuario": "Benjamin Gruenbaum",
        "usuario_id": 489
    },
    {
        "_id": 295,
        "fecha": { "$date" : "2021-04-09T11:57:18Z" },
        "decripcion": "\nXMLHttpRequest 2 (first of all, read the answers from Benjamin Gruenbaum and Felix Kling)\nIf you don't use jQuery and want a nice short XMLHttpRequest 2 which works in the modern browsers and also in the mobile browsers, I suggest to use it this way:\nfunction ajax(a, b, c){ // URL, callback, just a placeholder\n  c = new XMLHttpRequest;\n  c.open('GET', a);\n  c.onload = b;\n  c.send()\n}\n\nAs you can see:\n\nIt's shorter than all other functions Listed.\nThe callback is set directly (so no extra unnecessary closures).\nIt uses the new onload (so you don't have to check for readystate && status)\nThere are some other situations, which I don't remember, that make the XMLHttpRequest 1 annoying.\n\nThere are two ways to get the response of this Ajax call (three using the XMLHttpRequest var name):\nThe simplest:\nthis.response\n\nOr if for some reason you bind() the callback to a class:\ne.target.response\n\nExample:\nfunction callback(e){\n  console.log(this.response);\n}\najax('URL', callback);\n\nOr (the above one is better anonymous functions are always a problem):\najax('URL', function(e){console.log(this.response)});\n\nNothing easier.\nNow some people will probably say that it's better to use onreadystatechange or the even the XMLHttpRequest variable name. That's wrong.\nCheck out XMLHttpRequest advanced features.\nIt supported all *modern browsers. And I can confirm as I have been using this approach since XMLHttpRequest 2 was created. I never had any type of problem in any browsers I used.\nonreadystatechange is only useful if you want to get the headers on state 2.\nUsing the XMLHttpRequest variable name is another big error as you need to execute the callback inside the onload/oreadystatechange closures, or else you lost it.\n\nNow if you want something more complex using POST and FormData you can easily extend this function:\nfunction x(a, b, e, d, c){ // URL, callback, method, formdata or {key:val},placeholder\n  c = new XMLHttpRequest;\n  c.open(e||'get', a);\n  c.onload = b;\n  c.send(d||null)\n}\n\nAgain ... it's a very short function, but it does GET and POST.\nExamples of usage:\nx(url, callback); // By default it's GET so no need to set\nx(url, callback, 'post', {'key': 'val'}); // No need to set POST data\n\nOr pass a full form element (document.getElementsByTagName('form')[0]):\nvar fd = new FormData(form);\nx(url, callback, 'post', fd);\n\nOr set some custom values:\nvar fd = new FormData();\nfd.append('key', 'val')\nx(url, callback, 'post', fd);\n\nAs you can see, I didn't implement sync... it's a bad thing.\nHaving said that ... why don't we do it the easy way?\n\nAs mentioned in the comment, the use of error && synchronous does completely break the point of the answer. Which is a nice short way to use Ajax in the proper way?\nError handler\nfunction x(a, b, e, d, c){ // URL, callback, method, formdata or {key:val}, placeholder\n  c = new XMLHttpRequest;\n  c.open(e||'get', a);\n  c.onload = b;\n  c.onerror = error;\n  c.send(d||null)\n}\n\nfunction error(e){\n  console.log('--Error--', this.type);\n  console.log('this: ', this);\n  console.log('Event: ', e)\n}\nfunction displayAjax(e){\n  console.log(e, this);\n}\nx('WRONGURL', displayAjax);\n\nIn the above script, you have an error handler which is statically defined, so it does not compromise the function. The error handler can be used for other functions too.\nBut to really get out an error, the only way is to write a wrong URL in which case every browser throws an error.\nError handlers are maybe useful if you set custom headers, set the responseType to blob array buffer, or whatever...\nEven if you pass 'POSTAPAPAP' as the method it won't throw an error.\nEven if you pass 'fdggdgilfdghfldj' as formdata it won't throw an error.\nIn the first case the error is inside the displayAjax() under this.statusText as Method not Allowed.\nIn the second case, it simply works. You have to check at the server side if you passed the right post data.\nCross-domain not allowed throws an error automatically.\nIn the error response, there aren't any error codes.\nThere is only the this.type which is set to error.\nWhy add an error handler if you totally don't have any control over errors?\nMost of the errors are returned inside this in the callback function displayAjax().\nSo: There isn't any need for error checks if you're able to copy and paste the URL properly. ;)\nPS: As the first test I wrote x('x', displayAjax)..., and it totally got a response...??? So I checked the folder where the HTML is located, and there was a file called 'x.xml'. So even if you forget the extension of your file XMLHttpRequest 2 WILL FIND IT. I LOL'd\n\nRead a file synchronous\nDon't do that.\nIf you want to block the browser for a while load a nice big .txt file synchronous.\nfunction omg(a, c){ // URL\n  c = new XMLHttpRequest;\n  c.open('GET', a, true);\n  c.send();\n  return c; // Or c.response\n}\n\nNow you can do\n var res = omg('thisIsGonnaBlockThePage.txt');\n\nThere is no other way to do this in a non-asynchronous way. (Yeah, with setTimeout loop... but seriously?)\nAnother point is... if you work with APIs or just your own list's files or whatever you always use different functions for each request...\nOnly if you have a page where you load always the same XML/JSON or whatever you need only one function. In that case, modify a little the Ajax function and replace b with your special function.\n\nThe functions above are for basic use.\nIf you want to extend the function...\nYes, you can.\nI'm using a lot of APIs and one of the first functions I integrate into every HTML page is the first Ajax function in this answer, with GET only...\nBut you can do a lot of stuff with XMLHttpRequest 2:\nI made a download manager (using ranges on both sides with resume, filereader, and filesystem), various image resizers converters using canvas, populate web SQL databases with base64images and much more...\nBut in these cases you should create a function only for that purpose... sometimes you need a blob, array buffers, you can set headers, override mimetype and there is a lot more...\nBut the question here is how to return an Ajax response... (I added an easy way.)\n    ",
        "votes": 426,
        "comentarios": [
            {
                "decripcion": "While this answer is nice (And we all love XHR2 and posting file data and multipart data is totally awesome) - this shows syntactic sugar for posting XHR with JavaScript - you might want to put this in a blog post (I'd like it) or even in a library (not sure about the name x, ajax or xhr might be nicer :)). I don't see how it addresses returning the response from an AJAX call. (someone could still do var res = x(\"url\") and not understand why it doesn't work ;)). On a side note - it would be cool if you returned c from the method so users can hook on error etc.",
                "fecha": { "$date" : "2013-08-23T05:56:49Z" },
                "usuario": "Benjamin Gruenbaum",
                "usuario_id": 489
            },
            {
                "decripcion": "2.ajax is meant to be async.. so NO var res=x('url').. That's the entire point of this question and answers :)",
                "fecha": { "$date" : "2013-08-23T17:28:35Z" },
                "usuario": "Benjamin Gruenbaum",
                "usuario_id": 489
            },
            {
                "decripcion": "why is there a 'c' parameter in the functions, if on the first line you're overwriting whatever value it had? am i missing something?",
                "fecha": { "$date" : "2016-12-21T10:00:52Z" },
                "usuario": "Brian H.",
                "usuario_id": 493
            },
            {
                "decripcion": "You can use parameters as a placeholder to avoid writing multiple times \"var\"",
                "fecha": { "$date" : "2016-12-21T11:05:21Z" },
                "usuario": "cocco",
                "usuario_id": 494
            },
            {
                "decripcion": "@cocco So you wrote misleading, unreadable code in a SO answer in order to save a few keystrokes? Please don't do that.",
                "fecha": { "$date" : "2017-10-08T06:20:55Z" },
                "usuario": "stone",
                "usuario_id": 495
            }
        ],
        "usuario": "cocco",
        "usuario_id": 494
    },
    {
        "_id": 296,
        "fecha": { "$date" : "2021-04-09T13:10:23Z" },
        "decripcion": "\nIf you're using promises, this answer is for you.\nThis means AngularJS, jQuery (with deferred), native XHR's replacement (fetch), Ember.js, Backbone.js's save or any Node.js library that returns promises.\nYour code should be something along the lines of this:\nfunction foo() {\n    var data;\n    // Or $.get(...).then, or request(...).then, or query(...).then\n    fetch(\"/echo/json\").then(function(response){\n        data = response.json();\n    });\n    return data;\n}\n\nvar result = foo(); // 'result' is always undefined no matter what.\n\nFelix Kling did a fine job writing an answer for people using jQuery with callbacks for Ajax. I have an answer for native XHR. This answer is for generic usage of promises either on the frontend or backend.\n\nThe core issue\nThe JavaScript concurrency model in the browser and on the server with Node.js/io.js is asynchronous and reactive.\nWhenever you call a method that returns a promise, the then handlers are always executed asynchronously - that is, after the code below them that is not in a .then handler.\nThis means when you're returning data the then handler you've defined did not execute yet. This in turn means that the value you're returning has not been set to the correct value in time.\nHere is a simple analogy for the issue:\n\n\n    function getFive(){\n        var data;\n        setTimeout(function(){ // Set a timer for one second in the future\n           data = 5; // After a second, do this\n        }, 1000);\n        return data;\n    }\n    document.body.innerHTML = getFive(); // `undefined` here and not 5\n Run code snippetHide resultsExpand snippet\n\n\nThe value of data is undefined since the data = 5 part has not executed yet. It will likely execute in a second, but by that time it is irrelevant to the returned value.\nSince the operation did not happen yet (Ajax, server call, I/O, and timer) you're returning the value before the request got the chance to tell your code what that value is.\nOne possible solution to this problem is to code re-actively, telling your program what to do when the calculation completed. Promises actively enable this by being temporal (time-sensitive) in nature.\nQuick recap on promises\nA Promise is a value over time. Promises have state. They start as pending with no value and can settle to:\n\nfulfilled meaning that the computation completed successfully.\nrejected meaning that the computation failed.\n\nA promise can only change states once after which it will always stay at the same state forever. You can attach then handlers to promises to extract their value and handle errors. then handlers allow chaining of calls. Promises are created by using APIs that return them. For example, the more modern Ajax replacement fetch or jQuery's $.get return promises.\nWhen we call .then on a promise and return something from it - we get a promise for the processed value. If we return another promise we'll get amazing things, but let's hold our horses.\nWith promises\nLet's see how we can solve the above issue with promises. First, let's demonstrate our understanding of promise states from above by using the Promise constructor for creating a delay function:\nfunction delay(ms){ // Takes amount of milliseconds\n    // Returns a new promise\n    return new Promise(function(resolve, reject){\n        setTimeout(function(){ // When the time is up,\n            resolve(); // change the promise to the fulfilled state\n        }, ms);\n    });\n}\n\nNow, after we converted setTimeout to use promises, we can use then to make it count:\n\n\nfunction delay(ms){ // Takes amount of milliseconds\n  // Returns a new promise\n  return new Promise(function(resolve, reject){\n    setTimeout(function(){ // When the time is up,\n      resolve(); // change the promise to the fulfilled state\n    }, ms);\n  });\n}\n\nfunction getFive(){\n  // We're RETURNING the promise. Remember, a promise is a wrapper over our value\n  return delay(100).then(function(){ // When the promise is ready,\n      return 5; // return the value 5. Promises are all about return values\n  })\n}\n// We _have_ to wrap it like this in the call site, and we can't access the plain value\ngetFive().then(function(five){\n   document.body.innerHTML = five;\n});\n Run code snippetHide resultsExpand snippet\n\n\nBasically, instead of returning a value which we can't do because of the concurrency model - we're returning a wrapper for a value that we can unwrap with then. It's like a box you can open with then.\nApplying this\nThis stands the same for your original API call, you can:\nfunction foo() {\n    // RETURN the promise\n    return fetch(\"/echo/json\").then(function(response){\n        return response.json(); // Process it inside the `then`\n    });\n}\n\nfoo().then(function(response){\n    // Access the value inside the `then`\n})\n\nSo this works just as well. We've learned we can't return values from already asynchronous calls, but we can use promises and chain them to perform processing. We now know how to return the response from an asynchronous call.\nES2015 (ES6)\nES6 introduces generators which are functions that can return in the middle and then resume the point they were at. This is typically useful for sequences, for example:\nfunction* foo(){ // Notice the star. This is ES6, so new browsers, Nodes.js, and io.js only\n    yield 1;\n    yield 2;\n    while(true) yield 3;\n}\n\nIs a function that returns an iterator over the sequence 1,2,3,3,3,3,.... which can be iterated. While this is interesting on its own and opens room for a lot of possibility, there is one particular interesting case.\nIf the sequence we're producing is a sequence of actions rather than numbers - we can pause the function whenever an action is yielded and wait for it before we resume the function. So instead of a sequence of numbers, we need a sequence of future values - that is: promises.\nThis somewhat a tricky, but very powerful trick let\u2019s us write asynchronous code in a synchronous manner. There are several \"runners\" that do this for you. Writing one is a short few lines of code, but it is beyond the scope of this answer. I'll be using Bluebird's Promise.coroutine here, but there are other wrappers like co or Q.async.\nvar foo = coroutine(function*(){\n    var data = yield fetch(\"/echo/json\"); // Notice the yield\n    // The code here only executes _after_ the request is done\n    return data.json(); // 'data' is defined\n});\n\nThis method returns a promise itself, which we can consume from other coroutines. For example:\nvar main = coroutine(function*(){\n   var bar = yield foo(); // Wait our earlier coroutine. It returns a promise\n   // The server call is done here, and the code below executes when done\n   var baz = yield fetch(\"/api/users/\" + bar.userid); // Depends on foo's result\n   console.log(baz); // Runs after both requests are done\n});\nmain();\n\nES2016 (ES7)\nIn ES7, this is further standardized. There are several proposals right now, but in all of them you can await promise. This is just \"sugar\" (nicer syntax) for the ES6 proposal above by adding the async and await keywords. Making the above example:\nasync function foo(){\n    var data = await fetch(\"/echo/json\"); // Notice the await\n    // code here only executes _after_ the request is done\n    return data.json(); // 'data' is defined\n}\n\nIt still returns a promise just the same :)\n    ",
        "votes": 344,
        "comentarios": [
            {
                "decripcion": "This should be the accepted answer. +1 for async/await (although should we not return await data.json();?)",
                "fecha": { "$date" : "2019-11-13T16:21:43Z" },
                "usuario": "Lewis Donovan",
                "usuario_id": 496
            },
            {
                "decripcion": "Such a great explanation.. Thank you sir",
                "fecha": { "$date" : "2020-12-05T14:27:12Z" },
                "usuario": "beyondtdr",
                "usuario_id": 497
            }
        ],
        "usuario": "Benjamin Gruenbaum",
        "usuario_id": 489
    },
    {
        "_id": 297,
        "fecha": { "$date" : "2015-11-21T14:07:03Z" },
        "decripcion": "\nYou are using Ajax incorrectly. The idea is not to have it return anything, but instead hand off the data to something called a callback function, which handles the data.\n\nThat is:\n\nfunction handleData( responseData ) {\n\n    // Do what you want with the data\n    console.log(responseData);\n}\n\n$.ajax({\n    url: \"hi.php\",\n    ...\n    success: function ( data, status, XHR ) {\n        handleData(data);\n    }\n});\n\n\nReturning anything in the submit handler will not do anything. You must instead either hand off the data, or do what you want with it directly inside the success function.\n    ",
        "votes": 270,
        "comentarios": [
            {
                "decripcion": "This answer is completely semantic... your success method is just a callback within a callback. You could just have success: handleData and it would work.",
                "fecha": { "$date" : "2016-01-04T15:49:49Z" },
                "usuario": "Jacques \u30b8\u30e3\u30c3\u30af",
                "usuario_id": 498
            },
            {
                "decripcion": "And what if you want to return the \"responseData\" outside of \"handleData\" ... :) ... how will you do it ... ? ... cause a simple return will return it to the \"success\" callback of the ajax ... and not outside of \"handleData\" ...",
                "fecha": { "$date" : "2016-02-19T16:02:18Z" },
                "usuario": "pesho hristov",
                "usuario_id": 499
            },
            {
                "decripcion": "@Jacques & @pesho hristov You missed this point. Submit handler is not the success method, it's the surrounding scope of $.ajax.",
                "fecha": { "$date" : "2018-05-28T12:37:13Z" },
                "usuario": "travnik",
                "usuario_id": 500
            },
            {
                "decripcion": "@travnik I didn't miss that. If you took the contents of handleData and put it in the success method it would act exactly the same...",
                "fecha": { "$date" : "2018-06-13T01:21:43Z" },
                "usuario": "Jacques \u30b8\u30e3\u30c3\u30af",
                "usuario_id": 498
            },
            {
                "decripcion": "This answer is SO clear and simple and saved my (hours!). Thank you.  Would upvote 100 times if I could.",
                "fecha": { "$date" : "2020-06-23T22:17:38Z" },
                "usuario": "S3DEV",
                "usuario_id": 501
            }
        ],
        "usuario": "Nic",
        "usuario_id": 502
    },
    {
        "_id": 298,
        "fecha": { "$date" : "2016-08-11T17:12:24Z" },
        "decripcion": "\nI will answer with a horrible-looking, hand-drawn comic. The second image is the reason why result is undefined in your code example.\n\n\n    ",
        "votes": 254,
        "comentarios": [
            {
                "decripcion": "A picture is worth a thousand words,   Person A - Ask's person B  details to fix his car, in turn Person B - Makes Ajax Call and waits for response from server for car fixing details, when response is received, Ajax Success function  calls the Person B function and passes the response as argument to it, Person A receives the answer.",
                "fecha": { "$date" : "2016-10-31T17:48:09Z" },
                "usuario": "Shaiju T",
                "usuario_id": 503
            },
            {
                "decripcion": "Would be great if you added lines of code with each image to illustrate the concepts.",
                "fecha": { "$date" : "2018-02-05T00:32:58Z" },
                "usuario": "Hassan Baig",
                "usuario_id": 504
            },
            {
                "decripcion": "Meanwhile, the guy with the car is stuck on the side of the road.  He requires the car is fixed before continuing.  He is now alone on the side of the road waiting...  He would rather be on the phone waiting for status changes but the mechanic would not do it...  The mechanic said he has to get on with his job and can't simply hang out on the phone.  Mechanic promised he would call him back as soon as he could.  After about 4 hours, the guy gives up and calls Uber.  - Example of timeout.",
                "fecha": { "$date" : "2019-10-22T23:42:25Z" },
                "usuario": "barrypicker",
                "usuario_id": 505
            },
            {
                "decripcion": "@barrypicker :-D Brilliant!",
                "fecha": { "$date" : "2019-10-23T16:26:13Z" },
                "usuario": "Johannes Fahrenkrug",
                "usuario_id": 506
            },
            {
                "decripcion": "@FingLixon It's not a perfect comic by any stretch :-D. The 2nd image should illustrate what happens when you try to read a value too early (before a callback has occurred). The 3rd image illustrates setting up a callback method: The guy on the left basically IS the callback handler: He will be called with the information once it's available and can then do with it whatever he wants. I now think it was a bad idea to have TWO phone calls in this comic: The call to the shop and the call to the guy on the left. I should have simplified that, sorry about that.",
                "fecha": { "$date" : "2021-04-12T20:44:15Z" },
                "usuario": "Johannes Fahrenkrug",
                "usuario_id": 506
            }
        ],
        "usuario": "Johannes Fahrenkrug",
        "usuario_id": 506
    },
    {
        "_id": 299,
        "fecha": { "$date" : "2021-04-09T12:04:41Z" },
        "decripcion": "\nThe simplest solution is to create a JavaScript function and call it for the Ajax success callback.\nfunction callServerAsync(){\n    $.ajax({\n        url: '...',\n        success: function(response) {\n\n            successCallback(response);\n        }\n    });\n}\n\nfunction successCallback(responseObj){\n    // Do something like read the response and show data\n    alert(JSON.stringify(responseObj)); // Only applicable to a JSON response\n}\n\nfunction foo(callback) {\n\n    $.ajax({\n        url: '...',\n        success: function(response) {\n           return callback(null, response);\n        }\n    });\n}\n\nvar result = foo(function(err, result){\n          if (!err)\n           console.log(result);\n});\n\n    ",
        "votes": 251,
        "comentarios": [
            {
                "decripcion": "I don't know who voted it negative. But this is a work around which has worked in fact i used this approach to create a whole application.  The jquery.ajax don't return data so its better to use the above approach. If it's wrong then please explain and suggest better way to do it.",
                "fecha": { "$date" : "2014-03-28T18:12:35Z" },
                "usuario": "Hemant Bavle",
                "usuario_id": 507
            },
            {
                "decripcion": "Sorry, I forgot to leave a comment (I usually do!). I downvoted it. Downvotes don't indicate factual correctness or lack of, they indicate usefulness in the context or lack of. I don't find your answer useful given Felix's which already explains this only in much more detail. On a side note, why would you stringify the response if it's JSON?",
                "fecha": { "$date" : "2014-04-10T09:18:07Z" },
                "usuario": "Benjamin Gruenbaum",
                "usuario_id": 489
            },
            {
                "decripcion": "ok.. @Benjamin i used stringify, to convert a JSON Object to string. And thanks for clarifying your point. Will keep in mind to post more elaborate answers.",
                "fecha": { "$date" : "2014-04-10T10:27:10Z" },
                "usuario": "Hemant Bavle",
                "usuario_id": 507
            },
            {
                "decripcion": "And what if you want to return the \"responseObj\" outside of \"successCallback\" ... :) ... how will you do it ... ? ... cause a simple return will return it to the \"success\" callback of the ajax ... and not outside of \"successCallback\" ...",
                "fecha": { "$date" : "2016-02-19T16:02:57Z" },
                "usuario": "pesho hristov",
                "usuario_id": 499
            }
        ],
        "usuario": "Hemant Bavle",
        "usuario_id": 507
    },
    {
        "_id": 300,
        "fecha": { "$date" : "2021-04-09T12:33:24Z" },
        "decripcion": "\nAngular 1\nPeople who are using AngularJS, can handle this situation using promises.\nHere it says,\n\nPromises can be used to unnest asynchronous functions and allows one to chain multiple functions together.\n\nYou can find a nice explanation here also.\nAn example found in documentation mentioned below.\n  promiseB = promiseA.then(\n    function onSuccess(result) {\n      return result + 1;\n    }\n    ,function onError(err) {\n      // Handle error\n    }\n  );\n\n // promiseB will be resolved immediately after promiseA is resolved\n // and its value will be the result of promiseA incremented by 1.\n\nAngular 2 and later\nIn Angular 2 with look at the following example, but its recommended to use observables with Angular 2.\n search(term: string) {\n     return this.http\n       .get(`https://api.spotify.com/v1/search?q=${term}&type=artist`)\n       .map((response) => response.json())\n       .toPromise();\n}\n\nYou can consume that in this way,\nsearch() {\n    this.searchService.search(this.searchField.value)\n      .then((result) => {\n    this.result = result.artists.items;\n  })\n  .catch((error) => console.error(error));\n}\n\nSee the original post here. But TypeScript does not support native ES6 Promises, if you want to use it, you might need plugin for that.\nAdditionally, here is the promises specification.\n    ",
        "votes": 173,
        "comentarios": [
            {
                "decripcion": "This does not explain how promises would solve this issue at all though.",
                "fecha": { "$date" : "2014-11-04T02:29:10Z" },
                "usuario": "Benjamin Gruenbaum",
                "usuario_id": 489
            },
            {
                "decripcion": "jQuery and fetch methods both return promises as well.  I would suggest revising your answer.  Though jQuery's isn't quite the same (then is there, but catch isn't).",
                "fecha": { "$date" : "2015-02-19T19:24:49Z" },
                "usuario": "Tracker1",
                "usuario_id": 508
            }
        ],
        "usuario": "Maleen Abewardana",
        "usuario_id": 509
    },
    {
        "_id": 301,
        "fecha": { "$date" : "2021-05-06T11:25:38Z" },
        "decripcion": "\nMost of the answers here give useful suggestions for when you have a single async operation, but sometimes, this comes up when you need to do an asynchronous operation for each entry in an array or other list-like structure. The temptation is to do this:\n// WRONG\nvar results = [];\ntheArray.forEach(function(entry) {\n    doSomethingAsync(entry, function(result) {\n        results.push(result);\n    });\n});\nconsole.log(results); // E.g., using them, returning them, etc.\n\nExample:\nShow code snippet\n\n// WRONG\nvar theArray = [1, 2, 3];\nvar results = [];\ntheArray.forEach(function(entry) {\n    doSomethingAsync(entry, function(result) {\n        results.push(result);\n    });\n});\nconsole.log(\"Results:\", results); // E.g., using them, returning them, etc.\n\nfunction doSomethingAsync(value, callback) {\n    console.log(\"Starting async operation for \" + value);\n    setTimeout(function() {\n        console.log(\"Completing async operation for \" + value);\n        callback(value * 2);\n    }, Math.floor(Math.random() * 200));\n}\n.as-console-wrapper { max-height: 100% !important; }\n Run code snippetHide resultsExpand snippet\n\n\nThe reason that doesn't work is that the callbacks from doSomethingAsync haven't run yet by the time you're trying to use the results.\nSo, if you have an array (or list of some kind) and want to do async operations for each entry, you have two options: Do the operations in parallel (overlapping), or in series (one after another in sequence).\nParallel\nYou can start all of them and keep track of how many callbacks you're expecting, and then use the results when you've gotten that many callbacks:\nvar results = [];\nvar expecting = theArray.length;\ntheArray.forEach(function(entry, index) {\n    doSomethingAsync(entry, function(result) {\n        results[index] = result;\n        if (--expecting === 0) {\n            // Done!\n            console.log(\"Results:\", results); // E.g., using the results\n        }\n    });\n});\n\nExample:\nShow code snippet\n\nvar theArray = [1, 2, 3];\nvar results = [];\nvar expecting = theArray.length;\ntheArray.forEach(function(entry, index) {\n    doSomethingAsync(entry, function(result) {\n        results[index] = result;\n        if (--expecting === 0) {\n            // Done!\n            console.log(\"Results:\", JSON.stringify(results)); // E.g., using the results\n        }\n    });\n});\n\nfunction doSomethingAsync(value, callback) {\n    console.log(\"Starting async operation for \" + value);\n    setTimeout(function() {\n        console.log(\"Completing async operation for \" + value);\n        callback(value * 2);\n    }, Math.floor(Math.random() * 200));\n}\n.as-console-wrapper { max-height: 100% !important; }\n Run code snippetHide resultsExpand snippet\n\n\n(We could do away with expecting and just use results.length === theArray.length, but that leaves us open to the possibility that theArray is changed while the calls are outstanding...)\nNotice how we use the index from forEach to save the result in results in the same position as the entry it relates to, even if the results arrive out of order (since async calls don't necessarily complete in the order in which they were started).\nBut what if you need to return those results from a function? As the other answers have pointed out, you can't; you have to have your function accept and call a callback (or return a Promise). Here's a callback version:\nfunction doSomethingWith(theArray, callback) {\n    var results = [];\n    var expecting = theArray.length;\n    theArray.forEach(function(entry, index) {\n        doSomethingAsync(entry, function(result) {\n            results[index] = result;\n            if (--expecting === 0) {\n                // Done!\n                callback(results);\n            }\n        });\n    });\n}\ndoSomethingWith(theArray, function(results) {\n    console.log(\"Results:\", results);\n});\n\nExample:\nShow code snippet\n\nfunction doSomethingWith(theArray, callback) {\n    var results = [];\n    var expecting = theArray.length;\n    theArray.forEach(function(entry, index) {\n        doSomethingAsync(entry, function(result) {\n            results[index] = result;\n            if (--expecting === 0) {\n                // Done!\n                callback(results);\n            }\n        });\n    });\n}\ndoSomethingWith([1, 2, 3], function(results) {\n    console.log(\"Results:\", JSON.stringify(results));\n});\n\nfunction doSomethingAsync(value, callback) {\n    console.log(\"Starting async operation for \" + value);\n    setTimeout(function() {\n        console.log(\"Completing async operation for \" + value);\n        callback(value * 2);\n    }, Math.floor(Math.random() * 200));\n}\n.as-console-wrapper { max-height: 100% !important; }\n Run code snippetHide resultsExpand snippet\n\n\nOr here's a version returning a Promise instead:\nfunction doSomethingWith(theArray) {\n    return new Promise(function(resolve) {\n        var results = [];\n        var expecting = theArray.length;\n        theArray.forEach(function(entry, index) {\n            doSomethingAsync(entry, function(result) {\n                results[index] = result;\n                if (--expecting === 0) {\n                    // Done!\n                    resolve(results);\n                }\n            });\n        });\n    });\n}\ndoSomethingWith(theArray).then(function(results) {\n    console.log(\"Results:\", results);\n});\n\nOf course, if doSomethingAsync passed us errors, we'd use reject to reject the promise when we got an error.)\nExample:\nShow code snippet\n\nfunction doSomethingWith(theArray) {\n    return new Promise(function(resolve) {\n        var results = [];\n        var expecting = theArray.length;\n        theArray.forEach(function(entry, index) {\n            doSomethingAsync(entry, function(result) {\n                results[index] = result;\n                if (--expecting === 0) {\n                    // Done!\n                    resolve(results);\n                }\n            });\n        });\n    });\n}\ndoSomethingWith([1, 2, 3]).then(function(results) {\n    console.log(\"Results:\", JSON.stringify(results));\n});\n\nfunction doSomethingAsync(value, callback) {\n    console.log(\"Starting async operation for \" + value);\n    setTimeout(function() {\n        console.log(\"Completing async operation for \" + value);\n        callback(value * 2);\n    }, Math.floor(Math.random() * 200));\n}\n.as-console-wrapper { max-height: 100% !important; }\n Run code snippetHide resultsExpand snippet\n\n\n(Or alternately, you could make a wrapper for doSomethingAsync that returns a promise, and then do the below...)\nIf doSomethingAsync gives you a Promise, you can use Promise.all:\nfunction doSomethingWith(theArray) {\n    return Promise.all(theArray.map(function(entry) {\n        return doSomethingAsync(entry);\n    }));\n}\ndoSomethingWith(theArray).then(function(results) {\n    console.log(\"Results:\", results);\n});\n\nIf you know that doSomethingAsync will ignore a second and third argument, you can just pass it directly to map (map calls its callback with three arguments, but most people only use the first most of the time):\nfunction doSomethingWith(theArray) {\n    return Promise.all(theArray.map(doSomethingAsync));\n}\ndoSomethingWith(theArray).then(function(results) {\n    console.log(\"Results:\", results);\n});\n\nExample:\nShow code snippet\n\nfunction doSomethingWith(theArray) {\n    return Promise.all(theArray.map(doSomethingAsync));\n}\ndoSomethingWith([1, 2, 3]).then(function(results) {\n    console.log(\"Results:\", JSON.stringify(results));\n});\n\nfunction doSomethingAsync(value) {\n    console.log(\"Starting async operation for \" + value);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            console.log(\"Completing async operation for \" + value);\n            resolve(value * 2);\n        }, Math.floor(Math.random() * 200));\n    });\n}\n.as-console-wrapper { max-height: 100% !important; }\n Run code snippetHide resultsExpand snippet\n\n\nNote that Promise.all resolves its promise with an array of the results of all of the promises you give it when they are all resolved, or rejects its promise when the first of the promises you give it rejects.\nSeries\nSuppose you don't want the operations to be in parallel? If you want to run them one after another, you need to wait for each operation to complete before you start the next. Here's an example of a function that does that and calls a callback with the result:\nfunction doSomethingWith(theArray, callback) {\n    var results = [];\n    doOne(0);\n    function doOne(index) {\n        if (index < theArray.length) {\n            doSomethingAsync(theArray[index], function(result) {\n                results.push(result);\n                doOne(index + 1);\n            });\n        } else {\n            // Done!\n            callback(results);\n        }\n    }\n}\ndoSomethingWith(theArray, function(results) {\n    console.log(\"Results:\", results);\n});\n\n(Since we're doing the work in series, we can just use results.push(result) since we know we won't get results out of order. In the above we could have used results[index] = result;, but in some of the following examples we don't have an index to use.)\nExample:\nShow code snippet\n\nfunction doSomethingWith(theArray, callback) {\n    var results = [];\n    doOne(0);\n    function doOne(index) {\n        if (index < theArray.length) {\n            doSomethingAsync(theArray[index], function(result) {\n                results.push(result);\n                doOne(index + 1);\n            });\n        } else {\n            // Done!\n            callback(results);\n        }\n    }\n}\ndoSomethingWith([1, 2, 3], function(results) {\n    console.log(\"Results:\", JSON.stringify(results));\n});\n\nfunction doSomethingAsync(value, callback) {\n    console.log(\"Starting async operation for \" + value);\n    setTimeout(function() {\n        console.log(\"Completing async operation for \" + value);\n        callback(value * 2);\n    }, Math.floor(Math.random() * 200));\n}\n.as-console-wrapper { max-height: 100% !important; }\n Run code snippetHide resultsExpand snippet\n\n\n(Or, again, build a wrapper for doSomethingAsync that gives you a promise and do the below...)\nIf doSomethingAsync gives you a Promise, if you can use ES2017+ syntax (perhaps with a transpiler like Babel), you can use an async function with for-of and await:\nasync function doSomethingWith(theArray) {\n    const results = [];\n    for (const entry of theArray) {\n        results.push(await doSomethingAsync(entry));\n    }\n    return results;\n}\ndoSomethingWith(theArray).then(results => {\n    console.log(\"Results:\", results);\n});\n\nExample:\nShow code snippet\n\nasync function doSomethingWith(theArray) {\n    const results = [];\n    for (const entry of theArray) {\n        results.push(await doSomethingAsync(entry));\n    }\n    return results;\n}\ndoSomethingWith([1, 2, 3]).then(function(results) {\n    console.log(\"Results:\", JSON.stringify(results));\n});\n\nfunction doSomethingAsync(value) {\n    console.log(\"Starting async operation for \" + value);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            console.log(\"Completing async operation for \" + value);\n            resolve(value * 2);\n        }, Math.floor(Math.random() * 200));\n    });\n}\n.as-console-wrapper { max-height: 100% !important; }\n Run code snippetHide resultsExpand snippet\n\n\nIf you can't use ES2017+ syntax (yet), you can use a variation on the \"Promise reduce\" pattern (this is more complex than the usual Promise reduce because we're not passing the result from one into the next, but instead gathering up their results in an array):\nfunction doSomethingWith(theArray) {\n    return theArray.reduce(function(p, entry) {\n        return p.then(function(results) {\n            return doSomethingAsync(entry).then(function(result) {\n                results.push(result);\n                return results;\n            });\n        });\n    }, Promise.resolve([]));\n}\ndoSomethingWith(theArray).then(function(results) {\n    console.log(\"Results:\", results);\n});\n\nExample:\nShow code snippet\n\nfunction doSomethingWith(theArray) {\n    return theArray.reduce(function(p, entry) {\n        return p.then(function(results) {\n            return doSomethingAsync(entry).then(function(result) {\n                results.push(result);\n                return results;\n            });\n        });\n    }, Promise.resolve([]));\n}\ndoSomethingWith([1, 2, 3]).then(function(results) {\n    console.log(\"Results:\", JSON.stringify(results));\n});\n\nfunction doSomethingAsync(value) {\n    console.log(\"Starting async operation for \" + value);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            console.log(\"Completing async operation for \" + value);\n            resolve(value * 2);\n        }, Math.floor(Math.random() * 200));\n    });\n}\n.as-console-wrapper { max-height: 100% !important; }\n Run code snippetHide resultsExpand snippet\n\n\n...which is less cumbersome with ES2015+ arrow functions:\nfunction doSomethingWith(theArray) {\n    return theArray.reduce((p, entry) => p.then(results => doSomethingAsync(entry).then(result => {\n        results.push(result);\n        return results;\n    })), Promise.resolve([]));\n}\ndoSomethingWith(theArray).then(results => {\n    console.log(\"Results:\", results);\n});\n\nExample:\nShow code snippet\n\nfunction doSomethingWith(theArray) {\n    return theArray.reduce((p, entry) => p.then(results => doSomethingAsync(entry).then(result => {\n        results.push(result);\n        return results;\n    })), Promise.resolve([]));\n}\ndoSomethingWith([1, 2, 3]).then(function(results) {\n    console.log(\"Results:\", JSON.stringify(results));\n});\n\nfunction doSomethingAsync(value) {\n    console.log(\"Starting async operation for \" + value);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            console.log(\"Completing async operation for \" + value);\n            resolve(value * 2);\n        }, Math.floor(Math.random() * 200));\n    });\n}\n.as-console-wrapper { max-height: 100% !important; }\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 171,
        "comentarios": [
            {
                "decripcion": "Could you explain how the if (--expecting === 0) part of the code works please? The callback version of your solution is working great for me, I just don't understand how, with that statement, you are checking the number of responses completed. Appreciate it's just lack of knowledge on my part. Is there an alternative way that check could be written?",
                "fecha": { "$date" : "2017-05-28T10:21:35Z" },
                "usuario": "Sarah",
                "usuario_id": 510
            },
            {
                "decripcion": "@Sarah: expecting starts out with the value of array.length, which is how many requests we're going to make. We know the callback won't be called until all of those requests are started. In the callback, if (--expecting === 0) does this: 1. Decrements expecting (we've received a response, so we're expecting one fewer response) and if the value after the decrement is 0 (we're not expecting any more responses), we're done!",
                "fecha": { "$date" : "2017-05-28T18:31:11Z" },
                "usuario": "T.J. Crowder",
                "usuario_id": 511
            },
            {
                "decripcion": "@Henke - I think it is indeed personal preference, and while normally I'd prefer to log raw data and let the console handle it, in this specific case I think you're right about the change. Thanks! :-)",
                "fecha": { "$date" : "2021-05-06T11:27:48Z" },
                "usuario": "T.J. Crowder",
                "usuario_id": 511
            },
            {
                "decripcion": "Out of convenience for myself (and others?), adding a link to a related answer: How to make many asynchronous calls and wait for them all.",
                "fecha": { "$date" : "2021-06-01T14:01:43Z" },
                "usuario": "Henke",
                "usuario_id": 512
            }
        ],
        "usuario": "T.J. Crowder",
        "usuario_id": 511
    },
    {
        "_id": 302,
        "fecha": { "$date" : "2018-11-23T12:19:11Z" },
        "decripcion": "\nHave a look at this example:\n\nvar app = angular.module('plunker', []);\n\napp.controller('MainCtrl', function($scope,$http) {\n\n    var getJoke = function(){\n        return $http.get('http://api.icndb.com/jokes/random').then(function(res){\n            return res.data.value;  \n        });\n    }\n\n    getJoke().then(function(res) {\n        console.log(res.joke);\n    });\n});\n\n\nAs you can see getJoke is returning a resolved promise (it is resolved when returning res.data.value). So you wait until the $http.get request is completed and then console.log(res.joke) is executed (as a normal asynchronous flow).\n\nThis is the plnkr:\n\nhttp://embed.plnkr.co/XlNR7HpCaIhJxskMJfSg/\n\nES6 way (async - await)\n\n(function(){\n  async function getJoke(){\n    let response = await fetch('http://api.icndb.com/jokes/random');\n    let data = await response.json();\n    return data.value;\n  }\n\n  getJoke().then((joke) => {\n    console.log(joke);\n  });\n})();\n\n    ",
        "votes": 120,
        "comentarios": [],
        "usuario": "Francisco Carmona",
        "usuario_id": 513
    },
    {
        "_id": 303,
        "fecha": { "$date" : "2021-04-09T13:45:39Z" },
        "decripcion": "\nThis is one of the places which two-way data binding or store concept that's used in many new JavaScript frameworks will work great for you...\nSo if you are using Angular, React, or any other frameworks which do two-way data binding or store concept, this issue is simply fixed for you, so in easy words, your result is undefined at the first stage, so you have got result = undefined before you receive the data, then as soon as you get the result, it will be updated and get assigned to the new value which response of your Ajax call...\nBut how you can do it in pure JavaScript or jQuery for example as you asked in this question?\nYou can use a callback, promise and recently observable to handle it for you. For example, in promises we have some function like success() or then() which will be executed when your data is ready for you. The same with callback or the subscribe function on an observable.\nFor example, in your case which you are using jQuery, you can do something like this:\n$(document).ready(function(){\n    function foo() {\n        $.ajax({url: \"api/data\", success: function(data){\n            fooDone(data); // After we have data, we pass it to fooDone\n        }});\n    };\n\n    function fooDone(data) {\n        console.log(data); // fooDone has the data and console.log it\n    };\n\n    foo(); // The call happens here\n});\n\nFor more information, study promises and observables which are newer ways to do this async stuff.\n    ",
        "votes": 119,
        "comentarios": [
            {
                "decripcion": "This is fine at global scope, but in some module context you probably want to ensure right context for the callback e.g. $.ajax({url: \"api/data\", success: fooDone.bind(this)});",
                "fecha": { "$date" : "2017-07-24T06:14:12Z" },
                "usuario": "steve.sims",
                "usuario_id": 514
            },
            {
                "decripcion": "This is actually incorrect as React is one-way data binding",
                "fecha": { "$date" : "2018-05-04T15:57:05Z" },
                "usuario": "Matthew Brent",
                "usuario_id": 515
            },
            {
                "decripcion": "@MatthewBrent you are not wrong, but not right also, React props are object and if changed, they change throughout the application, but its not a way that React developer recommend to use it...",
                "fecha": { "$date" : "2018-05-14T07:34:28Z" },
                "usuario": "Alireza",
                "usuario_id": 516
            }
        ],
        "usuario": "Alireza",
        "usuario_id": 516
    },
    {
        "_id": 304,
        "fecha": { "$date" : "2021-04-09T14:05:22Z" },
        "decripcion": "\nIt's a very common issue we face while struggling with the 'mysteries' of JavaScript. Let me try demystifying this mystery today.\nLet's start with a simple JavaScript function:\nfunction foo(){\n    // Do something\n    return 'wohoo';\n}\n\nlet bar = foo(); // 'bar' is 'wohoo' here\n\nThat's a simple synchronous function call (where each line of code is 'finished with its job' before the next one in sequence), and the result is same as expected.\nNow let's add a bit of twist, by introducing a little delay in our function, so that all lines of code are not 'finished' in sequence. Thus, it will emulate the asynchronous behavior of the function:\nfunction foo(){\n    setTimeout( ()=> {\n        return 'wohoo';\n   }, 1000)\n}\n\nlet bar = foo() // 'bar' is undefined here\n\nSo there you go; that delay just broke the functionality we expected! But what exactly happened? Well, it's actually pretty logical if you look at the code.\nThe function foo(), upon execution, returns nothing (thus returned value is undefined), but it does start a timer, which executes a function after 1 second to return 'wohoo'. But as you can see, the value that's assigned to bar is the immediately returned stuff from foo(), which is nothing, i.e., just undefined.\nSo, how do we tackle this issue?\nLet's ask our function for a promise.\nPromise is really about what it means: it means that the function guarantees you to provide with any output it gets in future. So let's see it in action for our little problem above:\nfunction foo(){\n   return new Promise((resolve, reject) => { // I want foo() to PROMISE me something\n    setTimeout ( function(){\n      // Promise is RESOLVED, when the execution reaches this line of code\n       resolve('wohoo') // After 1 second, RESOLVE the promise with value 'wohoo'\n    }, 1000 )\n  })\n}\n\nlet bar;\nfoo().then( res => {\n    bar = res;\n    console.log(bar) // Will print 'wohoo'\n});\n\nThus, the summary is - to tackle the asynchronous functions like Ajax-based calls, etc., you can use a promise to resolve the value (which you intend to return). Thus, in short you resolve value instead of returning, in asynchronous functions.\nUPDATE (Promises with async/await)\nApart from using then/catch to work with promises, there exists one more approach. The idea is to recognize an asynchronous function and then wait for the promises to resolve, before moving to the next line of code. It's still just the promises under the hood, but with a different syntactical approach. To make things clearer, you can find a comparison below:\nthen/catch version:\nfunction saveUsers(){\n     getUsers()\n      .then(users => {\n         saveSomewhere(users);\n      })\n      .catch(err => {\n          console.error(err);\n       })\n }\n\nasync/await version:\n  async function saveUsers(){\n     try{\n        let users = await getUsers()\n        saveSomewhere(users);\n     }\n     catch(err){\n        console.error(err);\n     }\n  }\n\n    ",
        "votes": 116,
        "comentarios": [
            {
                "decripcion": "is this still considered the best way to return a value from a promise or async/await?",
                "fecha": { "$date" : "2018-09-26T20:58:21Z" },
                "usuario": "edwardsmarkf",
                "usuario_id": 517
            },
            {
                "decripcion": "@edwardsmarkf Personally I don't think there's a best way as such. I use promises with then/catch , async/await as well as generators for async portions of my code. It largely depends on the context of usage.",
                "fecha": { "$date" : "2018-10-03T16:12:28Z" },
                "usuario": "Anish K.",
                "usuario_id": 518
            }
        ],
        "usuario": "Anish K.",
        "usuario_id": 518
    },
    {
        "_id": 305,
        "fecha": { "$date" : "2016-12-17T12:55:25Z" },
        "decripcion": "\nAnother approach to return a value from an asynchronous function, is to pass in an object that will store the result from the asynchronous function.\n\nHere is an example of the same:\n\nvar async = require(\"async\");\n\n// This wires up result back to the caller\nvar result = {};\nvar asyncTasks = [];\nasyncTasks.push(function(_callback){\n    // some asynchronous operation\n    $.ajax({\n        url: '...',\n        success: function(response) {\n            result.response = response;\n            _callback();\n        }\n    });\n});\n\nasync.parallel(asyncTasks, function(){\n    // result is available after performing asynchronous operation\n    console.log(result)\n    console.log('Done');\n});\n\n\nI am using the result object to store the value during the asynchronous operation. This allows the result be available even after the asynchronous job.\n\nI use this approach a lot. I would be interested to know how well this approach works where wiring the result back through consecutive modules is involved.\n    ",
        "votes": 108,
        "comentarios": [
            {
                "decripcion": "There is nothing special about using an object here. It would work as well if you assigned he response directly to result. It works because you are reading the variable after the async function is complete.",
                "fecha": { "$date" : "2015-09-02T13:18:11Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            }
        ],
        "usuario": "jsbisht",
        "usuario_id": 519
    },
    {
        "_id": 306,
        "fecha": { "$date" : "2016-05-09T13:02:40Z" },
        "decripcion": "\nWhile promises and callbacks work fine in many situations, it is a pain in the rear to express something like:\n\nif (!name) {\n  name = async1();\n}\nasync2(name);\n\n\nYou'd end up going through async1; check if name is undefined or not and call the callback accordingly.\n\nasync1(name, callback) {\n  if (name)\n    callback(name)\n  else {\n    doSomething(callback)\n  }\n}\n\nasync1(name, async2)\n\n\nWhile it is okay in small examples it gets annoying when you have a lot of similar cases and error handling involved.\n\nFibers helps in solving the issue.\n\nvar Fiber = require('fibers')\n\nfunction async1(container) {\n  var current = Fiber.current\n  var result\n  doSomething(function(name) {\n    result = name\n    fiber.run()\n  })\n  Fiber.yield()\n  return result\n}\n\nFiber(function() {\n  var name\n  if (!name) {\n    name = async1()\n  }\n  async2(name)\n  // Make any number of async calls from here\n}\n\n\nYou can checkout the project here.\n    ",
        "votes": 95,
        "comentarios": [
            {
                "decripcion": "@recurf - It's not my project. You could try using their issue tracker.",
                "fecha": { "$date" : "2017-01-20T15:22:44Z" },
                "usuario": "rohithpr",
                "usuario_id": 520
            },
            {
                "decripcion": "is this similar to generator functions? developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/\u2026*",
                "fecha": { "$date" : "2017-06-07T03:19:47Z" },
                "usuario": "Emanegux",
                "usuario_id": 521
            },
            {
                "decripcion": "Is this still relevant?",
                "fecha": { "$date" : "2018-03-18T19:43:54Z" },
                "usuario": "Aluan Haddad",
                "usuario_id": 522
            },
            {
                "decripcion": "You can make use of async-await if you're using some of the newest versions of node. If someone is stuck with older versions they can use this method.",
                "fecha": { "$date" : "2018-03-20T08:18:27Z" },
                "usuario": "rohithpr",
                "usuario_id": 520
            }
        ],
        "usuario": "rohithpr",
        "usuario_id": 520
    },
    {
        "_id": 307,
        "fecha": { "$date" : "2018-11-28T16:42:31Z" },
        "decripcion": "\nThe following example I have written shows how to\n\n\nHandle asynchronous HTTP calls;\nWait for response from each API call;\nUse Promise pattern;\nUse Promise.all pattern to join multiple HTTP calls;\n\n\nThis working example is self-contained. It will define a simple request object that uses the window XMLHttpRequest object to make calls. It will define a simple function to wait for a bunch of promises to be completed.\n\nContext. The example is querying the Spotify Web API endpoint in order to search for playlist objects for a given set of query strings:\n\n[\n \"search?type=playlist&q=%22doom%20metal%22\",\n \"search?type=playlist&q=Adele\"\n]\n\n\nFor each item, a new Promise will fire a block - ExecutionBlock, parse the result, schedule a new set of promises based on the result array, that is a list of Spotify user objects and execute the new HTTP call within the ExecutionProfileBlock asynchronously.\n\nYou can then see a nested Promise structure, that lets you spawn multiple and completely asynchronous nested HTTP calls, and join the results from each subset of calls through Promise.all.\n\nNOTE\nRecent Spotify search APIs will require an access token to be specified in the request headers:\n\n-H \"Authorization: Bearer {your access token}\" \n\n\nSo, you to run the following example you need to put your access token in the request headers:\n\n\n\nvar spotifyAccessToken = \"YourSpotifyAccessToken\";\nvar console = {\n    log: function(s) {\n        document.getElementById(\"console\").innerHTML += s + \"<br/>\"\n    }\n}\n\n// Simple XMLHttpRequest\n// based on https://davidwalsh.name/xmlhttprequest\nSimpleRequest = {\n    call: function(what, response) {\n        var request;\n        if (window.XMLHttpRequest) { // Mozilla, Safari, ...\n            request = new XMLHttpRequest();\n        } else if (window.ActiveXObject) { // Internet Explorer\n            try {\n                request = new ActiveXObject('Msxml2.XMLHTTP');\n            }\n            catch (e) {\n                try {\n                  request = new ActiveXObject('Microsoft.XMLHTTP');\n                } catch (e) {}\n            }\n        }\n\n        // State changes\n        request.onreadystatechange = function() {\n            if (request.readyState === 4) { // Done\n                if (request.status === 200) { // Complete\n                    response(request.responseText)\n                }\n                else\n                    response();\n            }\n        }\n        request.open('GET', what, true);\n        request.setRequestHeader(\"Authorization\", \"Bearer \" + spotifyAccessToken);\n        request.send(null);\n    }\n}\n\n//PromiseAll\nvar promiseAll = function(items, block, done, fail) {\n    var self = this;\n    var promises = [],\n                   index = 0;\n    items.forEach(function(item) {\n        promises.push(function(item, i) {\n            return new Promise(function(resolve, reject) {\n                if (block) {\n                    block.apply(this, [item, index, resolve, reject]);\n                }\n            });\n        }(item, ++index))\n    });\n    Promise.all(promises).then(function AcceptHandler(results) {\n        if (done) done(results);\n    }, function ErrorHandler(error) {\n        if (fail) fail(error);\n    });\n}; //promiseAll\n\n// LP: deferred execution block\nvar ExecutionBlock = function(item, index, resolve, reject) {\n    var url = \"https://api.spotify.com/v1/\"\n    url += item;\n    console.log( url )\n    SimpleRequest.call(url, function(result) {\n        if (result) {\n\n            var profileUrls = JSON.parse(result).playlists.items.map(function(item, index) {\n                return item.owner.href;\n            })\n            resolve(profileUrls);\n        }\n        else {\n            reject(new Error(\"call error\"));\n        }\n    })\n}\n\narr = [\n    \"search?type=playlist&q=%22doom%20metal%22\",\n    \"search?type=playlist&q=Adele\"\n]\n\npromiseAll(arr, function(item, index, resolve, reject) {\n    console.log(\"Making request [\" + index + \"]\")\n    ExecutionBlock(item, index, resolve, reject);\n}, function(results) { // Aggregated results\n\n    console.log(\"All profiles received \" + results.length);\n    //console.log(JSON.stringify(results[0], null, 2));\n\n    ///// promiseall again\n\n    var ExecutionProfileBlock = function(item, index, resolve, reject) {\n        SimpleRequest.call(item, function(result) {\n            if (result) {\n                var obj = JSON.parse(result);\n                resolve({\n                    name: obj.display_name,\n                    followers: obj.followers.total,\n                    url: obj.href\n                });\n            } //result\n        })\n    } //ExecutionProfileBlock\n\n    promiseAll(results[0], function(item, index, resolve, reject) {\n        //console.log(\"Making request [\" + index + \"] \" + item)\n        ExecutionProfileBlock(item, index, resolve, reject);\n    }, function(results) { // aggregated results\n        console.log(\"All response received \" + results.length);\n        console.log(JSON.stringify(results, null, 2));\n    }\n\n    , function(error) { // Error\n        console.log(error);\n    })\n\n    /////\n\n  },\n  function(error) { // Error\n      console.log(error);\n  });\n<div id=\"console\" />\n Run code snippetHide resultsExpand snippet\n\n\n\nI have extensively discussed this solution here.\n    ",
        "votes": 92,
        "comentarios": [],
        "usuario": "loretoparisi",
        "usuario_id": 523
    },
    {
        "_id": 308,
        "fecha": { "$date" : "2021-04-09T13:31:55Z" },
        "decripcion": "\nThe short answer is, you have to implement a callback like this:\nfunction callback(response) {\n    // Here you can do what ever you want with the response object.\n    console.log(response);\n}\n\n$.ajax({\n    url: \"...\",\n    success: callback\n});\n\n    ",
        "votes": 90,
        "comentarios": [],
        "usuario": "Pablo Matias Gomez",
        "usuario_id": 524
    },
    {
        "_id": 309,
        "fecha": { "$date" : "2021-04-21T12:46:49Z" },
        "decripcion": "\n\nJavaScript is single threaded.\n\nThe browser can be divided into three parts:\n\nEvent Loop\n\nWeb API\n\nEvent Queue\n\n\nThe event loop runs for forever, i.e., kind of an infinite loop. The event queue is where all your functions are pushed on some event (example: click).\nThis is one by one carried out of queue and put into the event loop which executes this function and prepares itself for the next one after the first one is executed. This means execution of one function doesn't start until the function before it in the queue is executed in the event loop.\nNow let us think we pushed two functions in a queue. One is for getting a data from the server and another utilises that data. We pushed the serverRequest() function in the queue first and then the utiliseData() function. The serverRequest function goes in the event loop and makes a call to server as we never know how much time it will take to get data from server, so this process is expected to take time and so we busy our event loop thus hanging our page.\nThat's where Web API come into the role. It takes this function from the event loop and deals with the server making the event loop free, so that we can execute the next function from the queue.\nThe next function in the queue is utiliseData() which goes in the loop, but because of no data available, it goes to waste and execution of the next function continues until the end of the queue. (This is called Async calling, i.e., we can do something else until we get data.)\nLet us suppose our serverRequest() function had a return statement in code. When we get back data from the server Web API, it will push it in the queue at the end of queue.\nAs it gets pushed at the end of the queue, we cannot utilise its data as there isn't any function left in our queue to utilise this data. Thus it is not possible to return something from the async call.\nThus the solution to this is callback or promise.\n\nAn image from one of the answers here correctly explains callback use...*\n\nWe give our function (function utilising data returned from the server) to a function calling the server.\n\nfunction doAjax(callbackFunc, method, url) {\n    var xmlHttpReq = new XMLHttpRequest();\n    xmlHttpReq.open(method, url);\n    xmlHttpReq.onreadystatechange = function() {\n\n        if (xmlHttpReq.readyState == 4 && xmlHttpReq.status == 200) {\n            callbackFunc(xmlHttpReq.responseText);\n        }\n    }\n    xmlHttpReq.send(null);\n}\n\nIn my code it is called as:\nfunction loadMyJson(categoryValue){\n    if(categoryValue === \"veg\")\n        doAjax(print, \"GET\", \"http://localhost:3004/vegetables\");\n    else if(categoryValue === \"fruits\")\n        doAjax(print, \"GET\", \"http://localhost:3004/fruits\");\n    else\n      console.log(\"Data not found\");\n}\n\nJavaScript.info callback\n    ",
        "votes": 86,
        "comentarios": [],
        "usuario": "Aniket Jha",
        "usuario_id": 525
    },
    {
        "_id": 310,
        "fecha": { "$date" : "2021-04-09T13:50:44Z" },
        "decripcion": "\n2017 answer: you can now do exactly what you want in every current browser and Node.js\nThis is quite simple:\n\nReturn a Promise\nUse the 'await', which will tell JavaScript to await the promise to be resolved into a value (like the HTTP response)\nAdd the 'async' keyword to the parent function\n\nHere's a working version of your code:\n(async function(){\n\n    var response = await superagent.get('...')\n    console.log(response)\n\n})()\n\nawait is supported in all current browsers and Node.js 8\n    ",
        "votes": 84,
        "comentarios": [
            {
                "decripcion": "Unfortunately, this works only with functions that return promises \u2013 for example it doesn't work with Node.js API, which uses callbacks. And I wouldn't recommend using it without Babel, because not everyone uses \"current browsers\".",
                "fecha": { "$date" : "2017-06-08T06:47:10Z" },
                "usuario": "Micha\u0142 Per\u0142akowski",
                "usuario_id": 526
            },
            {
                "decripcion": "@Micha\u0142Per\u0142akowski node 8 includes nodejs.org/api/util.html#util_util_promisify_original which can be used to make the node.js API return promises. Whether you have the time and money to support non-current browsers obviously depends on your situation.",
                "fecha": { "$date" : "2017-06-09T18:28:16Z" },
                "usuario": "mikemaccana",
                "usuario_id": 527
            },
            {
                "decripcion": "IE 11 is still a current browser in 2018, sadly and it doesn't support await/async",
                "fecha": { "$date" : "2018-10-04T14:51:34Z" },
                "usuario": "Juan Mendes",
                "usuario_id": 528
            },
            {
                "decripcion": "IE11 is not a current browser. It was released 5 years ago, has a worldwide market share of 2.5% according to caniuse, and unless someone is doubling your budget to ignore all current tech then it's not worth most people's time.",
                "fecha": { "$date" : "2018-10-04T14:57:29Z" },
                "usuario": "mikemaccana",
                "usuario_id": 527
            }
        ],
        "usuario": "mikemaccana",
        "usuario_id": 527
    },
    {
        "_id": 311,
        "fecha": { "$date" : "2016-12-17T10:59:13Z" },
        "decripcion": "\nYou can use this custom library (written using Promise) to make a remote call.\n\nfunction $http(apiConfig) {\n    return new Promise(function (resolve, reject) {\n        var client = new XMLHttpRequest();\n        client.open(apiConfig.method, apiConfig.url);\n        client.send();\n        client.onload = function () {\n            if (this.status >= 200 && this.status < 300) {\n                // Performs the function \"resolve\" when this.status is equal to 2xx.\n                // Your logic here.\n                resolve(this.response);\n            }\n            else {\n                // Performs the function \"reject\" when this.status is different than 2xx.\n                reject(this.statusText);\n            }\n        };\n        client.onerror = function () {\n            reject(this.statusText);\n        };\n    });\n}\n\n\nSimple usage example:\n\n$http({\n    method: 'get',\n    url: 'google.com'\n}).then(function(response) {\n    console.log(response);\n}, function(error) {\n    console.log(error)\n});\n\n    ",
        "votes": 71,
        "comentarios": [],
        "usuario": "Vinoth Rajendran",
        "usuario_id": 529
    },
    {
        "_id": 312,
        "fecha": { "$date" : "2021-04-09T13:48:32Z" },
        "decripcion": "\nAnother solution is to execute code via the sequential executor nsynjs.\nIf the underlying function is promisified\nnsynjs will evaluate all promises sequentially, and put the promise result into the data property:\n\n\nfunction synchronousCode() {\n\n    var getURL = function(url) {\n        return window.fetch(url).data.text().data;\n    };\n    \n    var url = 'https://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js';\n    console.log('received bytes:',getURL(url).length);\n    \n};\n\nnsynjs.run(synchronousCode,{},function(){\n    console.log('synchronousCode done');\n});\n<script src=\"https://rawgit.com/amaksr/nsynjs/master/nsynjs.js\"></script>\n Run code snippetHide resultsExpand snippet\n\n\nIf the underlying function is not promisified\nStep 1. Wrap the function with a callback into the nsynjs-aware wrapper (if it has a promisified version, you can skip this step):\nvar ajaxGet = function (ctx,url) {\n    var res = {};\n    var ex;\n    $.ajax(url)\n    .done(function (data) {\n        res.data = data;\n    })\n    .fail(function(e) {\n        ex = e;\n    })\n    .always(function() {\n        ctx.resume(ex);\n    });\n    return res;\n};\najaxGet.nsynjsHasCallback = true;\n\nStep 2. Put synchronous logic into function:\nfunction process() {\n    console.log('got data:', ajaxGet(nsynjsCtx, \"data/file1.json\").data);\n}\n\nStep 3. Run function in synchronous manner via nsynjs:\nnsynjs.run(process,this,function () {\n    console.log(\"synchronous function finished\");\n});\n\nNsynjs will evaluate all operators and expressions step-by-step, pausing execution in case if the result of some slow function is not ready.\nMore examples are here.\n    ",
        "votes": 70,
        "comentarios": [
            {
                "decripcion": "This is interesting. I like how it allows to code async calls the way you'd do it in other languages. But technically it's not real JavaScript?",
                "fecha": { "$date" : "2017-06-16T23:55:06Z" },
                "usuario": "J Morris",
                "usuario_id": 530
            }
        ],
        "usuario": "amaksr",
        "usuario_id": 531
    },
    {
        "_id": 313,
        "fecha": { "$date" : "2018-07-31T10:35:51Z" },
        "decripcion": "\nECMAScript 6 has 'generators' which allow you to easily program in an asynchronous style.\n\nfunction* myGenerator() {\n    const callback = yield;\n    let [response] = yield $.ajax(\"https://stackoverflow.com\", {complete: callback});\n    console.log(\"response is:\", response);\n\n    // examples of other things you can do\n    yield setTimeout(callback, 1000);\n    console.log(\"it delayed for 1000ms\");\n    while (response.statusText === \"error\") {\n        [response] = yield* anotherGenerator();\n    }\n}\n\n\nTo run the above code you do this:\n\nconst gen = myGenerator(); // Create generator\ngen.next(); // Start it\ngen.next((...args) => gen.next([...args])); // Set its callback function\n\n\nIf you need to target browsers that don't support ES6 you can run the code through Babel or closure-compiler to generate ECMAScript 5.\n\nThe callback ...args are wrapped in an array and destructured when you read them so that the pattern can cope with callbacks that have multiple arguments. For example with node fs:\n\nconst [err, data] = yield fs.readFile(filePath, \"utf-8\", callback);\n\n    ",
        "votes": 43,
        "comentarios": [
            {
                "decripcion": "Do you consider generators / async generators to be an async API solution alone ? Or you would use generators to wrap another asynchronous API like promise/deffered ? I agree it is another strong addition to the async universe but still haven't found the right usage of generators that would make me adopt them.",
                "fecha": { "$date" : "2021-01-17T18:52:49Z" },
                "usuario": "Eva Cohen",
                "usuario_id": 532
            }
        ],
        "usuario": "James",
        "usuario_id": 533
    },
    {
        "_id": 314,
        "fecha": { "$date" : "2021-04-09T13:20:26Z" },
        "decripcion": "\nWe find ourselves in a universe which appears to progress along a dimension we call \"time\". We don't really understand what time is, but we have developed abstractions and vocabulary that let us reason and talk about it: \"past\", \"present\", \"future\", \"before\", \"after\".\nThe computer systems we build--more and more--have time as an important dimension. Certain things are set up to happen in the future. Then other things need to happen after those first things eventually occur. This is the basic notion called \"asynchronicity\". In our increasingly networked world, the most common case of asynchronicity is waiting for some remote system to respond to some request.\nConsider an example. You call the milkman and order some milk. When it comes, you want to put it in your coffee. You can't put the milk in your coffee right now, because it is not here yet. You have to wait for it to come before putting it in your coffee. In other words, the following won't work:\nvar milk = order_milk();\nput_in_coffee(milk);\n\nBecause JavaScript has no way to know that it needs to wait for order_milk to finish before it executes put_in_coffee. In other words, it does not know that order_milk is asynchronous--is something that is not going to result in milk until some future time. JavaScript, and other declarative languages execute one statement after another without waiting.\nThe classic JavaScript approach to this problem, taking advantage of the fact that JavaScript supports functions as first-class objects which can be passed around, is to pass a function as a parameter to the asynchronous request, which it will then invoke when it has completed its task sometime in the future. That is the \"callback\" approach. It looks like this:\norder_milk(put_in_coffee);\n\norder_milk kicks off, orders the milk, then, when and only when it arrives, it invokes put_in_coffee.\nThe problem with this callback approach is that it pollutes the normal semantics of a function reporting its result with return; instead, functions must not reports their results by calling a callback given as a parameter. Also, this approach can rapidly become unwieldy when dealing with longer sequences of events. For example, let's say that I want to wait for the milk to be put in the coffee, and then and only then perform a third step, namely drinking the coffee. I end up needing to write something like this:\norder_milk(function(milk) { put_in_coffee(milk, drink_coffee); }\n\nwhere I am passing to put_in_coffee both the milk to put in it, and also the action (drink_coffee) to execute once the milk has been put in. Such code becomes hard to write, and read, and debug.\nIn this case, we could rewrite the code in the question as:\nvar answer;\n$.ajax('/foo.json') . done(function(response) {\n  callback(response.data);\n});\n\nfunction callback(data) {\n  console.log(data);\n}\n\nEnter promises\nThis was the motivation for the notion of a \"promise\", which is a particular type of value which represents a future or asynchronous outcome of some sort. It can represent something that already happened, or that is going to happen in the future, or might never happen at all. Promises have a single method, named then, to which you pass an action to be executed when the outcome the promise represents has been realized.\nIn the case of our milk and coffee, we design order_milk to return a promise for the milk arriving, then specify put_in_coffee as a then action, as follows:\norder_milk() . then(put_in_coffee)\n\nOne advantage of this is that we can string these together to create sequences of future occurrences (\"chaining\"):\norder_milk() . then(put_in_coffee) . then(drink_coffee)\n\nLet's apply promises to your particular problem. We will wrap our request logic inside a function, which returns a promise:\nfunction get_data() {\n  return $.ajax('/foo.json');\n}\n\nActually, all we've done is added a return to the call to $.ajax. This works because jQuery's $.ajax already returns a kind of promise-like thing. (In practice, without getting into details, we would prefer to wrap this call so as for return a real promise, or use some alternative to $.ajax that does so.) Now, if we want to load the file and wait for it to finish and then do something, we can simply say\nget_data() . then(do_something)\n\nfor instance,\nget_data() .\n  then(function(data) { console.log(data); });\n\nWhen using promises, we end up passing lots of functions into then, so it's often helpful to use the more compact ES6-style arrow functions:\nget_data() .\n  then(data => console.log(data));\n\nThe async keyword\nBut there's still something vaguely dissatisfying about having to write code one way if synchronous and a quite different way if asynchronous. For synchronous, we write\na();\nb();\n\nbut if a is asynchronous, with promises we have to write\na() . then(b);\n\nAbove, we said, \"JavaScript has no way to know that it needs to wait for the first call to finish before it executes the second\". Wouldn't it be nice if there was some way to tell JavaScript that? It turns out that there is--the await keyword, used inside a special type of function called an \"async\" function. This feature is part of the upcoming version of ECMAScript (ES), but it is already available in transpilers such as Babel given the right presets. This allows us to simply write\nasync function morning_routine() {\n  var milk   = await order_milk();\n  var coffee = await put_in_coffee(milk);\n  await drink(coffee);\n}\n\nIn your case, you would be able to write something like\nasync function foo() {\n  data = await get_data();\n  console.log(data);\n}\n\n    ",
        "votes": 40,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 315,
        "fecha": { "$date" : "2015-09-23T22:52:03Z" },
        "decripcion": "\nShort answer: Your foo() method returns immediately, while the $ajax() call executes asynchronously after the function returns. The problem is then how or where to store the results retrieved by the async call once it returns.\n\nSeveral solutions have been given in this thread. Perhaps the easiest way is to pass an object to the foo() method, and to store the results in a member of that object after the async call completes.\n\nfunction foo(result) {\n    $.ajax({\n        url: '...',\n        success: function(response) {\n            result.response = response;   // Store the async result\n        }\n    });\n}\n\nvar result = { response: null };   // Object to hold the async result\nfoo(result);                       // Returns before the async completes\n\n\nNote that the call to foo() will still return nothing useful. However, the result of the async call will now be stored in result.response.\n    ",
        "votes": 39,
        "comentarios": [
            {
                "decripcion": "While this works, it's not really better than assigning to a global variable.",
                "fecha": { "$date" : "2015-09-23T22:53:07Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            }
        ],
        "usuario": "David R Tribble",
        "usuario_id": 534
    },
    {
        "_id": 316,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nHere are some approaches to work with asynchronous requests:\n\nBrowser Promise object\nQ - A promise library for JavaScript\nA+ Promises.js\njQuery deferred\nXMLHttpRequest API\nUsing callback concept - As implementation in first answer\n\nExample: jQuery deferred implementation to work with multiple requests\n\n\nvar App = App || {};\n\nApp = {\n    getDataFromServer: function(){\n\n      var self = this,\n                 deferred = $.Deferred(),\n                 requests = [];\n\n      requests.push($.getJSON('request/ajax/url/1'));\n      requests.push($.getJSON('request/ajax/url/2'));\n\n      $.when.apply(jQuery, requests).done(function(xhrResponse) {\n        return deferred.resolve(xhrResponse.result);\n      });\n      return deferred;\n    },\n\n    init: function(){\n\n        this.getDataFromServer().done(_.bind(function(resp1, resp2) {\n\n           // Do the operations which you wanted to do when you\n           // get a response from Ajax, for example, log response.\n        }, this));\n    }\n};\nApp.init();\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 39,
        "comentarios": [
            {
                "decripcion": "Why include a Stack Snippet that outputs an error?",
                "fecha": { "$date" : "2021-05-09T15:47:34Z" },
                "usuario": "Henke",
                "usuario_id": 512
            }
        ],
        "usuario": "Mohan Dere",
        "usuario_id": 535
    },
    {
        "_id": 317,
        "fecha": { "$date" : "2021-04-09T13:40:52Z" },
        "decripcion": "\nUse a callback() function inside the foo() success.\nTry it in this way. It is simple and easy to understand.\nvar lat = \"\";\nvar lon = \"\";\n\nfunction callback(data) {\n    lat = data.lat;\n    lon = data.lon;\n}\n\nfunction getLoc() {\n    var url = \"http://ip-api.com/json\"\n    $.getJSON(url, function(data) {\n        callback(data);\n    });\n}\n\ngetLoc();\n\n    ",
        "votes": 37,
        "comentarios": [],
        "usuario": "Mahfuzur Rahman",
        "usuario_id": 536
    },
    {
        "_id": 318,
        "fecha": { "$date" : "2021-04-09T14:55:01Z" },
        "decripcion": "\nUsing Promise\nThe most perfect answer to this question is using Promise.\nfunction ajax(method, url, params) {\n  return new Promise(function(resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.onload = function() {\n      resolve(this.responseText);\n    };\n    xhr.onerror = reject;\n    xhr.open(method, url);\n    xhr.send(params);\n  });\n}\n\nUsage\najax(\"GET\", \"/test\", \"acrive=1\").then(function(result) {\n    // Code depending on result\n})\n.catch(function() {\n    // An error occurred\n});\n\n\nBut wait...!\nThere is a problem with using promises!\nWhy should we use our own custom Promise?\nI was using this solution for a while until I figured out there is an error in old browsers:\n\nUncaught ReferenceError: Promise is not defined\n\nSo I decided to implement my own Promise class for ES3 to below JavaScript compilers if it's not defined. Just add this code before your main code and then safely use Promise!\nif(typeof Promise === \"undefined\"){\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n    var Promise = function () {\n        function Promise(main) {\n            var _this = this;\n            _classCallCheck(this, Promise);\n            this.value = undefined;\n            this.callbacks = [];\n            var resolve = function resolve(resolveValue) {\n                _this.value = resolveValue;\n                _this.triggerCallbacks();\n            };\n            var reject = function reject(rejectValue) {\n                _this.value = rejectValue;\n                _this.triggerCallbacks();\n            };\n            main(resolve, reject);\n        }\n        Promise.prototype.then = function then(cb) {\n            var _this2 = this;\n            var next = new Promise(function (resolve) {\n                _this2.callbacks.push(function (x) {\n                    return resolve(cb(x));\n                });\n            });\n            return next;\n        };\n        Promise.prototype.catch = function catch_(cb) {\n            var _this2 = this;\n            var next = new Promise(function (reject) {\n                _this2.callbacks.push(function (x) {\n                    return reject(cb(x));\n                });\n            });\n            return next;\n        };\n        Promise.prototype.triggerCallbacks = function triggerCallbacks() {\n            var _this3 = this;\n            this.callbacks.forEach(function (cb) {\n                cb(_this3.value);\n            });\n        };\n        return Promise;\n    }();\n}\n\n    ",
        "votes": 30,
        "comentarios": [],
        "usuario": "Amir Fo",
        "usuario_id": 537
    },
    {
        "_id": 319,
        "fecha": { "$date" : "2021-04-09T14:09:03Z" },
        "decripcion": "\nThe question was:\n\nHow do I return the response from an asynchronous call?\n\nwhich can be interpreted as:\n\nHow to make asynchronous code look synchronous?\n\nThe solution will be to avoid callbacks, and use a combination of Promises and async/await.\nI would like to give an example for an Ajax request.\n(Although it can be written in JavaScript, I prefer to write it in Python, and compile it to JavaScript using Transcrypt. It will be clear enough.)\nLet\u2019s first enable jQuery usage, to have $ available as S:\n__pragma__ ('alias', 'S', '$')\n\nDefine a function which returns a Promise, in this case an Ajax call:\ndef read(url: str):\n    deferred = S.Deferred()\n    S.ajax({'type': \"POST\", 'url': url, 'data': { },\n        'success': lambda d: deferred.resolve(d),\n        'error': lambda e: deferred.reject(e)\n    })\n    return deferred.promise()\n\nUse the asynchronous code as if it were synchronous:\nasync def readALot():\n    try:\n        result1 = await read(\"url_1\")\n        result2 = await read(\"url_2\")\n    except Exception:\n        console.warn(\"Reading a lot failed\")\n\n    ",
        "votes": 29,
        "comentarios": [
            {
                "decripcion": "Anyone interested in using async / await will likely also want to read this answer (and possibly my comment below it :-).",
                "fecha": { "$date" : "2021-05-11T12:25:58Z" },
                "usuario": "Henke",
                "usuario_id": 512
            }
        ],
        "usuario": "Pieter Jan Bonestroo",
        "usuario_id": 538
    },
    {
        "_id": 320,
        "fecha": { "$date" : "2021-04-09T13:53:15Z" },
        "decripcion": "\nOf course there are many approaches like synchronous request, promise, but from my experience I think you should use the callback approach. It's natural to asynchronous behavior of JavaScript.\nSo, your code snippet can be rewritten to be a little different:\nfunction foo() {\n    var result;\n\n    $.ajax({\n        url: '...',\n        success: function(response) {\n            myCallback(response);\n        }\n    });\n\n    return result;\n}\n\nfunction myCallback(response) {\n    // Does something.\n}\n\n    ",
        "votes": 28,
        "comentarios": [
            {
                "decripcion": "There's nothing inherently asynchronous about callbacks or JavaScript.",
                "fecha": { "$date" : "2018-03-18T19:48:53Z" },
                "usuario": "Aluan Haddad",
                "usuario_id": 522
            },
            {
                "decripcion": "Why keep var result; and return result;? The latter will still always return undefined!",
                "fecha": { "$date" : "2021-05-09T12:21:52Z" },
                "usuario": "Henke",
                "usuario_id": 512
            }
        ],
        "usuario": "Khoa Bui",
        "usuario_id": 539
    },
    {
        "_id": 321,
        "fecha": { "$date" : "2021-04-09T14:43:57Z" },
        "decripcion": "\nRather than throwing code at you, there are two concepts that are key to understanding how JavaScript handles callbacks and asynchronicity (is that even a word?)\nThe Event Loop and Concurrency Model\nThere are three things you need to be aware of; The queue; the event loop and the stack\nIn broad, simplistic terms, the event loop is like the project manager, it is constantly listening for any functions that want to run and communicates between the queue and the stack.\nwhile (queue.waitForMessage()) {\n  queue.processNextMessage();\n}\n\nOnce it receives a message to run something it adds it to the queue. The queue is the list of things that are waiting to execute (like your AJAX request). imagine it like this:\n\ncall foo.com/api/bar using foobarFunc\nGo perform an infinite loop\n... and so on\n\nWhen one of these messages is going to execute it pops the message from the queue and creates a stack, the stack is everything JavaScript needs to execute to perform the instruction in the message. So in our example it's being told to call foobarFunc\nfunction foobarFunc (var) {\n  console.log(anotherFunction(var));\n}\n\nSo anything that foobarFunc needs to execute (in our case anotherFunction) will get pushed onto the stack. executed, and then forgotten about - the event loop will then move onto the next thing in the queue (or listen for messages)\nThe key thing here is the order of execution. That is\nWHEN is something going to run\nWhen you make a call using AJAX to an external party or run any asynchronous code (a setTimeout for example), JavaScript is dependant upon a response before it can proceed.\nThe big question is when will it get the response? The answer is we don't know - so the event loop is waiting for that message to say \"hey run me\". If JavaScript just waited around for that message synchronously your app would freeze and it will suck. So JavaScript carries on executing the next item in the queue whilst waiting for the message to get added back to the queue.\nThat's why with asynchronous functionality we use things called callbacks. - A function or handler that, when passed into another function, will be executed at a later date. A promise uses callbacks (functions passed to .then() for example) as a way to reason about this asynchronous behaviour in a more linear way. The promise is a way of saying \"I promise to return something at some point\" and the callback is how we handle that value that is eventually returned. jQuery uses specific callbacks called deffered.done deffered.fail and deffered.always (amongst others). You can see them all here\nSo what you need to do is pass a function that is promised to execute at some point with data that is passed to it.\nBecause a callback is not executed immediately but at a later time it's important to pass the reference to the function not it executed. so\nfunction foo(bla) {\n  console.log(bla)\n}\n\nso most of the time (but not always) you'll pass foo not foo()\nHopefully that will make some sense. When you encounter things like this that seem confusing - i highly recommend reading the documentation fully to at least get an understanding of it. It will make you a much better developer.\n    ",
        "votes": 27,
        "comentarios": [
            {
                "decripcion": "I am struggling to accept \"callbacks are kind of like promises\". it's like saying \"flour is kind of like bread\" but it is not. you use flour, water and other incredients, mix them and eventually after a process, bread is the results.",
                "fecha": { "$date" : "2021-01-17T19:08:00Z" },
                "usuario": "Eva Cohen",
                "usuario_id": 532
            },
            {
                "decripcion": "This is true - I think I was try to say something that doesnt quite read what I was meaning. A promise in JS evidently represents something different to a callback, however when programming any kind asynchronous functionality you are going to be executing a callback. A promise represents the value but the callback is what we need to do something with that value, at some point in the future, when it returns.",
                "fecha": { "$date" : "2021-01-18T15:58:32Z" },
                "usuario": "Matthew Brent",
                "usuario_id": 515
            },
            {
                "decripcion": "A promise is mostly useless (but not always) without a callback to do something with the resolved value",
                "fecha": { "$date" : "2021-01-18T15:59:29Z" },
                "usuario": "Matthew Brent",
                "usuario_id": 515
            }
        ],
        "usuario": "Matthew Brent",
        "usuario_id": 515
    },
    {
        "_id": 322,
        "fecha": { "$date" : "2021-04-09T15:11:18Z" },
        "decripcion": "\nAfter reading all the responses here and with my experiences, I would like to resume the detail of callback, promise and async/await for the asynchronous programming in JavaScript.\n1) Callback: The fundamental reason for a callback is to run code in response of an event (see the example below). We use callback in JavaScript every time.\nconst body = document.getElementsByTagName('body')[0];\nfunction callback() {\n  console.log('Hello');\n}\nbody.addEventListener('click', callback);\n\nBut if you must use many nested callbacks in the example below, it will be fairy terrible for the code refactoring.\nasyncCallOne(function callback1() {\n  asyncCallTwo(function callback2() {\n    asyncCallThree(function callback3() {\n        ...\n    })\n  })\n})\n\n2) Promise: a syntax ES6 - Promise resolves the callback hell issue!\nconst myFirstPromise = new Promise((resolve, reject) => {\n  // We call resolve(...) when what we were doing asynchronously was successful, and reject(...) when it failed.\n  // In this example, we use setTimeout(...) to simulate async code.\n  // In reality, you will probably be using something like XHR request or an HTML5 API.\n  setTimeout(() => {\n    resolve(\"Success!\")  // Yay! Everything went well!\n  }, 250)\n})\n\nmyFirstPromise\n  .then((res) => {\n    return res.json();\n  })\n  .then((data) => {\n    console.log(data);\n  })\n  .catch((e) => {\n    console.log(e);\n  });\n\nmyFirstPromise is a Promise instance that represents the process of async codes. The resolve function signals that the Promise instance has finished. Afterwards, we can call .then() (a chain of .then as you want) and .catch() on the promise instance:\nthen \u2014 Runs a callback you pass to it when the promise has fulfilled.\ncatch \u2014 Runs a callback you pass to it when something went wrong.\n\n3) Async/Await: a new syntax ES6 - Await is basically syntactic sugar for Promise!\nThe Async function provides us with a clean and concise syntax that enables us to write less code to accomplish the same outcome we would get with promises. Async/Await looks similar to synchronous code, and synchronous code is much easier to read and write. To catch errors with Async/Await, we can use the block try...catch. In here, you don't need to write a chain of .then() of Promise syntax.\nconst getExchangeRate = async () => {\n  try {\n    const res = await fetch('https://getExchangeRateData');\n    const data = await res.json();\n    console.log(data);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\ngetExchangeRate();\n\n\nConclusion: These are totally the three syntaxes for asynchronous\nprogramming in JavaScript that you should well understand. So if possible, I\nrecommend that you should use \"promise\" or \"async/await\" for\nrefactoring your asynchronous codes (mostly for XHR requests) !\n\n    ",
        "votes": 27,
        "comentarios": [
            {
                "decripcion": "Hi, although this answer's contents are accurate, it really doesn't answer OP's question (which is how to return something from an asynchronous call?)",
                "fecha": { "$date" : "2020-08-25T12:02:39Z" },
                "usuario": "Bharath Ram",
                "usuario_id": 540
            }
        ],
        "usuario": "SanjiMika",
        "usuario_id": 541
    },
    {
        "_id": 323,
        "fecha": { "$date" : "2020-07-10T12:38:41Z" },
        "decripcion": "\nAs of jQuery 1.7 you should use jQuery.fn.on with the selector parameter filled:\n$(staticAncestors).on(eventName, dynamicChild, function() {});\n\nExplanation:\nThis is called event delegation and works as followed. The event is attached to a static parent (staticAncestors) of the element that should be handled. This jQuery handler is triggered every time the event triggers on this element or one of the descendant elements. The handler then checks if the element that triggered the event matches your selector (dynamicChild). When there is a match then your custom handler function is executed.\n\nPrior to this, the recommended approach was to use live():\n$(selector).live( eventName, function(){} );\n\nHowever, live() was deprecated in 1.7 in favour of on(), and completely removed in 1.9. The live() signature:\n$(selector).live( eventName, function(){} );\n\n... can be replaced with the following on() signature:\n$(document).on( eventName, selector, function(){} );\n\n\nFor example, if your page was dynamically creating elements with the class name dosomething you would bind the event to a parent which already exists (this is the nub of the problem here, you need something that exists to bind to, don't bind to the dynamic content), this can be (and the easiest option) is document. Though bear in mind document may not be the most efficient option.\n$(document).on('mouseover mouseout', '.dosomething', function(){\n    // what you want to happen when mouseover and mouseout \n    // occurs on elements that match '.dosomething'\n});\n\nAny parent that exists at the time the event is bound is fine. For example\n$('.buttons').on('click', 'button', function(){\n    // do something here\n});\n\nwould apply to\n<div class=\"buttons\">\n    <!-- <button>s that are generated dynamically and added here -->\n</div>\n\n    ",
        "votes": 2435,
        "comentarios": [
            {
                "decripcion": "Note that the live method only works for certain events, and not others such as loadedmetadata. (See the caveats section in the documentation.)",
                "fecha": { "$date" : "2011-02-17T11:47:22Z" },
                "usuario": "Sam Dutton",
                "usuario_id": 544
            },
            {
                "decripcion": "Learn more about event delegation here: learn.jquery.com/events/event-delegation.",
                "fecha": { "$date" : "2013-06-07T11:21:43Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            },
            {
                "decripcion": "Any way to accomplish this with pure javascript/vanilla js?",
                "fecha": { "$date" : "2014-11-12T12:33:18Z" },
                "usuario": "Ram Patra",
                "usuario_id": 545
            },
            {
                "decripcion": "@Ramswaroop anything you can do in jQuery can be accomplished without jQuery. Here's a good example of event delegation without jQuery",
                "fecha": { "$date" : "2014-12-08T17:46:59Z" },
                "usuario": "Dave",
                "usuario_id": 546
            },
            {
                "decripcion": "@dave I wonder why the answer you pointed out isn't listed here. Eli has clearly asked for a solution without any plugin if possible.",
                "fecha": { "$date" : "2014-12-09T07:14:53Z" },
                "usuario": "Ram Patra",
                "usuario_id": 545
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 324,
        "fecha": { "$date" : "2017-04-30T21:34:59Z" },
        "decripcion": "\nThere is a good explanation in the documentation of jQuery.fn.on.\n\nIn short:\n\n\n  Event handlers are bound only to the currently selected elements; they must exist on the page at the time your code makes the call to .on().\n\n\nThus in the following example #dataTable tbody tr must exist before the code is generated.\n\n$(\"#dataTable tbody tr\").on(\"click\", function(event){\n    console.log($(this).text());\n});\n\n\nIf new HTML is being injected into the page, it is preferable to use delegated events to attach an event handler, as described next.\n\nDelegated events have the advantage that they can process events from descendant elements that are added to the document at a later time. For example, if the table exists, but the rows are added dynamically using code, the following will handle it:\n\n$(\"#dataTable tbody\").on(\"click\", \"tr\", function(event){\n    console.log($(this).text());\n});\n\n\nIn addition to their ability to handle events on descendant elements which are not yet created, another advantage of delegated events is their potential for much lower overhead when many elements must be monitored. On a data table with 1,000 rows in its tbody, the first code example attaches a handler to 1,000 elements.\n\nA delegated-events approach (the second code example) attaches an event handler to only one element, the tbody, and the event only needs to bubble up one level (from the clicked tr to tbody).\n\nNote: Delegated events do not work for SVG.\n    ",
        "votes": 404,
        "comentarios": [
            {
                "decripcion": "this'd be a better accepted answer because it'd be faster to delegate from the specific table rather than all the way from the document (the search area would be much smaller)",
                "fecha": { "$date" : "2014-05-09T18:14:30Z" },
                "usuario": "msanjay",
                "usuario_id": 547
            },
            {
                "decripcion": "@msanjay: Although targetting the search closer to the elements is preferred, the search/speed difference is very minor in practice. You would have to click 50,000 times a second to notice anything :)",
                "fecha": { "$date" : "2014-11-12T12:06:54Z" },
                "usuario": "Gone Coding",
                "usuario_id": 548
            },
            {
                "decripcion": "Thank you! This solve my problem. This simple statement was my issue, \"Event handlers are bound only to the currently selected elements; they must exist on the page at the time your code makes the call to...\"",
                "fecha": { "$date" : "2019-10-03T21:31:50Z" },
                "usuario": "Dennis Fazekas",
                "usuario_id": 549
            }
        ],
        "usuario": "Ronen Rabinovici",
        "usuario_id": 550
    },
    {
        "_id": 325,
        "fecha": { "$date" : "2021-08-05T08:48:03Z" },
        "decripcion": "\nThis is a pure JavaScript solution without any libraries or plugins:\ndocument.addEventListener('click', function (e) {\n    if (hasClass(e.target, 'bu')) {\n        // .bu clicked\n        // Do your thing\n    } else if (hasClass(e.target, 'test')) {\n        // .test clicked\n        // Do your other thing\n    }\n}, false);\n\nwhere hasClass is\nfunction hasClass(elem, className) {\n    return elem.className.split(' ').indexOf(className) > -1;\n}\n\nLive demo\nCredit goes to Dave and Sime Vidas\nUsing more modern JS, hasClass can be implemented as:\nfunction hasClass(elem, className) {\n    return elem.classList.contains(className);\n}\n\n\nThe same jsfiddle Live demo embeded below:\n\n\nfunction hasClass(elem, className) {\n  return elem.classList.contains(className);\n}\n\ndocument.addEventListener('click', function(e) {\n  if (hasClass(e.target, 'bu')) {\n    alert('bu');\n    document.querySelector('.bu').innerHTML = '<div class=\"bu\">Bu<div class=\"tu\">Tu</div></div>';\n  } else if (hasClass(e.target, 'test')) {\n    alert('test');\n  } else if (hasClass(e.target, 'tu')) {\n    alert('tu');\n  }\n\n}, false);\n.test,\n.bu,\n.tu {\n  border: 1px solid gray;\n  padding: 10px;\n  margin: 10px;\n}\n<div class=\"test\">Test\n  <div class=\"bu\">Bu</div>test\n</div>\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 249,
        "comentarios": [
            {
                "decripcion": "stackoverflow.com/questions/9106329/\u2026",
                "fecha": { "$date" : "2016-01-06T14:57:48Z" },
                "usuario": "zloctb",
                "usuario_id": 551
            },
            {
                "decripcion": "You may use Element.classList instead of splitting",
                "fecha": { "$date" : "2016-08-09T10:07:47Z" },
                "usuario": "Eugen Konkov",
                "usuario_id": 552
            },
            {
                "decripcion": "@EugenKonkov Element.classList is not supported supported on older browsers. For example, IE < 9.",
                "fecha": { "$date" : "2016-08-09T10:59:44Z" },
                "usuario": "Ram Patra",
                "usuario_id": 545
            },
            {
                "decripcion": "A nice article on how to get things done using vanilla script instead of jQuery - toddmotto.com/\u2026",
                "fecha": { "$date" : "2017-06-29T09:25:24Z" },
                "usuario": "Ram Patra",
                "usuario_id": 545
            },
            {
                "decripcion": "how about bubbling? What if the click event happened on a child of the element you are interested in?",
                "fecha": { "$date" : "2017-07-06T13:06:53Z" },
                "usuario": "Andreas Trantidis",
                "usuario_id": 553
            }
        ],
        "usuario": "Ram Patra",
        "usuario_id": 545
    },
    {
        "_id": 326,
        "fecha": { "$date" : "2016-04-22T21:41:11Z" },
        "decripcion": "\nYou can add events to objects when you create them. If you are adding the same events to multiple objects at different times, creating a named function might be the way to go.\n\nvar mouseOverHandler = function() {\n    // Do stuff\n};\nvar mouseOutHandler = function () {\n    // Do stuff\n};\n\n$(function() {\n    // On the document load, apply to existing elements\n    $('select').hover(mouseOverHandler, mouseOutHandler);\n});\n\n// This next part would be in the callback from your Ajax call\n$(\"<select></select>\")\n    .append( /* Your <option>s */ )\n    .hover(mouseOverHandler, mouseOutHandler)\n    .appendTo( /* Wherever you need the select box */ )\n;\n\n    ",
        "votes": 80,
        "comentarios": [],
        "usuario": "nickf",
        "usuario_id": 554
    },
    {
        "_id": 327,
        "fecha": { "$date" : "2016-04-22T21:41:55Z" },
        "decripcion": "\nYou could simply wrap your event binding call up into a function and then invoke it twice: once on document ready and once after your event that adds the new DOM elements. If you do that you'll want to avoid binding the same event twice on the existing elements so you'll need either unbind the existing events or (better) only bind to the DOM elements that are newly created. The code would look something like this:\n\nfunction addCallbacks(eles){\n    eles.hover(function(){alert(\"gotcha!\")});\n}\n\n$(document).ready(function(){\n    addCallbacks($(\".myEles\"))\n});\n\n// ... add elements ...\naddCallbacks($(\".myNewElements\"))\n\n    ",
        "votes": 52,
        "comentarios": [
            {
                "decripcion": "This post really helped me get a grasp on a problem I was having loading the same form and getting 1,2,4,8,16... submissions. Instead of using .live() I just used .bind() in my .load() callback. Problem solved. Thanks!",
                "fecha": { "$date" : "2011-08-24T09:24:11Z" },
                "usuario": "theflowersoftime",
                "usuario_id": 555
            }
        ],
        "usuario": "Greg Borenstein",
        "usuario_id": 556
    },
    {
        "_id": 328,
        "fecha": { "$date" : "2015-09-06T20:50:45Z" },
        "decripcion": "\nTry to use .live() instead of .bind(); the .live() will bind .hover to your checkbox after the Ajax request executes.\n    ",
        "votes": 41,
        "comentarios": [
            {
                "decripcion": "The method live() was deprecated in version 1.7 in favor of on and deleted in version 1.9.",
                "fecha": { "$date" : "2014-06-17T12:30:04Z" },
                "usuario": "chridam",
                "usuario_id": 557
            }
        ],
        "usuario": "user670265",
        "usuario_id": 558
    },
    {
        "_id": 329,
        "fecha": { "$date" : "2016-04-22T21:53:15Z" },
        "decripcion": "\nEvent binding on dynamically created elements\n\nSingle element:\n\n$(document.body).on('click','.element', function(e) {  });\n\n\nChild Element:\n\n $(document.body).on('click','.element *', function(e) {  });\n\n\nNotice the added *. An event will be triggered for all children of that element.\n\nI have noticed that:\n\n$(document.body).on('click','.#element_id > element', function(e) {  });\n\n\nIt is not working any more, but it was working before. I have been using jQuery from Google CDN, but I don't know if they changed it.\n    ",
        "votes": 34,
        "comentarios": [
            {
                "decripcion": "Yeap and they are not saying (document.body) its says ancestor wich could be pretty much anything",
                "fecha": { "$date" : "2016-01-23T16:29:43Z" },
                "usuario": "MadeInDreams",
                "usuario_id": 559
            }
        ],
        "usuario": "MadeInDreams",
        "usuario_id": 559
    },
    {
        "_id": 330,
        "fecha": { "$date" : "2020-04-19T07:29:51Z" },
        "decripcion": "\nI prefer using the selector and I apply it on the document.\n\nThis binds itself on the document and will be applicable to the elements that will be rendered after page load.\n\nFor example:\n\n$(document).on(\"click\", 'selector', function() {\n    // Your code here\n});\n\n    ",
        "votes": 31,
        "comentarios": [
            {
                "decripcion": "the selector shouldn't be enclosed by $, thus the correct format will be $(document).on( \"click\" , \"selector\" , function() {     // Your code here });",
                "fecha": { "$date" : "2018-04-09T04:21:54Z" },
                "usuario": "autopilot",
                "usuario_id": 560
            },
            {
                "decripcion": "It's also pointless to wrap a jQuery object around the selector variable, when it must either contain a string or Element object which you can just pass directly to that argument of on()",
                "fecha": { "$date" : "2018-06-20T14:57:31Z" },
                "usuario": "Rory McCrossan",
                "usuario_id": 561
            },
            {
                "decripcion": "You should aim to bind it to the closest static parent not the whole document.",
                "fecha": { "$date" : "2020-09-21T11:28:04Z" },
                "usuario": "Mark Baijens",
                "usuario_id": 562
            }
        ],
        "usuario": "Vatsal",
        "usuario_id": 563
    },
    {
        "_id": 331,
        "fecha": { "$date" : "2016-04-22T21:44:05Z" },
        "decripcion": "\nYou can use the live() method to bind elements (even newly created ones) to events and handlers, like the onclick event.\n\nHere is a sample code I have written, where you can see how the live() method binds chosen elements, even newly created ones, to events:\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n        <title>Untitled Document</title>\n    </head>\n\n    <body>\n        <script src=\"http://code.jquery.com/jquery-latest.js\"></script>\n        <script src=\"http://ajax.aspnetcdn.com/ajax/jquery.ui/1.8.16/jquery-ui.min.js\"></script>\n\n        <input type=\"button\" id=\"theButton\" value=\"Click\" />\n        <script type=\"text/javascript\">\n            $(document).ready(function()\n                {\n                    $('.FOO').live(\"click\", function (){alert(\"It Works!\")});\n                    var $dialog = $('<div></div>').html('<div id=\"container\"><input type =\"button\" id=\"CUSTOM\" value=\"click\"/>This dialog will show every time!</div>').dialog({\n                                                                                                         autoOpen: false,\n                                                                                                         tite: 'Basic Dialog'\n                                                                                                     });\n                    $('#theButton').click(function()\n                    {\n                        $dialog.dialog('open');\n                        return('false');\n                    });\n                    $('#CUSTOM').click(function(){\n                        //$('#container').append('<input type=\"button\" value=\"clickmee\" class=\"FOO\" /></br>');\n                        var button = document.createElement(\"input\");\n                        button.setAttribute('class','FOO');\n                        button.setAttribute('type','button');\n                        button.setAttribute('value','CLICKMEE');\n                        $('#container').append(button);\n                    });\n                    /* $('#FOO').click(function(){\n                                                     alert(\"It Works!\");\n                                                 }); */\n            });\n        </script>\n    </body>\n</html>\n\n    ",
        "votes": 26,
        "comentarios": [],
        "usuario": "Fazi",
        "usuario_id": 564
    },
    {
        "_id": 332,
        "fecha": { "$date" : "2020-11-22T16:01:13Z" },
        "decripcion": "\nThis is done by event delegation. Event will get bind on wrapper-class element but will be delegated to selector-class element. This is how it works.\n$('.wrapper-class').on(\"click\", '.selector-class', function() {\n    // Your code here\n});\n\nAnd HTML\n<div class=\"wrapper-class\">\n    <button class=\"selector-class\">\n      Click Me!\n    </button>\n</div>    \n\n#Note:\nwrapper-class element can be anything ex. document, body or your wrapper. Wrapper should already exist. However, selector doesn't necessarily needs to be presented at page loading time. It may come later and the event will bind on selector without fail.\n    ",
        "votes": 24,
        "comentarios": [
            {
                "decripcion": "Yes, but it'll create event propagation for elements. you need to add target the specific dynamic element and stop event propagation.",
                "fecha": { "$date" : "2020-08-05T16:36:18Z" },
                "usuario": "Asad Ali",
                "usuario_id": 565
            },
            {
                "decripcion": "In case you bind same event on parent and descendent element than you can stop it using event.stopPropagation()",
                "fecha": { "$date" : "2020-08-06T07:18:13Z" },
                "usuario": "Mustkeem K",
                "usuario_id": 566
            }
        ],
        "usuario": "Mustkeem K",
        "usuario_id": 566
    },
    {
        "_id": 333,
        "fecha": { "$date" : "2016-04-22T21:48:36Z" },
        "decripcion": "\nAnother solution is to add the listener when creating the element. Instead of put the listener in the body, you put the listener in the element in the moment that you create it:\n\nvar myElement = $('<button/>', {\n    text: 'Go to Google!'\n});\n\nmyElement.bind( 'click', goToGoogle);\nmyElement.append('body');\n\n\nfunction goToGoogle(event){\n    window.location.replace(\"http://www.google.com\");\n}\n\n    ",
        "votes": 23,
        "comentarios": [
            {
                "decripcion": "Your code contains 1 mistake: myElement.append('body'); must be myElement.appendTo('body');. On the other hand, if there is no need for the further use of variable myElement it's easier and shorter this way: $('body').append($('<button/>', { text: 'Go to Google!' }).bind( 'click', goToGoogle));",
                "fecha": { "$date" : "2017-05-11T19:58:34Z" },
                "usuario": "ddlab",
                "usuario_id": 567
            }
        ],
        "usuario": "Martin Da Rosa",
        "usuario_id": 568
    },
    {
        "_id": 334,
        "fecha": { "$date" : "2019-08-06T07:15:35Z" },
        "decripcion": "\nTry like this way - \n\n$(document).on( 'click', '.click-activity', function () { ... });\n\n    ",
        "votes": 22,
        "comentarios": [
            {
                "decripcion": "You should aim to bind it to the closest static parent not the whole document.",
                "fecha": { "$date" : "2020-09-21T11:28:09Z" },
                "usuario": "Mark Baijens",
                "usuario_id": 562
            }
        ],
        "usuario": "Rohit Suthar",
        "usuario_id": 569
    },
    {
        "_id": 335,
        "fecha": { "$date" : "2016-04-22T21:56:06Z" },
        "decripcion": "\nTake note of \"MAIN\" class the element is placed, for example,\n\n<div class=\"container\">\n     <ul class=\"select\">\n         <li> First</li>\n         <li>Second</li>\n    </ul>\n</div>\n\n\nIn the above scenario, the MAIN object the jQuery will watch is \"container\".\n\nThen you will basically have elements names under container such as ul, li, and select:\n\n$(document).ready(function(e) {\n    $('.container').on( 'click',\".select\", function(e) {\n        alert(\"CLICKED\");\n    });\n });\n\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "Aslan Kaya",
        "usuario_id": 570
    },
    {
        "_id": 336,
        "fecha": { "$date" : "2017-08-13T12:06:35Z" },
        "decripcion": "\nYou can attach event to element when dynamically created using jQuery(html, attributes).\n\n\n  As of jQuery 1.8, any jQuery instance method (a method of jQuery.fn) can be used as a property of the object passed to the\n  second parameter:\n\n\n\n\nfunction handleDynamicElementEvent(event) {\n  console.log(event.type, this.value)\n}\n// create and attach event to dynamic element\njQuery(\"<select>\", {\n    html: $.map(Array(3), function(_, index) {\n      return new Option(index, index)\n    }),\n    on: {\n      change: handleDynamicElementEvent\n    }\n  })\n  .appendTo(\"body\");\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\">\n</script>\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 16,
        "comentarios": [],
        "usuario": "guest271314",
        "usuario_id": 571
    },
    {
        "_id": 337,
        "fecha": { "$date" : "2016-08-11T16:16:58Z" },
        "decripcion": "\nyou could use\n\n$('.buttons').on('click', 'button', function(){\n    // your magic goes here\n});\n\n\nor\n\n$('.buttons').delegate('button', 'click', function() {\n    // your magic goes here\n});\n\n\nthese two methods are equivalent but have a different order of parameters.\n\nsee: jQuery Delegate Event\n    ",
        "votes": 15,
        "comentarios": [
            {
                "decripcion": "delegate() is now deprecated. Do not use it.",
                "fecha": { "$date" : "2018-06-20T14:58:29Z" },
                "usuario": "Rory McCrossan",
                "usuario_id": 561
            }
        ],
        "usuario": "Mensur Gri\u0161evi\u0107",
        "usuario_id": 572
    },
    {
        "_id": 338,
        "fecha": { "$date" : "2017-10-19T12:16:31Z" },
        "decripcion": "\nHere is why dynamically created elements do not respond to clicks\u00a0:\n\n\n\nvar body = $(\"body\");\nvar btns = $(\"button\");\nvar btnB = $(\"<button>B</button>\");\n// `<button>B</button>` is not yet in the document.\n// Thus, `$(\"button\")` gives `[<button>A</button>]`.\n// Only `<button>A</button>` gets a click listener.\nbtns.on(\"click\", function () {\n  console.log(this);\n});\n// Too late for `<button>B</button>`...\nbody.append(btnB);\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\n<button>A</button>\n Run code snippetHide resultsExpand snippet\n\n\n\nAs a workaround, you have to listen to all clicks and check the source element\u00a0:\n\n\n\nvar body = $(\"body\");\nvar btnB = $(\"<button>B</button>\");\nvar btnC = $(\"<button>C</button>\");\n// Listen to all clicks and\n// check if the source element\n// is a `<button></button>`.\nbody.on(\"click\", function (ev) {\n  if ($(ev.target).is(\"button\")) {\n    console.log(ev.target);\n  }\n});\n// Now you can add any number\n// of `<button></button>`.\nbody.append(btnB);\nbody.append(btnC);\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\n<button>A</button>\n Run code snippetHide resultsExpand snippet\n\n\n\nThis is called \"Event Delegation\". Good news, it's a builtin feature in jQuery :-)\n\n\n\nvar i = 11;\nvar body = $(\"body\");\nbody.on(\"click\", \"button\", function () {\n  var letter = (i++).toString(36).toUpperCase();\n  body.append($(\"<button>\" + letter + \"</button>\"));\n});\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\n<button>A</button>\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 13,
        "comentarios": [
            {
                "decripcion": "It\u2019s also possible to assign var body = $(\"body\").on( \u2026 ); directly.",
                "fecha": { "$date" : "2020-07-26T00:18:03Z" },
                "usuario": "Sebastian Simon",
                "usuario_id": 573
            }
        ],
        "usuario": "leaf",
        "usuario_id": 574
    },
    {
        "_id": 339,
        "fecha": { "$date" : "2015-12-18T08:48:51Z" },
        "decripcion": "\nAny parent that exists at the time the event is bound and if your page was dynamically creating elements with the class name button you would bind the event to a parent which already exists\n\n\n\n$(document).ready(function(){\n  //Particular Parent chield click\n  $(\".buttons\").on(\"click\",\"button\",function(){\n    alert(\"Clicked\");\n  });  \n  \n  //Dynamic event bind on button class  \n  $(document).on(\"click\",\".button\",function(){\n    alert(\"Dymamic Clicked\");\n  });\n  $(\"input\").addClass(\"button\");  \n});\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>\n<div class=\"buttons\">\n  <input type=\"button\" value=\"1\">\n  <button>2</button>\n  <input type=\"text\">\n  <button>3</button>  \n  <input type=\"button\" value=\"5\">  \n  </div>\n<button>6</button>\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 11,
        "comentarios": [],
        "usuario": "Ankit Kathiriya",
        "usuario_id": 575
    },
    {
        "_id": 340,
        "fecha": { "$date" : "2018-06-08T02:29:14Z" },
        "decripcion": "\nBind the event to a parent which already exists:\n\n$(document).on(\"click\", \"selector\", function() {\n    // Your code here\n});\n\n    ",
        "votes": 11,
        "comentarios": [],
        "usuario": "truongnm",
        "usuario_id": 576
    },
    {
        "_id": 341,
        "fecha": { "$date" : "2019-03-27T04:21:48Z" },
        "decripcion": "\nAnother flexible solution to create elements and bind events  (source)\n\n// creating a dynamic element (container div)\nvar $div = $(\"<div>\", {id: 'myid1', class: 'myclass'});\n\n//creating a dynamic button\n var $btn = $(\"<button>\", { type: 'button', text: 'Click me', class: 'btn' });\n\n// binding the event\n $btn.click(function () { //for mouseover--> $btn.on('mouseover', function () {\n    console.log('clicked');\n });\n\n// append dynamic button to the dynamic container\n$div.append($btn);\n\n// add the dynamically created element(s) to a static element\n$(\"#box\").append($div);\n\n\nNote: This will create an event handler instance for each element (may affect performance when used in loops)\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Prasad De Silva",
        "usuario_id": 577
    },
    {
        "_id": 342,
        "fecha": { "$date" : "2016-11-30T09:07:46Z" },
        "decripcion": "\nUse the .on() method of jQuery http://api.jquery.com/on/ to attach event handlers to live element.\n\nAlso as of version 1.9 .live() method is removed.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Kalpesh Patel",
        "usuario_id": 578
    },
    {
        "_id": 343,
        "fecha": { "$date" : "2018-06-08T02:53:27Z" },
        "decripcion": "\nI prefer to have event listeners deployed in a modular function fashion rather than scripting a document level event listener. So, I do like below. Note, you can't oversubscribe an element with the same event listener so don't worry about attaching a listener more than once - only one sticks.\n\n\n\nvar iterations = 4;\nvar button;\nvar body = document.querySelector(\"body\");\n\nfor (var i = 0; i < iterations; i++) {\n    button = document.createElement(\"button\");\n    button.classList.add(\"my-button\");\n    button.appendChild(document.createTextNode(i));\n    button.addEventListener(\"click\", myButtonWasClicked);\n    body.appendChild(button);\n}\n\nfunction myButtonWasClicked(e) {\n    console.log(e.target); //access to this specific button\n}\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "I prefer this implementation; I just have to set up a call back",
                "fecha": { "$date" : "2018-10-22T10:18:43Z" },
                "usuario": "William",
                "usuario_id": 579
            }
        ],
        "usuario": "Ronnie Royston",
        "usuario_id": 580
    },
    {
        "_id": 344,
        "fecha": { "$date" : "2017-09-27T15:42:58Z" },
        "decripcion": "\n<html>\n    <head>\n        <title>HTML Document</title>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.0/jquery.min.js\"></script>\n    </head>\n\n    <body>\n        <div id=\"hover-id\">\n            Hello World\n        </div>\n\n        <script>\n            jQuery(document).ready(function($){\n                $(document).on('mouseover', '#hover-id', function(){\n                    $(this).css('color','yellowgreen');\n                });\n\n                $(document).on('mouseout', '#hover-id', function(){\n                    $(this).css('color','black');\n                });\n            });\n        </script>\n    </body>\n</html>\n\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "While this code snippet may solve the problem, it doesn't explain why or how it answers the question. Please include an explanation for your code, as that really helps to improve the quality of your post. Remember that you are answering the question for readers in the future, and those people might not know the reasons for your code suggestion.",
                "fecha": { "$date" : "2017-09-30T11:07:42Z" },
                "usuario": "Palec",
                "usuario_id": 581
            }
        ],
        "usuario": "Fakhrul Hasan",
        "usuario_id": 582
    },
    {
        "_id": 345,
        "fecha": { "$date" : "2018-05-18T00:13:34Z" },
        "decripcion": "\nI was looking a solution to get $.bind and $.unbind working without problems in dynamically added elements.  \n\nAs on() makes the trick to attach events, in order to create a fake unbind on those I came to:\n\nconst sendAction = function(e){ ... }\n// bind the click\n$('body').on('click', 'button.send', sendAction );\n\n// unbind the click\n$('body').on('click', 'button.send', function(){} );\n\n    ",
        "votes": -1,
        "comentarios": [
            {
                "decripcion": "The unbinding does not work, this simply adds another event which points to an empty function...",
                "fecha": { "$date" : "2018-11-09T11:28:06Z" },
                "usuario": "Fabian Bigler",
                "usuario_id": 583
            }
        ],
        "usuario": "Evhz",
        "usuario_id": 584
    },
    {
        "_id": 346,
        "fecha": { "$date" : "2020-07-21T13:57:17Z" },
        "decripcion": "\nWell, the problem is that the variable i, within each of your anonymous functions, is bound to the same variable outside of the function.\nES6 solution: let\nECMAScript 6 (ES6) introduces new let and const keywords that are scoped differently than var-based variables. For example, in a loop with a let-based index, each iteration through the loop will have a new variable i with loop scope, so your code would work as you expect. There are many resources, but I'd recommend 2ality's block-scoping post as a great source of information.\nfor (let i = 0; i < 3; i++) {\n  funcs[i] = function() {\n    console.log(\"My value: \" + i);\n  };\n}\n\nBeware, though, that IE9-IE11 and Edge prior to Edge 14 support let but get the above wrong (they don't create a new i each time, so all the functions above would log 3 like they would if we used var). Edge 14 finally gets it right.\n\nES5.1 solution: forEach\nWith the relatively widespread availability of the Array.prototype.forEach function (in 2015), it's worth noting that in those situations involving iteration primarily over an array of values, .forEach() provides a clean, natural way to get a distinct closure for every iteration. That is, assuming you've got some sort of array containing values (DOM references, objects, whatever), and the problem arises of setting up callbacks specific to each element, you can do this:\nvar someArray = [ /* whatever */ ];\n// ...\nsomeArray.forEach(function(arrayElement) {\n  // ... code code code for this one element\n  someAsynchronousFunction(arrayElement, function() {\n    arrayElement.doSomething();\n  });\n});\n\nThe idea is that each invocation of the callback function used with the .forEach loop will be its own closure. The parameter passed in to that handler is the array element specific to that particular step of the iteration. If it's used in an asynchronous callback, it won't collide with any of the other callbacks established at other steps of the iteration.\nIf you happen to be working in jQuery, the $.each() function gives you a similar capability.\n\nClassic solution: Closures\nWhat you want to do is bind the variable within each function to a separate, unchanging value outside of the function:\n\n\nvar funcs = [];\n\nfunction createfunc(i) {\n  return function() {\n    console.log(\"My value: \" + i);\n  };\n}\n\nfor (var i = 0; i < 3; i++) {\n  funcs[i] = createfunc(i);\n}\n\nfor (var j = 0; j < 3; j++) {\n  // and now let's run each one to see\n  funcs[j]();\n}\n Run code snippetHide resultsExpand snippet\n\n\nSince there is no block scope in JavaScript - only function scope - by wrapping the function creation in a new function, you ensure that the value of \"i\" remains as you intended.\n    ",
        "votes": 2295,
        "comentarios": [
            {
                "decripcion": "isn't function createfunc(i) {     return function() { console.log(\"My value: \" + i); }; } still closure because it uses the variable i?",
                "fecha": { "$date" : "2014-03-28T03:45:40Z" },
                "usuario": "\u30a2\u30ec\u30c3\u30af\u30b9",
                "usuario_id": 586
            },
            {
                "decripcion": "Unfortunately, this answer is outdated and nobody will see the correct answer at the bottom - using Function.bind() is definitely preferable by now, see stackoverflow.com/a/19323214/785541.",
                "fecha": { "$date" : "2014-06-20T12:21:23Z" },
                "usuario": "Wladimir Palant",
                "usuario_id": 587
            },
            {
                "decripcion": "@Wladimir: Your suggestion that .bind() is \"the correct answer\" isn't right. They each have their own place. With .bind() you can't bind arguments without binding the this value. Also you get a copy of the i argument without the ability to mutate it between calls, which sometimes is needed. So they're quite different constructs, not to mention that .bind() implementations have been historically slow. Sure in the simple example either would work, but closures are an important concept to understand, and that's what the question was about.",
                "fecha": { "$date" : "2014-07-12T02:35:51Z" },
                "usuario": "cookie monster",
                "usuario_id": 588
            },
            {
                "decripcion": "Please stop using these for-return function hacks, use [].forEach or [].map instead because they avoid reusing the same scope variables.",
                "fecha": { "$date" : "2015-02-07T10:23:16Z" },
                "usuario": "Christian Landgren",
                "usuario_id": 589
            },
            {
                "decripcion": "@ChristianLandgren: That's only useful if you're iterating an Array. These techniques aren't \"hacks\". They're essential knowledge.",
                "fecha": { "$date" : "2015-06-29T16:31:47Z" },
                "usuario": "NA",
                "usuario_id": 53
            }
        ],
        "usuario": "harto",
        "usuario_id": 590
    },
    {
        "_id": 347,
        "fecha": { "$date" : "2019-05-22T11:33:23Z" },
        "decripcion": "\nTry:\n\n\n\nvar funcs = [];\n    \nfor (var i = 0; i < 3; i++) {\n    funcs[i] = (function(index) {\n        return function() {\n            console.log(\"My value: \" + index);\n        };\n    }(i));\n}\n\nfor (var j = 0; j < 3; j++) {\n    funcs[j]();\n}\n Run code snippetHide resultsExpand snippet\n\n\n\nEdit (2014):\n\nPersonally I think @Aust's more recent answer about using .bind is the best way to do this kind of thing now. There's also lo-dash/underscore's _.partial when you don't need or want to mess with bind's thisArg.\n    ",
        "votes": 402,
        "comentarios": [
            {
                "decripcion": "any explanation about the }(i)); ?",
                "fecha": { "$date" : "2018-04-06T01:32:18Z" },
                "usuario": "aswzen",
                "usuario_id": 591
            },
            {
                "decripcion": "@aswzen I think it passes i as the argument index to the function.",
                "fecha": { "$date" : "2018-07-26T22:01:50Z" },
                "usuario": "Jet Blue",
                "usuario_id": 592
            },
            {
                "decripcion": "it is actually creating local variable index.",
                "fecha": { "$date" : "2019-03-15T15:17:08Z" },
                "usuario": "Abhishek Singh",
                "usuario_id": 593
            },
            {
                "decripcion": "Immediately Invoke Function Expression, aka IIFE.  (i) is the argument to the anonymous function expression that is invoked immediately and index becomes set from i.",
                "fecha": { "$date" : "2020-04-14T05:51:28Z" },
                "usuario": "Eggs",
                "usuario_id": 594
            }
        ],
        "usuario": "Bjorn",
        "usuario_id": 595
    },
    {
        "_id": 348,
        "fecha": { "$date" : "2018-02-21T16:03:26Z" },
        "decripcion": "\nAnother way that hasn't been mentioned yet is the use of Function.prototype.bind\n\n\n\nvar funcs = {};\nfor (var i = 0; i < 3; i++) {\n  funcs[i] = function(x) {\n    console.log('My value: ' + x);\n  }.bind(this, i);\n}\nfor (var j = 0; j < 3; j++) {\n  funcs[j]();\n}\n Run code snippetHide resultsExpand snippet\n\n\n\nUPDATE\n\nAs pointed out by @squint and @mekdev, you get better performance by creating the function outside the loop first and then binding the results within the loop.\n\n\n\nfunction log(x) {\n  console.log('My value: ' + x);\n}\n\nvar funcs = [];\n\nfor (var i = 0; i < 3; i++) {\n  funcs[i] = log.bind(this, i);\n}\n\nfor (var j = 0; j < 3; j++) {\n  funcs[j]();\n}\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 375,
        "comentarios": [
            {
                "decripcion": "This is what I do these days too, I also like lo-dash/underscore's _.partial",
                "fecha": { "$date" : "2014-12-08T05:18:31Z" },
                "usuario": "Bjorn",
                "usuario_id": 595
            },
            {
                "decripcion": ".bind() will be largely obsolete with ECMAScript 6 features. Besides, this actually creates two functions per iteration. First the anonymous, then the one generated by .bind(). Better use would be to create it outside the loop, then .bind() it inside.",
                "fecha": { "$date" : "2015-06-28T03:29:07Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "@squint @mekdev - You both are correct. My initial example was written quickly to demonstrate how bind is used. I've added another example per your suggestions.",
                "fecha": { "$date" : "2015-06-29T16:23:27Z" },
                "usuario": "Aust",
                "usuario_id": 596
            },
            {
                "decripcion": "I think instead of wasting computation over two O(n) loops, just  do  for (var i = 0; i < 3; i++) {     log.call(this, i); }",
                "fecha": { "$date" : "2015-09-11T12:14:20Z" },
                "usuario": "user2290820",
                "usuario_id": 597
            },
            {
                "decripcion": ".bind() does what the accepted answer suggests PLUS fiddles with this.",
                "fecha": { "$date" : "2017-01-08T05:55:07Z" },
                "usuario": "niry",
                "usuario_id": 598
            }
        ],
        "usuario": "Aust",
        "usuario_id": 596
    },
    {
        "_id": 349,
        "fecha": { "$date" : "2019-05-22T11:32:46Z" },
        "decripcion": "\nUsing an Immediately-Invoked Function Expression, the simplest and most readable way to enclose an index variable:\n\n\n\nfor (var i = 0; i < 3; i++) {\n\n    (function(index) {\n\n        console.log('iterator: ' + index);\n        //now you can also loop an ajax call here \n        //without losing track of the iterator value:   $.ajax({});\n    \n    })(i);\n\n}\n Run code snippetHide resultsExpand snippet\n\n\n\nThis sends the iterator i into the anonymous function of which we define as index.  This creates a closure, where the variable i gets saved for later use in any asynchronous functionality within the IIFE.\n    ",
        "votes": 285,
        "comentarios": [
            {
                "decripcion": "For further code readability and to avoid confusion as to which i is what, I'd rename the function parameter to index.",
                "fecha": { "$date" : "2014-01-10T16:45:53Z" },
                "usuario": "Kyle Falconer",
                "usuario_id": 599
            },
            {
                "decripcion": "How would you use this technique to define the array funcs described in the original question?",
                "fecha": { "$date" : "2014-11-30T13:17:19Z" },
                "usuario": "Nico",
                "usuario_id": 600
            },
            {
                "decripcion": "@Nico The same way as shown in the original question, except you would use index instead of i.",
                "fecha": { "$date" : "2015-03-31T20:54:35Z" },
                "usuario": "JLRishe",
                "usuario_id": 601
            },
            {
                "decripcion": "@JLRishe var funcs = {}; for (var i = 0; i < 3; i++) {     funcs[i] = (function(index) {         return function() {console.log('iterator: ' + index);};     })(i); }; for (var j = 0; j < 3; j++) {     funcs[j](); }",
                "fecha": { "$date" : "2015-04-01T09:22:44Z" },
                "usuario": "Nico",
                "usuario_id": 600
            },
            {
                "decripcion": "@Nico In OP's particular case, they're just iterating over numbers, so this wouldn't be a great case for .forEach(), but a lot of the time, when one is starting off with an array, forEach() is a good choice, like: var nums [4, 6, 7]; var funcs = {}; nums.forEach(function (num, i) { funcs[i] = function () { console.log(num); }; });",
                "fecha": { "$date" : "2015-04-01T10:05:13Z" },
                "usuario": "JLRishe",
                "usuario_id": 601
            }
        ],
        "usuario": "neurosnap",
        "usuario_id": 602
    },
    {
        "_id": 350,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nBit late to the party, but I was exploring this issue today and noticed that many of the answers don't completely address how Javascript treats scopes, which is essentially what this boils down to.\nSo as many others mentioned, the problem is that the inner function is referencing the same i variable. So why don't we just create a new local variable each iteration, and have the inner function reference that instead?\n\n\n//overwrite console.log() so you can see the console output\nconsole.log = function(msg) {document.body.innerHTML += '<p>' + msg + '</p>';};\n\nvar funcs = {};\nfor (var i = 0; i < 3; i++) {\n    var ilocal = i; //create a new local variable\n    funcs[i] = function() {\n        console.log(\"My value: \" + ilocal); //each should reference its own local variable\n    };\n}\nfor (var j = 0; j < 3; j++) {\n    funcs[j]();\n}\n Run code snippetHide resultsExpand snippet\n\n\nJust like before, where each inner function outputted the last value assigned to i, now each inner function just outputs the last value assigned to ilocal. But shouldn't each iteration have it's own ilocal?\nTurns out, that's the issue. Each iteration is sharing the same scope, so every iteration after the first is just overwriting ilocal. From MDN:\n\nImportant: JavaScript does not have block scope. Variables introduced with a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. In other words, block statements do not introduce a scope. Although \"standalone\" blocks are valid syntax, you do not want to use standalone blocks in JavaScript, because they don't do what you think they do, if you think they do anything like such blocks in C or Java.\n\nReiterated for emphasis:\n\nJavaScript does not have block scope. Variables introduced with a block are scoped to the containing function or script\n\nWe can see this by checking ilocal before we declare it in each iteration:\n\n\n//overwrite console.log() so you can see the console output\nconsole.log = function(msg) {document.body.innerHTML += '<p>' + msg + '</p>';};\n\nvar funcs = {};\nfor (var i = 0; i < 3; i++) {\n  console.log(ilocal);\n  var ilocal = i;\n}\n Run code snippetHide resultsExpand snippet\n\n\nThis is exactly why this bug is so tricky. Even though you are redeclaring a variable, Javascript won't throw an error, and JSLint won't even throw a warning. This is also why the best way to solve this is to take advantage of closures, which is essentially the idea that in Javascript, inner functions have access to outer variables because inner scopes \"enclose\" outer scopes.\n\nThis also means that inner functions \"hold onto\" outer variables and keep them alive, even if the outer function returns. To utilize this, we create and call a wrapper function purely to make a new scope, declare ilocal in the new scope, and return an inner function that uses ilocal (more explanation below):\n\n\n//overwrite console.log() so you can see the console output\nconsole.log = function(msg) {document.body.innerHTML += '<p>' + msg + '</p>';};\n\nvar funcs = {};\nfor (var i = 0; i < 3; i++) {\n    funcs[i] = (function() { //create a new scope using a wrapper function\n        var ilocal = i; //capture i into a local var\n        return function() { //return the inner function\n            console.log(\"My value: \" + ilocal);\n        };\n    })(); //remember to run the wrapper function\n}\nfor (var j = 0; j < 3; j++) {\n    funcs[j]();\n}\n Run code snippetHide resultsExpand snippet\n\n\nCreating the inner function inside a wrapper function gives the inner function a private environment that only it can access, a \"closure\". Thus, every time we call the wrapper function we create a new inner function with it's own separate environment, ensuring that the ilocal variables don't collide and overwrite each other. A few minor optimizations gives the final answer that many other SO users gave:\n\n\n//overwrite console.log() so you can see the console output\nconsole.log = function(msg) {document.body.innerHTML += '<p>' + msg + '</p>';};\n\nvar funcs = {};\nfor (var i = 0; i < 3; i++) {\n    funcs[i] = wrapper(i);\n}\nfor (var j = 0; j < 3; j++) {\n    funcs[j]();\n}\n//creates a separate environment for the inner function\nfunction wrapper(ilocal) {\n    return function() { //return the inner function\n        console.log(\"My value: \" + ilocal);\n    };\n}\n Run code snippetHide resultsExpand snippet\n\n\nUpdate\nWith ES6 now mainstream, we can now use the new let keyword to create block-scoped variables:\n\n\n//overwrite console.log() so you can see the console output\nconsole.log = function(msg) {document.body.innerHTML += '<p>' + msg + '</p>';};\n\nvar funcs = {};\nfor (let i = 0; i < 3; i++) { // use \"let\" to declare \"i\"\n    funcs[i] = function() {\n        console.log(\"My value: \" + i); //each should reference its own local variable\n    };\n}\nfor (var j = 0; j < 3; j++) { // we can use \"var\" here without issue\n    funcs[j]();\n}\n Run code snippetHide resultsExpand snippet\n\n\nLook how easy it is now! For more information see this answer, which my info is based off of.\n    ",
        "votes": 175,
        "comentarios": [
            {
                "decripcion": "There is now such a thing as block scoping in JavaScript using the let and const keywords. If this answer were to expand to include that, it would be much more globally useful in my opinion.",
                "fecha": { "$date" : "2017-12-27T03:12:06Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "@TinyGiant sure thing, I added some info about let and linked a more complete explanation",
                "fecha": { "$date" : "2018-03-01T22:44:09Z" },
                "usuario": "woojoo666",
                "usuario_id": 603
            },
            {
                "decripcion": "@woojoo666 Could your answer also work for calling two alternating URL's in a loop like so: i=0; while(i < 100) {     setTimeout(function(){ window.open(\"https://www.bbc.com\",\"_self\") }, 3000);     setTimeout(function(){ window.open(\"https://www.cnn.com\",\"_self\") }, 3000);   i++ }? (could replace window.open() with getelementbyid......)",
                "fecha": { "$date" : "2018-05-14T19:08:24Z" },
                "usuario": "nutty about natty",
                "usuario_id": 604
            },
            {
                "decripcion": "@nuttyaboutnatty sorry about such a late reply. It doesn't seem like the code in your example already works. You aren't using i in your timeout functions, so you don't need a closure",
                "fecha": { "$date" : "2018-06-03T22:58:23Z" },
                "usuario": "woojoo666",
                "usuario_id": 603
            },
            {
                "decripcion": "whoops, sorry, meant to say \"it seems like the code in your example already works\"",
                "fecha": { "$date" : "2018-06-08T11:22:45Z" },
                "usuario": "woojoo666",
                "usuario_id": 603
            }
        ],
        "usuario": "woojoo666",
        "usuario_id": 603
    },
    {
        "_id": 351,
        "fecha": { "$date" : "2019-05-22T11:38:58Z" },
        "decripcion": "\nWith ES6 now widely supported, the best answer to this question has changed.  ES6 provides the let and const keywords for this exact circumstance.  Instead of messing around with closures, we can just use let to set a loop scope variable like this:\n\n\n\nvar funcs = [];\n\nfor (let i = 0; i < 3; i++) {          \n    funcs[i] = function() {            \n      console.log(\"My value: \" + i); \n    };\n}\n Run code snippetHide resultsExpand snippet\n\n\n\nval will then point to an object that is specific to that particular turn of the loop, and will return the correct value without the additional closure notation.  This obviously significantly simplifies this problem.\n\nconst is similar to let with the additional restriction that the variable name can't be rebound to a new reference after initial assignment.\n\nBrowser support is now here for those targeting the latest versions of browsers. const/let are currently supported in the latest Firefox, Safari, Edge and Chrome. It also is supported in Node, and you can use it anywhere by taking advantage of build tools like Babel.  You can see a working example here: http://jsfiddle.net/ben336/rbU4t/2/\n\nDocs here:\n\n\nconst\nlet\n\n\nBeware, though, that IE9-IE11 and Edge prior to Edge 14 support let but get the above wrong (they don't create a new i each time, so all the functions above would log 3 like they would if we used var). Edge 14 finally gets it right.\n    ",
        "votes": 163,
        "comentarios": [
            {
                "decripcion": "Unfortunately, 'let' is still not fully supported, especially in mobile. developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/\u2026",
                "fecha": { "$date" : "2016-02-23T17:47:32Z" },
                "usuario": "MattC",
                "usuario_id": 605
            },
            {
                "decripcion": "As of June '16, let is supported in all major browser versions except iOS Safari, Opera Mini and Safari 9. Evergreen browsers support it. Babel will transpile it correctly to keep the expected behaviour without high compliancy mode switched on.",
                "fecha": { "$date" : "2016-06-22T10:18:14Z" },
                "usuario": "Dan",
                "usuario_id": 606
            },
            {
                "decripcion": "@DanPantry yeah about time for an update :)  Updated to better reflect the current state of things, including adding a mention of const, doc links and better compatibility info.",
                "fecha": { "$date" : "2016-06-27T14:24:27Z" },
                "usuario": "Ben McCormick",
                "usuario_id": 607
            },
            {
                "decripcion": "Isn't this why we use babel to transpile our code so browsers that don't support ES6/7 can understand what's going on?",
                "fecha": { "$date" : "2018-03-19T15:56:00Z" },
                "usuario": "pixel 67",
                "usuario_id": 608
            }
        ],
        "usuario": "Ben McCormick",
        "usuario_id": 607
    },
    {
        "_id": 352,
        "fecha": { "$date" : "2017-12-26T11:07:51Z" },
        "decripcion": "\nAnother way of saying it is that the i in your function is bound at the time of executing the function, not the time of creating the function.\n\nWhen you create the closure, i is a reference to the variable defined in the outside scope, not a copy of it as it was when you created the closure. It will be evaluated at the time of execution.\n\nMost of the other answers provide ways to work around by creating another variable that won't change the value for you.\n\nJust thought I'd add an explanation for clarity. For a solution, personally, I'd go with Harto's since it is the most self-explanatory way of doing it from the answers here. Any of the code posted will work, but I'd opt for a closure factory over having to write a pile of comments to explain why I'm declaring a new variable(Freddy and 1800's) or have weird embedded closure syntax(apphacker).\n    ",
        "votes": 94,
        "comentarios": [],
        "usuario": "Darren Clark",
        "usuario_id": 609
    },
    {
        "_id": 353,
        "fecha": { "$date" : "2019-05-22T11:16:54Z" },
        "decripcion": "\nWhat you need to understand is the scope of the variables in javascript is based on the function. This is an important difference than say c# where you have block scope, and just copying the variable to one inside the for will work.\n\nWrapping it in a function that evaluates returning the function like apphacker's answer will do the trick, as the variable now has the function scope.\n\nThere is also a let keyword instead of var, that would allow using the block scope rule. In that case defining a variable inside the for would do the trick. That said, the let keyword isn't a practical solution because of compatibility.\n\n\n\nvar funcs = {};\n\nfor (var i = 0; i < 3; i++) {\n  let index = i; //add this\n  funcs[i] = function() {\n    console.log(\"My value: \" + index); //change to the copy\n  };\n}\n\nfor (var j = 0; j < 3; j++) {\n  funcs[j]();\n}\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 77,
        "comentarios": [
            {
                "decripcion": "@nickf which browser? as I said, it has compatibility issues, with that I mean serious compatibility issues, like I don't think let is supported in IE.",
                "fecha": { "$date" : "2009-04-15T06:54:50Z" },
                "usuario": "eglasius",
                "usuario_id": 610
            },
            {
                "decripcion": "@nickf yes, check this reference: developer.mozilla.org/En/New_in_JavaScript_1.7 ... check the let definitions section, there is an onclick example inside a loop",
                "fecha": { "$date" : "2009-04-16T02:55:23Z" },
                "usuario": "eglasius",
                "usuario_id": 610
            },
            {
                "decripcion": "@nickf hmm, actually you have to explicitly specify the version: <script type=\"application/javascript;version=1.7\"/> ... I haven't actually used it anywhere because of the IE restriction, it just isn't practical :(",
                "fecha": { "$date" : "2009-04-16T02:58:54Z" },
                "usuario": "eglasius",
                "usuario_id": 610
            },
            {
                "decripcion": "you can see browser support for the different versions here es.wikipedia.org/wiki/Javascript",
                "fecha": { "$date" : "2009-04-16T03:06:37Z" },
                "usuario": "eglasius",
                "usuario_id": 610
            },
            {
                "decripcion": "See also What browsers currently support javascript's 'let' keyword?",
                "fecha": { "$date" : "2013-01-15T10:21:25Z" },
                "usuario": "rds",
                "usuario_id": 611
            }
        ],
        "usuario": "eglasius",
        "usuario_id": 610
    },
    {
        "_id": 354,
        "fecha": { "$date" : "2019-05-22T11:28:49Z" },
        "decripcion": "\nHere's another variation on the technique, similar to Bjorn's (apphacker), which lets you assign the variable value inside the function rather than passing it as a parameter, which might be clearer sometimes:\n\n\n\nvar funcs = [];\nfor (var i = 0; i < 3; i++) {\n    funcs[i] = (function() {\n        var index = i;\n        return function() {\n            console.log(\"My value: \" + index);\n        }\n    })();\n}\n Run code snippetHide resultsExpand snippet\n\n\n\nNote that whatever technique you use, the index variable becomes a sort of static variable, bound to the returned copy of the inner function. I.e., changes to its value are preserved between calls. It can be very handy.\n    ",
        "votes": 64,
        "comentarios": [
            {
                "decripcion": "Thanks and your solution works. But i would like to ask why this works, but swapping the var line and the return line wouldn't work? Thanks!",
                "fecha": { "$date" : "2013-12-03T02:56:23Z" },
                "usuario": "midnite",
                "usuario_id": 612
            },
            {
                "decripcion": "@midnite If you swapped var and return then the variable wouldn't be assigned before it returned the inner function.",
                "fecha": { "$date" : "2013-12-03T04:35:28Z" },
                "usuario": "Boann",
                "usuario_id": 613
            }
        ],
        "usuario": "Boann",
        "usuario_id": 613
    },
    {
        "_id": 355,
        "fecha": { "$date" : "2020-05-24T05:20:31Z" },
        "decripcion": "\nThis describes the common mistake with using closures in JavaScript.\n\nA function defines a new environment\n\nConsider:\n\nfunction makeCounter()\n{\n  var obj = {counter: 0};\n  return {\n    inc: function(){obj.counter ++;},\n    get: function(){return obj.counter;}\n  };\n}\n\ncounter1 = makeCounter();\ncounter2 = makeCounter();\n\ncounter1.inc();\n\nalert(counter1.get()); // returns 1\nalert(counter2.get()); // returns 0\n\n\nFor each time makeCounter is invoked, {counter: 0} results in a new object being created. Also, a new copy of obj \nis created as well to reference the new object. Thus, counter1 and counter2 are independent of each other.\n\nClosures in loops\n\nUsing a closure in a loop is tricky.\n\nConsider: \n\nvar counters = [];\n\nfunction makeCounters(num)\n{\n  for (var i = 0; i < num; i++)\n  {\n    var obj = {counter: 0};\n    counters[i] = {\n      inc: function(){obj.counter++;},\n      get: function(){return obj.counter;}\n    }; \n  }\n}\n\nmakeCounters(2);\n\ncounters[0].inc();\n\nalert(counters[0].get()); // returns 1\nalert(counters[1].get()); // returns 1\n\n\nNotice that counters[0] and counters[1] are not independent. In fact, they operate on the same obj!\n\nThis is because there is only one copy of obj shared across all iterations of the loop, perhaps for performance reasons.\nEven though {counter: 0} creates a new object in each iteration, the same copy of obj will just get updated with a\nreference to the newest object.\n\nSolution is to use another helper function:\n\nfunction makeHelper(obj)\n{\n  return {\n    inc: function(){obj.counter++;},\n    get: function(){return obj.counter;}\n  }; \n}\n\nfunction makeCounters(num)\n{\n  for (var i = 0; i < num; i++)\n  {\n    var obj = {counter: 0};\n    counters[i] = makeHelper(obj);\n  }\n}\n\n\nThis works because local variables in the function scope directly, as well as function argument variables, are allocated \nnew copies upon entry.\n    ",
        "votes": 60,
        "comentarios": [
            {
                "decripcion": "Small clarification: In the first example of Closures in loops, counters[0] and counters[1] are not independent not because of performance reasons. The reason is that   var obj = {counter: 0}; is evaluated before any code is executed as stated in: MDN var:  var declarations, wherever they occur, are processed before any code is executed.",
                "fecha": { "$date" : "2019-09-21T09:53:20Z" },
                "usuario": "Charidimos",
                "usuario_id": 614
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 356,
        "fecha": { "$date" : "2017-12-28T08:07:40Z" },
        "decripcion": "\nThe most simple solution would be,\n\nInstead of using:\n\nvar funcs = [];\nfor(var i =0; i<3; i++){\n    funcs[i] = function(){\n        alert(i);\n    }\n}\n\nfor(var j =0; j<3; j++){\n    funcs[j]();\n}\n\n\nwhich alerts \"2\", for 3 times. This is because anonymous functions created in for loop, shares same closure, and in that closure, the value of i is the same. Use this to prevent shared closure:\n\nvar funcs = [];\nfor(var new_i =0; new_i<3; new_i++){\n    (function(i){\n        funcs[i] = function(){\n            alert(i);\n        }\n    })(new_i);\n}\n\nfor(var j =0; j<3; j++){\n    funcs[j]();\n}\n\n\nThe idea behind this is, encapsulating the entire body of the for loop with an IIFE (Immediately-Invoked Function Expression) and passing new_i as a parameter and capturing it as i. Since the anonymous function is executed immediately, the i value is different for each function defined inside the anonymous function.\n\nThis solution seems to fit any such problem since it will require minimal changes to the original code suffering from this issue. In fact, this is by design, it should not be an issue at all!\n    ",
        "votes": 52,
        "comentarios": [
            {
                "decripcion": "Read something similar in a book once. I prefer this, too, since you don't have to touch your existing code (as much) and it becomes obvious why you did it, once you've learned the self-calling function pattern: to trap that variable in the newly created scope.",
                "fecha": { "$date" : "2013-07-26T11:18:39Z" },
                "usuario": "DanMan",
                "usuario_id": 615
            },
            {
                "decripcion": "@DanMan Thanks. Self calling anonymous functions are very good way to deal javascript's lack of block level variable scope.",
                "fecha": { "$date" : "2013-07-26T12:20:44Z" },
                "usuario": "Kemal Da\u011f",
                "usuario_id": 616
            },
            {
                "decripcion": "Self-calling, or self-invoking is not the appropriate term for this technique, IIFE (Immediately-Invoked Function Expression) is more accurately. Ref: benalman.com/news/2010/11/\u2026",
                "fecha": { "$date" : "2015-10-27T04:29:35Z" },
                "usuario": "jherax",
                "usuario_id": 617
            }
        ],
        "usuario": "Kemal Da\u011f",
        "usuario_id": 616
    },
    {
        "_id": 357,
        "fecha": { "$date" : "2019-06-10T11:56:55Z" },
        "decripcion": "\nHere's a simple solution that uses forEach (works back to IE9):\n\n\n\nvar funcs = [];\n[0,1,2].forEach(function(i) {          // let's create 3 functions\n    funcs[i] = function() {            // and store them in funcs\n        console.log(\"My value: \" + i); // each should log its value.\n    };\n})\nfor (var j = 0; j < 3; j++) {\n    funcs[j]();                        // and now let's run each one to see\n}\n Run code snippetHide resultsExpand snippet\n\n\n\nPrints:\n\n\nMy value: 0\nMy value: 1\nMy value: 2\n\n\n    ",
        "votes": 34,
        "comentarios": [],
        "usuario": "Daryl",
        "usuario_id": 618
    },
    {
        "_id": 358,
        "fecha": { "$date" : "2013-09-19T14:20:24Z" },
        "decripcion": "\ntry this shorter one\n\n\nno array\nno extra for loop\n\n\n\n\nfor (var i = 0; i < 3; i++) {\n    createfunc(i)();\n}\n\nfunction createfunc(i) {\n    return function(){console.log(\"My value: \" + i);};\n}\n\n\nhttp://jsfiddle.net/7P6EN/\n    ",
        "votes": 33,
        "comentarios": [
            {
                "decripcion": "Your solution seems to output correct but it unneccessarily uses functions, why not just console.log the output? The original question is about creation of anonymous functions that has same closure. The problem was, since they have a single closure, the value of i is same for each of them. I hope you got it.",
                "fecha": { "$date" : "2015-06-28T08:51:57Z" },
                "usuario": "Kemal Da\u011f",
                "usuario_id": 616
            }
        ],
        "usuario": "yilmazburk",
        "usuario_id": 619
    },
    {
        "_id": 359,
        "fecha": { "$date" : "2014-03-05T23:03:24Z" },
        "decripcion": "\nThe main issue with the code shown by the OP is that i is never read until the second loop. To demonstrate, imagine seeing an error inside of the code\n\nfuncs[i] = function() {            // and store them in funcs\n    throw new Error(\"test\");\n    console.log(\"My value: \" + i); // each should log its value.\n};\n\n\nThe error actually does not occur until funcs[someIndex] is executed (). Using this same logic, it should be apparent that the value of i is also not collected until this point either. Once the original loop finishes, i++ brings i to the value of 3 which results in the condition i < 3 failing and the loop ending. At this point, i is 3 and so when funcs[someIndex]() is used, and i is evaluated, it is 3 - every time.\n\nTo get past this, you must evaluate i as it is encountered. Note that this has already happened in the form of funcs[i] (where there are 3 unique indexes). There are several ways to capture this value. One is to pass it in as a parameter to a function which is shown in several ways already here. \n\nAnother option is to construct a function object which will be able to close over the variable. That can be accomplished thusly\n\njsFiddle Demo\n\nfuncs[i] = new function() {   \n    var closedVariable = i;\n    return function(){\n        console.log(\"My value: \" + closedVariable); \n    };\n};\n\n    ",
        "votes": 30,
        "comentarios": [],
        "usuario": "Travis J",
        "usuario_id": 620
    },
    {
        "_id": 360,
        "fecha": { "$date" : "2019-03-21T16:35:08Z" },
        "decripcion": "\nJavaScript functions \"close over\" the scope they have access to upon declaration, and retain access to that scope even as variables in that scope change.\n\n\n\nvar funcs = []\n\nfor (var i = 0; i < 3; i += 1) {\n  funcs[i] = function () {\n    console.log(i)\n  }\n}\n\nfor (var k = 0; k < 3; k += 1) {\n  funcs[k]()\n}\n Run code snippetHide resultsExpand snippet\n\n\n\nEach function in the array above closes over the global scope (global, simply because that happens to be the scope they're declared in).\n\nLater those functions are invoked logging the most current value of i in the global scope. That's the magic, and frustration, of closure.\n\n\"JavaScript Functions close over the scope they are declared in, and retain access to that scope even as variable values inside of that scope change.\"\n\nUsing let instead of var solves this by creating a new scope each time the for loop runs, creating a separated scope for each function to close over. Various other techniques do the same thing with extra functions.\n\n\n\nvar funcs = []\n\nfor (let i = 0; i < 3; i += 1) {\n  funcs[i] = function () {\n    console.log(i)\n  }\n}\n\nfor (var k = 0; k < 3; k += 1) {\n  funcs[k]()\n}\n Run code snippetHide resultsExpand snippet\n\n\n\n(let makes variables block scoped. Blocks are denoted by curly braces, but in the case of the for loop the initialization variable, i in our case, is considered to be declared in the braces.)\n    ",
        "votes": 24,
        "comentarios": [
            {
                "decripcion": "I struggled to understand this concept until I read this answer. It touches on a really important point \u2013 the value of i is being set to the global scope. When the for loop finishes running, the global value of i is now 3. Therefore, whenever that function is invoked in the array (using, say funcs[j]), the i in that function is referencing the global i variable (which is 3).",
                "fecha": { "$date" : "2017-04-05T02:50:29Z" },
                "usuario": "Modermo",
                "usuario_id": 621
            }
        ],
        "usuario": "Costa Michailidis",
        "usuario_id": 622
    },
    {
        "_id": 361,
        "fecha": { "$date" : "2017-05-23T12:02:57Z" },
        "decripcion": "\nAfter reading through various solutions, I'd like to add that the reason those solutions work is to rely on the concept of scope chain. It's the way JavaScript resolve a variable during execution.  \n\n\nEach function definition forms a scope consisting of all the local \nvariables declared by var and its arguments.   \nIf we have inner function defined inside another (outer) function, this \nforms a chain, and will be used during execution   \nWhen a function gets executed, the runtime evaluates variables by searching the scope chain. If a variable can be found in a certain point of the chain it will stop searching and use it, otherwise it continues until the global scope reached which belongs to window.\n\n\nIn the initial code:\n\nfuncs = {};\nfor (var i = 0; i < 3; i++) {         \n  funcs[i] = function inner() {        // function inner's scope contains nothing\n    console.log(\"My value: \" + i);    \n  };\n}\nconsole.log(window.i)                  // test value 'i', print 3\n\n\nWhen funcs gets executed, the scope chain will be function inner -> global. Since the variable i cannot be found in function inner (neither declared using var nor passed as arguments), it continues to search, until the value of i is eventually found in the global scope which is window.i.\n\nBy wrapping it in an outer function either explicitly define a helper function like harto did or use an anonymous function like Bjorn did:\n\nfuncs = {};\nfunction outer(i) {              // function outer's scope contains 'i'\n  return function inner() {      // function inner, closure created\n   console.log(\"My value: \" + i);\n  };\n}\nfor (var i = 0; i < 3; i++) {\n  funcs[i] = outer(i);\n}\nconsole.log(window.i)          // print 3 still\n\n\nWhen funcs gets executed, now the scope chain will be function inner -> function outer. This time i can be found in the outer function's scope which is executed 3 times in the for loop, each time has value i bound correctly. It won't use the value of window.i when inner executed.\n\nMore detail can be found here\nIt includes the common mistake in creating closure in the loop as what we have here, as well as why we need closure and the performance consideration.\n    ",
        "votes": 15,
        "comentarios": [
            {
                "decripcion": "We rarely write this code sample in real, but I think it serves a good example to understand the fundamental. Once we have the scope in mind and how they chained together, it's more clear to see why other 'modern' ways like Array.prototype.forEach(function callback(el) {}) naturally works: The callback that's passed in naturally forms the wrapping scope with el correctly bound in each iteration of forEach. So every inner function defined in callback will be able to use the right el value",
                "fecha": { "$date" : "2017-04-26T14:19:07Z" },
                "usuario": "wpding",
                "usuario_id": 623
            }
        ],
        "usuario": "wpding",
        "usuario_id": 623
    },
    {
        "_id": 362,
        "fecha": { "$date" : "2017-12-26T20:27:59Z" },
        "decripcion": "\nWith new features of ES6 block level scoping is managed:\n\nvar funcs = [];\nfor (let i = 0; i < 3; i++) {          // let's create 3 functions\n    funcs[i] = function() {            // and store them in funcs\n        console.log(\"My value: \" + i); // each should log its value.\n    };\n}\nfor (let j = 0; j < 3; j++) {\n    funcs[j]();                        // and now let's run each one to see\n}\n\n\nThe code in OP's question is replaced with let instead of var.\n    ",
        "votes": 13,
        "comentarios": [
            {
                "decripcion": "const provides the same result, and should be used when the value of a variable will not change. However, the use of const inside the initializer of the for loop is implemented incorrectly in Firefox and has yet to be fixed. Instead of being declared inside the block, it is declared outside the block, which results in a redeclaration to the variable, which in turn results in an error. The use of let inside the initializer is implemented correctly in Firefox, so no need to worry there.",
                "fecha": { "$date" : "2017-12-27T03:05:48Z" },
                "usuario": "NA",
                "usuario_id": 53
            }
        ],
        "usuario": "Prithvi Uppalapati",
        "usuario_id": 624
    },
    {
        "_id": 363,
        "fecha": { "$date" : "2017-12-26T19:51:50Z" },
        "decripcion": "\nI'm surprised no one yet has suggested using the forEach function to better avoid (re)using local variables. In fact, I'm not using for(var i ...) at all anymore for this reason.\n\n[0,2,3].forEach(function(i){ console.log('My value:', i); });\n// My value: 0\n// My value: 2\n// My value: 3\n\n\n// edited to use forEach instead of map.\n    ",
        "votes": 10,
        "comentarios": [
            {
                "decripcion": ".forEach() is a much better option if you're not actually mapping anything, and Daryl suggested that 7 months before you posted, so there's nothing to be surprised about.",
                "fecha": { "$date" : "2015-03-31T19:59:43Z" },
                "usuario": "JLRishe",
                "usuario_id": 601
            },
            {
                "decripcion": "This question is not about loop over an array",
                "fecha": { "$date" : "2015-10-27T04:14:23Z" },
                "usuario": "jherax",
                "usuario_id": 617
            },
            {
                "decripcion": "Well, he wants to create an array of functions, this example shows how to do that without involving a global variable.",
                "fecha": { "$date" : "2015-11-11T21:25:03Z" },
                "usuario": "Christian Landgren",
                "usuario_id": 589
            }
        ],
        "usuario": "Christian Landgren",
        "usuario_id": 589
    },
    {
        "_id": 364,
        "fecha": { "$date" : "2018-01-13T13:17:57Z" },
        "decripcion": "\nThis question really shows the history of JavaScript! Now we can avoid block scoping with arrow functions and handle loops directly from DOM nodes using Object methods.\n\n\n\nconst funcs = [1, 2, 3].map(i => () => console.log(i));\nfuncs.map(fn => fn())\n Run code snippetHide resultsExpand snippet\n\n\n\n\n\nconst buttons = document.getElementsByTagName(\"button\");\nObject\n  .keys(buttons)\n  .map(i => buttons[i].addEventListener('click', () => console.log(i)));\n<button>0</button><br>\n<button>1</button><br>\n<button>2</button>\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "sidhuko",
        "usuario_id": 625
    },
    {
        "_id": 365,
        "fecha": { "$date" : "2017-12-26T20:27:18Z" },
        "decripcion": "\nThe reason your original example did not work is that all the closures you created in the loop referenced the same frame. In effect, having 3 methods on one object with only a single i variable. They all printed out the same value.\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "jottos",
        "usuario_id": 626
    },
    {
        "_id": 366,
        "fecha": { "$date" : "2017-12-26T22:46:45Z" },
        "decripcion": "\nFirst of all, understand what's wrong with this code:\n\nvar funcs = [];\nfor (var i = 0; i < 3; i++) {          // let's create 3 functions\n    funcs[i] = function() {            // and store them in funcs\n        console.log(\"My value: \" + i); // each should log its value.\n    };\n}\nfor (var j = 0; j < 3; j++) {\n    funcs[j]();                        // and now let's run each one to see\n}\n\n\nHere when the funcs[] array is being initialized, i is being incremented, the funcs array is initialized and the size of func array becomes 3,  so i = 3,. \nNow when the funcs[j]() is called, it is again using the variable i, which has already been incremented to 3.\n\nNow to solve this, we have many options. Below are two of them:\n\n\nWe can initialize i with let or initialize a new variable index with let and make it equal to i. So when the call is being made, index will be used and its scope will end after initialization. And for calling, index will be initialized again:\n\nvar funcs = [];\nfor (var i = 0; i < 3; i++) {          \n    let index = i;\n    funcs[i] = function() {            \n        console.log(\"My value: \" + index); \n    };\n}\nfor (var j = 0; j < 3; j++) {\n    funcs[j]();                        \n}\n\nOther Option can be to introduce a tempFunc which returns the actual function:\n\nvar funcs = [];\nfunction tempFunc(i){\n    return function(){\n        console.log(\"My value: \" + i);\n    };\n}\nfor (var i = 0; i < 3; i++) {  \n    funcs[i] = tempFunc(i);                                     \n}\nfor (var j = 0; j < 3; j++) {\n    funcs[j]();                        \n}\n\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Ali Kahoot",
        "usuario_id": 627
    },
    {
        "_id": 367,
        "fecha": { "$date" : "2017-12-27T00:06:45Z" },
        "decripcion": "\nUse closure structure, this would reduce your extra for loop. You can do it in a single for loop:\n\nvar funcs = [];\nfor (var i = 0; i < 3; i++) {     \n  (funcs[i] = function() {         \n    console.log(\"My value: \" + i); \n  })(i);\n}\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Vikash_Singh",
        "usuario_id": 628
    },
    {
        "_id": 368,
        "fecha": { "$date" : "2018-01-16T14:29:57Z" },
        "decripcion": "\n\n  We will check , what actually happens when you declare var and let\n  one by one.\n\n\nCase1 : using var\n\n<script>\n   var funcs = [];\n   for (var i = 0; i < 3; i++) {\n     funcs[i] = function () {\n        debugger;\n        console.log(\"My value: \" + i);\n     };\n   }\n   console.log(funcs);\n</script>\n\n\nNow open your chrome console window by pressing F12 and refresh the page.\nExpend every 3 functions inside the array.You will see an property called [[Scopes]].Expand that one. You will see one \narray object called \"Global\",expand that one. You will find a property 'i' declared into the object which having value 3.\n\n\n\n\n\nConclusion: \n\n\nWhen you declare a variable using 'var' outside a function ,it becomes global variable(you can check by typing i or \nwindow.i in console window.It will return 3).\nThe annominous function you declared will not call and check the value inside the function unless you invoke the \nfunctions.\nWhen you invoke the function , console.log(\"My value: \" + i) takes the value from its Global object and display the \nresult.\n\n\nCASE2 : using let\n\nNow replace the 'var' with 'let'\n\n<script>\n    var funcs = [];\n    for (let i = 0; i < 3; i++) {\n        funcs[i] = function () {\n           debugger;\n           console.log(\"My value: \" + i);\n        };\n    }\n    console.log(funcs);\n</script>\n\n\nDo the same thing, Go to the scopes . Now you will see two objects \"Block\" and \"Global\". Now expand Block object , you \nwill see 'i' is defined there , and the strange thing is that , for every functions , the value if i is different (0 , 1, 2). \n\n\n\nConclusion:\n\nWhen you declare variable using 'let' even outside the function but inside the loop , this variable will not be a Global \nvariable , it will become a Block level variable which is only available for the same function only.That is the reason , we \nare getting value of i different for each function when we invoke the functions.\n\nFor more detail about how closer works , please go through the awesome video tutorial https://youtu.be/71AtaJpJHw0\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 369,
        "fecha": { "$date" : "2015-10-27T10:15:11Z" },
        "decripcion": "\nYou could use a declarative module for lists of data such as query-js(*). In these situations I personally find a declarative approach less surprising\n\nvar funcs = Query.range(0,3).each(function(i){\n     return  function() {\n        console.log(\"My value: \" + i);\n    };\n});\n\n\nYou could then use your second loop and get the expected result or you could do \n\nfuncs.iterate(function(f){ f(); });\n\n\n(*) I'm the author of query-js and therefor biased towards using it, so don't take my words as a recommendation for said library only for the declarative approach :)\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "I would love an explanation of the down vote. The code solves the problem at hand. It would be valuable to know how to potentially improve the code",
                "fecha": { "$date" : "2015-06-18T18:21:18Z" },
                "usuario": "Rune FS",
                "usuario_id": 629
            },
            {
                "decripcion": "What is Query.range(0,3)? This is not part of the tags for this question. Besides, if you use a third party library, you can provide the link of the documentation.",
                "fecha": { "$date" : "2015-10-27T04:07:40Z" },
                "usuario": "jherax",
                "usuario_id": 617
            },
            {
                "decripcion": "@jherax those are or course obvious improvements. Thanks for the comment. I could have sworn that there was already a link. With out that the post was pretty pointless I guess :). My initial idea of keeping it out was because I wasn't trying to push the use of my own library but more the declarative idea. However in hinsight I fully agree that the link should be there",
                "fecha": { "$date" : "2015-10-27T10:17:32Z" },
                "usuario": "Rune FS",
                "usuario_id": 629
            }
        ],
        "usuario": "Rune FS",
        "usuario_id": 629
    },
    {
        "_id": 370,
        "fecha": { "$date" : "2015-12-17T15:14:47Z" },
        "decripcion": "\nI prefer to use forEach function, which has its own closure with creating a pseudo range:\n\nvar funcs = [];\n\nnew Array(3).fill(0).forEach(function (_, i) { // creating a range\n    funcs[i] = function() {            \n        // now i is safely incapsulated \n        console.log(\"My value: \" + i);\n    };\n});\n\nfor (var j = 0; j < 3; j++) {\n    funcs[j](); // 0, 1, 2\n}\n\n\nThat looks uglier than ranges in other languages, but IMHO less monstrous than other solutions.\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "Prefer it to what? This seems to be a comment in reply to some other answer. It doesn't address the actual question at all (since you aren't assigning a function, to be called later, anywhere).",
                "fecha": { "$date" : "2015-12-17T14:24:19Z" },
                "usuario": "Quentin",
                "usuario_id": 630
            },
            {
                "decripcion": "It's related exactly to the mentioned issue: how to iterate safely without closure problems",
                "fecha": { "$date" : "2015-12-17T14:31:00Z" },
                "usuario": "Rax Wunter",
                "usuario_id": 631
            },
            {
                "decripcion": "Now it doesn't seem significantly different from the accepted answer.",
                "fecha": { "$date" : "2015-12-17T14:31:10Z" },
                "usuario": "Quentin",
                "usuario_id": 630
            },
            {
                "decripcion": "No. In the accepted answer it is suggested to use \"some array\", but we deal with a range in the answer, it's absolutely different things, which unfortunately don't have a good solution in js, so my answer is trying to solve the issue in a good and practice way",
                "fecha": { "$date" : "2015-12-17T14:34:33Z" },
                "usuario": "Rax Wunter",
                "usuario_id": 631
            },
            {
                "decripcion": "@Quentin I would recommend to investigate solution before minusing",
                "fecha": { "$date" : "2015-12-17T14:45:00Z" },
                "usuario": "Rax Wunter",
                "usuario_id": 631
            }
        ],
        "usuario": "Rax Wunter",
        "usuario_id": 631
    },
    {
        "_id": 371,
        "fecha": { "$date" : "2019-02-18T10:28:23Z" },
        "decripcion": "\nAnd yet another solution: instead of creating another loop, just bind the this to the return function.\n\n\n\nvar funcs = [];\n\nfunction createFunc(i) {\n  return function() {\n    console.log('My value: ' + i); //log value of i.\n  }.call(this);\n}\n\nfor (var i = 1; i <= 5; i++) {  //5 functions\n  funcs[i] = createFunc(i);     // call createFunc() i=5 times\n}\n Run code snippetHide resultsExpand snippet\n\n\n\nBy binding this, solves the problem as well.\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "pixel 67",
        "usuario_id": 608
    },
    {
        "_id": 372,
        "fecha": { "$date" : "2019-06-10T11:42:03Z" },
        "decripcion": "\nTill ES5, This problem can only be solved using closure.\n\nBut now in ES6, we have block level scope variables. Changing var to let in first for loop will solve the problem.\n\n\n\nvar funcs = [];\nfor (let i = 0; i < 3; i++) {      // let's create 3 functions\n  funcs[i] = function() {          // and store them in funcs\n    console.log(\"My value: \" + i); // each should log its value.\n  };\n}\nfor (var j = 0; j < 3; j++) {\n  funcs[j]();                      // and now let's run each one to see\n}\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Shivang Gupta",
        "usuario_id": 632
    },
    {
        "_id": 373,
        "fecha": { "$date" : "2020-10-06T02:00:53Z" },
        "decripcion": "\nIf you're having this sort of problem with a while loop, rather than a for loop, for example:\n\n\nvar i = 0;\nwhile (i < 5) {\n  setTimeout(function() {\n    console.log(i);\n  }, i * 1000);\n  i++;\n}\n Run code snippetHide resultsExpand snippet\n\n\nThe technique to close over the current value is a bit different. Declare a block-scoped variable with const inside the while block, and assign the current i to it. Then, wherever the variable is being used asynchronously, replace i with the new block-scoped variable:\n\n\nvar i = 0;\nwhile (i < 5) {\n  const thisIterationI = i;\n  setTimeout(function() {\n    console.log(thisIterationI);\n  }, i * 1000);\n  i++;\n}\n Run code snippetHide resultsExpand snippet\n\n\nFor older browsers that don't support block-scoped variables, you can use an IIFE called with i:\n\n\nvar i = 0;\nwhile (i < 5) {\n  (function(innerI) {\n    setTimeout(function() {\n      console.log(innerI);\n    }, innerI * 1000);\n  })(i);\n  i++;\n}\n Run code snippetHide resultsExpand snippet\n\n\nIf the asynchronous action to be invoked happens to be setTimeout like the above, you can also call setTimeout with a third parameter to indicate the argument to call the passed function with:\n\n\nvar i = 0;\nwhile (i < 5) {\n  setTimeout(\n    (thisIterationI) => { // Callback\n      console.log(thisIterationI);\n    },\n    i * 1000, // Delay\n    i // Gets passed to the callback; becomes thisIterationI\n  );\n  i++;\n}\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "It might be worth noting that the variable can also be declared using let instead of const. Both allow for block-scoped variables.",
                "fecha": { "$date" : "2019-09-22T20:06:04Z" },
                "usuario": "3limin4t0r",
                "usuario_id": 633
            },
            {
                "decripcion": "The IIFE  is what I was looking for",
                "fecha": { "$date" : "2021-02-12T10:12:04Z" },
                "usuario": "Noman_1",
                "usuario_id": 634
            }
        ],
        "usuario": "CertainPerformance",
        "usuario_id": 635
    },
    {
        "_id": 374,
        "fecha": { "$date" : "2017-12-26T21:21:57Z" },
        "decripcion": "\nMany solutions seem correct but they don't mention it's called Currying which is a functional programming design pattern for situations like here. 3-10 times faster than bind depending on the browser.\n\nvar funcs = [];\nfor (var i = 0; i < 3; i++) {      // let's create 3 functions\n  funcs[i] = curryShowValue(i);\n}\nfor (var j = 0; j < 3; j++) {\n  funcs[j]();                      // and now let's run each one to see\n}\n\nfunction curryShowValue(i) {\n  return function showValue() {\n    console.log(\"My value: \" + i);\n  }\n}\n\n\nSee the performance gain in different browsers.\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "@TinyGiant The example with function being returned is still currying optimised for performance. I wouldn't jump on arrow functions bandwagon like all the JavaScript bloggers. They look cool and clean but promote writing functions inline instead of using predefined functions. This can be a non-obvious trap in hot places. Another problem is that they are not just syntactic sugar because they are executing unnecessary bindings thus creating wrapping closures.",
                "fecha": { "$date" : "2017-12-27T01:52:28Z" },
                "usuario": "Pawel",
                "usuario_id": 636
            },
            {
                "decripcion": "Warning to future readers: This answer inaccurately applies the term Currying. \"Currying is when you break down a function that takes multiple arguments into a series of functions that take part of the arguments.\". This code does nothing of the sort. All you've done here is take the code from the accepted answer, move some things around, change the style and naming a bit, then call it currying, which it categorically is not.",
                "fecha": { "$date" : "2017-12-27T02:36:38Z" },
                "usuario": "NA",
                "usuario_id": 53
            }
        ],
        "usuario": "Pawel",
        "usuario_id": 636
    },
    {
        "_id": 375,
        "fecha": { "$date" : "2017-12-26T22:53:29Z" },
        "decripcion": "\nYour code doesn't work, because what it does is:\n\nCreate variable `funcs` and assign it an empty array;  \nLoop from 0 up until it is less than 3 and assign it to variable `i`;\n    Push to variable `funcs` next function:  \n        // Only push (save), but don't execute\n        **Write to console current value of variable `i`;**\n\n// First loop has ended, i = 3;\n\nLoop from 0 up until it is less than 3 and assign it to variable `j`;\n    Call `j`-th function from variable `funcs`:  \n        **Write to console current value of variable `i`;**  \n        // Ask yourself NOW! What is the value of i?\n\n\nNow the question is, what is the value of variable i when the function is called? Because the first loop is created with the condition of i < 3, it stops immediately when the condition is false, so it is i = 3. \n\nYou need to understand that, in time when your functions are created, none of their code is executed, it is only saved for later. And so when they are called later, the interpreter executes them and asks: \"What is the current value of i?\"\n\nSo, your goal is to first save the value of i to function and only after that save the function to funcs. This could be done for example this way:\n\nvar funcs = [];\nfor (var i = 0; i < 3; i++) {          // let's create 3 functions\n    funcs[i] = function(x) {            // and store them in funcs\n        console.log(\"My value: \" + x); // each should log its value.\n    }.bind(null, i);\n}\nfor (var j = 0; j < 3; j++) {\n    funcs[j]();                        // and now let's run each one to see\n}\n\n\nThis way, each function will have it's own variable x and we set this x to the value of i in each iteration.\n\nThis is only one of the multiple ways to solve this problem.\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Buksy",
        "usuario_id": 637
    },
    {
        "_id": 376,
        "fecha": { "$date" : "2020-09-10T11:58:38Z" },
        "decripcion": "\nWhat you should know about this\nthis (aka \"the context\") is a special keyword inside each function and its value only depends on how the function was called, not how/when/where it was defined. It is not affected by lexical scopes like other variables (except for arrow functions, see below). Here are some examples:\nfunction foo() {\n    console.log(this);\n}\n\n// normal function call\nfoo(); // `this` will refer to `window`\n\n// as object method\nvar obj = {bar: foo};\nobj.bar(); // `this` will refer to `obj`\n\n// as constructor function\nnew foo(); // `this` will refer to an object that inherits from `foo.prototype`\n\nTo learn more about this, have a look at the MDN documentation.\n\nHow to refer to the correct this\nUse arrow functions\nECMAScript 6 introduced arrow functions, which can be thought of as lambda functions. They don't have their own this binding. Instead, this is looked up in scope just like a normal variable. That means you don't have to call .bind. That's not the only special behavior they have, please refer to the MDN documentation for more information.\nfunction MyConstructor(data, transport) {\n    this.data = data;\n    transport.on('data', () => alert(this.data));\n}\n\nDon't use this\nYou actually don't want to access this in particular, but the object it refers to. That's why an easy solution is to simply create a new variable that also refers to that object. The variable can have any name, but common ones are self and that.\nfunction MyConstructor(data, transport) {\n    this.data = data;\n    var self = this;\n    transport.on('data', function() {\n        alert(self.data);\n    });\n}\n\nSince self is a normal variable, it obeys lexical scope rules and is accessible inside the callback. This also has the advantage that you can access the this value of the callback itself.\nExplicitly set this of the callback - part 1\nIt might look like you have no control over the value of this because its value is set automatically, but that is actually not the case.\nEvery function has the method .bind [docs], which returns a new function with this bound to a value. The function has exactly the same behavior as the one you called .bind on, only that this was set by you. No matter how or when that function is called, this will always refer to the passed value.\nfunction MyConstructor(data, transport) {\n    this.data = data;\n    var boundFunction = (function() { // parenthesis are not necessary\n        alert(this.data);             // but might improve readability\n    }).bind(this); // <- here we are calling `.bind()` \n    transport.on('data', boundFunction);\n}\n\nIn this case, we are binding the callback's this to the value of MyConstructor's this.\nNote: When a binding context for jQuery, use jQuery.proxy [docs] instead. The reason to do this is so that you don't need to store the reference to the function when unbinding an event callback. jQuery handles that internally.\nSet this of the callback - part 2\nSome functions/methods which accept callbacks also accept a value to which the callback's this should refer to. This is basically the same as binding it yourself, but the function/method does it for you. Array#map [docs] is such a method. Its signature is:\narray.map(callback[, thisArg])\n\nThe first argument is the callback and the second argument is the value this should refer to. Here is a contrived example:\nvar arr = [1, 2, 3];\nvar obj = {multiplier: 42};\n\nvar new_arr = arr.map(function(v) {\n    return v * this.multiplier;\n}, obj); // <- here we are passing `obj` as second argument\n\nNote: Whether or not you can pass a value for this is usually mentioned in the documentation of that function/method. For example, jQuery's $.ajax method [docs] describes an option called context:\n\nThis object will be made the context of all Ajax-related callbacks.\n\n\nCommon problem: Using object methods as callbacks/event handlers\nAnother common manifestation of this problem is when an object method is used as callback/event handler. Functions are first-class citizens in JavaScript and the term \"method\" is just a colloquial term for a function that is a value of an object property. But that function doesn't have a specific link to its \"containing\" object.\nConsider the following example:\nfunction Foo() {\n    this.data = 42,\n    document.body.onclick = this.method;\n}\n\nFoo.prototype.method = function() {\n    console.log(this.data);\n};\n\nThe function this.method is assigned as click event handler, but if the document.body is clicked, the value logged will be undefined, because inside the event handler, this refers to the document.body, not the instance of Foo.\nAs already mentioned at the beginning, what this refers to depends on how the function is called, not how it is defined.\nIf the code was like the following, it might be more obvious that the function doesn't have an implicit reference to the object:\nfunction method() {\n    console.log(this.data);\n}\n\n\nfunction Foo() {\n    this.data = 42,\n    document.body.onclick = this.method;\n}\n\nFoo.prototype.method = method;\n\nThe solution is the same as mentioned above: If available, use .bind to explicitly bind this to a specific value\ndocument.body.onclick = this.method.bind(this);\n\nor explicitly call the function as a \"method\" of the object, by using an anonymous function as callback / event handler and assign the object (this) to another variable:\nvar self = this;\ndocument.body.onclick = function() {\n    self.method();\n};\n\nor use an arrow function:\ndocument.body.onclick = () => this.method();\n\n    ",
        "votes": 2053,
        "comentarios": [
            {
                "decripcion": "Felix, I've read to this answer before but never replied.  I grow concerned that people use self and that to refer to this.  I feel this way because this is an overloaded variable used in different contexts; whereas self usually corresponds to the local instance and that usually refers to another object.  I know you did not set this rule, as I've seen it appear in a number of other places, but it is also why I've started to use _this, but am not sure how others feel, except for the non-uniform practice that has resulted.",
                "fecha": { "$date" : "2014-09-12T15:39:03Z" },
                "usuario": "vol7ron",
                "usuario_id": 642
            },
            {
                "decripcion": "@FelixKling would it be safe to assume that using this inside prototype functions will always have the expected behaviour regardless how they are (typically) called? When using callbacks inside prototype functions, is there an alternative to bind(), self or that?",
                "fecha": { "$date" : "2015-12-28T15:57:28Z" },
                "usuario": "andig",
                "usuario_id": 643
            },
            {
                "decripcion": "@FelixKling It can be useful at times to rely on Function.prototype.call () and Function.prototype.apply ().  Particularly with apply () I've gotten a lot of mileage.  I am less inclined to use bind () perhaps only out of habit though I am aware ( but not certain ) that there may be slight overhead advantages to using bind over the other options.",
                "fecha": { "$date" : "2016-11-15T06:02:19Z" },
                "usuario": "Nolo",
                "usuario_id": 644
            },
            {
                "decripcion": "Great answer but consider adding an additional optional solution which is just to not use classes, new, or this at all.",
                "fecha": { "$date" : "2017-02-12T12:53:47Z" },
                "usuario": "Aluan Haddad",
                "usuario_id": 522
            },
            {
                "decripcion": "re arrow functions \"Instead, this is looked up in scope just like a normal variable.\" totally made this click for me, thank you! () => this.clicked() ;)",
                "fecha": { "$date" : "2018-05-25T20:36:22Z" },
                "usuario": "alphanumeric0101",
                "usuario_id": 645
            }
        ],
        "usuario": "Felix Kling",
        "usuario_id": 234
    },
    {
        "_id": 377,
        "fecha": { "$date" : "2021-07-25T20:38:05Z" },
        "decripcion": "\nHere are several ways to access the parent context inside a child context -\n\nYou can use the bind() function.\nStore a reference to context/this inside another variable (see the below example).\nUse ES6 Arrow functions.\nAlter the code, function design, and architecture - for this you should have command over design patterns in JavaScript.\n\n1. Use the bind() function\n\nfunction MyConstructor(data, transport) {\n    this.data = data;\n    transport.on('data', ( function () {\n        alert(this.data);\n    }).bind(this) );\n}\n// Mock transport object\nvar transport = {\n    on: function(event, callback) {\n        setTimeout(callback, 1000);\n    }\n};\n// called as\nvar obj = new MyConstructor('foo', transport);\n\n\nIf you are using Underscore.js - http://underscorejs.org/#bind\ntransport.on('data', _.bind(function () {\n    alert(this.data);\n}, this));\n\n2. Store a reference to context/this inside another variable\n\nfunction MyConstructor(data, transport) {\n  var self = this;\n  this.data = data;\n  transport.on('data', function() {\n    alert(self.data);\n  });\n}\n\n\n3. Arrow function\n\nfunction MyConstructor(data, transport) {\n  this.data = data;\n  transport.on('data', () => {\n    alert(this.data);\n  });\n}\n\n\n    ",
        "votes": 244,
        "comentarios": [
            {
                "decripcion": "The bind() option is amazing its just passing the pointer of this Object to be the this on the other object (: Thanks !",
                "fecha": { "$date" : "2019-03-13T11:31:10Z" },
                "usuario": "Stav Bodik",
                "usuario_id": 646
            },
            {
                "decripcion": "\"\u2026parent context inside child context\" is a misleading phrase as this is not part of a parent/child relationship. It often refers to the object a method was called on, but can be any object, or any value in strict mode. \"Context\" refers to an execution context (of which this is one parameter of many) which can't be referenced because ECMA-262 forbids it.",
                "fecha": { "$date" : "2021-03-29T09:23:15Z" },
                "usuario": "RobG",
                "usuario_id": 647
            }
        ],
        "usuario": "Mohan Dere",
        "usuario_id": 535
    },
    {
        "_id": 378,
        "fecha": { "$date" : "2021-07-25T20:22:11Z" },
        "decripcion": "\nIt's all in the \"magic\" syntax of calling a method:\nobject.property();\n\nWhen you get the property from the object and call it in one go, the object will be the context for the method. If you call the same method, but in separate steps, the context is the global scope (window) instead:\nvar f = object.property;\nf();\n\nWhen you get the reference of a method, it's no longer attached to the object. It's just a reference to a plain function. The same happens when you get the reference to use as a callback:\nthis.saveNextLevelData(this.setAll);\n\nThat's where you would bind the context to the function:\nthis.saveNextLevelData(this.setAll.bind(this));\n\nIf you are using jQuery you should use the $.proxy method instead, as bind is not supported in all browsers:\nthis.saveNextLevelData($.proxy(this.setAll, this));\n\n    ",
        "votes": 69,
        "comentarios": [],
        "usuario": "Guffa",
        "usuario_id": 648
    },
    {
        "_id": 379,
        "fecha": { "$date" : "2021-08-08T10:30:44Z" },
        "decripcion": "\nYou should know about \"this\" Keyword.\nAs per my view you can implement \"this\" in three ways\n(Self/Arrow function/Bind Method)\nA function's this keyword behaves a little differently in JavaScript compared to other languages.\nIt also has some differences between strict mode and non-strict mode.\nIn most cases, the value of this is determined by how a function is called.\nIt can't be set by assignment during execution, and it may be different each time the function is called.\nES5 introduced the bind() method to set the value of a function's this regardless of how it's called,\nAnd ES2015 introduced arrow functions that don't provide their own this binding (it retains this value of the enclosing lexical context).\nMethod1: Self - Self is being used to maintain a reference to the original this even as the context is changing. It's a technique often used in event handlers (especially in closures).\nReference: this\nfunction MyConstructor(data, transport) {\n    this.data = data;\n    var self = this;\n    transport.on('data', function () {\n        alert(self.data);\n    });\n}\n\nMethod2: Arrow function - An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords.\nArrow function expressions are ill-suited as methods, and they cannot be used as constructors.\nReference: Arrow function expressions\n  function MyConstructor(data, transport) {\n    this.data = data;\n    transport.on('data',()=> {\n        alert(this.data);\n    });\n}\n\nMethod 3: Bind - The bind() method creates a new function that, when called, has its this keyword set to the provided value with a given sequence of arguments preceding any provided when the new function is called.\nReference: Function.prototype.bind()\n  function MyConstructor(data, transport) {\n    this.data = data;\n    transport.on('data',(function() {\n        alert(this.data);\n    }).bind(this);\n\n    ",
        "votes": 42,
        "comentarios": [],
        "usuario": "Ashish",
        "usuario_id": 649
    },
    {
        "_id": 380,
        "fecha": { "$date" : "2021-07-25T20:47:54Z" },
        "decripcion": "\nThe trouble with \"context\"\nThe term \"context\" is sometimes used to refer to the object referenced by this. Its use is inappropriate, because it doesn't fit either semantically or technically with ECMAScript's this.\n\"Context\" means the circumstances surrounding something that adds meaning, or some preceding and following information that gives extra meaning. The term \"context\" is used in ECMAScript to refer to execution context, which is all the parameters, scope, and this within the scope of some executing code.\nThis is shown in ECMA-262 section 10.4.2:\n\nSet the ThisBinding to the same value as the ThisBinding of the\ncalling execution context\n\nWhich clearly indicates that this is part of an execution context.\nAn execution context provides the surrounding information that adds meaning to the code that is being executed. It includes much more information than just the thisBinding.\nThe value of this isn't \"context\". It's just one part of an execution context. It's essentially a local variable that can be set by the call to any object and in strict mode, to any value at all.\n    ",
        "votes": 36,
        "comentarios": [
            {
                "decripcion": "Can't agree with this answer. The existence of the term \"execution context\" does not outlaw other uses of \"context\" any more than it outlaws other uses of \"execution\". Maybe there is a better term to describe this but none is offered here, and it's arguably too late to shut the door on \"context\".",
                "fecha": { "$date" : "2019-06-08T15:12:37Z" },
                "usuario": "Roamer-1888",
                "usuario_id": 650
            },
            {
                "decripcion": "@Roamer-1888\u2014thank you for the edit. You're right, but my argument doesn't rely on the existence of \"execution context\" precluding the of \"context\" for some other purpose. Rather, it's based on \"context\" being inappropriate from both a technical and semantic perspective. I also think the use of \"context\" instead of \"this\" is dying out. I don't see any reason to find an alternative term to this or thisBinding, it just obfuscates and means at some point you have to explain that \"context\" is actually this, and that it isn't in anyway \"context\". :-)",
                "fecha": { "$date" : "2019-06-08T23:42:34Z" },
                "usuario": "RobG",
                "usuario_id": 647
            },
            {
                "decripcion": "I don't think you can say that this isn't in any way \"context\", when you have already admittted that it's one part of an execution context, where \"execution\" is merely adjectival.",
                "fecha": { "$date" : "2019-06-09T02:16:35Z" },
                "usuario": "Roamer-1888",
                "usuario_id": 650
            },
            {
                "decripcion": "@Roamer-1888\u2014I'm not going to continue this conversation past this point. Yes, this is part of an execution context. Saying it's the context is like saying one player of a team is the team.",
                "fecha": { "$date" : "2019-06-09T03:06:12Z" },
                "usuario": "RobG",
                "usuario_id": 647
            }
        ],
        "usuario": "RobG",
        "usuario_id": 647
    },
    {
        "_id": 381,
        "fecha": { "$date" : "2021-07-25T20:43:10Z" },
        "decripcion": "\nFirst, you need to have a clear understanding of scope and behaviour of the this keyword in the context of scope.\nthis & scope:\n\nThere are two types of scope in JavaScript. They are:\n\nGlobal Scope\n\nFunction Scope\n\n\nIn short, global scope refers to the window object. Variables declared in a global scope are accessible from anywhere.\nOn the other hand, function scope resides inside of a function. A variable declared inside a function cannot be accessed from the outside world normally.\nThe this keyword in the global scope refers to the window object. this inside a function also refers to the window object. So this will always refer to the window until we find a way to manipulate this to indicate a context of our own choosing.\n--------------------------------------------------------------------------------\n-                                                                              -\n-   Global Scope                                                               -\n-   (globally \"this\" refers to window object)                                  -\n-                                                                              -\n-   function outer_function(callback){                                         -\n-                                                                              -\n-       // Outer function scope                                                -\n-       // Inside the outer function, the \"this\" keyword                       -\n-       //  refers to window object                                            -\n-       callback() // \"this\" inside callback also refers to the  window object -\n-   }                                                                          -\n-                                                                              -\n-   function callback_function(){                                              -\n-                                                                              -\n-       // Function to be passed as callback                                   -\n-                                                                              -\n-       // Here \"THIS\" refers to the window object also                        -\n-   }                                                                          -\n-                                                                              -\n-   outer_function(callback_function)                                          -\n-   // Invoke with callback                                                    -\n-                                                                              -\n--------------------------------------------------------------------------------\n\n\nDifferent ways to manipulate this inside callback functions:\nHere I have a constructor function called Person. It has a property called name and four method called sayNameVersion1, sayNameVersion2, sayNameVersion3, and sayNameVersion4. All four of them has one specific task. Accept a callback and invoke it. The callback has a specific task which is to log the name property of an instance of Person constructor function.\nfunction Person(name){\n\n    this.name = name\n\n    this.sayNameVersion1 = function(callback){\n        callback.bind(this)()\n    }\n    this.sayNameVersion2 = function(callback){\n        callback()\n    }\n\n    this.sayNameVersion3 = function(callback){\n        callback.call(this)\n    }\n\n    this.sayNameVersion4 = function(callback){\n        callback.apply(this)\n    }\n\n}\n\nfunction niceCallback(){\n\n    // Function to be used as callback\n\n    var parentObject = this\n\n    console.log(parentObject)\n}\n\nNow let's create an instance from person constructor and invoke different versions of sayNameVersionX (X refers to 1,2,3,4) method with niceCallback to see how many ways we can manipulate the this inside callback to refer to the person instance.\nvar p1 = new Person('zami') // Create an instance of Person constructor\n\nbind: \nWhat bind do is to create a new function with the this keyword set to the provided value.\nsayNameVersion1 and sayNameVersion2 use bind to manipulate this of the callback function.\nthis.sayNameVersion1 = function(callback){\n    callback.bind(this)()\n}\nthis.sayNameVersion2 = function(callback){\n    callback()\n}\n\nThe first one binds this with a callback inside the method itself. And for the second one, the callback is passed with the object bound to it.\np1.sayNameVersion1(niceCallback) // pass simply the callback and bind happens inside the sayNameVersion1 method\n\np1.sayNameVersion2(niceCallback.bind(p1)) // uses bind before passing callback\n\n\ncall: \nThe first argument of the call method is used as this inside the function that is invoked with call attached to it.\nsayNameVersion3 uses call to manipulate the this to refer to the person object that we created, instead of the window object.\nthis.sayNameVersion3 = function(callback){\n    callback.call(this)\n}\n\nAnd it is called like the following:\np1.sayNameVersion3(niceCallback)\n\n\napply: \nSimilar to call, the first argument of apply refers to the object that will be indicated by the this keyword.\nsayNameVersion4 uses apply to manipulate this to refer to a person object\nthis.sayNameVersion4 = function(callback){\n    callback.apply(this)\n}\n\nAnd it is called like the following. Simply the callback is passed,\np1.sayNameVersion4(niceCallback)\n\n    ",
        "votes": 28,
        "comentarios": [
            {
                "decripcion": "any constructive criticism regarding  the answer will be appreciated !",
                "fecha": { "$date" : "2017-08-19T08:55:33Z" },
                "usuario": "AL-zami",
                "usuario_id": 651
            },
            {
                "decripcion": "The this keyword in the global scope doesn't necessarily refer to the window object. That is true only in a browser.",
                "fecha": { "$date" : "2018-05-23T10:04:31Z" },
                "usuario": "Randall Flagg",
                "usuario_id": 652
            },
            {
                "decripcion": "@RandallFlagg i wrote this answer from a browser's perspective.Fell free to inhance this answer if necessary :)",
                "fecha": { "$date" : "2018-07-09T00:14:20Z" },
                "usuario": "AL-zami",
                "usuario_id": 651
            }
        ],
        "usuario": "AL-zami",
        "usuario_id": 651
    },
    {
        "_id": 382,
        "fecha": { "$date" : "2021-07-25T20:44:50Z" },
        "decripcion": "\nWe can not bind this to setTimeout(), as it always executes with the global object (Window). If you want to access the this context in the callback function then by using bind() to the callback function, we can achieve it as:\nsetTimeout(function(){\n    this.methodName();\n}.bind(this), 2000);\n\n    ",
        "votes": 23,
        "comentarios": [
            {
                "decripcion": "How is this different than any of the existing answers?",
                "fecha": { "$date" : "2017-11-17T15:17:07Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            },
            {
                "decripcion": "Re \"Window\": Isn't it \"window\" (lowercase)?",
                "fecha": { "$date" : "2021-07-25T20:46:03Z" },
                "usuario": "Peter Mortensen",
                "usuario_id": 246
            }
        ],
        "usuario": "Datta Chanewad",
        "usuario_id": 653
    },
    {
        "_id": 383,
        "fecha": { "$date" : "2021-07-25T20:53:32Z" },
        "decripcion": "\nThe question revolves around how the this keyword behaves in JavaScript. this behaves differently as below,\n\nThe value of this is usually determined by a function execution context.\nIn the global scope, this refers to the global object (the window object).\nIf strict mode is enabled for any function then the value of this will be undefined as in strict mode, global object refers to undefined in place of the window object.\nThe object that is standing before the dot is what the this keyword will be bound to.\nWe can set the value of this explicitly with call(), bind(), and apply()\nWhen the new keyword is used (a constructor), this is bound to the new object being created.\nArrow functions don\u2019t bind this\u200a\u2014\u200ainstead, this is bound lexically (i.e., based on the original context)\n\nAs most of the answers suggest, we can use the arrow function or bind() Method or Self var. I would quote a point about lambdas (arrow function) from Google JavaScript Style Guide\n\nPrefer using arrow functions over f.bind(this), and especially over\ngoog.bind(f, this). Avoid writing const self = this. Arrow functions\nare particularly useful for callbacks, which sometimes pass unexpectedly\nadditional arguments.\n\nGoogle clearly recommends using lambdas rather than bind or const self = this\nSo the best solution would be to use lambdas as below,\nfunction MyConstructor(data, transport) {\n  this.data = data;\n  transport.on('data', () => {\n    alert(this.data);\n  });\n}\n\nReferences:\n\nhttps://medium.com/tech-tajawal/javascript-this-4-rules-7354abdb274c\narrow-functions-vs-bind\n\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "This question is specifically about using functions/methods as callbacks. Your answer might be a better fit for stackoverflow.com/q/3127429/218196 .",
                "fecha": { "$date" : "2019-02-18T19:51:36Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            },
            {
                "decripcion": "I find your fourth point worded ambiguously. Consider the example \u201cProblem When Using Methods With The this Object as Callbacks\u201d, where the right object is standing before the dot, but still the context is not that object.",
                "fecha": { "$date" : "2020-02-22T12:24:00Z" },
                "usuario": "bleistift2",
                "usuario_id": 654
            }
        ],
        "usuario": "Vikas Yadav",
        "usuario_id": 655
    },
    {
        "_id": 384,
        "fecha": { "$date" : "2021-07-25T20:50:29Z" },
        "decripcion": "\nCurrently there is another approach possible if classes are used in code.\nWith support of class fields, it's possible to make it the following way:\nclass someView {\n    onSomeInputKeyUp = (event) => {\n        console.log(this); // This refers to the correct value\n    // ....\n    someInitMethod() {\n        //...\n        someInput.addEventListener('input', this.onSomeInputKeyUp)\n\nFor sure under the hood it's all the old good arrow function that binds context, but in this form it looks much more clear that explicit binding.\nSince it's a Stage 3 Proposal, you will need Babel and appropriate Babel plugin to process it as for now (08/2018).\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "This is exactly the way I got it working in Typescript: public methodName = (params) => { body } inside a class.",
                "fecha": { "$date" : "2019-02-17T17:36:44Z" },
                "usuario": "yeyeyerman",
                "usuario_id": 656
            }
        ],
        "usuario": "skyboyer",
        "usuario_id": 657
    },
    {
        "_id": 385,
        "fecha": { "$date" : "2021-07-25T20:47:22Z" },
        "decripcion": "\nAnother approach, which is the standard way since DOM2 to bind this within the event listener, that let you always remove the listener (among other benefits), is the handleEvent(evt) method from the EventListener interface:\nvar obj = {\n  handleEvent(e) {\n    // always true\n    console.log(this === obj);\n  }\n};\n\ndocument.body.addEventListener('click', obj);\n\nDetailed information about using handleEvent can be found here: DOM handleEvent: a cross-platform standard since year 2000\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Andrea Puddu",
        "usuario_id": 658
    },
    {
        "_id": 386,
        "fecha": { "$date" : "2021-07-26T00:20:03Z" },
        "decripcion": "\nI was facing a problem with Ngx line chart xAxisTickFormatting function which was called from HTML like this: [xAxisTickFormatting]=\"xFormat\".\nI was unable to access my component's variable from the function declared. This solution helped me to resolve the issue to find the correct this.\nInstead of using the function like this:\nxFormat (value): string {\n  return value.toString() + this.oneComponentVariable; //gives wrong result\n}\n\nUse this:\n xFormat = (value) => {\n   // console.log(this);\n   // now you have access to your component variables\n   return value + this.oneComponentVariable\n }\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Md. Tazbir Ur Rahman Bhuiyan",
        "usuario_id": 659
    },
    {
        "_id": 387,
        "fecha": { "$date" : "2021-07-26T00:19:15Z" },
        "decripcion": "\nSome other people have touched on how to use the .bind() method, but specifically here is how you can use it with .then() if anyone is having trouble getting them to work together:\nsomeFunction()\n.then(function(response) {\n    //'this' wasn't accessible here before but now it is\n}.bind(this))\n\nAs mentioned in the comments, an alternative would be to use an arrow function that doesn't have its own 'this' value\nsomeFunction()\n.then((response)=>{\n    //'this' was always accessible here\n})\n\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "That's not correct. (1) arrow functions don't have their own this value and use the value from the closes this-providing environment. (2) because of that, .bind doesn't have an affect on arrow functions.",
                "fecha": { "$date" : "2021-06-24T22:58:14Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            },
            {
                "decripcion": "good call, I copied the code wrong, updated to show both variations",
                "fecha": { "$date" : "2021-06-24T23:03:22Z" },
                "usuario": "Josh McGee",
                "usuario_id": 660
            }
        ],
        "usuario": "Josh McGee",
        "usuario_id": 660
    },
    {
        "_id": 388,
        "fecha": { "$date" : "2021-07-26T00:25:54Z" },
        "decripcion": "\nthis in JavaScript:\nThe value of this in JavaScript is 100% determined by how a function is called, and not how it is defined. We can relatively easily find the value of this by the 'left of the dot rule':\n\nWhen the function is created using the function keyword the value of this is the object left of the dot of the function which is called\nIf there is no object left of the dot then the value of this inside a function is often the global object (global in Node.js and window in a browser). I wouldn't recommend using the this keyword here because it is less explicit than using something like window!\nThere exist certain constructs like arrow functions and functions created using the Function.prototype.bind() a function that can fix the value of this. These are exceptions of the rule, but they are really helpful to fix the value of this.\n\nExample in Node.js\nmodule.exports.data = 'module data';\n// This outside a function in node refers to module.exports object\nconsole.log(this);\n\nconst obj1 = {\n    data: \"obj1 data\",\n    met1: function () {\n        console.log(this.data);\n    },\n    met2: () => {\n        console.log(this.data);\n    },\n};\n\nconst obj2 = {\n    data: \"obj2 data\",\n    test1: function () {\n        console.log(this.data);\n    },\n    test2: function () {\n        console.log(this.data);\n    }.bind(obj1),\n    test3: obj1.met1,\n    test4: obj1.met2,\n};\n\nobj2.test1();\nobj2.test2();\nobj2.test3();\nobj2.test4();\nobj1.met1.call(obj2);\n\nOutput:\n\nLet me walk you through the outputs one by one (ignoring the first log starting from the second):\n\nthis is obj2 because of the left of the dot rule, we can see how test1 is called obj2.test1();. obj2 is left of the dot and thus the this value.\nEven though obj2 is left of the dot, test2 is bound to obj1 via the bind() method. The this value is obj1.\nobj2 is left of the dot from the function which is called: obj2.test3(). Therefore obj2 will be the value of this.\nIn this case: obj2.test4() obj2 is left of the dot. However, arrow functions don't have their own this binding. Therefore it will bind to the this value of the outer scope which is the module.exports an object which was logged in the beginning.\nWe can also specify the value of this by using the call function. Here we can pass in the desired this value as an argument, which is obj2 in this case.\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Willem van der Veen",
        "usuario_id": 661
    },
    {
        "_id": 389,
        "fecha": { "$date" : "2019-11-15T03:06:49Z" },
        "decripcion": "\nOne word answer: asynchronicity.\n\nForewords\n\nThis topic has been iterated at least a couple of thousands of times, here, in Stack Overflow. Hence, first off I'd like to point out some extremely useful resources:\n\n\n@Felix Kling's answer to \"How do I return the response from an asynchronous call?\". See his excellent answer explaining synchronous and asynchronous flows, as well as the \"Restructure code\" section.\n@Benjamin Gruenbaum has also put a lot of effort explaining asynchronicity in the same thread.\n@Matt Esch's answer to \"Get data from fs.readFile\" also explains asynchronicity extremely well in a simple manner.\n\n\n\n\nThe answer to the question at hand\n\nLet's trace the common behavior first. In all examples, the outerScopeVar is modified inside of a function. That function is clearly not executed immediately, it is being assigned or passed as an argument. That is what we call a callback.\n\nNow the question is, when is that callback called?\n\nIt depends on the case. Let's try to trace some common behavior again:\n\n\nimg.onload may be called sometime in the future, when (and if) the image has successfully loaded.\nsetTimeout may be called sometime in the future, after the delay has expired and the timeout hasn't been canceled by clearTimeout. Note: even when using 0 as delay, all browsers have a minimum timeout delay cap (specified to be 4ms in the HTML5 spec).\njQuery $.post's callback may be called sometime in the future, when (and if) the Ajax request has been completed successfully.\nNode.js's fs.readFile may be called sometime in the future, when the file has been read successfully or thrown an error.\n\n\nIn all cases, we have a callback which may run sometime in the future. This \"sometime in the future\" is what we refer to as asynchronous flow.\n\nAsynchronous execution is pushed out of the synchronous flow. That is, the asynchronous code will never execute while the synchronous code stack is executing. This is the meaning of JavaScript being single-threaded.\n\nMore specifically, when the JS engine is idle -- not executing a stack of (a)synchronous code -- it will poll for events that may have triggered asynchronous callbacks (e.g. expired timeout, received network response) and execute them one after another. This is regarded as Event Loop.\n\nThat is, the asynchronous code highlighted in the hand-drawn red shapes may execute only after all the remaining synchronous code in their respective code blocks have executed:\n\n\n\nIn short, the callback functions are created synchronously but executed asynchronously. You just can't rely on the execution of an asynchronous function until you know it has executed, and how to do that?\n\nIt is simple, really. The logic that depends on the asynchronous function execution should be started/called from inside this asynchronous function. For example, moving the alerts and console.logs too inside the callback function would output the expected result, because the result is available at that point.\n\nImplementing your own callback logic\n\nOften you need to do more things with the result from an asynchronous function or do different things with the result depending on where the asynchronous function has been called. Let's tackle a bit more complex example:\n\nvar outerScopeVar;\nhelloCatAsync();\nalert(outerScopeVar);\n\nfunction helloCatAsync() {\n    setTimeout(function() {\n        outerScopeVar = 'Nya';\n    }, Math.random() * 2000);\n}\n\n\nNote: I'm using setTimeout with a random delay as a generic asynchronous function, the same example applies to Ajax, readFile, onload and any other asynchronous flow.\n\nThis example clearly suffers from the same issue as the other examples, it is not waiting until the asynchronous function executes.\n\nLet's tackle it implementing a callback system of our own. First off, we get rid of that ugly outerScopeVar which is completely useless in this case. Then we add a parameter which accepts a function argument, our callback. When the asynchronous operation finishes, we call this callback passing the result. The implementation (please read the comments in order):\n\n// 1. Call helloCatAsync passing a callback function,\n//    which will be called receiving the result from the async operation\nhelloCatAsync(function(result) {\n    // 5. Received the result from the async function,\n    //    now do whatever you want with it:\n    alert(result);\n});\n\n// 2. The \"callback\" parameter is a reference to the function which\n//    was passed as argument from the helloCatAsync call\nfunction helloCatAsync(callback) {\n    // 3. Start async operation:\n    setTimeout(function() {\n        // 4. Finished async operation,\n        //    call the callback passing the result as argument\n        callback('Nya');\n    }, Math.random() * 2000);\n}\n\n\nCode snippet of the above example:\n\n\n\n// 1. Call helloCatAsync passing a callback function,\n//    which will be called receiving the result from the async operation\nconsole.log(\"1. function called...\")\nhelloCatAsync(function(result) {\n    // 5. Received the result from the async function,\n    //    now do whatever you want with it:\n    console.log(\"5. result is: \", result);\n});\n\n// 2. The \"callback\" parameter is a reference to the function which\n//    was passed as argument from the helloCatAsync call\nfunction helloCatAsync(callback) {\n    console.log(\"2. callback here is the function passed as argument above...\")\n    // 3. Start async operation:\n    setTimeout(function() {\n    console.log(\"3. start async operation...\")\n    console.log(\"4. finished async operation, calling the callback, passing the result...\")\n        // 4. Finished async operation,\n        //    call the callback passing the result as argument\n        callback('Nya');\n    }, Math.random() * 2000);\n}\n Run code snippetHide resultsExpand snippet\n\n\n\nMost often in real use cases, the DOM API and most libraries already provide the callback functionality (the helloCatAsync implementation in this demonstrative example). You only need to pass the callback function and understand that it will execute out of the synchronous flow, and restructure your code to accommodate for that.\n\nYou will also notice that due to the asynchronous nature, it is impossible to return a value from an asynchronous flow back to the synchronous flow where the callback was defined, as the asynchronous callbacks are executed long after the synchronous code has already finished executing.\n\nInstead of returning a value from an asynchronous callback, you will have to make use of the callback pattern, or... Promises.\n\nPromises\n\nAlthough there are ways to keep the callback hell at bay with vanilla JS, promises are growing in popularity and are currently being standardized in ES6 (see Promise - MDN).\n\nPromises (a.k.a. Futures) provide a more linear, and thus pleasant, reading of the asynchronous code, but explaining their entire functionality is out of the scope of this question. Instead, I'll leave these excellent resources for the interested:\n\n\nJavaScript Promises - HTML5 Rocks\nYou're Missing the Point of Promises - domenic.me\n\n\n\n\nMore reading material about JavaScript asynchronicity\n\n\nThe Art of Node - Callbacks explains asynchronous code and callbacks very well with vanilla JS examples and Node.js code as well.\n\n\n\n\n\n  Note: I've marked this answer as Community Wiki, hence anyone with at least 100 reputations can edit and improve it! Please feel free to improve this answer, or submit a completely new answer if you'd like as well.\n  \n  I want to turn this question into a canonical topic to answer asynchronicity issues which are unrelated to Ajax (there is How to return the response from an AJAX call? for that), hence this topic needs your help to be as good and helpful as possible!\n\n    ",
        "votes": 652,
        "comentarios": [
            {
                "decripcion": "In your last example, is there a specific reason why you use anonymous functions or would it work the same by using named functions?",
                "fecha": { "$date" : "2016-05-03T21:34:48Z" },
                "usuario": "JDelage",
                "usuario_id": 664
            },
            {
                "decripcion": "The code examples are a bit weird as you're declaring the function after calling it. Works because of hoisting of course, but was it intentional?",
                "fecha": { "$date" : "2016-05-05T22:12:50Z" },
                "usuario": "Bergi",
                "usuario_id": 662
            },
            {
                "decripcion": "is it deadlock . felix kling is pointing to your answer and you are pointing to felix answer",
                "fecha": { "$date" : "2017-01-02T10:23:05Z" },
                "usuario": "Mahi",
                "usuario_id": 665
            },
            {
                "decripcion": "You need to understand that the red circle code is only async because it is being executed by NATIVE async javascript functions.  This is a feature of your javascript engine--whether it be Node.js or a browser. It is async because it is being passed in as a \"callback\" to a function that is essentially a black box (implemented in C etc..).  To the hapless developer they are async...just because.  If you want to write your own async function you have to hack it by sending it in to SetTimeout(myfunc,0).  Should you do that? Another debate....probably not.",
                "fecha": { "$date" : "2017-01-05T19:08:19Z" },
                "usuario": "Sean Anderson",
                "usuario_id": 666
            },
            {
                "decripcion": "@Fabricio I have looked for the spec defining the \">=4ms clamp\", but could not find it - I found some mention of similar mechanism (for clamping nested calls) on  MDN - developer.mozilla.org/en-US/docs/Web/API/\u2026 - does anyone have a link to the right part of the HTML spec.",
                "fecha": { "$date" : "2019-05-31T16:24:27Z" },
                "usuario": "Sebi",
                "usuario_id": 667
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 390,
        "fecha": { "$date" : "2019-06-10T19:48:26Z" },
        "decripcion": "\nFabr\u00edcio's answer is spot on; but I wanted to complement his answer with something less technical, which focusses on an analogy to help explain the concept of asynchronicity.\n\n\n\nAn Analogy...\n\nYesterday, the work I was doing required some information from a colleague. I rang him up; here's how the conversation went:\n\n\n  Me: Hi Bob, I need to know how we foo'd the bar'd last week. Jim wants a report on it, and you're the only one who knows the details about it.\n\n\n\n\n\n  Bob: Sure thing, but it'll take me around 30 minutes?\n\n\n\n\n\n  Me: That's great Bob. Give me a ring back when you've got the information!\n\n\nAt this point, I hung up the phone. Since I needed information from Bob to complete my report, I left the report and went for a coffee instead, then I caught up on some email. 40 minutes later (Bob is slow), Bob called back and gave me the information I needed. At this point, I resumed my work with my report, as I had all the information I needed.\n\n\n\nImagine if the conversation had gone like this instead;\n\n\n  Me: Hi Bob, I need to know how we foo'd the bar'd last week. Jim want's a report on it, and you're the only one who knows the details about it.\n\n\n\n\n\n  Bob: Sure thing, but it'll take me around 30 minutes?\n\n\n\n\n\n  Me: That's great Bob. I'll wait.\n\n\nAnd I sat there and waited. And waited. And waited. For 40 minutes. Doing nothing but waiting. Eventually, Bob gave me the information, we hung up, and I completed my report. But I'd lost 40 minutes of productivity.\n\n\n\nThis is asynchronous vs. synchronous behavior\n\nThis is exactly what is happening in all the examples in our question. Loading an image, loading a file off disk, and requesting a page via AJAX are all slow operations (in the context of modern computing). \n\nRather than waiting for these slow operations to complete, JavaScript lets you register a callback function which will be executed when the slow operation has completed. In the meantime, however, JavaScript will continue to execute other code. The fact that JavaScript executes other code whilst waiting for the slow operation to complete makes the behaviorasynchronous. Had JavaScript waited around for the operation to complete before executing any other code, this would have been synchronous behavior.\n\nvar outerScopeVar;    \nvar img = document.createElement('img');\n\n// Here we register the callback function.\nimg.onload = function() {\n    // Code within this function will be executed once the image has loaded.\n    outerScopeVar = this.width;\n};\n\n// But, while the image is loading, JavaScript continues executing, and\n// processes the following lines of JavaScript.\nimg.src = 'lolcat.png';\nalert(outerScopeVar);\n\n\nIn the code above, we're asking JavaScript to load lolcat.png, which is a sloooow operation. The callback function will be executed once this slow operation has done, but in the meantime, JavaScript will keep processing the next lines of code; i.e. alert(outerScopeVar). \n\nThis is why we see the alert showing undefined; since the alert() is processed immediately, rather than after the image has been loaded. \n\nIn order to fix our code, all we have to do is move the alert(outerScopeVar) code into the callback function. As a consequence of this, we no longer need the outerScopeVar variable declared as a global variable.\n\nvar img = document.createElement('img');\n\nimg.onload = function() {\n    var localScopeVar = this.width;\n    alert(localScopeVar);\n};\n\nimg.src = 'lolcat.png';\n\n\nYou'll always see a callback is specified as a function, because that's the only* way in JavaScript to define some code, but not execute it until later.\n\nTherefore, in all of our examples, the function() { /* Do something */ } is the callback; to fix all the examples, all we have to do is move the code which needs the response of the operation into there!\n\n* Technically you can use eval() as well, but eval() is evil for this purpose\n\n\n\nHow do I keep my caller waiting?\n\nYou might currently have some code similar to this;\n\nfunction getWidthOfImage(src) {\n    var outerScopeVar;\n\n    var img = document.createElement('img');\n    img.onload = function() {\n        outerScopeVar = this.width;\n    };\n    img.src = src;\n    return outerScopeVar;\n}\n\nvar width = getWidthOfImage('lolcat.png');\nalert(width);\n\n\nHowever, we now know that the return outerScopeVar happens immediately; before the onload callback function has updated the variable. This leads to getWidthOfImage() returning undefined, and undefined being alerted.\n\nTo fix this, we need to allow the function calling getWidthOfImage() to register a callback, then move the alert'ing of the width to be within that callback;\n\nfunction getWidthOfImage(src, cb) {     \n    var img = document.createElement('img');\n    img.onload = function() {\n        cb(this.width);\n    };\n    img.src = src;\n}\n\ngetWidthOfImage('lolcat.png', function (width) {\n    alert(width);\n});\n\n\n... as before, note that we've been able to remove the global variables (in this case width).\n    ",
        "votes": 167,
        "comentarios": [
            {
                "decripcion": "But how is alerting or sending to console useful if you want to  use the results in a different calculation, or store it in an object variable?",
                "fecha": { "$date" : "2019-03-22T21:51:36Z" },
                "usuario": "Ken Ingram",
                "usuario_id": 668
            },
            {
                "decripcion": "This is the most useful, quick and concise answer on the entire stackoverflow. Thanks.",
                "fecha": { "$date" : "2021-05-31T13:22:29Z" },
                "usuario": "MasterMind",
                "usuario_id": 669
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 391,
        "fecha": { "$date" : "2017-11-22T05:45:24Z" },
        "decripcion": "\nHere's a more concise answer for people that are looking for a quick reference as well as some examples using promises and async/await.\n\nStart with the naive approach (that doesn't work) for a function that calls an asynchronous method (in this case setTimeout) and returns a message:\n\nfunction getMessage() {\n  var outerScopeVar;\n  setTimeout(function() {\n    outerScopeVar = 'Hello asynchronous world!';\n  }, 0);\n  return outerScopeVar;\n}\nconsole.log(getMessage());\n\n\nundefined gets logged in this case because getMessage returns before the setTimeout callback is called and updates outerScopeVar.\n\nThe two main ways to solve it are using callbacks and promises:\n\nCallbacks\n\nThe change here is that getMessage accepts a callback parameter that will be called to deliver the results back to the calling code once available.\n\nfunction getMessage(callback) {\n  setTimeout(function() {\n    callback('Hello asynchronous world!');\n  }, 0);\n}\ngetMessage(function(message) {\n  console.log(message);\n});\n\n\nPromises\n\nPromises provide an alternative which is more flexible than callbacks because they can be naturally combined to coordinate multiple async operations. A Promises/A+ standard implementation is natively provided in node.js (0.12+) and many current browsers, but is also implemented in libraries like Bluebird and Q.\n\nfunction getMessage() {\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      resolve('Hello asynchronous world!');\n    }, 0);\n  });\n}\n\ngetMessage().then(function(message) {\n  console.log(message);  \n});\n\n\njQuery Deferreds\n\njQuery provides functionality that's similar to promises with its Deferreds.\n\nfunction getMessage() {\n  var deferred = $.Deferred();\n  setTimeout(function() {\n    deferred.resolve('Hello asynchronous world!');\n  }, 0);\n  return deferred.promise();\n}\n\ngetMessage().done(function(message) {\n  console.log(message);  \n});\n\n\nasync/await\n\nIf your JavaScript environment includes support for async and await (like Node.js 7.6+), then you can use promises synchronously within async functions:\n\nfunction getMessage () {\n    return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            resolve('Hello asynchronous world!');\n        }, 0);\n    });\n}\n\nasync function main() {\n    let message = await getMessage();\n    console.log(message);\n}\n\nmain();\n\n    ",
        "votes": 83,
        "comentarios": [
            {
                "decripcion": "Your sample on Promises is basically what I've been searching for, for the past few hours. Your example is beautiful and explains Promises at the same time. Why this is not anywhere else is boggling.",
                "fecha": { "$date" : "2016-01-08T08:40:40Z" },
                "usuario": "Vincent P",
                "usuario_id": 670
            },
            {
                "decripcion": "This is all fine, but what if you need to call getMessage() with parameters?  How would you write the above in that scenario?",
                "fecha": { "$date" : "2017-08-01T17:51:55Z" },
                "usuario": "Chiwda",
                "usuario_id": 671
            },
            {
                "decripcion": "@Chiwda You just put the callback parameter last: function getMessage(param1, param2, callback) {...}.",
                "fecha": { "$date" : "2017-08-01T19:09:22Z" },
                "usuario": "JohnnyHK",
                "usuario_id": 672
            },
            {
                "decripcion": "I'm trying your async/await sample, but I'm running into problems. Instead of instantiating a new Promise, I'm making a .Get() call and therefore have no access to any resolve() method. Thus my getMessage() is returning the Promise and not the result. Could you edit your answer a bit to show a working syntax for this?",
                "fecha": { "$date" : "2019-08-08T10:18:10Z" },
                "usuario": "InteXX",
                "usuario_id": 673
            },
            {
                "decripcion": "@InteXX I'm not sure what you mean about making a .Get() call. Probably best to post a new question.",
                "fecha": { "$date" : "2019-08-08T12:59:01Z" },
                "usuario": "JohnnyHK",
                "usuario_id": 672
            }
        ],
        "usuario": "JohnnyHK",
        "usuario_id": 672
    },
    {
        "_id": 392,
        "fecha": { "$date" : "2015-12-08T17:01:14Z" },
        "decripcion": "\nTo state the obvious, the cup represents outerScopeVar.  \n\nAsynchronous functions be like...\n\n\n    ",
        "votes": 60,
        "comentarios": [
            {
                "decripcion": "Whereas trying to make an asynchronous function act synchronously would be trying to drink the coffee at 1 second, and having it poured into your lap at 1 minute.",
                "fecha": { "$date" : "2015-12-10T15:22:30Z" },
                "usuario": "Teepeemm",
                "usuario_id": 674
            },
            {
                "decripcion": "If it were stating the obvious, I don't think the question would have been asked, No?",
                "fecha": { "$date" : "2016-07-03T13:10:00Z" },
                "usuario": "broccoli2000",
                "usuario_id": 675
            },
            {
                "decripcion": "@broccoli2000 By that I didn't mean that the question was obvious, but that it's obvious what the cup represents in the drawing :)",
                "fecha": { "$date" : "2016-09-29T19:24:57Z" },
                "usuario": "Johannes Fahrenkrug",
                "usuario_id": 506
            }
        ],
        "usuario": "Johannes Fahrenkrug",
        "usuario_id": 506
    },
    {
        "_id": 393,
        "fecha": { "$date" : "2016-02-26T03:59:09Z" },
        "decripcion": "\nThe other answers are excellent and I just want to provide a straight forward answer to this. Just limiting to jQuery asynchronous calls\n\nAll ajax calls (including the $.get or $.post or $.ajax) are asynchronous.\n\nConsidering your example\n\nvar outerScopeVar;  //line 1\n$.post('loldog', function(response) {  //line 2\n    outerScopeVar = response;\n});\nalert(outerScopeVar);  //line 3\n\n\nThe code execution starts from line 1, declares the variable and triggers and asynchronous call on line 2, (i.e., the post request) and it continues its execution from line 3, without waiting for the post request to complete its execution.\n\nLets say that the post request takes 10 seconds to complete, the value of outerScopeVar will only be set after those 10 seconds.\n\nTo try out,\n\nvar outerScopeVar; //line 1\n$.post('loldog', function(response) {  //line 2, takes 10 seconds to complete\n    outerScopeVar = response;\n});\nalert(\"Lets wait for some time here! Waiting is fun\");  //line 3\nalert(outerScopeVar);  //line 4\n\n\nNow when you execute this, you would get an alert on line 3. Now wait for some time until you are sure the post request has returned some value. Then when you click OK, on the alert box, next alert would print the expected value, because you waited for it.\n\nIn real life scenario, the code becomes,\n\nvar outerScopeVar;\n$.post('loldog', function(response) {\n    outerScopeVar = response;\n    alert(outerScopeVar);\n});\n\n\nAll the code that depends on the asynchronous calls, is moved inside the asynchronous block, or by waiting on the asynchronous calls.\n    ",
        "votes": 14,
        "comentarios": [
            {
                "decripcion": "or by waiting on the asynchronous calls How does one do that?",
                "fecha": { "$date" : "2019-08-08T10:42:39Z" },
                "usuario": "InteXX",
                "usuario_id": 673
            },
            {
                "decripcion": "@InteXX By using a callback method",
                "fecha": { "$date" : "2019-09-09T10:19:00Z" },
                "usuario": "Teja",
                "usuario_id": 676
            },
            {
                "decripcion": "Do you have a quick syntax example?",
                "fecha": { "$date" : "2019-09-09T13:18:57Z" },
                "usuario": "InteXX",
                "usuario_id": 673
            }
        ],
        "usuario": "Teja",
        "usuario_id": 676
    },
    {
        "_id": 394,
        "fecha": { "$date" : "2017-05-23T12:26:36Z" },
        "decripcion": "\nIn all these scenarios outerScopeVar is modified or assigned a value asynchronously or happening in a later time(waiting or listening for some event to occur),for which the current execution will not wait.So all these cases current execution flow results in outerScopeVar = undefined\n\nLet's discuss each examples(I marked the portion which is called asynchronously or delayed for some events to occur):\n\n1.\n\n\n\nHere we register an eventlistner which will be executed upon that particular event.Here loading of image.Then the current execution continuous with next lines img.src = 'lolcat.png'; and alert(outerScopeVar); meanwhile the event may not occur. i.e, funtion img.onload wait for the referred image to load, asynchrously. This will happen all the folowing example- the event may differ.\n\n2.\n\n\n\nHere the timeout event plays the role, which will invoke the handler after the specified time. Here it is 0, but still it registers an asynchronous event it will be added to the last position of the Event Queue for execution, which makes the guaranteed delay.\n\n3.\n\n\nThis time ajax callback.\n\n4.\n\n\n\nNode can be consider as a king of asynchronous coding.Here the marked function is registered as a callback handler which will be executed after reading the specified file.\n\n5.\n\n\n\nObvious promise (something will be done in future) is asynchronous. see What are the differences between Deferred, Promise and Future in JavaScript?\n\nhttps://www.quora.com/Whats-the-difference-between-a-promise-and-a-callback-in-Javascript\n    ",
        "votes": 11,
        "comentarios": [],
        "usuario": "Tom Sebastian",
        "usuario_id": 677
    },
    {
        "_id": 395,
        "fecha": { "$date" : "2020-05-11T20:43:11Z" },
        "decripcion": "\nThe element you were trying to find wasn\u2019t in the DOM when your script ran.\n\nThe position of your DOM-reliant script can have a profound effect upon its behavior. Browsers parse HTML documents from top to bottom. Elements are added to the DOM and scripts are (generally) executed as they're encountered. This means that order matters. Typically, scripts can't find elements which appear later in the markup because those elements have yet to be added to the DOM.\n\nConsider the following markup; script #1 fails to find the <div> while script #2 succeeds:\n\n\n\n<script>\n  console.log(\"script #1: %o\", document.getElementById(\"test\")); // null\n</script>\n<div id=\"test\">test div</div>\n<script>\n  console.log(\"script #2: %o\", document.getElementById(\"test\")); // <div id=\"test\" ...\n</script>\n Run code snippetHide resultsExpand snippet\n\n\n\nSo, what should you do? You've got a few options:\n\n\n\nOption 1: Move your script\n\nMove your script further down the page, just before the closing body tag. Organized in this fashion, the rest of the document is parsed before your script is executed:\n\n\n\n<body>\n  <button id=\"test\">click me</button>\n  <script>\n    document.getElementById(\"test\").addEventListener(\"click\", function() {\n      console.log(\"clicked: %o\", this);\n    });\n  </script>\n</body><!-- closing body tag -->\n Run code snippetHide resultsExpand snippet\n\n\n\nNote: Placing scripts at the bottom is generally considered a best practice.\n\n\n\nOption 2: jQuery's ready()\n\nDefer your script until the DOM has been completely parsed, using $(handler):\n\n\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\n<script>\n  $(function() {\n    $(\"#test\").click(function() {\n      console.log(\"clicked: %o\", this);\n    });\n  });\n</script>\n<button id=\"test\">click me</button>\n Run code snippetHide resultsExpand snippet\n\n\n\nNote: You could simply bind to DOMContentLoaded or  window.onload but each has its caveats. jQuery's ready() delivers a hybrid solution.\n\n\n\nOption 3: Event Delegation\n\n\n  Delegated events have the advantage that they can process events from descendant elements that are added to the document at a later time.\n\n\nWhen an element raises an event (provided that it's a bubbling event and nothing stops its propagation), each parent in that element's ancestry receives the event as well. That allows us to attach a handler to an existing element and sample events as they bubble up from its descendants... even those added after the handler is attached. All we have to do is check the event to see whether it was raised by the desired element and, if so, run our code. \n\njQuery's on() performs that logic for us. We simply provide an event name, a selector for the desired descendant, and an event handler:\n\n\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\n<script>\n  $(document).on(\"click\", \"#test\", function(e) {\n    console.log(\"clicked: %o\",  this);\n  });\n</script>\n<button id=\"test\">click me</button>\n Run code snippetHide resultsExpand snippet\n\n\n\nNote: Typically, this pattern is reserved for elements which didn't exist at load-time or to avoid attaching a large amount of handlers. It's also worth pointing out that while I've attached a handler to document (for demonstrative purposes), you should select the nearest reliable ancestor.\n\n\n\nOption 4: The defer attribute\n\nUse the defer attribute of <script>.\n\n\n  [defer, a Boolean attribute,] is set to indicate to a browser that the script is meant to be executed after the document has been parsed, but before firing DOMContentLoaded.\n\n\n\n\n<script src=\"https://gh-canon.github.io/misc-demos/log-test-click.js\" defer></script>\n<button id=\"test\">click me</button>\n Run code snippetHide resultsExpand snippet\n\n\n\nFor reference, here's the code from that external script:\n\ndocument.getElementById(\"test\").addEventListener(\"click\", function(e){\n   console.log(\"clicked: %o\", this); \n});\n\n\nNote: The defer attribute certainly seems like a magic bullet but it's important to be aware of the caveats...\n1. defer can only be used for external scripts, i.e.: those having a src attribute.\n2. be aware of browser support, i.e.: buggy implementation in IE < 10\n    ",
        "votes": 541,
        "comentarios": [
            {
                "decripcion": "It's now 2020 \u2014 is \"Placing scripts at the bottom\" still \"considered a best practice\" ? I (nowdays) put all my resources in the <head> and use defer on scripts (I don't have to support bad-old incompatible browsers)",
                "fecha": { "$date" : "2020-05-05T17:53:01Z" },
                "usuario": "Stephen P",
                "usuario_id": 681
            },
            {
                "decripcion": "I'm a big proponent of moving onto modern browsers. That said, this practice doesn't really cost me anything and it just works everywhere. On the other hand, both defer and async have pretty broad support -even reaching back to some much older browser versions. They have the additional advantage of clearly, explicitly signaling the intended behavior. Just remember that these attributes only work for scripts specifying a src attribute, i.e.: external scripts. Weigh the benefits. Maybe use both? Your call.",
                "fecha": { "$date" : "2020-05-05T19:39:16Z" },
                "usuario": "canon",
                "usuario_id": 682
            },
            {
                "decripcion": "In my opinion, this answer should also include a reference to developer.mozilla.org/en-US/docs/Web/API/Window/\u2026 in approach #2. Essentially that is the vanilla JS solution to this issue, which probably something at least some Googlers would like to know about.",
                "fecha": { "$date" : "2021-03-09T16:32:16Z" },
                "usuario": "Joeytje50",
                "usuario_id": 683
            },
            {
                "decripcion": "@Joeytje50 DOMContentLoaded is already referenced in a footnote for #2. That said, this answer was originally migrated by a moderator from a jQuery-specific question. So, it still bears some of that flavor, despite some transitional edits.",
                "fecha": { "$date" : "2021-03-10T00:58:44Z" },
                "usuario": "canon",
                "usuario_id": 682
            }
        ],
        "usuario": "canon",
        "usuario_id": 682
    },
    {
        "_id": 396,
        "fecha": { "$date" : "2021-08-31T08:42:48Z" },
        "decripcion": "\nShort and simple: Because the elements you are looking for do not exist in the document (yet).\n\nFor the remainder of this answer I will use getElementById for examples, but the same applies to getElementsByTagName, querySelector, and any other DOM method that selects elements.\nPossible Reasons\nThere are three reasons why an element might not exist:\n\nAn element with the passed ID really does not exist in the document. You should double check that the ID you pass to getElementById really matches an ID of an existing element in the (generated) HTML and that you have not misspelled the ID (IDs are case-sensitive!).\nIf you're using getElementById, be sure you're only giving the ID of the element (e.g., document.getElemntById(\"the-id\")). If you're using a method that accepts a CSS selector (like querySelector), be sure you're including the # before the ID to indicate you're looking for an ID (e.g., document.querySelector(\"#the-id\")). You must not use the # with getElementById, and must use it with querySelector and similar. Also note that if the ID has characters in it that aren't valid in CSS identifiers (such as a .; id attributes containing . characters are poor practice, but valid), you have to escape those when using querySelector (document.querySelector(\"#the\\\\.id\"))) but not when using getElementById (document.getElementById(\"the.id\")).\n\nThe element does not exist at the moment you call getElementById.\n\nThe element isn't in the document you're querying even though you can see it on the page, because it's in an iframe (which is its own document). Elements in iframes aren't searched when you search the document that contains them.\n\n\nIf the problem is reason 3 (it's in an iframe or similar), you need to look through the document in the iframe, not the parent document, perhaps by getting the iframe element and using its contentDocument property to access its document (same-origin only). The rest of this answer addresses the first two reasons.\nThe second reason\u00a0\u2014 it's not there yet\u00a0\u2014 is quite common. Browsers parse and process the HTML from top to bottom. That means that any call to a DOM element which occurs before that DOM element appears in the HTML, will fail.\nConsider the following example:\n<script>\n    var element = document.getElementById('my_element');\n</script>\n\n<div id=\"my_element\"></div>\n\nThe div appears after the script. At the moment the script is executed, the element does not exist yet and getElementById will return null.\njQuery\nThe same applies to all selectors with jQuery. jQuery won't find elements if you misspelled your selector or you are trying to select them before they actually exist.\nAn added twist is when jQuery is not found because you have loaded the script without protocol and are running from file system:\n<script src=\"//somecdn.somewhere.com/jquery.min.js\"></script>\n\nthis syntax is used to allow the script to load via HTTPS on a page with protocol https:// and to load the HTTP version on a page with protocol http://\nIt has the unfortunate side effect of attempting and failing to load file://somecdn.somewhere.com...\n\nSolutions\nBefore you make a call to getElementById (or any DOM method for that matter), make sure the elements you want to access exist, i.e. the DOM is loaded.\nThis can be ensured by simply putting your JavaScript after the corresponding DOM element\n<div id=\"my_element\"></div>\n\n<script>\n    var element = document.getElementById('my_element');\n</script>\n\nin which case you can also put the code just before the closing body tag (</body>) (all DOM elements will be available at the time the script is executed).\nOther solutions include listening to the load [MDN] or DOMContentLoaded [MDN] events. In these cases it does not matter where in the document you place the JavaScript code, you just have to remember to put all DOM processing code in the event handlers.\nExample:\nwindow.onload = function() {\n    // process DOM elements here\n};\n\n// or\n\n// does not work IE 8 and below\ndocument.addEventListener('DOMContentLoaded', function() {\n    // process DOM elements here\n});\n\nPlease see the articles at quirksmode.org for more information regarding event handling and browser differences.\njQuery\nFirst make sure that jQuery is loaded properly. Use the browser's developer tools to find out whether the jQuery file was found and correct the URL if it wasn't (e.g. add the http: or https: scheme at the beginning, adjust the path, etc.)\nListening to the load/DOMContentLoaded  events is exactly what jQuery is doing with .ready() [docs]. All your jQuery code that affects DOM element should be inside that event handler.\nIn fact, the jQuery tutorial explicitly states:\n\nAs almost everything we do when using jQuery reads or manipulates the document object model (DOM), we need to make sure that we start adding events etc. as soon as the DOM is ready.\n\n\nTo do this, we register a ready event for the document.\n$(document).ready(function() {\n\n\n   // do stuff when DOM is ready\n});\n\nAlternatively you can also use the shorthand syntax:\n$(function() {\n    // do stuff when DOM is ready\n});\n\nBoth are equivalent.\n    ",
        "votes": 159,
        "comentarios": [
            {
                "decripcion": "Would it be worth amending the last bit about the ready event to reflect the \"newer\" preferred syntax, or is it better to leave it as-is so that it works across older versions?",
                "fecha": { "$date" : "2012-12-25T08:56:50Z" },
                "usuario": "Tieson T.",
                "usuario_id": 684
            },
            {
                "decripcion": "For jQuery, is it worth also adding in the alternative $(window).load() (and possibly syntactic alternatives to the $(document).ready(), $(function(){})? It seems related, but it feels slightly tangential to the point you're making.",
                "fecha": { "$date" : "2012-12-25T08:58:40Z" },
                "usuario": "David says reinstate Monica",
                "usuario_id": 685
            },
            {
                "decripcion": "@David: Good point with .load. Regarding syntax alternatives, they could be looked up in the documentation but since answers should be self contained, it might actually be worth adding them. Then again, I'm pretty sure this specific bit about jQuery was answered already and is probably covered in another answers and linking to it might suffice.",
                "fecha": { "$date" : "2012-12-25T09:00:55Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            },
            {
                "decripcion": "@David: I have to revise: Apparently .load is deprecated: api.jquery.com/load-event. I don't know if it's for images only or window as well.",
                "fecha": { "$date" : "2012-12-25T09:03:18Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            },
            {
                "decripcion": "@David: No worries :) Even if you are not sure, it's good that you mentioned it. I will probably add just some simple code snippets to show the usage. Thanks for your input!",
                "fecha": { "$date" : "2012-12-25T09:05:57Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 397,
        "fecha": { "$date" : "2017-05-23T12:18:24Z" },
        "decripcion": "\nIf the element you are trying to access is inside an iframe and you try to access it outside the context of the iframe this will also cause it to fail.\n\nIf you want to get an element in an iframe you can find out how here.\n    ",
        "votes": 16,
        "comentarios": [],
        "usuario": "George Mulligan",
        "usuario_id": 686
    },
    {
        "_id": 398,
        "fecha": { "$date" : "2017-11-12T00:54:00Z" },
        "decripcion": "\nReasons why id based selectors don't work\n\n\nThe element/DOM with id specified doesn't exist yet.\nThe element exists, but it is not registered in DOM [in case of HTML nodes appended dynamically from Ajax responses].\nMore than one element with the same id is present which is causing a conflict.\n\n\nSolutions\n\n\nTry to access the element after its declaration or alternatively use stuff like $(document).ready();\nFor elements coming from Ajax responses, use the .bind() method of jQuery. Older versions of jQuery had .live() for the same.\nUse tools [for example, webdeveloper plugin for browsers] to find duplicate ids and remove them.\n\n    ",
        "votes": 16,
        "comentarios": [],
        "usuario": "sumit",
        "usuario_id": 687
    },
    {
        "_id": 399,
        "fecha": { "$date" : "2013-12-06T17:29:33Z" },
        "decripcion": "\nAs @FelixKling pointed out, the most likely scenario is that the nodes you are looking for do not exist (yet).\n\nHowever, modern development practices can often manipulate document elements outside of the document tree either with DocumentFragments or simply detaching/reattaching current elements directly.  Such techniques may be used as part of JavaScript templating or to avoid excessive repaint/reflow operations while the elements in question are being heavily altered.\n\nSimilarly, the new \"Shadow DOM\" functionality being rolled out across modern browsers allows elements to be part of the document, but not query-able by document.getElementById and all of its sibling methods (querySelector, etc.). This is done to encapsulate functionality and specifically hide it.\n\nAgain, though, it is most likely that the element you are looking for simply is not (yet) in the document, and you should do as Felix suggests. However, you should also be aware that that is increasingly not the only reason that an element might be unfindable (either temporarily or permanently).\n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "Nathan Bubna",
        "usuario_id": 688
    },
    {
        "_id": 400,
        "fecha": { "$date" : "2020-09-27T22:58:11Z" },
        "decripcion": "\nIf script execution order is not the issue, another possible cause of the problem is that the element is not being selected properly:\n\ngetElementById requires the passed string to be the ID verbatim, and nothing else. If you prefix the passed string with a #, and the ID does not start with a #, nothing will be selected:\n  <div id=\"foo\"></div>\n\n  \n  // Error, selected element will be null:\n  document.getElementById('#foo')\n  // Fix:\n  document.getElementById('foo')\n\n\nSimilarly, for getElementsByClassName, don't prefix the passed string with a .:\n  <div class=\"bar\"></div>\n\n  \n  // Error, selected element will be undefined:\n  document.getElementsByClassName('.bar')[0]\n  // Fix:\n  document.getElementsByClassName('bar')[0]\n\n\nWith querySelector, querySelectorAll, and jQuery, to match an element with a particular class name, put a . directly before the class. Similarly, to match an element with a particular ID, put a # directly before the ID:\n  <div class=\"baz\"></div>\n\n  \n  // Error, selected element will be null:\n  document.querySelector('baz')\n  $('baz')\n  // Fix:\n  document.querySelector('.baz')\n  $('.baz')\n\nThe rules here are, in most cases, identical to those for CSS selectors, and can be seen in detail here.\n\nTo match an element which has two or more attributes (like two class names, or a class name and a data- attribute), put the selectors for each attribute next to each other in the selector string, without a space separating them (because a space indicates the descendant selector). For example, to select:\n  <div class=\"foo bar\"></div>\n\nuse the query string .foo.bar. To select\n  <div class=\"foo\" data-bar=\"someData\"></div>\n\nuse the query string .foo[data-bar=\"someData\"]. To select the <span> below:\n  <div class=\"parent\">\n    <span data-username=\"bob\"></span>\n  </div>\n\nuse div.parent > span[data-username=\"bob\"].\n\nCapitalization and spelling does matter for all of the above. If the capitalization is different, or the spelling is different, the element will not be selected:\n  <div class=\"result\"></div>\n\n  \n  // Error, selected element will be null:\n  document.querySelector('.results')\n  $('.Result')\n  // Fix:\n  document.querySelector('.result')\n  $('.result')\n\n\nYou also need to make sure the methods have the proper capitalization and spelling. Use one of:\n$(selector)\ndocument.querySelector\ndocument.querySelectorAll\ndocument.getElementsByClassName\ndocument.getElementsByTagName\ndocument.getElementById\n\nAny other spelling or capitalization will not work. For example, document.getElementByClassName will throw an error.\n\nMake sure you pass a string to these selector methods. If you pass something that isn't a string to querySelector, getElementById, etc, it almost certainly won't work.\n\nIf the HTML attributes on elements you want to select are surrounded by quotes, they must be plain straight quotes (either single or double); curly quotes like \u2018 or \u201d will not work if you're trying to select by ID, class, or attribute.\n\n\n    ",
        "votes": 11,
        "comentarios": [],
        "usuario": "CertainPerformance",
        "usuario_id": 635
    },
    {
        "_id": 401,
        "fecha": { "$date" : "2017-06-16T19:10:23Z" },
        "decripcion": "\nPreliminaries\n\nJavaScript has only one data type which can contain multiple values: Object. An Array is a special form of object.\n\n(Plain) Objects have the form\n\n{key: value, key: value, ...}\n\n\nArrays have the form\n\n[value, value, ...]\n\n\nBoth arrays and objects expose a key -> value structure. Keys in an array must be numeric, whereas any string can be used as key in objects. The key-value pairs are also called the \"properties\".\n\nProperties can be accessed either using dot notation\n\nconst value = obj.someProperty;\n\n\nor bracket notation, if the property name would not be a valid JavaScript identifier name [spec], or the name is the value of a variable:\n\n// the space is not a valid character in identifier names\nconst value = obj[\"some Property\"];\n\n// property name as variable\nconst name = \"some Property\";\nconst value = obj[name];\n\n\nFor that reason, array elements can only be accessed using bracket notation:\n\nconst value = arr[5]; // arr.5 would be a syntax error\n\n// property name / index as variable\nconst x = 5;\nconst value = arr[x];\n\n\nWait... what about JSON?\n\nJSON is a textual representation of data, just like XML, YAML, CSV, and others. To work with such data, it first has to be converted to JavaScript data types, i.e. arrays and objects (and how to work with those was just explained). How to parse JSON is explained in the question Parse JSON in JavaScript? .\n\nFurther reading material\n\nHow to access arrays and objects is fundamental JavaScript knowledge and therefore it is advisable to read the MDN JavaScript Guide, especially the sections\n\n\nWorking with Objects\nArrays\nEloquent JavaScript - Data Structures\n\n\n\n\n\n\nAccessing nested data structures\n\nA nested data structure is an array or object which refers to other arrays or objects, i.e. its values are arrays or objects. Such structures can be accessed by consecutively applying dot or bracket notation. \n\nHere is an example:\n\nconst data = {\n    code: 42,\n    items: [{\n        id: 1,\n        name: 'foo'\n    }, {\n        id: 2,\n        name: 'bar'\n    }]\n};\n\n\nLet's assume we want to access the name of the second item. \n\nHere is how we can do it step-by-step:\n\nAs we can see data is an object, hence we can access its properties using dot notation. The items property is accessed as follows:\n\ndata.items\n\n\nThe value is an array, to access its second element, we have to use bracket notation:\n\ndata.items[1]\n\n\nThis value is an object and we use dot notation again to access the name property. So we eventually get:\n\nconst item_name = data.items[1].name;\n\n\nAlternatively, we could have used bracket notation for any of the properties, especially if the name contained characters that would have made it invalid for dot notation usage:\n\nconst item_name = data['items'][1]['name'];\n\n\n\n\nI'm trying to access a property but I get only undefined back?\n\nMost of the time when you are getting undefined, the object/array simply doesn't have a property with that name.\n\nconst foo = {bar: {baz: 42}};\nconsole.log(foo.baz); // undefined\n\n\nUse console.log or console.dir and inspect the structure of object / array. The property you are trying to access might be actually defined on a nested object / array.\n\nconsole.log(foo.bar.baz); // 42\n\n\n\n\nWhat if the property names are dynamic and I don't know them beforehand?\n\nIf the property names are unknown or we want to access all properties of an object / elements of an array, we can use the for...in [MDN] loop for objects and the for [MDN] loop for arrays to iterate over all properties / elements.\n\nObjects\n\nTo iterate over all properties of data, we can iterate over the object like so:\n\nfor (const prop in data) {\n    // `prop` contains the name of each property, i.e. `'code'` or `'items'`\n    // consequently, `data[prop]` refers to the value of each property, i.e.\n    // either `42` or the array\n}\n\n\nDepending on where the object comes from (and what you want to do), you might have to test in each iteration whether the property is really a property of the object, or it is an inherited property. You can do this with Object#hasOwnProperty [MDN].\n\nAs alternative to for...in with hasOwnProperty, you can use Object.keys [MDN] to get an array of property names:\n\nObject.keys(data).forEach(function(prop) {\n  // `prop` is the property name\n  // `data[prop]` is the property value\n});\n\n\nArrays\n\nTo iterate over all elements of the data.items array, we use a for loop:\n\nfor(let i = 0, l = data.items.length; i < l; i++) {\n    // `i` will take on the values `0`, `1`, `2`,..., i.e. in each iteration\n    // we can access the next element in the array with `data.items[i]`, example:\n    // \n    // var obj = data.items[i];\n    // \n    // Since each element is an object (in our example),\n    // we can now access the objects properties with `obj.id` and `obj.name`. \n    // We could also use `data.items[i].id`.\n}\n\n\nOne could also use for...in to iterate over arrays, but there are reasons why this should be avoided: Why is 'for(var item in list)' with arrays considered bad practice in JavaScript?.\n\nWith the increasing browser support of ECMAScript 5, the array method forEach [MDN] becomes an interesting alternative as well:\n\ndata.items.forEach(function(value, index, array) {\n    // The callback is executed for each element in the array.\n    // `value` is the element itself (equivalent to `array[index]`)\n    // `index` will be the index of the element in the array\n    // `array` is a reference to the array itself (i.e. `data.items` in this case)\n}); \n\n\nIn environments supporting ES2015 (ES6), you can also use the for...of [MDN] loop, which not only works for arrays, but for any iterable:\n\nfor (const item of data.items) {\n   // `item` is the array element, **not** the index\n}\n\n\nIn each iteration, for...of directly gives us the next element of the iterable, there is no \"index\" to access or use.\n\n\n\nWhat if the \"depth\" of the data structure is unknown to me?\n\nIn addition to unknown keys, the \"depth\" of the data structure (i.e. how many nested objects) it has, might be unknown as well. How to access deeply nested properties usually depends on the exact data structure.\n\nBut if the data structure contains repeating patterns, e.g. the representation of a binary tree, the solution typically includes to recursively [Wikipedia] access each level of the data structure.\n\nHere is an example to get the first leaf node of a binary tree:\n\nfunction getLeaf(node) {\n    if (node.leftChild) {\n        return getLeaf(node.leftChild); // <- recursive call\n    }\n    else if (node.rightChild) {\n        return getLeaf(node.rightChild); // <- recursive call\n    }\n    else { // node must be a leaf node\n        return node;\n    }\n}\n\nconst first_leaf = getLeaf(root);\n\n\nShow code snippet\n\nconst root = {\n    leftChild: {\n        leftChild: {\n            leftChild: null,\n            rightChild: null,\n            data: 42\n        },\n        rightChild: {\n            leftChild: null,\n            rightChild: null,\n            data: 5\n        }\n    },\n    rightChild: {\n        leftChild: {\n            leftChild: null,\n            rightChild: null,\n            data: 6\n        },\n        rightChild: {\n            leftChild: null,\n            rightChild: null,\n            data: 7\n        }\n    }\n};\nfunction getLeaf(node) {\n    if (node.leftChild) {\n        return getLeaf(node.leftChild);\n    } else if (node.rightChild) {\n        return getLeaf(node.rightChild);\n    } else { // node must be a leaf node\n        return node;\n    }\n}\n\nconsole.log(getLeaf(root).data);\n Run code snippetHide resultsExpand snippet\n\n\n\nA more generic way to access a nested data structure with unknown keys and depth is to test the type of the value and act accordingly.\n\nHere is an example which adds all primitive values inside a nested data structure into an array (assuming it does not contain any functions). If we encounter an object (or array) we simply call toArray again on that value (recursive call).\n\nfunction toArray(obj) {\n    const result = [];\n    for (const prop in obj) {\n        const value = obj[prop];\n        if (typeof value === 'object') {\n            result.push(toArray(value)); // <- recursive call\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n\n\nShow code snippet\n\nconst data = {\n  code: 42,\n  items: [{\n    id: 1,\n    name: 'foo'\n  }, {\n    id: 2,\n    name: 'bar'\n  }]\n};\n\n\nfunction toArray(obj) {\n  const result = [];\n  for (const prop in obj) {\n    const value = obj[prop];\n    if (typeof value === 'object') {\n      result.push(toArray(value));\n    } else {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nconsole.log(toArray(data));\n Run code snippetHide resultsExpand snippet\n\n\n\n\n\n\n\nHelpers\n\nSince the structure of a complex object or array is not necessarily obvious, we can inspect the value at each step to decide how to move further. console.log [MDN] and console.dir [MDN] help us doing this. For example (output of the Chrome console):\n\n> console.log(data.items)\n [ Object, Object ]\n\n\nHere we see that that data.items is an array with two elements which are both objects. In Chrome console the objects can even be expanded and inspected immediately.\n\n> console.log(data.items[1])\n  Object\n     id: 2\n     name: \"bar\"\n     __proto__: Object\n\n\nThis tells us that data.items[1] is an object, and after expanding it we see that it has three properties, id, name and __proto__. The latter is an internal property used for the prototype chain of the object. The prototype chain and inheritance is out of scope for this answer, though.\n    ",
        "votes": 1332,
        "comentarios": [
            {
                "decripcion": "Some of what's being linked here is really asking how to do this in jQuery, which to be fair does simplify 1 or 2 things here. Not sure whether to make this more of a megapost or answer those separately - the basics covered here on what's an object what's an array are usually what's really being asked... .",
                "fecha": { "$date" : "2013-04-02T09:29:45Z" },
                "usuario": "Chris Moschini",
                "usuario_id": 487
            },
            {
                "decripcion": "@felix-kling One thing... with nested objects, such as let object = {a: 1, b: 2, c: { a: 3, b: 4 }};, this returns an array containing an array for each nested object, in this case [ 1, 2, [ 3, 4 ] ] Wouldn't it be better to to use concat in the recursive call instead of push ? (requiring result to be mutable)",
                "fecha": { "$date" : "2018-05-03T15:44:25Z" },
                "usuario": "ElFitz",
                "usuario_id": 689
            },
            {
                "decripcion": "this one page made me learn the difference between ARRAY and OBJ",
                "fecha": { "$date" : "2020-02-19T09:09:18Z" },
                "usuario": "curiousKido",
                "usuario_id": 690
            },
            {
                "decripcion": "Remember to update \u201cJavaScript has only one data type which can contain multiple values: Object.\u201d once the records and tuples proposal is finished.",
                "fecha": { "$date" : "2021-06-24T16:21:14Z" },
                "usuario": "Sebastian Simon",
                "usuario_id": 573
            },
            {
                "decripcion": "I believe that your answer on retrieving property names and values dynamically for a JS object is the most clear and well-written piece of code on the internet.",
                "fecha": { "$date" : "2021-08-22T17:27:58Z" },
                "usuario": "user2954658",
                "usuario_id": 691
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 402,
        "fecha": { "$date" : "2013-05-14T03:29:19Z" },
        "decripcion": "\nYou can access it this way\n\ndata.items[1].name\n\n\nor\n\ndata[\"items\"][1][\"name\"]\n\n\nBoth ways are equal.\n    ",
        "votes": 88,
        "comentarios": [
            {
                "decripcion": "First is far more intuitive, readable and shorter ;) I prefer using bracket property syntax only when the property name is variable.",
                "fecha": { "$date" : "2017-10-02T11:59:58Z" },
                "usuario": "DanteTheSmith",
                "usuario_id": 692
            }
        ],
        "usuario": "vitmalina",
        "usuario_id": 693
    },
    {
        "_id": 403,
        "fecha": { "$date" : "2016-10-22T18:38:41Z" },
        "decripcion": "\nObjects and arrays has a lot of built-in methods that can help you with processing data.\n\nNote: in many of the examples I'm using arrow functions. They are similar to function expressions, but they bind the this value lexically.\n\nObject.keys(), Object.values() (ES 2017) and Object.entries() (ES 2017)\n\nObject.keys() returns an array of object's keys, Object.values() returns an array of object's values, and Object.entries() returns an array of object's keys and corresponding values in a format [key, value].\n\n\n\nconst obj = {\n  a: 1\n ,b: 2\n ,c: 3\n}\n\nconsole.log(Object.keys(obj)) // ['a', 'b', 'c']\nconsole.log(Object.values(obj)) // [1, 2, 3]\nconsole.log(Object.entries(obj)) // [['a', 1], ['b', 2], ['c', 3]]\n Run code snippetHide resultsExpand snippet\n\n\n\nObject.entries() with a for-of loop and destructuring assignment\n\n\n\nconst obj = {\n  a: 1\n ,b: 2\n ,c: 3\n}\n\nfor (const [key, value] of Object.entries(obj)) {\n  console.log(`key: ${key}, value: ${value}`)\n}\n Run code snippetHide resultsExpand snippet\n\n\n\nIt's very convenient to iterate the result of Object.entries() with a for-of loop and destructuring assignment.\n\nFor-of loop lets you iterate array elements. The syntax is for (const element of array) (we can replace const with var or let, but it's better to use const if we don't intend to modify element).\n\nDestructuring assignment lets you extract values from an array or an object and assign them to variables. In this case const [key, value] means that instead of assigning the [key, value] array to element, we assign the first element of that array to key and the second element to value. It is equivalent to this:\n\nfor (const element of Object.entries(obj)) {\n  const key = element[0]\n       ,value = element[1]\n}\n\n\nAs you can see, destructuring makes this a lot simpler.\n\nArray.prototype.every() and Array.prototype.some()\n\nThe every() method returns true if the specified callback function returns true for every element of the array. The some() method returns true if the specified callback function returns true for some (at least one) element.\n\n\n\nconst arr = [1, 2, 3]\n\n// true, because every element is greater than 0\nconsole.log(arr.every(x => x > 0))\n// false, because 3^2 is greater than 5\nconsole.log(arr.every(x => Math.pow(x, 2) < 5))\n// true, because 2 is even (the remainder from dividing by 2 is 0)\nconsole.log(arr.some(x => x % 2 === 0))\n// false, because none of the elements is equal to 5\nconsole.log(arr.some(x => x === 5))\n Run code snippetHide resultsExpand snippet\n\n\n\nArray.prototype.find() and Array.prototype.filter()\n\nThe find() methods returns the first element which satisfies the provided callback function. The filter() method returns an array of all elements which satisfies the provided callback function.\n\n\n\nconst arr = [1, 2, 3]\n\n// 2, because 2^2 !== 2\nconsole.log(arr.find(x => x !== Math.pow(x, 2)))\n// 1, because it's the first element\nconsole.log(arr.find(x => true))\n// undefined, because none of the elements equals 7\nconsole.log(arr.find(x => x === 7))\n\n// [2, 3], because these elements are greater than 1\nconsole.log(arr.filter(x => x > 1))\n// [1, 2, 3], because the function returns true for all elements\nconsole.log(arr.filter(x => true))\n// [], because none of the elements equals neither 6 nor 7\nconsole.log(arr.filter(x => x === 6 || x === 7))\n Run code snippetHide resultsExpand snippet\n\n\n\nArray.prototype.map()\n\nThe map() method returns an array with the results of calling a provided callback function on the array elements.\n\n\n\nconst arr = [1, 2, 3]\n\nconsole.log(arr.map(x => x + 1)) // [2, 3, 4]\nconsole.log(arr.map(x => String.fromCharCode(96 + x))) // ['a', 'b', 'c']\nconsole.log(arr.map(x => x)) // [1, 2, 3] (no-op)\nconsole.log(arr.map(x => Math.pow(x, 2))) // [1, 4, 9]\nconsole.log(arr.map(String)) // ['1', '2', '3']\n Run code snippetHide resultsExpand snippet\n\n\n\nArray.prototype.reduce()\n\nThe reduce() method reduces an array to a single value by calling the provided callback function with two elements.\n\n\n\nconst arr = [1, 2, 3]\n\n// Sum of array elements.\nconsole.log(arr.reduce((a, b) => a + b)) // 6\n// The largest number in the array.\nconsole.log(arr.reduce((a, b) => a > b ? a : b)) // 3\n Run code snippetHide resultsExpand snippet\n\n\n\nThe reduce() method takes an optional second parameter, which is the initial value. This is useful when the array on which you call reduce() can has zero or one elements. For example, if we wanted to create a function sum() which takes an array as an argument and returns the sum of all elements, we could write it like that:\n\n\n\nconst sum = arr => arr.reduce((a, b) => a + b, 0)\n\nconsole.log(sum([]))     // 0\nconsole.log(sum([4]))    // 4\nconsole.log(sum([2, 5])) // 7\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 39,
        "comentarios": [
            {
                "decripcion": "This is my favourite answer. You also could add an example for loop just an expecific nested data, like Object.keys(data[\"items\"]).forEach(function(key) {       console.log(data[\"items\"][key].id);       console.log(data[\"items\"][key].name);  });",
                "fecha": { "$date" : "2019-08-26T13:01:13Z" },
                "usuario": "SilverSurfer",
                "usuario_id": 694
            }
        ],
        "usuario": "Micha\u0142 Per\u0142akowski",
        "usuario_id": 526
    },
    {
        "_id": 404,
        "fecha": { "$date" : "2014-01-13T10:25:38Z" },
        "decripcion": "\nIn case you're trying to access an item from the example structure by id or name, without knowing it's position in the array, the easiest way to do it would be to use underscore.js library:\n\nvar data = {\n    code: 42,\n    items: [{\n        id: 1,\n        name: 'foo'\n    }, {\n        id: 2,\n        name: 'bar'\n    }]\n};\n\n_.find(data.items, function(item) {\n  return item.id === 2;\n});\n// Object {id: 2, name: \"bar\"}\n\n\nFrom my experience, using higher order functions instead of for or for..in loops results in code that is easier to reason about, and hence more maintainable.\n\nJust my 2 cents.\n    ",
        "votes": 36,
        "comentarios": [],
        "usuario": "holographic-principle",
        "usuario_id": 695
    },
    {
        "_id": 405,
        "fecha": { "$date" : "2017-05-23T12:10:54Z" },
        "decripcion": "\nAt times, accessing a nested object using a string can be desirable. The simple approach is the first level, for example\n\nvar obj = { hello: \"world\" };\nvar key = \"hello\";\nalert(obj[key]);//world\n\n\nBut this is often not the case with complex json. As json becomes more complex, the approaches for finding values inside of the json also become complex. A recursive approach for navigating the json is best, and how that recursion is leveraged will depend on the type of data being searched for. If there are conditional statements involved, a json search can be a good tool to use.\n\nIf the property being accessed is already known, but the path is complex, for example in this object\n\nvar obj = {\n arr: [\n    { id: 1, name: \"larry\" },    \n    { id: 2, name: \"curly\" },\n    { id: 3, name: \"moe\" }\n ]\n};\n\n\nAnd you know you want to get the first result of the array in the object, perhaps you would like to use\n\nvar moe = obj[\"arr[0].name\"];\n\n\nHowever, that will cause an exception as there is no property of object with that name. The solution to be able to use this would be to flatten the tree aspect of the object. This can be done recursively.\n\nfunction flatten(obj){\n var root = {};\n (function tree(obj, index){\n   var suffix = toString.call(obj) == \"[object Array]\" ? \"]\" : \"\";\n   for(var key in obj){\n    if(!obj.hasOwnProperty(key))continue;\n    root[index+key+suffix] = obj[key];\n    if( toString.call(obj[key]) == \"[object Array]\" )tree(obj[key],index+key+suffix+\"[\");\n    if( toString.call(obj[key]) == \"[object Object]\" )tree(obj[key],index+key+suffix+\".\");   \n   }\n })(obj,\"\");\n return root;\n}\n\n\nNow, the complex object can be flattened\n\nvar obj = previous definition;\nvar flat = flatten(obj);\nvar moe = flat[\"arr[0].name\"];//moe\n\n\nHere is a jsFiddle Demo of this approach being used.\n    ",
        "votes": 27,
        "comentarios": [
            {
                "decripcion": "WTH would you want to use obj[\"arr[0].name\"] instead of obj.arr[0].name? You hardly need/want to deal with flattened objects except for serialisation.",
                "fecha": { "$date" : "2014-08-19T16:00:14Z" },
                "usuario": "Bergi",
                "usuario_id": 662
            },
            {
                "decripcion": "@Bergi - I see this question commonly, and since this is being used canonically, I posted an answer to that version of it. If it is avoidable it is much faster to use obj.arr[0].name, but sometimes people want to pass string accessors around and this is an example of doing that.",
                "fecha": { "$date" : "2014-08-19T17:28:03Z" },
                "usuario": "Travis J",
                "usuario_id": 620
            },
            {
                "decripcion": "Urgh. Still, there's hardly a reason to flatten the complete object only to use a single string path, you could simply parse that and do a dynamic lookup.",
                "fecha": { "$date" : "2014-08-19T17:29:57Z" },
                "usuario": "Bergi",
                "usuario_id": 662
            }
        ],
        "usuario": "Travis J",
        "usuario_id": 620
    },
    {
        "_id": 406,
        "fecha": { "$date" : "2018-02-15T10:17:33Z" },
        "decripcion": "\nTo access a nested attribute, you need to specify its name and then search through the object.\n\nIf you already know the exact path, then you can hardcode it in your script like so:\n\ndata['items'][1]['name']\n\n\nthese also work -\n\ndata.items[1].name\ndata['items'][1].name\ndata.items[1]['name']\n\n\nWhen you don't know the exact name before hand, or a user is the one who provides the name for you. Then dynamically searching through the data structure is required. Some suggested here that the search can be done using a for loop, but there is a very simple way to traverse a path using Array.reduce.\n\nconst data = { code: 42, items: [{ id: 1, name: 'foo' }, { id: 2, name: 'bar' }] }\nconst path = [ 'items', '1', 'name']\nlet result = path.reduce((a,v) => a[v], data)\n\n\nThe path is a way to say: First take the object with key items, which happens to be an array. Then take the 1-st element (0 index arrays). Last take the object with key name in that array element, which happens to be the string bar.\n\nIf you have a very long path, you might even use String.split to make all of this easier -\n\n'items.1.name'.split('.').reduce((a,v) => a[v], data)\n\n\nThis is just plain JavaScript, without using any third party libraries like jQuery or lodash.\n    ",
        "votes": 19,
        "comentarios": [],
        "usuario": "Evgeny",
        "usuario_id": 696
    },
    {
        "_id": 407,
        "fecha": { "$date" : "2021-08-12T12:38:27Z" },
        "decripcion": "\nIt's simple explanation:\n\n\nvar data = {\n    code: 42,\n    items: [{\n        id: 1,\n        name: 'foo'\n    }, {\n        id: 2,\n        name: 'bar'\n    }]\n};\n\n/*\n1. `data` is object contain `items` object*/\nconsole.log(data);\n\n/*\n2. `items` object contain array of two objects as elements*/\nconsole.log(data.items);\n\n/*\n3. you need 2nd element of array - the `1` from `[0, 1]`*/\nconsole.log(data.items[1]);\n\n/*\n4. and you need value of `name` property of 2nd object-element of array)*/\nconsole.log(data.items[1].name);\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 15,
        "comentarios": [
            {
                "decripcion": "Just would like to comment on this one real quick since the author of this question didn't pick a best answer. This would actually be the best answer. So anyone else is looking for an answer to this, this is best.",
                "fecha": { "$date" : "2020-11-01T15:50:02Z" },
                "usuario": "Jonathan J. Pecany",
                "usuario_id": 697
            }
        ],
        "usuario": "timnavigate",
        "usuario_id": 698
    },
    {
        "_id": 408,
        "fecha": { "$date" : "2016-08-25T09:32:21Z" },
        "decripcion": "\nThis question is quite old, so as a contemporary update. With the onset of ES2015 there are alternatives to get a hold of the data you require. There is now a feature called object destructuring for accessing nested objects.\n\n\n\nconst data = {\n  code: 42,\n  items: [{\n    id: 1,\n    name: 'foo'\n  }, {\n    id: 2,\n    name: 'bar'\n  }]\n};\n\nconst {\n  items: [, {\n    name: secondName\n  }]\n} = data;\n\nconsole.log(secondName);\n Run code snippetHide resultsExpand snippet\n\n\n\nThe above example creates a variable called secondName from the name key from an array called items, the lonely , says skip the first object in the array. \n\nNotably it's probably overkill for this example, as simple array acccess is easier to read, but it comes in useful when breaking apart objects in general. \n\nThis is very brief intro to your specific use case, destructuring can be an unusual syntax to get used to at first. I'd recommend reading Mozilla's Destructuring Assignment documentation to learn more.\n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "Alex KeySmith",
        "usuario_id": 699
    },
    {
        "_id": 409,
        "fecha": { "$date" : "2017-07-03T04:24:27Z" },
        "decripcion": "\nYou could use lodash _get function:\n\nvar object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.get(object, 'a[0].b.c');\n// => 3\n\n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "Sergey ",
        "usuario_id": 700
    },
    {
        "_id": 410,
        "fecha": { "$date" : "2019-07-18T15:03:14Z" },
        "decripcion": "\nvar ourStorage = {\n\n\n\"desk\":    {\n    \"drawer\": \"stapler\"\n  },\n\"cabinet\": {\n    \"top drawer\": { \n      \"folder1\": \"a file\",\n      \"folder2\": \"secrets\"\n    },\n    \"bottom drawer\": \"soda\"\n  }\n};\nourStorage.cabinet[\"top drawer\"].folder2; // Outputs -> \"secrets\"\n\n\nor\n\n//parent.subParent.subsubParent[\"almost there\"][\"final property\"]\n\n\nBasically, use a dot between each descendant that unfolds underneath it and when you have object names made out of two strings, you must use the [\"obj Name\"] notation. Otherwise, just a dot would suffice;\n\nSource:  https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-objects\n\nto add to this, accessing nested Arrays would happen like so:\n\nvar ourPets = [\n  {\n    animalType: \"cat\",\n    names: [\n      \"Meowzer\",\n      \"Fluffy\",\n      \"Kit-Cat\"\n    ]\n  },\n  {\n    animalType: \"dog\",\n    names: [\n      \"Spot\",\n      \"Bowser\",\n      \"Frankie\"\n    ]\n  }\n];\nourPets[0].names[1]; // Outputs \"Fluffy\"\nourPets[1].names[0]; // Outputs \"Spot\"\n\n\nSource: https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-arrays/\n\nAnother more useful document depicting the situation above: \nhttps://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics#Bracket_notation\n\nProperty access via dot walking: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors#Dot_notation\n    ",
        "votes": 14,
        "comentarios": [
            {
                "decripcion": "While this link may answer the question, it is better to include the essential parts of the answer here and provide the link for reference.  Link-only answers can become invalid if the linked page changes. - From Review",
                "fecha": { "$date" : "2018-08-19T23:33:00Z" },
                "usuario": "Robert",
                "usuario_id": 138
            },
            {
                "decripcion": "I edited the post. Allthough people were quick to give bad rep to it.  Next time I'll refrain from giving an answer.",
                "fecha": { "$date" : "2018-08-20T00:04:32Z" },
                "usuario": "Johnny",
                "usuario_id": 701
            },
            {
                "decripcion": "@Riddick don't refrain, just make sure you don't post only a link",
                "fecha": { "$date" : "2018-09-27T18:02:13Z" },
                "usuario": "reggaeguitar",
                "usuario_id": 702
            }
        ],
        "usuario": "Johnny",
        "usuario_id": 701
    },
    {
        "_id": 411,
        "fecha": { "$date" : "2018-07-09T04:01:48Z" },
        "decripcion": "\nJust in case, anyone's visiting this question in 2017 or later and looking for an easy-to-remember way, here's an elaborate blog post on Accessing Nested Objects in JavaScript without being bamboozled by \n\nCannot read property 'foo' of undefined error\n\n1. Oliver Steele's nested object access pattern\n\nThe easiest and the cleanest way is to use Oliver Steele's nested object access pattern\n\nconst name = ((user || {}).personalInfo || {}).name;\n\n\nWith this notation, you'll never run into\n\nCannot read property 'name' of undefined. \n\nYou basically check if user exists, if not, you create an empty object on the fly. This way, the next level key will always be accessed from an object that exists or an empty object, but never from undefined.\n\n2. Access Nested Objects Using Array Reduce\n\nTo be able to access nested arrays, you can write your own array reduce util.\n\nconst getNestedObject = (nestedObj, pathArr) => {\n    return pathArr.reduce((obj, key) =>\n        (obj && obj[key] !== 'undefined') ? obj[key] : undefined, nestedObj);\n}\n\n// pass in your object structure as array elements\nconst name = getNestedObject(user, ['personalInfo', 'name']);\n\n// to access nested array, just pass in array index as an element the path array.\nconst city = getNestedObject(user, ['personalInfo', 'addresses', 0, 'city']);\n// this will return the city from the first address item.\n\n\nThere is also an excellent type handling minimal library typy that does all this for you.\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "This question is primarily about access properties that exist. There is already a question about what you are referring to (and already including most of your solutions): Access Javascript nested objects safely or Accessing nested JavaScript objects with string key. But anyway: \"Unfortunately, you cannot access nested arrays with this trick.\" Why not? Arrays are objects, so it should work just as well. Can you provide an example where it does not?",
                "fecha": { "$date" : "2018-07-07T15:47:32Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            },
            {
                "decripcion": "@FelixKling When we try to access arrays with Oliver Steele pattern, we won't be able to create array on 'n' length on the fly and access nth index without getting 'undefined' error. Ex. ((user || {}).address || new Array(3))[1].name",
                "fecha": { "$date" : "2018-07-08T16:20:08Z" },
                "usuario": "Dinesh Pandiyan",
                "usuario_id": 703
            },
            {
                "decripcion": "You are not applying your pattern consistently. Of course ...[1].bar would result in an error if the element 1 didn't exist. But that's also the case for ....foo.bar if foo didn't exist. You have to \"guard\" accessing 1 as well, just like you \"guard\" any other property access. An array is just an object. An \"array element\" is just a property. Correctly applied it would be (((user || {}).address || {})[1] || {}).name.",
                "fecha": { "$date" : "2018-07-09T03:49:34Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            },
            {
                "decripcion": "This is great. It didn't strike me this way. Thank @FelixKling, I'll go update the blog posts.",
                "fecha": { "$date" : "2018-07-09T04:01:06Z" },
                "usuario": "Dinesh Pandiyan",
                "usuario_id": 703
            },
            {
                "decripcion": "@DineshPandiyan you should disclose that you're the author of typy, I just came here after reading your blog post",
                "fecha": { "$date" : "2018-09-27T18:03:58Z" },
                "usuario": "reggaeguitar",
                "usuario_id": 702
            }
        ],
        "usuario": "Dinesh Pandiyan",
        "usuario_id": 703
    },
    {
        "_id": 412,
        "fecha": { "$date" : "2020-04-08T06:16:55Z" },
        "decripcion": "\nAccessing dynamically multi levels object.\n\nvar obj = {\n  name: \"john doe\",\n  subobj: {\n    subsubobj: {\n      names: \"I am sub sub obj\"\n    }\n  }\n};\n\nvar level = \"subobj.subsubobj.names\";\nlevel = level.split(\".\");\n\nvar currentObjState = obj;\n\nfor (var i = 0; i < level.length; i++) {\n  currentObjState = currentObjState[level[i]];\n}\n\nconsole.log(currentObjState);\n\n\nWorking fiddle: https://jsfiddle.net/andreitodorut/3mws3kjL/\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "Andrei Todorut",
        "usuario_id": 704
    },
    {
        "_id": 413,
        "fecha": { "$date" : "2021-02-24T03:05:57Z" },
        "decripcion": "\nHere are 4 different methods mentioned to get the object property:\n\n\nvar data = {\n  code: 42,\n  items: [{\n    id: 1,\n    name: 'foo'\n  }, {\n    id: 2,\n    name: 'bar'\n  }]\n};\n// Method 1\nlet method1 = data.items[1].name;\nconsole.log(method1);\n\n// Method 2\nlet method2 = data.items[1][\"name\"];\nconsole.log(method2);\n\n// Method 3\nlet method3 = data[\"items\"][1][\"name\"];\nconsole.log(method3);\n\n// Method 4  Destructuring\nlet { items: [, { name: second_name }] } = data;\nconsole.log(second_name);\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 10,
        "comentarios": [
            {
                "decripcion": "This answer doesn't add anything that isn't already in one of the other answers (like the accepted one)",
                "fecha": { "$date" : "2021-02-26T11:45:46Z" },
                "usuario": "Andreas",
                "usuario_id": 705
            }
        ],
        "usuario": "Satish Chandra Gupta",
        "usuario_id": 706
    },
    {
        "_id": 414,
        "fecha": { "$date" : "2014-06-26T12:43:46Z" },
        "decripcion": "\nUsing JSONPath would be one of the most flexible solutions if you are willing to include a library:\nhttps://github.com/s3u/JSONPath (node and browser)\n\nFor your use case the json path would be:\n\n$..items[1].name\n\n\nso:\n\nvar secondName = jsonPath.eval(data, \"$..items[1].name\");\n\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "Using eval() is not good solution. Instead first class function can be used.",
                "fecha": { "$date" : "2017-09-27T12:18:44Z" },
                "usuario": "pradeep gowda",
                "usuario_id": 707
            }
        ],
        "usuario": "Andrejs",
        "usuario_id": 708
    },
    {
        "_id": 415,
        "fecha": { "$date" : "2020-03-18T16:04:07Z" },
        "decripcion": "\nI prefer JQuery. It's cleaner and easy to read.\n\n$.each($.parseJSON(data), function (key, value) {\n  alert(value.<propertyname>);\n});\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Rudy Hinojosa",
        "usuario_id": 709
    },
    {
        "_id": 416,
        "fecha": { "$date" : "2015-06-18T08:35:05Z" },
        "decripcion": "\nIf you are looking for one or more objects that meets certain criteria you have a few options using query-js\n\n//will return all elements with an id larger than 1\ndata.items.where(function(e){return e.id > 1;});\n//will return the first element with an id larger than 1\ndata.items.first(function(e){return e.id > 1;});\n//will return the first element with an id larger than 1 \n//or the second argument if non are found\ndata.items.first(function(e){return e.id > 1;},{id:-1,name:\"\"});\n\n\nThere's also a single and a singleOrDefault they work much like firstand firstOrDefaultrespectively. The only difference is that they will throw if more than one match is found.\n\nfor further explanation of query-js you can start with this post\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "I would love to know how this could be improved. Care to leave a comment?",
                "fecha": { "$date" : "2015-06-18T18:42:28Z" },
                "usuario": "Rune FS",
                "usuario_id": 629
            }
        ],
        "usuario": "Rune FS",
        "usuario_id": 629
    },
    {
        "_id": 417,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nThe Underscore js Way\nWhich is a JavaScript library that provides a whole mess of useful functional programming helpers without extending any built-in objects.\nSolution:\n\nvar data = {\n  code: 42,\n  items: [{\n    id: 1,\n    name: 'foo'\n  }, {\n    id: 2,\n    name: 'bar'\n  }]\n};\n\nvar item = _.findWhere(data.items, {\n  id: 2\n});\nif (!_.isUndefined(item)) {\n  console.log('NAME =>', item.name);\n}\n\n//using find - \n\nvar item = _.find(data.items, function(item) {\n  return item.id === 2;\n});\n\nif (!_.isUndefined(item)) {\n  console.log('NAME =>', item.name);\n}\n\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Mohan Dere",
        "usuario_id": 535
    },
    {
        "_id": 418,
        "fecha": { "$date" : "2017-07-01T11:46:35Z" },
        "decripcion": "\nOld question but as nobody mentioned lodash (just underscore).\n\nIn case you are already using lodash in your project, I think an elegant way to do this in a complex example:\n\nOpt 1\n\n_.get(response, ['output', 'fund', 'data', '0', 'children', '0', 'group', 'myValue'], '')\n\n\nsame as:\n\nOpt 2\n\nresponse.output.fund.data[0].children[0].group.myValue\n\n\nThe difference between the first and second option is that in the Opt 1 if you have one of the properties missing (undefined) in the path you don't get an error, it returns you the third parameter.\n\nFor array filter lodash has _.find() but I'd rather use the regular filter(). But I still think the above method _.get() is super useful when working with really complex data. I faced in the past really complex APIs and it was handy!\n\nI hope it can be useful for who's looking for options to manipulate really complex data which the title implies.\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Thiago C. S Ventura",
        "usuario_id": 710
    },
    {
        "_id": 419,
        "fecha": { "$date" : "2017-02-22T09:00:32Z" },
        "decripcion": "\nI don't think questioner just only concern one level nested object, so I present the following demo to demonstrate how to access the node of deeply nested json object. All right, let's find the node with id '5'.\n\n\n\nvar data = {\n  code: 42,\n  items: [{\n    id: 1,\n    name: 'aaa',\n    items: [{\n        id: 3,\n        name: 'ccc'\n      }, {\n        id: 4,\n        name: 'ddd'\n      }]\n    }, {\n    id: 2,\n    name: 'bbb',\n    items: [{\n        id: 5,\n        name: 'eee'\n      }, {\n        id: 6,\n        name: 'fff'\n      }]\n    }]\n};\n\nvar jsonloop = new JSONLoop(data, 'id', 'items');\n\njsonloop.findNodeById(data, 5, function(err, node) {\n  if (err) {\n    document.write(err);\n  } else {\n    document.write(JSON.stringify(node, null, 2));\n  }\n});\n<script src=\"https://rawgit.com/dabeng/JSON-Loop/master/JSONLoop.js\"></script>\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "How do I access nested json object using variables. data = {a: {b:'ss'}}; var key = a.b data[key] not working",
                "fecha": { "$date" : "2017-11-14T20:51:19Z" },
                "usuario": "Pasupathi Rajamanickam",
                "usuario_id": 711
            }
        ],
        "usuario": "dabeng",
        "usuario_id": 712
    },
    {
        "_id": 420,
        "fecha": { "$date" : "2020-01-08T06:51:29Z" },
        "decripcion": "\nIn 2020, you can use @babel/plugin-proposal-optional-chaining it is very easy to access nested values in an object. \n\n const obj = {\n foo: {\n   bar: {\n     baz: class {\n   },\n  },\n },\n};\n\nconst baz = new obj?.foo?.bar?.baz(); // baz instance\n\nconst safe = new obj?.qux?.baz(); // undefined\nconst safe2 = new obj?.foo.bar.qux?.(); // undefined\n\n\nhttps://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining\n\nhttps://github.com/tc39/proposal-optional-chaining\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Rathore",
        "usuario_id": 713
    },
    {
        "_id": 421,
        "fecha": { "$date" : "2020-05-01T12:49:14Z" },
        "decripcion": "\nDynamic approach\n\nIn below deep(data,key) function, you can use arbitrary key string - in your case items[1].name (you can use array notation [i] at any level) - if key is invalid then undefined is return.\n\nShow code snippet\n\nlet deep = (o,k) => k.split('.').reduce((a,c,i) => {\n    let m=c.match(/(.*?)\\[(\\d*)\\]/);\n    if(m && a!=null && a[m[1]]!=null) return a[m[1]][+m[2]];\n    return a==null ? a: a[c];\n},o);\n\n// TEST\n\nlet key = 'items[1].name' // arbitrary deep-key\n\nlet data = {\n    code: 42,\n    items: [{ id: 11, name: 'foo'}, { id: 22, name: 'bar'},]\n};\n\nconsole.log( key,'=', deep(data,key) );\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Kamil Kie\u0142czewski",
        "usuario_id": 714
    },
    {
        "_id": 422,
        "fecha": { "$date" : "2021-07-20T16:03:57Z" },
        "decripcion": "\nYou can use the syntax jsonObject.key to access the the value. And if you want access a value from an array, then you can use the syntax jsonObjectArray[index].key.\nHere are the code examples to access various values to give you the idea.\n\n\nvar data = {\n    code: 42,\n    items: [{\n        id: 1,\n        name: 'foo'\n    }, {\n        id: 2,\n        name: 'bar'\n    }]\n};\n\n// if you want 'bar'\nconsole.log(data.items[1].name);\n\n// if you want array of item names\nconsole.log(data.items.map(x => x.name));\n\n// get the id of the item where name = 'bar'\nconsole.log(data.items.filter(x => (x.name == \"bar\") ? x.id : null)[0].id);\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Rahul Vala",
        "usuario_id": 715
    },
    {
        "_id": 423,
        "fecha": { "$date" : "2017-08-28T11:25:30Z" },
        "decripcion": "\njQuery's grep function lets you filter through an array:\n\n\n\nvar data = {\n    code: 42,\n    items: [{\n        id: 1,\n        name: 'foo'\n    }, {\n        id: 2,\n        name: 'bar'\n    }]\n};\n\n$.grep(data.items, function(item) {\n    if (item.id === 2) {\n        console.log(item.id); //console id of item\n        console.log(item.name); //console name of item\n        console.log(item); //console item object\n        return item; //returns item object\n    }\n\n});\n// Object {id: 2, name: \"bar\"}\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 424,
        "fecha": { "$date" : "2019-12-03T22:50:24Z" },
        "decripcion": "\n// const path = 'info.value[0].item'\n// const obj = { info: { value: [ { item: 'it works!' } ], randominfo: 3 }  }\n// getValue(path, obj)\n\nexport const getValue = ( path , obj) => {\n  const newPath = path.replace(/\\]/g, \"\")\n  const arrayPath = newPath.split(/[\\[\\.]+/) || newPath;\n\n  const final = arrayPath.reduce( (obj, k) => obj ?  obj[k] : obj, obj)\n  return final;\n}\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Michael Dimmitt",
        "usuario_id": 716
    },
    {
        "_id": 425,
        "fecha": { "$date" : "2021-01-20T19:48:35Z" },
        "decripcion": "\nHere is an answer using object-scan.\nWhen accessing a single entry, this answer doesn't really provide much benefit over vanilla javascript. However interacting with multiple fields at the same time this answer can be more performant.\nHere is how you could interact with a single field\n\n\n// const objectScan = require('object-scan');\n\nconst data = { code: 42, items: [{ id: 1, name: 'foo' }, { id: 2, name: 'bar' }] };\n\nconst get = (haystack, needle) => objectScan([needle], {\n  abort: true,\n  rtn: 'value'\n})(haystack);\n\nconst set = (haystack, needle, value) => objectScan([needle], {\n  abort: true,\n  rtn: 'bool',\n  filterFn: ({ parent, property }) => {\n    parent[property] = value;\n    return true;\n  }\n})(haystack);\n\nconsole.log(get(data, 'items[1].name'));\n// => bar\n\nconsole.log(set(data, 'items[1].name', 'foo2'));\n// => true\nconsole.log(data);\n// => { code: 42, items: [ { id: 1, name: 'foo' }, { id: 2, name: 'foo2' } ] }\n.as-console-wrapper {max-height: 100% !important; top: 0}\n<script src=\"https://bundle.run/object-scan@13.8.0\"></script>\n Run code snippetHide resultsExpand snippet\n\n\nDisclaimer: I'm the author of object-scan\nand here is how you could interact with multiple fields at the same time\n\n\n// const objectScan = require('object-scan');\n\nconst data = { code: 42, items: [{ id: 1, name: 'foo' }, { id: 2, name: 'bar' }] };\n\nconst get = (haystack, ...needles) => objectScan(needles, {\n  joined: true,\n  rtn: 'entry'\n})(haystack);\n\nconst set = (haystack, actions) => objectScan(Object.keys(actions), {\n  rtn: 'count',\n  filterFn: ({ matchedBy, parent, property }) => {\n    matchedBy.forEach((m) => {\n      parent[property] = actions[m];\n    })\n    return true;\n  }\n})(haystack);\n\nconsole.log(get(data, 'items[0].name', 'items[1].name'));\n// => [ [ 'items[1].name', 'bar' ], [ 'items[0].name', 'foo' ] ]\n\nconsole.log(set(data, {\n  'items[0].name': 'foo1',\n  'items[1].name': 'foo2'\n}));\n// => 2\nconsole.log(data);\n// => { code: 42, items: [ { id: 1, name: 'foo1' }, { id: 2, name: 'foo2' } ] }\n.as-console-wrapper {max-height: 100% !important; top: 0}\n<script src=\"https://bundle.run/object-scan@13.8.0\"></script>\n Run code snippetHide resultsExpand snippet\n\n\nDisclaimer: I'm the author of object-scan\n\nAnd here is how one could find an entity in a deeply nested object searching by id (as asked in comment)\n\n\n// const objectScan = require('object-scan');\n\nconst myData = { code: 42, items: [{ id: 1, name: 'aaa', items: [{ id: 3, name: 'ccc' }, { id: 4, name: 'ddd' }] }, { id: 2, name: 'bbb', items: [{ id: 5, name: 'eee' }, { id: 6, name: 'fff' }] }] };\n\nconst findItemById = (haystack, id) => objectScan(['**(^items$).id'], {\n  abort: true,\n  useArraySelector: false,\n  rtn: 'parent',\n  filterFn: ({ value }) => value === id\n})(haystack);\n\nconsole.log(findItemById(myData, 5));\n// => { id: 5, name: 'eee' }\n.as-console-wrapper {max-height: 100% !important; top: 0}\n<script src=\"https://bundle.run/object-scan@13.8.0\"></script>\n Run code snippetHide resultsExpand snippet\n\n\nDisclaimer: I'm the author of object-scan\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "I am about pretty certain that is node.js, he wants to know how to do it in javascript. If he did want to use node.js, he would of put it in his tags. But that would help me though as I am trying to look for an answer to do this in node.js.",
                "fecha": { "$date" : "2020-11-01T15:46:55Z" },
                "usuario": "Jonathan J. Pecany",
                "usuario_id": 697
            },
            {
                "decripcion": "Nodejs is javascript. But if I understand your comment correctly: I thought you can use any npm packages in \"browser javascript\" using eg babel?",
                "fecha": { "$date" : "2020-11-01T15:55:12Z" },
                "usuario": "vincent",
                "usuario_id": 717
            },
            {
                "decripcion": "node.js is server side, javascript is client side. And no, you can't use npm packages in \"browser javascript\", just me, I have tried. I tried mainly for the heck of it. But even if it was node.js, you are basically saying a long and complex way. @timnavigate answer actually would solve the problem.",
                "fecha": { "$date" : "2020-11-01T16:02:44Z" },
                "usuario": "Jonathan J. Pecany",
                "usuario_id": 697
            },
            {
                "decripcion": "You definitely can stackoverflow.com/q/49562978/1030413 - The package I liked can do a lot. So based on your use case it might be nice to have that available. I understand that there might be work in setting it up",
                "fecha": { "$date" : "2020-11-01T16:13:07Z" },
                "usuario": "vincent",
                "usuario_id": 717
            },
            {
                "decripcion": "@JonathanJ.Pecany I've edited the example to make it runnable and showcase how you could use it in the browser.",
                "fecha": { "$date" : "2020-12-26T17:40:36Z" },
                "usuario": "vincent",
                "usuario_id": 717
            }
        ],
        "usuario": "vincent",
        "usuario_id": 717
    },
    {
        "_id": 426,
        "fecha": { "$date" : "2021-07-20T22:11:44Z" },
        "decripcion": "\nIf you're trying to find a path in a JSON string, you can dump your data into https://jsonpathfinder.com and click on the GUI elements. It'll generate the JS syntax for the path to the element.\nBeyond that, for any arrays you might want to iterate, replace the relevant array offset indices like [0] with a loop.\nHere's a simpler version of the tool you can run here. Click the node you want to copy the path to your clipboard.\n\n\n/* code minified to make the tool easier to run without having to scroll */                                                         let bracketsOnly=!1,lastHighlighted={style:{}};const keyToStr=t=>!bracketsOnly&&/^[a-zA-Z_$][a-zA-Z$_\\d]*$/.test(t)?`.${toHTML(t)}`:`[&quot;${toHTML(t)}&quot;]`,pathToData=t=>`data-path=\"data${t.join(\"\")}\"`,htmlSpecialChars={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#039;\",\"\\t\":\"\\\\t\",\"\\r\":\"\\\\r\",\"\\n\":\"\\\\n\",\" \":\"&nbsp;\"},toHTML=t=>(\"\"+t).replace(/[&<>\"'\\t\\r\\n ]/g,t=>htmlSpecialChars[t]),makeArray=(t,e)=>`\\n  [<ul ${pathToData(e)}>\\n    ${t.map((t,a)=>{e.push(`[${a}]`);const n=`<li ${pathToData(e)}>\\n        ${pathify(t,e).trim()},\\n      </li>`;return e.pop(),n}).join(\"\")}\\n  </ul>]\\n`,makeObj=(t,e)=>`\\n  {<ul ${pathToData(e)}>\\n    ${Object.entries(t).map(([t,a])=>{e.push(keyToStr(t));const n=`<li ${pathToData(e)}>\\n        \"${toHTML(t)}\": ${pathify(a,e).trim()},\\n      </li>`;return e.pop(),n}).join(\"\")}\\n  </ul>}\\n`,pathify=(t,e=[])=>Array.isArray(t)?makeArray(t,e):\"object\"==typeof t?makeObj(t,e):toHTML(\"string\"==typeof t?`\"${t}\"`:t),defaultJSON='{\\n  \"corge\": \"test JSON... \\\\n   asdf\\\\t asdf\",\\n  \"foo-bar\": [\\n    {\"id\": 42},\\n    [42, {\"foo\": {\"baz\": {\"ba  r<>!\\\\t\": true, \"4quux\": \"garply\"}}}]\\n  ]\\n}',$=document.querySelector.bind(document),$$=document.querySelectorAll.bind(document),resultEl=$(\"#result\"),pathEl=$(\"#path\"),tryToJSON=t=>{try{resultEl.innerHTML=pathify(JSON.parse(t)),$(\"#error\").innerText=\"\"}catch(t){resultEl.innerHTML=\"\",$(\"#error\").innerText=t}},copyToClipboard=t=>{const e=document.createElement(\"textarea\");e.innerText=t,document.body.appendChild(e),e.select(),document.execCommand(\"copy\"),document.body.removeChild(e)},flashAlert=(t,e=2e3)=>{const a=document.createElement(\"div\");a.textContent=t,a.classList.add(\"alert\"),document.body.appendChild(a),setTimeout(()=>a.remove(),e)},handleClick=t=>{t.stopPropagation(),copyToClipboard(t.target.dataset.path),flashAlert(\"copied!\"),$(\"#path-out\").textContent=t.target.dataset.path},handleMouseOut=t=>{lastHighlighted.style.background=\"transparent\",pathEl.style.display=\"none\"},handleMouseOver=t=>{pathEl.textContent=t.target.dataset.path,pathEl.style.left=`${t.pageX+30}px`,pathEl.style.top=`${t.pageY}px`,pathEl.style.display=\"block\",lastHighlighted.style.background=\"transparent\",(lastHighlighted=t.target.closest(\"li\")).style.background=\"#0ff\"},handleNewJSON=t=>{tryToJSON(t.target.value),[...$$(\"#result *\")].forEach(t=>{t.addEventListener(\"click\",handleClick),t.addEventListener(\"mouseout\",handleMouseOut),t.addEventListener(\"mouseover\",handleMouseOver)})};$(\"textarea\").addEventListener(\"change\",handleNewJSON),$(\"textarea\").addEventListener(\"keyup\",handleNewJSON),$(\"textarea\").value=defaultJSON,$(\"#brackets\").addEventListener(\"change\",t=>{bracketsOnly=!bracketsOnly,handleNewJSON({target:{value:$(\"textarea\").value}})}),handleNewJSON({target:{value:defaultJSON}});\n/**/                                                                                       *{box-sizing:border-box;font-family:monospace;margin:0;padding:0}html{height:100%}#path-out{background-color:#0f0;padding:.3em}body{margin:0;height:100%;position:relative;background:#f8f8f8}textarea{width:100%;height:110px;resize:vertical}#opts{background:#e8e8e8;padding:.3em}#opts label{padding:.3em}#path{background:#000;transition:all 50ms;color:#fff;padding:.2em;position:absolute;display:none}#error{margin:.5em;color:red}#result ul{list-style:none}#result li{cursor:pointer;border-left:1em solid transparent}#result li:hover{border-color:#ff0}.alert{background:#f0f;padding:.2em;position:fixed;bottom:10px;right:10px}\n<!-- -->                                                                                                    <div class=\"wrapper\"><textarea></textarea><div id=\"opts\"><label>brackets only: <input id=\"brackets\"type=\"checkbox\"></label></div><div id=\"path-out\">click a node to copy path to clipboard</div><div id=\"path\"></div><div id=\"result\"></div><div id=\"error\"></div></div>\n Run code snippetHide resultsExpand snippet\n\n\nUnminified:\nShow code snippet\n\nlet bracketsOnly = false;\nlet lastHighlighted = {style: {}};\n\nconst keyToStr = k =>\n  !bracketsOnly && /^[a-zA-Z_$][a-zA-Z$_\\d]*$/.test(k) \n    ? `.${toHTML(k)}`\n    : `[&quot;${toHTML(k)}&quot;]`\n;\nconst pathToData = p => `data-path=\"data${p.join(\"\")}\"`;\n\nconst htmlSpecialChars = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#039;\",\n  \"\\t\": \"\\\\t\",\n  \"\\r\": \"\\\\r\",\n  \"\\n\": \"\\\\n\",\n  \" \": \"&nbsp;\",\n};\nconst toHTML = x => (\"\" + x)\n  .replace(/[&<>\"'\\t\\r\\n ]/g, m => htmlSpecialChars[m])\n;\n\nconst makeArray = (x, path) => `\n  [<ul ${pathToData(path)}>\n    ${x.map((e, i) => {\n      path.push(`[${i}]`);\n      const html = `<li ${pathToData(path)}>\n        ${pathify(e, path).trim()},\n      </li>`;\n      path.pop();\n      return html;\n    }).join(\"\")}\n  </ul>]\n`;\nconst makeObj = (x, path) => `\n  {<ul ${pathToData(path)}>\n    ${Object.entries(x).map(([k, v]) => {\n      path.push(keyToStr(k));\n      const html = `<li ${pathToData(path)}>\n        \"${toHTML(k)}\": ${pathify(v, path).trim()},\n      </li>`;\n      path.pop();\n      return html;\n    }).join(\"\")}\n  </ul>}\n`;\n\nconst pathify = (x, path=[]) => {\n  if (Array.isArray(x)) {\n    return makeArray(x, path);\n  }\n  else if (typeof x === \"object\") {\n    return makeObj(x, path);\n  }\n  \n  return toHTML(typeof x === \"string\" ? `\"${x}\"` : x);\n};\n\nconst defaultJSON = `{\n  \"corge\": \"test JSON... \\\\n   asdf\\\\t asdf\",\n  \"foo-bar\": [\n    {\"id\": 42},\n    [42, {\"foo\": {\"baz\": {\"ba  r<>!\\\\t\": true, \"4quux\": \"garply\"}}}]\n  ]\n}`;\n\nconst $ = document.querySelector.bind(document);\nconst $$ = document.querySelectorAll.bind(document);\nconst resultEl = $(\"#result\");\nconst pathEl = $(\"#path\");\n\nconst tryToJSON = v => {\n  try {\n    resultEl.innerHTML = pathify(JSON.parse(v));\n    $(\"#error\").innerText = \"\";\n  }\n  catch (err) {\n    resultEl.innerHTML = \"\";\n    $(\"#error\").innerText = err;\n  }\n};\n\nconst copyToClipboard = text => {\n  const ta = document.createElement(\"textarea\");\n  ta.innerText = text;\n  document.body.appendChild(ta);\n  ta.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(ta);\n};\n\nconst flashAlert = (text, timeoutMS=2000) => {\n  const alert = document.createElement(\"div\");\n  alert.textContent = text;\n  alert.classList.add(\"alert\");\n  document.body.appendChild(alert);\n  setTimeout(() => alert.remove(), timeoutMS);\n};\n\nconst handleClick = e => {\n  e.stopPropagation();\n  copyToClipboard(e.target.dataset.path);\n  flashAlert(\"copied!\");\n  $(\"#path-out\").textContent = e.target.dataset.path;\n};\n\nconst handleMouseOut = e => {\n  lastHighlighted.style.background = \"transparent\";\n  pathEl.style.display = \"none\";\n};\n\nconst handleMouseOver = e => {\n  pathEl.textContent = e.target.dataset.path;\n  pathEl.style.left = `${e.pageX + 30}px`;\n  pathEl.style.top = `${e.pageY}px`;\n  pathEl.style.display = \"block\";\n  lastHighlighted.style.background = \"transparent\";\n  lastHighlighted = e.target.closest(\"li\");\n  lastHighlighted.style.background = \"#0ff\";\n};\n\nconst handleNewJSON = e => {\n  tryToJSON(e.target.value);\n  [...$$(\"#result *\")].forEach(e => {\n    e.addEventListener(\"click\", handleClick);\n    e.addEventListener(\"mouseout\", handleMouseOut);\n    e.addEventListener(\"mouseover\", handleMouseOver);\n  });\n};\n$(\"textarea\").addEventListener(\"change\", handleNewJSON);\n$(\"textarea\").addEventListener(\"keyup\", handleNewJSON);\n$(\"textarea\").value = defaultJSON;\n$(\"#brackets\").addEventListener(\"change\", e => {\n  bracketsOnly = !bracketsOnly;\n  handleNewJSON({target: {value: $(\"textarea\").value}});\n});\nhandleNewJSON({target: {value: defaultJSON}});\n* {\n  box-sizing: border-box;\n  font-family: monospace;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  height: 100%;\n}\n\n#path-out {\n  background-color: #0f0;\n  padding: 0.3em;\n}\n\nbody {\n  margin: 0;\n  height: 100%;\n  position: relative;\n  background: #f8f8f8;\n}\n\ntextarea {\n  width: 100%;\n  height: 110px;\n  resize: vertical;\n}\n\n#opts {\n  background: #e8e8e8;\n  padding: 0.3em;\n}\n#opts label {\n  padding: 0.3em;\n}\n\n#path {\n  background: black;\n  transition: all 0.05s;\n  color: white;\n  padding: 0.2em;\n  position: absolute;\n  display: none;\n}\n\n#error {\n  margin: 0.5em;\n  color: red;\n}\n\n#result ul {\n  list-style: none;\n}\n\n#result li {\n  cursor: pointer;\n  border-left: 1em solid transparent;\n}\n#result li:hover {\n  border-color: #ff0;\n}\n\n.alert {\n  background: #f0f;\n  padding: 0.2em;\n  position: fixed;\n  bottom: 10px;\n  right: 10px;\n}\n<div class=\"wrapper\">\n  <textarea></textarea>\n  <div id=\"opts\">\n    <label>\n      brackets only: <input id=\"brackets\" type=\"checkbox\">\n    </label>\n  </div>\n  <div id=\"path-out\">click a node to copy path to clipboard</div>\n  <div id=\"path\"></div>\n  <div id=\"result\"></div>\n  <div id=\"error\"></div>\n</div>\n Run code snippetHide resultsExpand snippet\n\n\nThis isn't intended as a substitute for learning how to fish but can save time once you do know.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "ggorlen",
        "usuario_id": 87
    },
    {
        "_id": 427,
        "fecha": { "$date" : "2016-12-29T07:55:36Z" },
        "decripcion": "\nA pythonic, recursive and functional approach to unravel arbitrary JSON trees:\n\nhandlers = {\n    list:  iterate,\n    dict:  delve,\n    str:   emit_li,\n    float: emit_li,\n}\n\ndef emit_li(stuff, strong=False):\n    emission = '<li><strong>%s</strong></li>' if strong else '<li>%s</li>'\n    print(emission % stuff)\n\ndef iterate(a_list):\n    print('<ul>')\n    map(unravel, a_list)\n    print('</ul>')\n\ndef delve(a_dict):\n    print('<ul>')\n    for key, value in a_dict.items():\n        emit_li(key, strong=True)\n        unravel(value)\n    print('</ul>')\n\ndef unravel(structure):\n    h = handlers[type(structure)]\n    return h(structure)\n\nunravel(data)\n\n\nwhere data is a python list (parsed from a JSON text string):\n\ndata = [\n    {'data': {'customKey1': 'customValue1',\n           'customKey2': {'customSubKey1': {'customSubSubKey1': 'keyvalue'}}},\n  'geometry': {'location': {'lat': 37.3860517, 'lng': -122.0838511},\n               'viewport': {'northeast': {'lat': 37.4508789,\n                                          'lng': -122.0446721},\n                            'southwest': {'lat': 37.3567599,\n                                          'lng': -122.1178619}}},\n  'name': 'Mountain View',\n  'scope': 'GOOGLE',\n  'types': ['locality', 'political']}\n]\n\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "This question is about JavaScript, not Python. Not sure whether there is an equivalent question for Python.",
                "fecha": { "$date" : "2016-12-28T19:54:22Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            },
            {
                "decripcion": "Please see Python Accessing Nested JSON Data for Python.",
                "fecha": { "$date" : "2021-07-20T20:07:44Z" },
                "usuario": "ggorlen",
                "usuario_id": 87
            }
        ],
        "usuario": "pX0r",
        "usuario_id": 718
    },
    {
        "_id": 428,
        "fecha": { "$date" : "2021-08-31T09:27:03Z" },
        "decripcion": "\nthis is how i have done this.\n let groups = [\n        {\n            id:1,\n            title:\"Group 1\",\n            members:[\n                {\n                    id:1,\n                    name:\"Aftab\",\n                    battry:'10%'\n                },\n                {\n                    id:2,\n                    name:\"Jamal\",\n                },\n                {\n                    id:3,\n                    name:\"Hamid\",\n                },\n                {\n                    id:4,\n                    name:\"Aqeel\",\n                },\n            ]\n        },\n        {\n            id:2,\n            title:\"Group 2\",\n            members:[\n                {\n                    id:1,\n                    name:\"Aftab\",\n                    battry:'10%'\n                },\n                {\n                    id:2,\n                    name:\"Jamal\",\n                    battry:'10%'\n                },\n                {\n                    id:3,\n                    name:\"Hamid\",\n                },\n               \n            ]\n        },\n        {\n            id:3,\n            title:\"Group 3\",\n            members:[\n                {\n                    id:1,\n                    name:\"Aftab\",\n                    battry:'10%'\n                },\n                \n                {\n                    id:3,\n                    name:\"Hamid\",\n                },\n                {\n                    id:4,\n                    name:\"Aqeel\",\n                },\n            ]\n        }\n    ]\n    \n    groups.map((item) => {\n      //  if(item.id == 2){\n        item.members.map((element) => {\n             if(element.id == 1){\n                 element.battry=\"20%\"\n             }\n         })\n        //}\n    })\n    \n    groups.forEach((item) => {\n        item.members.forEach((item) => {\n            console.log(item)\n    })\n    })\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Aftab Amin",
        "usuario_id": 719
    },
    {
        "_id": 429,
        "fecha": { "$date" : "2020-05-24T15:57:35Z" },
        "decripcion": "\nMy stringdata is coming from PHP file but still, I indicate here in var. When i directly take my json into obj it will nothing show thats why i put my json file as\n\nvar obj=JSON.parse(stringdata); \nso after that i get message obj and show in alert box then I get data which is json array and store in one varible ArrObj then i read first object of that array with key value like this ArrObj[0].id \n\n     var stringdata={\n        \"success\": true,\n        \"message\": \"working\",\n        \"data\": [{\n                  \"id\": 1,\n                  \"name\": \"foo\"\n         }]\n      };\n\n                var obj=JSON.parse(stringdata);\n                var key = \"message\";\n                alert(obj[key]);\n                var keyobj = \"data\";\n                var ArrObj =obj[keyobj];\n\n                alert(ArrObj[0].id);\n\n    ",
        "votes": -5,
        "comentarios": [
            {
                "decripcion": "The example is confusing because stringjson is not a string.",
                "fecha": { "$date" : "2019-04-04T15:56:58Z" },
                "usuario": "Felix Kling",
                "usuario_id": 234
            }
        ],
        "usuario": "Manthan Patel",
        "usuario_id": 720
    },
    {
        "_id": 430,
        "fecha": { "$date" : "2017-09-27T12:34:15Z" },
        "decripcion": "\nUsing lodash would be good solution \n\nEx:                                                                                               \n\nvar object = { 'a': { 'b': { 'c': 3 } } };                                                                                               \n_.get(object, 'a.b.c');                                                                                             \n// => 3  \n\n    ",
        "votes": -6,
        "comentarios": [
            {
                "decripcion": "How is this different from Access / process (nested) objects, arrays or JSON?",
                "fecha": { "$date" : "2018-02-17T23:52:44Z" },
                "usuario": "Heretic Monkey",
                "usuario_id": 721
            }
        ],
        "usuario": "pradeep gowda",
        "usuario_id": 707
    },
    {
        "_id": 431,
        "fecha": { "$date" : "2017-05-23T12:02:56Z" },
        "decripcion": "\nYour code is split into two entirely separate parts, the server side and the client side.\n\n                    |\n               ---------->\n              HTTP request\n                    |\n+--------------+    |    +--------------+\n|              |    |    |              |\n|    browser   |    |    |  web  server |\n| (JavaScript) |    |    |  (PHP etc.)  |\n|              |    |    |              |\n+--------------+    |    +--------------+\n                    |\n  client side       |      server side\n                    |\n               <----------\n          HTML, CSS, JavaScript\n                    |\n\n\nThe two sides communicate via HTTP requests and responses. PHP is executed on the server and outputs some HTML and maybe JavaScript code which is sent as response to the client where the HTML is interpreted and the JavaScript is executed. Once PHP has finished outputting the response, the script ends and nothing will happen on the server until a new HTTP request comes in.\n\nThe example code executes like this:\n\n<script type=\"text/javascript\">\n    var foo = 'bar';\n    <?php\n        file_put_contents('foo.txt', ' + foo + ');\n    ?>\n\n    var baz = <?php echo 42; ?>;\n    alert(baz);\n</script>\n\n\nStep 1, PHP executes all code between <?php ?> tags. The result is this:\n\n<script type=\"text/javascript\">\n    var foo = 'bar';\n\n    var baz = 42;\n    alert(baz);\n</script>\n\n\nThe file_put_contents call did not result in anything, it just wrote \" + foo + \" into a file. The <?php echo 42; ?> call resulted in the output \"42\", which is now in the spot where that code used to be.\n\nThis resulting HTML/JavaScript code is now sent to the client, where it gets evaluated. The alert call works, while the foo variable is not used anywhere.\n\nAll PHP code is executed on the server before the client even starts executing any of the JavaScript. There's no PHP code left in the response that JavaScript could interact with.\n\nTo call some PHP code, the client will have to send a new HTTP request to the server. This can happen using one of three possible methods:\n\n\nA link, which causes the browser to load a new page.\nA form submission, which submits data to the server and loads a new page.\nAn AJAX request, which is a Javascript technique to make a regular HTTP request to the server (like 1. and 2. will), but without leaving the current page.\n\n\nHere's a question outlining these method in greater detail\n\nYou can also use JavaScript to make the browser open a new page using window.location or submit a form, emulating possibilities 1. and 2.\n    ",
        "votes": 500,
        "comentarios": [
            {
                "decripcion": "You can also open second page using window.open or load a page using an iframe.",
                "fecha": { "$date" : "2016-04-25T07:51:09Z" },
                "usuario": "jcubic",
                "usuario_id": 723
            },
            {
                "decripcion": "It might be worth adding WebSockets to the list of communication methods.",
                "fecha": { "$date" : "2016-12-19T08:45:36Z" },
                "usuario": "Quentin",
                "usuario_id": 630
            },
            {
                "decripcion": "What if let's say drop down values get updated via jquery.  When user does step 2. A form submission, which submits data to the server and loads a new page, via \"Submit\" button would the jquery updated values be able to be passed to a controller in php?  Or would they not be visible to php since it was added to the dom via jquery? @deceze",
                "fecha": { "$date" : "2018-10-02T22:33:34Z" },
                "usuario": "FabricioG",
                "usuario_id": 724
            },
            {
                "decripcion": "@Fabricio An HTTP request will be created from the <form> data and sent to the server. You can manipulate forms using Javascript to have them contain different data. Yes, that data will be part of the resulting HTTP request if it's properly part of the form when it is being submitted; it doesn't matter whether it was in the original HTML or added afterwards via Javascript.",
                "fecha": { "$date" : "2018-10-03T07:30:08Z" },
                "usuario": "deceze\u2666",
                "usuario_id": 725
            }
        ],
        "usuario": "deceze",
        "usuario_id": 726
    },
    {
        "_id": 432,
        "fecha": { "$date" : "2019-03-25T21:16:09Z" },
        "decripcion": "\nTo determine why PHP code doesn't work in JavaScript code we need to understand what client side and server side languages are, and how they work. \n\nServer-side languages (PHP etc.):  They retrieve records from databases, maintain state over the stateless HTTP connection, and do a lot of things that require  security. They reside on the server, these programs never have their source code exposed to the user.                               \n\n\n  \n  image attr\n\n\nSo you can easily see that server side languages handle HTTP requests and process them, and, as @deceze said, PHP is executed on the server and outputs some HTML, and maybe JavaScript code, which is sent as a response to the client, where the HTML is interpreted and JavaScript is executed.\n\nOn the other hand, Client Side Languages (like JavaScript) reside in browser and run in the browser. Client-side scripting generally refers to the class of computer programs on the web that are executed client-side, by the user's web browser, instead of server-side.\n\nJavaScript is visible to the user and can be easily modified, so for security stuff we must not rely on JavaScript. \n\nSo when you make a HTTP request on server, the server first reads the PHP file carefully to see if there are any tasks that need to be executed, and sends a response to the client side. Again, as @deceze said, *Once PHP has finished outputting the response, the script ends and nothing will happen on the server until a new HTTP request comes in.*\n\n\n  \n  \n  Image source  \n\n\nSo now what can I do if I need to call PHP? It depends how you need to do it: either by reloading the page or by using an AJAX call.\n\n\nYou can do so by reloading the page and sending a HTTP request \nYou can make an AJAX call with JavaScript - this does not require reloading page \n\n\nGood Read:\n\n\nWikipedia : Server-side scripting\nWikipedia : Client-side scripting\nMadara Uchiha : Difference between client side and server side programming\n\n    ",
        "votes": 176,
        "comentarios": [],
        "usuario": "NullPoi\u0438te\u044f",
        "usuario_id": 727
    },
    {
        "_id": 433,
        "fecha": { "$date" : "2012-12-12T13:46:38Z" },
        "decripcion": "\nYour Javascript will execute on the client, not on the server. This means that foo is not evaluated on the server side and therefore its value can't be written to a file on the server.\n\nThe best way to think about this process is as if you're generating a text file dynamically. The text you're generating only becomes executable code once the browser interprets it. Only what you place between <?php tags is evaluated on the server.\n\nBy the way, making a habit of embedding random pieces of PHP logic in HTML or Javascript can lead to seriously convoluted code. I speak from painful experience.\n    ",
        "votes": 34,
        "comentarios": [
            {
                "decripcion": "Your answer here is noteworthy as it makes mention to the/a interpeter. However, javascript can be compiled and run in a server environment, and it can be interpeted by a server as well.",
                "fecha": { "$date" : "2015-03-10T17:10:25Z" },
                "usuario": "Brett Caswell",
                "usuario_id": 728
            }
        ],
        "usuario": "NitayArt",
        "usuario_id": 729
    },
    {
        "_id": 434,
        "fecha": { "$date" : "2016-07-13T09:26:43Z" },
        "decripcion": "\nIn web application every task execute in a manner of request and response.\n\nClient side programming is with html code  with Java script and its frameworks, libraries executes in the internet explorer, Mozilla, chrome browsers.\nIn the java scenario\nserver side programming servlets executes in the Tomcat, web-logic , j boss, WebSphere severs\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "chandrashekar.n",
        "usuario_id": 730
    },
    {
        "_id": 435,
        "fecha": { "$date" : "2021-08-26T04:07:20Z" },
        "decripcion": "\nthis is a keyword in JavaScript that is a property of an execution context. Its main use is in functions and constructors.\nI recommend reading Mike West\u2019s article Scope in JavaScript (archived) first. It is an excellent, friendly introduction to the concepts of this and scope chains in JavaScript. The rules for this are quite simple (if you stick to best practices).\nTechnical description of this in the specification\nThe ECMAScript standard defines this via the abstract operation ResolveThisBinding:\n\nThe abstract operation ResolveThisBinding [\u2026] determines the binding of the keyword this using the LexicalEnvironment of the running execution context. It performs the following steps when called:\n\nLet envRec be GetThisEnvironment().\nReturn ? envRec.GetThisBinding().\n\n\nGlobal Environment Records, module Environment Records, and function Environment Records each have their own GetThisBinding method.\nThe GetThisEnvironment abstract operation finds the current running execution context\u2019s LexicalEnvironment and finds the closest ascendant Environment Record (by iteratively accessing their [[OuterEnv]] properties) which has a this binding (i.e. HasThisBinding returns true). This process ends in one of the three Environment Record types.\nThe value of this often depends on whether code is in strict mode.\nThe return value of GetThisBinding reflects the value of this of the current execution context, so whenever a new execution context is established, this resolves to a distinct value. This can also happen when the current execution context is modified. The following subsections list the five cases where this can happen.\nYou can put the code samples in the AST explorer to follow along with specification details.\n1. Global execution context in scripts\nThis is script code evaluated at the top level, e.g. directly inside a <script>:\n<script>\n// Global context\nconsole.log(this); // Logs global object.\n\nsetTimeout(function(){\n  console.log(\"Not global context\");\n});\n</script>\n\nWhen in the initial global execution context of a script, evaluating this causes GetThisBinding to take the following steps:\n\nThe GetThisBinding concrete method of a global Environment Record envRec [\u2026] performs the following steps when called:\n\nReturn envRec.[[GlobalThisValue]].\n\n\nThe [[GlobalThisValue]] property of a global Environment Record is always set to the host-defined global object, which is reachable via globalThis (window on Web, global on Node.js; Docs on MDN). Follow the steps of InitializeHostDefinedRealm to learn how the [[GlobalThisValue]] property comes to be.\n2. Global execution context in modules\nModules have been introduced in ECMAScript 2015.\nThis applies to modules, e.g. when directly inside a <script type=\"module\">, as opposed to a simple <script>.\nWhen in the initial global execution context of a module, evaluating this causes GetThisBinding to take the following steps:\n\nThe GetThisBinding concrete method of a module Environment Record [\u2026] performs the following steps when called:\n\nReturn undefined.\n\n\nThat\u2019s right: in modules, the value of this is always undefined in the global context.\nModules are implicitly in strict mode.\n3. Entering eval code\nThere are two kinds of eval calls: direct and indirect. This distinction exists since the ECMAScript 5th edition.\n\nA direct eval call usually looks like eval(\u2026); or (eval)(\u2026); (or ((eval))(\u2026);, etc.).1 It\u2019s only direct if the call expression fits a narrow pattern.2\nAn indirect eval call involves calling the function reference eval in any other way. It could be eval?.(\u2026), (\u2026, eval)(\u2026), window.eval(\u2026), eval.call(\u2026,\u2026), etc. Given const aliasEval1 = eval; window.aliasEval2 = eval;, it would also be aliasEval1(\u2026), aliasEval2(\u2026). Separately, given const originalEval = eval; window.eval = (x) => originalEval(x);, calling eval(\u2026) would also be indirect.\n\nSee chuckj\u2019s answer to \u201c(1, eval)('this') vs eval('this') in JavaScript?\u201d and Dmitry Soshnikov\u2019s ECMA-262-5 in detail \u2013 Chapter 2: Strict Mode (archived) for when you might use an indirect eval() call.\nPerformEval executes the eval code. It creates a new declarative Environment Record as its LexicalEnvironment, which is where GetThisEnvironment gets the this value from.\nThen, if this appears in eval code, the GetThisBinding method of the Environment Record found by GetThisEnvironment is called and its value returned.\nAnd the created declarative Environment Record depends on whether the eval call was direct or indirect:\n\nIn a direct eval, it will be based on the current running execution context\u2019s LexicalEnvironment.\nIn an indirect eval, it will be based on the [[GlobalEnv]] property (a global Environment Record) of the Realm Record which executed the indirect eval.\n\nWhich means:\n\nIn a direct eval, the this value doesn\u2019t change; it\u2019s taken from the lexical scope that called eval.\nIn an indirect eval, the this value is the global object (globalThis).\n\nWhat about new Function?\u200a\u2014\u200anew Function is similar to eval, but it doesn\u2019t call the code immediately; it creates a function. A this binding doesn\u2019t apply anywhere here, except when the function is called, which works normally, as explained in the next subsection.\n4. Entering function code\nEntering function code occurs when calling a function.\nThere are four categories of syntax to invoke a function.\n\nThe EvaluateCall abstract operation is performed for these three:3\n\nNormal function calls\nOptional chaining calls\nTagged templates\n\n\nAnd EvaluateNew is performed for this one:3\n\nConstructor invocations\n\n\n\nThe actual function call happens at the Call abstract operation, which is called with a thisValue determined from context; this argument is passed along in a long chain of call-related calls. Call calls the [[Call]] internal slot of the function. This calls PrepareForOrdinaryCall where a new function Environment Record is created:\n\nA function Environment Record is a declarative Environment Record that is used to represent the top-level scope of a function and, if the function is not an ArrowFunction, provides a this binding. If a function is not an ArrowFunction function and references super, its function Environment Record also contains the state that is used to perform super method invocations from within the function.\n\nIn addition, there is the [[ThisValue]] field in a function Environment Record:\n\nThis is the this value used for this invocation of the function.\n\nThe NewFunctionEnvironment call also sets the function environment\u2019s [[ThisBindingStatus]] property.\n[[Call]] also calls OrdinaryCallBindThis, where the appropriate thisArgument is determined based on:\n\nthe original reference,\nthe kind of the function, and\nwhether or not the code is in strict mode.\n\nOnce determined, a final call to the BindThisValue method of the newly created function Environment Record actually sets the [[ThisValue]] field to the thisArgument.\nFinally, this very field is where a function Environment Record\u2019s GetThisBinding abstract operation gets the value for this from:\n\nThe GetThisBinding concrete method of a function Environment Record envRec [\u2026] performs the following steps when called:\n[\u2026]\n3. Return envRec.[[ThisValue]].\n\nAgain, how exactly the this value is determined depends on many factors; this was just a general overview. With this technical background, let\u2019s examine all the concrete examples.\nArrow functions\nWhen an arrow function is evaluated, the [[ThisMode]] internal slot of the function object is set to \u201clexical\u201d in OrdinaryFunctionCreate.\nAt OrdinaryCallBindThis, which takes a function F:\n\n\nLet thisMode be F.[[ThisMode]].\nIf thisMode is lexical, return NormalCompletion(undefined).\n[\u2026]\n\n\nwhich just means that the rest of the algorithm which binds this is skipped. An arrow function does not bind its own this value.\nSo, what is this inside an arrow function, then? Looking back at ResolveThisBinding and GetThisEnvironment, the HasThisBinding method explicitly returns false.\n\nThe HasThisBinding concrete method of a function Environment Record envRec [\u2026] performs the following steps when called:\n\nIf envRec.[[ThisBindingStatus]] is lexical, return false; otherwise, return true.\n\n\nSo the outer environment is looked up instead, iteratively. The process will end in one of the three environments that have a this binding.\nThis just means that this is lexically determined in arrow function bodies, or in other words (from Arrow function vs function declaration / expressions: Are they equivalent / exchangeable?):\n\nArrow functions don\u2019t have their own this [\u2026] binding. Instead, [this identifier is] resolved in the lexical scope like any other variable. That means that inside an arrow function, this [refers] to the [value of this] in the environment the arrow function is defined in (i.e. \u201coutside\u201d the arrow function).\n\nFunction properties\nIn normal functions (function, methods), this is determined by how the function is called.\nThis is where these \u201csyntax variants\u201d come in handy.\nConsider this object containing a function:\nconst refObj = {\n    func: function(){\n      console.log(this);\n    }\n  };\n\nAlternatively:\nconst refObj = {\n    func(){\n      console.log(this);\n    }\n  };\n\nIn any of the following function calls, the this value inside func will be refObj.1\n\nrefObj.func()\nrefObj[\"func\"]()\nrefObj?.func()\nrefObj.func?.()\nrefObj.func``\n\nIf the called function is syntactically a property of a base object, then this base will be the \u201creference\u201d of the call, which, in usual cases, will be the value of this. This is explained by the evaluation steps linked above; for example, in refObj.func() (or refObj[\"func\"]()), the CallMemberExpression is the entire expression refObj.func(), which consists of the MemberExpression refObj.func and the Arguments ().\nBut also, refObj.func and refObj play three roles, each:\n\nthey\u2019re both expressions,\nthey\u2019re both references, and\nthey\u2019re both values.\n\nrefObj.func as a value is the callable function object; the corresponding reference is used to determine the this binding.\nThe optional chaining and tagged template examples work very similarly: basically, the reference is everything before the ?.(), before the ``, or before the ().\nEvaluateCall uses IsPropertyReference of that reference to determine if it is a property of an object, syntactically. It\u2019s trying to get the [[Base]] property of the reference (which is e.g. refObj, when applied to refObj.func; or foo.bar when applied to foo.bar.baz). If it is written as a property, then GetThisValue will get this [[Base]] property and use it as the this value.\nNote: Getters / Setters work the same way as methods, regarding this. Simple properties don\u2019t affect the execution context, e.g. here, this is in global scope:\nconst o = {\n    a: 1,\n    b: this.a // Is `globalThis.a`.\n  };\n\nCalls without base reference, strict mode, and with\nA call without a base reference is usually a function that isn\u2019t called as a property. For example:\nfunc(); // As opposed to `refObj.func();`.\n\nThis also happens when passing or assigning methods, or using the comma operator. This is where the difference between Reference Record and Value is relevant.\nconst g = (f) => f(); // No base ref.\nconst h = refObj.func;\n\ng(refObj.func);\nh(); // No base ref.\n(0, refObj.func)(); // Another common pattern to remove the base ref.\n\nEvaluateCall calls Call with a thisValue of undefined here. This makes a difference in OrdinaryCallBindThis (F: the function object; thisArgument: the thisValue passed to Call):\n\n\nLet thisMode be F.[[ThisMode]].\n\n[\u2026]\n\nIf thisMode is strict, let thisValue be thisArgument.\nElse,\n\nIf thisArgument is undefined or null, then\n\nLet globalEnv be calleeRealm.[[GlobalEnv]].\n[\u2026]\nLet thisValue be globalEnv.[[GlobalThisValue]].\n\n\nElse,\n\nLet thisValue be ! ToObject(thisArgument).\nNOTE: ToObject produces wrapper objects [\u2026].\n\n\n\n\n\n[\u2026]\n\nNote: step 5 sets the actual value of this to the supplied thisArgument in strict mode\u200a\u2014\u200aundefined in this case. In \u201csloppy mode\u201d, an undefined or null thisArgument results in this being the global this value.\nIf IsPropertyReference returns false, then EvaluateCall takes these steps:\n\n\nLet refEnv be ref.[[Base]].\nAssert: refEnv is an Environment Record.\nLet thisValue be refEnv.WithBaseObject().\n\n\nThis is where an undefined thisValue may come from: refEnv.WithBaseObject() is always undefined, except in with statements. In this case, thisValue will be the binding object.\nThere\u2019s also Symbol.unscopables (Docs on MDN) to control the with binding behavior.\nTo summarize, so far:\nfunction f1(){\n  console.log(this);\n}\n\nfunction f2(){\n  console.log(this);\n}\n\nfunction f3(){\n  console.log(this);\n}\n\nconst o = {\n    f1,\n    f2,\n    [symbol.unscopables]: {\n      f2: true\n    }\n  };\n\nf1(); // Logs `globalThis`.\n\nwith(o){\n  f1(); // Logs `o`.\n  f2(); // `f2` is unscopable, so this logs `globalThis`.\n  f3(); // `f3` is not on `o`, so this logs `globalThis`.\n}\n\nand:\n\"use strict\";\n\nfunction f(){\n  console.log(this);\n}\n\nf(); // Logs `undefined`.\n\n// `with` statements are not allowed in strict-mode code.\n\nNote that when evaluating this, it doesn\u2019t matter where a normal function is defined.\n.call, .apply, .bind, thisArg, and primitives\nAnother consequence of step 5 of OrdinaryCallBindThis, in conjunction with step 6.2 (6.b in the spec), is that a primitive this value is coerced to an object only in \u201csloppy\u201d mode.\nTo examine this, let\u2019s introduce another source for the this value: the three methods that override the this binding:4\n\nFunction.prototype.apply(thisArg, argArray)\nFunction.prototype. {call, bind} (thisArg, ...args)\n\n.bind creates a bound function, whose this binding is set to thisArg and cannot change again. .call and .apply call the function immediately, with the this binding set to thisArg.\n.call and .apply map directly to Call, using the specified thisArg. .bind creates a bound function with BoundFunctionCreate. These have their own [[Call]] method which looks up the function object\u2019s [[BoundThis]] internal slot.\nExamples of setting a custom this value:\nfunction f(){\n  console.log(this);\n}\n\nconst myObj = {},\n  g = f.bind(myObj),\n  h = (m) => m();\n\n// All of these log `myObj`.\ng();\nf.bind(myObj)();\nf.call(myObj);\nh(g);\n\nFor objects, this is the same in strict and non-strict mode.\nNow, try to supply a primitive value:\nfunction f(){\n  console.log(this);\n}\n\nconst myString = \"s\",\n  g = f.bind(myString);\n\ng();              // Logs `String { \"s\" }`.\nf.call(myString); // Logs `String { \"s\" }`.\n\nIn non-strict mode, primitives are coerced to their object-wrapped form. It\u2019s the same kind of object you get when calling Object(\"s\") or new String(\"s\"). In strict mode, you can use primitives:\n\"use strict\";\n\nfunction f(){\n  console.log(this);\n}\n\nconst myString = \"s\",\n  g = f.bind(myString);\n\ng();              // Logs `\"s\"`.\nf.call(myString); // Logs `\"s\"`.\n\nLibraries make use of these methods, e.g. jQuery sets the this to the DOM element selected here:\n$(\"button\").click(function(){\n  console.log(this); // Logs the clicked button.\n});\n\nConstructors, classes, and new\nWhen calling a function as a constructor using the new operator, EvaluateNew calls Construct, which calls the [[Construct]] method. If the function is a base constructor (i.e. not a class extends\u2026{\u2026}), it sets thisArgument to a new object created from the constructor\u2019s prototype. Properties set on this in the constructor will end up on the resulting instance object. this is implicitly returned, unless you explicitly return your own non-primitive value.\nA class is a new way of creating constructor functions, introduced in ECMAScript 2015.\nfunction Old(a){\n  this.p = a;\n}\n\nconst o = new Old(1);\n\nconsole.log(o);  // Logs `Old { p: 1 }`.\n\nclass New{\n  constructor(a){\n    this.p = a;\n  }\n}\n\nconst n = new New(1);\n\nconsole.log(n); // Logs `New { p: 1 }`.\n\nClass definitions are implicitly in strict mode:\nclass A{\n  m1(){\n    return this;\n  }\n  m2(){\n    const m1 = this.m1;\n    \n    console.log(m1());\n  }\n}\n\nnew A().m2(); // Logs `undefined`.\n\nsuper\nThe exception to the behavior with new is class extends\u2026{\u2026}, as mentioned above. Derived classes do not immediately set their this value upon invocation; they only do so after a super call (happens implicitly without an own constructor). Using this before calling super is not allowed.\nCalling super calls the super constructor with the this value of the lexical scope (the function Environment Record) of the call. GetThisValue has a special rule for super calls. It uses BindThisValue to set this to that Environment Record.\nclass DerivedNew extends New{\n  constructor(a, a2){\n    // Using `this` before `super` results in a ReferenceError.\n    super(a);\n    this.p2 = a2;\n  }\n}\n\nconst n2 = new DerivedNew(1, 2);\n\nconsole.log(n2); // Logs `DerivedNew { p: 1, p2: 2 }`.\n\n5. Evaluating class fields\nInstance fields and static fields were introduced in ECMAScript 2022.\nWhen a class is evaluated, ClassDefinitionEvaluation is performed, modifying the running execution context. For each ClassElement:\n\nif a field is static, then this refers to the class itself,\nif a field is not static, then this refers to the instance.\n\nPrivate fields (e.g. #x) and methods are added to a PrivateEnvironment.\nStatic blocks are currently a TC39 stage 3 proposal. Static blocks work the same as static fields and methods: this inside them refers to the class itself.\nNote that in methods and getters / setters, this works just like in normal function properties.\nclass Demo{\n  a = this;\n  b(){\n    return this;\n  }\n  static c = this;\n  static d(){\n    return this;\n  }\n  // Getters, setters, private modifiers are also possible.\n}\n\nconst demo = new Demo;\n\nconsole.log(demo.a, demo.b()); // Both of them log `demo`.\nconsole.log(Demo.c, Demo.d()); // Both of them log `Demo`.\n\n\n1: (o.f)() is exactly equivalent to o.f(); (f)() is exactly equivalent to f(). This is explained in this 2ality article (archived). Particularly see how a ParenthesizedExpression is evaluated.\n2: It must be a MemberExpression, must not be a property, must have a [[ReferencedName]] of exactly \"eval\", and must be the %eval% intrinsic object.\n3: Whenever the specification says \u201cLet ref be the result of evaluating X.\u201d, then X is some expression that you need to find the evaluation steps for. For example, evaluating a MemberExpression or CallExpression is the result of one of these algorithms. Some of them result in a Reference Record.\n4: There are also several other native and host methods that allow providing a this value, notably Array.prototype.map, Array.prototype.forEach, etc. that accept a thisArg as their second argument. Anyone can make their own methods to alter this like (func, thisArg) => func.bind(thisArg), (func, thisArg) => func.call(thisArg), etc. As always, MDN offers great documentation.\n\nJust for fun, test your understanding with some examples\nFor each code snippet, answer the question: \u201cWhat is the value of this at the marked line? Why?\u201d.\nTo reveal the answers, click the gray boxes.\n\n\nif(true){\n  console.log(this); // What is `this` here?\n}\n\n\n globalThis. The marked line is evaluated in the initial global execution context.\n\n\n\n\nconst obj = {};\n\nfunction myFun(){\n  return { // What is `this` here?\n    \"is obj\": this === obj,\n    \"is globalThis\": this === globalThis\n  };\n}\n\nobj.method = myFun;\n\nconsole.log(obj.method());\n\n   \n Run code snippetHide resultsExpand snippet\n\n\n\n obj. When calling a function as a property of an object, it is called with the this binding set to the base of the reference obj.method, i.e. obj.\n\n\n\n\nconst obj = {\n    myMethod: function(){\n      return { // What is `this` here?\n        \"is obj\": this === obj,\n        \"is globalThis\": this === globalThis\n      };\n    }\n  },\n  myFun = obj.myMethod;\n\nconsole.log(myFun());\n\n   \n Run code snippetHide resultsExpand snippet\n\n\n\n globalThis. Since the function value myFun / obj.myMethod is not called off of an object, as a property, the this binding will be globalThis.\n\n This is different from Python, in which accessing a method (obj.myMethod) creates a bound method object.\n\n\n\n\nconst obj = {\n    myFun: () => ({ // What is `this` here?\n      \"is obj\": this === obj,\n      \"is globalThis\": this === globalThis\n    })\n  };\n\nconsole.log(obj.myFun());\n\n   \n Run code snippetHide resultsExpand snippet\n\n\n\n globalThis. Arrow functions don\u2019t create their own this binding. The lexical scope is the same as the initial global scope, so this is globalThis.\n\n\n\nfunction myFun(){\n  console.log(this); // What is `this` here?\n}\n\nconst obj = {\n    myMethod: function(){\n      eval(\"myFun()\");\n    }\n  };\n\nobj.myMethod();\n\n\n globalThis. When evaluating the direct eval call, this is obj. However, in the eval code, myFun is not called off of an object, so the this binding is set to the global object.\n\n\n\n\nfunction myFun() {\n  // What is `this` here?\n  return {\n    \"is obj\": this === obj,\n    \"is globalThis\": this === globalThis\n  };\n}\n\nconst obj = {};\n\nconsole.log(myFun.call(obj));\n\n   \n Run code snippetHide resultsExpand snippet\n\n\n\n obj. The line myFun.call(obj); is invoking the special built-in function Function.prototype.call, which accepts thisArg as the first argument.\n\n\n\n\nclass MyCls{\n  arrow = () => ({ // What is `this` here?\n    \"is MyCls\": this === MyCls,\n    \"is globalThis\": this === globalThis,\n    \"is instance\": this instanceof MyCls\n  });\n}\n\nconsole.log(new MyCls().arrow());\n\n   \n Run code snippetHide resultsExpand snippet\n\n\n\n It\u2019s the instance of MyCls. Arrow functions don\u2019t change the this binding, so the this binding is lexically determined. Therefore, this is exactly the same as with the class fields mentioned above, like a = this;. Try changing it to static arrow. Do you get the result you expect?\n\n\n\n    ",
        "votes": 1417,
        "comentarios": [
            {
                "decripcion": "I think @supertonsky is right about #2 - if myFun() is called from global scope, and not as a method on the object, \"this\" will be the global object, so the phrasing of the question matters.  btw - I really like the idea of using mouseover to get the answer for something like this.",
                "fecha": { "$date" : "2013-11-30T00:29:23Z" },
                "usuario": "user655489",
                "usuario_id": 731
            },
            {
                "decripcion": "But, jsfiddle.net/H4LYm/2 shows that the setTimeout example has a this of window(global).",
                "fecha": { "$date" : "2013-12-31T22:20:35Z" },
                "usuario": "Kevin Meredith",
                "usuario_id": 732
            },
            {
                "decripcion": "coming from Python one would imagine the levels of frustration I had when I bumped into the 3rd example.. smh",
                "fecha": { "$date" : "2019-06-17T13:22:46Z" },
                "usuario": "Marius Mucenicu",
                "usuario_id": 733
            },
            {
                "decripcion": "One thing that I cannot understand is: why (obj.myFunction)() still binds this to obj? I'd assume that expression in brackets returns a non-bound function, so it shouldn't that be window instead?",
                "fecha": { "$date" : "2019-09-14T14:08:48Z" },
                "usuario": "BroiSatse",
                "usuario_id": 734
            },
            {
                "decripcion": "This answer should probably be updated to reflect the ES2020 reality, even if the changes are just terminological.",
                "fecha": { "$date" : "2020-02-17T17:22:00Z" },
                "usuario": "Ben Aston",
                "usuario_id": 735
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 436,
        "fecha": { "$date" : "2019-11-14T02:37:11Z" },
        "decripcion": "\nThe this keyword behaves differently in JavaScript compared to other languages. In Object Oriented languages, the this keyword refers to the current instance of the class. In JavaScript the value of this is determined by the invocation context of function (context.function()) and where it is called.\n\n1. When used in global context\n\nWhen you use this in global context, it is bound to global object (window in browser)\n\ndocument.write(this);  //[object Window]\n\n\nWhen you use this inside a function defined in the global context, this is still bound to global object since the function is actually made a method of global context.\n\nfunction f1()\n{\n   return this;\n}\ndocument.write(f1());  //[object Window]\n\n\nAbove f1 is made a method of global object. Thus we can also call it on window object as follows:\n\nfunction f()\n{\n    return this;\n}\n\ndocument.write(window.f()); //[object Window]\n\n\n2. When used inside object method\n\nWhen you use this keyword inside an object method, this is bound to the \"immediate\" enclosing object.\n\nvar obj = {\n    name: \"obj\",\n    f: function () {\n        return this + \":\" + this.name;\n    }\n};\ndocument.write(obj.f());  //[object Object]:obj\n\n\nAbove I have put the word immediate in double quotes. It is to make the point that if you nest the object inside another object, then this is bound to the immediate parent.\n\nvar obj = {\n    name: \"obj1\",\n    nestedobj: {\n        name:\"nestedobj\",\n        f: function () {\n            return this + \":\" + this.name;\n        }\n    }            \n}\n\ndocument.write(obj.nestedobj.f()); //[object Object]:nestedobj\n\n\nEven if you add function explicitly to the object as a method, it still follows above rules, that is this still points to the immediate parent object.\n\nvar obj1 = {\n    name: \"obj1\",\n}\n\nfunction returnName() {\n    return this + \":\" + this.name;\n}\n\nobj1.f = returnName; //add method to object\ndocument.write(obj1.f()); //[object Object]:obj1\n\n\n3. When invoking context-less function\n\nWhen you use this inside function that is invoked without any context (i.e. not on any object), it is bound to the global object (window in browser)(even if the function is defined inside the object) .\n\nvar context = \"global\";\n\nvar obj = {  \n    context: \"object\",\n    method: function () {                  \n        function f() {\n            var context = \"function\";\n            return this + \":\" +this.context; \n        };\n        return f(); //invoked without context\n    }\n};\n\ndocument.write(obj.method()); //[object Window]:global \n\n\nTrying it all with functions\n\nWe can try above points with functions too. However there are some differences.\n\n\nAbove we added members to objects using object literal notation. We can add members to functions by using this. to specify them.\nObject literal notation creates an instance of object which we can use immediately. With function we may need to first create its instance using new operator.\nAlso in an object literal approach, we can explicitly add members to already defined object using dot operator. This gets added to the specific instance only. However I have added variable to the function prototype so that it gets reflected in all instances of the function.\n\n\nBelow I tried out all the things that we did with Object and this above, but by first creating function instead of directly writing an object.\n\n/********************************************************************* \n  1. When you add variable to the function using this keyword, it \n     gets added to the function prototype, thus allowing all function \n     instances to have their own copy of the variables added.\n*********************************************************************/\nfunction functionDef()\n{\n    this.name = \"ObjDefinition\";\n    this.getName = function(){                \n        return this+\":\"+this.name;\n    }\n}        \n\nobj1 = new functionDef();\ndocument.write(obj1.getName() + \"<br />\"); //[object Object]:ObjDefinition   \n\n/********************************************************************* \n   2. Members explicitly added to the function protorype also behave \n      as above: all function instances have their own copy of the \n      variable added.\n*********************************************************************/\nfunctionDef.prototype.version = 1;\nfunctionDef.prototype.getVersion = function(){\n    return \"v\"+this.version; //see how this.version refers to the\n                             //version variable added through \n                             //prototype\n}\ndocument.write(obj1.getVersion() + \"<br />\"); //v1\n\n/********************************************************************* \n   3. Illustrating that the function variables added by both above \n      ways have their own copies across function instances\n*********************************************************************/\nfunctionDef.prototype.incrementVersion = function(){\n    this.version = this.version + 1;\n}\nvar obj2 = new functionDef();\ndocument.write(obj2.getVersion() + \"<br />\"); //v1\n\nobj2.incrementVersion();      //incrementing version in obj2\n                              //does not affect obj1 version\n\ndocument.write(obj2.getVersion() + \"<br />\"); //v2\ndocument.write(obj1.getVersion() + \"<br />\"); //v1\n\n/********************************************************************* \n   4. `this` keyword refers to the immediate parent object. If you \n       nest the object through function prototype, then `this` inside \n       object refers to the nested object not the function instance\n*********************************************************************/\nfunctionDef.prototype.nestedObj = { name: 'nestedObj', \n                                    getName1 : function(){\n                                        return this+\":\"+this.name;\n                                    }                            \n                                  };\n\ndocument.write(obj2.nestedObj.getName1() + \"<br />\"); //[object Object]:nestedObj\n\n/********************************************************************* \n   5. If the method is on an object's prototype chain, `this` refers \n      to the object the method was called on, as if the method was on \n      the object.\n*********************************************************************/\nvar ProtoObj = { fun: function () { return this.a } };\nvar obj3 = Object.create(ProtoObj); //creating an object setting ProtoObj\n                                    //as its prototype\nobj3.a = 999;                       //adding instance member to obj3\ndocument.write(obj3.fun()+\"<br />\");//999\n                                    //calling obj3.fun() makes \n                                    //ProtoObj.fun() to access obj3.a as \n                                    //if fun() is defined on obj3\n\n\n4. When used inside constructor function.\n\nWhen the function is used as a constructor (that is when it is called with new keyword), this inside function body points to the new object being constructed.\n\nvar myname = \"global context\";\nfunction SimpleFun()\n{\n    this.myname = \"simple function\";\n}\n\nvar obj1 = new SimpleFun(); //adds myname to obj1\n//1. `new` causes `this` inside the SimpleFun() to point to the\n//   object being constructed thus adding any member\n//   created inside SimipleFun() using this.membername to the\n//   object being constructed\n//2. And by default `new` makes function to return newly \n//   constructed object if no explicit return value is specified\n\ndocument.write(obj1.myname); //simple function\n\n\n5. When used inside function defined on prototype chain\n\nIf the method is on an object's prototype chain, this inside such method refers to the object the method was called on, as if the method is defined on the object.\n\nvar ProtoObj = {\n    fun: function () {\n        return this.a;\n    }\n};\n//Object.create() creates object with ProtoObj as its\n//prototype and assigns it to obj3, thus making fun() \n//to be the method on its prototype chain\n\nvar obj3 = Object.create(ProtoObj);\nobj3.a = 999;\ndocument.write(obj3.fun()); //999\n\n//Notice that fun() is defined on obj3's prototype but \n//`this.a` inside fun() retrieves obj3.a   \n\n\n6. Inside call(), apply() and bind() functions\n\n\nAll these methods are defined on Function.prototype.\nThese methods allows to write a function once and invoke it in different context. In other words, they allows to specify the value of this which will be used while the function is being executed. They also take any parameters to be passed to the original function when it is invoked.\nfun.apply(obj1 [, argsArray]) Sets obj1 as the value of this inside fun() and calls fun() passing elements of argsArray as its arguments.\nfun.call(obj1 [, arg1 [, arg2 [,arg3 [, ...]]]]) - Sets obj1 as the value of this inside fun() and calls fun() passing arg1, arg2, arg3, ... as its arguments.\nfun.bind(obj1 [, arg1 [, arg2 [,arg3 [, ...]]]]) - Returns the reference to the function fun with this inside fun bound to obj1 and parameters of fun bound to the   parameters specified arg1, arg2, arg3,....\nBy now the difference between apply, call and bind must have become apparent. apply allows to specify the arguments to function as array-like object i.e. an object with a numeric length property and corresponding non-negative integer properties. Whereas call allows to specify the arguments to the function directly. Both apply and call immediately invokes the function in the specified context and with the specified arguments. On the other hand, bind simply returns the function bound to the specified this value and the arguments. We can capture the reference to this returned function by assigning it to a variable and later we can call it any time.\n\n\n\n\nfunction add(inc1, inc2)\n{\n    return this.a + inc1 + inc2;\n}\n\nvar o = { a : 4 };\ndocument.write(add.call(o, 5, 6)+\"<br />\"); //15\n      //above add.call(o,5,6) sets `this` inside\n      //add() to `o` and calls add() resulting:\n      // this.a + inc1 + inc2 = \n      // `o.a` i.e. 4 + 5 + 6 = 15\ndocument.write(add.apply(o, [5, 6]) + \"<br />\"); //15\n      // `o.a` i.e. 4 + 5 + 6 = 15\n\nvar g = add.bind(o, 5, 6);       //g: `o.a` i.e. 4 + 5 + 6\ndocument.write(g()+\"<br />\");    //15\n\nvar h = add.bind(o, 5);          //h: `o.a` i.e. 4 + 5 + ?\ndocument.write(h(6) + \"<br />\"); //15\n      // 4 + 5 + 6 = 15\ndocument.write(h() + \"<br />\");  //NaN\n      //no parameter is passed to h()\n      //thus inc2 inside add() is `undefined`\n      //4 + 5 + undefined = NaN</code>\n\n\n7. this inside event handlers\n\n\nWhen you assign function directly to event handlers of an element, use of this directly inside event handling function refers to the corresponding element. Such direct function assignment can be done using addeventListener method or through the traditional event registration methods like onclick.\nSimilarly, when you use this directly inside the event property (like <button onclick=\"...this...\" >) of the element, it refers to the element.\nHowever use of this indirectly through the other function called inside the event handling function or event property resolves to the global object window.\nThe same above behavior is achieved when we attach the function to the event handler using Microsoft's Event Registration model method attachEvent. Instead of assigning the function to the event handler (and the thus making the function method of the element), it calls the function on the event (effectively calling it in global context).\n\n\nI recommend to better try this in JSFiddle.\n\n<script> \n    function clickedMe() {\n       alert(this + \" : \" + this.tagName + \" : \" + this.id);\n    } \n    document.getElementById(\"button1\").addEventListener(\"click\", clickedMe, false);\n    document.getElementById(\"button2\").onclick = clickedMe;\n    document.getElementById(\"button5\").attachEvent('onclick', clickedMe);   \n</script>\n\n<h3>Using `this` \"directly\" inside event handler or event property</h3>\n<button id=\"button1\">click() \"assigned\" using addEventListner() </button><br />\n<button id=\"button2\">click() \"assigned\" using click() </button><br />\n<button id=\"button3\" onclick=\"alert(this+ ' : ' + this.tagName + ' : ' + this.id);\">used `this` directly in click event property</button>\n\n<h3>Using `this` \"indirectly\" inside event handler or event property</h3>\n<button onclick=\"alert((function(){return this + ' : ' + this.tagName + ' : ' + this.id;})());\">`this` used indirectly, inside function <br /> defined & called inside event property</button><br />\n\n<button id=\"button4\" onclick=\"clickedMe()\">`this` used indirectly, inside function <br /> called inside event property</button> <br />\n\nIE only: <button id=\"button5\">click() \"attached\" using attachEvent() </button>\n\n\n8. this in ES6 arrow function \n\nIn an arrow function, this will behave like common variables: it will be inherited from its lexical scope. The function's this, where the arrow function is defined, will be the arrow function's this.\n\nSo, that's the same behavior as:\n\n(function(){}).bind(this)\n\n\nSee the following code:\n\nconst globalArrowFunction = () => {\n  return this;\n};\n\nconsole.log(globalArrowFunction()); //window\n\nconst contextObject = {\n  method1: () => {return this},\n  method2: function(){\n    return () => {return this};\n  }\n};\n\nconsole.log(contextObject.method1()); //window\n\nconst contextLessFunction = contextObject.method1;\n\nconsole.log(contextLessFunction()); //window\n\nconsole.log(contextObject.method2()()) //contextObject\n\nconst innerArrowFunction = contextObject.method2();\n\nconsole.log(innerArrowFunction()); //contextObject \n\n    ",
        "votes": 174,
        "comentarios": [
            {
                "decripcion": "\"When you use this inside a function defined in the global context, this is still bound to global object since the function is actually made a method of global context.\" is incorrect. this is set by how a function is called or by bind, not by where it is defined. Calling any function without a base reference (\"context\") will default this to the global object or remain undefined in strict mode.",
                "fecha": { "$date" : "2014-06-20T01:50:44Z" },
                "usuario": "RobG",
                "usuario_id": 647
            },
            {
                "decripcion": "@RobG hmm may be, but I found this on MDN: In this case, the value of this is not set by the call. Since the code is not in strict mode, the value of this must always be an object so it defaults to the global object. And in fact thats why I thought we can directly make call window.f1(), so that means f1() is already attached to window object, I mean before invocation. Am I getting it wrong?",
                "fecha": { "$date" : "2014-06-20T19:07:52Z" },
                "usuario": "Mahesha999",
                "usuario_id": 736
            },
            {
                "decripcion": "I was commenting (perhaps not clearly) on your linking the setting of this with \"the function is actually made a method of the global context\", as if it's sort of called window.fn, which it isn't. this defaults to the global object because no base reference was used in the call, not because of where the function is defined (so this is still set by how the function was called). If you explicitly call it using window.fn, then you are setting this to window. Same result, different way of going about it. :-)",
                "fecha": { "$date" : "2014-06-21T03:01:20Z" },
                "usuario": "RobG",
                "usuario_id": 647
            },
            {
                "decripcion": "\"above I have put the word immediate...\" no you didn't. Can you please revise this so that the error is fixed? It seems semantic to the answer and thus I can't continue reading until the error is fixed for fear of learning something incorrect.",
                "fecha": { "$date" : "2014-08-04T14:09:51Z" },
                "usuario": "TylerH",
                "usuario_id": 737
            },
            {
                "decripcion": "@TylerH do Ctrl+F on this page in your browser to find string \"immediate\" (including double quotes) I think its there if am understanding u wrong",
                "fecha": { "$date" : "2014-08-24T08:36:57Z" },
                "usuario": "Mahesha999",
                "usuario_id": 736
            }
        ],
        "usuario": "Mahesha999",
        "usuario_id": 736
    },
    {
        "_id": 437,
        "fecha": { "$date" : "2020-03-06T07:01:45Z" },
        "decripcion": "\nJavascript's this\n\nSimple function invocation\n\nConsider the following function:\n\nfunction foo() {\n    console.log(\"bar\");\n    console.log(this);\n}\nfoo(); // calling the function\n\n\nNote that we are running this in the normal mode, i.e. strict mode is not used.\n\nWhen running in a browser, the value of this would be logged as window. This is because window is the global variable in a web browser's scope.\n\nIf you run this same piece of code in an environment like node.js, this would refer to the global variable in your app.\n\nNow if we run this in strict mode by adding the statement \"use strict\"; to the beginning of the function declaration, this would no longer refer to the global variable in either of the environments. This is done to avoid confusions in strict mode. this would, in this case just log undefined, because that is what it is, it is not defined.\n\nIn the following cases, we would see how to manipulate the value of this.\n\nCalling a function on an object\n\nThere are different ways to do this. If you have called native methods in Javascript like forEach and slice, you should already know that the this variable in that case refers to the Object on which you called that function (Note that in javascript, just about everything is an Object, including Arrays and Functions). Take the following code for example.\n\nvar myObj = {key: \"Obj\"};\nmyObj.logThis = function () {\n    // I am a method\n    console.log(this);\n}\nmyObj.logThis(); // myObj is logged\n\n\nIf an Object contains a property which holds a Function, the property is called a method. This method, when called, will always have it's this variable set to the Object it is associated with. This is true for both strict and non-strict modes.\n\nNote that if a method is stored (or rather, copied) in another variable, the reference to this is no longer preserved in the new variable. For example:\n\n// continuing with the previous code snippet\n\nvar myVar = myObj.logThis;\nmyVar();\n// logs either of window/global/undefined based on mode of operation\n\n\nConsidering a more commonly practical scenario:\n\nvar el = document.getElementById('idOfEl');\nel.addEventListener('click', function() { console.log(this) });\n// the function called by addEventListener contains this as the reference to the element\n// so clicking on our element would log that element itself\n\n\nThe new keyword\n\nConsider a constructor function in Javascript:\n\nfunction Person (name) {\n    this.name = name;\n    this.sayHello = function () {\n        console.log (\"Hello\", this);\n    }\n}\n\nvar awal = new Person(\"Awal\");\nawal.sayHello();\n// In `awal.sayHello`, `this` contains the reference to the variable `awal`\n\n\nHow does this work? Well, let's see what happens when we use the new keyword.\n\n\nCalling the function with the new keyword would immediately initialize an Object of type Person.\nThe constructor of this Object has its constructor set to Person. Also, note that typeof awal would return Object only.\nThis new Object would be assigned the prototype of Person.prototype. This means that any method or property in the Person prototype would be available to all instances of Person, including awal.\nThe function Person itself is now invoked; this being a reference to the newly constructed object awal.\n\n\nPretty straightforward, eh?\n\nNote that the official ECMAScript spec nowhere states that such types of functions are actual constructor functions. They are just normal functions, and new can be used on any function. It's just that we use them as such, and so we call them as such only.\n\nCalling functions on Functions: call and apply\n\nSo yeah, since functions are also Objects (and in-fact first class variables in Javascript), even functions have methods which are... well, functions themselves.\n\nAll functions inherit from the global Function, and two of its many methods are call and apply, and both can be used to manipulate the value of this in the function on which they are called.\n\nfunction foo () { console.log (this, arguments); }\nvar thisArg = {myObj: \"is cool\"};\nfoo.call(thisArg, 1, 2, 3);\n\n\nThis is a typical example of using call. It basically takes the first parameter and sets this in the function foo as a reference to thisArg.  All other parameters passed to call is passed to the function foo as arguments.\nSo the above code will log {myObj: \"is cool\"}, [1, 2, 3] in the console. Pretty nice way to change the value of this in any function.\n\napply is almost the same as call accept that it takes only two parameters: thisArg and an array which contains the arguments to be passed to the function. So the above call call can be translated to apply like this:\n\nfoo.apply(thisArg, [1,2,3])\n\n\nNote that call and apply can override the value of this set by dot method invocation we discussed in the second bullet.\nSimple enough :)\n\nPresenting.... bind!\n\nbind is a brother of call and apply.  It is also a method inherited by all functions from the global Function constructor in Javascript. The difference between bind and call/apply is that both call and apply will actually invoke the function. bind, on the other hand, returns a new function with the thisArg and arguments pre-set. Let's take an example to better understand this:\n\nfunction foo (a, b) {\n    console.log (this, arguments);\n}\nvar thisArg = {myObj: \"even more cool now\"};\nvar bound = foo.bind(thisArg, 1, 2);\nconsole.log (typeof bound); // logs `function`\nconsole.log (bound);\n/* logs `function () { native code }` */\n\nbound(); // calling the function returned by `.bind`\n// logs `{myObj: \"even more cool now\"}, [1, 2]`\n\n\nSee the difference between the three? It is subtle, but they are used differently. Like call and apply, bind will also over-ride the value of this set by dot-method invocation.\n\nAlso note that neither of these three functions do any change to the original function. call and apply would return the value from freshly constructed functions while bind will return the freshly constructed function itself, ready to be called.\n\nExtra stuff, copy this\n\nSometimes, you don't like the fact that this changes with scope, especially nested scope. Take a look at the following example.\n\nvar myObj = {\n    hello: function () {\n        return \"world\"\n        },\n    myMethod: function () {\n        // copy this, variable names are case-sensitive\n        var that = this;\n        // callbacks ftw \\o/\n        foo.bar(\"args\", function () {\n            // I want to call `hello` here\n            this.hello(); // error\n            // but `this` references to `foo` damn!\n            // oh wait we have a backup \\o/\n            that.hello(); // \"world\"\n        });\n    }\n  };\n\n\nIn the above code, we see that the value of this changed with the nested scope, but we wanted the value of this from the original scope. So we 'copied' this to that and used the copy instead of this. Clever, eh?\n\nIndex:\n\n\nWhat is held in this by default?\nWhat if we call the function as a method with Object-dot notation?\nWhat if we use the new keyword?\nHow do we manipulate this with call and apply?\nUsing bind.\nCopying this to solve nested-scope issues.\n\n    ",
        "votes": 69,
        "comentarios": [],
        "usuario": "user3459110",
        "usuario_id": 738
    },
    {
        "_id": 438,
        "fecha": { "$date" : "2014-10-29T05:00:41Z" },
        "decripcion": "\n\"this\" is all about scope. Every function has its own scope, and since everything in JS is an object, even a function can store some values into itself using \"this\". OOP 101 teaches that \"this\" is only applicable to instances of an object. Therefore, every-time a function executes, a new \"instance\" of that function has a new meaning of \"this\".\n\nMost people get confused when they try to use \"this\" inside of anonymous closure functions like:\n\n(function(value) {\n    this.value = value;\n    $('.some-elements').each(function(elt){\n        elt.innerHTML = this.value;        // uh oh!! possibly undefined\n    });\n})(2);\n\n\nSo here, inside each(), \"this\" doesn't hold the \"value\" that you expect it to (from this.value = value; above it). So, to get over this (no pun intended) problem, a developer could:\n\n(function(value) {\n    var self = this;            // small change\n    self.value = value;\n    $('.some-elements').each(function(elt){\n        elt.innerHTML = self.value;        // phew!! == 2 \n    });\n})(2);\n\n\nTry it out; you'll begin to like this pattern of programming\n    ",
        "votes": 49,
        "comentarios": [
            {
                "decripcion": "\"everything in JS is an object\" is not true, JavaScript also has primitive values, see bclary.com/2004/11/07/#a-4.3.2",
                "fecha": { "$date" : "2010-06-27T14:47:33Z" },
                "usuario": "Marcel Korpel",
                "usuario_id": 739
            },
            {
                "decripcion": "The primitive values seem to have some methods on themselves, like String#substring(), Number#toString(), etc.. So, maybe not with the same nomenclature as that article, they really behave as if they were objects (they are all prototyped, ie. String#substring() is really: String.prototype.substring = function(){...}). Please correct me if I'm wrong.",
                "fecha": { "$date" : "2010-07-04T16:49:00Z" },
                "usuario": "arunjitsingh",
                "usuario_id": 740
            },
            {
                "decripcion": "The this keyword has nothing to do with scope. Also, it has a meaning also in functions that are not properties of objects.",
                "fecha": { "$date" : "2012-12-08T20:59:52Z" },
                "usuario": "Bergi",
                "usuario_id": 662
            },
            {
                "decripcion": "@arunjitsingh\u2014there are two schools of thought on that. I like the one that says \"everything is an object, but some can be represented by primitives for convenience\". ;-)",
                "fecha": { "$date" : "2015-01-06T23:20:13Z" },
                "usuario": "RobG",
                "usuario_id": 647
            },
            {
                "decripcion": "this is not ALL about scope. It is ALL about execution context, which is not the same thing as scope. JavaScript is lexically scoped (meaning scope is determined by the location of the code), but this is determined by how the function containing it is invoked - not where that function is.",
                "fecha": { "$date" : "2016-03-16T05:00:56Z" },
                "usuario": "Scott Marcus",
                "usuario_id": 741
            }
        ],
        "usuario": "arunjitsingh",
        "usuario_id": 740
    },
    {
        "_id": 439,
        "fecha": { "$date" : "2014-10-30T03:58:06Z" },
        "decripcion": "\nSince this thread has bumped up, I have compiled few points for readers new to this topic. \n\nHow is the value of this determined?\n\nWe use this similar to the way we use pronouns in natural languages like English:  \u201cJohn is running fast because he is trying to catch the train.\u201d Instead we could have written \u201c\u2026 John is trying to catch the train\u201d.  \n\nvar person = {    \n    firstName: \"Penelope\",\n    lastName: \"Barrymore\",\n    fullName: function () {\n\n    // We use \"this\" just as in the sentence above:\n       console.log(this.firstName + \" \" + this.lastName);\n\n    // We could have also written:\n       console.log(person.firstName + \" \" + person.lastName);\n    }\n}\n\n\nthis is not assigned a value until an object invokes the function where it is defined. In the global scope, all global variables and functions are defined on the window object. Therefore, this in a global function refers to (and has the value of) the global window object. \n\nWhen use strict, this in global and in anonymous functions that are not bound to any object holds a value of undefined.\n\nThe this keyword is most misunderstood when: 1) we borrow a method that uses this, 2) we assign a method that uses this to a variable, 3) a function that uses this is passed as a callback function, and 4) this is used inside a closure \u2014 an inner function. (2)\n\n\n\nWhat holds the future\n\nDefined in ECMA Script 6, arrow-functions adopt the this binding from the\nenclosing (function or global) scope.\n\nfunction foo() {\n     // return an arrow function\n     return (a) => {\n     // `this` here is lexically inherited from `foo()`\n     console.log(this.a);\n  };\n}\nvar obj1 = { a: 2 };\nvar obj2 = { a: 3 };\n\nvar bar = foo.call(obj1);\nbar.call( obj2 ); // 2, not 3!\n\n\nWhile arrow-functions provide an alternative to using bind(), it\u2019s important to note that they essentially are disabling the traditional this mechanism in favor of more widely understood lexical scoping. (1)\n\n\n\nReferences:\n\n\nthis & Object Prototypes, by Kyle Simpson. \u00a9 2014 Getify Solutions.\njavascriptissexy.com - http://goo.gl/pvl0GX \nAngus Croll - http://goo.gl/Z2RacU \n\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "carlodurso",
        "usuario_id": 742
    },
    {
        "_id": 440,
        "fecha": { "$date" : "2019-06-21T05:17:22Z" },
        "decripcion": "\nthis in JavaScript always refers to the 'owner' of the function that is being executed.\n\nIf no explicit owner is defined, then the top most owner, the window object, is referenced.\n\nSo if I did\n\nfunction someKindOfFunction() {\n   this.style = 'foo';\n}\n\n\nelement.onclick = someKindOfFunction;\n\nthis would refer to the element object. But be careful, a lot of people make this mistake.\n\n<element onclick=\"someKindOfFunction()\">\n\nIn the latter case, you merely reference the function, not hand it over to the element. Therefore, this will refer to the window object.\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "Seph",
        "usuario_id": 743
    },
    {
        "_id": 441,
        "fecha": { "$date" : "2020-02-17T17:06:04Z" },
        "decripcion": "\nEvery execution context in javascript has a this parameter that is set by:\n\n\nHow the function is called (including as an object method, use of call and apply, use of new)\nUse of bind\nLexically for arrow functions (they adopt the this of their outer execution context)\nWhether the code is in strict or non-strict mode\nWhether the code was invoked using eval\n\n\nYou can set the value of this using func.call, func.apply or func.bind.\n\nBy default, and what confuses most beginners, when a listener is called after an event is raised on a DOM element, the this value of the function is the DOM element.\n\njQuery makes this trivial to change with jQuery.proxy.\n    ",
        "votes": 15,
        "comentarios": [
            {
                "decripcion": "It's a little more correct to say that every function call has a scope. In other words, what's confusing about this in Javascript is that it's not an intrinsic property of the function itself, but rather an artifact of the way the function is invoked.",
                "fecha": { "$date" : "2010-06-27T14:34:58Z" },
                "usuario": "Pointy",
                "usuario_id": 744
            },
            {
                "decripcion": "@pointy thanks. what causes the most confusion about this in js is the fact that in all the languages used earlier (c#, c++), - this can't be manipulated n always points to the object instance whereas in js it depends and can be changed when invoking functions using func.call, func.bind etc. \u2013 Sushil",
                "fecha": { "$date" : "2013-06-25T10:04:26Z" },
                "usuario": "Sushil",
                "usuario_id": 745
            },
            {
                "decripcion": "this does not reference a function's scope. this will reference a specific object (or possibly undefined), which as you've said can be changed using .call() or .apply(). A function's scope is (essentially, when simplified) which variables it has access to, and this depends entirely on where the function is declared and cannot be changed.",
                "fecha": { "$date" : "2015-01-03T22:48:02Z" },
                "usuario": "nnnnnn",
                "usuario_id": 746
            },
            {
                "decripcion": "@Pointy: \"It's a little more correct to say that every function call has a scope.\" Even more correct to say that functions (and now blocks) have scope, function calls have context. Scope defines what the identifiers are that can be used by code in that scope. Context defines what those identifiers are bound to.",
                "fecha": { "$date" : "2015-11-14T15:09:04Z" },
                "usuario": "T.J. Crowder",
                "usuario_id": 511
            },
            {
                "decripcion": "\"Whatever that scope is, is referenced by \"this\".\" No, this and scope have nothing whatsoever to do with one another in ES5 and before (e.g., when this answer was written). In ES2015 (aka ES6), this and scope are related one fairly minimal way wrt arrow functions (the this in an arrow function is inherited from its enclosing scope), but this never refers to a scope.",
                "fecha": { "$date" : "2015-11-14T15:09:19Z" },
                "usuario": "T.J. Crowder",
                "usuario_id": 511
            }
        ],
        "usuario": "blockhead",
        "usuario_id": 747
    },
    {
        "_id": 442,
        "fecha": { "$date" : "2013-04-23T12:57:30Z" },
        "decripcion": "\nDaniel, awesome explanation! A couple of words on this and good list of this execution context pointer in case of event handlers.\n\nIn two words, this in JavaScript points the object from whom (or from whose execution context) the current function was run and it's always read-only, you can't set it anyway (such an attempt will end up with 'Invalid left-hand side in assignment' message.\n\nFor event handlers: inline event handlers, such as <element onclick=\"foo\">, override any other handlers attached earlier and before, so be careful and it's better to stay off of inline event delegation at all.\nAnd thanks to Zara Alaverdyan who inspired me to this list of examples through a dissenting debate :)\n\n\nel.onclick = foo; // in the foo - obj\nel.onclick = function () {this.style.color = '#fff';} // obj\nel.onclick = function() {doSomething();} // In the doSomething -\nWindow\nel.addEventListener('click',foo,false) // in the foo - obj\nel.attachEvent('onclick, function () { // this }') // window, all the\ncompliance to IE :)\n<button onclick=\"this.style.color = '#fff';\"> // obj\n<button onclick=\"foo\"> // In the foo - window, but you can <button\nonclick=\"foo(this)\">\n\n    ",
        "votes": 11,
        "comentarios": [],
        "usuario": "Arman",
        "usuario_id": 748
    },
    {
        "_id": 443,
        "fecha": { "$date" : "2016-03-25T14:23:39Z" },
        "decripcion": "\nHere is one good source of this in JavaScript.\n\nHere is the summary:\n\n\nglobal this\n\nIn a browser, at the global scope, this is the windowobject\n\n<script type=\"text/javascript\">\n  console.log(this === window); // true\n  var foo = \"bar\";\n  console.log(this.foo); // \"bar\"\n  console.log(window.foo); // \"bar\"\n\n\n\n\nIn node using the repl, this is the top namespace. You can refer to it as global.\n\n>this\n  { ArrayBuffer: [Function: ArrayBuffer],\n    Int8Array: { [Function: Int8Array] BYTES_PER_ELEMENT: 1 },\n    Uint8Array: { [Function: Uint8Array] BYTES_PER_ELEMENT: 1 },\n    ...\n>global === this\n true\n\n\nIn node executing from a script, this at the global scope starts as an empty object. It is not the same as global\n\n\\\\test.js\nconsole.log(this);  \\\\ {}\nconsole.log(this === global); \\\\ fasle\n\nfunction this\n\n\nExcept in the case of DOM event handlers or when a thisArg is provided (see further down), both in node and in a browser using this in a function that is not called with new references the global scope\u2026\n\n<script type=\"text/javascript\">\n    foo = \"bar\";\n\n    function testThis() {\n      this.foo = \"foo\";\n    }\n\n    console.log(this.foo); //logs \"bar\"\n    testThis();\n    console.log(this.foo); //logs \"foo\"\n</script>\n\n\nIf you use use strict;, in which case this will be undefined\n\n<script type=\"text/javascript\">\n    foo = \"bar\";\n\n    function testThis() {\n      \"use strict\";\n      this.foo = \"foo\";\n    }\n\n    console.log(this.foo); //logs \"bar\"\n    testThis();  //Uncaught TypeError: Cannot set property 'foo' of undefined \n</script>\n\n\nIf you call a function with new the this will be a new context, it will not reference the global this.\n\n<script type=\"text/javascript\">\n    foo = \"bar\";\n\n    function testThis() {\n      this.foo = \"foo\";\n    }\n\n    console.log(this.foo); //logs \"bar\"\n    new testThis();\n    console.log(this.foo); //logs \"bar\"\n\n    console.log(new testThis().foo); //logs \"foo\"\n</script>\n\n\n\nprototype this\n\n\nFunctions you create become function objects. They automatically get a special prototype property, which is something you can assign values to. When you create an instance by calling your function with new you get access to the values you assigned to the prototype property. You access those values using this.\n\nfunction Thing() {\n  console.log(this.foo);\n}\n\nThing.prototype.foo = \"bar\";\n\nvar thing = new Thing(); //logs \"bar\"\nconsole.log(thing.foo);  //logs \"bar\"\n\n\nIt is usually a mistake to assign arrays or objects on the prototype. If you want instances to each have their own arrays, create them in the function, not the prototype.\n\nfunction Thing() {\n    this.things = [];\n}\n\nvar thing1 = new Thing();\nvar thing2 = new Thing();\nthing1.things.push(\"foo\");\nconsole.log(thing1.things); //logs [\"foo\"]\nconsole.log(thing2.things); //logs []\n\n\n\nobject this\n\n\nYou can use this in any function on an object to refer to other properties on that object. This is not the same as an instance created with new.\n\nvar obj = {\n    foo: \"bar\",\n    logFoo: function () {\n        console.log(this.foo);\n    }\n};\n\nobj.logFoo(); //logs \"bar\"\n\n\n\nDOM event this\n\n\nIn an HTML DOM event handler, this is always a reference to the DOM element the event was attached to \n\nfunction Listener() {\n    document.getElementById(\"foo\").addEventListener(\"click\",\n       this.handleClick);\n}\nListener.prototype.handleClick = function (event) {\n    console.log(this); //logs \"<div id=\"foo\"></div>\"\n}\n\nvar listener = new Listener();\ndocument.getElementById(\"foo\").click();\n\n\nUnless you bind the context\n\nfunction Listener() {\n    document.getElementById(\"foo\").addEventListener(\"click\", \n        this.handleClick.bind(this));\n}\nListener.prototype.handleClick = function (event) {\n    console.log(this); //logs Listener {handleClick: function}\n}\n\nvar listener = new Listener();\ndocument.getElementById(\"foo\").click();\n\n\n\nHTML this\n\n\nInside HTML attributes in which you can put JavaScript, this is a reference to the element. \n\n<div id=\"foo\" onclick=\"console.log(this);\"></div>\n<script type=\"text/javascript\">\ndocument.getElementById(\"foo\").click(); //logs <div id=\"foo\"...\n</script>\n\n\n\neval this\n\n\nYou can use eval to access this.\n\nfunction Thing () {\n}\nThing.prototype.foo = \"bar\";\nThing.prototype.logFoo = function () {\n    eval(\"console.log(this.foo)\"); //logs \"bar\"\n}\n\nvar thing = new Thing();\nthing.logFoo();\n\n\n\nwith this\n\n\nYou can use with to add this to the current scope to read and write to values on this without referring to this explicitly.\n\nfunction Thing () {\n}\nThing.prototype.foo = \"bar\";\nThing.prototype.logFoo = function () {\n    with (this) {\n        console.log(foo);\n        foo = \"foo\";\n    }\n}\n\nvar thing = new Thing();\nthing.logFoo(); // logs \"bar\"\nconsole.log(thing.foo); // logs \"foo\"\n\n\n\njQuery this\n\n\nthe jQuery will in many places have this refer to a DOM element. \n\n<div class=\"foo bar1\"></div>\n<div class=\"foo bar2\"></div>\n<script type=\"text/javascript\">\n$(\".foo\").each(function () {\n    console.log(this); //logs <div class=\"foo...\n});\n$(\".foo\").on(\"click\", function () {\n    console.log(this); //logs <div class=\"foo...\n});\n$(\".foo\").each(function () {\n    this.click();\n});\n</script>\n\n    ",
        "votes": 11,
        "comentarios": [],
        "usuario": "zangw",
        "usuario_id": 749
    },
    {
        "_id": 444,
        "fecha": { "$date" : "2017-03-03T07:34:25Z" },
        "decripcion": "\nThere is a lot of confusion regarding how \"this\" keyword is interpreted in JavaScript. Hopefully this article will lay all those to rest once and for all. And a lot more. Please read the entire article carefully. Be forewarned that this article is long.\n\nIrrespective of the context in which it is used, \"this\" always references the \"current object\" in Javascript. However, what the \"current object\" is  differs according to context. The context may be exactly 1 of the 6 following:\n\n\nGlobal (i.e. Outside all functions)\nInside Direct \"Non Bound Function\" Call (i.e. a function that has not been bound by calling functionName.bind)\nInside Indirect \"Non Bound Function\" Call through functionName.call and functionName.apply\nInside \"Bound Function\" Call (i.e. a function that has been bound by calling functionName.bind)\nWhile Object Creation through \"new\"\nInside Inline DOM event handler\n\n\nThe following describes each of this contexts one by one:\n\n\nGlobal Context (i.e. Outside all functions):\n\nOutside all functions (i.e. in global context) the \"current\nobject\" (and hence the value of \"this\") is always the\n\"window\" object for browsers.\nInside Direct \"Non Bound Function\" Call: \n\nInside a Direct  \"Non Bound Function\" Call, the object that\ninvoked the function call becomes the \"current object\" (and hence\nthe value of \"this\"). If a function is called without a explicit current object, the current object is either the \"window\" object (For Non Strict Mode) or undefined (For Strict Mode)  . Any function (or variable) defined in\nGlobal Context automatically becomes a property of the \"window\" object.For e.g Suppose function is defined in Global Context as \n\nfunction UserDefinedFunction(){\n    alert(this)\n    }\n\n\nit becomes the property of the window object, as if you have defined\nit as\n\nwindow.UserDefinedFunction=function(){\n  alert(this)\n}  \n\n\nIn \"Non Strict Mode\", Calling/Invoking this function directly through   \"UserDefinedFunction()\" will automatically call/invoke\nit as \"window.UserDefinedFunction()\" making \"window\" as the\n\"current object\" (and hence the value of \"this\") within \"UserDefinedFunction\".Invoking this function in \"Non Strict Mode\" will result in the following\n\nUserDefinedFunction() // displays [object Window]  as it automatically gets invoked as window.UserDefinedFunction()\n\n\nIn \"Strict Mode\", Calling/Invoking the function directly through\n\"UserDefinedFunction()\" will \"NOT\" automatically call/invoke it as \"window.UserDefinedFunction()\".Hence the \"current\nobject\" (and the value of \"this\") within\n\"UserDefinedFunction\" shall be undefined. Invoking this function in \"Strict Mode\" will result in the following\n\nUserDefinedFunction() // displays undefined\n\n\nHowever, invoking it explicitly using window object shall result in\nthe following\n\nwindow.UserDefinedFunction() // \"always displays [object Window]   irrespective of mode.\"\n\n\nLet us look at another example. Please look at the following code\n\n function UserDefinedFunction()\n    {\n        alert(this.a + \",\"  + this.b + \",\"  + this.c  + \",\"  + this.d)\n    }\n\nvar o1={\n            a:1,\n            b:2,\n            f:UserDefinedFunction\n      }\nvar o2={\n            c:3,\n            d:4,\n            f:UserDefinedFunction\n       }\n\no1.f() // Shall display 1,2,undefined,undefined\no2.f() // Shall display undefined,undefined,3,4\n\n\nIn the above example we see that when \"UserDefinedFunction\" was\ninvoked through o1, \"this\" takes value of o1 and the\nvalue of its properties \"a\" and \"b\" get displayed. The value\nof \"c\" and \"d\" were shown as undefined as o1 does\nnot define these properties\n\nSimilarly when \"UserDefinedFunction\" was invoked through o2,\n\"this\" takes value of o2 and the value of its properties \"c\" and \"d\" get displayed.The value of \"a\" and \"b\" were shown as undefined as o2 does not define these properties.\nInside Indirect \"Non Bound Function\" Call through functionName.call and functionName.apply:\n\nWhen a \"Non Bound Function\" is called through\nfunctionName.call or functionName.apply, the \"current object\" (and hence the value of \"this\") is set to the value of\n\"this\" parameter (first parameter) passed to call/apply. The following code demonstrates the same.\n\nfunction UserDefinedFunction()\n{\n    alert(this.a + \",\"  + this.b + \",\"  + this.c  + \",\"  + this.d)\n}\nvar o1={\n            a:1,\n            b:2,\n            f:UserDefinedFunction\n       }\nvar o2={\n            c:3,\n            d:4,\n            f:UserDefinedFunction\n       }\n\nUserDefinedFunction.call(o1) // Shall display 1,2,undefined,undefined\nUserDefinedFunction.apply(o1) // Shall display 1,2,undefined,undefined\n\nUserDefinedFunction.call(o2) // Shall display undefined,undefined,3,4\nUserDefinedFunction.apply(o2) // Shall display undefined,undefined,3,4\n\no1.f.call(o2) // Shall display undefined,undefined,3,4\no1.f.apply(o2) // Shall display undefined,undefined,3,4\n\no2.f.call(o1) // Shall display 1,2,undefined,undefined\no2.f.apply(o1) // Shall display 1,2,undefined,undefined\n\n\nThe above code clearly shows that the \"this\" value for any \"NON\nBound Function\" can be altered through call/apply. Also,if the\n\"this\" parameter is  not explicitly passed to call/apply, \"current object\" (and hence the value of \"this\") is set to \"window\" in Non strict mode and \"undefined\" in strict mode.\nInside \"Bound Function\" Call (i.e. a function that has been bound by calling functionName.bind):\n\nA bound function is a function whose \"this\" value has been\nfixed. The following code demonstrated how \"this\" works in case\nof bound function\n\nfunction UserDefinedFunction()\n{\n    alert(this.a + \",\"  + this.b + \",\"  + this.c  + \",\"  + this.d)\n}\nvar o1={\n          a:1,\n          b:2,\n          f:UserDefinedFunction,\n          bf:null\n       }\nvar o2={\n           c:3,\n           d:4,\n           f:UserDefinedFunction,\n           bf:null\n        }\n\nvar bound1=UserDefinedFunction.bind(o1); // permanantly fixes \"this\" value of function \"bound1\" to Object o1\nbound1() // Shall display 1,2,undefined,undefined\n\nvar bound2=UserDefinedFunction.bind(o2); // permanantly fixes \"this\" value of function \"bound2\" to Object o2\nbound2() // Shall display undefined,undefined,3,4\n\nvar bound3=o1.f.bind(o2); // permanantly fixes \"this\" value of function \"bound3\" to Object o2\nbound3() // Shall display undefined,undefined,3,4\n\nvar bound4=o2.f.bind(o1); // permanantly fixes \"this\" value of function \"bound4\" to Object o1\nbound4() // Shall display 1,2,undefined,undefined\n\no1.bf=UserDefinedFunction.bind(o2) // permanantly fixes \"this\" value of function \"o1.bf\" to Object o2\no1.bf() // Shall display undefined,undefined,3,4\n\no2.bf=UserDefinedFunction.bind(o1) // permanantly fixes \"this\" value of function \"o2.bf\" to Object o1\no2.bf() // Shall display 1,2,undefined,undefined\n\nbound1.call(o2) // Shall still display 1,2,undefined,undefined. \"call\" cannot alter the value of \"this\" for bound function\n\nbound1.apply(o2) // Shall still display 1,2,undefined,undefined. \"apply\" cannot alter the value of \"this\" for bound function\n\no2.bf.call(o2) // Shall still display 1,2,undefined,undefined. \"call\" cannot alter the value of \"this\" for bound function\no2.bf.apply(o2) // Shall still display 1,2,undefined,undefined.\"apply\" cannot alter the value of \"this\" for bound function\n\n\nAs given in the code above, \"this\" value for any \"Bound Function\"\nCANNOT be altered through call/apply. Also, if the \"this\"\nparameter is  not explicitly passed to bind, \"current object\"\n(and hence the value of \"this\" ) is set to \"window\" in Non\nstrict mode and \"undefined\" in strict mode.  One more thing.\nBinding an already bound function does not change the value of \"this\".\nIt remains set as the value set by first bind function.\nWhile Object Creation through \"new\":\n\nInside a constructor function, the \"current object\" (and hence the value of \n\"this\") references the object that is currently being created\nthrough \"new\" irrespective of the bind status of the function. However\nif the constructor is a bound function it shall get called with \npredefined set of arguments as set for the bound function.\nInside Inline DOM event handler:\n\nPlease look at the following HTML Snippet\n\n<button onclick='this.style.color=white'>Hello World</button>\n<div style='width:100px;height:100px;' onclick='OnDivClick(event,this)'>Hello World</div>\n\n\nThe \"this\" in above examples refer to \"button\" element and the\n\"div\" element respectively.\n\nIn the first example, the font color of the button shall be set to\nwhite when it is clicked.\n\nIn the second example when the \"div\" element is clicked it shall\ncall the OnDivClick function with its second parameter\nreferencing the clicked div element. However the value of \"this\"\nwithin OnDivClick SHALL NOT reference the clicked div\nelement. It shall be set as the \"window object\" or\n\"undefined\" in Non strict and Strict Modes respectively (if OnDivClick is an unbound function) or set to a predefined\nBound value (if OnDivClick is a bound function)\n\n\nThe following summarizes the entire article\n\n\nIn Global Context \"this\" always refers to the \"window\" object\nWhenever a function is invoked, it is invoked in context of an\nobject (\"current object\"). If the current object is not explicitly provided,\nthe current object  is the \"window object\" in NON Strict\nMode and \"undefined\" in Strict Mode by default.\nThe value of \"this\" within a Non Bound function is the reference to object in context of which the function is invoked (\"current object\")\nThe value of \"this\" within a Non Bound function can be overriden by\ncall and apply methods of the function.\nThe value of \"this\" is fixed for a Bound function and cannot be\noverriden by call and apply methods of the function.\nBinding and already bound function does not change the value of \"this\". It remains set as the value set by first bind function.\nThe value of \"this\" within a constructor is the object that is being\ncreated and initialized\nThe value of \"this\" within an inline DOM event handler is reference\nto the element for which the event handler is given.\n\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "Arup Hore",
        "usuario_id": 750
    },
    {
        "_id": 445,
        "fecha": { "$date" : "2018-08-22T06:19:50Z" },
        "decripcion": "\nProbably the most detailed and comprehensive article on this is the following: \n\nGentle explanation of 'this' keyword in JavaScript\n\nThe idea behind this is to understand that the function invocation types have the significant importance on setting this value.  \n\n\n\nWhen having troubles identifying this, do not ask yourself:  \n\n\n  Where is this taken from?\n\n\nbut do ask yourself:\n\n\n  How is the function invoked?\n\n\nFor an arrow function (special case of context transparency) ask yourself:\n\n\n  What value has this where the arrow function is defined?\n\n\nThis mindset is correct when dealing with this and will save you from headache.\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "In addition to linking to your blog, maybe you could delve a little deeper into how asking those questions helps someone understand the this keyword?",
                "fecha": { "$date" : "2019-06-02T15:06:22Z" },
                "usuario": "Magnus Lind Oxlund",
                "usuario_id": 751
            }
        ],
        "usuario": "Dmitri Pavlutin",
        "usuario_id": 752
    },
    {
        "_id": 446,
        "fecha": { "$date" : "2019-06-02T20:53:49Z" },
        "decripcion": "\nThis is the best explanation I've seen: Understand JavaScripts this with Clarity\n\n\n  The this reference ALWAYS refers to (and holds the value of) an\n  object\u2014a singular object\u2014and it is usually used inside a function or a\n  method, although it can be used outside a function in the global\n  scope. Note that when we use strict mode, this holds the value of\n  undefined in global functions and in anonymous functions that are not\n  bound to any object.\n\n\nThere are Four Scenarios where this can be confusing:\n\n\nWhen we pass a method (that uses this) as an argument to be used as a callback function. \nWhen we use an inner function (a closure). It is important to take note that closures cannot access the outer function\u2019s this variable by using the this keyword because the this variable is accessible only by the function itself, not by inner functions.\nWhen a method which relies on this is assigned to a variable across contexts, in which case this references another object than originally intended.\nWhen using this along with the bind, apply, and call methods.\n\n\nHe gives code examples, explanations, and solutions, which I thought was very helpful.\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "James Drinkard",
        "usuario_id": 753
    },
    {
        "_id": 447,
        "fecha": { "$date" : "2017-05-23T12:02:59Z" },
        "decripcion": "\nthis is one of the misunderstood concept in JavaScript because it behaves little differently from place to place. Simply, this refers to the \"owner\" of the function we are currently executing. \n\nthis helps to get the current object (a.k.a. execution context) we work with. If you understand in which object the current function is getting executed, you can understand easily what current this is\n\nvar val = \"window.val\"\n\nvar obj = {\n    val: \"obj.val\",\n    innerMethod: function () {\n        var val = \"obj.val.inner\",\n            func = function () {\n                var self = this;\n                return self.val;\n            };\n\n        return func;\n    },\n    outerMethod: function(){\n        return this.val;\n    }\n};\n\n//This actually gets executed inside window object \nconsole.log(obj.innerMethod()()); //returns window.val\n\n//Breakdown in to 2 lines explains this in detail\nvar _inn = obj.innerMethod();\nconsole.log(_inn()); //returns window.val\n\nconsole.log(obj.outerMethod()); //returns obj.val\n\n\nAbove we create 3 variables with same name 'val'. One in global context, one inside obj and the other inside innerMethod of obj. JavaScript resolves identifiers within a particular context by going up the scope chain from local go global. \n\n\n\nFew places where this can be differentiated \n\nCalling a method of a object\n\nvar status = 1;\nvar helper = {\n    status : 2,\n    getStatus: function () {\n        return this.status;\n    }\n};\n\nvar theStatus1 = helper.getStatus(); //line1\nconsole.log(theStatus1); //2\n\nvar theStatus2 = helper.getStatus;\nconsole.log(theStatus2()); //1\n\n\nWhen line1 is executed, JavaScript establishes an execution context (EC) for the function call, setting this to the object referenced by whatever came before the last \".\". so in the last line you can understand that a() was executed in the global context which is the window.\n\nWith Constructor\n\nthis can be used to refer to the object being created\n\nfunction Person(name){\n    this.personName = name;\n    this.sayHello = function(){\n        return \"Hello \" + this.personName;\n    }\n}\n\nvar person1 = new Person('Scott');\nconsole.log(person1.sayHello()); //Hello Scott\n\nvar person2 = new Person('Hugh');\nvar sayHelloP2 = person2.sayHello;\nconsole.log(sayHelloP2()); //Hello undefined\n\n\nWhen new Person() is executed, a completely new object is created. Person is called and its this is set to reference that new object. \n\nFunction call\n\nfunction testFunc() {\n    this.name = \"Name\";\n    this.myCustomAttribute = \"Custom Attribute\";\n    return this;\n}\n\nvar whatIsThis = testFunc();\nconsole.log(whatIsThis); //window\n\nvar whatIsThis2 = new testFunc();\nconsole.log(whatIsThis2);  //testFunc() / object\n\nconsole.log(window.myCustomAttribute); //Custom Attribute \n\n\nIf we miss new keyword, whatIsThis referes to the most global context it can find(window)\n\nWith event handlers\n\nIf the event handler is inline, this refers to global object\n\n<script type=\"application/javascript\">\n    function click_handler() {\n        alert(this); // alerts the window object\n    }\n</script>\n\n<button id='thebutton' onclick='click_handler()'>Click me!</button>\n\n\nWhen adding event handler through JavaScript, this refers to DOM element that generated the event.\n\n\n\n\nYou can also manipulate the context using .apply() .call() and .bind()\nJQuery proxy is another way you can use to make sure this in a function will be the value you desire. (Check Understanding $.proxy(), jQuery.proxy() usage)\nWhat does var that = this means in JavaScript\n\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Nipuna",
        "usuario_id": 754
    },
    {
        "_id": 448,
        "fecha": { "$date" : "2017-08-07T07:54:30Z" },
        "decripcion": "\nThe value of \"this\" depends on the \"context\" in which the function is executed. The context can be any object or the global object, i.e., window.\n\nSo the Semantic of \"this\" is different from the traditional OOP languages. And it causes problems:\n1. when a function is passed to another variable (most likely, a callback); and 2. when a closure is invoked from a member method of a class.\n\nIn both cases, this is set to window.\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Trombe",
        "usuario_id": 755
    },
    {
        "_id": 449,
        "fecha": { "$date" : "2017-09-16T22:11:43Z" },
        "decripcion": "\nIn pseudoclassical terms, the way many lectures teach the 'this' keyword is as an object instantiated by a class or object constructor. Each time a new object is constructed from a class, imagine that under the hood a local instance of a 'this' object is created and returned. I remember it taught like this:\n\nfunction Car(make, model, year) {\nvar this = {}; // under the hood, so to speak\nthis.make = make;\nthis.model = model;\nthis.year = year;\nreturn this; // under the hood\n}\n\nvar mycar = new Car('Eagle', 'Talon TSi', 1993);\n// ========= under the hood\nvar this = {};\nthis.make = 'Eagle';\nthis.model = 'Talon TSi';\nthis.year = 1993;\nreturn this;\n\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "mrmaclean89",
        "usuario_id": 756
    },
    {
        "_id": 450,
        "fecha": { "$date" : "2010-06-27T13:15:45Z" },
        "decripcion": "\nWhould this help? (Most confusion of 'this' in javascript is coming from the fact that it generally is not linked to your object, but to the current executing scope -- that might not be exactly how it works but is always feels like that to me -- see the article for a complete explanation)\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "It would be better to say it's linked \"to the current execution context\". Except ES6 (draft) changes that with arrow functions, where this is resolved on the outer execution context.",
                "fecha": { "$date" : "2015-01-06T23:29:55Z" },
                "usuario": "RobG",
                "usuario_id": 647
            }
        ],
        "usuario": "Simon Groenewolt",
        "usuario_id": 757
    },
    {
        "_id": 451,
        "fecha": { "$date" : "2018-07-25T07:04:35Z" },
        "decripcion": "\nA little bit info about this keyword\n\nLet's log this keyword to the console in global scope without any more code but\n\nconsole.log(this)\n\n\nIn Client/Browser this keyword is a global object which is window\n\nconsole.log(this === window) // true\n\n\nand\n\nIn Server/Node/Javascript runtime this keyword is also a global object which is module.exports\n\nconsole.log(this === module.exports) // true\nconsole.log(this === exports) // true\n\n\nKeep in mind exports is just a reference to module.exports\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "unclexo",
        "usuario_id": 758
    },
    {
        "_id": 452,
        "fecha": { "$date" : "2019-01-28T18:37:07Z" },
        "decripcion": "\nI have a different take on this from the other answers that I hope is helpful.\n\nOne way to look at JavaScript is to see that there are only 1 way to call a function1. It is\n\nfunctionObject.call(objectForThis, arg0, arg1, arg2, ...);\n\n\nThere is always some value supplied for objectForThis.\n\nEverything else is syntactic sugar for functionObject.call\n\nSo, everything else can be described by how it translates into functionObject.call.\n\nIf you just call a function then this is the \"global object\" which in the browser is the window\n\n\n\nfunction foo() {\n  console.log(this);\n}\n\nfoo();  // this is the window object\n Run code snippetHide resultsExpand snippet\n\n\n\nIn other words, \n\nfoo();\n\n\nwas effectively translated into\n\nfoo.call(window);\n\n\nNote that if you use strict mode then this will be undefined\n\n\n\n'use strict';\n\nfunction foo() {\n  console.log(this);\n}\n\nfoo();  // this is the window object\n Run code snippetHide resultsExpand snippet\n\n\n\nwhich means\n\nIn other words, \n\nfoo();\n\n\nwas effectively translated into\n\nfoo.call(undefined);\n\n\nIn JavaScript there are operators like + and - and *. There is also the dot operator which is .\n\nThe . operator when used with a function on the right and an object on the left effectively means \"pass object as this to function.\n\nExample\n\n\n\nconst bar = {\n  name: 'bar',\n  foo() { \n    console.log(this); \n  },\n};\n\nbar.foo();  // this is bar\n Run code snippetHide resultsExpand snippet\n\n\n\nIn other words bar.foo() translates into const temp = bar.foo; temp.call(bar);\n\nNote that it doesn't matter how the function was created (mostly...). All of these will produce the same results\n\n\n\nconst bar = {\n  name: 'bar',\n  fn1() { console.log(this); },\n  fn2: function() { console.log(this); },\n  fn3: otherFunction,\n};\n\nfunction otherFunction() { console.log(this) };\n\nbar.fn1();  // this is bar\nbar.fn2();  // this is bar\nbar.fn3();  // this is bar\n Run code snippetHide resultsExpand snippet\n\n\n\nAgain these all are just syntactic sugar for\n\n{ const temp = bar.fn1; temp.call(bar); }\n{ const temp = bar.fn2; temp.call(bar); }\n{ const temp = bar.fn3; temp.call(bar); }\n\n\nOne other wrinkle is the prototype chain. When you use a.b JavaScript first looks on the object referenced directly by a for the property b. If b is not found on the object then JavaScript will look in the object's prototype to find b. \n\nThere are various ways to define an object's prototype, the most common in 2019 is the class keyword. For the purposes of this though it doesn't matter. What matters is that as it looks in object a for property b if it finds property b on the object or in it's prototype chain if b ends up being a function then the same rules as above apply. The function b references will be called using the call method and passing a as objectForThis as shown a the top of this answer.\n\nNow. Let's imagine we make a function that explicitly sets this before calling another function and then call it with the . (dot) operator\n\n\n\nfunction foo() {\n  console.log(this);\n}\n\nfunction bar() {\n  const objectForThis = {name: 'moo'}\n  foo.call(objectForThis);  // explicitly passing objectForThis\n}\n\nconst obj = {\n  bar,\n};\n\nobj.bar();  \n Run code snippetHide resultsExpand snippet\n\n\n\nFollowing the translation to use call, obj.bar() becomes const temp = obj.bar; temp.call(obj);. When we enter the bar function we call foo but we explicitly passed in another object for objectForThis so when we arrive at foo this is that inner object.\n\nThis is what both bind and => functions effectively do. They are more syntactic sugar. They effectively build a new invisible function exactly like bar above that explicitly sets this before it calls whatever function is specified. In the case of bind this is set to whatever you pass to bind.\n\n\n\nfunction foo() {\n  console.log(this);\n}\n\nconst bar = foo.bind({name: 'moo'});\n\n// bind created a new invisible function that calls foo with the bound object.\n\nbar();  \n\n// the objectForThis we are passing to bar here is ignored because\n// the invisible function that bind created will call foo with with\n// the object we bound above\n\nbar.call({name: 'other'});\n Run code snippetHide resultsExpand snippet\n\n\n\nNote that if functionObject.bind did not exist we could make our own like this\n\nfunction bind(fn, objectForThis) {\n  return function(...args) {\n    return fn.call(objectForthis, ...args);\n  };\n}\n\n\nand then we could call it like this\n\nfunction foo() {\n  console.log(this);\n}\n\nconst bar = bind(foo, {name:'abc'});\n\n\nArrow functions, the => operator are syntactic sugar for bind\n\nconst a = () => {console.log(this)};\n\n\nis the same as\n\nconst tempFn = function() {console.log(this)}; \nconst a = tempFn.bind(this);\n\n\nJust like bind, a new invisible function is created that calls the given function with a bound value for objectForThis but unlike bind the object to be bound is implicit. It's whatever this happens to be when the => operator is used.\n\nSo, just like the rules above\n\nconst a = () => { console.log(this); }  // this is the global object\n\n\n'use strict';\nconst a = () => { console.log(this); }  // this is undefined\n\n\nfunction foo() {\n  return () => { console.log(this); }\n}\n\nconst obj = {\n  foo,\n};\nconst b = obj.foo();\nb();\n\n\nobj.foo() translates to const temp = obj.foo; temp.call(obj); which means the arrow operator inside foo will bind obj to a new invisible function and return that new invisible function which is assigned to b. b() will work as it always has as b.call(window) or b.call(undefined) calling the new invisible function that foo created. That invisible function ignores the this passed into it and  passes obj as objectForThis` to the arrow function.\n\nThe code above translates to\n\nfunction foo() {\n  function tempFn() {\n    console.log(this);\n  }\n  return tempFn.bind(this);\n}\n\nconst obj = {\n  foo,\n};\nconst b = obj.foo();\nb.call(window or undefined if strict mode);\n\n\n1apply is another function similar to call\n\nfunctionName.apply(objectForThis, arrayOfArgs);\n\n\nBut as of ES6 conceptually you can even translate that into\n\nfunctionName.call(objectForThis, ...arrayOfArgs);\n\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "Man your explanation is very effective. Totally cleared my confusion.",
                "fecha": { "$date" : "2021-03-03T07:42:05Z" },
                "usuario": "John Winston",
                "usuario_id": 759
            }
        ],
        "usuario": "gman",
        "usuario_id": 760
    },
    {
        "_id": 453,
        "fecha": { "$date" : "2016-04-06T07:15:05Z" },
        "decripcion": "\nthis use for Scope just like this\n\n  <script type=\"text/javascript\" language=\"javascript\">\n$('#tbleName tbody tr').each(function{\nvar txt='';\ntxt += $(this).find(\"td\").eq(0).text();\n\\\\same as above but synatx different\nvar txt1='';\n txt1+=$('#tbleName tbody tr').eq(0).text();\nalert(txt1)\n});\n</script>\n\n\nvalue of txt1 and txt is same\nin Above example \n$(this)=$('#tbleName tbody tr') is Same\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 454,
        "fecha": { "$date" : "2018-08-21T17:12:28Z" },
        "decripcion": "\nSummary this Javascript:\n\n\nThe value of this is determined by how the function is invoked not, where it was created!\nUsually the value of this is determined by the Object which is left of the dot. (window in global space)\nIn event listeners the value of this  refers to the DOM element on which the event was called.\nWhen in function is called with the new keyword the value of this refers to the newly created object\nYou can manipulate the value of this with the functions: call, apply, bind\n\n\nExample:\n\n\n\nlet object = {\n  prop1: function () {console.log(this);}\n}\n\nobject.prop1();   // object is left of the dot, thus this is object\n\nconst myFunction = object.prop1 // We store the function in the variable myFunction\n\nmyFunction(); // Here we are in the global space\n              // myFunction is a property on the global object\n              // Therefore it logs the window object\n              \n             \n Run code snippetHide resultsExpand snippet\n\n\n\nExample event listeners:\n\n\n\ndocument.querySelector('.foo').addEventListener('click', function () {\n  console.log(this);   // This refers to the DOM element the eventListener was invoked from\n})\n\n\ndocument.querySelector('.foo').addEventListener('click', () => {\n  console.log(this);  // Tip, es6 arrow function don't have their own binding to the this v\n})                    // Therefore this will log the global object\n.foo:hover {\n  color: red;\n  cursor: pointer;\n}\n<div class=\"foo\">click me</div>\n Run code snippetHide resultsExpand snippet\n\n\n\nExample constructor:\n\n\n\nfunction Person (name) {\n  this.name = name;\n}\n\nconst me = new Person('Willem');\n// When using the new keyword the this in the constructor function will refer to the newly created object\n\nconsole.log(me.name); \n// Therefore, the name property was placed on the object created with new keyword.\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Willem van der Veen",
        "usuario_id": 661
    },
    {
        "_id": 455,
        "fecha": { "$date" : "2020-05-23T09:18:11Z" },
        "decripcion": "\nTo understand \"this\" properly one must understand the context and scope and difference between them.\n\nScope: In javascript scope is related to the visibility of the variables, scope achieves through the use of the function. (Read more about scope)\n\nContext: Context is related to objects. It refers to the object to which a function belongs. When you use the JavaScript \u201cthis\u201d keyword, it refers to the object to which function belongs. For example, inside of a function, when you say: \u201cthis.accoutNumber\u201d, you are referring to the property \u201caccoutNumber\u201d, that belongs to the object to which that function belongs. \n\nIf the object \u201cmyObj\u201d has a method called \u201cgetMyName\u201d, when the JavaScript keyword \u201cthis\u201d is used inside of \u201cgetMyName\u201d, it refers to \u201cmyObj\u201d. If the function \u201cgetMyName\u201d were executed in the global scope, then \u201cthis\u201d refers to the window object (except in strict mode). \n\nNow let's see some example:\n\n    <script>\n        console.log('What is this: '+this);\n        console.log(this);\n    </script>\n\n\nRunnig abobve code in browser output will:\n\n\nAccording to the output you are inside of the context of the window object, it is also visible that window prototype refers to the Object.\n\nNow let's try inside of a function:\n\n    <script>\n        function myFunc(){\n            console.log('What is this: '+this);\n            console.log(this);\n        }\n        myFunc();\n    </script>\n\n\nOutput:\n\n\nThe output is the same because we logged 'this' variable in the global scope and we logged it in functional scope, we didn't change the context. In both case context was same, related to widow object. \n\nNow let's create our own object. In javascript, you can create an object in many ways.\n\n <script>\n        var firstName = \"Nora\";\n        var lastName = \"Zaman\";\n        var myObj = {\n            firstName:\"Lord\",\n            lastName:'Baron',\n            printNameGetContext:function(){\n                console.log(firstName + \" \"+lastName);\n                console.log(this.firstName +\" \"+this.lastName);\n                return this;\n            }\n        }\n\n      var context = myObj.printNameGetContext();\n      console.log(context);\n    </script>\n\n\nOutput: \n\n\nSo from the above example, we found that 'this' keyword is referring to a new context that is related to myObj, and myObject also has prototype chain to Object.\n\nLet's go throw another example:\n\n<body>\n    <button class=\"btn\">Click Me</button>\n    <script>\n        function printMe(){\n            //Terminal2: this function declared inside window context so this function belongs to the window object.\n            console.log(this);\n        }\n        document.querySelector('.btn').addEventListener('click', function(){\n            //Terminal1: button context, this callback function belongs to DOM element \n            console.log(this);\n            printMe();\n        })\n    </script>\n</body>\n\n\noutput: \nMake sense right? (read comments) \n\n\nIf you having trouble to understand the above example let's try with our own callback;\n\n<script>\n        var myObj = {\n            firstName:\"Lord\",\n            lastName:'Baron',\n            printName:function(callback1, callback2){\n                //Attaching callback1 with this myObj context\n                this.callback1 = callback1;\n                this.callback1(this.firstName +\" \"+this.lastName)\n                //We did not attached callback2 with myObj so, it's reamin with window context by default\n                callback2();\n                /*\n                 //test bellow codes\n                 this.callback2 = callback2;\n                 this.callback2();\n                */\n            }\n        }\n        var callback2 = function (){\n            console.log(this);\n        }\n        myObj.printName(function(data){\n            console.log(data);\n            console.log(this);\n        }, callback2);\n    </script>\n\n\noutput:\n\n\nNow let's Understand Scope, Self, IIFE and THIS how behaves \n\n       var color = 'red'; // property of window\n       var obj = {\n           color:'blue', // property of window\n           printColor: function(){ // property of obj, attached with obj\n               var self = this;\n               console.log('In printColor -- this.color: '+this.color);\n               console.log('In printColor -- self.color: '+self.color);\n               (function(){ // decleard inside of printColor but not property of object, it will executed on window context.\n                    console.log(this)\n                    console.log('In IIFE -- this.color: '+this.color);\n                    console.log('In IIFE -- self.color: '+self.color); \n               })();\n\n               function nestedFunc(){// decleard inside of printColor but not property of object, it will executed on window context.\n                    console.log('nested fun -- this.color: '+this.color);\n                    console.log('nested fun -- self.color: '+self.color);\n               }\n\n               nestedFunc(); // executed on window context\n               return nestedFunc;\n           }\n       };\n\n       obj.printColor()(); // returned function executed on window context\n   </script> \n\n\nOutput is pretty awesome right?\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Lord",
        "usuario_id": 761
    },
    {
        "_id": 456,
        "fecha": { "$date" : "2019-04-09T08:41:24Z" },
        "decripcion": "\nYes, you saw it right.\n\nAs per the current WebDriver - W3C Candidate Recommendation the Locator Strategies enlisted are as follows :\n\n\n\"css selector\" : CSS selector\n\"link text\" : Link text selector\n\"partial link text\" : Partial link text selector\n\"tag name\" : Tag name\n\"xpath\" : XPath selector\n\n\nSnapshot :\n\n\n\nHowever, the JsonWireProtocol was once used to support the Locator Strategies enlisted below but currently the documentation clearly states it's Status as OBSOLETE :\n\n\nclass name : Returns an element whose class name contains the search value; compound class names are not permitted.\ncss selector : Returns an element matching a CSS selector.\nid : Returns an element whose ID attribute matches the search value.\nname : Returns an element whose NAME attribute matches the search value.\nlink text : Returns an anchor element whose visible text matches the search value.\npartial link text : Returns an anchor element whose visible text partially matches the search value.\ntag name : Returns an element whose tag name matches the search value.\nxpath : Returns an element matching an XPath expression. The provided XPath expression must be applied to the server \"as is\"; if the expression is not relative to the element root, the server should not modify it. Consequently, an XPath query may return elements not contained in the root element's subtree.\n\n\nSnapshot :\n\n\n\nThe change was propagated through the respective client specific bindings. For the Selenium-Java clients here is the client code where we have the switchcase working for the users :\n\n\n\n        switch (using) {\n          case \"class name\":\n            toReturn.put(\"using\", \"css selector\");\n            toReturn.put(\"value\", \".\" + cssEscape(value));\n            break;\n\n          case \"id\":\n            toReturn.put(\"using\", \"css selector\");\n            toReturn.put(\"value\", \"#\" + cssEscape(value));\n            break;\n\n          case \"link text\":\n            // Do nothing\n            break;\n\n          case \"name\":\n            toReturn.put(\"using\", \"css selector\");\n            toReturn.put(\"value\", \"*[name='\" + value + \"']\");\n            break;\n\n          case \"partial link text\":\n            // Do nothing\n            break;\n\n          case \"tag name\":\n            toReturn.put(\"using\", \"css selector\");\n            toReturn.put(\"value\", cssEscape(value));\n            break;\n\n          case \"xpath\":\n            // Do nothing\n            break;\n        }\n        return toReturn;\n Run code snippetHide resultsExpand snippet\n\n\n\nSnapshot :\n\n\n\nNow, your question must be why this change in the W3C Specs and in the clients. As per #1042 the Answer from the WebDriver Contributors was pretty straight as : \n\n\n  This keeps the specification simple as these can be implemented using the CSS selector, which maps down to querySelector/querySelectorAll.\n\n    ",
        "votes": 24,
        "comentarios": [
            {
                "decripcion": "While comparing getElementById and querySelector, i found that getElementById is fast. I really don't understand Why id locator is obsolete. Please check: jsperf.com/getelementbyid-vs-queryselector",
                "fecha": { "$date" : "2018-07-24T16:36:24Z" },
                "usuario": "Purendra Agrawal",
                "usuario_id": 766
            }
        ],
        "usuario": "DebanjanB",
        "usuario_id": 767
    },
    {
        "_id": 457,
        "fecha": { "$date" : "2021-01-26T13:08:51Z" },
        "decripcion": "\nA closure is a pairing of:\n\nA function, and\nA reference to that function's outer scope (lexical environment)\n\nA lexical environment is part of every execution context (stack frame) and is a map between identifiers (ie. local variable names) and values.\nEvery function in JavaScript maintains a reference to its outer lexical environment. This reference is used to configure the execution context created when a function is invoked. This reference enables code inside the function to \"see\" variables declared outside the function, regardless of when and where the function is called.\nIf a function was called by a function, which in turn was called by another function, then a chain of references to outer lexical environments is created. This chain is called the scope chain.\nIn the following code, inner forms a closure with the lexical environment of the execution context created when foo is invoked, closing over variable secret:\n\n\nfunction foo() {\n  const secret = Math.trunc(Math.random()*100)\n  return function inner() {\n    console.log(`The secret number is ${secret}.`)\n  }\n}\nconst f = foo() // `secret` is not directly accessible from outside `foo`\nf() // The only way to retrieve `secret`, is to invoke `f`\n Run code snippetHide resultsExpand snippet\n\n\nIn other words: in JavaScript, functions carry a reference to a private \"box of state\", to which only they (and any other functions declared within the same lexical environment) have access. This box of the state is invisible to the caller of the function, delivering an excellent mechanism for data-hiding and encapsulation.\nAnd remember: functions in JavaScript can be passed around like variables (first-class functions), meaning these pairings of functionality and state can be passed around your program: similar to how you might pass an instance of a class around in C++.\nIf JavaScript did not have closures, then more states would have to be passed between functions explicitly, making parameter lists longer and code noisier.\nSo, if you want a function to always have access to a private piece of state, you can use a closure.\n...and frequently we do want to associate the state with a function. For example, in Java or C++, when you add a private instance variable and a method to a class, you are associating state with functionality.\nIn C and most other common languages, after a function returns, all the local variables are no longer accessible because the stack-frame is destroyed. In JavaScript, if you declare a function within another function, then the local variables of the outer function can remain accessible after returning from it. In this way, in the code above, secret remains available to the function object inner, after it has been returned from foo.\nUses of Closures\nClosures are useful whenever you need a private state associated with a function. This is a very common scenario - and remember: JavaScript did not have a class syntax until 2015, and it still does not have a private field syntax. Closures meet this need.\nPrivate Instance Variables\nIn the following code, the function toString closes over the details of the car.\n\n\nfunction Car(manufacturer, model, year, color) {\n  return {\n    toString() {\n      return `${manufacturer} ${model} (${year}, ${color})`\n    }\n  }\n}\nconst car = new Car('Aston Martin','V8 Vantage','2012','Quantum Silver')\nconsole.log(car.toString())\n Run code snippetHide resultsExpand snippet\n\n\nFunctional Programming\nIn the following code, the function inner closes over both fn and args.\n\n\nfunction curry(fn) {\n  const args = []\n  return function inner(arg) {\n    if(args.length === fn.length) return fn(...args)\n    args.push(arg)\n    return inner\n  }\n}\n\nfunction add(a, b) {\n  return a + b\n}\n\nconst curriedAdd = curry(add)\nconsole.log(curriedAdd(2)(3)()) // 5\n Run code snippetHide resultsExpand snippet\n\n\nEvent-Oriented Programming\nIn the following code, function onClick closes over variable BACKGROUND_COLOR.\n\n\nconst $ = document.querySelector.bind(document)\nconst BACKGROUND_COLOR = 'rgba(200,200,242,1)'\n\nfunction onClick() {\n  $('body').style.background = BACKGROUND_COLOR\n}\n\n$('button').addEventListener('click', onClick)\n<button>Set background color</button>\n Run code snippetHide resultsExpand snippet\n\n\nModularization\nIn the following example, all the implementation details are hidden inside an immediately executed function expression. The functions tick and toString close over the private state and functions they need to complete their work. Closures have enabled us to modularise and encapsulate our code.\n\n\nlet namespace = {};\n\n(function foo(n) {\n  let numbers = []\n  function format(n) {\n    return Math.trunc(n)\n  }\n  function tick() {\n    numbers.push(Math.random() * 100)\n  }\n  function toString() {\n    return numbers.map(format)\n  }\n  n.counter = {\n    tick,\n    toString\n  }\n}(namespace))\n\nconst counter = namespace.counter\ncounter.tick()\ncounter.tick()\nconsole.log(counter.toString())\n Run code snippetHide resultsExpand snippet\n\n\nExamples\nExample 1\nThis example shows that the local variables are not copied in the closure: the closure maintains a reference to the original variables themselves. It is as though the stack-frame stays alive in memory even after the outer function exits.\n\n\nfunction foo() {\n  let x = 42\n  let inner  = function() { console.log(x) }\n  x = x+1\n  return inner\n}\nvar f = foo()\nf() // logs 43\n Run code snippetHide resultsExpand snippet\n\n\nExample 2\nIn the following code, three methods log, increment, and update all close over the same lexical environment.\nAnd every time createObject is called, a new execution context (stack frame) is created and a completely new variable x, and a new set of functions (log etc.) are created, that close over this new variable.\n\n\nfunction createObject() {\n  let x = 42;\n  return {\n    log() { console.log(x) },\n    increment() { x++ },\n    update(value) { x = value }\n  }\n}\n\nconst o = createObject()\no.increment()\no.log() // 43\no.update(5)\no.log() // 5\nconst p = createObject()\np.log() // 42\n Run code snippetHide resultsExpand snippet\n\n\nExample 3\nIf you are using variables declared using var, be careful you understand which variable you are closing over. Variables declared using var are hoisted. This is much less of a problem in modern JavaScript due to the introduction of let and const.\nIn the following code, each time around the loop, a new function inner is created, which closes over i. But because var i is hoisted outside the loop, all of these inner functions close over the same variable, meaning that the final value of i (3) is printed, three times.\n\n\nfunction foo() {\n  var result = []\n  for (var i = 0; i < 3; i++) {\n    result.push(function inner() { console.log(i) } )\n  }\n  return result\n}\n\nconst result = foo()\n// The following will print `3`, three times...\nfor (var i = 0; i < 3; i++) {\n  result[i]() \n}\n Run code snippetHide resultsExpand snippet\n\n\nFinal points:\n\nWhenever a function is declared in JavaScript closure is created.\nReturning a function from inside another function is the classic example of closure, because the state inside the outer function is implicitly available to the returned inner function, even after the outer function has completed execution.\nWhenever you use eval() inside a function, a closure is used. The text you eval can reference local variables of the function, and in the non-strict mode, you can even create new local variables by using eval('var foo = \u2026').\nWhen you use new Function(\u2026) (the Function constructor) inside a function, it does not close over its lexical environment: it closes over the global context instead. The new function cannot reference the local variables of the outer function.\nA closure in JavaScript is like keeping a reference (NOT a copy) to the scope at the point of function declaration, which in turn keeps a reference to its outer scope, and so on, all the way to the global object at the top of the scope chain.\nA closure is created when a function is declared; this closure is used to configure the execution context when the function is invoked.\nA new set of local variables is created every time a function is called.\n\nLinks\n\nDouglas Crockford's simulated private attributes and private methods for an object, using closures.\nA great explanation of how closures can cause memory leaks in IE if you are not careful.\nMDN documentation on JavaScript Closures.\n\n    ",
        "votes": 7876,
        "comentarios": [
            {
                "decripcion": "JavaScript is actually pretty cool!",
                "fecha": { "$date" : "2021-09-04T22:58:42Z" },
                "usuario": "Nearoo",
                "usuario_id": 770
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 458,
        "fecha": { "$date" : "2020-03-28T05:44:05Z" },
        "decripcion": "\nEvery function in JavaScript maintains a link to its outer lexical environment. A lexical environment is a map of all the names (eg. variables, parameters) within a scope, with their values.\n\nSo, whenever you see the function keyword, code inside that function has access to variables declared outside the function.\n\n\n\nfunction foo(x) {\n  var tmp = 3;\n\n  function bar(y) {\n    console.log(x + y + (++tmp)); // will log 16\n  }\n\n  bar(10);\n}\n\nfoo(2);\n Run code snippetHide resultsExpand snippet\n\n\n\nThis will log 16 because function bar closes over the parameter x and the variable tmp, both of which exist in the lexical environment of outer function foo.\n\nFunction bar, together with its link with the lexical environment of function foo is a closure. \n\nA function doesn't have to return in order to create a closure. Simply by virtue of its declaration, every function closes over its enclosing lexical environment, forming a closure.\n\n\n\nfunction foo(x) {\n  var tmp = 3;\n\n  return function (y) {\n    console.log(x + y + (++tmp)); // will also log 16\n  }\n}\n\nvar bar = foo(2);\nbar(10); // 16\nbar(10); // 17\n Run code snippetHide resultsExpand snippet\n\n\n\nThe above function will also log 16, because the code inside bar can still refer to argument x and variable tmp, even though they are no longer directly in scope.\n\nHowever, since tmp is still hanging around inside bar's closure, it is available to be incremented. It will be incremented each time you call bar.\n\nThe simplest example of a closure is this:\n\n\n\nvar a = 10;\n\nfunction test() {\n  console.log(a); // will output 10\n  console.log(b); // will output 6\n}\nvar b = 6;\ntest();\n Run code snippetHide resultsExpand snippet\n\n\n\nWhen a JavaScript function is invoked, a new execution context ec is created. Together with the function arguments and the target object, this execution context also receives a link to the lexical environment of the calling execution context, meaning the variables declared in the outer lexical environment (in the above example, both a and b) are available from ec.\n\nEvery function creates a closure because every function has a link to its outer lexical environment. \n\nNote that variables themselves are visible from within a closure, not copies.\n    ",
        "votes": 4077,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 459,
        "fecha": { "$date" : "2017-11-01T11:40:09Z" },
        "decripcion": "\nFOREWORD: this answer was written when the question was:\n\n\n  Like the old Albert said : \"If you can't explain it to a six-year old, you really don't understand it yourself.\u201d. Well I tried to explain JS closures to a 27 years old friend and completely failed.\n  \n  Can anybody consider that I am 6 and strangely interested in that subject ?\n\n\nI'm pretty sure I was one of the only people that attempted to take the initial question literally. Since then, the question has mutated several times, so my answer may now seem incredibly silly & out of place. Hopefully the general idea of the story remains fun for some.\n\n\n\nI'm a big fan of analogy and metaphor when explaining difficult concepts, so let me try my hand with a story.\n\nOnce upon a time:\n\nThere was a princess...\n\nfunction princess() {\n\n\nShe lived in a wonderful world full of adventures. She met her Prince Charming, rode around her world on a unicorn, battled dragons, encountered talking animals, and many other fantastical things.\n\n    var adventures = [];\n\n    function princeCharming() { /* ... */ }\n\n    var unicorn = { /* ... */ },\n        dragons = [ /* ... */ ],\n        squirrel = \"Hello!\";\n\n    /* ... */\n\n\nBut she would always have to return back to her dull world of chores and grown-ups.\n\n    return {\n\n\nAnd she would often tell them of her latest amazing adventure as a princess.\n\n        story: function() {\n            return adventures[adventures.length - 1];\n        }\n    };\n}\n\n\nBut all they would see is a little girl...\n\nvar littleGirl = princess();\n\n\n...telling stories about magic and fantasy.\n\nlittleGirl.story();\n\n\nAnd even though the grown-ups knew of real princesses, they would never believe in the unicorns or dragons because they could never see them. The grown-ups said that they only existed inside the little girl's imagination.\n\nBut we know the real truth; that the little girl with the princess inside...\n\n...is really a princess with a little girl inside.\n    ",
        "votes": 2530,
        "comentarios": [
            {
                "decripcion": "I love this explanation, truly. For those who read it and don't follow, the analogy is this: the princess() function is a complex scope containing private data. Outside the function, the private data can't be seen or accessed. The princess keeps the unicorns, dragons, adventures etc. in her imagination (private data) and the grown-ups can't see them for themselves. BUT the princess's imagination is captured in the closure for the story() function, which is the only interface the littleGirl instance exposes into the world of magic.",
                "fecha": { "$date" : "2013-02-28T07:49:20Z" },
                "usuario": "Patrick M",
                "usuario_id": 771
            },
            {
                "decripcion": "Having undefined values makes it more difficult to understand. Here is the true story jsfiddle.net/rjdx34k0/3",
                "fecha": { "$date" : "2020-09-02T19:13:06Z" },
                "usuario": "Hugolpz",
                "usuario_id": 772
            },
            {
                "decripcion": "Oh nice, I was that close to make an edit to remove the what I thought to be the extra space in the beginning. Nice job, +1",
                "fecha": { "$date" : "2020-10-23T07:34:08Z" },
                "usuario": "Tiago Martins Peres \u674e\u5927\u4ec1",
                "usuario_id": 773
            },
            {
                "decripcion": "And Prince Charming can add to her adventures, can kill all the dragons to save her from dangers like below:  function princeCharming {    adventures.push('Honeymoon Trip', 'Skydiving', 'Visiting Somalia');    const pickADragonToKill = dragons.pop(); }",
                "fecha": { "$date" : "2021-01-13T05:15:45Z" },
                "usuario": "Shivam",
                "usuario_id": 774
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 460,
        "fecha": { "$date" : "2018-10-10T17:50:14Z" },
        "decripcion": "\nTaking the question seriously, we should find out what a typical 6-year-old is capable of cognitively, though admittedly, one who is interested in JavaScript is not so typical.  \n\nOn  Childhood Development: 5 to 7 Years  it says:\n\n\n  Your child will be able to follow two-step directions. For example, if you say to your child, \"Go to the kitchen and get me a trash bag\" they will be able to remember that direction.\n\n\nWe can use this example to explain closures, as follows:\n\n\n  The kitchen is a closure that has a local variable, called trashBags.  There is a function inside the kitchen called getTrashBag that gets one trash bag and returns it.\n\n\nWe can code this in JavaScript like this:\n\n\n\nfunction makeKitchen() {\n  var trashBags = ['A', 'B', 'C']; // only 3 at first\n\n  return {\n    getTrashBag: function() {\n      return trashBags.pop();\n    }\n  };\n}\n\nvar kitchen = makeKitchen();\n\nconsole.log(kitchen.getTrashBag()); // returns trash bag C\nconsole.log(kitchen.getTrashBag()); // returns trash bag B\nconsole.log(kitchen.getTrashBag()); // returns trash bag A\n Run code snippetHide resultsExpand snippet\n\n\n\nFurther points that explain why closures are interesting:\n\n\nEach time makeKitchen() is called, a new closure is created with its own separate trashBags.\nThe trashBags variable is local to the inside of each kitchen and is not accessible outside, but the inner function on the getTrashBag property does have access to it.  \nEvery function call creates a closure, but there would be no need to keep the closure around unless an inner function, which has access to the inside of the closure, can be called from outside the closure.  Returning the object with the getTrashBag function does that here.\n\n    ",
        "votes": 785,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 461,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nThe Straw Man\nI need to know how many times a button has been clicked and do something on every third click...\nFairly Obvious Solution\n\n\n// Declare counter outside event handler's scope\nvar counter = 0;\nvar element = document.getElementById('button');\n\nelement.addEventListener(\"click\", function() {\n  // Increment outside counter\n  counter++;\n\n  if (counter === 3) {\n    // Do something every third time\n    console.log(\"Third time's the charm!\");\n\n    // Reset counter\n    counter = 0;\n  }\n});\n<button id=\"button\">Click Me!</button>\n Run code snippetHide resultsExpand snippet\n\n\nNow this will work, but it does encroach into the outer scope by adding a variable, whose sole purpose is to keep track of the count. In some situations, this would be preferable as your outer application might need access to this information. But in this case, we are only changing every third click's behavior, so it is preferable to enclose this functionality inside the event handler.\nConsider this option\n\n\nvar element = document.getElementById('button');\n\nelement.addEventListener(\"click\", (function() {\n  // init the count to 0\n  var count = 0;\n\n  return function(e) { // <- This function becomes the click handler\n    count++; //    and will retain access to the above `count`\n\n    if (count === 3) {\n      // Do something every third time\n      console.log(\"Third time's the charm!\");\n\n      //Reset counter\n      count = 0;\n    }\n  };\n})());\n<button id=\"button\">Click Me!</button>\n Run code snippetHide resultsExpand snippet\n\n\nNotice a few things here.\nIn the above example, I am using the closure behavior of JavaScript. This behavior allows any function to have access to the scope in which it was created, indefinitely. To practically apply this, I immediately invoke a function that returns another function, and because the function I'm returning has access to the internal count variable (because of the closure behavior explained above) this results in a private scope for usage by the resulting function... Not so simple? Let's dilute it down...\nA simple one-line closure\n//          _______________________Immediately invoked______________________\n//         |                                                                |\n//         |        Scope retained for use      ___Returned as the____      |\n//         |       only by returned function   |    value of func     |     |\n//         |             |            |        |                      |     |\n//         v             v            v        v                      v     v\nvar func = (function() { var a = 'val'; return function() { alert(a); }; })();\n\nAll variables outside the returned function are available to the returned function, but they are not directly available to the returned function object...\nfunc();  // Alerts \"val\"\nfunc.a;  // Undefined\n\nGet it? So in our primary example, the count variable is contained within the closure and always available to the event handler, so it retains its state from click to click.\nAlso, this private variable state is fully accessible, for both readings and assigning to its private scoped variables.\nThere you go; you're now fully encapsulating this behavior.\nFull Blog Post (including jQuery considerations)\n    ",
        "votes": 607,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 462,
        "fecha": { "$date" : "2020-06-30T08:16:34Z" },
        "decripcion": "\nClosures are hard to explain because they are used to make some behaviour work that everybody intuitively expects to work anyway. I find the best way to explain them (and the way that I learned what they do) is to imagine the situation without them:\n\n\nconst makePlus = function(x) {\n    return function(y) { return x + y; };\n}\n\nconst plus5 = makePlus(5);\nconsole.log(plus5(3));\n Run code snippetHide resultsExpand snippet\n\n\nWhat would happen here if JavaScript didn't know closures? Just replace the call in the last line by its method body (which is basically what function calls do) and you get:\nconsole.log(x + 3);\n\nNow, where's the definition of x? We didn't define it in the current scope. The only solution is to let plus5 carry its scope (or rather, its parent's scope) around. This way, x is well-defined and it is bound to the value 5.\n    ",
        "votes": 523,
        "comentarios": [
            {
                "decripcion": "\"they are used to make some behaviour work that everybody intuitively expects to work anyway\"  Appreciate this comment, as that was partly what I was struggling with. I felt like I was missing something, but it turns out I wasn't!",
                "fecha": { "$date" : "2020-07-10T18:45:54Z" },
                "usuario": "Shane",
                "usuario_id": 775
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 463,
        "fecha": { "$date" : "2020-02-17T19:56:12Z" },
        "decripcion": "\nTLDR\n\nA closure is a link between a function and its outer lexical (ie. as-written) environment, such that the identifiers (variables, parameters, function declarations etc) defined within that environment are visible from within the function, regardless of when or from where the function is invoked.\n\nDetails\n\nIn the terminology of the ECMAScript specification, a closure can be said to be implemented by the [[Environment]] reference of every function-object, which points to the lexical environment within which the function is defined.\n\nWhen a function is invoked via the internal [[Call]] method, the [[Environment]] reference on the function-object is copied into the outer environment reference of the environment record of the newly-created execution context (stack frame).\n\nIn the following example, function f closes over the lexical environment of the global execution context:\n\nfunction f() {}\n\n\nIn the following example, function h closes over the lexical environment of function g, which, in turn, closes over the lexical environment of the global execution context.\n\nfunction g() {\n    function h() {}\n}\n\n\nIf an inner function is returned by an outer, then the outer lexical environment will persist after the outer function has returned. This is because the outer lexical environment needs to be available if the inner function is eventually invoked.\n\nIn the following example, function j closes over the lexical environment of function i, meaning that variable x is visible from inside function j, long after function i has completed execution:\n\n\n\nfunction i() {\n    var x = 'mochacchino'\n    return function j() {\n        console.log('Printing the value of x, from within function j: ', x)\n    }\n} \n\nconst k = i()\nsetTimeout(k, 500) // invoke k (which is j) after 500ms\n Run code snippetHide resultsExpand snippet\n\n\n\nIn a closure, the variables in the outer lexical environment themselves are available, not copies.\n\n\n\nfunction l() {\n  var y = 'vanilla';\n\n  return {\n    setY: function(value) {\n      y = value;\n    },\n    logY: function(value) {\n      console.log('The value of y is: ', y);\n    }\n  }\n}\n\nconst o = l()\no.logY() // The value of y is: vanilla\no.setY('chocolate')\no.logY() // The value of y is: chocolate\n Run code snippetHide resultsExpand snippet\n\n\n\nThe chain of lexical environments, linked between execution contexts via outer environment references, forms a scope chain and defines the identifiers visible from any given function.\n\nPlease note that in an attempt to improve clarity and accuracy, this answer has been substantially changed from the original.\n    ",
        "votes": 403,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 464,
        "fecha": { "$date" : "2018-10-10T18:38:01Z" },
        "decripcion": "\nOK, 6-year-old closures fan. Do you want to hear the simplest example of closure?\n\nLet's imagine the next situation: a driver is sitting in a car. That car is inside a plane. Plane is in the airport. The ability of driver to access things outside his car, but inside the plane, even if that plane leaves an airport, is a closure. That's it. When you turn 27, look at the more detailed explanation or at the example below.\n\nHere is how I can convert my plane story into the code.\n\n\n\nvar plane = function(defaultAirport) {\n\n  var lastAirportLeft = defaultAirport;\n\n  var car = {\n    driver: {\n      startAccessPlaneInfo: function() {\n        setInterval(function() {\n          console.log(\"Last airport was \" + lastAirportLeft);\n        }, 2000);\n      }\n    }\n  };\n  car.driver.startAccessPlaneInfo();\n\n  return {\n    leaveTheAirport: function(airPortName) {\n      lastAirportLeft = airPortName;\n    }\n  }\n}(\"Boryspil International Airport\");\n\nplane.leaveTheAirport(\"John F. Kennedy\");\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 392,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 465,
        "fecha": { "$date" : "2016-05-05T15:00:49Z" },
        "decripcion": "\nThis is an attempt to clear up several (possible) misunderstandings about closures that appear in some of the other answers.\n\n\nA closure is not only created when you return an inner function. In fact, the enclosing function does not need to return at all in order for its closure to be created. You might instead assign your inner function to a variable in an outer scope, or pass it as an argument to another function where it could be called immediately or any time later. Therefore, the closure of the enclosing function is probably created as soon as the enclosing function is called since any inner function has access to that closure whenever the inner function is called, before or after the enclosing function returns. \nA closure does not reference a copy of the old values of variables in its scope. The variables themselves are part of the closure, and so the value seen when accessing one of those variables is the latest value at the time it is accessed. This is why inner functions created inside of loops can be tricky, since each one has access to the same outer variables rather than grabbing a copy of the variables at the time the function is created or called.\nThe \"variables\" in a closure include any named functions declared within the function. They also include arguments of the function. A closure also has access to its containing closure's variables, all the way up to the global scope.\nClosures use memory, but they don't cause memory leaks since JavaScript by itself cleans up its own circular structures that are not referenced. Internet\u00a0Explorer memory leaks involving closures are created when it fails to disconnect DOM attribute values that reference closures, thus maintaining references to possibly circular structures.\n\n    ",
        "votes": 374,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 466,
        "fecha": { "$date" : "2013-01-28T02:23:21Z" },
        "decripcion": "\nI wrote a blog post a while back explaining closures. Here's what I said about closures in terms of why you'd want one.\n\n\n  Closures are a way to let a function\n  have persistent, private variables -\n  that is, variables that only one\n  function knows about, where it can\n  keep track of info from previous times\n  that it was run.\n\n\nIn that sense, they let a function act a bit like an object with private attributes.\n\nFull post:\n\nSo what are these closure thingys?\n    ",
        "votes": 243,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 467,
        "fecha": { "$date" : "2017-05-23T12:10:46Z" },
        "decripcion": "\nClosures are simple:\n\nThe following simple example covers all the main points of JavaScript closures.*\n\u00a0\n\nHere is a factory that produces calculators that can add and multiply:\n\nfunction make_calculator() {\n  var n = 0; // this calculator stores a single number n\n  return {\n    add: function(a) {\n      n += a;\n      return n;\n    },\n    multiply: function(a) {\n      n *= a;\n      return n;\n    }\n  };\n}\n\nfirst_calculator = make_calculator();\nsecond_calculator = make_calculator();\n\nfirst_calculator.add(3); // returns 3\nsecond_calculator.add(400); // returns 400\n\nfirst_calculator.multiply(11); // returns 33\nsecond_calculator.multiply(10); // returns 4000\n\n\nThe key point: Each call to make_calculator creates a new local variable n, which continues to be usable by that calculator's add and multiply functions long after make_calculator returns.\n\nIf you are familiar with stack frames, these calculators seem strange: How can they keep accessing n after make_calculator returns?  The answer is to imagine that JavaScript doesn't use \"stack frames\", but instead uses \"heap frames\", which can persist after the function call that made them returns.\n\nInner functions like add and multiply, which access variables declared in an outer function**, are called closures.\n\nThat is pretty much all there is to closures.\n\n\n\n\n\n* For example, it covers all the points in the \"Closures for Dummies\" article given in another answer, except example 6, which simply shows that variables can be used before they are declared, a nice fact to know but completely unrelated to closures. It also covers all the points in the accepted answer, except for the points (1) that functions copy their arguments into local variables (the named function arguments), and (2) that copying numbers creates a new number, but copying an object reference gives you another reference to the same object. These are also good to know but again completely unrelated to closures. It is also very similar to the example in this answer but a bit shorter and less abstract. It does not cover the point of this answer or this comment, which is that JavaScript makes it difficult to plug the current value of a loop variable into your inner function: The \"plugging in\" step can only be done with a helper function that encloses your inner function and is invoked on each loop iteration. (Strictly speaking, the inner function accesses the helper function's copy of the variable, rather than having anything plugged in.) Again, very useful when creating closures, but not part of what a closure is or how it works. There is additional confusion due to closures working differently in functional languages like ML, where variables are bound to values rather than to storage space, providing a constant stream of people who understand closures in a way (namely the \"plugging in\" way) that is simply incorrect for JavaScript, where variables are always bound to storage space, and never to values. \n\n** Any outer function, if several are nested, or even in the global context, as this answer points out clearly.\n    ",
        "votes": 219,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 468,
        "fecha": { "$date" : "2016-01-16T02:30:44Z" },
        "decripcion": "\nHow I'd explain it to a six-year-old:\n\nYou know how grown-ups can own a house, and they call it home? When a mom has a child, the child doesn't really own anything, right? But its parents own a house, so whenever someone asks the child \"Where's your home?\", he/she can answer \"that house!\", and point to the house of its parents. A \"Closure\" is the ability of the child to always (even if abroad) be able to say it has a home, even though it's really the parent's who own the house.\n    ",
        "votes": 210,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 469,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nCan you explain closures to a 5-year-old?*\nI still think Google's explanation works very well and is concise:\n/*\n*    When a function is defined in another function and it\n*    has access to the outer function's context even after\n*    the outer function returns.\n*\n* An important concept to learn in JavaScript.\n*/\n\nfunction outerFunction(someNum) {\n    var someString = 'Hey!';\n    var content = document.getElementById('content');\n    function innerFunction() {\n        content.innerHTML = someNum + ': ' + someString;\n        content = null; // Internet Explorer memory leak for DOM reference\n    }\n    innerFunction();\n}\n\nouterFunction(1);\u200b\n\n\n*A C# question\n    ",
        "votes": 207,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 470,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nI tend to learn better by GOOD/BAD comparisons. I like to see working code followed by non-working code that someone is likely to encounter. I put together a jsFiddle that does a comparison and tries to boil down the differences to the simplest explanations I could come up with.\nClosures done right:\nconsole.log('CLOSURES DONE RIGHT');\n\nvar arr = [];\n\nfunction createClosure(n) {\n    return function () {\n        return 'n = ' + n;\n    }\n}\n\nfor (var index = 0; index < 10; index++) {\n    arr[index] = createClosure(index);\n}\n\nfor (var index in arr) {\n    console.log(arr[index]());\n}\n\n\nIn the above code createClosure(n) is invoked in every iteration of the loop. Note that I named the variable n to highlight that it is a new variable created in a new function scope and is not the same variable as index which is bound to the outer scope.\n\nThis creates a new scope and n is bound to that scope; this means we have 10 separate scopes, one for each iteration.\n\ncreateClosure(n) returns a function that returns the n within that scope.\n\nWithin each scope n is bound to whatever value it had when createClosure(n) was invoked so the nested function that gets returned will always return the value of n that it had when createClosure(n) was invoked.\n\n\nClosures done wrong:\nconsole.log('CLOSURES DONE WRONG');\n\nfunction createClosureArray() {\n    var badArr = [];\n\n    for (var index = 0; index < 10; index++) {\n        badArr[index] = function () {\n            return 'n = ' + index;\n        };\n    }\n    return badArr;\n}\n\nvar badArr = createClosureArray();\n\nfor (var index in badArr) {\n    console.log(badArr[index]());\n}\n\n\nIn the above code the loop was moved within the createClosureArray() function and the function now just returns the completed array, which at first glance seems more intuitive.\n\nWhat might not be obvious is that since createClosureArray() is only invoked once only one scope is created for this function instead of one for every iteration of the loop.\n\nWithin this function a variable named index is defined. The loop runs and adds functions to the array that return index. Note that index is defined within the createClosureArray function which only ever gets invoked one time.\n\nBecause there was only one scope within the createClosureArray() function, index is only bound to a value within that scope. In other words, each time the loop changes the value of index, it changes it for everything that references it within that scope.\n\nAll of the functions added to the array return the SAME index variable from the parent scope where it was defined instead of 10 different ones from 10 different scopes like the first example. The end result is that all 10 functions return the same variable from the same scope.\n\nAfter the loop finished and index was done being modified the end value was 10, therefore every function added to the array returns the value of the single index variable which is now set to 10.\n\n\nResult\n\nCLOSURES DONE RIGHT\nn = 0\nn = 1\nn = 2\nn = 3\nn = 4\nn = 5\nn = 6\nn = 7\nn = 8\nn = 9\nCLOSURES DONE WRONG\nn = 10\nn = 10\nn = 10\nn = 10\nn = 10\nn = 10\nn = 10\nn = 10\nn = 10\nn = 10\n\n    ",
        "votes": 182,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 471,
        "fecha": { "$date" : "2013-12-18T16:48:34Z" },
        "decripcion": "\nWikipedia on closures:\n\n\n  In computer science, a closure is a function together with a referencing environment for the nonlocal names (free variables) of that function.\n\n\nTechnically, in JavaScript, every function is a closure. It always has an access to variables defined in the surrounding scope.\n\nSince scope-defining construction in JavaScript is a function, not a code block like in many other languages, what we usually mean by closure in JavaScript is a function working with nonlocal variables defined in already executed surrounding function.\n\nClosures are often used for creating functions with some hidden private data (but it's not always the case).\n\nvar db = (function() {\n    // Create a hidden object, which will hold the data\n    // it's inaccessible from the outside.\n    var data = {};\n\n    // Make a function, which will provide some access to the data.\n    return function(key, val) {\n        if (val === undefined) { return data[key] } // Get\n        else { return data[key] = val } // Set\n    }\n    // We are calling the anonymous surrounding function,\n    // returning the above inner function, which is a closure.\n})();\n\ndb('x')    // -> undefined\ndb('x', 1) // Set x to 1\ndb('x')    // -> 1\n// It's impossible to access the data object itself.\n// We are able to get or set individual it.\n\n\nems\n\nThe example above is using an anonymous function, which was executed once. But it does not have to be. It can be named (e.g. mkdb) and executed later, generating a database function each time it is invoked. Every generated function will have its own hidden database object. Another usage example of closures is when we don't return a function, but an object containing multiple functions for different purposes, each of those function having access to the same data.\n    ",
        "votes": 168,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 472,
        "fecha": { "$date" : "2014-10-25T22:38:03Z" },
        "decripcion": "\nI put together an interactive JavaScript tutorial to explain how closures work.\nWhat's a Closure?\n\nHere's one of the examples:\n\nvar create = function (x) {\n    var f = function () {\n        return x; // We can refer to x here!\n    };\n    return f;\n};\n// 'create' takes one argument, creates a function\n\nvar g = create(42);\n// g is a function that takes no arguments now\n\nvar y = g();\n// y is 42 here\n\n    ",
        "votes": 138,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 473,
        "fecha": { "$date" : "2017-07-13T11:27:32Z" },
        "decripcion": "\n\n  The children will always remember the secrets they have shared with their parents, even after their parents are\n  gone. This is what closures are for functions.\n\n\nThe secrets for JavaScript functions are the private variables\n\nvar parent = function() {\n var name = \"Mary\"; // secret\n}\n\n\nEvery time you call it, local variable \"name\" is created and given name \"Mary\". And every time the function exits the variable is lost and the name is forgotten.\n\nAs you may guess, because the variables are re-created every time the function is called, and nobody else will know them, there must be a secret place where they are stored. It could be called Chamber of Secrets or stack or local scope but it doesn't really matter. We know they are there, somewhere, hidden in the memory.\n\nBut, in JavaScript there is this very special thing that functions which are created inside other functions, can also know the local variables of their parents and keep them as long as they live.\n\nvar parent = function() {\n  var name = \"Mary\";\n  var child = function(childName) {\n    // I can also see that \"name\" is \"Mary\"\n  }\n}\n\n\nSo, as long as we are in the parent -function, it can create one or more child functions which do share the secret variables from the secret place.\n\nBut the sad thing is, if the child is also a private variable of its parent function, it would also die when the parent ends, and the secrets would die with them.\n\nSo to live, the child has to leave before it's too late\n\nvar parent = function() {\n  var name = \"Mary\";\n  var child = function(childName) {\n    return \"My name is \" + childName  +\", child of \" + name; \n  }\n  return child; // child leaves the parent ->\n}\nvar child = parent(); // < - and here it is outside \n\n\nAnd now, even though Mary is \"no longer running\", the memory of her is not lost and her child will always remember her name and other secrets they shared during their time together.\n\nSo, if you call the child \"Alice\", she will respond\n\nchild(\"Alice\") => \"My name is Alice, child of Mary\"\n\n\nThat's all there is to tell.\n    ",
        "votes": 133,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 474,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nI do not understand why the answers are so complex here.\nHere is a closure:\nvar a = 42;\n\nfunction b() { return a; }\n\nYes. You probably use that many times a day.\n\n\nThere is no reason to believe closures are a complex design hack to address specific problems. No, closures are just about using a variable that comes from a higher scope from the perspective of where the function was declared (not run).\nNow what it allows you to do can be more spectacular, see other answers.\n\n    ",
        "votes": 107,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 475,
        "fecha": { "$date" : "2016-01-16T02:39:35Z" },
        "decripcion": "\nExample for the first point by dlaliberte:\n\n\n  A closure is not only created when you return an inner function. In fact, the enclosing function does not need to return at all. You might instead assign your inner function to a variable in an outer scope, or pass it as an argument to another function where it could be used immediately. Therefore, the closure of the enclosing function probably already exists at the time that enclosing function was called since any inner function has access to it as soon as it is called.\n\n\nvar i;\nfunction foo(x) {\n    var tmp = 3;\n    i = function (y) {\n        console.log(x + y + (++tmp));\n    }\n}\nfoo(2);\ni(3);\n\n    ",
        "votes": 95,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 476,
        "fecha": { "$date" : "2012-12-24T11:10:56Z" },
        "decripcion": "\nA closure is where an inner function has access to variables in its outer function. That's probably the simplest one-line explanation you can get for closures.\n    ",
        "votes": 93,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 477,
        "fecha": { "$date" : "2016-05-09T11:32:47Z" },
        "decripcion": "\nI know there are plenty of solutions already, but I guess that this small and simple script can be useful to demonstrate the concept:\n\n// makeSequencer will return a \"sequencer\" function\nvar makeSequencer = function() {\n    var _count = 0; // not accessible outside this function\n    var sequencer = function () {\n        return _count++;\n    }\n    return sequencer;\n}\n\nvar fnext = makeSequencer();\nvar v0 = fnext();     // v0 = 0;\nvar v1 = fnext();     // v1 = 1;\nvar vz = fnext._count // vz = undefined\n\n    ",
        "votes": 87,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 478,
        "fecha": { "$date" : "2011-07-20T15:16:26Z" },
        "decripcion": "\nYou're having a sleep over and you invite Dan.\nYou tell Dan to bring one XBox controller.\n\nDan invites Paul.\nDan asks Paul to bring one controller. How many controllers were brought to the party?\n\nfunction sleepOver(howManyControllersToBring) {\n\n    var numberOfDansControllers = howManyControllersToBring;\n\n    return function danInvitedPaul(numberOfPaulsControllers) {\n        var totalControllers = numberOfDansControllers + numberOfPaulsControllers;\n        return totalControllers;\n    }\n}\n\nvar howManyControllersToBring = 1;\n\nvar inviteDan = sleepOver(howManyControllersToBring);\n\n// The only reason Paul was invited is because Dan was invited. \n// So we set Paul's invitation = Dan's invitation.\n\nvar danInvitedPaul = inviteDan(howManyControllersToBring);\n\nalert(\"There were \" + danInvitedPaul + \" controllers brought to the party.\");\n\n    ",
        "votes": 84,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 479,
        "fecha": { "$date" : "2018-05-14T20:51:20Z" },
        "decripcion": "\nThe author of Closures has explained closures pretty well, explaining the reason why we need them and also explaining LexicalEnvironment which is necessary to understanding closures. \nHere is the summary:\n\nWhat if a variable is accessed, but it isn\u2019t local? Like here:\n\n\n\nIn this case, the interpreter finds the variable in the\nouter LexicalEnvironment object.\n\nThe process consists of two steps:\n\n\nFirst, when a function f is created, it is not created in an empty\nspace. There is a current LexicalEnvironment object. In the case\nabove, it\u2019s window (a is undefined at the time of function\ncreation).\n\n\n\n\nWhen a function is created, it gets a hidden property, named [[Scope]], which references the current LexicalEnvironment.\n\n\n\nIf a variable is read, but can not be found anywhere, an error is generated.\n\nNested functions\n\nFunctions can be nested one inside another, forming a chain of LexicalEnvironments which can also be called a scope chain.\n\n\n\nSo, function g has access to g, a and f.\n\nClosures\n\nA nested function may continue to live after the outer function has finished:\n\n\n\nMarking up LexicalEnvironments:\n\n\n\nAs we see, this.say is a property in the user object, so it continues to live after User completed.\n\nAnd if you remember, when this.say is created, it (as every function) gets an internal reference this.say.[[Scope]] to the current LexicalEnvironment. So, the LexicalEnvironment of the current User execution stays in memory. All variables of User also are its properties, so they are also carefully kept, not junked as usually.\n\nThe whole point is to ensure that if the inner function wants to access an outer variable in the future, it is able to do so.\n\nTo summarize:\n\n\nThe inner function keeps a reference to the outer\nLexicalEnvironment.\nThe inner function may access variables from it\nany time even if the outer function is finished.\nThe browser keeps the LexicalEnvironment and all its properties (variables) in memory until there is an inner function which references it.\n\n\nThis is called a closure.\n    ",
        "votes": 83,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 480,
        "fecha": { "$date" : "2016-06-08T22:16:22Z" },
        "decripcion": "\nJavaScript functions can access their:\n\n\nArguments\nLocals (that is, their local variables and local functions)\nEnvironment, which includes:\n\n\nglobals, including the DOM\nanything in outer functions\n\n\n\nIf a function accesses its environment, then the function is a closure.\n\nNote that outer functions are not required, though they do offer benefits I don't discuss here. By accessing data in its environment, a closure keeps that data alive. In the subcase of outer/inner functions, an outer function can create local data and eventually exit, and yet, if any inner function(s) survive after the outer function exits, then the inner function(s) keep the outer function's local data alive.\n\nExample of a closure that uses the global environment:\n\nImagine that the Stack Overflow Vote-Up and Vote-Down button events are implemented as closures, voteUp_click and voteDown_click, that have access to external variables isVotedUp and isVotedDown, which are defined globally. (For simplicity's sake, I am referring to StackOverflow's Question Vote buttons, not the array of Answer Vote buttons.)\n\nWhen the user clicks the VoteUp button, the voteUp_click function checks whether isVotedDown == true to determine whether to vote up or merely cancel a down vote. Function voteUp_click is a closure because it is accessing its environment.\n\nvar isVotedUp = false;\nvar isVotedDown = false;\n\nfunction voteUp_click() {\n  if (isVotedUp)\n    return;\n  else if (isVotedDown)\n    SetDownVote(false);\n  else\n    SetUpVote(true);\n}\n\nfunction voteDown_click() {\n  if (isVotedDown)\n    return;\n  else if (isVotedUp)\n    SetUpVote(false);\n  else\n    SetDownVote(true);\n}\n\nfunction SetUpVote(status) {\n  isVotedUp = status;\n  // Do some CSS stuff to Vote-Up button\n}\n\nfunction SetDownVote(status) {\n  isVotedDown = status;\n  // Do some CSS stuff to Vote-Down button\n}\n\n\nAll four of these functions are closures as they all access their environment.\n    ",
        "votes": 77,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 481,
        "fecha": { "$date" : "2016-06-08T22:11:57Z" },
        "decripcion": "\nAs a father of a 6-year-old, currently teaching young children (and a relative novice to coding with no formal education so corrections will be required), I think the lesson would stick best through hands-on play. If the 6-year-old is ready to understand what a closure is, then they are old enough to have a go themselves. I'd suggest pasting the code into jsfiddle.net, explaining a bit, and leaving them alone to concoct a unique song. The explanatory text below is probably more appropriate for a 10 year old.\n\nfunction sing(person) {\n\n    var firstPart = \"There was \" + person + \" who swallowed \";\n\n    var fly = function() {\n        var creature = \"a fly\";\n        var result = \"Perhaps she'll die\";\n        alert(firstPart + creature + \"\\n\" + result);\n    };\n\n    var spider = function() {\n        var creature = \"a spider\";\n        var result = \"that wiggled and jiggled and tickled inside her\";\n        alert(firstPart + creature + \"\\n\" + result);\n    };\n\n    var bird = function() {\n        var creature = \"a bird\";\n        var result = \"How absurd!\";\n        alert(firstPart + creature + \"\\n\" + result);\n    };\n\n    var cat = function() {\n        var creature = \"a cat\";\n        var result = \"Imagine That!\";\n        alert(firstPart + creature + \"\\n\" + result);\n    };\n\n    fly();\n    spider();\n    bird();\n    cat();\n}\n\nvar person=\"an old lady\";\n\nsing(person);\n\n\nINSTRUCTIONS\n\nDATA: Data is a collection of facts. It can be numbers, words, measurements, observations or even just descriptions of things. You can't touch it, smell it or taste it. You can write it down, speak it and hear it. You could use it to create touch smell and taste using a computer. It can be made useful by a computer using code.\n\nCODE: All the writing above is called code. It is written in JavaScript.\n\nJAVASCRIPT: JavaScript is a language. Like English or French or Chinese are languages. There are lots of languages that are understood by computers and other electronic processors. For JavaScript to be understood by a computer it needs an interpreter. Imagine if a teacher who only speaks Russian comes to teach your class at school. When the teacher says \"\u0432\u0441\u0435 \u0441\u0430\u0434\u044f\u0442\u0441\u044f\", the class would not understand. But luckily you have a Russian pupil in your class who tells everyone this means \"everybody sit down\" - so you all do. The class is like a computer and the Russian pupil is the interpreter. For JavaScript the most common interpreter is called a browser.\n\nBROWSER: When you connect to the Internet on a computer, tablet or phone to visit a website, you use a browser. Examples you may know are Internet Explorer, Chrome, Firefox and Safari. The browser can understand JavaScript and tell the computer what it needs to do. The JavaScript instructions are called functions.\n\nFUNCTION: A function in JavaScript is like a factory. It might be a little factory with only one machine inside. Or it might contain many other little factories, each with many machines doing different jobs. In a real life clothes factory you might have reams of cloth and bobbins of thread going in and T-shirts and jeans coming out. Our JavaScript factory only processes data, it can't sew, drill a hole or melt metal. In our JavaScript factory data goes in and data comes out.\n\nAll this data stuff sounds a bit boring, but it is really very cool; we might have a function that tells a robot what to make for dinner. Let's say I invite you and your friend to my house. You like chicken legs best, I like sausages, your friend always wants what you want and my friend does not eat meat.\n\nI haven't got time to go shopping, so the function needs to know what we have in the fridge to make decisions. Each ingredient has a different cooking time and we want everything to be served hot by the robot at the same time. We need to provide the function with the data about what we like, the function could 'talk' to the fridge, and the function could control the robot.\n\nA function normally has a name, parentheses and braces. Like this:\n\nfunction cookMeal() {  /*  STUFF INSIDE THE FUNCTION  */  }\n\n\nNote that /*...*/ and // stop code being read by the browser.\n\nNAME: You can call a function just about whatever word you want. The example \"cookMeal\" is typical in joining two words together and giving the second one a capital letter at the beginning - but this is not necessary. It can't have a space in it, and it can't be a number on its own.\n\nPARENTHESES: \"Parentheses\" or () are the letter box on the JavaScript function factory's door or a post box in the street for sending packets of information to the factory. Sometimes the postbox might be marked for example cookMeal(you, me, yourFriend, myFriend, fridge, dinnerTime), in which case you know what data you have to give it.\n\nBRACES: \"Braces\" which look like this {} are the tinted windows of our factory. From inside the factory you can see out, but from the outside you can't see in.\n\nTHE LONG CODE EXAMPLE ABOVE\n\nOur code begins with the word function, so we know that it is one! Then the name of the function sing - that's my own description of what the function is about. Then parentheses (). The parentheses are always there for a function. Sometimes they are empty, and sometimes they have something in. This one has a word in: (person). After this there is a brace like this { . This marks the start of the function sing(). It has a partner which marks the end of sing() like this }\n\nfunction sing(person) {  /* STUFF INSIDE THE FUNCTION */  }\n\n\nSo this function might have something to do with singing, and might need some data about a person. It has instructions inside to do something with that data.\n\nNow, after the function sing(), near the end of the code is the line\n\nvar person=\"an old lady\";\n\n\nVARIABLE: The letters var stand for \"variable\". A variable is like an envelope. On the outside this envelope is marked \"person\". On the inside it contains a slip of paper with the information our function needs, some letters and spaces joined together like a piece of string (it's called a string) that make a phrase reading \"an old lady\". Our envelope could contain other kinds of things like numbers (called integers), instructions (called functions), lists (called arrays). Because this variable is written outside of all the braces {}, and because you can see out through the tinted windows when you are inside the braces, this variable can be seen from anywhere in the code. We call this a 'global variable'.\n\nGLOBAL VARIABLE: person is a global variable, meaning that if you change its value from \"an old lady\" to \"a young man\", the person will keep being a young man until you decide to change it again and that any other function in the code can see that it's a young man. Press the F12 button or look at the Options settings to open the developer console of a browser and type \"person\" to see what this value is. Type person=\"a young man\" to change it and then type \"person\" again to see that it has changed.\n\nAfter this we have the line\n\nsing(person);\n\n\nThis line is calling the function, as if it were calling a dog\n\n\n  \"Come on sing, Come and get person!\"\n\n\nWhen the browser has loaded the JavaScript code an reached this line, it will start the function. I put the line at the end to make sure that the browser has all the information it needs to run it.\n\nFunctions define actions  - the main function is about singing. It contains a variable called firstPart which applies to the singing about the person that applies to each of the verses of the song: \"There was \" + person + \" who swallowed\". If you type firstPart into the console, you won't get an answer because the variable is locked up in a function - the browser can't see inside the tinted windows of the braces.\n\nCLOSURES: The closures are the smaller functions that are inside the big sing() function. The little factories inside the big factory. They each have their own braces which mean that the variables inside them can't be seen from the outside. That's why the names of the variables (creature and result) can be repeated in the closures but with different values. If you type these variable names in the console window, you won't get its value because it's hidden by two layers of tinted windows.\n\nThe closures all know what the sing() function's variable called firstPart is, because they can see out from their tinted windows.\n\nAfter the closures come the lines\n\nfly();\nspider();\nbird();\ncat();\n\n\nThe sing() function will call each of these functions in the order they are given. Then the sing() function's work will be done.\n    ",
        "votes": 59,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 482,
        "fecha": { "$date" : "2014-10-25T22:52:13Z" },
        "decripcion": "\nOkay, talking with a 6-year old child, I would possibly use following associations.\n\n\n  Imagine - you are playing with your little brothers and sisters in the entire house, and you are moving around with your toys and brought some of them into your older brother's room. After a while your brother returned from the school and went to his room, and he locked inside it, so now you could not access toys left there anymore in a direct way. But you could knock the door and ask your brother for that toys. This is called toy's closure; your brother made it up for you, and he is now into outer scope.\n\n\nCompare with a situation when a door was locked by draft and nobody inside (general function execution), and then some local fire occur and burn down the room (garbage collector:D), and then a new room was build and now you may leave another toys there (new function instance), but never get the same toys which were left in the first room instance.\n\nFor an advanced child I would put something like the following. It is not perfect, but it makes you feel about what it is:\n\nfunction playingInBrothersRoom (withToys) {\n  // We closure toys which we played in the brother's room. When he come back and lock the door\n  // your brother is supposed to be into the outer [[scope]] object now. Thanks god you could communicate with him.\n  var closureToys = withToys || [],\n      returnToy, countIt, toy; // Just another closure helpers, for brother's inner use.\n\n  var brotherGivesToyBack = function (toy) {\n    // New request. There is not yet closureToys on brother's hand yet. Give him a time.\n    returnToy = null;\n    if (toy && closureToys.length > 0) { // If we ask for a specific toy, the brother is going to search for it.\n\n      for ( countIt = closureToys.length; countIt; countIt--) {\n        if (closureToys[countIt - 1] == toy) {\n          returnToy = 'Take your ' + closureToys.splice(countIt - 1, 1) + ', little boy!';\n          break;\n        }\n      }\n      returnToy = returnToy || 'Hey, I could not find any ' + toy + ' here. Look for it in another room.';\n    }\n    else if (closureToys.length > 0) { // Otherwise, just give back everything he has in the room.\n      returnToy = 'Behold! ' + closureToys.join(', ') + '.';\n      closureToys = [];\n    }\n    else {\n      returnToy = 'Hey, lil shrimp, I gave you everything!';\n    }\n    console.log(returnToy);\n  }\n  return brotherGivesToyBack;\n}\n// You are playing in the house, including the brother's room.\nvar toys = ['teddybear', 'car', 'jumpingrope'],\n    askBrotherForClosuredToy = playingInBrothersRoom(toys);\n\n// The door is locked, and the brother came from the school. You could not cheat and take it out directly.\nconsole.log(askBrotherForClosuredToy.closureToys); // Undefined\n\n// But you could ask your brother politely, to give it back.\naskBrotherForClosuredToy('teddybear'); // Hooray, here it is, teddybear\naskBrotherForClosuredToy('ball'); // The brother would not be able to find it.\naskBrotherForClosuredToy(); // The brother gives you all the rest\naskBrotherForClosuredToy(); // Nothing left in there\n\n\nAs you can see, the toys left in the room are still accessible via the brother and no matter if the room is locked. Here is a jsbin to play around with it.\n    ",
        "votes": 57,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 483,
        "fecha": { "$date" : "2014-10-25T23:02:19Z" },
        "decripcion": "\nAn answer for a six-year-old (assuming he knows what a function is and what a variable is, and what data is):\n\nFunctions can return data. One kind of data you can return from a function is another function. When that new function gets returned, all the variables and arguments used in the function that created it don't go away. Instead, that parent function \"closes.\" In other words, nothing can look inside of it and see the variables it used except for the function it returned. That new function has a special ability to look back inside the function that created it and see the data inside of it.\n\nfunction the_closure() {\n  var x = 4;\n  return function () {\n    return x; // Here, we look back inside the_closure for the value of x\n  }\n}\n\nvar myFn = the_closure();\nmyFn(); //=> 4\n\n\nAnother really simple way to explain it is in terms of scope:\n\nAny time you create a smaller scope inside of a larger scope, the smaller scope will always be able to see what is in the larger scope.\n    ",
        "votes": 50,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 484,
        "fecha": { "$date" : "2016-05-05T16:04:06Z" },
        "decripcion": "\nA function in JavaScript is not just a reference to a set of instructions (as in C language), but it also includes a hidden data structure which is composed of references to all nonlocal variables it uses (captured variables). Such two-piece functions are called closures. Every function in JavaScript can be considered a closure.\n\nClosures are functions with a state. It is somewhat similar to \"this\" in the sense that \"this\" also provides state for a function but function and \"this\" are separate objects (\"this\" is just a fancy parameter, and the only way to bind it permanently to a function is to create a closure). While \"this\" and function always live separately, a function cannot be separated from its closure and the language provides no means to access captured variables.\n\nBecause all these external variables referenced by a lexically nested function are actually local variables in the chain of its lexically enclosing functions (global variables can be assumed to be local variables of some root function), and every single execution of a function creates new instances of its local variables, it follows that every execution of a function returning (or otherwise transferring it out, such as registering it as a callback) a nested function creates a new closure (with its own potentially unique set of referenced nonlocal variables which represent its execution context).\n\nAlso, it must be understood that local variables in JavaScript are created not on the stack frame, but on the heap and destroyed only when no one is referencing them. When a function returns, references to its local variables are decremented, but they can still be non-null if during the current execution they became part of a closure and are still referenced by its lexically nested functions (which can happen only if the references to these nested functions were returned or otherwise transferred to some external code).\n\nAn example:\n\nfunction foo (initValue) {\n   //This variable is not destroyed when the foo function exits.\n   //It is 'captured' by the two nested functions returned below.\n   var value = initValue;\n\n   //Note that the two returned functions are created right now.\n   //If the foo function is called again, it will return\n   //new functions referencing a different 'value' variable.\n   return {\n       getValue: function () { return value; },\n       setValue: function (newValue) { value = newValue; }\n   }\n}\n\nfunction bar () {\n    //foo sets its local variable 'value' to 5 and returns an object with\n    //two functions still referencing that local variable\n    var obj = foo(5);\n\n    //Extracting functions just to show that no 'this' is involved here\n    var getValue = obj.getValue;\n    var setValue = obj.setValue;\n\n    alert(getValue()); //Displays 5\n    setValue(10);\n    alert(getValue()); //Displays 10\n\n    //At this point getValue and setValue functions are destroyed\n    //(in reality they are destroyed at the next iteration of the garbage collector).\n    //The local variable 'value' in the foo is no longer referenced by\n    //anything and is destroyed too.\n}\n\nbar();\n\n    ",
        "votes": 50,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 485,
        "fecha": { "$date" : "2015-04-29T15:37:06Z" },
        "decripcion": "\nPerhaps a little beyond all but the most precocious of six-year-olds, but a few examples that helped make the concept of closure in JavaScript click for me.\n\nA closure is a function that has access to another function's scope (its variables and functions). The easiest way to create a closure is with a function within a function; the reason being that in JavaScript a function always has access to its containing function\u2019s scope.\n\n\n\nfunction outerFunction() {\n    var outerVar = \"monkey\";\n    \n    function innerFunction() {\n        alert(outerVar);\n    }\n    \n    innerFunction();\n}\n\nouterFunction();\n Run code snippetHide resultsExpand snippet\n\n\n\nALERT: monkey\n\nIn the above example, outerFunction is called which in turn calls innerFunction. Note how outerVar is available to innerFunction, evidenced by its correctly alerting the value of outerVar.\n\nNow consider the following:\n\n\n\nfunction outerFunction() {\n    var outerVar = \"monkey\";\n    \n    function innerFunction() {\n        return outerVar;\n    }\n    \n    return innerFunction;\n}\n\nvar referenceToInnerFunction = outerFunction();\nalert(referenceToInnerFunction());\n Run code snippetHide resultsExpand snippet\n\n\n\nALERT: monkey\n\nreferenceToInnerFunction is set to outerFunction(), which simply returns a reference to innerFunction. When referenceToInnerFunction is called, it returns outerVar. Again, as above, this demonstrates that innerFunction has access to outerVar, a variable of outerFunction. Furthermore, it is interesting to note that it retains this access even after outerFunction has finished executing.\n\nAnd here is where things get really interesting. If we were to get rid of outerFunction, say set it to null, you might think that referenceToInnerFunction would loose its access to the value of outerVar. But this is not the case. \n\n\n\nfunction outerFunction() {\n    var outerVar = \"monkey\";\n    \n    function innerFunction() {\n        return outerVar;\n    }\n    \n    return innerFunction;\n}\n\nvar referenceToInnerFunction = outerFunction();\nalert(referenceToInnerFunction());\n\nouterFunction = null;\nalert(referenceToInnerFunction());\n Run code snippetHide resultsExpand snippet\n\n\n\nALERT: monkey\nALERT: monkey\n\nBut how is this so? How can referenceToInnerFunction still know the value of outerVar now that outerFunction has been set to null?\n\nThe reason that referenceToInnerFunction can still access the value of outerVar is because when the closure was first created by placing innerFunction inside of outerFunction, innerFunction added a reference to outerFunction\u2019s scope (its variables and functions) to its scope chain. What this means is that innerFunction has a pointer or reference to all of outerFunction\u2019s variables, including outerVar. So even when outerFunction has finished executing, or even if it is deleted or set to null, the variables in its scope, like outerVar, stick around in memory because of the outstanding reference to them on the part of the innerFunction that has been returned to referenceToInnerFunction. To truly release outerVar and the rest of outerFunction\u2019s variables from memory you would have to get rid of this outstanding reference to them, say by setting referenceToInnerFunction to null as well.\n\n//////////\n\nTwo other things about closures to note. First, the closure will always have access to the last values of its containing function.\n\n\n\nfunction outerFunction() {\n    var outerVar = \"monkey\";\n    \n    function innerFunction() {\n        alert(outerVar);\n    }\n    \n    outerVar = \"gorilla\";\n\n    innerFunction();\n}\n\nouterFunction();\n Run code snippetHide resultsExpand snippet\n\n\n\nALERT: gorilla\n\nSecond, when a closure is created, it retains a reference to all of its enclosing function\u2019s variables and functions; it doesn\u2019t get to pick and choose. And but so, closures should be used sparingly, or at least carefully, as they can be memory intensive; a lot of variables can be kept in memory long after a containing function has finished executing.\n    ",
        "votes": 49,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 486,
        "fecha": { "$date" : "2014-10-25T22:54:15Z" },
        "decripcion": "\nI'd simply point them to the Mozilla Closures page. It's the best, most concise and simple explanation of closure basics and practical usage that I've found. It is highly recommended to anyone learning JavaScript.\n\nAnd yes, I'd even recommend it to a 6-year old -- if the 6-year old is learning about closures, then it's logical they're ready to comprehend the concise and simple explanation provided in the article.\n    ",
        "votes": 47,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 487,
        "fecha": { "$date" : "2021-07-26T16:57:51Z" },
        "decripcion": "\nUpdate: June-2021\nFor a specific case when you need all query params:\nconst urlSearchParams = new URLSearchParams(window.location.search);\nconst params = Object.fromEntries(urlSearchParams.entries());\n\nUpdate: Sep-2018\nYou can use URLSearchParams which is simple and has decent (but not complete) browser support.\nconst urlParams = new URLSearchParams(window.location.search);\nconst myParam = urlParams.get('myParam');\n\nOriginal\nYou don't need jQuery for that purpose. You can use just some pure JavaScript:\nfunction getParameterByName(name, url = window.location.href) {\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\nUsage:\n// query string: ?foo=lorem&bar=&baz\nvar foo = getParameterByName('foo'); // \"lorem\"\nvar bar = getParameterByName('bar'); // \"\" (present with empty value)\nvar baz = getParameterByName('baz'); // \"\" (present with no value)\nvar qux = getParameterByName('qux'); // null (absent)\n\nNOTE: If a parameter is present several times (?foo=lorem&foo=ipsum), you will get the first value (lorem). There is no standard about this and usages vary, see for example this question: Authoritative position of duplicate HTTP GET query keys.\nNOTE: The function is case-sensitive. If you prefer case-insensitive parameter name, add 'i' modifier to RegExp\nNOTE: If you're getting a no-useless-escape eslint error, you can replace name = name.replace(/[\\[\\]]/g, '\\\\$&'); with name = name.replace(/[[\\]]/g, '\\\\$&').\n\nThis is an update based on the new URLSearchParams specs to achieve the same result more succinctly. See answer titled \"URLSearchParams\" below.\n    ",
        "votes": 9200,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 488,
        "fecha": { "$date" : "2020-03-29T19:20:24Z" },
        "decripcion": "\nSome of the solutions posted here are inefficient. Repeating the regular expression search every time the script needs to access a parameter is completely unnecessary, one single function to split up the parameters into an associative-array style object is enough. If you're not working with the HTML 5 History API, this is only necessary once per page load.  The other suggestions here also fail to decode the URL correctly.\n\nvar urlParams;\n(window.onpopstate = function () {\n    var match,\n        pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n        search = /([^&=]+)=?([^&]*)/g,\n        decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n        query  = window.location.search.substring(1);\n\n    urlParams = {};\n    while (match = search.exec(query))\n       urlParams[decode(match[1])] = decode(match[2]);\n})();\n\nExample querystring: \n\n\n  ?i=main&mode=front&sid=de8d49b78a85a322c4155015fdce22c4&enc=+Hello%20&empty\n\n\nResult:\n\n urlParams = {\n    enc: \" Hello \",\n    i: \"main\",\n    mode: \"front\",\n    sid: \"de8d49b78a85a322c4155015fdce22c4\",\n    empty: \"\"\n}\n\nalert(urlParams[\"mode\"]);\n// -> \"front\"\n\nalert(\"empty\" in urlParams);\n// -> true\n\n\nThis could easily be improved upon to handle array-style query strings too.  An example of this is here, but since array-style parameters aren't defined in RFC 3986 I won't pollute this answer with the source code. For those interested in a \"polluted\" version, look at campbeln's answer below.\n\nAlso, as pointed out in the comments, ; is a legal delimiter for key=value pairs.  It would require a more complicated regex to handle ; or &, which I think is unnecessary because it's rare that ; is used and I would say even more unlikely that both would be used.  If you need to support ; instead of &, just swap them in the regex.\n\n \nIf you're using a server-side preprocessing language, you might want to use its native JSON functions to do the heavy lifting for you.  For example, in PHP you can write:\n\n<script>var urlParams = <?php echo json_encode($_GET, JSON_HEX_TAG);?>;</script>\n\nMuch simpler!\n\nUPDATED\n\n\n  A new capability would be to retrieve repeated params as following myparam=1&myparam=2. There is not a specification, however, most of the current approaches follow the generation of an array.\n\n\nmyparam = [\"1\", \"2\"]\n\n\nSo, this is the approach to manage it:\n\nlet urlParams = {};\n(window.onpopstate = function () {\n    let match,\n        pl = /\\+/g,  // Regex for replacing addition symbol with a space\n        search = /([^&=]+)=?([^&]*)/g,\n        decode = function (s) {\n            return decodeURIComponent(s.replace(pl, \" \"));\n        },\n        query = window.location.search.substring(1);\n\n    while (match = search.exec(query)) {\n        if (decode(match[1]) in urlParams) {\n            if (!Array.isArray(urlParams[decode(match[1])])) {\n                urlParams[decode(match[1])] = [urlParams[decode(match[1])]];\n            }\n            urlParams[decode(match[1])].push(decode(match[2]));\n        } else {\n            urlParams[decode(match[1])] = decode(match[2]);\n        }\n    }\n})();\n\n    ",
        "votes": 1756,
        "comentarios": [
            {
                "decripcion": "This worked like a Charm to fetch the live URL on page load every single time:-)",
                "fecha": { "$date" : "2021-02-02T13:54:59Z" },
                "usuario": "Vetrivel PS",
                "usuario_id": 776
            },
            {
                "decripcion": "Very nice! However, I suggest to introduce local variables let parameterKey = decode(match[1]); let parameterValue = decode(match[2]);. This makes it more obvious what is happening IMHO.",
                "fecha": { "$date" : "2021-07-07T06:30:55Z" },
                "usuario": "mihca",
                "usuario_id": 777
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 489,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nES2015 (ES6)\ngetQueryStringParams = query => {\n    return query\n        ? (/^[?#]/.test(query) ? query.slice(1) : query)\n            .split('&')\n            .reduce((params, param) => {\n                    let [key, value] = param.split('=');\n                    params[key] = value ? decodeURIComponent(value.replace(/\\+/g, ' ')) : '';\n                    return params;\n                }, {}\n            )\n        : {}\n};\n\n\nWithout jQuery\nvar qs = (function(a) {\n    if (a == \"\") return {};\n    var b = {};\n    for (var i = 0; i < a.length; ++i)\n    {\n        var p=a[i].split('=', 2);\n        if (p.length == 1)\n            b[p[0]] = \"\";\n        else\n            b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n    }\n    return b;\n})(window.location.search.substr(1).split('&'));\n\nWith an URL like ?topic=123&name=query+string, the following will return:\nqs[\"topic\"];    // 123\nqs[\"name\"];     // query string\nqs[\"nothere\"];  // undefined (object)\n\n\nGoogle method\nTearing Google's code I found the method they use: getUrlParameters\nfunction (b) {\n    var c = typeof b === \"undefined\";\n    if (a !== h && c) return a;\n    for (var d = {}, b = b || k[B][vb], e = b[p](\"?\"), f = b[p](\"#\"), b = (f === -1 ? b[Ya](e + 1) : [b[Ya](e + 1, f - e - 1), \"&\", b[Ya](f + 1)][K](\"\"))[z](\"&\"), e = i.dd ? ia : unescape, f = 0, g = b[w]; f < g; ++f) {\n        var l = b[f][p](\"=\");\n        if (l !== -1) {\n            var q = b[f][I](0, l),\n                l = b[f][I](l + 1),\n                l = l[Ca](/\\+/g, \" \");\n            try {\n                d[q] = e(l)\n            } catch (A) {}\n        }\n    }\n    c && (a = d);\n    return d\n}\n\nIt is obfuscated, but it is understandable. It does not work because some variables are undefined.\nThey start to look for parameters on the url from ? and also from the hash #. Then for each parameter they split in the equal sign b[f][p](\"=\") (which looks like indexOf, they use the position of the char to get the key/value). Having it split they check whether the parameter has a value or not, if it has then they store the value of d, otherwise they just continue.\nIn the end the object d is returned, handling escaping and the + sign. This object is just like mine, it has the same behavior.\n\nMy method as a jQuery plugin\n(function($) {\n    $.QueryString = (function(paramsArray) {\n        let params = {};\n\n        for (let i = 0; i < paramsArray.length; ++i)\n        {\n            let param = paramsArray[i]\n                .split('=', 2);\n            \n            if (param.length !== 2)\n                continue;\n            \n            params[param[0]] = decodeURIComponent(param[1].replace(/\\+/g, \" \"));\n        }\n            \n        return params;\n    })(window.location.search.substr(1).split('&'))\n})(jQuery);\n\nUsage\n//Get a param\n$.QueryString.param\n//-or-\n$.QueryString[\"param\"]\n//This outputs something like...\n//\"val\"\n\n//Get all params as object\n$.QueryString\n//This outputs something like...\n//Object { param: \"val\", param2: \"val\" }\n\n//Set a param (only in the $.QueryString object, doesn't affect the browser's querystring)\n$.QueryString.param = \"newvalue\"\n//This doesn't output anything, it just updates the $.QueryString object\n\n//Convert object into string suitable for url a querystring (Requires jQuery)\n$.param($.QueryString)\n//This outputs something like...\n//\"param=newvalue&param2=val\"\n\n//Update the url/querystring in the browser's location bar with the $.QueryString object\nhistory.replaceState({}, '', \"?\" + $.param($.QueryString));\n//-or-\nhistory.pushState({}, '', \"?\" + $.param($.QueryString));\n\n\nPerformance test (split method against regex method) (jsPerf)\nPreparation code: methods declaration\nSplit test code\nvar qs = window.GetQueryString(query);\n\nvar search = qs[\"q\"];\nvar value = qs[\"value\"];\nvar undef = qs[\"undefinedstring\"];\n\nRegex test code\nvar search = window.getParameterByName(\"q\");\nvar value = window.getParameterByName(\"value\");\nvar undef = window.getParameterByName(\"undefinedstring\");\n\nTesting in Firefox 4.0 x86 on Windows Server 2008 R2 / 7 x64\n\nSplit method: 144,780 \u00b12.17% fastest\nRegex method: 13,891 \u00b10.85% | 90% slower\n\n    ",
        "votes": 1304,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 490,
        "fecha": { "$date" : "2017-05-23T12:10:45Z" },
        "decripcion": "\nImproved version of Artem Barger's answer:\n\nfunction getParameterByName(name) {\n    var match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);\n    return match && decodeURIComponent(match[1].replace(/\\+/g, ' '));\n}\n\n\nFor more information on improvement see: http://james.padolsey.com/javascript/bujs-1-getparameterbyname/\n    ",
        "votes": 672,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 491,
        "fecha": { "$date" : "2020-12-05T09:52:47Z" },
        "decripcion": "\nURLSearchParams\nFirefox 44+, Opera 36+, Edge 17+, Safari 10.3+ and Chrome 49+ support the URLSearchParams API:\n\nChrome Announcement and details\nOpera Announcement and details\nFirefox Announcement and details\n\nThere is a google-suggested URLSearchParams polyfill for the stable versions of IE.\nIt is not standardized by W3C, but it is a living standard by WhatWG.\nYou can use it on location:\nconst params = new URLSearchParams(location.search);\n\nor\nconst params = (new URL(location)).searchParams;\n\nOr of course on any URL:\nconst url = new URL('https://example.com?foo=1&bar=2');\nconst params = new URLSearchParams(url.search);\n\nYou can get params also using a shorthand .searchParams property on the URL object, like this:\nconst params = new URL('https://example.com?foo=1&bar=2').searchParams;\nparams.get('foo'); // \"1\"\nparams.get('bar'); // \"2\" \n\nYou read/set parameters through the get(KEY), set(KEY, VALUE), append(KEY, VALUE) API. You can also iterate over all values for (let p of params) {}.\nA reference implementation and a sample page are available for auditing and testing.\n    ",
        "votes": 640,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 492,
        "fecha": { "$date" : "2016-06-29T21:05:09Z" },
        "decripcion": "\nJust another recommendation. The plugin Purl allows to retrieve all parts of URL, including anchor, host, etc.\n\nIt can be used with or without jQuery.\n\nUsage is very simple and cool:\n\nvar url = $.url('http://allmarkedup.com/folder/dir/index.html?item=value'); // jQuery version\nvar url = purl('http://allmarkedup.com/folder/dir/index.html?item=value'); // plain JS version\nurl.attr('protocol'); // returns 'http'\nurl.attr('path'); // returns '/folder/dir/index.html'\n\n\nHowever, as of Nov 11, 2014, Purl is no longer maintained and the author recommends using URI.js instead.  The jQuery plugin is different in that it focuses on elements - for usage with strings, just use URI directly, with or without jQuery.  Similar code would look as such, fuller docs here:\n\nvar url = new URI('http://allmarkedup.com/folder/dir/index.html?item=value'); // plain JS version\nurl.protocol(); // returns 'http'\nurl.path(); // returns '/folder/dir/index.html'\n\n    ",
        "votes": 401,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 493,
        "fecha": { "$date" : "2017-07-12T08:29:32Z" },
        "decripcion": "\ntl;dr\n\nA quick, complete solution, which handles multivalued keys and encoded characters.\n\nvar qd = {};\nif (location.search) location.search.substr(1).split(\"&\").forEach(function(item) {var s = item.split(\"=\"), k = s[0], v = s[1] && decodeURIComponent(s[1]); (qd[k] = qd[k] || []).push(v)})\n\n//using ES6   (23 characters cooler)\nvar qd = {};\nif (location.search) location.search.substr(1).split`&`.forEach(item => {let [k,v] = item.split`=`; v = v && decodeURIComponent(v); (qd[k] = qd[k] || []).push(v)})\n\n\nMulti-lined:\n\nvar qd = {};\nif (location.search) location.search.substr(1).split(\"&\").forEach(function(item) {\n    var s = item.split(\"=\"),\n        k = s[0],\n        v = s[1] && decodeURIComponent(s[1]); //  null-coalescing / short-circuit\n    //(k in qd) ? qd[k].push(v) : qd[k] = [v]\n    (qd[k] = qd[k] || []).push(v) // null-coalescing / short-circuit\n})\n\n\nWhat is all this code...\n\"null-coalescing\", short-circuit evaluation\nES6 Destructuring assignments, Arrow functions, Template strings\n\nExample:\n\n\"?a=1&b=0&c=3&d&e&a=5&a=t%20e%20x%20t&e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst\u00e5le%26car%3Dsaab\"\n> qd\na: [\"1\", \"5\", \"t e x t\"]\nb: [\"0\"]\nc: [\"3\"]\nd: [undefined]\ne: [undefined, \"http://w3schools.com/my test.asp?name=st\u00e5le&car=saab\"]\n\n> qd.a[1]    // \"5\"\n> qd[\"a\"][1] // \"5\"\n\n\n\n\n\n\nRead more... about the Vanilla JavaScript solution.\n\nTo access different parts of a URL use location.(search|hash)\n\nEasiest (dummy) solution\n\nvar queryDict = {};\nlocation.search.substr(1).split(\"&\").forEach(function(item) {queryDict[item.split(\"=\")[0]] = item.split(\"=\")[1]})\n\n\n\nHandles empty keys correctly.\nOverrides multi-keys with last value found.\n\n\n\"?a=1&b=0&c=3&d&e&a=5\"\n> queryDict\na: \"5\"\nb: \"0\"\nc: \"3\"\nd: undefined\ne: undefined\n\n\nMulti-valued keys\n\nSimple key check (item in dict) ? dict.item.push(val) : dict.item = [val]\n\nvar qd = {};\nlocation.search.substr(1).split(\"&\").forEach(function(item) {(item.split(\"=\")[0] in qd) ? qd[item.split(\"=\")[0]].push(item.split(\"=\")[1]) : qd[item.split(\"=\")[0]] = [item.split(\"=\")[1]]})\n\n\n\nNow returns arrays instead.\nAccess values by qd.key[index] or qd[key][index]\n\n\n> qd\na: [\"1\", \"5\"]\nb: [\"0\"]\nc: [\"3\"]\nd: [undefined]\ne: [undefined]\n\n\nEncoded characters?\n\nUse decodeURIComponent() for the second or both splits.\n\nvar qd = {};\nlocation.search.substr(1).split(\"&\").forEach(function(item) {var k = item.split(\"=\")[0], v = decodeURIComponent(item.split(\"=\")[1]); (k in qd) ? qd[k].push(v) : qd[k] = [v]})\n\n\nExample:\n\n\"?a=1&b=0&c=3&d&e&a=5&a=t%20e%20x%20t&e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst\u00e5le%26car%3Dsaab\"\n> qd\na: [\"1\", \"5\", \"t e x t\"]\nb: [\"0\"]\nc: [\"3\"]\nd: [\"undefined\"]  // decodeURIComponent(undefined) returns \"undefined\" !!!*\ne: [\"undefined\", \"http://w3schools.com/my test.asp?name=st\u00e5le&car=saab\"]\n\n\n\n\n\nFrom comments\n\n*!!! Please note, that decodeURIComponent(undefined) returns string \"undefined\". The solution lies in a simple usage of &&, which ensures that decodeURIComponent() is not called on undefined values. (See the \"complete solution\" at the top.)\n\nv = v && decodeURIComponent(v);\n\n\n\nIf the querystring is empty (location.search == \"\"), the result is somewhat misleading qd == {\"\": undefined}. It is suggested to check the querystring before launching the parsing function likeso:\n\nif (location.search) location.search.substr(1).split(\"&\").forEach(...)\n\n    ",
        "votes": 251,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 494,
        "fecha": { "$date" : "2016-02-04T18:51:35Z" },
        "decripcion": "\nRoshambo on snipplr.com has a simple script to achieve this described in Get URL Parameters with jQuery | Improved. With his script you also easily get to pull out just the parameters you want.\n\nHere's the gist:\n\n$.urlParam = function(name, url) {\n    if (!url) {\n     url = window.location.href;\n    }\n    var results = new RegExp('[\\\\?&]' + name + '=([^&#]*)').exec(url);\n    if (!results) { \n        return undefined;\n    }\n    return results[1] || undefined;\n}\n\n\nThen just get your parameters from the query string.\n\nSo if the URL/query string was xyz.com/index.html?lang=de.\n\nJust call var langval = $.urlParam('lang');, and you've got it.\n\nUZBEKJON has a great blog post on this as well, Get URL parameters & values with jQuery.\n    ",
        "votes": 221,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 495,
        "fecha": { "$date" : "2014-10-09T16:13:29Z" },
        "decripcion": "\nIf you're using jQuery, you can use a library, such as jQuery BBQ: Back Button & Query Library.\n\n\n  ...jQuery BBQ provides a full .deparam() method, along with both hash state management, and fragment / query string parse and merge utility methods.\n\n\nEdit: Adding Deparam Example:\n\n\n\n var DeparamExample = function() {\n            var params = $.deparam.querystring();\n\n            //nameofparam is the name of a param from url\n            //code below will get param if ajax refresh with hash\n            if (typeof params.nameofparam == 'undefined') {\n                params = jQuery.deparam.fragment(window.location.href);\n            }\n            \n            if (typeof params.nameofparam != 'undefined') {\n                var paramValue = params.nameofparam.toString();\n                  \n            }\n        };\n Run code snippetHide resultsExpand snippet\n\n\n\nIf you want to just use plain JavaScript, you could use...\n\nvar getParamValue = (function() {\n    var params;\n    var resetParams = function() {\n            var query = window.location.search;\n            var regex = /[?&;](.+?)=([^&;]+)/g;\n            var match;\n\n            params = {};\n\n            if (query) {\n                while (match = regex.exec(query)) {\n                    params[match[1]] = decodeURIComponent(match[2]);\n                }\n            }    \n        };\n\n    window.addEventListener\n    && window.addEventListener('popstate', resetParams);\n\n    resetParams();\n\n    return function(param) {\n        return params.hasOwnProperty(param) ? params[param] : null;\n    }\n\n})();\u200b\n\n\nBecause of the new HTML History API and specifically history.pushState() and history.replaceState(), the URL can change which will invalidate the cache of parameters and their values.\n\nThis version will update its internal cache of parameters each time the history changes.\n    ",
        "votes": 168,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 496,
        "fecha": { "$date" : "2017-10-26T03:58:31Z" },
        "decripcion": "\nJust use two splits:\n\nfunction get(n) {\n    var half = location.search.split(n + '=')[1];\n    return half !== undefined ? decodeURIComponent(half.split('&')[0]) : null;\n}\n\n\nI was reading all the previous and more complete answers. But I think that is the simplest and faster method. You can check in this jsPerf benchmark\n\nTo solve the problem in Rup's comment, add a conditional split by changing the first line to the two below. But absolute accuracy means it's now slower than regexp (see jsPerf).\n\nfunction get(n) {\n    var half = location.search.split('&' + n + '=')[1];\n    if (!half) half = location.search.split('?' + n + '=')[1];\n    return half !== undefined ? decodeURIComponent(half.split('&')[0]) : null;\n}\n\n\nSo if you know you won't run into Rup's counter-case, this wins. Otherwise, regexp.\n\n\n  Or if you have control of the querystring and can guarantee that a value you are trying to get will never contain any URL encoded\n  characters (having these in a value would be a bad idea) - you can use\n  the following slightly more simplified and readable version of the 1st option:\n\n    function getQueryStringValueByName(name) {\n        var queryStringFromStartOfValue = location.search.split(name + '=')[1];\n         return queryStringFromStartOfValue !== undefined ? queryStringFromStartOfValue.split('&')[0] : null;\n\n\n    ",
        "votes": 102,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 497,
        "fecha": { "$date" : "2010-10-05T20:49:37Z" },
        "decripcion": "\nHere's my stab at making Andy E's excellent solution into a full fledged jQuery plugin:\n\n;(function ($) {\n    $.extend({      \n        getQueryString: function (name) {           \n            function parseParams() {\n                var params = {},\n                    e,\n                    a = /\\+/g,  // Regex for replacing addition symbol with a space\n                    r = /([^&=]+)=?([^&]*)/g,\n                    d = function (s) { return decodeURIComponent(s.replace(a, \" \")); },\n                    q = window.location.search.substring(1);\n\n                while (e = r.exec(q))\n                    params[d(e[1])] = d(e[2]);\n\n                return params;\n            }\n\n            if (!this.queryStringParams)\n                this.queryStringParams = parseParams(); \n\n            return this.queryStringParams[name];\n        }\n    });\n})(jQuery);\n\n\nThe syntax is:\n\nvar someVar = $.getQueryString('myParam');\n\n\nBest of both worlds!\n    ",
        "votes": 97,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 498,
        "fecha": { "$date" : "2012-02-20T14:18:01Z" },
        "decripcion": "\nIf you're doing more URL manipulation than simply parsing the querystring, you may find URI.js helpful. It is a library for manipulating URLs - and comes with all the bells and whistles. (Sorry for self-advertising here)\n\nto convert your querystring into a map:\n\nvar data = URI('?foo=bar&bar=baz&foo=world').query(true);\ndata == {\n  \"foo\": [\"bar\", \"world\"],\n  \"bar\": \"baz\"\n}\n\n\n(URI.js also \"fixes\" bad querystrings like ?&foo&&bar=baz& to ?foo&bar=baz)\n    ",
        "votes": 77,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 499,
        "fecha": { "$date" : "2019-04-10T18:44:59Z" },
        "decripcion": "\nI like Ryan Phelan's solution. But I don't see any point of extending jQuery for that? There is no usage of jQuery functionality.\n\nOn the other hand, I like the built-in function in Google Chrome: window.location.getParameter.\n\nSo why not to use this? Okay, other browsers don't have. So let's create this function if it does not exist:\n\nif (!window.location.getParameter ) {\n  window.location.getParameter = function(key) {\n    function parseParams() {\n        var params = {},\n            e,\n            a = /\\+/g,  // Regex for replacing addition symbol with a space\n            r = /([^&=]+)=?([^&]*)/g,\n            d = function (s) { return decodeURIComponent(s.replace(a, \" \")); },\n            q = window.location.search.substring(1);\n\n        while (e = r.exec(q))\n            params[d(e[1])] = d(e[2]);\n\n        return params;\n    }\n\n    if (!this.queryStringParams)\n        this.queryStringParams = parseParams(); \n\n    return this.queryStringParams[key];\n  };\n}\n\n\nThis function is more or less from Ryan Phelan, but it is wrapped differently: clear name and no dependencies of other javascript libraries. More about this function on my blog.\n    ",
        "votes": 65,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 500,
        "fecha": { "$date" : "2016-07-24T14:22:07Z" },
        "decripcion": "\nKeep it simple in plain JavaScript code:\n\nfunction qs(key) {\n    var vars = [], hash;\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');\n    for(var i = 0; i < hashes.length; i++)\n    {\n        hash = hashes[i].split('=');\n        vars.push(hash[0]);\n        vars[hash[0]] = hash[1];\n    }\n    return vars[key];\n}\n\n\nCall it from anywhere in the JavaScript code:\n\nvar result = qs('someKey');\n\n    ",
        "votes": 58,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 501,
        "fecha": { "$date" : "2015-06-09T12:00:26Z" },
        "decripcion": "\nHere is a fast way to get an object similar to the PHP $_GET array:\n\nfunction get_query(){\n    var url = location.search;\n    var qs = url.substring(url.indexOf('?') + 1).split('&');\n    for(var i = 0, result = {}; i < qs.length; i++){\n        qs[i] = qs[i].split('=');\n        result[qs[i][0]] = decodeURIComponent(qs[i][1]);\n    }\n    return result;\n}\n\n\nUsage:\n\nvar $_GET = get_query();\n\n\nFor the query string x=5&y&z=hello&x=6 this returns the object:\n\n{\n  x: \"6\",\n  y: undefined,\n  z: \"hello\"\n}\n\n    ",
        "votes": 57,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 502,
        "fecha": { "$date" : "2016-07-24T13:58:05Z" },
        "decripcion": "\nThese are all great answers, but I needed something a bit more robust, and thought you all might like to have what I created.\n\nIt is a simple library method that does dissection and manipulation of URL parameters. The static method has the following sub methods that can be called on the subject URL:\n\n\ngetHost\ngetPath\ngetHash\nsetHash\ngetParams\ngetQuery\nsetParam\ngetParam\nhasParam\nremoveParam\n\n\nExample:\n\nURLParser(url).getParam('myparam1')\n\n\n\n\nvar url = \"http://www.test.com/folder/mypage.html?myparam1=1&myparam2=2#something\";\n\nfunction URLParser(u){\n    var path=\"\",query=\"\",hash=\"\",params;\n    if(u.indexOf(\"#\") > 0){\n        hash = u.substr(u.indexOf(\"#\") + 1);\n        u = u.substr(0 , u.indexOf(\"#\"));\n    }\n    if(u.indexOf(\"?\") > 0){\n        path = u.substr(0 , u.indexOf(\"?\"));\n        query = u.substr(u.indexOf(\"?\") + 1);\n        params= query.split('&');\n    }else\n        path = u;\n    return {\n        getHost: function(){\n            var hostexp = /\\/\\/([\\w.-]*)/;\n            var match = hostexp.exec(path);\n            if (match != null && match.length > 1)\n                return match[1];\n            return \"\";\n        },\n        getPath: function(){\n            var pathexp = /\\/\\/[\\w.-]*(?:\\/([^?]*))/;\n            var match = pathexp.exec(path);\n            if (match != null && match.length > 1)\n                return match[1];\n            return \"\";\n        },\n        getHash: function(){\n            return hash;\n        },\n        getParams: function(){\n            return params\n        },\n        getQuery: function(){\n            return query;\n        },\n        setHash: function(value){\n            if(query.length > 0)\n                query = \"?\" + query;\n            if(value.length > 0)\n                query = query + \"#\" + value;\n            return path + query;\n        },\n        setParam: function(name, value){\n            if(!params){\n                params= new Array();\n            }\n            params.push(name + '=' + value);\n            for (var i = 0; i < params.length; i++) {\n                if(query.length > 0)\n                    query += \"&\";\n                query += params[i];\n            }\n            if(query.length > 0)\n                query = \"?\" + query;\n            if(hash.length > 0)\n                query = query + \"#\" + hash;\n            return path + query;\n        },\n        getParam: function(name){\n            if(params){\n                for (var i = 0; i < params.length; i++) {\n                    var pair = params[i].split('=');\n                    if (decodeURIComponent(pair[0]) == name)\n                        return decodeURIComponent(pair[1]);\n                }\n            }\n            console.log('Query variable %s not found', name);\n        },\n        hasParam: function(name){\n            if(params){\n                for (var i = 0; i < params.length; i++) {\n                    var pair = params[i].split('=');\n                    if (decodeURIComponent(pair[0]) == name)\n                        return true;\n                }\n            }\n            console.log('Query variable %s not found', name);\n        },\n        removeParam: function(name){\n            query = \"\";\n            if(params){\n                var newparams = new Array();\n                for (var i = 0;i < params.length;i++) {\n                    var pair = params[i].split('=');\n                    if (decodeURIComponent(pair[0]) != name)\n                          newparams .push(params[i]);\n                }\n                params = newparams;\n                for (var i = 0; i < params.length; i++) {\n                    if(query.length > 0)\n                        query += \"&\";\n                    query += params[i];\n                }\n            }\n            if(query.length > 0)\n                query = \"?\" + query;\n            if(hash.length > 0)\n                query = query + \"#\" + hash;\n            return path + query;\n        },\n    }\n}\n\n\ndocument.write(\"Host: \" + URLParser(url).getHost() + '<br>');\ndocument.write(\"Path: \" + URLParser(url).getPath() + '<br>');\ndocument.write(\"Query: \" + URLParser(url).getQuery() + '<br>');\ndocument.write(\"Hash: \" + URLParser(url).getHash() + '<br>');\ndocument.write(\"Params Array: \" + URLParser(url).getParams() + '<br>');\ndocument.write(\"Param: \" + URLParser(url).getParam('myparam1') + '<br>');\ndocument.write(\"Has Param: \" + URLParser(url).hasParam('myparam1') + '<br>');\n\ndocument.write(url + '<br>');\n\n// Remove the first parameter\nurl = URLParser(url).removeParam('myparam1');\ndocument.write(url + ' - Remove the first parameter<br>');\n\n// Add a third parameter\nurl = URLParser(url).setParam('myparam3',3);\ndocument.write(url + ' - Add a third parameter<br>');\n\n// Remove the second parameter\nurl = URLParser(url).removeParam('myparam2');\ndocument.write(url + ' - Remove the second parameter<br>');\n\n// Add a hash\nurl = URLParser(url).setHash('newhash');\ndocument.write(url + ' - Set Hash<br>');\n\n// Remove the last parameter\nurl = URLParser(url).removeParam('myparam3');\ndocument.write(url + ' - Remove the last parameter<br>');\n\n// Remove a parameter that doesn't exist\nurl = URLParser(url).removeParam('myparam3');\ndocument.write(url + ' - Remove a parameter that doesn\\\"t exist<br>');\n\n    ",
        "votes": 46,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 503,
        "fecha": { "$date" : "2015-06-09T11:36:23Z" },
        "decripcion": "\nFrom the MDN:\n\nfunction loadPageVar (sVar) {\n\u00a0\u00a0return unescape(window.location.search.replace(new RegExp(\"^(?:.*[&\\\\?]\" + escape(sVar).replace(/[\\.\\+\\*]/g, \"\\\\$&\") + \"(?:\\\\=([^&]*))?)?.*$\", \"i\"), \"$1\"));\n}\n\nalert(loadPageVar(\"name\"));\n\n    ",
        "votes": 45,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 504,
        "fecha": { "$date" : "2011-05-30T15:36:48Z" },
        "decripcion": "\nCode golf:\n\nvar a = location.search&&location.search.substr(1).replace(/\\+/gi,\" \").split(\"&\");\nfor (var i in a) {\n    var s = a[i].split(\"=\");\n    a[i]  = a[unescape(s[0])] = unescape(s[1]);\n}\n\n\nDisplay it!\n\nfor (i in a) {\n    document.write(i + \":\" + a[i] + \"<br/>\");   \n};\n\n\nOn my Mac: test.htm?i=can&has=cheezburger displays\n\n0:can\n1:cheezburger\ni:can\nhas:cheezburger\n\n    ",
        "votes": 41,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 505,
        "fecha": { "$date" : "2016-07-24T14:17:23Z" },
        "decripcion": "\nI use regular expressions a lot, but not for that.\n\nIt seems easier and more efficient to me to read the query string once in my application, and build an object from all the key/value pairs like:\n\nvar search = function() {\n  var s = window.location.search.substr(1),\n    p = s.split(/\\&/), l = p.length, kv, r = {};\n  if (l === 0) {return false;}\n  while (l--) {\n    kv = p[l].split(/\\=/);\n    r[kv[0]] = decodeURIComponent(kv[1] || '') || true;\n  }\n  return r;\n}();\n\n\nFor a URL like http://domain.com?param1=val1&param2=val2 you can get their value later in your code as search.param1 and search.param2.\n    ",
        "votes": 41,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 506,
        "fecha": { "$date" : "2013-07-24T13:03:19Z" },
        "decripcion": "\nfunction GET() {\n        var data = [];\n        for(x = 0; x < arguments.length; ++x)\n            data.push(location.href.match(new RegExp(\"/\\?\".concat(arguments[x],\"=\",\"([^\\n&]*)\")))[1])\n                return data;\n    }\n\n\nexample:\ndata = GET(\"id\",\"name\",\"foo\");\nquery string : ?id=3&name=jet&foo=b\nreturns:\n    data[0] // 3\n    data[1] // jet\n    data[2] // b\nor\n    alert(GET(\"id\")[0]) // return 3\n\n    ",
        "votes": 39,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 507,
        "fecha": { "$date" : "2015-11-12T06:00:35Z" },
        "decripcion": "\nRoshambo jQuery method wasn't taking care of decode URL\n\n\n  http://snipplr.com/view/26662/get-url-parameters-with-jquery--improved/\n\n\nJust added that capability also while adding in  the return statement \n\nreturn decodeURIComponent(results[1].replace(/\\+/g, \" \")) || 0;\n\n\nNow you can find the updated gist:\n\n$.urlParam = function(name){\nvar results = new RegExp('[\\\\?&]' + name + '=([^&#]*)').exec(window.location.href);\nif (!results) { return 0; }\nreturn decodeURIComponent(results[1].replace(/\\+/g, \" \")) || 0;\n}\n\n    ",
        "votes": 39,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 508,
        "fecha": { "$date" : "2015-11-09T18:14:12Z" },
        "decripcion": "\nI like this one (taken from jquery-howto.blogspot.co.uk):\n\n// get an array with all querystring values\n// example: var valor = getUrlVars()[\"valor\"];\nfunction getUrlVars() {\n    var vars = [], hash;\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');\n    for (var i = 0; i < hashes.length; i++) {\n        hash = hashes[i].split('=');\n        vars.push(hash[0]);\n        vars[hash[0]] = hash[1];\n    }\n    return vars;\n}\n\n\nWorks great for me.\n    ",
        "votes": 37,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 509,
        "fecha": { "$date" : "2017-05-23T10:31:37Z" },
        "decripcion": "\nHere's my edit to this excellent answer - with added ability to parse query strings with keys without values.\n\nvar url = 'http://sb.com/reg/step1?param';\nvar qs = (function(a) {\n    if (a == \"\") return {};\n    var b = {};\n    for (var i = 0; i < a.length; ++i) {\n        var p=a[i].split('=', 2);\n        if (p[1]) p[1] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n        b[p[0]] = p[1];\n    }\n    return b;\n})((url.split('?'))[1].split('&'));\n\n\nIMPORTANT! The parameter for that function in the last line is different. It's just an example of how one can pass an arbitrary URL to it. You can use last line from Bruno's answer to parse the current URL.\n\nSo what exactly changed? With url http://sb.com/reg/step1?param= results will be same. But with url http://sb.com/reg/step1?param Bruno's solution returns an object without keys, while mine returns an object with key param and undefined value.\n    ",
        "votes": 37,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 510,
        "fecha": { "$date" : "2016-07-24T14:01:09Z" },
        "decripcion": "\nI needed an object from the query string, and I hate lots of code. It may not be the most robust in the universe, but it's just a few lines of code.\n\nvar q = {};\nlocation.href.split('?')[1].split('&').forEach(function(i){\n    q[i.split('=')[0]]=i.split('=')[1];\n});\n\n\nA URL like this.htm?hello=world&foo=bar will create:\n\n{hello:'world', foo:'bar'}\n\n    ",
        "votes": 34,
        "comentarios": [
            {
                "decripcion": "Neat. According to Mozilla, though, forEach doesn't work on IE7 or 8 and I suspect that'll fall over if there's no query string at all. One minimal improvement that would cover more cases would be to decodeURIComponent the value as you store it - and arguably the key as well, but you're less likely to use odd strings in that.",
                "fecha": { "$date" : "2013-02-15T10:39:03Z" },
                "usuario": "Rup",
                "usuario_id": 778
            },
            {
                "decripcion": "Nice and simple. Doesn't handle array parameters nor ?a&b&c but this is really very readable (and incidentally similar to my first idea). Also the split is redundant but I've got bigger performance fish to fry than splitting a 10 character string twice.",
                "fecha": { "$date" : "2014-02-25T22:44:46Z" },
                "usuario": "cod3monk3y",
                "usuario_id": 779
            },
            {
                "decripcion": "when querystring is \"?hello=world&one=a=b&two=2\" then when you grab the value of 'one' you only get the part before the first '=' in the value. its value shud be 'a=b' but you only get 'a' because you split 'one=a=b' on '='. this is simply buggy. :((",
                "fecha": { "$date" : "2015-05-19T21:30:29Z" },
                "usuario": "Shawn Kovac",
                "usuario_id": 780
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 511,
        "fecha": { "$date" : "2017-07-27T13:37:45Z" },
        "decripcion": "\nHere's an extended version of Andy E's linked \"Handle array-style query strings\"-version. Fixed a bug (?key=1&key[]=2&key[]=3; 1 is lost and replaced with [2,3]), made a few minor performance improvements (re-decoding of values, recalculating \"[\" position, etc.) and added a number of improvements (functionalized, support for ?key=1&key=2, support for ; delimiters). I left the variables annoyingly short, but added comments galore to make them readable (oh, and I reused v within the local functions, sorry if that is confusing ;).\n\nIt will handle the following querystring...\n\n\n  ?test=Hello&person=neek&person[]=jeff&person[]=jim&person[extra]=john&test3&nocache=1398914891264\n\n\n...making it into an object that looks like...\n\n{\n    \"test\": \"Hello\",\n    \"person\": {\n        \"0\": \"neek\",\n        \"1\": \"jeff\",\n        \"2\": \"jim\",\n        \"length\": 3,\n        \"extra\": \"john\"\n    },\n    \"test3\": \"\",\n    \"nocache\": \"1398914891264\"\n}\n\n\nAs you can see above, this version handles some measure of \"malformed\" arrays, i.e. - person=neek&person[]=jeff&person[]=jim or person=neek&person=jeff&person=jim as the key is identifiable and valid (at least in dotNet's NameValueCollection.Add):\n\n\n  If the specified key already exists in the target NameValueCollection\n  instance, the specified value is added to the existing comma-separated\n  list of values in the form \"value1,value2,value3\".\n\n\nIt seems the jury is somewhat out on repeated keys as there is no spec. In this case, multiple keys are stored as an (fake)array. But do note that I do not process values based on commas into arrays.\n\nThe code:\n\ngetQueryStringKey = function(key) {\n    return getQueryStringAsObject()[key];\n};\n\n\ngetQueryStringAsObject = function() {\n    var b, cv, e, k, ma, sk, v, r = {},\n        d = function (v) { return decodeURIComponent(v).replace(/\\+/g, \" \"); }, //# d(ecode) the v(alue)\n        q = window.location.search.substring(1), //# suggested: q = decodeURIComponent(window.location.search.substring(1)),\n        s = /([^&;=]+)=?([^&;]*)/g //# original regex that does not allow for ; as a delimiter:   /([^&=]+)=?([^&]*)/g\n    ;\n\n    //# ma(make array) out of the v(alue)\n    ma = function(v) {\n        //# If the passed v(alue) hasn't been setup as an object\n        if (typeof v != \"object\") {\n            //# Grab the cv(current value) then setup the v(alue) as an object\n            cv = v;\n            v = {};\n            v.length = 0;\n\n            //# If there was a cv(current value), .push it into the new v(alue)'s array\n            //#     NOTE: This may or may not be 100% logical to do... but it's better than loosing the original value\n            if (cv) { Array.prototype.push.call(v, cv); }\n        }\n        return v;\n    };\n\n    //# While we still have key-value e(ntries) from the q(uerystring) via the s(earch regex)...\n    while (e = s.exec(q)) { //# while((e = s.exec(q)) !== null) {\n        //# Collect the open b(racket) location (if any) then set the d(ecoded) v(alue) from the above split key-value e(ntry) \n        b = e[1].indexOf(\"[\");\n        v = d(e[2]);\n\n        //# As long as this is NOT a hash[]-style key-value e(ntry)\n        if (b < 0) { //# b == \"-1\"\n            //# d(ecode) the simple k(ey)\n            k = d(e[1]);\n\n            //# If the k(ey) already exists\n            if (r[k]) {\n                //# ma(make array) out of the k(ey) then .push the v(alue) into the k(ey)'s array in the r(eturn value)\n                r[k] = ma(r[k]);\n                Array.prototype.push.call(r[k], v);\n            }\n            //# Else this is a new k(ey), so just add the k(ey)/v(alue) into the r(eturn value)\n            else {\n                r[k] = v;\n            }\n        }\n        //# Else we've got ourselves a hash[]-style key-value e(ntry) \n        else {\n            //# Collect the d(ecoded) k(ey) and the d(ecoded) sk(sub-key) based on the b(racket) locations\n            k = d(e[1].slice(0, b));\n            sk = d(e[1].slice(b + 1, e[1].indexOf(\"]\", b)));\n\n            //# ma(make array) out of the k(ey) \n            r[k] = ma(r[k]);\n\n            //# If we have a sk(sub-key), plug the v(alue) into it\n            if (sk) { r[k][sk] = v; }\n            //# Else .push the v(alue) into the k(ey)'s array\n            else { Array.prototype.push.call(r[k], v); }\n        }\n    }\n\n    //# Return the r(eturn value)\n    return r;\n};\n\n    ",
        "votes": 34,
        "comentarios": [
            {
                "decripcion": "For getting the query string values you can use this \"GetParameterValues\" function. In this you just have to pass the query stirng parameter name and it'll return you the value   $(document).ready(function () { \tvar bid = GetParameterValues('token'); });  function GetParameterValues(param) {     var url = decodeURIComponent(window.location.href);     url = url.slice(url.indexOf('?') + 1).split('&');     for (var i = 0; i < url.length; i++) {         var urlparam = url[i].split('=');         if (urlparam[0] == param) {             return urlparam[1];         } }",
                "fecha": { "$date" : "2015-02-03T10:10:05Z" },
                "usuario": "Mike Clark",
                "usuario_id": 781
            },
            {
                "decripcion": "I've been using this for a while now, and it's been great so far. Except for handling urlencoded arrays.   Using q = decodeURIComponent(window.location.search.substring(1)), helps it do that too.",
                "fecha": { "$date" : "2017-07-27T08:36:46Z" },
                "usuario": "Vladislav Dimitrov",
                "usuario_id": 782
            },
            {
                "decripcion": "for me this went on an endless loop if there were no query params :(",
                "fecha": { "$date" : "2020-12-16T21:13:17Z" },
                "usuario": "kofifus",
                "usuario_id": 783
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 512,
        "fecha": { "$date" : "2015-11-04T09:00:25Z" },
        "decripcion": "\nThis is a function I created a while back and I'm quite happy with. It is not case sensitive - which is handy. Also, if the requested QS doesn't exist, it just returns an empty string.\n\nI use a compressed version of this. I'm posting uncompressed for the novice types to better explain what's going on.\n\nI'm sure this could be optimized or done differently to work faster, but it's always worked great for what I need.\n\nEnjoy.\n\nfunction getQSP(sName, sURL) {\n    var theItmToRtn = \"\";\n    var theSrchStrg = location.search;\n    if (sURL) theSrchStrg = sURL;\n    var sOrig = theSrchStrg;\n    theSrchStrg = theSrchStrg.toUpperCase();\n    sName = sName.toUpperCase();\n    theSrchStrg = theSrchStrg.replace(\"?\", \"&\") theSrchStrg = theSrchStrg + \"&\";\n    var theSrchToken = \"&\" + sName + \"=\";\n    if (theSrchStrg.indexOf(theSrchToken) != -1) {\n        var theSrchTokenLth = theSrchToken.length;\n        var theSrchTokenLocStart = theSrchStrg.indexOf(theSrchToken) + theSrchTokenLth;\n        var theLocOfNextAndSign = theSrchStrg.indexOf(\"&\", theSrchTokenLocStart);\n        theItmToRtn = unescape(sOrig.substring(theSrchTokenLocStart, theLocOfNextAndSign));\n    }\n    return unescape(theItmToRtn);\n}\n\n    ",
        "votes": 32,
        "comentarios": [
            {
                "decripcion": "Also, better to go for decodeURI() or decodeURIComponent() instead of unescape().  developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/\u2026",
                "fecha": { "$date" : "2015-11-07T13:27:52Z" },
                "usuario": "Adarsh Konchady",
                "usuario_id": 784
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 513,
        "fecha": { "$date" : "2013-09-30T17:37:08Z" },
        "decripcion": "\nWe've just released arg.js, a project aimed at solving this problem once and for all.  It's traditionally been so difficult but now you can do:\n\nvar name = Arg.get(\"name\");\n\n\nor getting the whole lot:\n\nvar params = Arg.all();\n\n\nand if you care about the difference between ?query=true and #hash=true then you can use the Arg.query() and Arg.hash() methods.\n    ",
        "votes": 27,
        "comentarios": [
            {
                "decripcion": "you saved me man.. arg.js is the solution none of the solutions is getting the values from # in IE 8..:(  any one searching for IE8 # get from request this is the solution..",
                "fecha": { "$date" : "2014-02-04T10:12:49Z" },
                "usuario": "Dilip Rajkumar",
                "usuario_id": 785
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 514,
        "fecha": { "$date" : "2016-07-24T14:04:08Z" },
        "decripcion": "\nThe problem with the top answer on that question is that it's not-supported parameters placed after #, but sometimes it's needed to get this value also.\n\nI modified the answer to let it parse a full query string with a hash sign also:\n\nvar getQueryStringData = function(name) {\n    var result = null;\n    var regexS = \"[\\\\?&#]\" + name + \"=([^&#]*)\";\n    var regex = new RegExp(regexS);\n    var results = regex.exec('?' + window.location.href.split('?')[1]);\n    if (results != null) {\n        result = decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n    }\n    return result;\n};\n\n    ",
        "votes": 27,
        "comentarios": [
            {
                "decripcion": "That's interesting if you need it but there's no standard for the format of the hash part AFAIK so it's not fair to call that out as a weakness of the other answer.",
                "fecha": { "$date" : "2013-04-22T12:48:54Z" },
                "usuario": "Rup",
                "usuario_id": 778
            },
            {
                "decripcion": "Yes, I know. But in my app i integrate 3rd party js navigation, which have some parameters after hash sign.",
                "fecha": { "$date" : "2013-04-22T14:15:30Z" },
                "usuario": "Ph0en1x",
                "usuario_id": 786
            },
            {
                "decripcion": "For example, in the Google search page, the searching query is followed by the hash sign '#'.",
                "fecha": { "$date" : "2014-06-26T14:51:20Z" },
                "usuario": "etlds",
                "usuario_id": 787
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 515,
        "fecha": { "$date" : "2019-01-01T20:41:58Z" },
        "decripcion": "\nIf you are using Browserify, you can use the url module from Node.js:\n\nvar url = require('url');\n\nurl.parse('http://example.com/?bob=123', true).query;\n\n// returns { \"bob\": \"123\" }\n\n\nFurther reading: URL Node.js v0.12.2 Manual & Documentation\n\nEDIT: You can use URL interface, its quite widely adopted in almost all the new browser and if the code is going to run on an old browser you can use a polyfill like this one. Here's a code example on how to use URL interface to get query parameters (aka search parameters)\n\nconst url = new URL('http://example.com/?bob=123');\nurl.searchParams.get('bob'); \n\n\nYou can also use URLSearchParams for it, here's an example from MDN to do it with URLSearchParams:\n\nvar paramsString = \"q=URLUtils.searchParams&topic=api\";\nvar searchParams = new URLSearchParams(paramsString);\n\n//Iterate the search parameters.\nfor (let p of searchParams) {\n  console.log(p);\n}\n\nsearchParams.has(\"topic\") === true; // true\nsearchParams.get(\"topic\") === \"api\"; // true\nsearchParams.getAll(\"topic\"); // [\"api\"]\nsearchParams.get(\"foo\") === null; // true\nsearchParams.append(\"topic\", \"webdev\");\nsearchParams.toString(); // \"q=URLUtils.searchParams&topic=api&topic=webdev\"\nsearchParams.set(\"topic\", \"More webdev\");\nsearchParams.toString(); // \"q=URLUtils.searchParams&topic=More+webdev\"\nsearchParams.delete(\"topic\");\nsearchParams.toString(); // \"q=URLUtils.searchParams\"\n\n    ",
        "votes": 27,
        "comentarios": [
            {
                "decripcion": "The documentation for the url module's API is here: nodejs.org/api/url.html",
                "fecha": { "$date" : "2014-09-12T18:23:10Z" },
                "usuario": "andrezsanchez",
                "usuario_id": 788
            },
            {
                "decripcion": "This is nice for nw.js development. Browserify isn't even needed as most node modules work as is in a nw.js window. I've tested this code and works like a charm without any modification.",
                "fecha": { "$date" : "2015-07-13T23:22:18Z" },
                "usuario": "Andrew Grothe",
                "usuario_id": 789
            },
            {
                "decripcion": "OHH this is awesome! URLSearchParams works perfect. Many thanks!",
                "fecha": { "$date" : "2019-07-17T09:27:22Z" },
                "usuario": "Baran Emre",
                "usuario_id": 790
            },
            {
                "decripcion": "should probably be the best voted, no hassle with custom functions and additional libraries. It also seems to be mostly adopted by the browsers 2019.",
                "fecha": { "$date" : "2019-09-29T21:46:53Z" },
                "usuario": "TheWhiteLlama",
                "usuario_id": 791
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 516,
        "fecha": { "$date" : "2013-12-16T07:56:34Z" },
        "decripcion": "\nfunction GetQueryStringParams(sParam)\n{\n    var sPageURL = window.location.search.substring(1);\n    var sURLVariables = sPageURL.split('&');\n\n    for (var i = 0; i < sURLVariables.length; i++)\n    {\n        var sParameterName = sURLVariables[i].split('=');\n        if (sParameterName[0] == sParam)\n        {\n            return sParameterName[1];\n        }\n    }\n}\u200b\n\n\nAnd this is how you can use this function assuming the URL is\n\n\n  http://dummy.com/?stringtext=jquery&stringword=jquerybyexample\n\n\nvar tech = GetQueryStringParams('stringtext');\nvar blog = GetQueryStringParams('stringword');\n\n    ",
        "votes": 25,
        "comentarios": [
            {
                "decripcion": "There's a few implementations of this approach here already. At the very least you need to decodeUriComponent() the result values. This might also misbehave if you don't specify a value, e.g. ?stringtext&stringword=foo.",
                "fecha": { "$date" : "2013-02-06T10:52:34Z" },
                "usuario": "Rup",
                "usuario_id": 778
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 517,
        "fecha": { "$date" : "2017-05-23T12:10:26Z" },
        "decripcion": "\nThe deferred antipattern (now explicit-construction anti-pattern) coined by Esailija is a common anti-pattern people who are new to promises make, I've made it myself when I first used promises. The problem with the above code is that is fails to utilize the fact that promises chain.\n\nPromises can chain with .then and you can return promises directly. Your code in getStuffDone can be rewritten as:\n\nfunction getStuffDone(param){\n    return myPromiseFn(param+1); // much nicer, right?\n}\n\n\nPromises are all about making asynchronous code more readable and behave like synchronous code without hiding that fact. Promises represent an abstraction over a value of one time operation, they abstract the notion of a statement or expression in a programming language.\n\nYou should only use deferred objects when you are converting an API to promises and can't do it automatically, or when you're writing aggregation functions that are easier expressed this way. \n\nQuoting Esailija:\n\n\n  This is the most common anti-pattern. It is easy to fall into this when you don't really understand promises and think of them as glorified event emitters or callback utility. Let's recap: promises are about making asynchronous code retain most of the lost properties of synchronous code such as flat indentation and one exception channel.\n\n    ",
        "votes": 396,
        "comentarios": [
            {
                "decripcion": "@BenjaminGruenbaum: I'm confident in my use of deferreds for this, so no need for a new question. I just thought it was a use-case you were missing from your answer. What I'm doing seems more like the opposite of aggregation, doesn't it?",
                "fecha": { "$date" : "2014-09-25T19:43:31Z" },
                "usuario": "mhelvens",
                "usuario_id": 796
            },
            {
                "decripcion": "@mhelvens If you're manually splitting a non-callback API into a promise API that fits the \"converting a callback API to promises\" part. The antipattern is about wrapping a promise in another promise for no good reason, you're not wrapping a promise to begin with so it doesn't apply here.",
                "fecha": { "$date" : "2014-09-25T19:47:10Z" },
                "usuario": "Benjamin Gruenbaum",
                "usuario_id": 489
            },
            {
                "decripcion": "@BenjaminGruenbaum: Ah, I though deferreds themselves were considered an anti-pattern, what with bluebird deprecating them, and you mentioning \"converting an API to promises\" (which is also a case of not wrapping a promise to begin with).",
                "fecha": { "$date" : "2014-09-25T20:05:15Z" },
                "usuario": "mhelvens",
                "usuario_id": 796
            },
            {
                "decripcion": "@mhelvens I guess the excess deferred anti pattern would be more accurate for what it actually does. Bluebird deprecated the .defer() api into the newer (and throw safe) promise constructor, it did not (in no way) deprecate the notion of constructing promises :)",
                "fecha": { "$date" : "2014-09-25T20:06:44Z" },
                "usuario": "Benjamin Gruenbaum",
                "usuario_id": 489
            },
            {
                "decripcion": "Thank you @Roamer-1888 your reference helped me finally figuring out what was my issue. Looks like I was creating nested (unreturned) promises without realising it.",
                "fecha": { "$date" : "2017-05-30T01:21:12Z" },
                "usuario": "ghuroo",
                "usuario_id": 797
            }
        ],
        "usuario": "Benjamin Gruenbaum",
        "usuario_id": 489
    },
    {
        "_id": 518,
        "fecha": { "$date" : "2017-05-23T12:10:26Z" },
        "decripcion": "\nWhat's wrong with it?\n\n\n  But the pattern works!\n\n\nLucky you. Unfortunately, it probably doesn't, as you likely forgot some edge case. In more than half of the occurrences I've seen, the author has forgotten to take care of the error handler:\n\nreturn new Promise(function(resolve) {\n    getOtherPromise().then(function(result) {\n        resolve(result.property.example);\n    });\n})\n\n\nIf the other promise is rejected, this will happen unnoticed instead of being propagated to the new promise (where it would get handled) - and the new promise stays forever pending, which can induce leaks.\n\nThe same thing happens in the case that your callback code causes an error - e.g. when result doesn't have a property and an exception is thrown. That would go unhandled and leave the new promise unresolved. \n\nIn contrast, using .then() does automatically take care of both these scenarios, and rejects the new promise when an error happens:\n\n return getOtherPromise().then(function(result) {\n     return result.property.example;\n })\n\n\nThe deferred antipattern is not only cumbersome, but also error-prone. Using .then() for chaining is much safer.\n\n\n  But I've handled everything!\n\n\nReally? Good. However, this will be pretty detailed and copious, especially if you use a promise library that supports other features like cancellation or message passing. Or maybe it will in the future, or you want to swap your library against a better one? You won't want to rewrite your code for that.\n\nThe libraries' methods (then) do not only natively support all the features, they also might have certain optimisations in place. Using them will likely make your code faster, or at least allow to be optimised by future revisions of the library.\n\nHow do I avoid it?\n\nSo whenever you find yourself manually creating a Promise or Deferred and already existing promises are involved, check the library API first. The Deferred antipattern is often applied by people who see promises [only] as an observer pattern - but promises are more than callbacks: they are supposed to be composable. Every decent library has lots of easy-to-use functions for the composition of promises in every thinkable manner, taking care of all the low-level stuff you don't want to deal with.\n\nIf you have found a need to compose some promises in a new way that is not supported by an existing helper function, writing your own function with unavoidable Deferreds should be your last option. Consider switching to a more featureful library, and/or file a bug against your current library. Its maintainer should be able to derive the composition from existing functions, implement a new helper function for you and/or help to identify the edge cases that need to be handled.\n    ",
        "votes": 147,
        "comentarios": [
            {
                "decripcion": "Are there examples , other than a function including setTimeout , where constructor could be used but not be considered \"Promise constructor anitpattern\" ?",
                "fecha": { "$date" : "2015-11-23T21:39:08Z" },
                "usuario": "guest271314",
                "usuario_id": 571
            },
            {
                "decripcion": "@guest271314: Everything asynchronous that doesn't return a promise. Though often enough you get better results with the libraries' dedicated promisification helpers. And make sure to always promisify at the lowest level, so it's not \"a function including setTimeout\", but \"the function setTimeout itself\".",
                "fecha": { "$date" : "2015-11-23T22:13:26Z" },
                "usuario": "Bergi",
                "usuario_id": 662
            },
            {
                "decripcion": "@guest271314 A function that just includes a call to setTimeout is clearly different from the function setTimeout itself, isn't it?",
                "fecha": { "$date" : "2015-11-23T22:21:29Z" },
                "usuario": "Bergi",
                "usuario_id": 662
            },
            {
                "decripcion": "Perhaps not aware of clear difference , here.  function () {setTimeout(dostuff, duration)} ,  setTimeout(dostuff, duration) ? Can describe context difference between two , if above two variations are , or are not , accurate representation of \" call to setTimeout is clearly different from the function setTimeout\" ?",
                "fecha": { "$date" : "2015-11-23T22:26:32Z" },
                "usuario": "guest271314",
                "usuario_id": 571
            },
            {
                "decripcion": "I think one of the important lessons here, one that has not been clearly stated so far, is that a Promise and its chained 'then' represents one asynchronous operation: the initial operation is in the Promise constructor and the eventual endpoint is in the 'then' function. So if you have a sync operation followed by an asynch operation, put the sync stuff in the Promise. If you have an async operation followed by a sync, put the sync stuff in the 'then'. In the first case, return the original Promise. In the second case, return the Promise/then chain (which is also a Promise).",
                "fecha": { "$date" : "2019-08-27T00:44:18Z" },
                "usuario": "David Spector",
                "usuario_id": 798
            }
        ],
        "usuario": "Bergi",
        "usuario_id": 662
    },
    {
        "_id": 519,
        "fecha": { "$date" : "2021-06-21T17:04:24Z" },
        "decripcion": "\nNow 7 years later there is a simpler answer to this question:\nHow do I avoid the explicit constructor antipattern?\nUse async functions, then await every Promise!\nInstead of manually constructing nested Promise chains such as this one:\nfunction promised() {\n  return new Promise(function(resolve) {\n    getOtherPromise().then(function(result) {\n      getAnotherPromise(result).then(function(result2) {\n        resolve(result2);\n      });\n    });\n  });\n}\n\njust turn your function async and use the await keyword to stop execution of the function until the Promise resolves:\nasync function promised() {\n   const result =  await getOtherPromise();\n   const result2 = await getAnotherPromise(result);\n   return result2;\n}\n\nThis has various benefits:\n\nCalling the async function always returns a Promise, which resolves with the returned value and rejects if an error get's thrown inside the async function\nIf an awaited Promise rejects, the error get's thrown inside the async function, so you can just try { ... } catch(error) { ... } it like the synchronous errors.\nYou can await inside loops and if branches, making most of the Promise chain logic trivial\nAlthough async functions behave mostly like chains of Promises, they are way easier to read (and easier to reason about)\n\nHow can I await a callback?\nIf the callback only calls back once, and the API you are calling does not provide a Promise already (most of them do!) this is the only reason to use a Promise constructor:\n // Create a wrapper around the \"old\" function taking a callback, passing the 'resolve' function as callback\n const delay = time => new Promise((resolve, reject) =>\n   setTimeout(resolve, time)\n ); \n\n await delay(1000);\n\nIf await stops execution, does calling an async function return the result directly?\nNo. If you call an async function, a Promise gets always returned. You can then await that Promise too inside an async function. You cannot wait for the result inside of a synchronous function (you would have to call .then and attach a callback).\nConceptually, synchronous functions always run to completion in one job, while async functions run synchronously till they reach an await, then they continue in another job.\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "The whole point of using an async function is so you don't stop execution....",
                "fecha": { "$date" : "2021-06-21T14:47:46Z" },
                "usuario": "john ktejik",
                "usuario_id": 799
            },
            {
                "decripcion": "@john there is a huge difference between \"stops execution of the async function\" and \"stops execution\".",
                "fecha": { "$date" : "2021-06-21T16:16:14Z" },
                "usuario": "Jonas Wilms",
                "usuario_id": 800
            }
        ],
        "usuario": "Jonas Wilms",
        "usuario_id": 800
    },
    {
        "_id": 520,
        "fecha": { "$date" : "2020-09-20T08:54:40Z" },
        "decripcion": "\nThere are two ways to access properties of an object:\n\nDot notation: something.bar\nBracket notation: something['bar']\n\nThe value between the brackets can be any expression. Therefore, if the property name is stored in a variable, you have to use bracket notation:\n\n\nvar something = {\n  bar: 'foo'\n};\nvar foo = 'bar';\n\n// both x = something[foo] and something[foo] = x work as expected\nconsole.log(something[foo]);\nconsole.log(something.bar)\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 1137,
        "comentarios": [
            {
                "decripcion": "careful with this: javascript compilers will error here since they dont rename strings but they do rename object properties",
                "fecha": { "$date" : "2011-12-06T08:40:12Z" },
                "usuario": "chacham15",
                "usuario_id": 803
            },
            {
                "decripcion": "Some more info on why this is possible: JS objects are associative arrays, that's why. Further Reading: quirksmode.org/js/associative.html stackoverflow.com/questions/14031368/\u2026",
                "fecha": { "$date" : "2014-06-03T09:00:03Z" },
                "usuario": "Sudhanshu Mishra",
                "usuario_id": 804
            },
            {
                "decripcion": "@dotnetguy No they are not. Arrays are objects that inherit from the plain JS object prototype and therefore you can add properties a go-go like any plain object. The 'associative' behaviour is more object-like than array like. You can't iterate the 'associative' version by simple index so it is not displaying array-like behaviour. You can define your 'associative' array as {} or [] and treat it the same in either case as far as random property access is concerned.",
                "fecha": { "$date" : "2017-01-03T16:01:11Z" },
                "usuario": "Vanquished Wombat",
                "usuario_id": 805
            },
            {
                "decripcion": "@VanquishedWombat Not sure what your objection pertains to? I did not say that JS Objects are arrays?",
                "fecha": { "$date" : "2017-01-06T00:30:23Z" },
                "usuario": "Sudhanshu Mishra",
                "usuario_id": 804
            },
            {
                "decripcion": "as a reference to the correct answer , Reference",
                "fecha": { "$date" : "2017-06-08T21:23:10Z" },
                "usuario": "youhana",
                "usuario_id": 806
            }
        ],
        "usuario": "Jan Han\u010di\u010d",
        "usuario_id": 807
    },
    {
        "_id": 521,
        "fecha": { "$date" : "2017-09-23T14:45:00Z" },
        "decripcion": "\nThis is my solution:\n\nfunction resolve(path, obj) {\n    return path.split('.').reduce(function(prev, curr) {\n        return prev ? prev[curr] : null\n    }, obj || self)\n}\n\n\nUsage examples:\n\nresolve(\"document.body.style.width\")\n// or\nresolve(\"style.width\", document.body)\n// or even use array indexes\n// (someObject has been defined in the question)\nresolve(\"part.0.size\", someObject) \n// returns null when intermediate properties are not defined:\nresolve('properties.that.do.not.exist', {hello:'world'})\n\n    ",
        "votes": 149,
        "comentarios": [
            {
                "decripcion": "Excellent answer, see also: stackoverflow.com/questions/37510640/\u2026",
                "fecha": { "$date" : "2019-01-03T13:45:20Z" },
                "usuario": "Julian Knight",
                "usuario_id": 808
            },
            {
                "decripcion": "You inspired me to create an enhanced version that allows bracket notation & property names with spaces as well as validating the inputs: it.knightnet.org.uk/kb/node-js/get-properties",
                "fecha": { "$date" : "2019-01-03T14:04:56Z" },
                "usuario": "Julian Knight",
                "usuario_id": 808
            },
            {
                "decripcion": "I love this solution. However I'm trying to modify the values in the original object, it seems your function returns a sub copy of the object. Is it possible to change it so that modifying the returned object modifies the original ?",
                "fecha": { "$date" : "2020-02-28T17:39:57Z" },
                "usuario": "Eagle1",
                "usuario_id": 809
            },
            {
                "decripcion": "I'd also like to see the \"set value\" version of this.",
                "fecha": { "$date" : "2020-08-21T21:05:41Z" },
                "usuario": "GaryO",
                "usuario_id": 810
            }
        ],
        "usuario": "abahet",
        "usuario_id": 811
    },
    {
        "_id": 522,
        "fecha": { "$date" : "2014-07-01T15:40:39Z" },
        "decripcion": "\nIn javascript we can access with:\n\n\ndot notation     - foo.bar \nsquare brackets  - foo[someVar] or foo[\"string\"]\n\n\nBut only second case allows to access properties dynamically:\n\nvar foo = { pName1 : 1, pName2 : [1, {foo : bar }, 3] , ...}\n\nvar name = \"pName\"\nvar num  = 1;\n\nfoo[name + num]; // 1\n\n// -- \n\nvar a = 2;\nvar b = 1;\nvar c = \"foo\";\n\nfoo[name + a][b][c]; // bar\n\n    ",
        "votes": 51,
        "comentarios": [
            {
                "decripcion": "I'm staring at 2,000 lines of if statements because the previous dev didn't use square brackets, and statically accessed object properties by dot notation. It's for an approval process app that has 7 different approvers and the steps are all the same. /rip",
                "fecha": { "$date" : "2018-06-07T14:28:20Z" },
                "usuario": "Chad",
                "usuario_id": 812
            }
        ],
        "usuario": "Sonique",
        "usuario_id": 813
    },
    {
        "_id": 523,
        "fecha": { "$date" : "2017-07-10T06:11:49Z" },
        "decripcion": "\nFollowing is an ES6 example of how you can access the property of an object using a property name that has been dynamically generated by concatenating two strings. \n\nvar suffix = \" name\";\n\nvar person = {\n    [\"first\" + suffix]: \"Nicholas\",\n    [\"last\" + suffix]: \"Zakas\"\n};\n\nconsole.log(person[\"first name\"]);      // \"Nicholas\"\nconsole.log(person[\"last name\"]);       // \"Zakas\"\n\n\nThis is called computed property names\n    ",
        "votes": 34,
        "comentarios": [],
        "usuario": "zloctb",
        "usuario_id": 551
    },
    {
        "_id": 524,
        "fecha": { "$date" : "2017-12-13T08:06:23Z" },
        "decripcion": "\nYou can achieve this in quite a few different ways.\n\nlet foo = {\n    bar: 'Hello World'\n};\n\nfoo.bar;\nfoo['bar'];\n\n\nThe bracket notation is specially powerful as it let's you access a property based on a variable:\n\nlet foo = {\n    bar: 'Hello World'\n};\n\nlet prop = 'bar';\n\nfoo[prop];\n\n\nThis can be extended to looping over every property of an object. This can be seem redundant due to newer JavaScript constructs such as for ... of ..., but helps illustrate a use case:\n\nlet foo = {\n    bar: 'Hello World',\n    baz: 'How are you doing?',\n    last: 'Quite alright'\n};\n\nfor (let prop in foo.getOwnPropertyNames()) {\n    console.log(foo[prop]);\n}\n\n\nBoth dot and bracket notation also work as expected for nested objects:\n\nlet foo = {\n    bar: {\n        baz: 'Hello World'\n    }\n};\n\nfoo.bar.baz;\nfoo['bar']['baz'];\nfoo.bar['baz'];\nfoo['bar'].baz;\n\n\nObject destructuring\n\nWe could also consider object destructuring as a means to access a property in an object, but as follows:\n\nlet foo = {\n    bar: 'Hello World',\n    baz: 'How are you doing?',\n    last: 'Quite alright'\n};\n\nlet prop = 'last';\nlet { bar, baz, [prop]: customName } = foo;\n\n// bar = 'Hello World'\n// baz = 'How are you doing?'\n// customName = 'Quite alright'\n\n    ",
        "votes": 20,
        "comentarios": [],
        "usuario": "Gorka Hernandez",
        "usuario_id": 814
    },
    {
        "_id": 525,
        "fecha": { "$date" : "2018-09-06T15:57:26Z" },
        "decripcion": "\nYou can do it like this using Lodash get\n\n_.get(object, 'a[0].b.c');\n\n    ",
        "votes": 14,
        "comentarios": [
            {
                "decripcion": "There are many situations, such as deep nested object lookups, where this is the only option.",
                "fecha": { "$date" : "2019-06-27T19:51:57Z" },
                "usuario": "Jonathan Kempf",
                "usuario_id": 815
            },
            {
                "decripcion": "Not enough jQuery.",
                "fecha": { "$date" : "2021-04-07T07:18:13Z" },
                "usuario": "user3840170",
                "usuario_id": 816
            }
        ],
        "usuario": "shalonteoh",
        "usuario_id": 817
    },
    {
        "_id": 526,
        "fecha": { "$date" : "2021-06-16T16:05:59Z" },
        "decripcion": "\nUPDATED\nAccessing root properties in an object is easily achieved with obj[variable], but getting nested complicates things. Not to write already written code I suggest to use lodash.get.\nExample\n// Accessing root property\nvar rootProp = 'rootPropert';\n_.get(object, rootProp, defaultValue);\n\n// Accessing nested property\nvar listOfNestedProperties = [var1, var2];\n_.get(object, listOfNestedProperties);\n\nLodash get can be used in different ways, the documentation lodash.get\n    ",
        "votes": 10,
        "comentarios": [
            {
                "decripcion": "It's best to avoid using eval whenever possible. stackoverflow.com/questions/86513/\u2026",
                "fecha": { "$date" : "2015-06-23T18:07:53Z" },
                "usuario": "Luke",
                "usuario_id": 818
            },
            {
                "decripcion": "Using eval for something as trivial as accessing properties is plain overkill and hardly advisable under any circumstance. What's \"trouble\"? obj['nested']['test'] works very well and doesn't require you to embed code in strings.",
                "fecha": { "$date" : "2015-10-23T10:14:34Z" },
                "usuario": "Kyll",
                "usuario_id": 819
            },
            {
                "decripcion": "eval is three times slower or more, I wouldn't recommend this to newbies because it might teach them bad habits. I use obj['nested']['value'] - remember kids, eval is evil!",
                "fecha": { "$date" : "2015-11-26T01:25:45Z" },
                "usuario": "jaggedsoft",
                "usuario_id": 820
            },
            {
                "decripcion": "@Luke He's now the only want to bring Lodash _.get to the table. I think this answer deserves now upvotes instead of downvotes. It may be overkill, but it's good to know it exists.",
                "fecha": { "$date" : "2016-12-20T21:42:15Z" },
                "usuario": "Emile Bergeron",
                "usuario_id": 821
            },
            {
                "decripcion": "Thank you for introducing lodash for this. I came here by google looking for a method to set a value deep in an object, and used their _.set method (which is identical to above but with the extra arguement for the value to set).",
                "fecha": { "$date" : "2018-07-03T09:03:54Z" },
                "usuario": "TPHughes",
                "usuario_id": 822
            }
        ],
        "usuario": "Mr Br",
        "usuario_id": 823
    },
    {
        "_id": 527,
        "fecha": { "$date" : "2020-02-25T19:19:27Z" },
        "decripcion": "\nI came across a case where I thought I wanted to pass the \"address\" of an object property as data to another function and populate the object (with AJAX), do lookup from address array, and display in that other function. I couldn't use dot notation without doing string acrobatics so I thought an array might be nice to pass instead. I ended-up doing something different anyway, but seemed related to this post.\n\nHere's a sample of a language file object like the one I wanted data from:\n\nconst locs = {\n  \"audioPlayer\": {\n    \"controls\": {\n      \"start\": \"start\",\n      \"stop\": \"stop\"\n    },\n    \"heading\": \"Use controls to start and stop audio.\"\n  }\n}\n\n\nI wanted to be able to pass an array such as: [\"audioPlayer\", \"controls\", \"stop\"] to access the language text, \"stop\" in this case.\n\nI created this little function that looks-up the \"least specific\" (first) address parameter, and reassigns the returned object to itself. Then it is ready to look-up the next-most-specific address parameter if one exists.\n\nfunction getText(selectionArray, obj) {\n  selectionArray.forEach(key => {\n    obj = obj[key];\n  });\n  return obj;\n}\n\n\nusage:\n\n/* returns 'stop' */\nconsole.log(getText([\"audioPlayer\", \"controls\", \"stop\"], locs)); \n\n/* returns 'use controls to start and stop audio.' */\nconsole.log(getText([\"audioPlayer\", \"heading\"], locs)); \n\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Luke",
        "usuario_id": 818
    },
    {
        "_id": 528,
        "fecha": { "$date" : "2021-04-07T16:29:37Z" },
        "decripcion": "\nOthers have already mentioned 'dot' and 'square' syntaxes so I want to cover accessing functions and sending parameters in a similar fashion.\nCode jsfiddle\nvar obj = {method:function(p1,p2,p3){console.log(\"method:\",arguments)}}\n\nvar str = \"method('p1', 'p2', 'p3');\"\n\nvar match = str.match(/^\\s*(\\S+)\\((.*)\\);\\s*$/);\n\nvar func = match[1]\nvar parameters = match[2].split(',');\nfor(var i = 0; i < parameters.length; ++i) {\n  // clean up param begninning\n    parameters[i] = parameters[i].replace(/^\\s*['\"]?/,'');\n  // clean up param end\n  parameters[i] = parameters[i].replace(/['\"]?\\s*$/,'');\n}\n\nobj[func](parameters); // sends parameters as array\nobj[func].apply(this, parameters); // sends parameters as individual values\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Jacksonkr",
        "usuario_id": 824
    },
    {
        "_id": 529,
        "fecha": { "$date" : "2019-12-10T08:44:03Z" },
        "decripcion": "\nES5 // Check Deeply Nested Variables\n\nThis simple piece of code can check for deeply nested variable / value existence without having to check each variable along the way... \n\nvar getValue = function( s, context ){\n    return Function.call( context || null, 'return ' + s )();\n}\n\n\nEx. - a deeply nested array of objects:\n\na = [ \n    {\n      b : [\n          {\n             a : 1,\n             b : [\n                 {\n                    c : 1,\n                    d : 2   // we want to check for this\n                 }\n             ]\n           }\n      ]\n    } \n]\n\n\nInstead of :\n\nif(a && a[0] && a[0].b && a[0].b[0] && a[0].b[0].b && a[0].b[0].b[0] && a[0].b[0].b[0].d && a[0].b[0].b[0].d == 2 )  // true\n\n\nWe can now :\n\nif( getValue('a[0].b[0].b[0].d') == 2 ) // true\n\n\nCheers!\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "If the solution is to use eval, you just created a million other problems.",
                "fecha": { "$date" : "2019-12-08T21:27:55Z" },
                "usuario": "Rodrigo Leite",
                "usuario_id": 825
            },
            {
                "decripcion": "@RodrigoLeite ok, so it wouldn't be a problem to give at least one...",
                "fecha": { "$date" : "2019-12-09T13:56:50Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "Here you go :) developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/\u2026!",
                "fecha": { "$date" : "2019-12-10T04:43:41Z" },
                "usuario": "Rodrigo Leite",
                "usuario_id": 825
            },
            {
                "decripcion": "@RodrigoLeite I have read it, and updated the solution to use Function instead",
                "fecha": { "$date" : "2019-12-10T09:35:44Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "The correct approach for this in ECMAScript 2020 is using optional chaining: if(a?.[0]?.b?.[0]?.b?.[0]?.d === 2){ \u2026 }.",
                "fecha": { "$date" : "2020-07-01T14:03:15Z" },
                "usuario": "Sebastian Simon",
                "usuario_id": 573
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 530,
        "fecha": { "$date" : "2020-05-21T15:40:43Z" },
        "decripcion": "\nFor anyone looking to set the value of a nested variable, here is how to do it:\n\nconst _ = require('lodash'); //import lodash module\n\nvar object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.set(object, 'a[0].b.c', 4);\nconsole.log(object.a[0].b.c);\n// => 4\n\n\nDocumentation: https://lodash.com/docs/4.17.15#set\n\nAlso, documentation if you want to get a value: https://lodash.com/docs/4.17.15#get\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "GavinBelson",
        "usuario_id": 826
    },
    {
        "_id": 531,
        "fecha": { "$date" : "2020-01-17T14:18:35Z" },
        "decripcion": "\nI asked a question that kinda duplicated on this topic a while back, and after excessive research, and seeing a lot of information missing that should be here, I feel I have something valuable to add to this older post.\n\n\nFirstly I want to address that there are several ways to obtain the value of a property and store it in a dynamic Variable. The first most popular, and easiest way IMHO would be:\n\n\nlet properyValue = element.style['enter-a-property'];\n\n\nhowever I rarely go this route because it doesn't work on property values assigned via style-sheets. To give you an example, I'll demonstrate with a bit of pseudo code.\n\n let elem = document.getElementById('someDiv');\n let cssProp = elem.style['width'];\n\n\n\nUsing the code example above; if the width property of the div element that was stored in the 'elem' variable was styled in a CSS style-sheet, and not styled inside of its HTML tag, you are without a doubt going to get a return value of undefined stored inside of the cssProp variable. The undefined value occurs because in-order to get the correct value, the code written inside a CSS Style-Sheet needs to be computed in-order to get the value, therefore; you must use a method that will compute the value of the property who's value lies within the style-sheet.\n\n\nHenceforth the getComputedStyle() method!\n\n\nfunction getCssProp(){\n  let ele = document.getElementById(\"test\");\n  let cssProp = window.getComputedStyle(ele,null).getPropertyValue(\"width\");\n}\n\n\n\nW3Schools getComputedValue Doc This gives a good example, and lets you play with it, however, this link Mozilla CSS getComputedValue doc talks about the getComputedValue function in detail, and should be read by any aspiring developer who isn't totally clear on this subject.\n\n\nAs a side note, the getComputedValue method only gets, it does not set. This, obviously is a major downside, however there is a method that gets from CSS style-sheets, as well as sets values, though it is not standard Javascript.\nThe JQuery method... \n\n\n$(selector).css(property,value)\n\n\n...does get, and does set. It is what I use, the only downside is you got to know JQuery, but this is honestly one of the very many good reasons that every Javascript Developer should learn JQuery, it just makes life easy, and offers methods, like this one, which is not available with standard Javascript.\nHope this helps someone!!!\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "J\u039bY-\u00d0\u039eV",
        "usuario_id": 827
    },
    {
        "_id": 532,
        "fecha": { "$date" : "2020-08-28T04:46:56Z" },
        "decripcion": "\nFinding Object by reference without, strings,\nNote make sure the object you pass in is cloned , i use cloneDeep from lodash for that\nif object looks like\nconst obj = {data: ['an Object',{person: {name: {first:'nick', last:'gray'} }]\n\npath looks like\nconst objectPath = ['data',1,'person',name','last']\n\nthen call below method and it will return the sub object by path given\nconst child = findObjectByPath(obj, objectPath)\nalert( child) // alerts \"last\"\n\n\nconst findObjectByPath = (objectIn: any, path: any[]) => {\n    let obj = objectIn\n    for (let i = 0; i <= path.length - 1; i++) {\n        const item = path[i]\n        // keep going up to the next parent\n        obj = obj[item] // this is by reference\n    }\n    return obj\n}\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "nick",
        "usuario_id": 828
    },
    {
        "_id": 533,
        "fecha": { "$date" : "2021-07-18T06:05:39Z" },
        "decripcion": "\nTo access a property dynamically, simply use square brackets [] as follows:\n\n\nconst something = { bar: \"Foobar!\" };\nconst userInput = 'bar';\nconsole.log(something[userInput])\n Run code snippetHide resultsExpand snippet\n\n\nThe problem\nThere's a major gotchya in that solution! (I'm surprised other answers have not brought this up yet). Often you only want to access properties that you've put onto that object yourself, you don't want to grab inherited properties.\nHere's an illustration of this issue. Here we have an innocent-looking program, but it has a subtle bug - can you spot it?\n\n\nconst agesOfUsers = { sam: 16, sally: 22 }\nconst username = prompt('Enter a username:')\nif (agesOfUsers[username] !== undefined) {\n  console.log(`${username} is ${agesOfUsers[username]} years old`)\n} else {\n  console.log(`${username} is not found`)\n}\n Run code snippetHide resultsExpand snippet\n\n\nWhen prompted for a username, if you supply \"toString\" as a username, it'll give you the following message: \"toString is function toString() { [native code] } years old\". The issue is that agesOfUsers is an object, and as such, automatically inherits certain properties like .toString() from the base Object class. You can look here for a full list of properties that all objects inherit.\nSolutions\n\nUse a Map data structure instead. The stored contents of a map don't suffer from prototype issues, so they provide a clean solution to this problem.\n\n\n\nconst agesOfUsers = new Map()\nagesOfUsers.set('sam', 16)\nagesOfUsers.set('sally', 2)\nconsole.log(agesOfUsers.get('sam')) // 16\n\n  \n Run code snippetHide resultsExpand snippet\n\n\n\nUse an object with a null prototype, instead of the default prototype. You can use Object.create(null) to create such an object. This sort of object does not suffer from these prototype issues, because you've explicitly created it in a way that it does not inherit anything.\n\n\n\nconst agesOfUsers = Object.create(null)\nagesOfUsers.sam = 16\nagesOfUsers.sally = 22;\nconsole.log(agesOfUsers['sam']) // 16\nconsole.log(agesOfUsers['toString']) // undefined - toString was not inherited\n\n  \n Run code snippetHide resultsExpand snippet\n\n\n\nIf you dealing with an object who's different possible keys are known in advance (or, it's at least known to not ever contain keys that conflict with inherited keys, like numeric keys), then you can use Object.hasOwn(yourObj, attrName) instead, to check if the specific dynamic key you're accessing is in fact an inherited key or not (learn more here). At the time of writing, this is currently a stage 3 proposal for Javascript that browsers have just started to implement, meaning for best stability you either need to use a polyfill or use the older, more verbose, but otherwise exactly the same solution Object.prototype.hasOwnProperty.call(yourObj, attrName) (which I'll use in the example below). yourObj.hasOwnProperty(attrName) is yet another solution that sometimes works - I won't cover it's pitfalls here, instead, you can learn about it here.\n\n\n\n// Try entering the property name \"toString\",\n// you'll see it gets handled correctly.\nconst user = { name: 'sam', age: 16 }\nconst propName = prompt('Enter a property name:')\nif (Object.prototype.hasOwnProperty.call(user, propName)) {\n  console.log(`${propName} = ${user[propName]}`)\n} else {\n  console.log(`${propName} is not found`)\n}\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Scotty Jamison",
        "usuario_id": 829
    },
    {
        "_id": 534,
        "fecha": { "$date" : "2017-06-14T21:42:51Z" },
        "decripcion": "\nYou should use JSON.parse, take a look at https://www.w3schools.com/js/js_json_parse.asp\n\nconst obj = JSON.parse('{ \"name\":\"John\", \"age\":30, \"city\":\"New York\"}')\nconsole.log(obj.name)\nconsole.log(obj.age)\n\n    ",
        "votes": -4,
        "comentarios": [],
        "usuario": "onmyway133",
        "usuario_id": 830
    },
    {
        "_id": 535,
        "fecha": { "$date" : "2017-09-19T17:12:08Z" },
        "decripcion": "\nconst something = { bar: \"Foobar!\" };\nconst foo = 'bar';\n\nsomething[\\`${foo}\\`];\n\n    ",
        "votes": -5,
        "comentarios": [
            {
                "decripcion": "Why on earth would you do that? Your foo is already a string, so `${foo}` is exactly the same as foo. (Also, your code seems to have some extra backslashes that don't belong there. But it would still be pointless even if you fixed that syntax error.)",
                "fecha": { "$date" : "2017-09-19T18:49:35Z" },
                "usuario": "Ilmari Karonen",
                "usuario_id": 831
            }
        ],
        "usuario": "Sergey ",
        "usuario_id": 700
    },
    {
        "_id": 536,
        "fecha": { "$date" : "2021-07-02T13:19:22Z" },
        "decripcion": "\nYour getElementById code works since IDs have to be unique and thus the function always returns exactly one element (or null if none was found).\nHowever, the methods\ngetElementsByClassName,\ngetElementsByName,\ngetElementsByTagName, and\ngetElementsByTagNameNS\nreturn an iterable collection of elements.\nThe method names provide the hint: getElement implies singular, whereas getElements implies plural.\nThe method querySelector also returns a single element, and querySelectorAll returns an iterable collection.\nThe iterable collection can either be a NodeList or an HTMLCollection.\ngetElementsByName and querySelectorAll are both specified to return a NodeList; the other getElementsBy* methods are specified to return an HTMLCollection, but please note that some browser versions implement this differently.\nBoth of these collection types don\u2019t offer the same properties that Elements, Nodes, or similar types offer; that\u2019s why reading style off of document.getElements\u2026(\u2026) fails.\nIn other words: a NodeList or an HTMLCollection doesn\u2019t have a style; only an Element has a style.\n\nThese \u201carray-like\u201d collections are lists that contain zero or more elements, which you need to iterate over, in order to access them.\nWhile you can iterate over them similarly to an array, note that they are different from Arrays.\nIn modern browsers, you can convert these iterables to a proper Array with Array.from; then you can use forEach and other Array methods, e.g. iteration methods:\nArray.from(document.getElementsByClassName(\"myElement\"))\n  .forEach((element) => element.style.size = \"100px\");\n\nIn old browsers that don\u2019t support Array.from or the iteration methods, you can still use Array.prototype.slice.call.\nThen you can iterate over it like you would with a real array:\nvar elements = Array.prototype.slice\n    .call(document.getElementsByClassName(\"myElement\"));\n\nfor(var i = 0; i < elements.length; ++i){\n  elements[i].style.size = \"100px\";\n}\n\nYou can also iterate over the NodeList or HTMLCollection itself, but be aware that in most circumstances, these collections are live (MDN docs, DOM spec), i.e. they are updated as the DOM changes.\nSo if you insert or remove elements as you loop, make sure to not accidentally skip over some elements or create an infinite loop.\nMDN documentation should always note if a method returns a live collection or a static one.\nFor example, a NodeList offers some iteration methods such as forEach in modern browsers:\ndocument.querySelectorAll(\".myElement\")\n  .forEach((element) => element.style.size = \"100px\");\n\nA simple for loop can also be used:\nvar elements = document.getElementsByClassName(\"myElement\");\n\nfor(var i = 0; i < elements.length; ++i){\n  elements[i].style.size = \"100px\";\n}\n\n\nThere are some libraries like jQuery which make DOM querying a bit shorter and create a layer of abstraction over \u201cone element\u201d and \u201ca collection of elements\u201d:\n$(\".myElement\").css(\"size\", \"100px\");\n\n    ",
        "votes": 165,
        "comentarios": [
            {
                "decripcion": "Does that also apply to <iframe> which is also part of your domain",
                "fecha": { "$date" : "2016-09-01T01:25:16Z" },
                "usuario": "Maduro",
                "usuario_id": 833
            },
            {
                "decripcion": "It's 2018... Just create a wrapper function for querySelectorAll() and you can have nice short code without a large, old-school dependency. qSA(\".myElement\").forEach(el => el.style.size = \"100px\") Maybe have the wrapper receive a callback. qSA(\".myElement\", el => el.style.size = \"100px\")",
                "fecha": { "$date" : "2018-04-26T20:40:09Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "\"If you prefer something shorter, consider adding a huge library to your project\" I know 2012 was a different time, but even then I would've found that bit to be ludicrous.",
                "fecha": { "$date" : "2019-05-08T18:38:32Z" },
                "usuario": "CoryCoolguy",
                "usuario_id": 834
            },
            {
                "decripcion": "\"Iterate over it like you would with a real array\u2026 Careful, getElementsByClassName returns a live NodeList that might be unexpectedly modified during the loop, e.g. if the classname that they were selected by is removed. ;-)",
                "fecha": { "$date" : "2019-11-18T02:54:04Z" },
                "usuario": "RobG",
                "usuario_id": 647
            },
            {
                "decripcion": "The reference to jQuery should probably be removed from this answer, for various reasons: it behaves significantly differently from native DOM methods, it\u2019s not directly relevant to the question asked, and it requires loading a library that is too big just to shorten one or two function calls. The last concern has been valid almost a decade ago, but is even more relevant today as jQuery is losing relevance. Granted, some browsers may cache jQuery internally, but do we really want new devs to adopt the practice of loading a huge library just to use a small subset from it?",
                "fecha": { "$date" : "2021-07-02T13:21:40Z" },
                "usuario": "Sebastian Simon",
                "usuario_id": 573
            }
        ],
        "usuario": "ThiefMaster",
        "usuario_id": 835
    },
    {
        "_id": 537,
        "fecha": { "$date" : "2019-11-18T01:50:16Z" },
        "decripcion": "\nYou are using a array as an object, the difference between getElementbyId and \ngetElementsByClassName is that: \n\n\ngetElementbyId will return an Element object or null if no element with the ID is found\ngetElementsByClassName will return a live HTMLCollection, possibly of length 0 if no matching elements are found\n\n\ngetElementsByClassName\n\n\n  The getElementsByClassName(classNames) method takes a string that\n  contains an unordered set of unique space-separated tokens\n  representing classes. When called, the method must return a live\n  NodeList object containing all the elements in the document that\n  have all the classes specified in that argument, having obtained the\n  classes by splitting a string on spaces. If there are no tokens\n  specified in the argument, then the method must return an empty\n  NodeList.\n\n\nhttps://www.w3.org/TR/2008/WD-html5-20080610/dom.html#getelementsbyclassname\n\ngetElementById\n\n\n  The getElementById() method accesses the first element with the specified id.\n\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById\n\nin your code the lines:\n\n\n  1- document.getElementsByClassName('myElement').style.size = '100px';\n\n\nwill NOT work as expected, because the getElementByClassName will return an array, and the array will NOT have the style property, you can access each element by iterating through them.\n\nThat's why the function getElementById worked for you, this function will return the direct object. Therefore you will be able to access the style property.\n    ",
        "votes": 23,
        "comentarios": [
            {
                "decripcion": "Note that the whatwg specs that are being implemented by the browsers do differ from the w3c ones here, the former (and hence current browsers) return an HTMLCollection for getElementsByClassName, not a NodeList. Minor, but may confuse some.",
                "fecha": { "$date" : "2019-11-18T01:46:51Z" },
                "usuario": "Kaiido",
                "usuario_id": 836
            },
            {
                "decripcion": "@Kaiido\u2014the practical difference being\u2026? To my understanding, a NodeList is a generic collection of DOM elements and is available in any DOM, not just an HTML DOM (e.g. an XML DOM), whereas an HTMLCollection is for HTML DOMs (obviously). The only difference I can see is the namedItem method of an HTMLCollection.",
                "fecha": { "$date" : "2019-11-18T03:06:46Z" },
                "usuario": "RobG",
                "usuario_id": 647
            },
            {
                "decripcion": "PS Nit pick: link for the WHATWG HTML Living Standard and the W3C HTML 5.2 standard. Spoilt by choice. ;-) Makes no difference to the point you raised though.",
                "fecha": { "$date" : "2019-11-18T03:16:07Z" },
                "usuario": "RobG",
                "usuario_id": 647
            },
            {
                "decripcion": "@RobG NodeList has many methods that are not accessible on HTMLCollection.",
                "fecha": { "$date" : "2019-11-18T03:19:16Z" },
                "usuario": "Kaiido",
                "usuario_id": 836
            },
            {
                "decripcion": "@Kaiido\u2014sure, but forEach isn't specified as part of the interface for either collection or NodeList by W3C or WHATWG, it's specified separately, e.g. as a property of generic collections in the Web IDL specification so should apply to both collections and NodeLists (though I accept your point that the collection returned by getElementsByClassName doesn't have a forEach method). I guess the bottom line is that there's enough of a story for a good answer to tell it. :-)",
                "fecha": { "$date" : "2019-11-18T03:33:14Z" },
                "usuario": "RobG",
                "usuario_id": 647
            }
        ],
        "usuario": "Alvaro Joao",
        "usuario_id": 837
    },
    {
        "_id": 538,
        "fecha": { "$date" : "2017-04-04T09:21:24Z" },
        "decripcion": "\nES6 provides Array.from() method, which creates a new Array instance from an array-like or iterable object.\n\n\n\nlet boxes = document.getElementsByClassName('box');\n\nArray.from(boxes).forEach(v => v.style.background = 'green');\nconsole.log(Array.from(boxes));\n.box {\n  width: 50px;\n  height: 50px;\n  margin: 5px;\n  background: blue;\n  display: inline-block;\n}\n<div class='box'></div>\n<div class='box'></div>\n<div class='box'></div>\n<div class='box'></div>\n Run code snippetHide resultsExpand snippet\n\n\n\nAs you can see inside the code snippet, after using Array.from() function you are then able to manipulate over each element.\n\n\nThe same solution using jQuery.\n\n\n\n$('.box').css({'background':'green'});\n.box {\n  width: 50px;\n  height: 50px;\n  margin: 5px;\n  background: blue;\n  display: inline-block;\n}\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\n<div class='box'></div>\n<div class='box'></div>\n<div class='box'></div>\n<div class='box'></div>\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "kind user",
        "usuario_id": 838
    },
    {
        "_id": 539,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nThe following description is taken from this page:\n\nThe getElementsByClassName() method returns a collection of all elements in the document with the specified class name, as a NodeList object.\nThe NodeList object represents a collection of nodes. The nodes can be\naccessed by index numbers. The index starts at 0.\nTip: You can use the  length property of the NodeList object to determine the number of elements with a specified class name, then you can loop through all elements and extract the info you want.\n\nSo, as a parameter getElementsByClassName would accept a class name.\nIf this is your HTML body:\n<div id=\"first\" class=\"menuItem\"></div>\n<div id=\"second\" class=\"menuItem\"></div>\n<div id=\"third\" class=\"menuItem\"></div>\n<div id=\"footer\"></div>\n\nthen var menuItems = document.getElementsByClassName('menuItem') would return a collection (not an array) of the 3 upper <div>s, as they match the given class name.\nYou can then iterate over this nodes (<div>s in this case) collection with:\nfor (var menuItemIndex = 0 ; menuItems.length ; menuItemIndex ++) {\n   var currentMenuItem = menuItems[menuItemIndex];\n   // do stuff with currentMenuItem as a node.\n}\n\nPlease refer to this post for more on differences between elements and nodes.\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "the loop looks wrong, should be  for (var menuItemIndex = 0 ; menuItemIndex < menuItems.length ; menuItemIndex ++) { in my opinion.",
                "fecha": { "$date" : "2020-07-27T13:41:00Z" },
                "usuario": "David",
                "usuario_id": 839
            }
        ],
        "usuario": "guysigner",
        "usuario_id": 840
    },
    {
        "_id": 540,
        "fecha": { "$date" : "2018-03-19T15:01:39Z" },
        "decripcion": "\nIn Other Words\n\n\ndocument.querySelector() selects only the first one element of the specified selector. So it doesn't spit out an array, it's a single value. Similar to document.getElementById() which fetches ID-elements only, since IDs have to be unique.\ndocument.querySelectorAll() selects all elements with the specified selector and returns them in an array. Similar to document.getElementsByClassName() for classes and document.getElementsByTagName() tags only.\n\n\n\n\nWhy use querySelector?\n\nIt's used merely for the sole purpose of ease and brevity.\n\n\n\nWhy use getElement/sBy?*\n\nFaster performance.\n\n\n\nWhy this performance difference?\n\nBoth ways of selection has the purpose of creating a NodeList for further use. \nquerySelectors generates a static NodeList with the selectors thus it must be first created from scratch.\ngetElement/sBy* immediately adapts the existing live NodeList of the current DOM.\n\nSo, when to use which method it's up to you/your project/your device.\n\n\n\nInfos\n\nDemo of all methods\nNodeList Documentation\nPerformance Test\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Thielicious",
        "usuario_id": 841
    },
    {
        "_id": 541,
        "fecha": { "$date" : "2016-06-17T03:21:49Z" },
        "decripcion": "\nIt returns Array-like list.\n\nYou make that an Array as example\n\nvar el = getElementsByClassName(\"elem\");\nel = Array.prototype.slice.call(el); //this line\nel[0].appendChild(otherElem);  \n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "atilkan",
        "usuario_id": 842
    },
    {
        "_id": 542,
        "fecha": { "$date" : "2017-07-02T21:06:19Z" },
        "decripcion": "\nYou could get a single element by running \n\ndocument.querySelector('.myElement').style.size = '100px';\n\n\nbut it's going to work for the first element with class .myElement.\n\nIf you would like apply this for all elements with the class I suggest you to use \n\ndocument.querySelectorAll('.myElement').forEach(function(element) {\n    element.style.size = '100px';\n});\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Sergey ",
        "usuario_id": 700
    },
    {
        "_id": 543,
        "fecha": { "$date" : "2018-11-25T04:06:32Z" },
        "decripcion": "\n/*\n * To hide all elements with the same class, \n * use looping to reach each element with that class. \n * In this case, looping is done recursively\n */\n\nconst hideAll = (className, i=0) => {\nif(!document.getElementsByClassName(className)[i]){ //exits the loop when element of that id does not exist\n  return; \n}\n\ndocument.getElementsByClassName(className)[i].style.visibility = 'hidden'; //hide element\nreturn hideAll(className, i+1) //loop for the next element\n}\n\nhideAll('appBanner') //the function call requires the class name\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Irina Mityugova",
        "usuario_id": 843
    },
    {
        "_id": 544,
        "fecha": { "$date" : "2016-12-02T08:39:07Z" },
        "decripcion": "\nWith ES5+ (any browsed nowadays - 2017) you should be able to do \n\n\n\n[].forEach.call(document.getElementsByClassName('answer'), function(el) {\n    el.style.color= 'red';\n});\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Matas Vaitkevicius",
        "usuario_id": 844
    },
    {
        "_id": 545,
        "fecha": { "$date" : "2020-07-11T01:18:04Z" },
        "decripcion": "\nAn answer for Drenzii's specific case...\nYou could make a function that will work for any of the word elements and pass in the number of the one you want to transform, like:\n\n\n// Binds `wordButtons` to an (array-like) HTMLCollection of buttons\nconst wordButtons = document.getElementsByClassName(\"word\");\n\n// Applies the `slantWord` function to the first word button\nslantWord(1);\n\n// Defines the `slantWord` function\nfunction slantWord(wordNumber) {\n  const index = wordNumber - 1; // Collection index is zero-based\n  wordButtons[index].style.transform = \"rotate(7deg)\"; // Transforms the specified button\n}\n<div class=\"wordGameContainer\">\n  <button class=\"word word1\">WORD 1</button>\n  <button class=\"word word2\">WORD 2</button>\n  <button class=\"word word3\">WORD 3</button>\n  <button class=\"word word4\">WORD 4</button>\n</div>\n\n<div>\n  <button onclick=\"moveWord()\" class=\"playButton\">PLAY</button>\n</div>\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "Cat",
        "usuario_id": 845
    },
    {
        "_id": 546,
        "fecha": { "$date" : "2020-12-29T22:46:44Z" },
        "decripcion": "\nThis is because require() does not exist in the browser/client-side JavaScript.\nNow you're going to have to make some choices about your client-side JavaScript script management.\nYou have three options:\n\nUse the <script> tag.\nUse a CommonJS implementation. It has synchronous dependencies like Node.js\nUse an asynchronous module definition (AMD) implementation.\n\nCommonJS client side-implementations include (most of them require a build step before you deploy):\n\nBrowserify - You can use most Node.js modules in the browser. This is my personal favorite.\nWebpack - Does everything (bundles JavaScript code, CSS, etc.). It was made popular by the surge of React, but it is notorious for its difficult learning curve.\nRollup - a new contender. It leverages ES6 modules and includes tree-shaking abilities (removes unused code).\n\nYou can read more about my comparison of Browserify vs (deprecated) Component.\nAMD implementations include:\n\nRequireJS - Very popular amongst client-side JavaScript developers. It is not my taste because of its asynchronous nature.\n\nNote, in your search for choosing which one to go with, you'll read about Bower. Bower is only for package dependencies and is unopinionated on module definitions like CommonJS and AMD.\n    ",
        "votes": 528,
        "comentarios": [
            {
                "decripcion": "Thank you very much. I made a mini test separately, this is why it took me a while to respond. I may come back with some questions in a few minutes just to make sure that I understand how this magic worked. I just want to put everything together. Thanks again. Browserify seems to rock! :)",
                "fecha": { "$date" : "2013-09-27T21:18:29Z" },
                "usuario": "MightyMouse",
                "usuario_id": 848
            },
            {
                "decripcion": "I think JSPM should be added to the list.",
                "fecha": { "$date" : "2016-02-11T09:12:50Z" },
                "usuario": "Martijn",
                "usuario_id": 849
            },
            {
                "decripcion": "Could I get an example of using the <script> tag to import a React class without the use of a nodeJs package manager?",
                "fecha": { "$date" : "2016-05-12T16:50:39Z" },
                "usuario": "Louie Bertoncin",
                "usuario_id": 850
            },
            {
                "decripcion": "SystemJS and JSPM are very notable omissions.",
                "fecha": { "$date" : "2017-05-08T05:10:36Z" },
                "usuario": "Aluan Haddad",
                "usuario_id": 522
            },
            {
                "decripcion": "Yeah. Component is now deprecated github.com/componentjs/component",
                "fecha": { "$date" : "2017-07-17T12:35:30Z" },
                "usuario": "i_emmanuel",
                "usuario_id": 851
            }
        ],
        "usuario": "JP Richardson",
        "usuario_id": 852
    },
    {
        "_id": 547,
        "fecha": { "$date" : "2020-12-29T22:59:55Z" },
        "decripcion": "\nI am coming from an Electron environment, where I need IPC communication between a renderer process and the main process. The renderer process sits in an HTML file between script tags and generates the same error.\nThe line\nconst {ipcRenderer} = require('electron')\n\nthrows the Uncaught ReferenceError: require is not defined\nI was able to work around that by specifying Node.js integration as true when the browser window (where this HTML file is embedded) was originally created in the main process.\nfunction createAddItemWindow() {\n\n    // Create a new window\n    addItemWindown = new BrowserWindow({\n        width: 300,\n        height: 200,\n        title: 'Add Item',\n\n        // The lines below solved the issue\n        webPreferences: {\n            nodeIntegration: true\n        }\n})}\n\nThat solved the issue for me. The solution was proposed here.\n    ",
        "votes": 64,
        "comentarios": [
            {
                "decripcion": "Is this solution safe? I've heard you shouldn't set nodeIntegration to true - is that right? I am an Electron newbie so this is a genuine question.",
                "fecha": { "$date" : "2021-03-23T23:46:14Z" },
                "usuario": "Mike Baxter",
                "usuario_id": 853
            },
            {
                "decripcion": "Well, it depends on how you are going to use your electron application. The comment thread of the original StackOverflow question I referenced gives a brief overview of the security aspects of doing this. You can follow the thread here. But in short: If this is set to true, your application has access to the node runtime, and if you are executing, potentially malicious, remote code, it's just a recipe for disaster.",
                "fecha": { "$date" : "2021-03-25T06:22:08Z" },
                "usuario": "Kibonge Murphy",
                "usuario_id": 854
            },
            {
                "decripcion": "This won't work if you don't use Electron. If you don't use Electron, the above code will fail with \"Unexpected token '}'\".",
                "fecha": { "$date" : "2021-05-05T05:23:04Z" },
                "usuario": "Someone_who_likes_SE",
                "usuario_id": 855
            }
        ],
        "usuario": "Kibonge Murphy",
        "usuario_id": 854
    },
    {
        "_id": 548,
        "fecha": { "$date" : "2020-12-29T22:52:00Z" },
        "decripcion": "\nES6: In HTML, include the main JavaScript file using attribute type=\"module\" (browser support):\n<script type=\"module\" src=\"script.js\"></script>\n\nAnd in the script.js file, include another file like this:\nimport { hello } from './module.js';\n...\n// alert(hello());\n\nInside the included file (module.js), you must export the function/class that you will import:\nexport function hello() {\n    return \"Hello World\";\n}\n\nA working example is here. More information is here.\n    ",
        "votes": 49,
        "comentarios": [
            {
                "decripcion": "@Curse Here stackoverflow.com/a/44591205/860099 is written \"Module creates a scope to avoid name collisions.\" sou you can \"manually\" put  val to window object window.val = val. Here is plunker: Plunker: plnkr.co/edit/aDyjyMxO1PdNaFh7ctBT?p=preview - this solution works",
                "fecha": { "$date" : "2018-08-07T14:20:16Z" },
                "usuario": "Kamil Kie\u0142czewski",
                "usuario_id": 714
            }
        ],
        "usuario": "Kamil Kie\u0142czewski",
        "usuario_id": 714
    },
    {
        "_id": 549,
        "fecha": { "$date" : "2020-12-29T23:03:34Z" },
        "decripcion": "\nReplace all require statements with import statements. Example:\n// Before:\nconst Web3 = require('web3');\n\n// After:\nimport Web3 from 'web3';\n\nIt worked for me.\n    ",
        "votes": 16,
        "comentarios": [
            {
                "decripcion": "For reference, it might be helpful to go through this question regarding the difference between the two.",
                "fecha": { "$date" : "2020-08-01T00:26:57Z" },
                "usuario": "tripathiakshit",
                "usuario_id": 856
            },
            {
                "decripcion": "You might need to use type=module, which requires you to export the functions and variable names for them to work.",
                "fecha": { "$date" : "2021-05-05T05:24:13Z" },
                "usuario": "Someone_who_likes_SE",
                "usuario_id": 855
            }
        ],
        "usuario": "Noha Abuaesh",
        "usuario_id": 857
    },
    {
        "_id": 550,
        "fecha": { "$date" : "2020-12-29T22:57:35Z" },
        "decripcion": "\nEven using this won't work. I think the best solution is Browserify:\nmodule.exports = {\n  func1: function () {\n   console.log(\"I am function 1\");\n  },\n  func2: function () {\n    console.log(\"I am function 2\");\n  }\n};\n\n-getFunc1.js-\nvar common = require('./common');\ncommon.func1();\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Wael Chorfan",
        "usuario_id": 858
    },
    {
        "_id": 551,
        "fecha": { "$date" : "2020-12-29T22:56:07Z" },
        "decripcion": "\nIn my case I used another solution.\nAs the project doesn't require CommonJS and it must have ES3 compatibility (modules not supported) all you need is just remove all export and import statements from your code, because your tsconfig doesn't contain\n\"module\": \"commonjs\"\n\nBut use import and export statements in your referenced files\nimport { Utils } from \"./utils\"\nexport interface Actions {}\n\nFinal generated code will always have(at least for TypeScript 3.0) such lines\n\"use strict\";\nexports.__esModule = true;\nvar utils_1 = require(\"./utils\");\n....\nutils_1.Utils.doSomething();\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "Do you really mean ES3? ES3 is 21 years old, from December 1999.",
                "fecha": { "$date" : "2020-12-29T22:56:30Z" },
                "usuario": "Peter Mortensen",
                "usuario_id": 246
            },
            {
                "decripcion": "Some old smart TVs hasn't full es5 support. So only es3 works everywhere.",
                "fecha": { "$date" : "2020-12-29T23:21:37Z" },
                "usuario": "ydanila",
                "usuario_id": 859
            }
        ],
        "usuario": "ydanila",
        "usuario_id": 859
    },
    {
        "_id": 552,
        "fecha": { "$date" : "2021-03-29T15:26:32Z" },
        "decripcion": "\nwindow = new BrowserWindow({\n    webPreferences: {\n        nodeIntegration: true,\n        contextIsolation: false\n    }\n});\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "Welcome to Stack Overflow and thanks for taking the time to create an answer. However, this very answer has been given numerous times as a solution for this question and thus does not add any value whatsoever. If you could elaborate a bit (by editing this post) on why and how this solution works, this answer could turn to good advice which is exactly what this site is for. Also, this is an answer purely for the Electron framework, which the OP of the question does not even use -- please consider posting (a more elaborate version) on a more appropriate spot.",
                "fecha": { "$date" : "2021-03-29T12:57:50Z" },
                "usuario": "Alexander Leithner",
                "usuario_id": 860
            },
            {
                "decripcion": "consider updating with details as to how this answer is different from the other answers; does this answer address an issue not addressed by other answers?",
                "fecha": { "$date" : "2021-03-29T13:11:03Z" },
                "usuario": "markp-fuso",
                "usuario_id": 861
            },
            {
                "decripcion": "This does not provide an answer to the question. Once you have sufficient reputation you will be able to comment on any post; instead, provide answers that don't require clarification from the asker. - From Review",
                "fecha": { "$date" : "2021-03-30T09:11:07Z" },
                "usuario": "Not A Bot",
                "usuario_id": 862
            },
            {
                "decripcion": "although it is not clear but somehow is worked.",
                "fecha": { "$date" : "2021-05-19T14:50:50Z" },
                "usuario": "Najam Us Saqib",
                "usuario_id": 863
            }
        ],
        "usuario": "Abdullah",
        "usuario_id": 864
    },
    {
        "_id": 553,
        "fecha": { "$date" : "2020-12-29T23:04:24Z" },
        "decripcion": "\nI confirm. We must add:\nwebPreferences: {\n    nodeIntegration: true\n}\n\nFor example:\nmainWindow = new BrowserWindow({webPreferences: {\n    nodeIntegration: true\n}});\n\nFor me, the problem has been resolved with that.\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "This was basically already answered by stackoverflow.com/a/56342771/2358409",
                "fecha": { "$date" : "2020-11-01T11:09:33Z" },
                "usuario": "uminder",
                "usuario_id": 865
            }
        ],
        "usuario": "Xavier GRANDJEAN",
        "usuario_id": 866
    },
    {
        "_id": 554,
        "fecha": { "$date" : "2021-09-02T19:57:03Z" },
        "decripcion": "\nThis worked for me\n\nGet the latest release from the RequireJS download page\nIt is the file for RequestJS which is what we will use.\nLoad it into your HTML content like this:\n<script data-main=\"your-script.js\" src=\"require.js\"></script>\n\nNotes!\nUse require(['moudle-name']) in your-script.js,\nnot require('moudle-name')\nUse const {ipcRenderer} = require(['electron']),\nnot const {ipcRenderer} = require('electron')\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "Never, ever recommend a \"click here\", ever. Best case, it's a RickRoll, but we have no idea whatsoever what's awaiting us at the end of that link.",
                "fecha": { "$date" : "2019-10-26T15:17:04Z" },
                "usuario": "ggdx",
                "usuario_id": 867
            },
            {
                "decripcion": "this was help me!! but now my problem is that I need manually change the require... that's a problem, exits somethings in tsconfig that do this when I compile?",
                "fecha": { "$date" : "2021-03-25T12:14:01Z" },
                "usuario": "AntoCode",
                "usuario_id": 868
            }
        ],
        "usuario": "eaithy",
        "usuario_id": 869
    },
    {
        "_id": 555,
        "fecha": { "$date" : "2021-02-19T15:56:42Z" },
        "decripcion": "\nWelcome to the wonderful world of portability... or rather the lack of it. Before we start analyzing these two options in detail and take a deeper look how different operating systems handle them, it should be noted that the BSD socket implementation is the mother of all socket implementations. Basically all other systems copied the BSD socket implementation at some point in time (or at least its interfaces) and then started evolving it on their own. Of course the BSD socket implementation was evolved as well at the same time and thus systems that copied it later got features that were lacking in systems that copied it earlier. Understanding the BSD socket implementation is the key to understanding all other socket implementations, so you should read about it even if you don't care to ever write code for a BSD system.\nThere are a couple of basics you should know before we look at these two options. A TCP/UDP connection is identified by a tuple of five values:\n{<protocol>, <src addr>, <src port>, <dest addr>, <dest port>}\nAny unique combination of these values identifies a connection. As a result, no two connections can have the same five values, otherwise the system would not be able to distinguish these connections any longer.\nThe protocol of a socket is set when a socket is created with the socket() function. The source address and port are set with the bind() function. The destination address and port are set with the connect() function. Since UDP is a connectionless protocol, UDP sockets can be used without connecting them. Yet it is allowed to connect them and in some cases very advantageous for your code and general application design. In connectionless mode, UDP sockets that were not explicitly bound when data is sent over them for the first time are usually automatically bound by the system, as an unbound UDP socket cannot receive any (reply) data. Same is true for an unbound TCP socket, it is automatically bound before it will be connected.\nIf you explicitly bind a socket, it is possible to bind it to port 0, which means \"any port\". Since a socket cannot really be bound to all existing ports, the system will have to choose a specific port itself in that case (usually from a predefined, OS specific range of source ports). A similar wildcard exists for the source address, which can be \"any address\" (0.0.0.0 in case of IPv4 and :: in case of IPv6). Unlike in case of ports, a socket can really be bound to \"any address\" which means \"all source IP addresses of all local interfaces\". If the socket is connected later on, the system has to choose a specific source IP address, since a socket cannot be connected and at the same time be bound to any local IP address. Depending on the destination address and the content of the routing table, the system will pick an appropriate source address and replace the \"any\" binding with a binding to the chosen source IP address.\nBy default, no two sockets can be bound to the same combination of source address and source port. As long as the source port is different, the source address is actually irrelevant. Binding socketA to ipA:portA and socketB to ipB:portB is always possible if ipA != ipB holds true, even when portA == portB. E.g. socketA belongs to a FTP server program and is bound to 192.168.0.1:21 and socketB belongs to another FTP server program and is bound to 10.0.0.1:21, both bindings will succeed. Keep in mind, though, that a socket may be locally bound to \"any address\". If a socket is bound to 0.0.0.0:21, it is bound to all existing local addresses at the same time and in that case no other socket can be bound to port 21, regardless which specific IP address it tries to bind to, as 0.0.0.0 conflicts with all existing local IP addresses.\nAnything said so far is pretty much equal for all major operating system. Things start to get OS specific when address reuse comes into play. We start with BSD, since as I said above, it is the mother of all socket implementations.\nBSD\nSO_REUSEADDR\nIf SO_REUSEADDR is enabled on a socket prior to binding it, the socket can be successfully bound unless there is a conflict with another socket bound to exactly the same combination of source address and port. Now you may wonder how is that any different than before? The keyword is \"exactly\". SO_REUSEADDR mainly changes the way how wildcard addresses (\"any IP address\") are treated when searching for conflicts.\nWithout SO_REUSEADDR, binding socketA to 0.0.0.0:21 and then binding socketB to 192.168.0.1:21 will fail (with error EADDRINUSE), since 0.0.0.0 means \"any local IP address\", thus all local IP addresses are considered in use by this socket and this includes 192.168.0.1, too. With SO_REUSEADDR it will succeed, since 0.0.0.0 and 192.168.0.1 are not exactly the same address, one is a wildcard for all local addresses and the other one is a very specific local address. Note that the statement above is true regardless in which order socketA and socketB are bound; without SO_REUSEADDR it will always fail, with SO_REUSEADDR it will always succeed.\nTo give you a better overview, let's make a table here and list all possible combinations:\nSO_REUSEADDR       socketA        socketB       Result\n---------------------------------------------------------------------\n  ON/OFF       192.168.0.1:21   192.168.0.1:21    Error (EADDRINUSE)\n  ON/OFF       192.168.0.1:21      10.0.0.1:21    OK\n  ON/OFF          10.0.0.1:21   192.168.0.1:21    OK\n   OFF             0.0.0.0:21   192.168.1.0:21    Error (EADDRINUSE)\n   OFF         192.168.1.0:21       0.0.0.0:21    Error (EADDRINUSE)\n   ON              0.0.0.0:21   192.168.1.0:21    OK\n   ON          192.168.1.0:21       0.0.0.0:21    OK\n  ON/OFF           0.0.0.0:21       0.0.0.0:21    Error (EADDRINUSE)\n\nThe table above assumes that socketA has already been successfully bound to the address given for socketA, then socketB is created, either gets SO_REUSEADDR set or not, and finally is bound to the address given for socketB. Result is the result of the bind operation for socketB. If the first column says ON/OFF, the value of SO_REUSEADDR is irrelevant to the result.\nOkay, SO_REUSEADDR has an effect on wildcard addresses, good to know. Yet that isn't it's only effect it has. There is another well known effect which is also the reason why most people use SO_REUSEADDR in server programs in the first place. For the other important use of this option we have to take a deeper look on how the TCP protocol works.\nA socket has a send buffer and if a call to the send() function succeeds, it does not mean that the requested data has actually really been sent out, it only means the data has been added to the send buffer. For UDP sockets, the data is usually sent pretty soon, if not immediately, but for TCP sockets, there can be a relatively long delay between adding data to the send buffer and having the TCP implementation really send that data. As a result, when you close a TCP socket, there may still be pending data in the send buffer, which has not been sent yet but your code considers it as sent, since the send() call succeeded. If the TCP implementation was closing the socket immediately on your request, all of this data would be lost and your code wouldn't even know about that. TCP is said to be a reliable protocol and losing data just like that is not very reliable. That's why a socket that still has data to send will go into a state called TIME_WAIT when you close it. In that state it will wait until all pending data has been successfully sent or until a timeout is hit, in which case the socket is closed forcefully.\nAt most, the amount of time the kernel will wait before it closes the socket, regardless if it still has data in flight or not, is called the Linger Time. The Linger Time is globally configurable on most systems and by default rather long (two minutes is a common value you will find on many systems). It is also configurable per socket using the socket option SO_LINGER which can be used to make the timeout shorter or longer, and even to disable it completely. Disabling it completely is a very bad idea, though, since closing a TCP socket gracefully is a slightly complex process and involves sending forth and back a couple of packets (as well as resending those packets in case they got lost) and this whole close process is also limited by the Linger Time. If you disable lingering, your socket may not only lose data in flight, it is also always closed forcefully instead of gracefully, which is usually not recommended. The details about how a TCP connection is closed gracefully are beyond the scope of this answer, if you want to learn more about, I recommend you have a look at this page. And even if you disabled lingering with SO_LINGER, if your process dies without explicitly closing the socket, BSD (and possibly other systems) will linger nonetheless, ignoring what you have configured. This will happen for example if your code just calls exit() (pretty common for tiny, simple server programs) or the process is killed by a signal (which includes the possibility that it simply crashes because of an illegal memory access). So there is nothing you can do to make sure a socket will never linger under all circumstances.\nThe question is, how does the system treat a socket in state TIME_WAIT? If SO_REUSEADDR is not set, a socket in state TIME_WAIT is considered to still be bound to the source address and port and any attempt to bind a new socket to the same address and port will fail until the socket has really been closed, which may take as long as the configured Linger Time. So don't expect that you can rebind the source address of a socket immediately after closing it. In most cases this will fail. However, if SO_REUSEADDR is set for the socket you are trying to bind, another socket bound to the same address and port in state TIME_WAIT is simply ignored, after all its already \"half dead\", and your socket can bind to exactly the same address without any problem. In that case it plays no role that the other socket may have exactly the same address and port. Note that binding a socket to exactly the same address and port as a dying socket in TIME_WAIT state can have unexpected, and usually undesired, side effects in case the other socket is still \"at work\", but that is beyond the scope of this answer and fortunately those side effects are rather rare in practice.\nThere is one final thing you should know about SO_REUSEADDR. Everything written above will work as long as the socket you want to bind to has address reuse enabled. It is not necessary that the other socket, the one which is already bound or is in a TIME_WAIT state, also had this flag set when it was bound. The code that decides if the bind will succeed or fail only inspects the SO_REUSEADDR flag of the socket fed into the bind() call, for all other sockets inspected, this flag is not even looked at.\nSO_REUSEPORT\nSO_REUSEPORT is what most people would expect SO_REUSEADDR to be. Basically, SO_REUSEPORT allows you to bind an arbitrary number of sockets to exactly the same source address and port as long as all prior bound sockets also had SO_REUSEPORT set before they were bound. If the first socket that is bound to an address and port does not have SO_REUSEPORT set, no other socket can be bound to exactly the same address and port, regardless if this other socket has SO_REUSEPORT set or not, until the first socket releases its binding again. Unlike in case of SO_REUESADDR the code handling SO_REUSEPORT will not only verify that the currently bound socket has SO_REUSEPORT set but it will also verify that the socket with a conflicting address and port had SO_REUSEPORT set when it was bound.\nSO_REUSEPORT does not imply SO_REUSEADDR. This means if a socket did not have SO_REUSEPORT set when it was bound and another socket has SO_REUSEPORT set when it is bound to exactly the same address and port, the bind fails, which is expected, but it also fails if the other socket is already dying and is in TIME_WAIT state. To be able to bind a socket to the same addresses and port as another socket in TIME_WAIT state requires either SO_REUSEADDR to be set on that socket or SO_REUSEPORT must have been set on both sockets prior to binding them. Of course it is allowed to set both, SO_REUSEPORT and SO_REUSEADDR, on a socket.\nThere is not much more to say about SO_REUSEPORT other than that it was added later than SO_REUSEADDR, that's why you will not find it in many socket implementations of other systems, which \"forked\" the BSD code before this option was added, and that there was no way to bind two sockets to exactly the same socket address in BSD prior to this option.\nConnect() Returning EADDRINUSE?\nMost people know that bind() may fail with the error EADDRINUSE, however, when you start playing around with address reuse, you may run into the strange situation that connect() fails with that error as well. How can this be? How can a remote address, after all that's what connect adds to a socket, be already in use? Connecting multiple sockets to exactly the same remote address has never been a problem before, so what's going wrong here?\nAs I said on the very top of my reply, a connection is defined by a tuple of five values, remember? And I also said, that these five values must be unique otherwise the system cannot distinguish two connections any longer, right? Well, with address reuse, you can bind two sockets of the same protocol to the same source address and port. That means three of those five values are already the same for these two sockets. If you now try to connect both of these sockets also to the same destination address and port, you would create two connected sockets, whose tuples are absolutely identical. This cannot work, at least not for TCP connections (UDP connections are no real connections anyway). If data arrived for either one of the two connections, the system could not tell which connection the data belongs to. At least the destination address or destination port must be different for either connection, so that the system has no problem to identify to which connection incoming data belongs to.\nSo if you bind two sockets of the same protocol to the same source address and port and try to connect them both to the same destination address and port, connect() will actually fail with the error EADDRINUSE for the second socket you try to connect, which means that a socket with an identical tuple of five values is already connected.\nMulticast Addresses\nMost people ignore the fact that multicast addresses exist, but they do exist. While unicast addresses are used for one-to-one communication, multicast addresses are used for one-to-many communication. Most people got aware of multicast addresses when they learned about IPv6 but multicast addresses also existed in IPv4, even though this feature was never widely used on the public Internet.\nThe meaning of SO_REUSEADDR changes for multicast addresses as it allows multiple sockets to be bound to exactly the same combination of source multicast address and port. In other words, for multicast addresses SO_REUSEADDR behaves exactly as SO_REUSEPORT for unicast addresses. Actually, the code treats SO_REUSEADDR and SO_REUSEPORT identically for multicast addresses, that means you could say that SO_REUSEADDR implies SO_REUSEPORT for all multicast addresses and the other way round.\nFreeBSD/OpenBSD/NetBSD\nAll these are rather late forks of the original BSD code, that's why they all three offer the same options as BSD and they also behave the same way as in BSD.\nmacOS (MacOS X)\nAt its core, macOS is simply a BSD-style UNIX named \"Darwin\", based on a rather late fork of the BSD code (BSD 4.3), which was then later on even re-synchronized with the (at that time current) FreeBSD 5 code base for the Mac OS 10.3 release, so that Apple could gain full POSIX compliance (macOS is POSIX certified). Despite having a microkernel at its core (\"Mach\"), the rest of the kernel (\"XNU\") is basically just a BSD kernel, and that's why macOS offers the same options as BSD and they also behave the same way as in BSD.\niOS / watchOS / tvOS\niOS is just a macOS fork with a slightly modified and trimmed kernel, somewhat stripped down user space toolset and a slightly different default framework set. watchOS and tvOS are iOS forks, that are stripped down even further (especially watchOS). To my best knowledge they all behave exactly as macOS does.\nLinux\nLinux < 3.9\nPrior to Linux 3.9, only the option SO_REUSEADDR existed. This option behaves generally the same as in BSD with two important exceptions:\n\nAs long as a listening (server) TCP socket is bound to a specific port, the SO_REUSEADDR option is entirely ignored for all sockets targeting that port. Binding a second socket to the same port is only possible if it was also possible in BSD without having SO_REUSEADDR set. E.g. you cannot bind to a wildcard address and then to a more specific one or the other way round, both is possible in BSD if you set SO_REUSEADDR. What you can do is you can bind to the same port and two different non-wildcard addresses, as that's always allowed. In this aspect Linux is more restrictive than BSD.\n\nThe second exception is that for client sockets, this option behaves exactly like SO_REUSEPORT in BSD, as long as both had this flag set before they were bound. The reason for allowing that was simply that it is important to be able to bind multiple sockets to exactly to the same UDP socket address for various protocols and as there used to be no SO_REUSEPORT prior to 3.9, the behavior of SO_REUSEADDR was altered accordingly to fill that gap. In that aspect Linux is less restrictive than BSD.\n\n\nLinux >= 3.9\nLinux 3.9 added the option SO_REUSEPORT to Linux as well. This option behaves exactly like the option in BSD and allows binding to exactly the same address and port number as long as all sockets have this option set prior to binding them.\nYet, there are still two differences to SO_REUSEPORT on other systems:\n\nTo prevent \"port hijacking\", there is one special limitation: All sockets that want to share the same address and port combination must belong to processes that share the same effective user ID! So one user cannot \"steal\" ports of another user. This is some special magic to somewhat compensate for the missing SO_EXCLBIND/SO_EXCLUSIVEADDRUSE flags.\n\nAdditionally the kernel performs some \"special magic\" for SO_REUSEPORT sockets that isn't found in other operating systems: For UDP sockets, it tries to distribute datagrams evenly, for TCP listening sockets, it tries to distribute incoming connect requests (those accepted by calling accept())  evenly across all the sockets that share the same address and port combination. Thus an application can easily open the same port in multiple child processes and then use SO_REUSEPORT to get a very inexpensive load balancing.\n\n\nAndroid\nEven though the whole Android system is somewhat different from most Linux distributions, at its core works a slightly modified Linux kernel, thus everything that applies to Linux should apply to Android as well.\nWindows\nWindows only knows the SO_REUSEADDR option, there is no SO_REUSEPORT. Setting SO_REUSEADDR on a socket in Windows behaves like setting SO_REUSEPORT and SO_REUSEADDR on a socket in BSD, with one exception:\nPrior to Windows 2003, a socket with SO_REUSEADDR could always been bound to exactly the same source address and port as an already bound socket, even if the other socket did not have this option set when it was bound. This behavior allowed an application \"to steal\" the connected port of another application. Needless to say that this has major security implications!\nMicrosoft realized that and added another important socket option: SO_EXCLUSIVEADDRUSE. Setting SO_EXCLUSIVEADDRUSE on a socket makes sure that if the binding succeeds, the combination of source address and port is owned exclusively by this socket and no other socket can bind to them, not even if it has SO_REUSEADDR set.\nThis default behavior was changed first in Windows 2003, Microsoft calls that \"Enhanced Socket Security\" (funny name for a behavior that is default on all other major operating systems). For more details just visit this page. There are three tables: The first one shows the classic behavior (still in use when using compatibility modes!), the second one shows the behavior of Windows 2003 and up when the bind() calls are made by the same user, and the third one when the bind() calls are made by different users.\nSolaris\nSolaris is the successor of SunOS. SunOS was originally based on a fork of BSD, SunOS 5 and later was based on a fork of SVR4, however SVR4 is a merge of BSD, System V, and Xenix, so up to some degree Solaris is also a BSD fork, and a rather early one. As a result Solaris only knows SO_REUSEADDR, there is no SO_REUSEPORT. The SO_REUSEADDR behaves pretty much the same as it does in BSD. As far as I know there is no way to get the same behavior as SO_REUSEPORT in Solaris, that means it is not possible to bind two sockets to exactly the same address and port.\nSimilar to Windows, Solaris has an option to give a socket an exclusive binding. This option is named SO_EXCLBIND. If this option is set on a socket prior to binding it, setting SO_REUSEADDR on another socket has no effect if the two sockets are tested for an address conflict. E.g. if socketA is bound to a wildcard address and socketB has SO_REUSEADDR enabled and is bound to a non-wildcard address and the same port as socketA, this bind will normally succeed, unless socketA had SO_EXCLBIND enabled, in which case it will fail regardless the SO_REUSEADDR flag of socketB.\nOther Systems\nIn case your system is not listed above, I wrote a little test program that you can use to find out how your system handles these two options. Also if you think my results are wrong, please first run that program before posting any comments and possibly making false claims.\nAll that the code requires to build is a bit POSIX API (for the network parts) and a C99 compiler (actually most non-C99 compiler will work as well as long as they offer inttypes.h and stdbool.h; e.g. gcc supported both long before offering full C99 support).\nAll that the program needs to run is that at least one interface in your system (other than the local interface) has an IP address assigned and that a default route is set which uses that interface. The program will gather that IP address and use it as the second \"specific address\".\nIt tests all possible combinations you can think of:\n\nTCP and UDP protocol\nNormal sockets, listen (server) sockets, multicast sockets\nSO_REUSEADDR set on socket1, socket2, or both sockets\nSO_REUSEPORT set on socket1, socket2, or both sockets\nAll address combinations you can make out of 0.0.0.0 (wildcard), 127.0.0.1 (specific address), and the second specific address found at your primary interface (for multicast it's just 224.1.2.3 in all tests)\n\nand prints the results in a nice table. It will also work on systems that don't know SO_REUSEPORT, in which case this option is simply not tested.\nWhat the program cannot easily test is how SO_REUSEADDR acts on sockets in TIME_WAIT state as it's very tricky to force and keep a socket in that state. Fortunately most operating systems seems to simply behave like BSD here and most of the time programmers can simply ignore the existence of that state.\nHere's the code (I cannot include it here, answers have a size limit and the code would push this reply over the limit).\n    ",
        "votes": 1853,
        "comentarios": [
            {
                "decripcion": "For example, \"source address\" really should be \"local address\", the next three fields likewise.  Binding with INADDR_ANY doesn't bind existing local addresses, but all future ones as well.  listen certainly creates sockets with the same exact protocol, local address, and local port, even though you said that isn't possible.",
                "fecha": { "$date" : "2013-07-12T00:13:44Z" },
                "usuario": "Ben Voigt",
                "usuario_id": 873
            },
            {
                "decripcion": "@Ben Source and Destination are the official terms used for IP addressing (to which I primary refer). Local and Remote would make no sense, since the Remote address can in fact be a \"Local\" address and the opposite of Destination is Source and not Local. I don't know what your issue is with INADDR_ANY, I never said it would not bind to future addresses. And listen does not create any sockets at all, which makes your whole sentence a little bit strange.",
                "fecha": { "$date" : "2013-07-26T10:51:08Z" },
                "usuario": "Mecki",
                "usuario_id": 874
            },
            {
                "decripcion": "@Ben When a new address is added to the system, it is also an \"existing local address\", it just started to exist. I did not say \"to all currently existing local addresses\". Actually I even say that the socket is in fact really bound to the wildcard, which means the socket is bound to whatever matches this wildcard, now, tomorrow and in hundred years. Similar for source and destination, you are just nitpicking here. Do you have any real technical contribution to make?",
                "fecha": { "$date" : "2013-07-26T13:40:13Z" },
                "usuario": "Mecki",
                "usuario_id": 874
            },
            {
                "decripcion": "@Mecki: You really think that the word existing includes things that do not exist now but will in the future?  Source and destination is not a nitpick.  When incoming packets are matched to a socket, you're saying that the destination address in the packet will be matched against a \"source\" address of the socket?  That's wrong and you know it, you already said that source and destination are opposites.  The local address on the socket is matched against the destination address of incoming packets, and placed in the source address on outgoing packets.",
                "fecha": { "$date" : "2013-07-26T13:56:08Z" },
                "usuario": "Ben Voigt",
                "usuario_id": 873
            },
            {
                "decripcion": "@Mecki: That makes so much more sense if you say \"The local address of the socket is the source address of outgoing packets and the destination address of incoming packets\".  Packets have source and destination addresses.  Hosts, and sockets on hosts, don't.  For datagram sockets both peers are equal.  For TCP sockets, because of the three-way handshake, there's an originator (client) and a responder (server), but that still doesn't mean the connection or connected sockets have a source and destination either, because traffic flows both ways.",
                "fecha": { "$date" : "2013-08-20T14:23:38Z" },
                "usuario": "Ben Voigt",
                "usuario_id": 873
            }
        ],
        "usuario": "Mecki",
        "usuario_id": 874
    },
    {
        "_id": 556,
        "fecha": { "$date" : "2020-06-10T22:34:05Z" },
        "decripcion": "\nMecki's answer is absolutly perfect, but it's worth adding that FreeBSD also supports SO_REUSEPORT_LB, which mimics Linux' SO_REUSEPORT behaviour - it balances the load; see setsockopt(2)\n    ",
        "votes": 14,
        "comentarios": [
            {
                "decripcion": "Nice finding. I didn't see that on the man pages when I checked. Definitely worth to be mentioned as it can be be very helpful when porting Linux software to FreeBSD.",
                "fecha": { "$date" : "2020-06-12T00:45:49Z" },
                "usuario": "Mecki",
                "usuario_id": 874
            }
        ],
        "usuario": "Edward Tomasz Napierala",
        "usuario_id": 875
    },
    {
        "_id": 557,
        "fecha": { "$date" : "2019-01-13T14:12:41Z" },
        "decripcion": "\n\n  This error can occur when the local network system aborts a\n  connection, such as when WinSock closes an established connection\n  after data retransmission fails (receiver never acknowledges data sent\n  on a datastream socket).\n\n\nSee this MSDN article. See also Some information about 'Software caused connection abort'.\n    ",
        "votes": 56,
        "comentarios": [
            {
                "decripcion": "WSAECONNABORTED - An understandable explanation",
                "fecha": { "$date" : "2012-11-21T02:18:33Z" },
                "usuario": "Mat Gessel",
                "usuario_id": 876
            },
            {
                "decripcion": "@MatGessel That article just repeats the confusion, and adds some of its own. WSAECONNABORTED is a Winsock error code, so there cannot possibly be a Berkeley explanation for it. The situation described about the HTTP server would produce ECONNRESET, not WSAECONNABORTED.",
                "fecha": { "$date" : "2012-12-04T22:13:34Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "@EJP,  \t I am also getting this exception while sending/writing (outs.write(audioBytes);) byte[] in to OutputStream. When audio is plying and while playing if user clicks on any other menu (which send an server request) I got the same error on console. so is it safe to ignore this exception?",
                "fecha": { "$date" : "2015-03-10T06:47:46Z" },
                "usuario": "Amogh",
                "usuario_id": 878
            },
            {
                "decripcion": "@rustyx All three sources cited here state that it is produced by ACK failures. If you have a source for your own claim please cite it.",
                "fecha": { "$date" : "2015-05-27T05:52:36Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "This is not a real answer as it doesn't give you information to pursue the problem further. The answer here is basically \"something bad happened on the network\". It would be really helpful to understand what further logs and other records of activity could allow me to pinpoint the underlying issue.",
                "fecha": { "$date" : "2017-03-20T14:05:31Z" },
                "usuario": "Derek Bennett",
                "usuario_id": 879
            }
        ],
        "usuario": "user207421",
        "usuario_id": 877
    },
    {
        "_id": 558,
        "fecha": { "$date" : "2017-05-23T11:47:23Z" },
        "decripcion": "\nThe java.net.SocketException is thrown when there is an error creating or accessing a socket (such as TCP). This usually can be caused when the server has terminated the connection (without properly closing it), so before getting the full response. In most cases this can be caused either by the timeout issue (e.g. the response takes too much time or server is overloaded with the requests), or the client sent the SYN, but it didn't receive ACK (acknowledgment of the connection termination). For timeout issues, you can consider increasing the timeout value.\n\nThe Socket Exception usually comes with the specified detail message about the issue.\n\nExample of detailed messages:\n\n\n\n  Software caused connection abort: recv failed.\n\n\nThe error indicates an attempt to send the message and the connection has been aborted by your server. If this happened while connecting to the database, this can be related to using not compatible Connector/J JDBC driver.\n\nPossible solution: Make sure you've proper libraries/drivers in your CLASSPATH.\n\n  Software caused connection abort: connect.\n\n\nThis can happen when there is a problem to connect to the remote. For example due to virus-checker rejecting the remote mail requests.\n\nPossible solution: Check Virus scan service whether it's blocking the port for the outgoing requests for connections.\n\n  Software caused connection abort: socket write error.\n\n\nPossible solution: Make sure you're writing the correct length of bytes to the stream. So double check what you're sending. See this thread.\n\n  Connection reset by peer: socket write error / Connection aborted by peer: socket write error\n\n\nThe application did not check whether keep-alive connection had been timed out on the server side.\n\nPossible solution: Ensure that the HttpClient is non-null before reading from the connection.E13222_01\n\n  Connection reset by peer.\n\n\nThe connection has been terminated by the peer (server).\n\n  Connection reset.\n\n\nThe connection has been either terminated by the client or closed by the server end of the connection due to request with the request.\n\nSee: What's causing my java.net.SocketException: Connection reset?\n\n    ",
        "votes": 13,
        "comentarios": [
            {
                "decripcion": "Only one of these 6 points actually answers the question, incorrectly. Several others are incorrect as well. The application can't 'check whether keep-alive connection had been timed out on the server side.' The HttpClient being null cannot possibly cause a SocketException. Not writing the correct length to the stream doesn't either.",
                "fecha": { "$date" : "2017-07-04T01:09:31Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "kenorb",
        "usuario_id": 880
    },
    {
        "_id": 559,
        "fecha": { "$date" : "2013-01-31T12:08:48Z" },
        "decripcion": "\nI have seen this most often when a corporate firewall on a workstation/laptop gets in the way, it kills the connection.\n\neg. I have a server process and a client process on the same machine. The server is listening on all interfaces (0.0.0.0) and the client attempts a connection to the public/home interface (note not the loopback interface 127.0.0.1).\n\nIf the machine is has its network disconnected (eg wifi turned off) then the connection is formed. If the machine is connected to the corporate network (directly or vpn) then the connection is formed.\n\nHowever, if the machine is connected to a public wifi (or home network) then the firewall kicks in an kills the connection. In this situation connecting the client to the loopback interface works fine, just not to the home/public interface.\n\nHope this helps.\n    ",
        "votes": 10,
        "comentarios": [
            {
                "decripcion": "Firewalls prevent connections. The question is about resetting an existing connection.",
                "fecha": { "$date" : "2016-07-22T23:28:32Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "user2028913",
        "usuario_id": 881
    },
    {
        "_id": 560,
        "fecha": { "$date" : "2010-01-24T11:01:30Z" },
        "decripcion": "\nTo prove which component fails I would monitor the TCP/IP communication using wireshark and look who is actaully closing the port, also timeouts could be relevant.\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "Nobody is closing the port. The operating system is aborting the connection.",
                "fecha": { "$date" : "2014-11-19T09:42:34Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "@EJP I've seen this happen when the gets overloaded and runs out of memory. I am not sure it is the OS that closes the connection but JVM goes wild.",
                "fecha": { "$date" : "2015-04-10T22:39:00Z" },
                "usuario": "Zee",
                "usuario_id": 882
            },
            {
                "decripcion": "@Zee There is a difference between closing a port, which is visible as a FIN in Wireshark, and aborting the connection, which isn't.",
                "fecha": { "$date" : "2015-05-27T05:47:46Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "stacker",
        "usuario_id": 883
    },
    {
        "_id": 561,
        "fecha": { "$date" : "2014-11-25T07:33:06Z" },
        "decripcion": "\nFor anyone using simple Client Server programms and getting this error, it is a problem of unclosed (or closed to early) Input or Output Streams.\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "No it isn't. That would consitute a socket leak, which would eventually cause an FD exhaustion.",
                "fecha": { "$date" : "2015-05-27T05:48:47Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "PRO_gramista",
        "usuario_id": 884
    },
    {
        "_id": 562,
        "fecha": { "$date" : "2010-01-24T09:57:14Z" },
        "decripcion": "\nHave you checked the Tomcat source code and the JVM source ? That may give you more help.\n\nI think your general thinking is good. I would expect a ConnectException in the scenario that you couldn't connect. The above looks very like it's client-driven.\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "Yes, I've checked. Tomcat's sources didn't contain any permutation of the sentence, thanks.",
                "fecha": { "$date" : "2010-01-24T10:00:50Z" },
                "usuario": "Eran Medan",
                "usuario_id": 885
            },
            {
                "decripcion": "No he hasn't checked the Tomcat source AND the JVM source.",
                "fecha": { "$date" : "2010-01-24T11:32:12Z" },
                "usuario": "Stephen C",
                "usuario_id": 886
            },
            {
                "decripcion": "Or if he has checked the JVM source, he has not checked all of it.",
                "fecha": { "$date" : "2010-01-24T12:12:02Z" },
                "usuario": "Stephen C",
                "usuario_id": 886
            },
            {
                "decripcion": "@Ehrann - the message string is most likely in the native sources.  But you should also check the event log.  IMO, the latter is likely to be more informative.",
                "fecha": { "$date" : "2010-01-26T21:39:17Z" },
                "usuario": "Stephen C",
                "usuario_id": 886
            },
            {
                "decripcion": "This message string comes from the operating system actually.",
                "fecha": { "$date" : "2011-10-12T23:15:43Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "Brian Agnew",
        "usuario_id": 887
    },
    {
        "_id": 563,
        "fecha": { "$date" : "2016-06-28T11:41:53Z" },
        "decripcion": "\nI was facing the same issue.\nCommonly This kind of error occurs due to client has closed its connection and server still trying to write on that client.\nSo make sure that your client has its connection open until server done with its outputstream.\nAnd one more thing, Don`t forgot to  close input and output stream.\n\nHope this helps. \nAnd if still facing issue than brief your problem here in details.\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "@BhavinChhatrola No, an incorrect answer. The situation described produces 'connection reset by peer', not the error in the question.",
                "fecha": { "$date" : "2017-07-04T01:02:19Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "Nirav Chhatrola",
        "usuario_id": 888
    },
    {
        "_id": 564,
        "fecha": { "$date" : "2016-09-22T09:19:42Z" },
        "decripcion": "\nThis error happened to me while testing my soap service with SoapUI client, basically I was trying to get a very big message (>500kb) and SoapUI closed the connection by timeout.\n\n\n  On SoapUI go to:\n  \n  File-->Preferences--Socket Timeout(ms)\n\n\n...and put a large value, such as 180000 (3 minutes), this won't be the perfect fix for your issue because the file is in fact to large, but at least you will have a response.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Marco",
        "usuario_id": 889
    },
    {
        "_id": 565,
        "fecha": { "$date" : "2017-02-23T12:22:51Z" },
        "decripcion": "\nClosed connection in another client\n\nIn my case, the error was:\n\njava.net.SocketException: Software caused connection abort: recv failed\n\n\nIt was received in eclipse while debugging a java application accessing a H2 database. The source of the error was that I had initially opened the database with SQuirreL to check manually for integrity. I did use the flag to enable multiple connections to the same DB (i.e. AUTO_SERVER=TRUE), so there was no problem connecting to the DB from java.\n\nThe error appeared when, after a while --it is a long java process-- I decided to close SQuirreL to free resources. It appears as if SQuirreL were the one \"owning\" the DB server instance and that it was shut down with the SQuirreL connection.\n\nRestarting the Java application did not yield the error again.\n\nconfig\n\n\nWindows 7\nEclipse Kepler\nSQuirreL 3.6\norg.h2.Driver ver 1.4.192\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "manuelvigarcia",
        "usuario_id": 890
    },
    {
        "_id": 566,
        "fecha": { "$date" : "2017-10-13T08:52:24Z" },
        "decripcion": "\nIn the situation explained below, client side will throw such an exception:\n\nThe server is asked to authenticate client certificate, but the client provides a certificate which Extended Key Usage doesn't support client auth, so the server doesn't accept the client's certificate, and then it closes the connection.\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "This answer is incorrect. In the case you describe an SSLException will be thrown.",
                "fecha": { "$date" : "2018-05-16T00:21:54Z" },
                "usuario": "President James K. Polk",
                "usuario_id": 891
            },
            {
                "decripcion": "actually it throw SocketException just like the current question , i had tested",
                "fecha": { "$date" : "2019-03-28T07:31:40Z" },
                "usuario": "xiaoming",
                "usuario_id": 892
            }
        ],
        "usuario": "xiaoming",
        "usuario_id": 892
    },
    {
        "_id": 567,
        "fecha": { "$date" : "2015-09-27T12:56:36Z" },
        "decripcion": "\nMy server was throwing this exception in the pass 2 days and I solved it by moving the disconnecting function with: \n\noutputStream.close();\ninputStream.close();\nClient.close();\n\n\nTo the end of the  listing thread.\nif it will helped anyone.\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "Sefi Erlich",
        "usuario_id": 893
    },
    {
        "_id": 568,
        "fecha": { "$date" : "2019-12-20T08:16:04Z" },
        "decripcion": "\nIn my case, I developped the client and the server side, and I have the exception : \n\n\n  Cause : error marshalling arguments; nested exception is:\n  java.net.SocketException: Software caused connection abort: socket\n  write error\n\n\nwhen classes in client and server are different. I don't download server's classes (Interfaces) on the client, I juste add same files in the project.\nBut the path must be exactly the same.\nFor example, on the server project I have java\\rmi\\services packages with some serviceInterface and implementations, I have to create the same package on the client project. If I change it by java/rmi/server/services for example, I get the above exception.\nSame exception if the interface version is different between client and server (even with an empty row added inadvertently ... I think rmi makes a sort of hash of classes to check version ... I don't know...\nIf it could help ...\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "Elloco",
        "usuario_id": 894
    },
    {
        "_id": 569,
        "fecha": { "$date" : "2016-12-01T11:23:03Z" },
        "decripcion": "\nI was facing the same problem with wireMock while mocking the rest API calls.\nEarlier I was defining the server like this:\n\nWireMockServer wireMockServer = null;\n\n\nBut it should be defined like as shown below:\n\n@Rule \npublic WireMockRule wireMockRule = new WireMockRule(8089);\n\n    ",
        "votes": -3,
        "comentarios": [
            {
                "decripcion": "That would cause a NullPointerException, not this problem.",
                "fecha": { "$date" : "2017-07-04T01:10:02Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "Yallaling Goudar",
        "usuario_id": 895
    },
    {
        "_id": 570,
        "fecha": { "$date" : "2017-03-13T10:17:05Z" },
        "decripcion": "\nBased on this example, here's a simple network client-server pair using Swing. Note some issues related to correct synchronization: The GUI itself is constructed on the event dispatch thread using invokeLater(). In addition, the code relies on the thread safety of append(). Finally, it incorporates a handy tip from the article Text Area Scrolling.\n\nUpdate: In Java 7, append() is no longer marked as thread safe; invokeLater() is used in display() to sequence updates.\n\n\n\npackage net;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.Scanner;\nimport javax.swing.*;\nimport javax.swing.text.DefaultCaret;\n\n/**\n * A simple network client-server pair\n * @http://stackoverflow.com/questions/3245805\n */\npublic class Echo implements ActionListener, Runnable {\n\n    private static final String HOST = \"127.0.0.1\";\n    private static final int PORT = 12345;\n    private final JFrame f = new JFrame();\n    private final JTextField tf = new JTextField(25);\n    private final JTextArea ta = new JTextArea(15, 25);\n    private final JButton send = new JButton(\"Send\");\n    private volatile PrintWriter out;\n    private Scanner in;\n    private Thread thread;\n    private Kind kind;\n\n    public static enum Kind {\n\n        Client(100, \"Trying\"), Server(500, \"Awaiting\");\n        private int offset;\n        private String activity;\n\n        private Kind(int offset, String activity) {\n            this.offset = offset;\n            this.activity = activity;\n        }\n    }\n\n    public Echo(Kind kind) {\n        this.kind = kind;\n        f.setTitle(\"Echo \" + kind);\n        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        f.getRootPane().setDefaultButton(send);\n        f.add(tf, BorderLayout.NORTH);\n        f.add(new JScrollPane(ta), BorderLayout.CENTER);\n        f.add(send, BorderLayout.SOUTH);\n        f.setLocation(kind.offset, 300);\n        f.pack();\n        send.addActionListener(this);\n        ta.setLineWrap(true);\n        ta.setWrapStyleWord(true);\n        DefaultCaret caret = (DefaultCaret) ta.getCaret();\n        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);\n        display(kind.activity + HOST + \" on port \" + PORT);\n        thread = new Thread(this, kind.toString());\n    }\n\n    public void start() {\n        f.setVisible(true);\n        thread.start();\n    }\n\n    //@Override\n    public void actionPerformed(ActionEvent ae) {\n        String s = tf.getText();\n        if (out != null) {\n            out.println(s);\n        }\n        display(s);\n        tf.setText(\"\");\n    }\n\n    //@Override\n    public void run() {\n        try {\n            Socket socket;\n            if (kind == Kind.Client) {\n                socket = new Socket(HOST, PORT);\n            } else {\n                ServerSocket ss = new ServerSocket(PORT);\n                socket = ss.accept();\n            }\n            in = new Scanner(socket.getInputStream());\n            out = new PrintWriter(socket.getOutputStream(), true);\n            display(\"Connected\");\n            while (true) {\n                display(in.nextLine());\n            }\n        } catch (Exception e) {\n            display(e.getMessage());\n            e.printStackTrace(System.err);\n        }\n    }\n\n    private void display(final String s) {\n        EventQueue.invokeLater(new Runnable() {\n            //@Override\n            public void run() {\n                ta.append(s + \"\\u23CE\\n\");\n            }\n        });\n    }\n\n    public static void main(String[] args) {\n        EventQueue.invokeLater(new Runnable() {\n            //@Override\n            public void run() {\n                new Echo(Kind.Server).start();\n                new Echo(Kind.Client).start();\n            }\n        });\n    }\n}\n\n    ",
        "votes": 24,
        "comentarios": [
            {
                "decripcion": "Ah, that reminds me: this related example shows how a server can accept multiple clients.",
                "fecha": { "$date" : "2013-02-16T19:12:09Z" },
                "usuario": "trashgod",
                "usuario_id": 898
            },
            {
                "decripcion": "I keep seeing code all over the internet that happens to work because it uses Swing methods that happen to be thread-safe (such as setText), and I can't find a good example of how to have a background network thread send events to the EDT :/",
                "fecha": { "$date" : "2013-03-30T01:47:45Z" },
                "usuario": "Nicol\u00e1s",
                "usuario_id": 899
            },
            {
                "decripcion": "@Nicol\u00e1s: I usually use SwingWorker.",
                "fecha": { "$date" : "2013-03-30T03:45:03Z" },
                "usuario": "trashgod",
                "usuario_id": 898
            }
        ],
        "usuario": "trashgod",
        "usuario_id": 898
    },
    {
        "_id": 571,
        "fecha": { "$date" : "2010-07-14T11:14:25Z" },
        "decripcion": "\nA basic example would be this:\n(based on tutorial from Socket Programming in Java, by A.P.Rajshekhar)\n\npublic static void main(String[] args) throws\n    UnknownHostException, IOException, InterruptedException {\n\n    Thread serverThread = new Thread(new Runnable() {\n\n        @Override\n        public void run() {\n            try {\n                // create the server socket\n                ServerSocket server = new ServerSocket(\n                    8888, 5, InetAddress.getLocalHost());\n                // wait until clients try to connect\n                Socket client = server.accept();\n\n                BufferedReader in = new BufferedReader(new\n                    InputStreamReader(client.getInputStream()));\n\n                // loop until the connection is closed\n                String line;\n                while ((line = in.readLine()) != null) {\n                    // output what is received\n                    System.out.println(line);\n                }\n\n\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n\n    Thread clientThread = new Thread(new Runnable() {\n\n        @Override\n        public void run() {\n            try {\n                // connect with the server\n                Socket s = new Socket(InetAddress.getLocalHost(), 8888);\n\n                // attach to socket's output stream with auto flush turned on\n                PrintWriter out = new PrintWriter(s.getOutputStream(), true);\n\n                // send some text\n                out.println(\"Start\");\n                out.println(\"End\");\n                // close the stream\n                out.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n\n    // start server\n    serverThread.start();\n    // wait a bit\n    Thread.sleep(1000);\n    // start client\n    clientThread.start();\n}\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "But is it possible to transfer data from both sides?   Because a ServerSocket has no function that equals to what the client is having such as   s.getOutputStream(),then how is it being done? What I mean is that i need to have conversation that would basic on what you wrote,but how the server would give back hus answer?",
                "fecha": { "$date" : "2010-07-14T11:26:31Z" },
                "usuario": "Inbal",
                "usuario_id": 900
            },
            {
                "decripcion": "Once the connection is established - both sides are equal. Hence they can both send and receive data",
                "fecha": { "$date" : "2010-07-14T11:44:41Z" },
                "usuario": "Eugene Ryzhikov",
                "usuario_id": 901
            }
        ],
        "usuario": "Sentry",
        "usuario_id": 902
    },
    {
        "_id": 572,
        "fecha": { "$date" : "2016-05-19T00:16:14Z" },
        "decripcion": "\nThere is no TCP API that will tell you the current state of the connection. isConnected() and isClosed() tell you the current state of your socket. Not the same thing.\n\n\nisConnected() tells you whether you have connected this socket. You have, so it returns true.\nisClosed() tells you whether you have closed this socket. Until you have, it returns false.\nIf the peer has closed the connection in an orderly way \n\n\nread() returns -1\nreadLine() returns null\nreadXXX() throws EOFException for any other XXX.\nA write will throw an IOException: 'connection reset by peer', eventually, subject to buffering delays.\n\nIf the connection has dropped for any other reason, a write will throw an IOException, eventually, as above, and a read may do the same thing.\nIf the peer is still connected but not using the connection, a read timeout can be used.\nContrary to what you may read elsewhere, ClosedChannelException doesn't tell you this. [Neither does SocketException: socket closed.] It only tells you that you closed the channel, and then continued to use it. In other words, a programming error on your part. It does not indicate a closed connection.\nAs a result of some experiments with Java 7 on Windows XP it also appears that if:\n\n\nyou're selecting on OP_READ\nselect() returns a value of greater than zero\nthe associated SelectionKey is already invalid (key.isValid() == false)\n\n\nit means the peer has reset the connection. However this may be peculiar to either the JRE version or platform.\n\n    ",
        "votes": 202,
        "comentarios": [
            {
                "decripcion": "It is hard to believe that the TCP protocol, which is connection oriented, can't even know the status of its connection... Do the guys that come up with this protocols drive their cars with eyes closed?",
                "fecha": { "$date" : "2014-08-11T12:42:42Z" },
                "usuario": "PedroD",
                "usuario_id": 903
            },
            {
                "decripcion": "@PedroD On the contrary: it was deliberate. Previous protocol suites such as SNA had a 'dial tone'. TCP was designed to survive a nuclear war, and, more trivially, router downs and ups: hence the complete absence of anything like a dial tone, connection status, etc.; and it is also why TCP keepalive is described in the RFCs as a controversial feature, and why it is always off by default. TCP is still with us. SNA? IPX? ISO? Not. They got it right.",
                "fecha": { "$date" : "2014-08-11T12:50:26Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "I don't believe that's a good excuse for hiding this information from us. Knowing that the connection was lost doesn't necessarily mean that the protocol is less fault resistant, it always depend on what we do with that knowledge... For me the method isBound and isConnected from java are pure mock methods, they have no use, but express the need for a connection event listener... But I reiterate: knowing that the connection was lost does not make the protocol worse. Now if those protocols you're saying killed the connection as soon as they detected it was lost, that is a different story.",
                "fecha": { "$date" : "2014-08-11T13:02:43Z" },
                "usuario": "PedroD",
                "usuario_id": 903
            },
            {
                "decripcion": "@Pedro You don't understand. It isn't an 'excuse'. There is no information to withhold. There is no dial tone. TCP doesn't know whether the connection has failed until you try to do something to it. That was the fundamental design criterion.",
                "fecha": { "$date" : "2014-08-11T22:37:41Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "@EJP thanks for your answer. Do you perhaps know how to check if a socket got closed without \"blocking\"? Using read or readLine is going to block. Is there a way to realize if the other socket got closed with the available method, it seems to return 0 instead of -1.",
                "fecha": { "$date" : "2014-10-14T14:07:33Z" },
                "usuario": "insumity",
                "usuario_id": 904
            }
        ],
        "usuario": "user207421",
        "usuario_id": 877
    },
    {
        "_id": 573,
        "fecha": { "$date" : "2017-05-23T12:34:41Z" },
        "decripcion": "\nIt is general practice in various messaging protocols to keep heartbeating each other (keep sending ping packets) the packet does not need to be very large. The probing mechanism will allow you to detect the disconnected client even before TCP figures it out in general (TCP timeout is far higher) Send a probe and wait for say 5 seconds for a reply, if you do not see reply for say 2-3 subsequent probes, your player is disconnected.\n\nAlso, related question\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "It is 'general practice' in some protocols. I note that HTTP, the most used application protocol on the planet, does not have a PING operation.",
                "fecha": { "$date" : "2016-11-02T09:22:37Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "@user207421 because HTTP/1 is one shot protocol. You send request, you receive response. And you are done. Socket is closed. The Websocket extension does have PING operation, so does HTTP/2.",
                "fecha": { "$date" : "2018-09-17T12:25:11Z" },
                "usuario": "Micha\u0142 Zabielski",
                "usuario_id": 905
            },
            {
                "decripcion": "I recommended heartbeating with a single byte if possible :)",
                "fecha": { "$date" : "2018-12-08T13:48:32Z" },
                "usuario": "Stefan Reich",
                "usuario_id": 906
            },
            {
                "decripcion": "@Micha\u0142Zabielski It is because the designers of HTTP didn't specify it. You don't know why not. HTTP/1.1 is not a one shot protocol. The socket is not closed: HTTP connections are persistent by default. FTP, SMTP, POP3, IMAP, TLS, ... don't have heartbeats.",
                "fecha": { "$date" : "2019-01-28T15:58:51Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "Aren't heartbeat and ping two different things? When you send a ping you expect a pong, but with heartbeats you don't expect anything.",
                "fecha": { "$date" : "2020-12-30T15:35:37Z" },
                "usuario": "DFSFOT",
                "usuario_id": 907
            }
        ],
        "usuario": "Kalpak Gadre",
        "usuario_id": 908
    },
    {
        "_id": 574,
        "fecha": { "$date" : "2012-04-20T05:40:27Z" },
        "decripcion": "\nI see the other answer just posted, but I think you are interactive with clients playing your game, so I may pose another approach (while BufferedReader is definitely valid in some cases).\n\nIf you wanted to... you could delegate the \"registration\" responsibility to the client. I.e. you would have a collection of connected users with a timestamp on the last message received from each... if a client times out, you would force a re-registration of the client, but that leads to the quote and idea below.\n\n\n  I have read that to actually determine whether or not a socket has\n  been closed data must be written to the output stream and an exception\n  must be caught. This seems like a really unclean way to handle this\n  situation.\n\n\nIf your Java code did not close/disconnect the Socket, then how else would you be notified that the remote host closed your connection?  Ultimately, your try/catch is doing roughly the same thing that a poller listening for events on the ACTUAL socket would be doing.  Consider the following:\n\n\nyour local system could close your socket without notifying you... that is just the implementation of Socket (i.e. it doesn't poll the hardware/driver/firmware/whatever for state change).\nnew Socket(Proxy p)... there are multiple parties (6 endpoints really) that could be closing the connection on you...\n\n\nI think one of the features of the abstracted languages is that you are abstracted from the minutia.  Think of the using keyword in C# (try/finally) for SqlConnection s or whatever... it's just the cost of doing business... I think that try/catch/finally is the accepted and necesary pattern for Socket use.\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "Your local system cannot 'close your socket', with or without notifying you. Your question starting 'if your Java code did not close/disconnect the socket ...?' doesn't make any sense either.",
                "fecha": { "$date" : "2012-04-20T06:03:09Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "What exactly prevents system (Linux for example) from force closing the socket? Is it still possible to do it from 'gdb' using 'call close' command?",
                "fecha": { "$date" : "2016-11-02T17:08:56Z" },
                "usuario": "Andrey Lebedenko",
                "usuario_id": 909
            },
            {
                "decripcion": "@AndreyLebedenko Nothing 'exactly prevents it', but it doesn't do it.",
                "fecha": { "$date" : "2017-05-16T23:59:44Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "@EJB who does then?",
                "fecha": { "$date" : "2017-05-17T15:34:01Z" },
                "usuario": "Andrey Lebedenko",
                "usuario_id": 909
            },
            {
                "decripcion": "@AndreyLebedenko Nobody does it. Only the application can close its own sockets, unless it exits without doing so, in which case the OS will clean up.",
                "fecha": { "$date" : "2018-01-24T06:53:43Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "Scottley",
        "usuario_id": 910
    },
    {
        "_id": 575,
        "fecha": { "$date" : "2020-08-24T02:30:34Z" },
        "decripcion": "\nI faced similar problem. In my case client must send data periodically. I hope you have same requirement. Then I set SO_TIMEOUT socket.setSoTimeout(1000 * 60 * 5); which is throw java.net.SocketTimeoutException when specified time is expired. Then I can detect dead client easily.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "hurelhuyag",
        "usuario_id": 911
    },
    {
        "_id": 576,
        "fecha": { "$date" : "2012-04-20T05:55:20Z" },
        "decripcion": "\nI think this is nature of tcp connections, in that standards it takes about 6 minutes of  silence in transmission before we conclude that out connection is gone!\nSo I don`t think you can find an exact solution for this problem. Maybe the better way is to write some handy code to guess when server should suppose a user connection is closed.\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "It can take a lot more than that, up to two hours.",
                "fecha": { "$date" : "2012-04-20T06:06:39Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "Ehsan Khodarahmi",
        "usuario_id": 912
    },
    {
        "_id": 577,
        "fecha": { "$date" : "2020-11-26T21:48:41Z" },
        "decripcion": "\nHere you are another general solution for any data type.\nint offset = 0;\nbyte[] buffer = new byte[8192];\n\ntry {\n    do {\n        int b = inputStream.read();\n\n        if (b == -1)\n           break;\n\n        buffer[offset++] = (byte) b;\n\n        //check offset with buffer length and reallocate array if needed\n    } while (inputStream.available() > 0);\n} catch (SocketException e) {\n    //connection was lost\n}\n\n//process buffer\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Thomas.",
        "usuario_id": 913
    },
    {
        "_id": 578,
        "fecha": { "$date" : "2019-01-03T12:29:26Z" },
        "decripcion": "\nAs @user207421 say there is no way to know the current state of the connection because of the TCP/IP Protocol Architecture Model. So the server has to notice you before closing the connection or you check it by yourself. \nThis is a simple example that shows how to know the socket is closed by the server:\n\nsockAdr = new InetSocketAddress(SERVER_HOSTNAME, SERVER_PORT);\nsocket = new Socket();\ntimeout = 5000;\nsocket.connect(sockAdr, timeout);\nreader = new BufferedReader(new InputStreamReader(socket.getInputStream());\nwhile ((data = reader.readLine())!=null) \n      log.e(TAG, \"received -> \" + data);\nlog.e(TAG, \"Socket closed !\");\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "ucMedia",
        "usuario_id": 914
    },
    {
        "_id": 579,
        "fecha": { "$date" : "2019-08-01T23:03:23Z" },
        "decripcion": "\nThats how I handle it \n\n while(true) {\n        if((receiveMessage = receiveRead.readLine()) != null ) {  \n\n        System.out.println(\"first message same :\"+receiveMessage);\n        System.out.println(receiveMessage);      \n\n        }\n        else if(receiveRead.readLine()==null)\n        {\n\n        System.out.println(\"Client has disconected: \"+sock.isClosed()); \n        System.exit(1);\n         }    } \n\n\nif the result.code == null \n    ",
        "votes": -2,
        "comentarios": [
            {
                "decripcion": "You don't need to call readLine() twice. You already know it was null in the else block.",
                "fecha": { "$date" : "2019-10-31T00:48:02Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "Petar Ceho",
        "usuario_id": 915
    },
    {
        "_id": 580,
        "fecha": { "$date" : "2017-05-31T13:29:02Z" },
        "decripcion": "\nOn Linux when write()ing into a socket which the other side, unknown to you, closed will provoke a SIGPIPE signal/exception however you want to call it. However if you don't want to be caught out by the SIGPIPE you can use send() with the flag MSG_NOSIGNAL. The send() call will return with -1 and in this case you can check errno which will tell you that you tried to write a broken pipe (in this case a socket) with the value EPIPE which according to errno.h is equivalent to 32. As a reaction to the EPIPE you could double back and try to reopen the socket and try to send your information again.\n    ",
        "votes": -4,
        "comentarios": [
            {
                "decripcion": "The send() call will return -1 only if the outgoing data got buffered for long enough for the send timers to expire. It almost certainly won't happen on the first send after the disconnect, due to buffering at both ends and the asynchronous nature of send() under the hood.",
                "fecha": { "$date" : "2019-04-19T12:58:41Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "MikeK",
        "usuario_id": 916
    },
    {
        "_id": 581,
        "fecha": { "$date" : "2009-02-25T11:30:57Z" },
        "decripcion": "\nThe javadoc for SocketException states that it is\n\n\n  Thrown to indicate that there is an error in the underlying protocol such as a TCP error\n\n\nIn your case it seems that the connection has been closed by the server end of the connection. This could be an issue with the request you are sending or an issue at their end.\n\nTo aid debugging you could look at using a tool such as Wireshark to view the actual network packets. Also, is there an alternative client to your Java code that you could use to test the web service? If this was successful it could indicate a bug in the Java code.\n\nAs you are using Commons HTTP Client have a look at the Common HTTP Client Logging Guide. This will tell you how to log the request at the HTTP level. \n    ",
        "votes": 65,
        "comentarios": [
            {
                "decripcion": "I don't believe that Connection Reset means that the server closed the connection (via sending a FYN flag). I believe that it means it is no longer responding to ACK flags, or that it is not responding per TCP/IP). If the FYN flag was sent, or rather the server closed the connection, you would just get -1 from read(), and an EOFException. When I get home I plan on confirming this either way.",
                "fecha": { "$date" : "2010-04-22T15:39:57Z" },
                "usuario": "Zombies",
                "usuario_id": 918
            },
            {
                "decripcion": "In response to Zombies comment, did anyone ever find out if the connection reset means the server has closed the connection?",
                "fecha": { "$date" : "2011-06-14T17:26:05Z" },
                "usuario": "James",
                "usuario_id": 533
            },
            {
                "decripcion": "In my experience with a similar problem in the past, the cause was a bad network connection on the server side that causes too many connections timeout. The problem with the timeout of a Socket is that it's default behavior is not to timeout (infinite timeout). (Continues)",
                "fecha": { "$date" : "2011-07-27T11:37:57Z" },
                "usuario": "Filipe Palrinhas",
                "usuario_id": 919
            },
            {
                "decripcion": "(Continuation) Even HTTPClient doesn't set a default timeout on the created sockets. On the other hand, the server side all sockets must timeout after a few minutes or the connections will get stuck (very bad idea on a server). So if the connection times out on the server side, the client will get a connection reset (server closed the connection), if the client times out first the exception will be a ConnectionTimeoutException. Since this is a transient problem, the solution is to catch and log all this exceptions and retry again.",
                "fecha": { "$date" : "2011-07-27T11:38:19Z" },
                "usuario": "Filipe Palrinhas",
                "usuario_id": 919
            },
            {
                "decripcion": "@FilipePalrinhas you're very right about the fact that HttpClient doesn't set a finite timeout on the socket connection.",
                "fecha": { "$date" : "2013-09-20T06:01:46Z" },
                "usuario": "asgs",
                "usuario_id": 920
            }
        ],
        "usuario": "Mark",
        "usuario_id": 921
    },
    {
        "_id": 582,
        "fecha": { "$date" : "2017-11-27T17:22:24Z" },
        "decripcion": "\nThis error happens on your side and NOT the other side. If the other side reset the connection, then the exception message should say:\n\njava.net.SocketException reset by peer\n\n\nThe cause is the connection inside HttpClient is stale. Check stale connection for SSL does not fix this error. Solution: dump your client and recreate.\n    ",
        "votes": 48,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 583,
        "fecha": { "$date" : "2011-10-21T10:41:23Z" },
        "decripcion": "\nIf you experience this trying to access Web services deployed on a Glassfish3 server, you might want to tune your http-thread-pool settings. That fixed SocketExceptions we had when many concurrent threads was calling the web service.\n\n\nGo to admin console\nNavigate to \"Configurations\"->\"Server config\"->\"Thread pools\"->\"http-thread-pool\".\nChange setting \"Max Thread Pool Size\" from 5 to 32 \nChange setting \"Min Thread Pool Size\" from 2 to 16 \nRestart Glassfish.\n\n    ",
        "votes": 18,
        "comentarios": [
            {
                "decripcion": "This helped me on Glassfish 4 also",
                "fecha": { "$date" : "2018-05-31T12:12:29Z" },
                "usuario": "Dmitry",
                "usuario_id": 922
            }
        ],
        "usuario": "P\u00e5lOliver",
        "usuario_id": 923
    },
    {
        "_id": 584,
        "fecha": { "$date" : "2017-05-23T12:18:03Z" },
        "decripcion": "\nI did also stumble upon this error. In my case the problem was I was using JRE6, with support for TLS1.0. The server only supported TLS1.2, so this error was thrown.\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "Very difficult to believe. You should have got an SSLHandshakeException.",
                "fecha": { "$date" : "2016-09-14T12:27:05Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "@EJP: My answer was written a long time ago, so I can't check out the issue again. I only remember stumbling to this error + updaten to TLS 1.2 fixed the problem. After a short googeling, I see others got the java.net.SocketException as well, when using TLS1.0 in combination of a server supporting TLS1.2 at mimimum. For example assuresign.tenderapp.com/kb/how-to/\u2026.",
                "fecha": { "$date" : "2016-09-15T08:31:26Z" },
                "usuario": "Jacob van Lingen",
                "usuario_id": 924
            },
            {
                "decripcion": "Yes, this can happen with Java 7 too. The default TLS implementation is TLSv1, which is sent in a ClientHello; if the server doesn't support it, you'll get a Connection reset, not a SSLHandshakeException.",
                "fecha": { "$date" : "2018-01-05T15:28:36Z" },
                "usuario": "Dan Gravell",
                "usuario_id": 925
            }
        ],
        "usuario": "Jacob van Lingen",
        "usuario_id": 924
    },
    {
        "_id": 585,
        "fecha": { "$date" : "2013-01-22T19:17:05Z" },
        "decripcion": "\nIn my case, this was because my Tomcat was set with an insufficient maxHttpHeaderSize for a particularly complicated SOLR query. \n\nHope this helps someone out there!\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "inanutshellus",
        "usuario_id": 926
    },
    {
        "_id": 586,
        "fecha": { "$date" : "2012-12-19T00:12:15Z" },
        "decripcion": "\nI get this error all the time and consider it normal.\n\nIt happens when one side tries to read when the other side has already hung up.  Thus depending on the protocol this may or may not designate a problem.\nIf my client code specifically indicates to the server that it is going to hang up, then both client and server can hang up at the same time and this message would not happen.\n\nThe way I implement my code is for the client to just hang up without saying goodbye.\nThe server can then catch the error and ignore it.  In the context of HTTP, I believe one level of the protocol allows more then one request per connection while the other doesn't.\n\nThus you can see how potentially one side could keep hanging up on the other.  I doubt the error you are receiving is of any piratical concern and you could simply catch it to keep it from filling up your log files.\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "The protocol is clearly HTTP in this case, and so it should not happen, except for the rare cases that the other end of the connection exits.",
                "fecha": { "$date" : "2015-07-02T09:41:36Z" },
                "usuario": "Raedwald",
                "usuario_id": 927
            },
            {
                "decripcion": "No. The sender can close while there are still many kilobytes of data left unread by the receiver. In this circumstance the receiver will read all the data and then get an end of stream, not a reset.",
                "fecha": { "$date" : "2016-09-14T12:28:16Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "Gorge",
        "usuario_id": 928
    },
    {
        "_id": 587,
        "fecha": { "$date" : "2009-02-25T11:35:41Z" },
        "decripcion": "\nThis error occurs on the server side when the client closed the socket connection before the response could be returned over the socket. In a web app scenario not all of these are dangerous, since they can be created manually. For example, by quitting the browser before the reponse was retrieved.\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "While true, this question is about a client-side component where you would expect the server to finish the exchange.",
                "fecha": { "$date" : "2013-07-26T11:08:31Z" },
                "usuario": "ashirley",
                "usuario_id": 929
            }
        ],
        "usuario": "Paul",
        "usuario_id": 930
    },
    {
        "_id": 588,
        "fecha": { "$date" : "2009-02-25T11:23:53Z" },
        "decripcion": "\nThe Exception means that the socket was closed unexpectedly from the other side. Since you are calling a web service, this should not happen - most likely you're sending a request that triggers a bug in the web service. \n\nTry logging the entire request in those cases, and see if you notice anything unusual. Otherwise, get in contact with the web service provider and send them your logged problematical request.\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "No it doesn't. That would be 'connection reset by peer'.",
                "fecha": { "$date" : "2017-07-04T01:08:20Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "Michael Borgwardt",
        "usuario_id": 931
    },
    {
        "_id": 589,
        "fecha": { "$date" : "2016-09-14T14:26:16Z" },
        "decripcion": "\nI know this thread is little old, but would like to add my 2 cents.\nWe had the same \"connection reset\" error right after our one of the releases. \n\nThe root cause was, our apache server was brought down for deployment. All our third party traffic goes thru apache and we were getting connection reset error because of it being down.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Nirmal Mangal",
        "usuario_id": 932
    },
    {
        "_id": 590,
        "fecha": { "$date" : "2018-10-05T03:21:13Z" },
        "decripcion": "\nThis is an old thread, but I ran into java.net.SocketException: Connection reset yesterday. \n\nThe server-side application had its throttling settings changed to allow only 1 connection at a time! Thus, sometimes calls went through and sometimes not. I solved the problem by changing the throttling settings.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Super Jade",
        "usuario_id": 933
    },
    {
        "_id": 591,
        "fecha": { "$date" : "2017-11-05T20:31:07Z" },
        "decripcion": "\nI got this error when the text file I was trying to read contained a string that matched an antivirus signature on our firewall.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Noumenon",
        "usuario_id": 934
    },
    {
        "_id": 592,
        "fecha": { "$date" : "2018-10-12T09:04:34Z" },
        "decripcion": "\nFWIW, I was getting this error when I was accidentally making a GET request to an endpoint that was expecting a POST request. Presumably that was just that particular servers way of handling the problem.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "RTF",
        "usuario_id": 935
    },
    {
        "_id": 593,
        "fecha": { "$date" : "2012-03-08T14:32:33Z" },
        "decripcion": "\nI was getting exactly that error too: Connection reset by peer. The exception was being raised  by Spring's REST template upon running the postForObject() method. For me the problem was too long HTTP URL request. So first check whether the URL produced is what it should be and, if your server really should be able to handle requests of that length, simply go to server's configuration and raise the default allowed length of URL requests. \n\nThat solved the problem for me, but be aware: the application might not run on some internet browsers, especially old ones, as they have fixed max length of URL requests.\n\nHope it helps...\n    ",
        "votes": -1,
        "comentarios": [
            {
                "decripcion": "Connection reset is not the same as Connection reset by peer.",
                "fecha": { "$date" : "2017-05-05T14:32:23Z" },
                "usuario": "OrangeDog",
                "usuario_id": 936
            }
        ],
        "usuario": "Roquen",
        "usuario_id": 937
    },
    {
        "_id": 594,
        "fecha": { "$date" : "2018-11-28T22:04:34Z" },
        "decripcion": "\nI was getting this error because the port I tried to connect to was closed.\n    ",
        "votes": -1,
        "comentarios": [
            {
                "decripcion": "That would have caused a connect timeout or connection refusal.",
                "fecha": { "$date" : "2019-07-10T04:17:40Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "Displee",
        "usuario_id": 938
    },
    {
        "_id": 595,
        "fecha": { "$date" : "2015-09-28T08:01:14Z" },
        "decripcion": "\nThis could be a bit tricky in the most general case.  \n\nOn the face of it, InetAddress.getLocalHost() should give you the IP address of this host.  The problem is that a host could have lots of network interfaces, and an interface could be bound to more than one IP address.  And to top that, not all IP addresses will be reachable outside of your machine or your LAN.  For example, they could be IP addresses for virtual network devices, private network IP addresses, and so on.\n\nWhat this means is that the IP address returned by InetAddress.getLocalHost() might not be the right one to use.\n\nHow can you deal with this?\n\n\nOne approach is to use NetworkInterface.getNetworkInterfaces() to get all of the known network interfaces on the host, and then iterate over each NI's addresses.\nAnother approach is to (somehow) get the externally advertized FQDN for the host, and use InetAddress.getByName() to look up the primary IP address.  (But how do you get it, and how do you deal with a DNS-based load balancer?)\nA variation of the previous is to get the preferred FQDN from a config file or a command line parameter.\nAnother variation is to get the preferred IP address from a config file or a command line parameter.\n\n\nIn summary, InetAddress.getLocalHost() will typically work, but you may need to provide an alternative method for the cases where your code is run in an environment with \"complicated\" networking.\n\n\n\n\n  I am able to get all the IP addresses associated all Network Interfaces, but how do i distinguish them?\n\n\n\nAny address in the range 127.xxx.xxx.xxx is a \"loopback\" address.  It is only visible to \"this\" host.\nAny address in the range 192.168.xxx.xxx is a private (aka site local) IP address.  These are reserved for use within an organization.  The same applies to 10.xxx.xxx.xxx addresses, and 172.16.xxx.xxx through 172.31.xxx.xxx.\nAddresses in the range 169.254.xxx.xxx are link local IP addresses.  These are reserved for use on a single network segment.\nAddresses in the range 224.xxx.xxx.xxx through 239.xxx.xxx.xxx are multicast addresses.\nThe address 255.255.255.255 is the broadcast address.\nAnything else should be a valid public point-to-point IPv4 address.\n\n\nIn fact, the InetAddress API provides methods for testing for loopback, link local, site local, multicast and broadcast addresses.  You can use these to sort out which of the IP addresses you get back is most appropriate.\n    ",
        "votes": 286,
        "comentarios": [
            {
                "decripcion": "In case anyone is curious, getLocalHost essentially does a DNS lookup on the server's hostname.  If it gets an IP address from that lookup then it searches through the interfaces available to see which interface has that IP address and it returns that interface.  This means getLocalHost will tend to work in a \"server\" environment where the outgoing IP is the one that maps to the server's hostname.",
                "fecha": { "$date" : "2014-07-16T07:30:21Z" },
                "usuario": "Pace",
                "usuario_id": 941
            },
            {
                "decripcion": "On Ubuntu 14.04 this api returns 127.0.1.1 even though ifconfig only reports two interfaces, the one I want (the publicly accessible ip address), and loopback (127.0.0.1).  Weird that it returns a different loopback alias.",
                "fecha": { "$date" : "2015-03-24T21:14:22Z" },
                "usuario": "ctpenrose",
                "usuario_id": 942
            },
            {
                "decripcion": "I'll add that if you use getLocalHost().getHostAddress() to publish something, you may see 0.0.0.0 when looking from a nother computer on the network. This is explained here This is what happened to me when i was using Gazebo across two computers",
                "fecha": { "$date" : "2015-07-06T23:50:51Z" },
                "usuario": "Peter Mitrano",
                "usuario_id": 943
            }
        ],
        "usuario": "Stephen C",
        "usuario_id": 886
    },
    {
        "_id": 596,
        "fecha": { "$date" : "2020-02-24T03:24:17Z" },
        "decripcion": "\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\ntry(final DatagramSocket socket = new DatagramSocket()){\n  socket.connect(InetAddress.getByName(\"8.8.8.8\"), 10002);\n  ip = socket.getLocalAddress().getHostAddress();\n}\n\n\nThis way works well when there are multiple network interfaces. It always returns the preferred outbound IP. The destination 8.8.8.8 is not needed to be reachable. \n\nConnect on a UDP socket has the following effect: it sets the destination for Send/Recv, discards all packets from other addresses, and - which is what we use - transfers the socket into \"connected\" state, settings its appropriate fields. This includes checking the existence of the route to the destination according to the system's routing table and setting the local endpoint accordingly. The last part seems to be undocumented officially but it looks like an integral trait of Berkeley sockets API (a side effect of UDP \"connected\" state) that works reliably in both Windows and Linux across versions and distributions. \n\nSo, this method will give the local address that would be used to connect to the specified remote host. There is no real connection established, hence the specified remote ip can be unreachable.\n\nEdit:\n\nAs @macomgil says, for MacOS you can do this:\n\nSocket socket = new Socket();\nsocket.connect(new InetSocketAddress(\"google.com\", 80));\nSystem.out.println(socket.getLocalAddress());\n\n    ",
        "votes": 151,
        "comentarios": [
            {
                "decripcion": "It worked for me on linux but on OsX i get : \"0.0.0.0\"",
                "fecha": { "$date" : "2017-09-10T22:09:06Z" },
                "usuario": "Radu Toader",
                "usuario_id": 944
            },
            {
                "decripcion": "@Jeef,  answer is updated. If it doesnt work on OsX,  then you need pick another way.",
                "fecha": { "$date" : "2018-03-20T10:50:21Z" },
                "usuario": "Mr.Wang from Next Door",
                "usuario_id": 945
            },
            {
                "decripcion": "Brilliant! FYI, when dealing with closed inner network, just replace 8.8.8.8 with something every host can reach",
                "fecha": { "$date" : "2018-08-03T07:23:14Z" },
                "usuario": "Murphy Ng",
                "usuario_id": 946
            },
            {
                "decripcion": "Works on Windows; can we confirm if OSX is still a problem?",
                "fecha": { "$date" : "2018-10-02T14:31:06Z" },
                "usuario": "trilogy",
                "usuario_id": 947
            },
            {
                "decripcion": "@trilogy I'm still getting 0.0.0.0 on OSX",
                "fecha": { "$date" : "2019-03-12T16:02:51Z" },
                "usuario": "Peter Tutervai",
                "usuario_id": 948
            }
        ],
        "usuario": "Mr.Wang from Next Door",
        "usuario_id": 945
    },
    {
        "_id": 597,
        "fecha": { "$date" : "2013-12-06T07:54:22Z" },
        "decripcion": "\nPosting here tested IP ambiguity workaround code from https://issues.apache.org/jira/browse/JCS-40 (InetAddress.getLocalHost() ambiguous on Linux systems):\n\n/**\n * Returns an <code>InetAddress</code> object encapsulating what is most likely the machine's LAN IP address.\n * <p/>\n * This method is intended for use as a replacement of JDK method <code>InetAddress.getLocalHost</code>, because\n * that method is ambiguous on Linux systems. Linux systems enumerate the loopback network interface the same\n * way as regular LAN network interfaces, but the JDK <code>InetAddress.getLocalHost</code> method does not\n * specify the algorithm used to select the address returned under such circumstances, and will often return the\n * loopback address, which is not valid for network communication. Details\n * <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4665037\">here</a>.\n * <p/>\n * This method will scan all IP addresses on all network interfaces on the host machine to determine the IP address\n * most likely to be the machine's LAN address. If the machine has multiple IP addresses, this method will prefer\n * a site-local IP address (e.g. 192.168.x.x or 10.10.x.x, usually IPv4) if the machine has one (and will return the\n * first site-local address if the machine has more than one), but if the machine does not hold a site-local\n * address, this method will return simply the first non-loopback address found (IPv4 or IPv6).\n * <p/>\n * If this method cannot find a non-loopback address using this selection algorithm, it will fall back to\n * calling and returning the result of JDK method <code>InetAddress.getLocalHost</code>.\n * <p/>\n *\n * @throws UnknownHostException If the LAN address of the machine cannot be found.\n */\nprivate static InetAddress getLocalHostLANAddress() throws UnknownHostException {\n    try {\n        InetAddress candidateAddress = null;\n        // Iterate all NICs (network interface cards)...\n        for (Enumeration ifaces = NetworkInterface.getNetworkInterfaces(); ifaces.hasMoreElements();) {\n            NetworkInterface iface = (NetworkInterface) ifaces.nextElement();\n            // Iterate all IP addresses assigned to each card...\n            for (Enumeration inetAddrs = iface.getInetAddresses(); inetAddrs.hasMoreElements();) {\n                InetAddress inetAddr = (InetAddress) inetAddrs.nextElement();\n                if (!inetAddr.isLoopbackAddress()) {\n\n                    if (inetAddr.isSiteLocalAddress()) {\n                        // Found non-loopback site-local address. Return it immediately...\n                        return inetAddr;\n                    }\n                    else if (candidateAddress == null) {\n                        // Found non-loopback address, but not necessarily site-local.\n                        // Store it as a candidate to be returned if site-local address is not subsequently found...\n                        candidateAddress = inetAddr;\n                        // Note that we don't repeatedly assign non-loopback non-site-local addresses as candidates,\n                        // only the first. For subsequent iterations, candidate will be non-null.\n                    }\n                }\n            }\n        }\n        if (candidateAddress != null) {\n            // We did not find a site-local address, but we found some other non-loopback address.\n            // Server might have a non-site-local address assigned to its NIC (or it might be running\n            // IPv6 which deprecates the \"site-local\" concept).\n            // Return this non-loopback candidate address...\n            return candidateAddress;\n        }\n        // At this point, we did not find a non-loopback address.\n        // Fall back to returning whatever InetAddress.getLocalHost() returns...\n        InetAddress jdkSuppliedAddress = InetAddress.getLocalHost();\n        if (jdkSuppliedAddress == null) {\n            throw new UnknownHostException(\"The JDK InetAddress.getLocalHost() method unexpectedly returned null.\");\n        }\n        return jdkSuppliedAddress;\n    }\n    catch (Exception e) {\n        UnknownHostException unknownHostException = new UnknownHostException(\"Failed to determine LAN address: \" + e);\n        unknownHostException.initCause(e);\n        throw unknownHostException;\n    }\n}\n\n    ",
        "votes": 59,
        "comentarios": [
            {
                "decripcion": "It must be noted that this still doesn't resolve ambuguity in case host has multiple similar nerwork interfaces.",
                "fecha": { "$date" : "2013-12-07T08:53:39Z" },
                "usuario": "Vadzim",
                "usuario_id": 949
            },
            {
                "decripcion": "the bellow answer is better -  stackoverflow.com/questions/9481865/\u2026  gets the local ip address that is used as src for Default Gatway",
                "fecha": { "$date" : "2017-06-27T14:47:23Z" },
                "usuario": "Radu Toader",
                "usuario_id": 944
            },
            {
                "decripcion": "Why ip address is added with front slash ..? like /10.39.0.17 ..?, Is it always this way should be trimmed ..?",
                "fecha": { "$date" : "2017-09-11T05:08:05Z" },
                "usuario": "Kanagavelu Sugumar",
                "usuario_id": 950
            }
        ],
        "usuario": "Vadzim",
        "usuario_id": 949
    },
    {
        "_id": 598,
        "fecha": { "$date" : "2012-02-28T12:36:46Z" },
        "decripcion": "\nYou can use java's InetAddress class for this purpose.\n\nInetAddress IP=InetAddress.getLocalHost();\nSystem.out.println(\"IP of my system is := \"+IP.getHostAddress());\n\n\nOutput for my system = IP of my system is := 10.100.98.228\n\ngetHostAddress() returns \n\n\n  Returns the IP address string in textual presentation.\n\n\nOR you can also do \n\nInetAddress IP=InetAddress.getLocalHost();\nSystem.out.println(IP.toString());\n\n\nOutput = IP of my system is := RanRag-PC/10.100.98.228\n    ",
        "votes": 55,
        "comentarios": [
            {
                "decripcion": "Note that 10.x.x.x is a private address, indicating that your system is on a NAT network. It will appear as a different address when contacting the outside world. If you truly need the external IP address, you'll have to contact one of many sites which will echo back to you the IP address you're coming from. This may or may not be useful to you. Your system will almost surely not be reachable from the outside in any event.",
                "fecha": { "$date" : "2013-04-19T00:04:28Z" },
                "usuario": "Edward Falk",
                "usuario_id": 951
            },
            {
                "decripcion": "Omg this is save my life. Previous I use clientSocket.getInetAddress().getHostName();",
                "fecha": { "$date" : "2020-08-15T18:39:14Z" },
                "usuario": "NM Naufaldo",
                "usuario_id": 952
            },
            {
                "decripcion": "This solution does not work on Linux system.",
                "fecha": { "$date" : "2021-04-07T17:25:54Z" },
                "usuario": "Gaurang",
                "usuario_id": 953
            }
        ],
        "usuario": "RanRag",
        "usuario_id": 954
    },
    {
        "_id": 599,
        "fecha": { "$date" : "2021-01-27T09:07:52Z" },
        "decripcion": "\nWhen you are looking for your \"local\" address, you should note that each machine has not only a single network interface, and each interface could has its own local address. Which means your machine is always owning several \"local\" addresses.\nDifferent \"local\" addresses will be automatically chosen to use when you are connecting to different endpoints. For example, when you connect to google.com, you are using an \"outside\" local address; but when you connect to your localhost, your local address is always localhost itself, because localhost is just a loopback.\nBelow is showing how to find out your local address when you are communicating with google.com:\nSocket socket = new Socket();\nsocket.connect(new InetSocketAddress(\"google.com\", 80));\nSystem.out.println(socket.getLocalAddress());\nsocket.close();\n\n    ",
        "votes": 20,
        "comentarios": [
            {
                "decripcion": "Awesome !! - so easy :)",
                "fecha": { "$date" : "2017-04-18T13:18:15Z" },
                "usuario": "smilyface",
                "usuario_id": 955
            },
            {
                "decripcion": "add socket.close() at the end :)",
                "fecha": { "$date" : "2017-09-26T16:37:51Z" },
                "usuario": "M.C.",
                "usuario_id": 956
            }
        ],
        "usuario": "macomgil",
        "usuario_id": 957
    },
    {
        "_id": 600,
        "fecha": { "$date" : "2016-03-31T07:36:42Z" },
        "decripcion": "\nExample in scala (useful in sbt file):\n\n  import collection.JavaConverters._\n  import java.net._\n\n  def getIpAddress: String = {\n\n    val enumeration = NetworkInterface.getNetworkInterfaces.asScala.toSeq\n\n    val ipAddresses = enumeration.flatMap(p =>\n      p.getInetAddresses.asScala.toSeq\n    )\n\n    val address = ipAddresses.find { address =>\n      val host = address.getHostAddress\n      host.contains(\".\") && !address.isLoopbackAddress\n    }.getOrElse(InetAddress.getLocalHost)\n\n    address.getHostAddress\n  }\n\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "Andrzej Jozwik",
        "usuario_id": 958
    },
    {
        "_id": 601,
        "fecha": { "$date" : "2014-08-27T15:46:40Z" },
        "decripcion": "\nEDIT 1: Updated code, since the previous link, exists no more\n\nimport java.io.*;\nimport java.net.*;\n\npublic class GetMyIP {\n    public static void main(String[] args) {\n        URL url = null;\n        BufferedReader in = null;\n        String ipAddress = \"\";\n        try {\n            url = new URL(\"http://bot.whatismyipaddress.com\");\n            in = new BufferedReader(new InputStreamReader(url.openStream()));\n            ipAddress = in.readLine().trim();\n            /* IF not connected to internet, then\n             * the above code will return one empty\n             * String, we can check it's length and\n             * if length is not greater than zero, \n             * then we can go for LAN IP or Local IP\n             * or PRIVATE IP\n             */\n            if (!(ipAddress.length() > 0)) {\n                try {\n                    InetAddress ip = InetAddress.getLocalHost();\n                    System.out.println((ip.getHostAddress()).trim());\n                    ipAddress = (ip.getHostAddress()).trim();\n                } catch(Exception exp) {\n                    ipAddress = \"ERROR\";\n                }\n            }\n        } catch (Exception ex) {\n            // This try will give the Private IP of the Host.\n            try {\n                InetAddress ip = InetAddress.getLocalHost();\n                System.out.println((ip.getHostAddress()).trim());\n                ipAddress = (ip.getHostAddress()).trim();\n            } catch(Exception exp) {\n                ipAddress = \"ERROR\";\n            }\n            //ex.printStackTrace();\n        }\n        System.out.println(\"IP Address: \" + ipAddress);\n    }\n}\n\n\nACTUAL VERSION: This stopped working\n\nHopefully this snippet might help you to achieve this : \n\n// Method to get the IP Address of the Host.\nprivate String getIP()\n{\n    // This try will give the Public IP Address of the Host.\n    try\n    {\n        URL url = new URL(\"http://automation.whatismyip.com/n09230945.asp\");\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n        String ipAddress = new String();\n        ipAddress = (in.readLine()).trim();\n        /* IF not connected to internet, then\n         * the above code will return one empty\n         * String, we can check it's length and\n         * if length is not greater than zero, \n         * then we can go for LAN IP or Local IP\n         * or PRIVATE IP\n         */\n        if (!(ipAddress.length() > 0))\n        {\n            try\n            {\n                InetAddress ip = InetAddress.getLocalHost();\n                System.out.println((ip.getHostAddress()).trim());\n                return ((ip.getHostAddress()).trim());\n            }\n            catch(Exception ex)\n            {\n                return \"ERROR\";\n            }\n        }\n        System.out.println(\"IP Address is : \" + ipAddress);\n\n        return (ipAddress);\n    }\n    catch(Exception e)\n    {\n        // This try will give the Private IP of the Host.\n        try\n        {\n            InetAddress ip = InetAddress.getLocalHost();\n            System.out.println((ip.getHostAddress()).trim());\n            return ((ip.getHostAddress()).trim());\n        }\n        catch(Exception ex)\n        {\n            return \"ERROR\";\n        }\n    }\n}\n\n    ",
        "votes": 10,
        "comentarios": [
            {
                "decripcion": "The solution would work, hopefully if i am always connected to the internet, but i am not guaranteed that. Besides, when the system is not connected to the internet and then I need to return the LAN IP address of the system if any, otherwise the localhost. So not a feasible option for me. Any other way??",
                "fecha": { "$date" : "2012-02-28T17:34:23Z" },
                "usuario": "sasidhar",
                "usuario_id": 959
            },
            {
                "decripcion": "@sasidhar : When you are connected to the Internet, only then you be having your public IP I guess, if you are not connected then this method will give you, your local IP or LAN IP, and for the last condition as specified by you you can return \"127.0.0.1\", instead of returning Error.",
                "fecha": { "$date" : "2012-02-28T17:40:46Z" },
                "usuario": "nIcE cOw",
                "usuario_id": 960
            },
            {
                "decripcion": "I like your approach but that link seems not to work anymore!! Can I put a controller on my own system to work instead of that external link and so be more reliable???",
                "fecha": { "$date" : "2014-08-27T12:23:27Z" },
                "usuario": "azerafati",
                "usuario_id": 961
            },
            {
                "decripcion": "@Bludream: Thankyou so much, for bringing this to my knowledge, that the link is not working anymore. I have updated the post, with some new inputs. Hopefully it works for your usercase. Regarding your question, I really don't know, how to setup a controller on your own system to make it work. So I won't be able to give insight on this topic, MY BAD. Thanks again and KEEP SMILING :-)",
                "fecha": { "$date" : "2014-08-27T15:48:59Z" },
                "usuario": "nIcE cOw",
                "usuario_id": 960
            },
            {
                "decripcion": "As much as this is a cool solution, It is extremely unreliable. If you were to block the main thread (lets say) and for whatever reason whatismyip.com was down for some length of time, your app would also be down :(. Or it will return garbage data and cause unexpected behavior. Also, this returns the outter most IP address detectable by whatismyip.com, not necessarily the ip address of the machine you're using.",
                "fecha": { "$date" : "2017-03-13T22:39:10Z" },
                "usuario": "Decoded",
                "usuario_id": 962
            }
        ],
        "usuario": "nIcE cOw",
        "usuario_id": 960
    },
    {
        "_id": 602,
        "fecha": { "$date" : "2014-11-03T06:52:38Z" },
        "decripcion": "\nprivate static InetAddress getLocalAddress(){\n        try {\n            Enumeration<NetworkInterface> b = NetworkInterface.getNetworkInterfaces();\n            while( b.hasMoreElements()){\n                for ( InterfaceAddress f : b.nextElement().getInterfaceAddresses())\n                    if ( f.getAddress().isSiteLocalAddress())\n                        return f.getAddress();\n            }\n        } catch (SocketException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    ",
        "votes": 7,
        "comentarios": [
            {
                "decripcion": "please, consider add some explanation about what your code does.",
                "fecha": { "$date" : "2016-01-15T13:02:50Z" },
                "usuario": "HCarrasko",
                "usuario_id": 963
            },
            {
                "decripcion": "Pretty cool. Thanks a lot.",
                "fecha": { "$date" : "2021-07-15T02:29:14Z" },
                "usuario": "Matheus Santz",
                "usuario_id": 964
            }
        ],
        "usuario": "J.R",
        "usuario_id": 965
    },
    {
        "_id": 603,
        "fecha": { "$date" : "2014-08-12T06:19:17Z" },
        "decripcion": "\nfirstly import the class\n\nimport java.net.InetAddress;\n\n\nin class\n\n  InetAddress iAddress = InetAddress.getLocalHost();\n  String currentIp = iAddress.getHostAddress();\n  System.out.println(\"Current IP address : \" +currentIp); //gives only host address\n\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "it gives only the first ip address even if it's not the one in use!",
                "fecha": { "$date" : "2017-03-05T20:28:47Z" },
                "usuario": "Yahya",
                "usuario_id": 966
            }
        ],
        "usuario": "Gautam",
        "usuario_id": 967
    },
    {
        "_id": 604,
        "fecha": { "$date" : "2014-12-17T14:31:29Z" },
        "decripcion": "\nYou can use java.net.InetAddress API.\nTry this : \n\nInetAddress.getLocalHost().getHostAddress();\n\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "it just will return 127.0.0.1",
                "fecha": { "$date" : "2016-01-15T13:02:01Z" },
                "usuario": "HCarrasko",
                "usuario_id": 963
            },
            {
                "decripcion": "Redundant answer: stackoverflow.com/a/25257429/139985 says the same thing.",
                "fecha": { "$date" : "2021-01-27T04:49:10Z" },
                "usuario": "Stephen C",
                "usuario_id": 886
            }
        ],
        "usuario": "Ved",
        "usuario_id": 968
    },
    {
        "_id": 605,
        "fecha": { "$date" : "2016-02-19T23:46:38Z" },
        "decripcion": "\nThis is a working example of the ACCEPTED answer above!\nThis NetIdentity class will store both the internal host ip, as well as the local loopback. If you're on a DNS based server, as mentioned above, you may need to add some more checks, or possible go the Configuration File Route.\n\nimport java.net.InetAddress;\nimport java.net.NetworkInterface;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.Enumeration;\n\n/**\n * Class that allows a device to identify itself on the INTRANET.\n * \n * @author Decoded4620 2016\n */\npublic class NetIdentity {\n\n    private String loopbackHost = \"\";\n    private String host = \"\";\n\n    private String loopbackIp = \"\";\n    private String ip = \"\";\n    public NetIdentity(){\n\n        try{\n            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n\n            while(interfaces.hasMoreElements()){\n                NetworkInterface i = interfaces.nextElement();\n                if(i != null){\n                    Enumeration<InetAddress> addresses = i.getInetAddresses();\n                    System.out.println(i.getDisplayName());\n                    while(addresses.hasMoreElements()){\n                        InetAddress address = addresses.nextElement();\n                        String hostAddr = address.getHostAddress();\n\n                        // local loopback\n                        if(hostAddr.indexOf(\"127.\") == 0 ){\n                            this.loopbackIp = address.getHostAddress();\n                            this.loopbackHost = address.getHostName();\n                        }\n\n                        // internal ip addresses (behind this router)\n                        if( hostAddr.indexOf(\"192.168\") == 0 || \n                                hostAddr.indexOf(\"10.\") == 0 || \n                                hostAddr.indexOf(\"172.16\") == 0 ){\n                            this.host = address.getHostName();\n                            this.ip = address.getHostAddress();\n                        }\n\n\n                        System.out.println(\"\\t\\t-\" + address.getHostName() + \":\" + address.getHostAddress() + \" - \"+ address.getAddress());\n                    }\n                }\n            }\n        }\n        catch(SocketException e){\n\n        }\n        try{\n            InetAddress loopbackIpAddress = InetAddress.getLocalHost();\n            this.loopbackIp = loopbackIpAddress.getHostName();\n            System.out.println(\"LOCALHOST: \" + loopbackIp);\n        }\n        catch(UnknownHostException e){\n            System.err.println(\"ERR: \" + e.toString());\n        }\n    }\n\n    public String getLoopbackHost(){\n        return loopbackHost;\n    }\n\n    public String getHost(){\n        return host;\n    }\n    public String getIp(){\n        return ip;\n    }\n    public String getLoopbackIp(){\n        return loopbackIp;\n    }\n}\n\n\nWhen I run this code I actually get a print out like this:\n\n    Software Loopback Interface 1\n        -127.0.0.1:127.0.0.1 - [B@19e1023e\n        -0:0:0:0:0:0:0:1:0:0:0:0:0:0:0:1 - [B@7cef4e59\nBroadcom 802.11ac Network Adapter\n        -VIKING.yourisp.com:192.168.1.142 - [B@64b8f8f4\n        -fe80:0:0:0:81fa:31d:21c9:85cd%wlan0:fe80:0:0:0:81fa:31d:21c9:85cd%wlan0 - [B@2db0f6b2\nMicrosoft Kernel Debug Network Adapter\nIntel Edison USB RNDIS Device\nDriver for user-mode network applications\nCisco Systems VPN Adapter for 64-bit Windows\nVirtualBox Host-Only Ethernet Adapter\n        -VIKING:192.168.56.1 - [B@3cd1f1c8\n        -VIKING:fe80:0:0:0:d599:3cf0:5462:cb7%eth4 - [B@3a4afd8d\nLogMeIn Hamachi Virtual Ethernet Adapter\n        -VIKING:25.113.118.39 - [B@1996cd68\n        -VIKING:2620:9b:0:0:0:0:1971:7627 - [B@3339ad8e\n        -VIKING:fe80:0:0:0:51bf:994d:4656:8486%eth5 - [B@555590\nBluetooth Device (Personal Area Network)\n        -fe80:0:0:0:4c56:8009:2bca:e16b%eth6:fe80:0:0:0:4c56:8009:2bca:e16b%eth6 - [B@3c679bde\nBluetooth Device (RFCOMM Protocol TDI)\nIntel(R) Ethernet Connection (2) I218-V\n        -fe80:0:0:0:4093:d169:536c:7c7c%eth7:fe80:0:0:0:4093:d169:536c:7c7c%eth7 - [B@16b4a017\nMicrosoft Wi-Fi Direct Virtual Adapter\n        -fe80:0:0:0:103e:cdf0:c0ac:1751%wlan1:fe80:0:0:0:103e:cdf0:c0ac:1751%wlan1 - [B@8807e25\nVirtualBox Host-Only Ethernet Adapter-HHD Software NDIS 6.0 Filter Driver-0000\nVirtualBox Host-Only Ethernet Adapter-WFP Native MAC Layer LightWeight Filter-0000\nVirtualBox Host-Only Ethernet Adapter-HHD Software NDIS 6.0 Filter Driver-0001\nVirtualBox Host-Only Ethernet Adapter-HHD Software NDIS 6.0 Filter Driver-0002\nVirtualBox Host-Only Ethernet Adapter-VirtualBox NDIS Light-Weight Filter-0000\nVirtualBox Host-Only Ethernet Adapter-HHD Software NDIS 6.0 Filter Driver-0003\nVirtualBox Host-Only Ethernet Adapter-QoS Packet Scheduler-0000\nVirtualBox Host-Only Ethernet Adapter-HHD Software NDIS 6.0 Filter Driver-0004\nVirtualBox Host-Only Ethernet Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000\nVirtualBox Host-Only Ethernet Adapter-HHD Software NDIS 6.0 Filter Driver-0005\nIntel(R) Ethernet Connection (2) I218-V-HHD Software NDIS 6.0 Filter Driver-0000\nIntel(R) Ethernet Connection (2) I218-V-WFP Native MAC Layer LightWeight Filter-0000\nIntel(R) Ethernet Connection (2) I218-V-HHD Software NDIS 6.0 Filter Driver-0001\nIntel(R) Ethernet Connection (2) I218-V-Shrew Soft Lightweight Filter-0000\nIntel(R) Ethernet Connection (2) I218-V-HHD Software NDIS 6.0 Filter Driver-0002\nIntel(R) Ethernet Connection (2) I218-V-VirtualBox NDIS Light-Weight Filter-0000\nIntel(R) Ethernet Connection (2) I218-V-HHD Software NDIS 6.0 Filter Driver-0003\nIntel(R) Ethernet Connection (2) I218-V-QoS Packet Scheduler-0000\nIntel(R) Ethernet Connection (2) I218-V-HHD Software NDIS 6.0 Filter Driver-0004\nIntel(R) Ethernet Connection (2) I218-V-WFP 802.3 MAC Layer LightWeight Filter-0000\nIntel(R) Ethernet Connection (2) I218-V-HHD Software NDIS 6.0 Filter Driver-0005\nBroadcom 802.11ac Network Adapter-WFP Native MAC Layer LightWeight Filter-0000\nBroadcom 802.11ac Network Adapter-Virtual WiFi Filter Driver-0000\nBroadcom 802.11ac Network Adapter-Native WiFi Filter Driver-0000\nBroadcom 802.11ac Network Adapter-HHD Software NDIS 6.0 Filter Driver-0003\nBroadcom 802.11ac Network Adapter-Shrew Soft Lightweight Filter-0000\nBroadcom 802.11ac Network Adapter-HHD Software NDIS 6.0 Filter Driver-0004\nBroadcom 802.11ac Network Adapter-VirtualBox NDIS Light-Weight Filter-0000\nBroadcom 802.11ac Network Adapter-HHD Software NDIS 6.0 Filter Driver-0005\nBroadcom 802.11ac Network Adapter-QoS Packet Scheduler-0000\nBroadcom 802.11ac Network Adapter-HHD Software NDIS 6.0 Filter Driver-0006\nBroadcom 802.11ac Network Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000\nBroadcom 802.11ac Network Adapter-HHD Software NDIS 6.0 Filter Driver-0007\nMicrosoft Wi-Fi Direct Virtual Adapter-WFP Native MAC Layer LightWeight Filter-0000\nMicrosoft Wi-Fi Direct Virtual Adapter-Native WiFi Filter Driver-0000\nMicrosoft Wi-Fi Direct Virtual Adapter-HHD Software NDIS 6.0 Filter Driver-0002\nMicrosoft Wi-Fi Direct Virtual Adapter-Shrew Soft Lightweight Filter-0000\nMicrosoft Wi-Fi Direct Virtual Adapter-HHD Software NDIS 6.0 Filter Driver-0003\nMicrosoft Wi-Fi Direct Virtual Adapter-VirtualBox NDIS Light-Weight Filter-0000\nMicrosoft Wi-Fi Direct Virtual Adapter-HHD Software NDIS 6.0 Filter Driver-0004\nMicrosoft Wi-Fi Direct Virtual Adapter-QoS Packet Scheduler-0000\nMicrosoft Wi-Fi Direct Virtual Adapter-HHD Software NDIS 6.0 Filter Driver-0005\nMicrosoft Wi-Fi Direct Virtual Adapter-WFP 802.3 MAC Layer LightWeight Filter-0000\nMicrosoft Wi-Fi Direct Virtual Adapter-HHD Software NDIS 6.0 Filter Driver-0006\n\n\nFor my use I'm setting up a Upnp Server, it helped to understand the 'pattern' that i was looking for. Some of the objects returned are Ethernet Adapters, Network Adapters, Virtual Network Adapters, Drivers, and VPN Client Adapters. Not everything has an Address either. So you'll want to skip out on interface objects that don't.\n\nYou can also add this to the loop for the current NetworkInterface i\n\nwhile(interfaces.hasMoreElements()){\n    Enumeration<InetAddress> addresses = i.getInetAddresses();\n    System.out.println(i.getDisplayName());\n    System.out.println(\"\\t- name:\" + i.getName());\n    System.out.println(\"\\t- idx:\" + i.getIndex());\n    System.out.println(\"\\t- max trans unit (MTU):\" + i.getMTU());\n    System.out.println(\"\\t- is loopback:\" + i.isLoopback());\n    System.out.println(\"\\t- is PPP:\" + i.isPointToPoint());\n    System.out.println(\"\\t- isUp:\" + i.isUp());\n    System.out.println(\"\\t- isVirtual:\" + i.isVirtual());\n    System.out.println(\"\\t- supportsMulticast:\" + i.supportsMulticast());\n}\n\n\nAnd You'll see information in your output much like this:\n\nSoftware Loopback Interface 1\n    - name:lo\n    - idx:1\n    - max trans unit (MTU):-1\n    - is loopback:true\n    - is PPP:false\n    - isUp:true\n    - isVirtual:false\n    - supportsMulticast:true\n        -ADRESS: [127.0.0.1(VIKING-192.168.56.1)]127.0.0.1:127.0.0.1 - [B@19e1023e\n        -ADRESS: [0:0:0:0:0:0:0:1(VIKING-192.168.56.1)]0:0:0:0:0:0:0:1:0:0:0:0:0:0:0:1 - [B@7cef4e59\nBroadcom 802.11ac Network Adapter\n    - name:wlan0\n    - idx:2\n    - max trans unit (MTU):1500\n    - is loopback:false\n    - is PPP:false\n    - isUp:true\n    - isVirtual:false\n    - supportsMulticast:true\n        -ADRESS: [VIKING.monkeybrains.net(VIKING-192.168.56.1)]VIKING.monkeybrains.net:192.168.1.142 - [B@64b8f8f4\n        -ADRESS: [fe80:0:0:0:81fa:31d:21c9:85cd%wlan0(VIKING-192.168.56.1)]fe80:0:0:0:81fa:31d:21c9:85cd%wlan0:fe80:0:0:0:81fa:31d:21c9:85cd%wlan0 - [B@2db0f6b2\nMicrosoft Kernel Debug Network Adapter\n    - name:eth0\n    - idx:3\n    - max trans unit (MTU):-1\n    - is loopback:false\n    - is PPP:false\n    - isUp:false\n    - isVirtual:false\n    - supportsMulticast:true\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Decoded",
        "usuario_id": 962
    },
    {
        "_id": 606,
        "fecha": { "$date" : "2012-02-28T12:32:06Z" },
        "decripcion": "\nUse InetAddress.getLocalHost() to get the local address\n\nimport java.net.InetAddress;\n\ntry {\n  InetAddress addr = InetAddress.getLocalHost();            \n  System.out.println(addr.getHostAddress());\n} catch (UnknownHostException e) {\n}\n\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "My PPP Connection Ip address is: 117.204.44.192 But the above returns me 192.168.1.2",
                "fecha": { "$date" : "2012-02-28T12:54:10Z" },
                "usuario": "sasidhar",
                "usuario_id": 959
            },
            {
                "decripcion": "You need to crawl all the InetAddress instances available and figure out which is the proper one.",
                "fecha": { "$date" : "2017-03-13T22:40:46Z" },
                "usuario": "Decoded",
                "usuario_id": 962
            },
            {
                "decripcion": "Redundant answer: stackoverflow.com/a/25257429/139985 says the same thing.",
                "fecha": { "$date" : "2021-01-27T04:50:23Z" },
                "usuario": "Stephen C",
                "usuario_id": 886
            }
        ],
        "usuario": "vdeantoni",
        "usuario_id": 969
    },
    {
        "_id": 607,
        "fecha": { "$date" : "2014-07-25T04:11:38Z" },
        "decripcion": "\nimport java.net.InetAddress;\nimport java.net.NetworkInterface;\nimport java.util.Enumeration;\n\npublic class IpAddress {\n\nNetworkInterface ifcfg;\nEnumeration<InetAddress> addresses;\nString address;\n\npublic String getIpAddress(String host) {\n    try {\n        ifcfg = NetworkInterface.getByName(host);\n        addresses = ifcfg.getInetAddresses();\n        while (addresses.hasMoreElements()) {\n            address = addresses.nextElement().toString();\n            address = address.replace(\"/\", \"\");\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return ifcfg.toString();\n}\n}\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "twatson0990",
        "usuario_id": 970
    },
    {
        "_id": 608,
        "fecha": { "$date" : "2016-01-05T11:38:58Z" },
        "decripcion": "\nA rather simplistic approach that seems to be working...\n\nString getPublicIPv4() throws UnknownHostException, SocketException{\n    Enumeration<NetworkInterface> e = NetworkInterface.getNetworkInterfaces();\n    String ipToReturn = null;\n    while(e.hasMoreElements())\n    {\n        NetworkInterface n = (NetworkInterface) e.nextElement();\n        Enumeration<InetAddress> ee = n.getInetAddresses();\n        while (ee.hasMoreElements())\n        {\n            InetAddress i = (InetAddress) ee.nextElement();\n            String currentAddress = i.getHostAddress();\n            logger.trace(\"IP address \"+currentAddress+ \" found\");\n            if(!i.isSiteLocalAddress()&&!i.isLoopbackAddress() && validate(currentAddress)){\n                ipToReturn = currentAddress;    \n            }else{\n                System.out.println(\"Address not validated as public IPv4\");\n            }\n\n        }\n    }\n\n    return ipToReturn;\n}\n\nprivate static final Pattern IPv4RegexPattern = Pattern.compile(\n        \"^(([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.){3}([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])$\");\n\npublic static boolean validate(final String ip) {\n    return IPv4RegexPattern.matcher(ip).matches();\n}\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Pantelis Natsiavas",
        "usuario_id": 971
    },
    {
        "_id": 609,
        "fecha": { "$date" : "2016-12-18T12:59:06Z" },
        "decripcion": "\nUsually when i try to find my public IP Address like cmyip.com or www.iplocation.net, i use this way: \n\npublic static String myPublicIp() {\n\n    /*nslookup myip.opendns.com resolver1.opendns.com*/\n    String ipAdressDns  = \"\";\n    try {\n        String command = \"nslookup myip.opendns.com resolver1.opendns.com\";\n        Process proc = Runtime.getRuntime().exec(command);\n\n        BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n\n        String s;\n        while ((s = stdInput.readLine()) != null) {\n            ipAdressDns  += s + \"\\n\";\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    return ipAdressDns ;\n}\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "YCF_L",
        "usuario_id": 972
    },
    {
        "_id": 610,
        "fecha": { "$date" : "2019-07-10T20:11:05Z" },
        "decripcion": "\nThis gets the IP address of your network if your machine is part of a network\n\ntry {\n    System.out.println(InetAddress.getLocalHost().getHostAddress());\n} catch (UnknownHostException e) {\n    e.printStackTrace();\n}\n\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "Redundant answer.  Other (earlier) answers say the same thing.",
                "fecha": { "$date" : "2021-01-27T04:47:15Z" },
                "usuario": "Stephen C",
                "usuario_id": 886
            }
        ],
        "usuario": "code511788465541441",
        "usuario_id": 973
    },
    {
        "_id": 611,
        "fecha": { "$date" : "2020-04-10T00:54:24Z" },
        "decripcion": "\nSince my system (like so many other systems) had various network interfaces.InetAddress.getLocalHost() or Inet4Address.getLocalHost() simply returned one that I did not desire.\nTherefore I had to use this naive approach.\n\nInetAddress[] allAddresses = Inet4Address.getAllByName(\"YourComputerHostName\");\n        InetAddress desiredAddress;\n        //In order to find the desired Ip to be routed by other modules (WiFi adapter)\n        for (InetAddress address :\n                allAddresses) {\n            if (address.getHostAddress().startsWith(\"192.168.2\")) {\n                desiredAddress = address;\n            }\n        }\n// Use the desired address for whatever purpose.\n\n\nJust be careful that in this approach I already knew that my desired IP address is in 192.168.2 subnet.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "SepJaPro2.4",
        "usuario_id": 974
    },
    {
        "_id": 612,
        "fecha": { "$date" : "2015-05-25T05:01:51Z" },
        "decripcion": "\nThere are several possible causes.\n\n\nThe other end has deliberately reset the connection, in a way which I will not document here. It is rare, and generally incorrect, for application software to do this, but it is not unknown for commercial software.\nMore commonly, it is caused by writing to a connection that the other end has already closed normally. In other words an application protocol error.\nIt can also be caused by closing a socket when there is unread data in the socket receive buffer.\nIn Windows, 'software caused connection abort', which is not the same as 'connection reset', is caused by network problems sending from your end. There's a Microsoft knowledge base article about this.\n\n    ",
        "votes": 129,
        "comentarios": [
            {
                "decripcion": "@MattLyons Thanks. There are much better MSDN articles than that. Frankly I find that one hard to believe. A connection won't even exist until the correct source and target IP addresses have been established. The MSDN articles I have seen refer to persistent network errors timing out the connection.",
                "fecha": { "$date" : "2012-05-30T10:13:19Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "Given your first 3 points, this would be interesting for you to see a decade later",
                "fecha": { "$date" : "2021-03-24T04:51:16Z" },
                "usuario": "zanderwar",
                "usuario_id": 977
            },
            {
                "decripcion": "@zanderwar Thanks. Plagiarism abounding over there.",
                "fecha": { "$date" : "2021-03-24T23:38:58Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "user207421",
        "usuario_id": 877
    },
    {
        "_id": 613,
        "fecha": { "$date" : "2014-10-08T16:20:53Z" },
        "decripcion": "\nConnection reset simply means that a TCP RST was received. This happens when your peer receives data that it can't process, and there can be various reasons for that.\n\nThe simplest is when you close the socket, and then write more data on the output stream. By closing the socket, you told your peer that you are done talking, and it can forget about your connection. When you send more data on that stream anyway, the peer rejects it with an RST to let you know it isn't listening.\n\nIn other cases, an intervening firewall or even the remote host itself might \"forget\" about your TCP connection. This could happen if you don't send any data for a long time (2 hours is a common time-out), or because the peer was rebooted and lost its information about active connections. Sending data on one of these defunct connections will cause a RST too.\n\n\n\nUpdate in response to additional information: \n\nTake a close look at your handling of the SocketTimeoutException. This exception is raised if the configured timeout is exceeded while blocked on a socket operation. The state of the socket itself is not changed when this exception is thrown, but if your exception handler closes the socket, and then tries to write to it, you'll be in a connection reset condition. setSoTimeout() is meant to give you a clean way to break out of a read() operation that might otherwise block forever, without doing dirty things like closing the socket from another thread.\n    ",
        "votes": 57,
        "comentarios": [
            {
                "decripcion": "Not correct in several respects. Garbage collection and process exits both cause proper closes, not resets, but a close followed by a write by the peer can induce a reset rather than an EOS. SocketTimeoutExceptions are only raised if the reader has set a read timeout.",
                "fecha": { "$date" : "2012-09-30T00:21:14Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "And it doesn't always mean an RST was received. It can also mean one was generated by this side.",
                "fecha": { "$date" : "2017-04-14T17:35:03Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "And you can't write to a socket that you have already closed. You will get a SocketException: socket closed, and the peer will not get an RST. Answer is completely incorrect.",
                "fecha": { "$date" : "2020-11-12T06:46:27Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "erickson",
        "usuario_id": 978
    },
    {
        "_id": 614,
        "fecha": { "$date" : "2008-09-15T13:45:06Z" },
        "decripcion": "\nWhenever I have had odd issues like this, I usually sit down with a tool like WireShark and look at the raw data being passed back and forth. You might be surprised where things are being disconnected, and you are only being notified when you try and read.\n    ",
        "votes": 20,
        "comentarios": [],
        "usuario": "GEOCHET",
        "usuario_id": 979
    },
    {
        "_id": 615,
        "fecha": { "$date" : "2020-11-23T22:32:22Z" },
        "decripcion": "\nYou should inspect full trace very carefully,\nI've a server socket application and fixed a java.net.SocketException: Connection reset case.\nIn my case it happens while reading from a clientSocket Socket object which is closed its connection because of some reason. (Network lost,firewall or application crash or intended close)\nActually I was re-establishing connection when I got an error while reading from this Socket object.\nSocket clientSocket = ServerSocket.accept();\nis = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\nint readed = is.read(); // WHERE ERROR STARTS !!!\n\nThe interesting thing is for my JAVA Socket if a client connects to my ServerSocket and close its connection without sending anything is.read() is being called repeatedly.It seems because of being in an infinite while loop for reading from this socket you try to read from a closed connection.\nIf you use something like below for read operation;\nwhile(true)\n{\n  Receive();\n}\n\nThen you get a stackTrace something like below on and on\njava.net.SocketException: Socket is closed\n    at java.net.ServerSocket.accept(ServerSocket.java:494)\n\nWhat I did is just closing ServerSocket and renewing my connection and waiting for further incoming client connections\nString Receive() throws Exception\n{\ntry {                   \n            int readed = is.read();\n           ....\n}catch(Exception e)\n{\n        tryReConnect();\n        logit(); //etc\n}\n\n\n//...\n}\n\nThis reestablises my connection for unknown client socket losts\nprivate void tryReConnect()\n        {\n            try\n            {\n                ServerSocket.close();\n                //empty my old lost connection and let it get by garbage col. immediately \n                clientSocket=null;\n                System.gc();\n                //Wait a new client Socket connection and address this to my local variable\n                clientSocket= ServerSocket.accept(); // Waiting for another Connection\n                System.out.println(\"Connection established...\");\n            }catch (Exception e) {\n                String message=\"ReConnect not successful \"+e.getMessage();\n                logit();//etc...\n            }\n        }\n\nI couldn't find another way because as you see from below image you can't understand whether connection is lost or not without a try and catch ,because everything seems right . I got this snapshot while I was getting Connection reset continuously.\n\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "@MarquisofLorne yes correct, that's why that routine is in another while loop.",
                "fecha": { "$date" : "2020-11-12T07:48:59Z" },
                "usuario": "Davut G\u00fcrb\u00fcz",
                "usuario_id": 939
            },
            {
                "decripcion": "@MarquisofLorne I noticed after reading my own answer it needed to be 'is being called repeatedly'. Thanks for pointing out. 5y ago :). I improved it now actually, based on reading -1, timeout exception etc. added. Ungraceful connection drops are still problem, there are different inactivity management methods people follow.",
                "fecha": { "$date" : "2020-11-23T22:32:19Z" },
                "usuario": "Davut G\u00fcrb\u00fcz",
                "usuario_id": 939
            }
        ],
        "usuario": "Davut G\u00fcrb\u00fcz",
        "usuario_id": 939
    },
    {
        "_id": 616,
        "fecha": { "$date" : "2013-07-23T17:10:23Z" },
        "decripcion": "\nEmbarrassing to say it, but when I had this problem, it was simply a mistake that I was closing the connection before I read all the data.  In cases with small strings being returned, it worked, but that was probably due to the whole response was buffered, before I closed it.\n\nIn cases of longer amounts of text being returned, the exception was thrown, since more then a buffer was coming back.\n\nYou might check for this oversight.  Remember opening a URL is like a file, be sure to close it (release the connection) once it has been fully read.\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "Scott S",
        "usuario_id": 980
    },
    {
        "_id": 617,
        "fecha": { "$date" : "2011-03-27T20:30:13Z" },
        "decripcion": "\nI had the same error. I found the solution for problem now. The problem was client program was finishing before server read the streams.\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "That would not cause this exception on its own.",
                "fecha": { "$date" : "2012-06-12T21:20:09Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "it would if System.exit(0) kills the program and no one calls socket.close() as the connection is in a bad state and was not closed properly.  sooo more properly said he had a client program that shutdown without closing sockets ;) which is a bad thing and should be fixed.",
                "fecha": { "$date" : "2012-11-09T20:29:15Z" },
                "usuario": "Dean Hiller",
                "usuario_id": 981
            },
            {
                "decripcion": "@DeanHiller No it wouldn't. The operating system would close the socket the same way the application should have.",
                "fecha": { "$date" : "2013-10-05T23:27:11Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "@EJP ....I am not sure...I just know we could reproduce it with System.exit but I don't remember the OS/config as that was quite some time ago....calling socket.close() on the server prevented connection reset and it behaved more properly.",
                "fecha": { "$date" : "2013-10-07T12:14:38Z" },
                "usuario": "Dean Hiller",
                "usuario_id": 981
            },
            {
                "decripcion": "@DeanHiller The reading process exited before the writing process had finished writing.",
                "fecha": { "$date" : "2014-05-18T11:57:08Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "kml_ckr",
        "usuario_id": 982
    },
    {
        "_id": 618,
        "fecha": { "$date" : "2017-09-14T17:18:22Z" },
        "decripcion": "\nI had this problem with a SOA system written in Java.  I was running both the client and the server on different physical machines and they worked fine for a long time, then those nasty connection resets appeared in the client log and there wasn't anything strange in the server log.  Restarting both client and server didn't solve the problem.  Finally we discovered that the heap on the server side was rather full so we increased the memory available to the JVM: problem solved!  Note that there was no OutOfMemoryError in the log: memory was just scarce, not exhausted.\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "There is nothing about OutOfMemoryError in the question.",
                "fecha": { "$date" : "2021-03-24T04:09:37Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "Yes, I know, I didn't say otherwise.",
                "fecha": { "$date" : "2021-03-25T13:46:38Z" },
                "usuario": "Pino",
                "usuario_id": 983
            }
        ],
        "usuario": "Pino",
        "usuario_id": 983
    },
    {
        "_id": 619,
        "fecha": { "$date" : "2014-07-10T16:07:53Z" },
        "decripcion": "\nI also had this problem with a Java program trying to send a command on a server via SSH. The problem was with the machine executing the Java code. It didn't have the permission to connect to the remote server. The write() method was doing alright, but the read() method was throwing a java.net.SocketException: Connection reset. I fixed this problem with adding the client SSH key to the remote server known keys. \n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "pmartin8",
        "usuario_id": 984
    },
    {
        "_id": 620,
        "fecha": { "$date" : "2019-08-15T20:13:13Z" },
        "decripcion": "\nCheck your server's Java version. Happened to me because my Weblogic 10.3.6 was on JDK 1.7.0_75 which was on TLSv1. The rest endpoint I was trying to consume was shutting down anything below TLSv1.2. \n\nBy default Weblogic was trying to negotiate the strongest shared protocol. See details here: Issues with setting https.protocols System Property for HTTPS connections.\n\nI added verbose SSL logging to identify the supported TLS. This indicated TLSv1 was being used for the handshake.\n-Djavax.net.debug=ssl:handshake:verbose:keymanager:trustmanager -Djava.security.debug=access:stack\n\nI resolved this by pushing the feature out to our JDK8-compatible product, JDK8 defaults to TLSv1.2. For those restricted to JDK7, I also successfully tested a workaround for Java 7 by upgrading to TLSv1.2. I used this answer: How to enable TLS 1.2 in Java 7\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "many thanks, you show me a new direction to fix my issue. and finally I found it is the case!!!",
                "fecha": { "$date" : "2020-06-01T07:39:13Z" },
                "usuario": "karl li",
                "usuario_id": 985
            },
            {
                "decripcion": "SSL protocol mismatches do not cause connection resets. They cause handshake failures.",
                "fecha": { "$date" : "2020-11-12T06:48:46Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "Sumiya",
        "usuario_id": 986
    },
    {
        "_id": 621,
        "fecha": { "$date" : "2020-06-05T14:00:44Z" },
        "decripcion": "\nIn my experience, I often encounter the following situations;\n\n\nIf you work in a corporate company, contact the network and security team. Because in requests made to external services, it may be necessary to give permission for the relevant endpoint.\nAnother issue is that the SSL certificate may have expired on the server where your application is running.\n\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "SSL certificates do not cause connection resets.",
                "fecha": { "$date" : "2020-11-12T06:49:11Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "bmck",
        "usuario_id": 987
    },
    {
        "_id": 622,
        "fecha": { "$date" : "2021-07-22T07:18:07Z" },
        "decripcion": "\nIn my case was DNS problem .\nI put in host file the resolved IP and everything works fine.\nOf course it is not a permanent solution put this give me time to fix the DNS problem.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "tsotzolas",
        "usuario_id": 988
    },
    {
        "_id": 623,
        "fecha": { "$date" : "2021-07-22T16:18:14Z" },
        "decripcion": "\nI've seen this problem. In my case, there was an error caused by reusing the same ClientRequest object in an specific Java class. That project was using Jboss Resteasy.\n\nInitially only one method was using/invoking the object ClientRequest (placed as global variable in the class) to do a request in an specific URL.\nAfter that, another method was created to get data with another URL, reusing the same ClientRequest object, though.\n\nThe solution: in the same class was created another ClientRequest object and exclusively to not be reused.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Thiago Ferreira",
        "usuario_id": 989
    },
    {
        "_id": 624,
        "fecha": { "$date" : "2017-05-23T11:54:44Z" },
        "decripcion": "\nYou might have guessed it already: it's a connection error.  \n\n\"ECONNRESET\" means the other side of the TCP conversation abruptly closed its end of the connection. This is most probably due to one or more application protocol errors. You could look at the API server logs to see if it complains about something.\n\nBut since you are also looking for a way to check the error and potentially debug the problem, you should take a look at \"How to debug a socket hang up error in NodeJS?\" which was posted at stackoverflow in relation to an alike question.\n\n\n  Quick and dirty solution for development:\n  \n  Use  longjohn, you get long stack traces that will contain the async operations.\n  \n  Clean and correct solution:\n    Technically, in node, whenever you emit an 'error' event and no one listens to it, it will throw. To make it not throw, put a listener on it and handle  it yourself. That way you can log the error with more information.\n  \n  To have one listener for a group of calls you can use domains  and also catch other errors on runtime. Make sure each async operation related to http(Server/Client) is in different domain context comparing to the other parts of the code, the domain will automatically listen to the error events and will propagate it to it's own handler. So you only listen to that handler and get the error data. You also get more information for free.\n\n\nEDIT (2013-07-22)\n\nAs I wrote above: \n\n\n  \"ECONNRESET\" means the other side of the TCP conversation abruptly closed its end of the connection. This is most probably due to one or more application protocol errors. You could look at the API server logs to see if it complains about something.\n\n\nWhat could also be the case: at random times, the other side is overloaded and simply kills the connection as a result. If that's the case, depends on what you're connecting to exactly\u2026\n\nBut one thing's for sure: you indeed have a read error on your TCP connection which causes the exception. You can see that by looking at the error code you posted in your edit, which confirms it.  \n    ",
        "votes": 307,
        "comentarios": [
            {
                "decripcion": "It doesn't have to mean 'abruptly closed'. It usually results from writing to a connection which the peer had already closed normally. That will cause it to issue an RST.",
                "fecha": { "$date" : "2014-04-06T23:50:33Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "@EJP There was a good reason why I wrote \u201cabruptly\u201d. The error (not warning) states the connection was reset by peer. An existing connection was forcibly closed by the remote peer. A forced close is abrupt since unexpected! (This normally results if peer application on remote machine is suddenly stopped, machine is rebooted, or peer application used a \"hard close\" on the remote socket. This error may also result if a connection was broken due to \"keep-alive\" activity detecting a failure while one or more operations are in progress\u2026 these operations and subsequent operations will fail.)",
                "fecha": { "$date" : "2014-04-07T09:12:48Z" },
                "usuario": "e-sushi",
                "usuario_id": 992
            },
            {
                "decripcion": "I get this error thrown when I batch send around 100 API calls near concurrently from the browser (Chrome) for testing. I imagine that Chrome must then become overloaded and kill some of the connections...  @Samson - what is wrong with processing each request in its own domain and catching domain errors without restarting the server?",
                "fecha": { "$date" : "2014-07-10T08:12:43Z" },
                "usuario": "supershnee",
                "usuario_id": 993
            },
            {
                "decripcion": "@supershnee You should almost always restart your server after an uncaught exception since your data, application, and node.js itself is in an unknown state.  Continuing after an exception puts your data a risk.  If you want to find out more, check out Node's docs on process or Node's docs on domains.",
                "fecha": { "$date" : "2015-08-31T00:10:37Z" },
                "usuario": "c1moore",
                "usuario_id": 994
            }
        ],
        "usuario": "e-sushi",
        "usuario_id": 992
    },
    {
        "_id": 625,
        "fecha": { "$date" : "2013-07-23T08:38:09Z" },
        "decripcion": "\nA simple tcp server I had for serving the flash policy file was causing this. I can now catch the error using a handler:\n\n# serving the flash policy file\nnet = require(\"net\")\n\nnet.createServer((socket) =>\n  //just added\n  socket.on(\"error\", (err) =>\n    console.log(\"Caught flash policy server socket error: \")\n    console.log(err.stack)\n  )\n\n  socket.write(\"<?xml version=\\\"1.0\\\"?>\\n\")\n  socket.write(\"<!DOCTYPE cross-domain-policy SYSTEM \\\"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\\\">\\n\")\n  socket.write(\"<cross-domain-policy>\\n\")\n  socket.write(\"<allow-access-from domain=\\\"*\\\" to-ports=\\\"*\\\"/>\\n\")\n  socket.write(\"</cross-domain-policy>\\n\")\n  socket.end()\n).listen(843)\n\n    ",
        "votes": 47,
        "comentarios": [
            {
                "decripcion": "Is there anything wrong with the code? Should I have checked if the socket is writable before writing?",
                "fecha": { "$date" : "2013-07-23T08:38:53Z" },
                "usuario": "Samson",
                "usuario_id": 995
            },
            {
                "decripcion": "Doh, didn't see that you already found the solution before I posted pretty much the same thing :) As to your question though, even if you check that the socket is writable, it may not be when you write to it microseconds later and would still throw an error, so this is \"the way\" to be sure.",
                "fecha": { "$date" : "2013-07-23T09:10:59Z" },
                "usuario": "Joachim Isaksson",
                "usuario_id": 996
            },
            {
                "decripcion": "ok, and is there a safe way out if this? like socket.close() inside the error handler? because i think my CPU load is increasing after these errors (not sure)",
                "fecha": { "$date" : "2013-07-23T09:49:47Z" },
                "usuario": "Samson",
                "usuario_id": 995
            },
            {
                "decripcion": "I've always called socket.destroy() in the error handler to make sure. Sadly I can't find documentation whether it is required, but it does not emit an error to do so.",
                "fecha": { "$date" : "2013-07-23T10:03:09Z" },
                "usuario": "Joachim Isaksson",
                "usuario_id": 996
            },
            {
                "decripcion": "socket.destroy()  saved my day, whatever it works !! Thank you!",
                "fecha": { "$date" : "2016-10-29T18:18:47Z" },
                "usuario": "Firas Abd Alrahman",
                "usuario_id": 997
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 626,
        "fecha": { "$date" : "2013-09-21T14:13:51Z" },
        "decripcion": "\nI had a similar problem where apps started erroring out after an upgrade of Node.  I believe this can be traced back to Node release v0.9.10 this item:\n\n\nnet: don't suppress ECONNRESET (Ben Noordhuis)\n\n\nPrevious versions wouldn't error out on interruptions from the client.  A break in the connection from the client throws the error ECONNRESET in Node.  I believe this is intended functionality for Node, so the fix (at least for me) was to handle the error, which I believe you did in unCaught exceptions.  Although I handle it in the net.socket handler.\n\nYou can demonstrate this:\n\nMake a simple socket server and get Node v0.9.9 and v0.9.10.\n\nrequire('net')\n    .createServer( function(socket) \n    {\n           // no nothing\n    })\n    .listen(21, function()\n     {\n           console.log('Socket ON')\n    })\n\n\nStart it up using v0.9.9 and then attempt to FTP to this server. I'm using FTP and port 21 only because I'm on Windows and have an FTP client, but no telnet client handy. \n\nThen from the client side, just break the connection. (I'm just doing Ctrl-C)\n\nYou should see NO ERROR when using Node v0.9.9, and ERROR when using Node v.0.9.10 and up.\n\nIn production, I use v.0.10. something and it still gives the error. Again, I think this is intended and the solution is to handle the error in your code.\n    ",
        "votes": 32,
        "comentarios": [
            {
                "decripcion": "Thanks, I nailed it myself! It s important not to let errors propagate to uncaughtException because it renders the whole app unstable. E.g. after catching around 10 ECONNRESET errors the server sometimes became unresponsive (just froze and didn t handle any connections)",
                "fecha": { "$date" : "2013-07-23T08:57:46Z" },
                "usuario": "Samson",
                "usuario_id": 995
            },
            {
                "decripcion": "Also knew about the node version change that didn t suppress the error any more, but seeing so many issues showing up and being solved each version I d rather go for the latest one. I m using V0.10.13 now btw",
                "fecha": { "$date" : "2013-07-23T08:59:17Z" },
                "usuario": "Samson",
                "usuario_id": 995
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 627,
        "fecha": { "$date" : "2017-10-19T12:38:50Z" },
        "decripcion": "\nHad the same problem today.\nAfter some research i found a very useful --abort-on-uncaught-exception node.js option. Not only it provides much more verbose and useful error stack trace, but also saves core file on application crash allowing further debug.\n    ",
        "votes": 18,
        "comentarios": [
            {
                "decripcion": "weird that a new answer to this old question should pop up as I'm looking -- but this is great, thanks",
                "fecha": { "$date" : "2015-06-29T18:41:58Z" },
                "usuario": "Semicolon",
                "usuario_id": 998
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 628,
        "fecha": { "$date" : "2015-11-11T09:58:03Z" },
        "decripcion": "\nI was facing the same issue but I mitigated it by placing:\n\nserver.timeout = 0;\n\n\nbefore server.listen. server is an HTTP server here. The default timeout is 2 minutes as per the API documentation.\n    ",
        "votes": 15,
        "comentarios": [
            {
                "decripcion": "This isn't a solution but rather a quickfix which will breaks things without throwing an error.",
                "fecha": { "$date" : "2018-02-12T06:52:35Z" },
                "usuario": "Nishant Ghodke",
                "usuario_id": 999
            },
            {
                "decripcion": "I believe for me the problem was it timing out after a period of 5 minutes or so, would it stilll be a problem?",
                "fecha": { "$date" : "2020-07-23T20:39:40Z" },
                "usuario": "imatwork",
                "usuario_id": 1000
            },
            {
                "decripcion": "Having no timeout could leave you vulnerable to DOS via http vectors",
                "fecha": { "$date" : "2020-09-10T15:05:54Z" },
                "usuario": "Gershy",
                "usuario_id": 1001
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 629,
        "fecha": { "$date" : "2018-04-26T16:18:15Z" },
        "decripcion": "\nI also get ECONNRESET error during my development, the way I solve it is by not using nodemon to start my server, just use \"node server.js\" to start my server fixed my problem. \n\nIt's weird, but it worked for me, now I never see the ECONNRESET error again.\n    ",
        "votes": 13,
        "comentarios": [
            {
                "decripcion": "Any idea how you came up with this solution? You just randomly tried it. This helped me too.",
                "fecha": { "$date" : "2020-09-05T22:35:28Z" },
                "usuario": "Riza Khan",
                "usuario_id": 1002
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 630,
        "fecha": { "$date" : "2016-10-12T12:03:06Z" },
        "decripcion": "\nAnother possible case (but rare) could be if you have server to server communications and have set server.maxConnections to a very low value.\n\nIn node's core lib net.js it will call clientHandle.close() which will also cause error ECONNRESET:\n\nif (self.maxConnections && self._connections >= self.maxConnections) {\n  clientHandle.close(); // causes ECONNRESET on the other end\n  return;\n}\n\n    ",
        "votes": 10,
        "comentarios": [
            {
                "decripcion": "Great call, but maxConnections default value is Infinity. This would be only the case (as you said) if you have explicitly overridden that value.",
                "fecha": { "$date" : "2019-07-15T08:12:22Z" },
                "usuario": "Gajus",
                "usuario_id": 1003
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 631,
        "fecha": { "$date" : "2020-09-04T14:19:35Z" },
        "decripcion": "\nYes, your serving of the policy file can definitely cause the crash.\nTo repeat, just add a delay to your code:\nnet.createServer( function(socket) \n{\n    for (i=0; i<1000000000; i++) ;\n    socket.write(\"<?xml version=\\\"1.0\\\"?>\\n\");\n\u2026\n\n\u2026 and use telnet to connect to the port. If you disconnect telnet before the delay has expired, you'll get a crash (uncaught exception) when socket.write throws an error.\nTo avoid the crash here, just add an error handler before reading/writing the socket:\nnet.createServer(function(socket)\n{\n    for(i=0; i<1000000000; i++);\n    socket.on('error', function(error) { console.error(\"error\", error); });\n    socket.write(\"<?xml version=\\\"1.0\\\"?>\\n\");\n}\n\nWhen you try the above disconnect, you'll just get a log message instead of a crash.\nAnd when you're done, remember to remove the delay.\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 632,
        "fecha": { "$date" : "2018-05-04T16:02:07Z" },
        "decripcion": "\nI had this Error too and was able to solve it after days of debugging and analysis:\n\nmy solution\n\nFor me VirtualBox (for Docker) was the Problem. I had Port Forwarding configured on my VM and the error only occured on the forwarded port.\n\ngeneral conclusions\n\nThe following observations may save you days of work I had to invest:\n\n\nFor me the problem only occurred on connections from localhost to localhost on one port. -> check changing any of these constants solves the problem.\nFor me the problem only occurred on my machine -> let someone else try it.\nFor me the problem only occurred after a while and couldn't be reproduced reliably\nMy Problem couldn't be inspected with any of nodes or expresses (debug-)tools. -> don't waste time on this\n\n\n-> figure out if something is messing around with your network (-settings), like VMs, Firewalls etc., this is probably the cause of the problem.\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 633,
        "fecha": { "$date" : "2019-02-25T11:46:04Z" },
        "decripcion": "\nI had resolved this problem by:\n\n\nTurning off my wifi/ethernet connection and turn on. \nI typed: npm update in terminal to update npm.\nI tried to log out from the session and log in again\n\n\nAfter that I tried the same npm command and the good thing was it worked out. I wasn't sure it is that simple.\n\nI am using CENTOS 7\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 634,
        "fecha": { "$date" : "2020-05-24T00:53:28Z" },
        "decripcion": "\nI just figured this out, at least in my use case.\n\nI was getting ECONNRESET. It turned out that the way my client was set up, it was hitting the server with an API call a ton of times really quickly -- and it only needed to hit the endpoint once. \n\nWhen I fixed that, the error was gone.\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 635,
        "fecha": { "$date" : "2018-02-10T11:27:35Z" },
        "decripcion": "\nI solved the problem by simply connecting to a different network. That is one of the possible problems.\n\nAs discussed above, ECONNRESET means that the TCP conversation abruptly closed its end of the connection. \n\nYour internet connection might be blocking you from connecting to some servers. In my case, I was trying to connect to mLab ( cloud database service that hosts MongoDB databases). And my ISP is blocking it. \n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "This one worked for me, my code which was working fine few hours back suddenly stopped working , turns out, the network change caused the problem",
                "fecha": { "$date" : "2018-04-12T04:39:35Z" },
                "usuario": "Aklank Jain",
                "usuario_id": 1004
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 636,
        "fecha": { "$date" : "2021-06-06T06:32:08Z" },
        "decripcion": "\nECONNRESET occurs when the server side closes the TCP connection and your request to the server is not fulfilled. The server responds with the message that the connection, you are referring to a invalid connection.\nWhy the server sends a request with invalid connection?\nSuppose you have enabled a keep-alive connection between client and server. The keep-alive timeout is configured to 15 seconds. This means that if keep-alive is idle for 15 seconds, it will send connection close request. So after 15 seconds, server tells the client to close the connection. BUT, when server is sending this request, client is sending a new request which is already on flight to the server end. Since this connection is invalid now, server will reject with ECONNRESET error. So the problem occurs due to fewer requests to the server end. So please disable keep-alive and it will work fine.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 637,
        "fecha": { "$date" : "2019-12-19T14:55:08Z" },
        "decripcion": "\nI had the same issue and it appears that the Node.js version was the problem.\n\nI installed the previous version of Node.js (10.14.2) and everything was ok using nvm (allow you to install several version of Node.js and quickly switch from a version to another).\n\nIt is not a \"clean\" solution, but it can serve you temporarly.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 638,
        "fecha": { "$date" : "2021-06-05T05:39:01Z" },
        "decripcion": "\nNode JS socket  is non-blocking io. Consider using a non-blocking io connection from other sources. For instance, if you use a blocking Java socket with node it will only work for a few seconds after which the error will be served. Mitigate this by implementing a non-blocking connection I.e. socketchannel with the selector.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 639,
        "fecha": { "$date" : "2018-04-19T17:40:31Z" },
        "decripcion": "\nTry adding these options to socket.io:\n\nconst options = { transports: ['websocket'], pingTimeout: 3000, pingInterval: 5000 };\n\n\nI hope this will help you !\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 640,
        "fecha": { "$date" : "2014-07-19T18:34:04Z" },
        "decripcion": "\nIt's fatal. The remote server has sent you a RST packet, which indicates an immediate dropping of the connection, rather than the usual handshake. This bypasses the normal half-closed state transition. I like this description:\n\n\n  \"Connection reset by peer\" is the TCP/IP equivalent of slamming the phone back on the hook. It's more polite than merely not replying, leaving one hanging. But it's not the FIN-ACK expected of the truly polite TCP/IP converseur. \n\n    ",
        "votes": 895,
        "comentarios": [
            {
                "decripcion": "Why is it labelled \"connection reset by peer\u201d? It sounds like it should be \"connection reset by the host\", or \"connection reset by the server\"",
                "fecha": { "$date" : "2014-09-26T13:57:13Z" },
                "usuario": "Robert",
                "usuario_id": 138
            },
            {
                "decripcion": "@Robert Because that's where the reset came from. The peer sent an RST packet.",
                "fecha": { "$date" : "2014-12-17T22:44:08Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "... Robert, your concern makes no sense to me. Peer is just strictly more general than that. In a typical client-server model, the server can just as easily receive this notification from the \"client\". The machine that initially requests the connection has just as much power to send this notification. On a TCP level, it looks identical once the connection is ongoing. The two machines, when communicating, are just peers.",
                "fecha": { "$date" : "2015-07-06T19:52:02Z" },
                "usuario": "codetaku",
                "usuario_id": 1006
            },
            {
                "decripcion": "This packed could have been sent by another device in the middle like a router?",
                "fecha": { "$date" : "2016-09-23T12:15:42Z" },
                "usuario": "Arnold Roa",
                "usuario_id": 1007
            },
            {
                "decripcion": "It cannot be called 'connection reset by server' because it can be sent by the client or the server. It cannot be 'bypassed'. If a client receives this error this means the TCP connection is no longer open in the server, for example since the server crashed and was restarted.",
                "fecha": { "$date" : "2017-07-17T08:06:53Z" },
                "usuario": "Johannes Overmann",
                "usuario_id": 1008
            }
        ],
        "usuario": "ire_and_curses",
        "usuario_id": 1009
    },
    {
        "_id": 641,
        "fecha": { "$date" : "2015-03-02T03:15:08Z" },
        "decripcion": "\nThis means that a TCP RST was received and the connection is now closed.  This occurs when a packet is sent from your end of the connection but the other end does not recognize the connection; it will send back a packet with the RST bit set in order to forcibly close the connection.  \n\nThis can happen if the other side crashes and then comes back up or if it calls close() on the socket while there is data from you in transit, and is an indication to you that some of the data that you previously sent may not have been received. \n\nIt is up to you whether that is an error; if the information you were sending was only for the benefit of the remote client then it may not matter that any final data may have been lost.  However you should close the socket and free up any other resources associated with the connection.\n    ",
        "votes": 220,
        "comentarios": [
            {
                "decripcion": "If you set the socket option SO_LINGER to zero when opening a new socket, then close it normally,  the RST bit will be set. So ALL connection will end with a reset. Don't try this it at home, its just annoying. stackoverflow.com/questions/3757289",
                "fecha": { "$date" : "2015-03-02T03:18:08Z" },
                "usuario": "Chris Huang-Leaver",
                "usuario_id": 1010
            },
            {
                "decripcion": "How to fix this issue then, do we need to restart both remote and our host?",
                "fecha": { "$date" : "2018-07-23T00:54:01Z" },
                "usuario": "user2225190",
                "usuario_id": 1011
            },
            {
                "decripcion": "@user2225190 You need to reconnect the client, but first you need to examine your software to make sure it isn't due to an application protocol error, i.e. closing a connection that the other end is still writing to.",
                "fecha": { "$date" : "2018-07-29T04:22:02Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "Thanks for your comment. It used to work for two months. I am also trying it from a command line, but still getting this error. I tries \"sftp user@machine\". Error is inconsistent.",
                "fecha": { "$date" : "2018-07-29T04:51:38Z" },
                "usuario": "user2225190",
                "usuario_id": 1011
            }
        ],
        "usuario": "mark4o",
        "usuario_id": 1012
    },
    {
        "_id": 642,
        "fecha": { "$date" : "2019-08-20T19:30:41Z" },
        "decripcion": "\nThe answer differs depending on what OS is being considered. In general though:\n\nFor TCP, no. You can only have one application listening on the same port at one time. Now if you had 2 network cards, you could have one application listen on the first IP and the second one on the second IP using the same port number.\n\nFor UDP (Multicasts), multiple applications can subscribe to the same port.\n\nEdit: Since Linux Kernel 3.9 and later, support for multiple applications listening to the same port was added using the SO_REUSEPORT option. More information is available at this lwn.net article.\n    ",
        "votes": 282,
        "comentarios": [
            {
                "decripcion": "\"one application listening on a single port\" that's the reason why ports exist -- to allow multiple applications to share the network without conflicts.",
                "fecha": { "$date" : "2009-11-07T19:41:07Z" },
                "usuario": "S.Lott",
                "usuario_id": 416
            },
            {
                "decripcion": "One listener per port per IP address.  Adding another network interface is a way to get a second IP address.  Your platform probably supports virtual interfaces which is another way to get two IP addresses with one physical network card.",
                "fecha": { "$date" : "2009-11-09T22:02:13Z" },
                "usuario": "John M",
                "usuario_id": 1014
            },
            {
                "decripcion": "Although I was of the same opinion until now, it turns out I was able to bind two different processes to same ip and TCP port! This is possible if you set ServerSocket.setReuseAddress(true) in Java before binding to it. Really unexpected behaviour.",
                "fecha": { "$date" : "2013-05-17T17:03:34Z" },
                "usuario": "Eugen",
                "usuario_id": 1015
            },
            {
                "decripcion": "(1) The actual meaning of your answer is 'For TCP, yes, provided ...' (2) Multicast is not a precondition for UDP port sharing, but SO_REUSEADDR is.",
                "fecha": { "$date" : "2013-09-23T00:39:13Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "For UDP (Multicasts), multiple applications can subscribe to the same port. If one packet has arrived from client, which application receive it?",
                "fecha": { "$date" : "2014-08-18T01:38:21Z" },
                "usuario": "Yang Juven",
                "usuario_id": 1016
            }
        ],
        "usuario": "Chris Dail",
        "usuario_id": 1017
    },
    {
        "_id": 643,
        "fecha": { "$date" : "2012-01-11T20:45:48Z" },
        "decripcion": "\nYes (for TCP) you can have two programs listen on the same socket, if the programs are designed to do so. When the socket is created by the first program, make sure the SO_REUSEADDR option is set on the socket before you bind(). However, this may not be what you want. What this does is an incoming TCP connection will be directed to one of the programs, not both, so it does not duplicate the connection, it just allows two programs to service the incoming request. For example, web servers will have multiple processes all listening on port 80, and the O/S sends a new connection to the process that is ready to accept new connections.\n\nSO_REUSEADDR\n\n\nAllows other sockets to bind() to this port, unless there is an active listening socket bound to the port already. This enables you to get around those \"Address already in use\" error messages when you try to restart your server after a crash.\n    ",
        "votes": 137,
        "comentarios": [
            {
                "decripcion": "TCP + UDP now works (given a new enough kernel).  See the link I added to the answer.",
                "fecha": { "$date" : "2013-04-29T20:57:52Z" },
                "usuario": "dpb",
                "usuario_id": 1018
            },
            {
                "decripcion": "This answer is not correct unless all the sockets are bound to distinct IP addresses none of which is INADDR_ANY, or unless you are on Windows, where the result is undefined.",
                "fecha": { "$date" : "2013-07-23T01:07:05Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "Can you expand on how the data goes to a specific app on the same port? Are there any security concerns to think about when apps use SO_REUSEADDR or SO_REUSEPORT?",
                "fecha": { "$date" : "2013-08-19T09:50:51Z" },
                "usuario": "trusktr",
                "usuario_id": 1019
            },
            {
                "decripcion": "@EJP Can you also take a look at my previous comment?",
                "fecha": { "$date" : "2013-08-19T09:51:34Z" },
                "usuario": "trusktr",
                "usuario_id": 1019
            },
            {
                "decripcion": "SO_REUSEADDR certainly doesn't let you have two TCP sockets in listening state at the same time, at least on Unix. It's meant to get around the TIME_WAIT state: unixguide.net/network/socketfaq/4.5.shtml . It might work on Windows, but you're not guaranteed that the request will reach the right server anyway).",
                "fecha": { "$date" : "2015-05-07T17:39:57Z" },
                "usuario": "Bruno",
                "usuario_id": 1020
            }
        ],
        "usuario": "JNewton",
        "usuario_id": 1021
    },
    {
        "_id": 644,
        "fecha": { "$date" : "2014-07-30T08:47:16Z" },
        "decripcion": "\nYes.\n\n\nMultiple listening TCP sockets, all bound to the same port, can co-exist, provided they are all bound to different local IP addresses. Clients can connect to whichever one they need to. This excludes 0.0.0.0 (INADDR_ANY).\nMultiple accepted sockets can co-exist, all accepted from the same listening socket, all showing the same local port number as the listening socket.\nMultiple UDP sockets all bound to the same port can all co-exist provided either the same condition as at (1) or they have all had the SO_REUSEADDR option set before binding.\nTCP ports and UDP ports occupy different namespaces, so the use of a port for TCP does not preclude its use for UDP, and vice versa.\n\n\nReference: Stevens & Wright, TCP/IP Illustrated, Volume II.\n    ",
        "votes": 58,
        "comentarios": [
            {
                "decripcion": "have you a link at hand? The opportunity of TCP-UDP coexistence is my very question. Thanks in advance:)",
                "fecha": { "$date" : "2014-01-29T08:51:30Z" },
                "usuario": "Wolf",
                "usuario_id": 340
            },
            {
                "decripcion": "@Wolf Just try it. That's all the proof you really need. My citation is Stevens & Wright: you can't get much better than that.",
                "fecha": { "$date" : "2014-01-29T11:33:26Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "Thanks for the response, I need to read even more attentive. You already wrote that UDP and TCP can coexist.",
                "fecha": { "$date" : "2014-01-29T12:52:57Z" },
                "usuario": "Wolf",
                "usuario_id": 340
            }
        ],
        "usuario": "user207421",
        "usuario_id": 877
    },
    {
        "_id": 645,
        "fecha": { "$date" : "2017-05-23T12:02:48Z" },
        "decripcion": "\nIn principle, no.\n\nIt's not written in stone; but it's the way all APIs are written: the app opens a port, gets a handle to it, and the OS notifies it (via that handle) when a client connection (or a packet in UDP case) arrives.\n\nIf the OS allowed two apps to open the same port, how would it know which one to notify?\n\nBut... there are ways around it:\n\n\nAs Jed noted, you could write a 'master' process, which would be the only one that really listens on the port and notifies others, using any logic it wants to separate client requests.\n\n\nOn Linux and BSD (at least) you can set up 'remapping' rules that redirect packets from the 'visible' port to different ones (where the apps are listening), according to any network related criteria (maybe network of origin, or some simple forms of load balancing).\n\n\n    ",
        "votes": 49,
        "comentarios": [
            {
                "decripcion": "iptables -m statistic --mode random --probability 0.5 is fun.",
                "fecha": { "$date" : "2009-11-07T21:27:54Z" },
                "usuario": "Jed Smith",
                "usuario_id": 1022
            },
            {
                "decripcion": "What exactly signify \"Opens a port\"? I understand the sentence but do you know what exactly the system do when it open a port and handle it? I know that when you want to open a port with TCP, you get a stream and that stream is your connection with the remote but I search on the web and don't found a very good explanation.",
                "fecha": { "$date" : "2010-12-16T11:15:48Z" },
                "usuario": "Samuel",
                "usuario_id": 1023
            },
            {
                "decripcion": "@Samuel: opening a port (in server mode) means getting a file descriptor, and when the system gets a SYN packet to that port number, responds with SYN+ACK and generates an event on the associated file descriptor.  the application responds to that event with an accept() call, which creates a new file descriptor associated to the specific stream, leaving the original server descriptor free to get new connections from clients",
                "fecha": { "$date" : "2010-12-16T12:00:34Z" },
                "usuario": "Javier",
                "usuario_id": 1024
            },
            {
                "decripcion": "This answer cannot be considered correct. It entirely overlooks the existence of both SO_REUSEADDR and SO_REUSEPORT.",
                "fecha": { "$date" : "2012-09-16T00:31:55Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "@Javier No it doesn't. Opening a port from the point of view of the server application occurs when you bind the listening socket, or rather bind the socket you are about to listen() on. More probably the question is about opening it in the firewall. Far too many errors here, and all uncorrected in 7 years. Answer also omits the case of binding to different local address with the same port number. It is in fact totally incorrect.",
                "fecha": { "$date" : "2019-08-08T06:20:53Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "Javier",
        "usuario_id": 1024
    },
    {
        "_id": 646,
        "fecha": { "$date" : "2017-06-13T08:47:33Z" },
        "decripcion": "\nYes Definitely. As far as i remember From kernel version 3.9 (Not sure on the version) onwards support for the SO_REUSEPORT was introduced. SO_RESUEPORT allows binding to the exact same port and address, As long as the first server sets this option before binding its socket. \n\nIt works for both TCP and UDP. Refer to the link for more details: SO_REUSEPORT\n\nNote: Accepted answer no longer holds true as per my opinion.\n    ",
        "votes": 32,
        "comentarios": [
            {
                "decripcion": "Totally true. If it was not true, how Wireshark could work?",
                "fecha": { "$date" : "2017-11-09T12:45:12Z" },
                "usuario": "Staszek",
                "usuario_id": 1025
            },
            {
                "decripcion": "@Staszek Wireshark doesn't listen to ports. It operates at the packet level.",
                "fecha": { "$date" : "2018-05-15T09:44:00Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "Oh, that would make sense. Anyway, listening two ports by 2 apps is surely possible.",
                "fecha": { "$date" : "2018-05-15T17:58:11Z" },
                "usuario": "Staszek",
                "usuario_id": 1025
            },
            {
                "decripcion": "Thanks, would never know why the http server lib I'm using is allowing binding same ports if it's not this answer.",
                "fecha": { "$date" : "2020-11-20T20:17:10Z" },
                "usuario": "tga",
                "usuario_id": 1026
            }
        ],
        "usuario": "piyush",
        "usuario_id": 1027
    },
    {
        "_id": 647,
        "fecha": { "$date" : "2009-11-07T19:39:54Z" },
        "decripcion": "\nNo.  Only one application can bind to a port at a time, and behavior if the bind is forced is indeterminate.\n\nWith multicast sockets -- which sound like nowhere near what you want -- more than one application can bind to a port as long as SO_REUSEADDR is set in each socket's options.\n\nYou could accomplish this by writing a \"master\" process, which accepts and processes all connections, then hands them off to your two applications who need to listen on the same port.  This is the approach that Web servers and such take, since many processes need to listen to 80.\n\nBeyond this, we're getting into specifics -- you tagged both TCP and UDP, which is it? Also, what platform?\n    ",
        "votes": 19,
        "comentarios": [
            {
                "decripcion": "both are of interest to me. The platform is windows, but if the answer is different for Linux, it would be nice to know",
                "fecha": { "$date" : "2009-11-07T19:49:56Z" },
                "usuario": "nadiv",
                "usuario_id": 1028
            },
            {
                "decripcion": "There is no such thing a s a multicast socket. There are UDP sockets. Multicast is not a precondition for SO_REUSEADDR.",
                "fecha": { "$date" : "2013-09-23T00:42:01Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "Jed Smith",
        "usuario_id": 1022
    },
    {
        "_id": 648,
        "fecha": { "$date" : "2015-03-20T06:52:53Z" },
        "decripcion": "\nYou can have one application listening on one port for one network interface. Therefore you could have:\n\n\nhttpd listening on remotely accessible interface, e.g. 192.168.1.1:80\nanother daemon listening on 127.0.0.1:80\n\n\nSample use case could be to use httpd as a load balancer or a proxy.\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Tomas Tomecek",
        "usuario_id": 1029
    },
    {
        "_id": 649,
        "fecha": { "$date" : "2019-03-14T06:39:04Z" },
        "decripcion": "\nWhen you create a TCP connection, you ask to connect to a specific TCP address, which is a combination of an IP address (v4 or v6, depending on the protocol you're using) and a port.\n\nWhen a server listens for connections, it can inform the kernel that it would like to listen to a specific IP address and port, i.e., one TCP address, or on the same port on each of the host's IP addresses (usually specified with IP address 0.0.0.0), which is effectively listening on a lot of different \"TCP addresses\" (e.g., 192.168.1.10:8000, 127.0.0.1:8000, etc.)\n\nNo, you can't have two applications listening on the same \"TCP address,\" because when a message comes in, how would the kernel know to which application to give the message?\n\nHowever, you in most operating systems you can set up several IP addresses on a single interface (e.g., if you have 192.168.1.10 on an interface, you could also set up 192.168.1.11, if nobody else on the network is using it), and in those cases you could have separate applications listening on port 8000 on each of those two IP addresses.\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "cjs",
        "usuario_id": 1030
    },
    {
        "_id": 650,
        "fecha": { "$date" : "2016-01-28T09:37:03Z" },
        "decripcion": "\nAnother way is use a program listening in one port that analyses the kind of traffic (ssh, https, etc) it redirects internally to another port on which the \"real\" service is listening.\n\nFor example, for Linux, sslh: https://github.com/yrutschle/sslh\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "Is there such a program on windows? I need to have both my local IIS server and ActiveMQ broker listen on port 443",
                "fecha": { "$date" : "2019-10-25T15:46:19Z" },
                "usuario": "Harvey Lin",
                "usuario_id": 1031
            }
        ],
        "usuario": "Mitchbcn",
        "usuario_id": 1032
    },
    {
        "_id": 651,
        "fecha": { "$date" : "2011-10-05T21:24:48Z" },
        "decripcion": "\nIf at least one of the remote IPs is already known, static and dedicated to talk only to one of your apps, you may use iptables rule (table nat, chain PREROUTING) to redirect incomming traffic from this address to \"shared\" local port to any other port where the appropriate application actually listen.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Stemar",
        "usuario_id": 1033
    },
    {
        "_id": 652,
        "fecha": { "$date" : "2019-07-21T08:54:27Z" },
        "decripcion": "\nJust to share what @jnewton mentioned.\nI started an nginx and an embedded tomcat process on my mac. I can see both process runninng at 8080. \n\nLT<XXXX>-MAC:~ b0<XXX>$ sudo netstat -anp tcp | grep LISTEN\ntcp46      0      0  *.8080                 *.*                    LISTEN     \ntcp4       0      0  *.8080                 *.*                    LISTEN   \n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Amit Parashar",
        "usuario_id": 1034
    },
    {
        "_id": 653,
        "fecha": { "$date" : "2013-04-15T16:56:25Z" },
        "decripcion": "\nYes and no.  Only one application can actively listen on a port.  But that application can bequeath its connection to another process.  So you could have multiple processes working on the same port.\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "@trusktr, I think he meant this",
                "fecha": { "$date" : "2014-08-12T10:23:51Z" },
                "usuario": "warvariuc",
                "usuario_id": 1035
            }
        ],
        "usuario": "rajesh",
        "usuario_id": 1036
    },
    {
        "_id": 654,
        "fecha": { "$date" : "2016-04-07T02:46:36Z" },
        "decripcion": "\nYes.\n\nFrom this article:\nhttps://lwn.net/Articles/542629/\n\n\n  The new socket option allows multiple sockets on the same host to bind to the same port\n\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "Nice link, however do not this line written there - The SO_REUSEPORT option is non-standard",
                "fecha": { "$date" : "2017-02-16T10:15:00Z" },
                "usuario": "Sahil Singh",
                "usuario_id": 1037
            }
        ],
        "usuario": "user6169806",
        "usuario_id": 1038
    },
    {
        "_id": 655,
        "fecha": { "$date" : "2013-09-23T00:19:51Z" },
        "decripcion": "\nIf by applications you mean multiple processes then yes but generally NO. \n For example Apache server runs multiple processes on same port (generally 80).It's done by designating one of the process to actually bind to the port and then use that process to do handovers to various processes which are accepting connections. \n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "nitinsh99",
        "usuario_id": 1039
    },
    {
        "_id": 656,
        "fecha": { "$date" : "2014-07-30T09:28:54Z" },
        "decripcion": "\nYou can make two applications listen for the same port on the same network interface.\n\nThere can only be one listening socket for the specified network interface and port, but that socket can be shared between several applications.\n\nIf you have a listening socket in an application process and you fork that process, the socket will be inherited, so technically there will be now two processes listening the same port.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "warvariuc",
        "usuario_id": 1035
    },
    {
        "_id": 657,
        "fecha": { "$date" : "2016-02-23T10:00:17Z" },
        "decripcion": "\nI have tried the following, with socat:\n\nsocat TCP-L:8080,fork,reuseaddr -\n\n\nAnd even though I have not made a connection to the socket, I cannot listen twice on the same port, in spite of the reuseaddr option.\n\nI get this message (which I expected before):\n\n2016/02/23 09:56:49 socat[2667] E bind(5, {AF=2 0.0.0.0:8080}, 16): Address already in use\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "aDoN",
        "usuario_id": 1040
    },
    {
        "_id": 658,
        "fecha": { "$date" : "2017-05-23T12:02:48Z" },
        "decripcion": "\nShort answer:\n\nGoing by the answer given here. You can have two applications listening on the same IP address, and port number, so long one of the port is a UDP port, while other is a TCP port.\n\nExplanation:\n\nThe concept of port is relevant on the transport layer of the TCP/IP stack, thus as long as you are using different transport layer protocols of the stack, you can have multiple processes listening on the same <ip-address>:<port> combination.\n\nOne doubt that people have is if two applications are running on the same <ip-address>:<port> combination, how will a client running on a remote machine distinguish between the two? If you look at the IP layer packet header (https://en.wikipedia.org/wiki/IPv4#Header), you will see that bits 72 to 79 are used for defining protocol, this is how the distinction can be made.\n\nIf however you want to have two applications on same TCP <ip-address>:<port> combination, then the answer is no (An interesting exercise will be launch two VMs, give them same IP address, but different MAC addresses, and see what happens - you will notice that some times VM1 will get packets, and other times VM2 will get packets - depending on ARP cache refresh).\n\nI feel that by making two applications run on the same <op-address>:<port> you want to achieve some kind of load balancing. For this you can run the applications on different ports, and write IP table rules to bifurcate the traffic between them. \n\nAlso see @user6169806's answer.\n    ",
        "votes": -2,
        "comentarios": [],
        "usuario": "Sahil Singh",
        "usuario_id": 1037
    },
    {
        "_id": 659,
        "fecha": { "$date" : "2019-01-28T06:46:19Z" },
        "decripcion": "\nThe thing is that pdp_ip0 is one of interfaces, all pdpXXX are WWAN interfaces dedicated to different functions, voicemail, general networking interface.\n\nI read in Apple forum that :\nThe OS does not keep network statistics on a process-by-process basis. As such, there's no exact solution to this problem. You can, however, get network statistics for each network interface.\n\nIn general en0 is your Wi-Fi interface and pdp_ip0 is your WWAN interface.\n\nThere is no good way to get  information wifi/cellular network data since, particular date-time! \n\nData statistic (ifa_data->ifi_obytes and ifa_data->ifi_ibytes) are stored from previous device reboot.  \n\nI don't know why, but ifi_opackets and ifi_ipackets are shown just for lo0 (I think its main interface ).\n\nYes. Then  device is connected via WiFi and doesn't use internet if_iobytes values still come because this method provides network  bytes exchanges and not just internet.\n\n#include <net/if.h>\n#include <ifaddrs.h>\n\nstatic NSString *const DataCounterKeyWWANSent = @\"WWANSent\";\nstatic NSString *const DataCounterKeyWWANReceived = @\"WWANReceived\";\nstatic NSString *const DataCounterKeyWiFiSent = @\"WiFiSent\";\nstatic NSString *const DataCounterKeyWiFiReceived = @\"WiFiReceived\";\n\nNSDictionary *DataCounters()\n{\n    struct ifaddrs *addrs;\n    const struct ifaddrs *cursor;\n\n    u_int32_t WiFiSent = 0;\n    u_int32_t WiFiReceived = 0;\n    u_int32_t WWANSent = 0;\n    u_int32_t WWANReceived = 0;\n\n    if (getifaddrs(&addrs) == 0)\n    {\n        cursor = addrs;\n        while (cursor != NULL)\n        {\n            if (cursor->ifa_addr->sa_family == AF_LINK)\n            {\n#ifdef DEBUG\n                const struct if_data *ifa_data = (struct if_data *)cursor->ifa_data;\n                if (ifa_data != NULL)\n                {\n                    NSLog(@\"Interface name %s: sent %tu received %tu\",cursor->ifa_name,ifa_data->ifi_obytes,ifa_data->ifi_ibytes);\n                }\n#endif\n\n                // name of interfaces:\n                // en0 is WiFi\n                // pdp_ip0 is WWAN\n                NSString *name = @(cursor->ifa_name);\n                if ([name hasPrefix:@\"en\"])\n                {\n                    const struct if_data *ifa_data = (struct if_data *)cursor->ifa_data;\n                    if (ifa_data != NULL)\n                    {\n                        WiFiSent += ifa_data->ifi_obytes;\n                        WiFiReceived += ifa_data->ifi_ibytes;\n                    }\n                }\n\n                if ([name hasPrefix:@\"pdp_ip\"])\n                {\n                    const struct if_data *ifa_data = (struct if_data *)cursor->ifa_data;\n                    if (ifa_data != NULL)\n                    {\n                        WWANSent += ifa_data->ifi_obytes;\n                        WWANReceived += ifa_data->ifi_ibytes;\n                    }\n                }\n            }\n\n            cursor = cursor->ifa_next;\n        }\n\n        freeifaddrs(addrs);\n    }\n\n    return @{DataCounterKeyWiFiSent : @(WiFiSent),\n             DataCounterKeyWiFiReceived : @(WiFiReceived),\n             DataCounterKeyWWANSent : @(WWANSent),\n             DataCounterKeyWWANReceived : @(WWANReceived)};\n}\n\n\nImproved copy/paste support ! \n    ",
        "votes": 177,
        "comentarios": [
            {
                "decripcion": "Thanks a lot. This code worked wonders. Also thanks for explaining the stuff.",
                "fecha": { "$date" : "2011-11-05T14:10:03Z" },
                "usuario": "Sahil Khanna",
                "usuario_id": 1042
            },
            {
                "decripcion": "You need to import this libraries: #include <arpa/inet.h> #include <net/if.h> #include <ifaddrs.h> #include <net/if_dl.h>",
                "fecha": { "$date" : "2012-02-11T21:51:53Z" },
                "usuario": "user982705",
                "usuario_id": 1043
            },
            {
                "decripcion": "Is it possible with this code to track data traffic per iOS application ?",
                "fecha": { "$date" : "2012-04-30T15:36:24Z" },
                "usuario": "fvisticot",
                "usuario_id": 1044
            },
            {
                "decripcion": "@Mat: The solution I've designed if for enterprise clients and is not deployed on the AppStore.",
                "fecha": { "$date" : "2012-05-21T04:48:05Z" },
                "usuario": "Sahil Khanna",
                "usuario_id": 1042
            },
            {
                "decripcion": "Has anybody figured out how to get the data per app? Share the code please :)",
                "fecha": { "$date" : "2015-01-27T11:10:08Z" },
                "usuario": "Bob de Graaf",
                "usuario_id": 1045
            }
        ],
        "usuario": "user982705",
        "usuario_id": 1043
    },
    {
        "_id": 660,
        "fecha": { "$date" : "2019-01-28T06:47:15Z" },
        "decripcion": "\nIt's important to understand that these counters are provided since the device's last boot.\n\nSo, to make effective use of them, you should accompany every sample with the device's uptime (you can use mach_absolute_time() - see this for more information)\n\nOnce you have counters samples + uptime you can have better heuristics as to data use...\n    ",
        "votes": 16,
        "comentarios": [
            {
                "decripcion": "mach_absolute_time is not uptime. It is roughly the amount of time the CPU has been active. mach_absolute_time mostly stops counting when the device sleeps.",
                "fecha": { "$date" : "2015-10-26T20:26:06Z" },
                "usuario": "Bob Whiteman",
                "usuario_id": 1046
            }
        ],
        "usuario": "Wiz",
        "usuario_id": 1047
    },
    {
        "_id": 661,
        "fecha": { "$date" : "2019-01-28T06:48:37Z" },
        "decripcion": "\nTo add to the accepted answer, its important to realize that the amount of data displayed by the interface overflows and restarts at 0 after every 4 GB, especially if you are using this code to calculate the difference between two readings. This is because ifi_obytes and ifi_ibytes are uint_32 and their max value is 4294967295.\n\nAlso, I recommend using unsigned ints for the variables containing the data sent and received. Regular ints have half the max value of an unsigned integer, so when adding ifi_obytes, it may cause an overflow.\n\nunsigned int sent = 0;\nsent += networkStatisc->ifi_obytes;\n\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "Jim109",
        "usuario_id": 1048
    },
    {
        "_id": 662,
        "fecha": { "$date" : "2016-11-20T19:36:44Z" },
        "decripcion": "\nSwift version of the accepted answer. I also break the code into smaller units.\n\nstruct DataUsageInfo {\n    var wifiReceived: UInt32 = 0\n    var wifiSent: UInt32 = 0\n    var wirelessWanDataReceived: UInt32 = 0\n    var wirelessWanDataSent: UInt32 = 0\n\n    mutating func updateInfoByAdding(info: DataUsageInfo) {\n        wifiSent += info.wifiSent\n        wifiReceived += info.wifiReceived\n        wirelessWanDataSent += info.wirelessWanDataSent\n        wirelessWanDataReceived += info.wirelessWanDataReceived\n    }\n}\n\nclass DataUsage {\n\n    private static let wwanInterfacePrefix = \"pdp_ip\"\n    private static let wifiInterfacePrefix = \"en\"\n\n    class func getDataUsage() -> DataUsageInfo {\n        var interfaceAddresses: UnsafeMutablePointer<ifaddrs> = nil\n        var dataUsageInfo = DataUsageInfo()\n\n        guard getifaddrs(&interfaceAddresses) == 0 else { return dataUsageInfo }\n\n        var pointer = interfaceAddresses\n        while pointer != nil {\n            guard let info = getDataUsageInfo(from: pointer) else {\n                pointer = pointer.memory.ifa_next\n                continue\n            }\n            dataUsageInfo.updateInfoByAdding(info)\n            pointer = pointer.memory.ifa_next\n        }\n\n        freeifaddrs(interfaceAddresses)\n\n        return dataUsageInfo\n    }\n\n    private class func getDataUsageInfo(from infoPointer: UnsafeMutablePointer<ifaddrs>) -> DataUsageInfo? {\n        let pointer = infoPointer\n\n        let name: String! = String.fromCString(infoPointer.memory.ifa_name)\n\n        let addr = pointer.memory.ifa_addr.memory\n        guard addr.sa_family == UInt8(AF_LINK) else { return nil }\n\n        return dataUsageInfo(from: pointer, name: name)\n    }\n\n    private class func dataUsageInfo(from pointer: UnsafeMutablePointer<ifaddrs>, name: String) -> DataUsageInfo {\n        var networkData: UnsafeMutablePointer<if_data> = nil\n        var dataUsageInfo = DataUsageInfo()\n\n        if name.hasPrefix(wifiInterfacePrefix) {\n            networkData = unsafeBitCast(pointer.memory.ifa_data, UnsafeMutablePointer<if_data>.self)\n            dataUsageInfo.wifiSent += networkData.memory.ifi_obytes\n            dataUsageInfo.wifiReceived += networkData.memory.ifi_ibytes\n        } else if name.hasPrefix(wwanInterfacePrefix) {\n            networkData = unsafeBitCast(pointer.memory.ifa_data, UnsafeMutablePointer<if_data>.self)\n            dataUsageInfo.wirelessWanDataSent += networkData.memory.ifi_obytes\n            dataUsageInfo.wirelessWanDataReceived += networkData.memory.ifi_ibytes\n        }\n\n        return dataUsageInfo\n    }\n}\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Adnan Aftab",
        "usuario_id": 1049
    },
    {
        "_id": 663,
        "fecha": { "$date" : "2017-05-11T13:30:45Z" },
        "decripcion": "\nI fixed above source code to Swift3 version\n\nstruct DataUsageInfo {\n    var wifiReceived: UInt32 = 0\n    var wifiSent: UInt32 = 0\n    var wirelessWanDataReceived: UInt32 = 0\n    var wirelessWanDataSent: UInt32 = 0\n\n    mutating func updateInfoByAdding(_ info: DataUsageInfo) {\n        wifiSent += info.wifiSent\n        wifiReceived += info.wifiReceived\n        wirelessWanDataSent += info.wirelessWanDataSent\n        wirelessWanDataReceived += info.wirelessWanDataReceived\n    }\n}\n\n\nclass DataUsage {\n\n    private static let wwanInterfacePrefix = \"pdp_ip\"\n    private static let wifiInterfacePrefix = \"en\"\n\n    class func getDataUsage() -> DataUsageInfo {\n        var ifaddr: UnsafeMutablePointer<ifaddrs>?\n        var dataUsageInfo = DataUsageInfo()\n\n        guard getifaddrs(&ifaddr) == 0 else { return dataUsageInfo }\n        while let addr = ifaddr {\n            guard let info = getDataUsageInfo(from: addr) else {\n                ifaddr = addr.pointee.ifa_next\n                continue\n            }\n            dataUsageInfo.updateInfoByAdding(info)\n            ifaddr = addr.pointee.ifa_next\n        }\n\n        freeifaddrs(ifaddr)\n\n        return dataUsageInfo\n    }\n\n    private class func getDataUsageInfo(from infoPointer: UnsafeMutablePointer<ifaddrs>) -> DataUsageInfo? {\n        let pointer = infoPointer\n        let name: String! = String(cString: pointer.pointee.ifa_name)\n        let addr = pointer.pointee.ifa_addr.pointee\n        guard addr.sa_family == UInt8(AF_LINK) else { return nil }\n\n        return dataUsageInfo(from: pointer, name: name)\n    }\n\n    private class func dataUsageInfo(from pointer: UnsafeMutablePointer<ifaddrs>, name: String) -> DataUsageInfo {\n        var networkData: UnsafeMutablePointer<if_data>?\n        var dataUsageInfo = DataUsageInfo()\n\n        if name.hasPrefix(wifiInterfacePrefix) {\n            networkData = unsafeBitCast(pointer.pointee.ifa_data, to: UnsafeMutablePointer<if_data>.self)\n            if let data = networkData {\n                dataUsageInfo.wifiSent += data.pointee.ifi_obytes\n                dataUsageInfo.wifiReceived += data.pointee.ifi_ibytes\n            }\n\n        } else if name.hasPrefix(wwanInterfacePrefix) {\n            networkData = unsafeBitCast(pointer.pointee.ifa_data, to: UnsafeMutablePointer<if_data>.self)\n            if let data = networkData {\n                dataUsageInfo.wirelessWanDataSent += data.pointee.ifi_obytes\n                dataUsageInfo.wirelessWanDataReceived += data.pointee.ifi_ibytes\n            }\n        }\n\n        return dataUsageInfo\n    }\n}\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Jonghee Park",
        "usuario_id": 1050
    },
    {
        "_id": 664,
        "fecha": { "$date" : "2018-01-12T19:03:05Z" },
        "decripcion": "\nA new version about based on previous versions, but adapted for Swift4 and Xcode 9\n\nstruct DataUsageInfo {\n    var wifiReceived: UInt32 = 0\n    var wifiSent: UInt32 = 0\n    var wirelessWanDataReceived: UInt32 = 0\n    var wirelessWanDataSent: UInt32 = 0\n\n    mutating func updateInfoByAdding(info: DataUsageInfo) {\n        wifiSent += info.wifiSent\n        wifiReceived += info.wifiReceived\n        wirelessWanDataSent += info.wirelessWanDataSent\n        wirelessWanDataReceived += info.wirelessWanDataReceived\n    }\n}\n\nclass DataUsage {\n\n    private static let wwanInterfacePrefix = \"pdp_ip\"\n    private static let wifiInterfacePrefix = \"en\"\n\n    class func getDataUsage() -> DataUsageInfo {\n        var interfaceAddresses: UnsafeMutablePointer<ifaddrs>? = nil\n\n        var dataUsageInfo = DataUsageInfo()\n\n        guard getifaddrs(&interfaceAddresses) == 0 else { return dataUsageInfo }\n\n        var pointer = interfaceAddresses\n        while pointer != nil {\n            guard let info = getDataUsageInfo(from: pointer!) else {\n                pointer = pointer!.pointee.ifa_next\n                continue\n            }\n            dataUsageInfo.updateInfoByAdding(info: info)\n            pointer = pointer!.pointee.ifa_next\n        }\n\n        freeifaddrs(interfaceAddresses)\n\n        return dataUsageInfo\n    }\n\n    private class func getDataUsageInfo(from infoPointer: UnsafeMutablePointer<ifaddrs>) -> DataUsageInfo? {\n        let pointer = infoPointer\n\n        let name: String! = String(cString: infoPointer.pointee.ifa_name)\n        let addr = pointer.pointee.ifa_addr.pointee\n        guard addr.sa_family == UInt8(AF_LINK) else { return nil }\n\n        return dataUsageInfo(from: pointer, name: name)\n    }\n\n    private class func dataUsageInfo(from pointer: UnsafeMutablePointer<ifaddrs>, name: String) -> DataUsageInfo {\n        var networkData: UnsafeMutablePointer<if_data>? = nil\n        var dataUsageInfo = DataUsageInfo()\n\n        if name.hasPrefix(wifiInterfacePrefix) {\n            networkData = unsafeBitCast(pointer.pointee.ifa_data, to: UnsafeMutablePointer<if_data>.self)\n            dataUsageInfo.wifiSent += networkData?.pointee.ifi_obytes ?? 0\n            dataUsageInfo.wifiReceived += networkData?.pointee.ifi_ibytes ?? 0\n        } else if name.hasPrefix(wwanInterfacePrefix) {\n            networkData = unsafeBitCast(pointer.pointee.ifa_data, to: UnsafeMutablePointer<if_data>.self)\n            dataUsageInfo.wirelessWanDataSent += networkData?.pointee.ifi_obytes ?? 0\n            dataUsageInfo.wirelessWanDataReceived += networkData?.pointee.ifi_ibytes ?? 0\n        }\n\n        return dataUsageInfo\n    }\n}\n\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "does it show for each app or the actual app where it's used?",
                "fecha": { "$date" : "2018-05-08T00:20:40Z" },
                "usuario": "Yaroslav Dukal",
                "usuario_id": 1051
            },
            {
                "decripcion": "It's the global usage... It's not separated by app.",
                "fecha": { "$date" : "2018-05-08T23:34:55Z" },
                "usuario": "dede.exe",
                "usuario_id": 1052
            },
            {
                "decripcion": "And the value is from the last reboot. No way of getting for the past/current month?",
                "fecha": { "$date" : "2018-10-04T13:33:54Z" },
                "usuario": "Slavcho",
                "usuario_id": 1053
            },
            {
                "decripcion": "@Slavcho. Until this post date it was not possible. I still didn't do a new research about it after iOS12. I recommend you to accumulate ir in some place to recovery it after.",
                "fecha": { "$date" : "2018-10-04T13:39:02Z" },
                "usuario": "dede.exe",
                "usuario_id": 1052
            }
        ],
        "usuario": "dede.exe",
        "usuario_id": 1052
    },
    {
        "_id": 665,
        "fecha": { "$date" : "2019-08-08T09:57:09Z" },
        "decripcion": "\nSorry for same answer again.\n\nbut I found that UInt32 is not enough, so it crashes when it became too big.\n\nI just changed UInt32 to UInt64 and it works fine.\n\nstruct DataUsageInfo {\n    var wifiReceived: UInt64 = 0\n    var wifiSent: UInt64 = 0\n    var wirelessWanDataReceived: UInt64 = 0\n    var wirelessWanDataSent: UInt64 = 0\n\n    mutating func updateInfoByAdding(info: DataUsageInfo) {\n        wifiSent += info.wifiSent\n        wifiReceived += info.wifiReceived\n        wirelessWanDataSent += info.wirelessWanDataSent\n        wirelessWanDataReceived += info.wirelessWanDataReceived\n    }\n}\n\nclass DataUsage {\n\n    private static let wwanInterfacePrefix = \"pdp_ip\"\n    private static let wifiInterfacePrefix = \"en\"\n\n    class func getDataUsage() -> DataUsageInfo {\n        var interfaceAddresses: UnsafeMutablePointer<ifaddrs>? = nil\n\n        var dataUsageInfo = DataUsageInfo()\n\n        guard getifaddrs(&interfaceAddresses) == 0 else { return dataUsageInfo }\n\n        var pointer = interfaceAddresses\n        while pointer != nil {\n            guard let info = getDataUsageInfo(from: pointer!) else {\n                pointer = pointer!.pointee.ifa_next\n                continue\n            }\n            dataUsageInfo.updateInfoByAdding(info: info)\n            pointer = pointer!.pointee.ifa_next\n        }\n\n        freeifaddrs(interfaceAddresses)\n\n        return dataUsageInfo\n    }\n\n    private class func getDataUsageInfo(from infoPointer: UnsafeMutablePointer<ifaddrs>) -> DataUsageInfo? {\n        let pointer = infoPointer\n\n        let name: String! = String(cString: infoPointer.pointee.ifa_name)\n        let addr = pointer.pointee.ifa_addr.pointee\n        guard addr.sa_family == UInt8(AF_LINK) else { return nil }\n\n        return dataUsageInfo(from: pointer, name: name)\n    }\n\n    private class func dataUsageInfo(from pointer: UnsafeMutablePointer<ifaddrs>, name: String) -> DataUsageInfo {\n        var networkData: UnsafeMutablePointer<if_data>? = nil\n        var dataUsageInfo = DataUsageInfo()\n\n        if name.hasPrefix(wifiInterfacePrefix) {\n            networkData = unsafeBitCast(pointer.pointee.ifa_data, to: UnsafeMutablePointer<if_data>.self)\n            dataUsageInfo.wifiSent += UInt64(networkData?.pointee.ifi_obytes ?? 0)\n            dataUsageInfo.wifiReceived += UInt64(networkData?.pointee.ifi_ibytes ?? 0)\n        } else if name.hasPrefix(wwanInterfacePrefix) {\n            networkData = unsafeBitCast(pointer.pointee.ifa_data, to: UnsafeMutablePointer<if_data>.self)\n            dataUsageInfo.wirelessWanDataSent += UInt64(networkData?.pointee.ifi_obytes ?? 0)\n            dataUsageInfo.wirelessWanDataReceived += UInt64(networkData?.pointee.ifi_ibytes ?? 0)\n        }\n\n        return dataUsageInfo\n    }\n}\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Soohwan Park",
        "usuario_id": 1054
    },
    {
        "_id": 666,
        "fecha": { "$date" : "2019-07-30T20:49:58Z" },
        "decripcion": "\nThis generally means that the remote side closed the connection (usually by sending a TCP/IP RST packet). If you're working with a third-party application, the likely causes are:\n\n\nYou are sending malformed data to the application (which could include sending an HTTPS request to an HTTP server)\nThe network link between the client and server is going down for some reason\nYou have triggered a bug in the third-party application that caused it to crash\nThe third-party application has exhausted system resources\n\n\nIt's likely that the first case is what's happening.\n\nYou can fire up Wireshark to see exactly what is happening on the wire to narrow down the problem.\n\nWithout more specific information, it's unlikely that anyone here can really help you much.\n    ",
        "votes": 124,
        "comentarios": [
            {
                "decripcion": "Great. Thanks. The other thing about wireshark. It collects so much data, how would I be able to filter out something like this? If wireshark shows up something I might post it here later on ...",
                "fecha": { "$date" : "2010-04-06T01:26:38Z" },
                "usuario": "peter",
                "usuario_id": 1055
            },
            {
                "decripcion": "You should be able to filter the Wireshark dump by IP address and port number, at least. After that, it's probably most helpful to look at the end of the stream (where something went wrong) and work backwards until you can spot where things first get messed up. Depending on the complexity of the protocol involved, it can be really easy to almost impossible...",
                "fecha": { "$date" : "2010-04-06T02:02:26Z" },
                "usuario": "RarrRarrRarr",
                "usuario_id": 1056
            },
            {
                "decripcion": "Is there a source for the bulleted items, or did gamer's answer below just copy your list?",
                "fecha": { "$date" : "2014-06-17T16:48:36Z" },
                "usuario": "Zack",
                "usuario_id": 1057
            },
            {
                "decripcion": "Please note that \"sending malformed data\" could mean sending a https request to a http server and probably vice versa.",
                "fecha": { "$date" : "2017-09-25T14:29:55Z" },
                "usuario": "AXMIM",
                "usuario_id": 1058
            },
            {
                "decripcion": "In my case, I was getting this exception only when calling an api when running app locally.  No problems in dev, qa, or prod environments.  The fix?  Using http instead of https locally.  We think it may be related to a load balancer.  But we just updated our dev, qa, and prod web.configs with transforms for https.  Problem solved.",
                "fecha": { "$date" : "2018-11-13T23:03:45Z" },
                "usuario": "Kershaw",
                "usuario_id": 1059
            }
        ],
        "usuario": "RarrRarrRarr",
        "usuario_id": 1056
    },
    {
        "_id": 667,
        "fecha": { "$date" : "2018-06-18T18:16:51Z" },
        "decripcion": "\nUsing TLS 1.2 solved this error.\nYou can force your application using TLS 1.2 with this (make sure to execute it before calling your service): \n\nServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 \n\n\nAnother solution :\nEnable strong cryptography in your local machine or server in order to use TLS1.2 because by default it is disabled so only TLS1.0 is used.\nTo enable strong cryptography , execute these commande in PowerShell with admin privileges :\n\nSet-ItemProperty -Path 'HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\.NetFramework\\v4.0.30319' -Name 'SchUseStrongCrypto' -Value '1' -Type DWord\nSet-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\.NetFramework\\v4.0.30319' -Name 'SchUseStrongCrypto' -Value '1' -Type DWord \n\n\nYou need to reboot your computer for these changes to take effect.\n    ",
        "votes": 110,
        "comentarios": [
            {
                "decripcion": "You can add multiple values together to support multiple protocols. So to support everything from SSL3 to TLS1.2, set SecurityProtocol = (SecurityProtocolType)4080.",
                "fecha": { "$date" : "2019-01-29T19:08:32Z" },
                "usuario": "Abacus",
                "usuario_id": 1060
            },
            {
                "decripcion": "Dumb question: I have two servers. One of the servers has this issue, but the other one works fine. I'm trying to determine what's different between these servers. I don't even see the registry key \"SchUseStrongCrypto\" in either of them. What does it mean when the key doesn't exist? It's going to use a default TLS?",
                "fecha": { "$date" : "2021-01-21T17:21:26Z" },
                "usuario": "Vin Shahrdar",
                "usuario_id": 1061
            },
            {
                "decripcion": "Wow, thanks for this!",
                "fecha": { "$date" : "2021-02-16T05:06:36Z" },
                "usuario": "Len White",
                "usuario_id": 1062
            }
        ],
        "usuario": "willmaz",
        "usuario_id": 1063
    },
    {
        "_id": 668,
        "fecha": { "$date" : "2011-06-15T12:46:40Z" },
        "decripcion": "\nThis is not a bug in your code. It is coming from .Net's Socket implementation. If you use the overloaded implementation of EndReceive as below you will not get this exception.\n\n    SocketError errorCode;\n    int nBytesRec = socket.EndReceive(ar, out errorCode);\n    if (errorCode != SocketError.Success)\n    {\n        nBytesRec = 0;\n    }\n\n    ",
        "votes": 35,
        "comentarios": [
            {
                "decripcion": "This is coming from the operating system, and ultimately from the peer. Further explanation is required of the allegation that it is a software bug.",
                "fecha": { "$date" : "2015-09-03T11:10:56Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "+1. In my C# program, I was banging my head as to why EndReceive is throwing an exception when there is a graceful client termination. Didnt know this is by design. I feel its bad design to throw exception in normal code flows. Thank God for the overloaded method.",
                "fecha": { "$date" : "2015-09-28T04:00:20Z" },
                "usuario": "Pavan Manjunath",
                "usuario_id": 1064
            },
            {
                "decripcion": "@MSaudi This is using an asynchronous call, be sure you understand your code will not stop while it is processing the data being returned. Example uses msdn.microsoft.com/en-us/library/bew39x2a(v=vs.110).aspx . Basically you have to have a StateObject class with public byte[] buffer = new byte[1024], public Socket socket; and call a function called Receive(Socket s), which does StateObject so = new StateObject(); so.socket = s; s.BeginReceive(so.buffer, 0, 256, 0, new AsyncCallback(ReceiveCallback), so);  and in void ReceiveCallback(IAsyncResult ar) you call that code, above.",
                "fecha": { "$date" : "2017-05-09T23:47:36Z" },
                "usuario": "vapcguy",
                "usuario_id": 1065
            },
            {
                "decripcion": "@cagatay While it offers a solution, I never saw value in asynchronous methods where you need to know right away what is coming back after you do your Send before you can do anything else.",
                "fecha": { "$date" : "2017-05-09T23:56:18Z" },
                "usuario": "vapcguy",
                "usuario_id": 1065
            },
            {
                "decripcion": "Actually I found that this method is not foolproof.  It can also cause the OP's error:  stackoverflow.com/questions/17790612/\u2026",
                "fecha": { "$date" : "2017-05-10T14:31:30Z" },
                "usuario": "vapcguy",
                "usuario_id": 1065
            }
        ],
        "usuario": "cagatay",
        "usuario_id": 1066
    },
    {
        "_id": 669,
        "fecha": { "$date" : "2017-06-09T15:34:23Z" },
        "decripcion": "\nHad the same bug. Actually worked in case the traffic was sent using some proxy (fiddler in my case). Updated .NET framework from 4.5.2  to >=4.6 and now everything works fine. The actual request was:\nnew WebClient().DownloadData(\"URL\");\nThe exception was:   \n\n\n  SocketException: An existing connection was forcibly closed by the\n  remote host\n\n    ",
        "votes": 13,
        "comentarios": [
            {
                "decripcion": "This was one way to solve things for me. It actually was related to which version of TLS .NET used by default. 4.5.2 and lower used TLS 1.0, while 4.6 and greater are smarter about allowing 1.1 and 1.2. This was also provable by dropping the TLS requirement on the server to 1.0, which fixed the issue as well.",
                "fecha": { "$date" : "2017-10-04T19:45:14Z" },
                "usuario": "HotN",
                "usuario_id": 1067
            }
        ],
        "usuario": "0x49D1",
        "usuario_id": 1068
    },
    {
        "_id": 670,
        "fecha": { "$date" : "2017-02-16T20:27:47Z" },
        "decripcion": "\nSimple solution for this common annoying issue: \n\nJust go to your \".context.cs\" file (located under \".context.tt\" which located under your \"*.edmx\" file). \n\nThen, add this line to your constructor: \n\npublic DBEntities() \n        : base(\"name=DBEntities\") \n    { \n        this.Configuration.ProxyCreationEnabled = false; // ADD THIS LINE !\n    }\n\n\nhope this is helpful.  \n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "@Esi where to put this? and no return type??",
                "fecha": { "$date" : "2016-04-08T02:27:11Z" },
                "usuario": "Khalil Khalaf",
                "usuario_id": 1069
            },
            {
                "decripcion": "@FirstStep: Coz this is a constructor.",
                "fecha": { "$date" : "2016-07-12T10:55:28Z" },
                "usuario": "Nikhil Agrawal",
                "usuario_id": 1070
            },
            {
                "decripcion": "This only helps those using Entity Framework that are experiencing the issue, not those that are doing a simple socket.Send(x); byte[] buffer = new byte[1]; socket.Receive(buffer, 0, 1, 0); to read the bytes returned, which was the OP's issue.",
                "fecha": { "$date" : "2017-05-10T14:27:23Z" },
                "usuario": "vapcguy",
                "usuario_id": 1065
            },
            {
                "decripcion": "if using ENTITY FRAMEWORK only this solution works !!! only this ! thanks bro :)",
                "fecha": { "$date" : "2019-05-25T15:03:33Z" },
                "usuario": "Rao Hammas",
                "usuario_id": 1071
            },
            {
                "decripcion": "Is this a joke answer? Entity Framework 6 proxies is totally unrelated to networking/socket which this question is about.",
                "fecha": { "$date" : "2021-01-21T12:27:25Z" },
                "usuario": "0xced",
                "usuario_id": 1072
            }
        ],
        "usuario": "ayheber",
        "usuario_id": 1073
    },
    {
        "_id": 671,
        "fecha": { "$date" : "2016-10-12T13:21:14Z" },
        "decripcion": "\nI've got this exception because of circular reference in entity.In entity that look like\n\npublic class Catalog\n{\n    public int Id { get; set; }\n    public int ParentId { get; set; }\n    public Catalog Parent { get; set; }\n    public ICollection<Catalog> ChildCatalogs { get; set; }\n}\n\n\nI added [IgnoreDataMemberAttribute] to the Parent property. And that solved the problem.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Bazaleev Nikolai",
        "usuario_id": 1074
    },
    {
        "_id": 672,
        "fecha": { "$date" : "2021-01-12T14:58:46Z" },
        "decripcion": "\nIf Running In A .Net 4.5.2 Service\nFor me the issue was compounded because the call was running in a .Net 4.5.2 service. I followed @willmaz suggestion but got a new error.\nIn running the service with logging turned on, I viewed the handshaking with the target site would initiate ok (and send the bearer token) but on the following step to process the Post call, it would seem to drop the auth token and the site would reply with Unauthorized.\nSolution\nIt turned out that the service pool credentials did not have rights to change TLS (?) and when I put in my local admin account into the pool, it all worked.\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "\u03a9megaMan",
        "usuario_id": 1075
    },
    {
        "_id": 673,
        "fecha": { "$date" : "2020-05-18T18:05:13Z" },
        "decripcion": "\nFor anyone getting this exception while reading data from the stream, this may help. I was getting this exception when reading the HttpResponseMessage in a loop like this:\n\nusing (var remoteStream = await response.Content.ReadAsStreamAsync())\nusing (var content = File.Create(DownloadPath))\n{\n    var buffer = new byte[1024];\n    int read;\n\n    while ((read = await remoteStream.ReadAsync(buffer, 0, buffer.Length)) != 0)\n    {\n        await content.WriteAsync(buffer, 0, read);\n        await content.FlushAsync();\n    }\n}\n\n\nAfter some time I found out the culprit was the buffer size, which was too small and didn't play well with my weak Azure instance. What helped was to change the code to:\n\nusing (Stream remoteStream = await response.Content.ReadAsStreamAsync())\nusing (FileStream content = File.Create(DownloadPath))\n{\n    await remoteStream.CopyToAsync(content);\n}\n\n\nCopyTo() method has a default buffer size of 81920. The bigger buffer sped up the process and the errors stopped immediately, most likely because the overall download speeds increased. But why would download speed matter in preventing this error?\n\nIt is possible that you get disconnected from the server because the download speeds drop below minimum threshold the server is configured to allow. For example, in case the application you are downloading the file from is hosted on IIS, it can be a problem with http.sys configuration:\n\n\"Http.sys is the http protocol stack that IIS uses to perform http communication with clients.  It has a timer called MinBytesPerSecond that is responsible for killing a connection if its transfer rate drops below some kb/sec threshold.  By default, that threshold is set to 240 kb/sec.\" \n\nThe issue is described in this old blogpost from TFS development team and concerns IIS specifically, but may point you in a right direction. It also mentions an old bug related to this http.sys attribute: link\n\nIn case you are using Azure app services and increasing the buffer size does not eliminate the problem, try to scale up your machine as well. You will be allocated more resources including connection bandwidth.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Andrej Lucansky",
        "usuario_id": 1076
    },
    {
        "_id": 674,
        "fecha": { "$date" : "2019-04-12T22:38:23Z" },
        "decripcion": "\nI had the same issue and managed to resolve it eventually. In my case, the port that the client sends the request to did not have a SSL cert binding to it. So I fixed the issue by binding a SSL cert to the port on the server side. Once that was done, this exception went away.  \n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "iefgnoix",
        "usuario_id": 1077
    },
    {
        "_id": 675,
        "fecha": { "$date" : "2020-08-02T16:27:16Z" },
        "decripcion": "\nI got the same issue while using .NET Framework 4.5. However, when I update the .NET version to 4.7.2 connection issue was resolved. Maybe this is due to SecurityProtocol support issue.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Chamiz",
        "usuario_id": 1078
    },
    {
        "_id": 676,
        "fecha": { "$date" : "2020-09-29T16:43:55Z" },
        "decripcion": "\nI had this issue when i tried to connect to postgresql while i'm using microsoft sutdio for mssql :)\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Abdullah Tahan",
        "usuario_id": 1079
    },
    {
        "_id": 677,
        "fecha": { "$date" : "2021-08-17T18:39:47Z" },
        "decripcion": "\nWe are using a SpringBoot service. Our restTemplate code looks like below:\n\n\n@Bean\n    public RestTemplate restTemplate(final RestTemplateBuilder builder) {\n\n        return builder.requestFactory(() -> {\n            final ConnectionPool okHttpConnectionPool =\n                    new ConnectionPool(50, 30, TimeUnit.SECONDS);\n            final OkHttpClient okHttpClient =\n                    new OkHttpClient.Builder().connectionPool(okHttpConnectionPool)\n                            // .connectTimeout(30, TimeUnit.SECONDS)\n                            .retryOnConnectionFailure(false).build();\n\n            return new OkHttp3ClientHttpRequestFactory(okHttpClient);\n        }).build();\n    }\n Run code snippetHide resultsExpand snippet\n\n\nAll our call were failing after the ReadTimeout set for the restTemplate. We increased the time, and our issue was resolved.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Gayathri",
        "usuario_id": 1080
    },
    {
        "_id": 678,
        "fecha": { "$date" : "2021-08-25T21:06:17Z" },
        "decripcion": "\nFor me, it was because the app server I was trying to send email from was not added to our company's SMTP server's allowed list.\nI just had to put in SMTP access request for that app server.\nThis is how it was added by the infrastructure team (I don't know how to do these steps myself but this is what they said they did):\n1.  Log into active L.B.\n2.  Select: Local Traffic > iRules > Data Group List\n3.  Select the appropriate Data Group\n4.  Enter the app server's IP address\n5.  Select: Add\n6.  Select: Update\n7.  Sync config changes\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Ash K",
        "usuario_id": 1081
    },
    {
        "_id": 679,
        "fecha": { "$date" : "2018-02-06T14:42:40Z" },
        "decripcion": "\nThis error occurred in my application with the CIP-protocol whenever I didn't Send or received data in less than 10s. \n\nThis was caused by the use of the forward open method. You can avoid this by working with an other method, or to install an update rate of less the 10s that maintain your forward-open-connection. \n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "Belekz",
        "usuario_id": 1082
    },
    {
        "_id": 680,
        "fecha": { "$date" : "2019-11-13T22:15:06Z" },
        "decripcion": "\nsocket is a module, containing the class socket.\n\nYou need to do socket.socket(...) or from socket import socket:\n\n>>> import socket\n>>> socket\n<module 'socket' from 'C:\\Python27\\lib\\socket.pyc'>\n>>> socket.socket\n<class 'socket._socketobject'>\n>>>\n>>> from socket import socket\n>>> socket\n<class 'socket._socketobject'>\n\n\nThis is what the error message means:\nIt says module object is not callable, because your code is calling a module object. A module object is the type of thing you get when you import a module. What you were trying to do is to call a class object within the module object that happens to have the same name as the module that contains it.\n\nHere is a way to logically break down this sort of error:\n\n\n\"module object is not callable. Python is telling me my code trying to call something that cannot be called. What is my code trying to call?\"\n\"The code is trying to call on socket. That should be callable! Is the variable socket is what I think it is?`\nI should print out what socket is and check print socket\n\n    ",
        "votes": 674,
        "comentarios": [
            {
                "decripcion": "I currently am imporitng socket like this: from socket import *",
                "fecha": { "$date" : "2010-12-26T16:06:16Z" },
                "usuario": "user551717",
                "usuario_id": 1083
            },
            {
                "decripcion": "I also changed it to from socket import socket and I'm still getting the same error.",
                "fecha": { "$date" : "2010-12-26T16:07:14Z" },
                "usuario": "user551717",
                "usuario_id": 1083
            },
            {
                "decripcion": "Ohh I get it. The socket.socket was a little confusing. I simply did import write_to_file and then, since the method I was using inside of write_to_file.py is named writeToTextFile I simply rand write_to_file.writeToTextFile",
                "fecha": { "$date" : "2014-07-30T21:26:02Z" },
                "usuario": "maudulus",
                "usuario_id": 1084
            },
            {
                "decripcion": "It's worth noting that this wasn't obvious to at least 133 people who took time to up vote (myself included) who didn't understand this. Now, it's obvious, and next time I reach in my toolbox, I will find this tool when a module is reported as \"not callable\". Getting started with a new language is the toughest part.",
                "fecha": { "$date" : "2014-09-27T21:04:55Z" },
                "usuario": "jmort253",
                "usuario_id": 1085
            },
            {
                "decripcion": "@maudulus I don't find Python very user-friendly in these respects.",
                "fecha": { "$date" : "2020-08-06T11:19:47Z" },
                "usuario": "Snowcrash",
                "usuario_id": 1086
            }
        ],
        "usuario": "Katriel",
        "usuario_id": 1087
    },
    {
        "_id": 681,
        "fecha": { "$date" : "2021-03-31T06:37:05Z" },
        "decripcion": "\nAssume that the content of YourClass.py is:\nclass YourClass:\n    # ......\n\nIf you use:\nfrom YourClassParentDir import YourClass  # means YourClass.py\n\nIn this way, you will get TypeError: 'module' object is not callable if you then tried to call YourClass().\nBut, if you use:\nfrom YourClassParentDir.YourClass import YourClass   # means Class YourClass\n\nor use YourClass.YourClass(), it works.\n    ",
        "votes": 243,
        "comentarios": [
            {
                "decripcion": "class = YourClass.YourClass()",
                "fecha": { "$date" : "2017-10-30T08:57:06Z" },
                "usuario": "KunMing Xie",
                "usuario_id": 1088
            },
            {
                "decripcion": "I solved this issue by using from yourClass import *",
                "fecha": { "$date" : "2018-10-18T05:44:37Z" },
                "usuario": "Keith",
                "usuario_id": 1089
            },
            {
                "decripcion": "Best answer, i need to look more into the namespaces imports in python",
                "fecha": { "$date" : "2021-03-28T15:34:21Z" },
                "usuario": "Dimitris Thomas",
                "usuario_id": 1090
            },
            {
                "decripcion": "This was the answer",
                "fecha": { "$date" : "2021-05-05T22:31:39Z" },
                "usuario": "Bj\u00f8rn Otto Vasbotten",
                "usuario_id": 1091
            }
        ],
        "usuario": "Brad",
        "usuario_id": 1092
    },
    {
        "_id": 682,
        "fecha": { "$date" : "2019-01-08T13:04:06Z" },
        "decripcion": "\nAdd to the main __init__.py in YourClassParentDir, e.g.:\n\nfrom .YourClass import YourClass\n\n\nThen, you will have an instance of your class ready when you import it into another script:\n\nfrom YourClassParentDir import YourClass\n\n    ",
        "votes": 118,
        "comentarios": [
            {
                "decripcion": "Shouldn't it be   from .YourClass import YourClass  in the __init__.py file ?",
                "fecha": { "$date" : "2018-04-02T10:09:33Z" },
                "usuario": "Nicolas Seiller",
                "usuario_id": 1093
            }
        ],
        "usuario": "Jose Alban",
        "usuario_id": 1094
    },
    {
        "_id": 683,
        "fecha": { "$date" : "2013-01-09T23:07:00Z" },
        "decripcion": "\nHere is another gotcha, that took me awhile to see even after reading these posts. I was setting up a script to call my python bin scripts. I was getting the module not callable too.\n\nMy zig was that I was doing the following:\n\nfrom mypackage.bin import myscript\n...\nmyscript(...)\n\n\nwhen my zag needed to do the following:\n\nfrom mypackage.bin.myscript import myscript\n...\nmyscript(...)\n\n\nIn summary, double check your package and module nesting. \n\nWhat I am trying to do is have a scripts directory that does not have the *.py extension, and still have the 'bin' modules to be in mypackage/bin and these have my *.py extension. I am new to packaging, and trying to follow the standards as I am interpreting them. So, I have at the setup root: \n\nsetup.py\nscripts/\n      script1\nmypackage/\n   bin/\n      script1.py\n   subpackage1/\n   subpackage_etc/\n\n\nIf this is not compliant with standard, please let me know.\n    ",
        "votes": 33,
        "comentarios": [],
        "usuario": "zerocog",
        "usuario_id": 1095
    },
    {
        "_id": 684,
        "fecha": { "$date" : "2020-07-15T07:47:45Z" },
        "decripcion": "\nShort answer: You are calling a file/directory as a function instead of real function\nRead on:\nThis kind of error happens when you import module thinking it as function and call it.\nSo in python module is a .py file. Packages(directories) can also be considered as modules.\nLet's say I have a create.py file. In that file I have  a function like this:\n#inside create.py\ndef create():\n  pass\n\nNow, in another code file if I do like this:\n#inside main.py file\nimport create\ncreate() #here create refers to create.py , so create.create() would work here\n\nIt gives this error as am calling the create.py file as a function.\nso I gotta do this:\nfrom create import create\ncreate() #now it works.\n\nHope that helps! Happy Coding!\n    ",
        "votes": 30,
        "comentarios": [],
        "usuario": "Deekshith Anand",
        "usuario_id": 1096
    },
    {
        "_id": 685,
        "fecha": { "$date" : "2010-12-26T15:59:50Z" },
        "decripcion": "\nIt seems like what you've done is imported the socket module as import socket. Therefore socket is the module. You either need to change that line to self.serv = socket.socket(socket.AF_INET, socket.SOCK_STREAM), as well as every other use of the socket module, or change the import statement to from socket import socket.\n\nOr you've got an import socket after your from socket import *:\n\n>>> from socket import *\n>>> serv = socket(AF_INET,SOCK_STREAM)\n>>> import socket\n>>> serv = socket(AF_INET,SOCK_STREAM)\nTraceback (most recent call last):\n  File \"<input>\", line 1, in <module>\nTypeError: 'module' object is not callable\n\n    ",
        "votes": 24,
        "comentarios": [
            {
                "decripcion": "I've imported socket as: from socket import *  I can change it, but it'll take a while, so I'm reluctant to.",
                "fecha": { "$date" : "2010-12-26T16:00:37Z" },
                "usuario": "user551717",
                "usuario_id": 1083
            },
            {
                "decripcion": "@user You've probably later somewhere got an import socket, which will import the module socket overriding the class socket. See code snippet in edit.",
                "fecha": { "$date" : "2010-12-26T16:02:41Z" },
                "usuario": "moinudin",
                "usuario_id": 1097
            },
            {
                "decripcion": "@user: you should change it. The reason from <...> import * imports are bad, bad, bad is more or less this: normally you know exactly what's in the global namespace, because it's exactly what you've put there. But when you import *, you fill that namespace with all sorts of stuff that other modules define. In this case, it's unclear where the name socket came from -- is it the module or something defined in that module? If you always use import socket or from socket import socket, you will never have this problem, since you can see exactly what names are in use.",
                "fecha": { "$date" : "2010-12-26T16:06:55Z" },
                "usuario": "Katriel",
                "usuario_id": 1087
            },
            {
                "decripcion": "okay. Thanks for the tip. I've just gotten in the habit from a lot of tutorials.",
                "fecha": { "$date" : "2010-12-26T16:17:08Z" },
                "usuario": "user551717",
                "usuario_id": 1083
            }
        ],
        "usuario": "moinudin",
        "usuario_id": 1097
    },
    {
        "_id": 686,
        "fecha": { "$date" : "2016-11-04T14:25:09Z" },
        "decripcion": "\nI know this thread is a year old, but the real problem is in your working directory.\n\nI believe that the working directory is C:\\Users\\Administrator\\Documents\\Mibot\\oops\\. Please check for the file named socket.py in this directory. Once you find it, rename or move it. When you import socket, socket.py from the current directory is used instead of the socket.py from Python's directory. Hope this helped. :)\n\nNote: Never use the file names from Python's directory to save your program's file name; it will conflict with your program(s).\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "This is definitely worth noting. I was just trying a quick check with sockets so I simply named the file socket.py. Well, that was causing this exact same error message. This page put me on the right track: python-notes.curiousefficiency.org/en/latest/python_concepts/\u2026",
                "fecha": { "$date" : "2016-05-26T22:04:21Z" },
                "usuario": "Czechnology",
                "usuario_id": 1098
            }
        ],
        "usuario": "blackwind",
        "usuario_id": 1099
    },
    {
        "_id": 687,
        "fecha": { "$date" : "2021-05-04T18:29:04Z" },
        "decripcion": "\nI faced the same problem. then I tried not using\nfrom YourClass import YourClass\nI just copied the whole code of YourClass.py and run it on the main code (or current code).it solved the error\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Nazmus Sakib Akash",
        "usuario_id": 1100
    },
    {
        "_id": 688,
        "fecha": { "$date" : "2017-06-22T20:33:18Z" },
        "decripcion": "\nWhen configuring an console_scripts entrypoint in setup.py I found this issue existed when the endpoint was a module or package rather than a function within the module.\n\nTraceback (most recent call last):\n   File \"/Users/ubuntu/.virtualenvs/virtualenv/bin/mycli\", line 11, in <module>\nload_entry_point('my-package', 'console_scripts', 'mycli')()\nTypeError: 'module' object is not callable\n\n\nFor example\n\nfrom setuptools import setup\nsetup (\n# ...\n    entry_points = {\n        'console_scripts': [mycli=package.module.submodule]\n    },\n# ...\n)\n\n\nShould have been\n\nfrom setuptools import setup\nsetup (\n# ...\n    entry_points = {\n        'console_scripts': [mycli=package.module.submodule:main]\n    },\n# ...\n)\n\n\nSo that it would refer to a callable function rather than the module itself. It seems to make no difference if the module has a if __name__ == '__main__': block. This will not make the module callable. \n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Luke Exton",
        "usuario_id": 1101
    },
    {
        "_id": 689,
        "fecha": { "$date" : "2018-03-31T14:00:00Z" },
        "decripcion": "\nI guess you have overridden the builtin function/variable or something else \"module\" by setting the global variable \"module\". just print the module see whats in it.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "umairhhhs",
        "usuario_id": 1102
    },
    {
        "_id": 690,
        "fecha": { "$date" : "2016-11-04T14:56:56Z" },
        "decripcion": "\nA simple way to solve this problem is export thePYTHONPATH variable enviroment. For example, for Python 2.6 in Debian/GNU Linux: \n\nexport PYTHONPATH=/usr/lib/python2.6`\n\n\nIn other operating systems, you would first find the location of this module or the socket.py file.\n    ",
        "votes": -2,
        "comentarios": [],
        "usuario": "Oscar Ardila",
        "usuario_id": 1103
    },
    {
        "_id": 691,
        "fecha": { "$date" : "2020-05-14T18:59:24Z" },
        "decripcion": "\ncheck the import statements since a module is not callable.\nIn Python, everything (including functions, methods, modules, classes etc.) is an object.\n    ",
        "votes": -2,
        "comentarios": [],
        "usuario": "Ayesha Siddiqa",
        "usuario_id": 1104
    },
    {
        "_id": 692,
        "fecha": { "$date" : "2009-04-06T16:46:22Z" },
        "decripcion": "\nSince there are no events available to signal when the socket is disconnected, you will have to poll it at a frequency that is acceptable to you.\n\nUsing this extension method, you can have a reliable method to detect if a socket is disconnected.\n\nstatic class SocketExtensions\n{\n  public static bool IsConnected(this Socket socket)\n  {\n    try\n    {\n      return !(socket.Poll(1, SelectMode.SelectRead) && socket.Available == 0);\n    }\n    catch (SocketException) { return false; }\n  }\n}\n\n    ",
        "votes": 119,
        "comentarios": [
            {
                "decripcion": "This worked. Thanks. I changed the method to  return !(socket.Available == 0 && socket.Poll(1, SelectMode.SelectRead));  because I suspect socket.Available is faster than Socket.Poll()",
                "fecha": { "$date" : "2009-04-06T18:52:41Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "This method does not work unless the other end of the connection actually closes/shutdowns the socket. An unplugged network/power cable won't be noticed before the timeout period. The only way to be notified of disconnects right away is with a heartbeat function to continously check the connection.",
                "fecha": { "$date" : "2009-08-27T15:47:21Z" },
                "usuario": "Kasper Holdum",
                "usuario_id": 1106
            },
            {
                "decripcion": "@Smart Alec: actually, you should use the example as it's shown above. There is a potential race condition if you change the order: if socket.Available returns 0 and you receive a packet just before socket.Poll gets called, Poll will return true and method will return false, although the socket is actually still healthy.",
                "fecha": { "$date" : "2010-05-28T09:05:13Z" },
                "usuario": "Groo",
                "usuario_id": 1107
            },
            {
                "decripcion": "This works well 99% of the time, sometimes it gives a false disconnect though.",
                "fecha": { "$date" : "2013-06-03T05:29:26Z" },
                "usuario": "Matthew Finlay",
                "usuario_id": 1108
            },
            {
                "decripcion": "Just like Matthew Finlay noticed, this will report false disconnects sometimes as there is still a race condition between the result of the Poll method and checking the Available property. A packet could be almost ready to be read but not yet, thus Available being 0 - but a millisecond later, there's data to be read.  A better option is to try to Receive one byte and the SocketFlags.Peek flag. Or implement some form of heartbeat and keep the connection status at a higher level. Or rely on the error handling at your send/receive methods (& callbacks, if using the async versions).",
                "fecha": { "$date" : "2015-03-16T21:03:01Z" },
                "usuario": "mbargiel",
                "usuario_id": 1109
            }
        ],
        "usuario": "Samuel",
        "usuario_id": 1023
    },
    {
        "_id": 693,
        "fecha": { "$date" : "2020-11-18T17:47:26Z" },
        "decripcion": "\nSomeone mentioned keepAlive capability of TCP Socket.\nHere it is nicely described:\nhttp://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html\nI'm using it this way: after the socket is connected, I'm calling this function, which sets keepAlive on. The keepAliveTime parameter specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent. The keepAliveInterval parameter specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.\n    void SetKeepAlive(bool on, uint keepAliveTime, uint keepAliveInterval)\n    {\n        int size = Marshal.SizeOf(new uint());\n\n        var inOptionValues = new byte[size * 3];\n\n        BitConverter.GetBytes((uint)(on ? 1 : 0)).CopyTo(inOptionValues, 0);\n        BitConverter.GetBytes((uint)keepAliveTime).CopyTo(inOptionValues, size);\n        BitConverter.GetBytes((uint)keepAliveInterval).CopyTo(inOptionValues, size * 2);\n\n        socket.IOControl(IOControlCode.KeepAliveValues, inOptionValues, null);\n    }\n\nI'm also using asynchronous reading:\nsocket.BeginReceive(packet.dataBuffer, 0, 128,\n                    SocketFlags.None, new AsyncCallback(OnDataReceived), packet);\n\nAnd in callback, here is caught timeout SocketException, which raises when socket doesn't get ACK signal after keep-alive packet.\npublic void OnDataReceived(IAsyncResult asyn)\n{\n    try\n    {\n        SocketPacket theSockId = (SocketPacket)asyn.AsyncState;\n\n        int iRx = socket.EndReceive(asyn);\n    }\n    catch (SocketException ex)\n    {\n        SocketExceptionCaught(ex);\n    }\n}\n\nThis way, I'm able to safely detect disconnection between TCP client and server.\n    ",
        "votes": 25,
        "comentarios": [
            {
                "decripcion": "Yes, set the keepalive+interval to a low value, any polls / sends should fail after keepalive+10*interval milliseconds. The 10 retries seem to be hardcoded since Vista? Works even if you unplug the cable unlike most other answers. This should be the accepted answer.",
                "fecha": { "$date" : "2016-09-23T15:05:02Z" },
                "usuario": "toster-cx",
                "usuario_id": 1110
            }
        ],
        "usuario": "Majak",
        "usuario_id": 1111
    },
    {
        "_id": 694,
        "fecha": { "$date" : "2009-04-06T18:38:49Z" },
        "decripcion": "\nThis is simply not possible.  There is no physical connection between you and the server (except in the extremely rare case where you are connecting between two compuers with a loopback cable).  \n\nWhen the connection is closed gracefully, the other side is notified.  But if the connection is disconnected some other way (say the users connection is dropped) then the server won't know until it times out (or tries to write to the connection and the ack times out).  That's just the way TCP works and you have to live with it.\n\nTherefore, \"instantly\" is unrealistic.  The best you can do is within the timeout period, which depends on the platform the code is running on.\n\nEDIT:\nIf you are only looking for graceful connections, then why not just send a \"DISCONNECT\" command to the server from your client?\n    ",
        "votes": 15,
        "comentarios": [
            {
                "decripcion": "Thanks but I actually mean a graceful software disconnection, not a physical disconnection. I'm running Windows",
                "fecha": { "$date" : "2009-04-06T16:50:49Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "If he's only looking for graceful disconnections he doesn't have to send anything. His read will return end of stream.",
                "fecha": { "$date" : "2017-02-22T04:56:09Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "Erik Funkenbusch",
        "usuario_id": 1112
    },
    {
        "_id": 695,
        "fecha": { "$date" : "2009-11-07T10:57:24Z" },
        "decripcion": "\n\"That's just the way TCP works and you have to live with it.\"\n\nYup, you're right. It's a fact of life I've come to realize. You will see the same behavior exhibited even in professional applications utilizing this protocol (and even others). I've even seen it occur in online games; you're buddy says \"goodbye\", and he appears to be online for another 1-2 minutes until the server \"cleans house\".\n\nYou can use the suggested methods here, or implement a \"heartbeat\", as also suggested. I choose the former. But if I did choose the latter, I'd simply have the server \"ping\" each client every so often with a single byte, and see if we have a timeout or no response. You could even use a background thread to achieve this with precise timing. Maybe even a combination could be implemented in some sort of options list (enum flags or something) if you're really worried about it. But it's no so big a deal to have a little delay in updating the server, as long as you DO update. It's the internet, and no one expects it to be magic! :)\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "ATC",
        "usuario_id": 1113
    },
    {
        "_id": 696,
        "fecha": { "$date" : "2009-04-06T17:06:30Z" },
        "decripcion": "\nImplementing heartbeat into your system might be a solution. This is only possible if both client and server are under your control. You can have a DateTime object keeping track of the time when the last bytes were received from the socket. And assume that the socket not responded over a certain interval are lost. This will only work if you have heartbeat/custom keep alive implemented.\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Niran",
        "usuario_id": 1114
    },
    {
        "_id": 697,
        "fecha": { "$date" : "2013-01-25T15:49:57Z" },
        "decripcion": "\nI've found quite useful, another workaround for that!\n\nIf you use asynchronous methods for reading data from the network socket (I mean, use BeginReceive - EndReceive  methods), whenever a connection is terminated; one of these situations appear: Either a message is sent with no data (you can see it with Socket.Available - even though BeginReceive is triggered, its value will be zero) or Socket.Connected value becomes false in this call (don't try to use EndReceive then).\n\nI'm posting the function I used, I think you can see what I meant from it better:\n\n\n\nprivate void OnRecieve(IAsyncResult parameter) \n{\n    Socket sock = (Socket)parameter.AsyncState;\n    if(!sock.Connected || sock.Available == 0)\n    {\n        // Connection is terminated, either by force or willingly\n        return;\n    }\n\n    sock.EndReceive(parameter);\n    sock.BeginReceive(..., ... , ... , ..., new AsyncCallback(OnRecieve), sock);\n\n    // To handle further commands sent by client.\n    // \"...\" zones might change in your code.\n}\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 698,
        "fecha": { "$date" : "2015-07-28T03:08:33Z" },
        "decripcion": "\nThis worked for me, the key is you need a separate thread to analyze the socket state with polling. doing it in the same thread as the socket fails detection.\n\n//open or receive a server socket - TODO your code here\nsocket = new Socket(....);\n\n//enable the keep alive so we can detect closure\nsocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);\n\n//create a thread that checks every 5 seconds if the socket is still connected. TODO add your thread starting code\nvoid MonitorSocketsForClosureWorker() {\n    DateTime nextCheckTime = DateTime.Now.AddSeconds(5);\n\n    while (!exitSystem) {\n        if (nextCheckTime < DateTime.Now) {\n            try {\n                if (socket!=null) {\n                    if(socket.Poll(5000, SelectMode.SelectRead) && socket.Available == 0) {\n                        //socket not connected, close it if it's still running\n                        socket.Close();\n                        socket = null;    \n                    } else {\n                        //socket still connected\n                    }    \n               }\n           } catch {\n               socket.Close();\n            } finally {\n                nextCheckTime = DateTime.Now.AddSeconds(5);\n            }\n        }\n        Thread.Sleep(1000);\n    }\n}\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "JJ_Coder4Hire",
        "usuario_id": 1115
    },
    {
        "_id": 699,
        "fecha": { "$date" : "2011-01-02T03:36:28Z" },
        "decripcion": "\nThe example code here\nhttp://msdn.microsoft.com/en-us/library/system.net.sockets.socket.connected.aspx\nshows how to determine whether the Socket is still connected without sending any data.\n\nIf you called Socket.BeginReceive() on the server program and then the client closed the connection \"gracefully\", your receive callback will be called and EndReceive() will return 0 bytes. These 0 bytes mean that the client \"may\" have disconnected. You can then use the technique shown in the MSDN example code to determine for sure whether the connection was closed.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Bassem",
        "usuario_id": 1116
    },
    {
        "_id": 700,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nExpanding on comments by mbargiel and mycelo on the accepted answer, the following can be used with a non-blocking socket on the server end to inform whether the client has shut down.\nThis approach does not suffer the race condition that affects the Poll method in the accepted answer.\n// Determines whether the remote end has called Shutdown\npublic bool HasRemoteEndShutDown\n{\n    get\n    {\n        try\n        {\n            int bytesRead = socket.Receive(new byte[1], SocketFlags.Peek);\n\n            if (bytesRead == 0)\n                return true;\n        }\n        catch\n        {\n            // For a non-blocking socket, a SocketException with \n            // code 10035 (WSAEWOULDBLOCK) indicates no data available.\n        }\n\n        return false;\n    }\n}\n\nThe approach is based on the fact that the Socket.Receive method returns zero immediately after the remote end shuts down its socket and we've read all of the data from it.  From Socket.Receive documentation:\n\nIf the remote host shuts down the Socket connection with the Shutdown method, and all available data has been received, the Receive method will complete immediately and return zero bytes.\nIf you are in non-blocking mode, and there is no data available in the protocol stack buffer, the Receive method will complete immediately and throw a SocketException.\n\nThe second point explains the need for the try-catch.\nUse of the SocketFlags.Peek flag leaves any received data untouched for a separate receive mechanism to read.\nThe above will work with a blocking socket as well, but be aware that the code will block on the Receive call (until data is received or the receive timeout elapses, again resulting in a SocketException).\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Ian",
        "usuario_id": 1117
    },
    {
        "_id": 701,
        "fecha": { "$date" : "2009-06-30T13:50:29Z" },
        "decripcion": "\nCan't you just use Select? \n\nUse select on a connected socket. If the select returns with your socket as Ready but the subsequent Receive returns 0 bytes that means the client disconnected the connection. AFAIK, that is the fastest way to determine if the client disconnected.\n\nI do not know C# so just ignore if my solution does not fit in C# (C# does provide select though) or if I had misunderstood the context.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Aditya Sehgal",
        "usuario_id": 1118
    },
    {
        "_id": 702,
        "fecha": { "$date" : "2011-01-05T13:24:38Z" },
        "decripcion": "\nUsing the method SetSocketOption, you will be able to set KeepAlive that will let you know whenever a Socket gets disconnected\n\nSocket _connectedSocket = this._sSocketEscucha.EndAccept(asyn);\n                _connectedSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.KeepAlive, 1);\n\n\nhttp://msdn.microsoft.com/en-us/library/1011kecd(v=VS.90).aspx\n\nHope it helps!\nRamiro Rinaldi\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "It will not 'let you know whenever a socket gets disconnected'. It will detect it, eventually, if the keep-alive timer expires. By default it is set to two hours. You cannot describe that as 'whenever'. You also can't describe it as 'let[ting] you know: you still have to do a read or a write for the failure to be detected. -1",
                "fecha": { "$date" : "2013-04-01T11:48:53Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "Rama",
        "usuario_id": 1119
    },
    {
        "_id": 703,
        "fecha": { "$date" : "2018-11-26T20:46:46Z" },
        "decripcion": "\ni had same problem , try this : \n\nvoid client_handler(Socket client) // set 'KeepAlive' true\n{\n    while (true)\n    {\n        try\n        {\n            if (client.Connected)\n            {\n\n            }\n            else\n            { // client disconnected\n                break;\n            }\n        }\n        catch (Exception)\n        {\n            client.Poll(4000, SelectMode.SelectRead);// try to get state\n        }\n    }\n}\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Senior Vector",
        "usuario_id": 1120
    },
    {
        "_id": 704,
        "fecha": { "$date" : "2020-02-19T20:40:25Z" },
        "decripcion": "\nThis is in VB, but it seems to work well for me.  It looks for a 0 byte return like the previous post.\n\nPrivate Sub RecData(ByVal AR As IAsyncResult)\n    Dim Socket As Socket = AR.AsyncState\n\n    If Socket.Connected = False And Socket.Available = False Then\n        Debug.Print(\"Detected Disconnected Socket - \" + Socket.RemoteEndPoint.ToString)\n        Exit Sub\n    End If\n    Dim BytesRead As Int32 = Socket.EndReceive(AR)\n    If BytesRead = 0 Then\n        Debug.Print(\"Detected Disconnected Socket - Bytes Read = 0 - \" + Socket.RemoteEndPoint.ToString)\n        UpdateText(\"Client \" + Socket.RemoteEndPoint.ToString + \" has disconnected from Server.\")\n        Socket.Close()\n        Exit Sub\n    End If\n    Dim msg As String = System.Text.ASCIIEncoding.ASCII.GetString(ByteData)\n    Erase ByteData\n    ReDim ByteData(1024)\n    ClientSocket.BeginReceive(ByteData, 0, ByteData.Length, SocketFlags.None, New AsyncCallback(AddressOf RecData), ClientSocket)\n    UpdateText(msg)\nEnd Sub\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Ken0x34",
        "usuario_id": 1121
    },
    {
        "_id": 705,
        "fecha": { "$date" : "2021-08-30T19:20:42Z" },
        "decripcion": "\nAbove answers can be summarized as follow :\nSocket.Connected properity determine socket state depend on last read or receive state so it can't detect current disconnection state until you manually close the connection or remote end gracefully close of socket (shutdown).\nSo we can use the function below to check connection state:\n   bool IsConnected(Socket socket)\n    {\n        try\n        {\n            if (socket == null) return false;\n            return !((socket.Poll(5000, SelectMode.SelectRead) && socket.Available == 0) || !socket.Connected);\n        }\n        catch (SocketException)\n        {\n            return false;\n        }\n\n        //the above code is short exp to :\n        /* try\n         {\n             bool state1 = socket.Poll(5000, SelectMode.SelectRead);\n             bool state2 = (socket.Available == 0);\n             if ((state1 && state2) || !socket.Connected)\n                 return false;\n             else\n                 return true;\n         }\n         catch (SocketException)\n         {\n             return false;\n         }\n        */\n    }\n\nAlso the above check need to care about poll respone time(block time)\nAlso as said by Microsoft Documents : this poll method \"can't detect proplems like a broken netwrok cable or that remote host was shut down ungracefuuly\".\nalso as said above there is race condition between socket.poll and socket.avaiable which may give false disconnect.\nThe best way as said by Microsoft Documents is to attempt to send or recive data to detect these kinds of errors as MS docs said.\nThe below code is from Microsoft Documents :\n // This is how you can determine whether a socket is still connected.\n bool IsConnected(Socket client)\n {\n    bool blockingState = client.Blocking; //save socket blocking state.\n    bool isConnected = true;\n    try\n    {\n       byte [] tmp = new byte[1]; \n       client.Blocking = false;\n       client.Send(tmp, 0, 0); //make a nonblocking, zero-byte Send call (dummy)\n       //Console.WriteLine(\"Connected!\");\n    }\n    catch (SocketException e)\n    {\n       // 10035 == WSAEWOULDBLOCK\n       if (e.NativeErrorCode.Equals(10035))\n       {\n           //Console.WriteLine(\"Still Connected, but the Send would block\");\n       }\n       else\n       {\n           //Console.WriteLine(\"Disconnected: error code {0}!\", e.NativeErrorCode);\n           isConnected  = false;\n       }\n   }\n   finally\n   {\n       client.Blocking = blockingState;\n   }\n   //Console.WriteLine(\"Connected: {0}\", client.Connected);\n   return isConnected  ;\n }\n\n//and heres comments from microsoft docs*\n\nThe\u00a0socket.Connected\u00a0property gets the connection state of the\u00a0Socket\u00a0as of the last I/O operation. When it returns\u00a0false, the\u00a0Socket\u00a0was either never connected, or is no longer connected.\u00a0\nConnected\u00a0is not thread-safe; it may return\u00a0true\u00a0after an operation is aborted when the\u00a0Socket\u00a0is disconnected from another thread.\nThe value of the\u00a0Connected\u00a0property reflects the state of the connection as of the most recent operation.\nIf you need to determine the current state of the connection, make a nonblocking, zero-byte Send call. If the call returns successfully or throws a WAEWOULDBLOCK error code (10035), then the socket is still connected; //otherwise, the socket is no longer connected .\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Mohamedein Maghraby",
        "usuario_id": 1122
    },
    {
        "_id": 706,
        "fecha": { "$date" : "2009-04-06T16:51:09Z" },
        "decripcion": "\nYou can also check the .IsConnected property of the socket if you were to poll.\n    ",
        "votes": -1,
        "comentarios": [
            {
                "decripcion": "This won't work for any of the scenarios (server / client) i presented above",
                "fecha": { "$date" : "2009-04-06T16:51:51Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "Also, the property is called .Connected.",
                "fecha": { "$date" : "2011-06-24T22:06:53Z" },
                "usuario": "Qwertie",
                "usuario_id": 1123
            },
            {
                "decripcion": "That doesn't detect arbitrary disconnections. You still have to do some I/O.",
                "fecha": { "$date" : "2013-04-01T11:49:34Z" },
                "usuario": "user207421",
                "usuario_id": 877
            },
            {
                "decripcion": "@Jay No it doesn't. The value of the Connected property reflects the state of the connection as of the most recent operation. No polling.",
                "fecha": { "$date" : "2017-02-22T04:58:21Z" },
                "usuario": "user207421",
                "usuario_id": 877
            }
        ],
        "usuario": "theG",
        "usuario_id": 1124
    },
    {
        "_id": 707,
        "fecha": { "$date" : "2017-09-16T09:20:29Z" },
        "decripcion": "\nThe simplest way is an anonymous method passed into Label.Invoke:\n\n// Running on the worker thread\nstring newText = \"abc\";\nform.Label.Invoke((MethodInvoker)delegate {\n    // Running on the UI thread\n    form.Label.Text = newText;\n});\n// Back on the worker thread\n\n\nNotice that Invoke blocks execution until it completes--this is synchronous code. The question doesn't ask about asynchronous code, but there is lots of content on Stack Overflow about writing asynchronous code when you want to learn about it.\n    ",
        "votes": 1149,
        "comentarios": [
            {
                "decripcion": "Seeing as the OP hasn't mentioned any class/instance except the form, that isn't a bad default...",
                "fecha": { "$date" : "2009-03-19T10:30:38Z" },
                "usuario": "Marc Gravell\u2666",
                "usuario_id": 1128
            },
            {
                "decripcion": "Don't forget the \"this\" keyword is referencing a \"Control\" class.",
                "fecha": { "$date" : "2010-03-16T19:49:15Z" },
                "usuario": "AZ.",
                "usuario_id": 1129
            },
            {
                "decripcion": "@codecompleting it is safe either way, and we already know we're on a worker, so why check something we know?",
                "fecha": { "$date" : "2011-12-01T16:50:55Z" },
                "usuario": "Marc Gravell\u2666",
                "usuario_id": 1128
            },
            {
                "decripcion": "@Dragouf not really - one of the point of using this method is that you already know which parts run on the worker, and which run on the UI thread. No need to check.",
                "fecha": { "$date" : "2012-02-16T18:16:35Z" },
                "usuario": "Marc Gravell\u2666",
                "usuario_id": 1128
            },
            {
                "decripcion": "@John because that is what Control.Invoke does with any delegate - not just anon methods",
                "fecha": { "$date" : "2013-12-11T19:40:36Z" },
                "usuario": "Marc Gravell\u2666",
                "usuario_id": 1128
            }
        ],
        "usuario": "Marc Gravell",
        "usuario_id": 1130
    },
    {
        "_id": 708,
        "fecha": { "$date" : "2015-03-03T00:52:09Z" },
        "decripcion": "\nFor .NET 2.0, here's a nice bit of code I wrote that does exactly what you want, and works for any property on a Control:\n\nprivate delegate void SetControlPropertyThreadSafeDelegate(\n    Control control, \n    string propertyName, \n    object propertyValue);\n\npublic static void SetControlPropertyThreadSafe(\n    Control control, \n    string propertyName, \n    object propertyValue)\n{\n  if (control.InvokeRequired)\n  {\n    control.Invoke(new SetControlPropertyThreadSafeDelegate               \n    (SetControlPropertyThreadSafe), \n    new object[] { control, propertyName, propertyValue });\n  }\n  else\n  {\n    control.GetType().InvokeMember(\n        propertyName, \n        BindingFlags.SetProperty, \n        null, \n        control, \n        new object[] { propertyValue });\n  }\n}\n\n\nCall it like this:\n\n// thread-safe equivalent of\n// myLabel.Text = status;\nSetControlPropertyThreadSafe(myLabel, \"Text\", status);\n\n\nIf you're using .NET 3.0 or above, you could rewrite the above method as an extension method of the Control class, which would then simplify the call to:\n\nmyLabel.SetPropertyThreadSafe(\"Text\", status);\n\n\nUPDATE 05/10/2010:\n\nFor .NET 3.0 you should use this code:\n\nprivate delegate void SetPropertyThreadSafeDelegate<TResult>(\n    Control @this, \n    Expression<Func<TResult>> property, \n    TResult value);\n\npublic static void SetPropertyThreadSafe<TResult>(\n    this Control @this, \n    Expression<Func<TResult>> property, \n    TResult value)\n{\n  var propertyInfo = (property.Body as MemberExpression).Member \n      as PropertyInfo;\n\n  if (propertyInfo == null ||\n      !@this.GetType().IsSubclassOf(propertyInfo.ReflectedType) ||\n      @this.GetType().GetProperty(\n          propertyInfo.Name, \n          propertyInfo.PropertyType) == null)\n  {\n    throw new ArgumentException(\"The lambda expression 'property' must reference a valid property on this Control.\");\n  }\n\n  if (@this.InvokeRequired)\n  {\n      @this.Invoke(new SetPropertyThreadSafeDelegate<TResult> \n      (SetPropertyThreadSafe), \n      new object[] { @this, property, value });\n  }\n  else\n  {\n      @this.GetType().InvokeMember(\n          propertyInfo.Name, \n          BindingFlags.SetProperty, \n          null, \n          @this, \n          new object[] { value });\n  }\n}\n\n\nwhich uses LINQ and lambda expressions to allow much cleaner, simpler and safer syntax:\n\nmyLabel.SetPropertyThreadSafe(() => myLabel.Text, status); // status has to be a string or this will fail to compile\n\n\nNot only is the property name now checked at compile time, the property's type is as well, so it's impossible to (for example) assign a string value to a boolean property, and hence cause a runtime exception.\n\nUnfortunately this doesn't stop anyone from doing stupid things such as passing in another Control's property and value, so the following will happily compile:\n\nmyLabel.SetPropertyThreadSafe(() => aForm.ShowIcon, false);\n\n\nHence I added the runtime checks to ensure that the passed-in property does actually belong to the Control that the method's being called on. Not perfect, but still a lot better than the .NET 2.0 version.\n\nIf anyone has any further suggestions on how to improve this code for compile-time safety, please comment!\n    ",
        "votes": 805,
        "comentarios": [
            {
                "decripcion": "There are cases when this.GetType() evaluates to the same as propertyInfo.ReflectedType (e.g. LinkLabel on WinForms). I don't have a large C# experience, but I think that the condition for exception should be:  if (propertyInfo == null ||                 (!@this.GetType().IsSubclassOf(propertyInfo.ReflectedType) && @this.GetType() != propertyInfo.ReflectedType) ||                 @this.GetType().GetProperty(propertyInfo.Name, propertyInfo.PropertyType) == null)",
                "fecha": { "$date" : "2011-01-31T13:03:20Z" },
                "usuario": "Corvin",
                "usuario_id": 1131
            },
            {
                "decripcion": "@lan can this SetControlPropertyThreadSafe(myLabel, \"Text\", status) be called from another module or class or form",
                "fecha": { "$date" : "2011-06-23T10:58:31Z" },
                "usuario": "Smith",
                "usuario_id": 1132
            },
            {
                "decripcion": "The solution provided is unnecessarily complex. See Marc Gravell's solution, or Zaid Masud's solution, if you value simplicity.",
                "fecha": { "$date" : "2014-03-28T17:23:09Z" },
                "usuario": "Frank Hileman",
                "usuario_id": 1133
            },
            {
                "decripcion": "This solution does waste ton's of resources if you update multiple properties as every Invoke costs a lot of resources. I don't think this is how the feature of Thread Safety was intended anyway. Do Encapsulte your UI update actions and Invoke it ONCE (and not per property)",
                "fecha": { "$date" : "2014-08-06T12:09:30Z" },
                "usuario": "quadroid",
                "usuario_id": 1134
            },
            {
                "decripcion": "Why on earth would you use this code over the BackgroundWorker component?",
                "fecha": { "$date" : "2016-10-08T17:11:20Z" },
                "usuario": "Andy",
                "usuario_id": 1135
            }
        ],
        "usuario": "Ian Kemp",
        "usuario_id": 1136
    },
    {
        "_id": 709,
        "fecha": { "$date" : "2017-05-23T11:55:02Z" },
        "decripcion": "\nHandling long work\n\nSince .NET 4.5 and C# 5.0 you should use Task-based Asynchronous Pattern (TAP) along with async-await keywords in all areas (including the GUI):\n\n\n  TAP is the recommended asynchronous design pattern for new development\n\n\ninstead of Asynchronous Programming Model (APM) and Event-based Asynchronous Pattern (EAP) (the latter includes the BackgroundWorker Class).\n\nThen, the recommended solution for new development is:\n\n\nAsynchronous implementation of an event handler (Yes, that's all):\n\nprivate async void Button_Clicked(object sender, EventArgs e)\n{\n    var progress = new Progress<string>(s => label.Text = s);\n    await Task.Factory.StartNew(() => SecondThreadConcern.LongWork(progress),\n                                TaskCreationOptions.LongRunning);\n    label.Text = \"completed\";\n}\n\nImplementation of the second thread that notifies the UI thread:\n\nclass SecondThreadConcern\n{\n    public static void LongWork(IProgress<string> progress)\n    {\n        // Perform a long running work...\n        for (var i = 0; i < 10; i++)\n        {\n            Task.Delay(500).Wait();\n            progress.Report(i.ToString());\n        }\n    }\n}\n\n\n\nNotice the following: \n\n\nShort and clean code written in sequential manner without callbacks and explicit threads.\nTask instead of Thread.\nasync keyword, that allows to use await which in turn prevent the event handler from reaching the completion state till the task finished and in the meantime doesn't block the UI thread.\nProgress class (see IProgress Interface) that supports Separation of Concerns (SoC) design principle and doesn't require explicit dispatcher and invoking. It uses the current SynchronizationContext from its creation place (here the UI thread).\nTaskCreationOptions.LongRunning that hints to do not queue the task into ThreadPool.\n\n\nFor a more verbose examples see: The Future of C#: Good things come to those who 'await' by Joseph Albahari.\n\nSee also about UI Threading Model concept.\n\nHandling exceptions\n\nThe below snippet is an example of how to handle exceptions and toggle button's Enabled property to prevent multiple clicks during background execution.\n\nprivate async void Button_Click(object sender, EventArgs e)\n{\n    button.Enabled = false;\n\n    try\n    {\n        var progress = new Progress<string>(s => button.Text = s);\n        await Task.Run(() => SecondThreadConcern.FailingWork(progress));\n        button.Text = \"Completed\";\n    }\n    catch(Exception exception)\n    {\n        button.Text = \"Failed: \" + exception.Message;\n    }\n\n    button.Enabled = true;\n}\n\nclass SecondThreadConcern\n{\n    public static void FailingWork(IProgress<string> progress)\n    {\n        progress.Report(\"I will fail in...\");\n        Task.Delay(500).Wait();\n\n        for (var i = 0; i < 3; i++)\n        {\n            progress.Report((3 - i).ToString());\n            Task.Delay(500).Wait();\n        }\n\n        throw new Exception(\"Oops...\");\n    }\n}\n\n    ",
        "votes": 430,
        "comentarios": [
            {
                "decripcion": "If SecondThreadConcern.LongWork() throws an exception, can it be caught by the UI thread?  This is an excellent post, btw.",
                "fecha": { "$date" : "2015-08-13T17:53:40Z" },
                "usuario": "kdbanman",
                "usuario_id": 1137
            },
            {
                "decripcion": "I have added an additional section to the answer to fulfil your requirements. Regards.",
                "fecha": { "$date" : "2015-08-14T08:14:55Z" },
                "usuario": "Ryszard D\u017cegan",
                "usuario_id": 1138
            },
            {
                "decripcion": "The ExceptionDispatchInfo class is responsible for that miracle of rethrowing background exception on UI thread in async-await pattern.",
                "fecha": { "$date" : "2015-08-18T06:45:55Z" },
                "usuario": "Ryszard D\u017cegan",
                "usuario_id": 1138
            },
            {
                "decripcion": "Is it just me in thinking that this way of doing this is way more verbose than just invoking Invoke/Begin?!",
                "fecha": { "$date" : "2015-09-28T12:36:41Z" },
                "usuario": "MeTitus",
                "usuario_id": 1139
            },
            {
                "decripcion": "Task.Delay(500).Wait()? What's the point of creating a Task to just block the current thread? You should never block a thread pool thread!",
                "fecha": { "$date" : "2016-12-15T19:22:55Z" },
                "usuario": "Yarik",
                "usuario_id": 1140
            }
        ],
        "usuario": "Ryszard D\u017cegan",
        "usuario_id": 1138
    },
    {
        "_id": 710,
        "fecha": { "$date" : "2017-05-23T12:34:51Z" },
        "decripcion": "\nVariation of Marc Gravell's simplest solution for .NET 4:\n\ncontrol.Invoke((MethodInvoker) (() => control.Text = \"new text\"));\n\n\nOr use Action delegate instead:\n\ncontrol.Invoke(new Action(() => control.Text = \"new text\"));\n\n\nSee here for a comparison of the two: MethodInvoker vs Action for Control.BeginInvoke\n    ",
        "votes": 264,
        "comentarios": [
            {
                "decripcion": "what is 'control' in this example? My UI control? Trying to implement this in WPF on a label control, and Invoke is not a member of my label.",
                "fecha": { "$date" : "2017-02-09T22:17:17Z" },
                "usuario": "Dbloom",
                "usuario_id": 1141
            },
            {
                "decripcion": "What's about extension method like @styxriver  stackoverflow.com/a/3588137/206730 ?",
                "fecha": { "$date" : "2017-04-03T14:17:51Z" },
                "usuario": "Kiquenet",
                "usuario_id": 1142
            },
            {
                "decripcion": "declare 'Action y;' inside the class or method changing the text property and  update the text with this piece of code 'yourcontrol.Invoke(y=() => yourcontrol.Text = \"new text\");'",
                "fecha": { "$date" : "2017-08-25T15:20:12Z" },
                "usuario": "Antonio Leite",
                "usuario_id": 1143
            },
            {
                "decripcion": "@Dbloom it's not a member because it's only for WinForms. For WPF you use Dispatcher.Invoke",
                "fecha": { "$date" : "2018-03-22T13:09:42Z" },
                "usuario": "sLw",
                "usuario_id": 1144
            },
            {
                "decripcion": "I was following this solution but sometimes my UI was not getting updated. I found that i need this.refresh() to force invalidate and repaint the GUI .. if it is helpful ..",
                "fecha": { "$date" : "2018-04-05T10:47:29Z" },
                "usuario": "Rakibul Haq",
                "usuario_id": 1145
            }
        ],
        "usuario": "Zaid Masud",
        "usuario_id": 1146
    },
    {
        "_id": 711,
        "fecha": { "$date" : "2010-08-27T21:10:32Z" },
        "decripcion": "\nFire and forget extension method for .NET 3.5+\n\nusing System;\nusing System.Windows.Forms;\n\npublic static class ControlExtensions\n{\n    /// <summary>\n    /// Executes the Action asynchronously on the UI thread, does not block execution on the calling thread.\n    /// </summary>\n    /// <param name=\"control\"></param>\n    /// <param name=\"code\"></param>\n    public static void UIThread(this Control @this, Action code)\n    {\n        if (@this.InvokeRequired)\n        {\n            @this.BeginInvoke(code);\n        }\n        else\n        {\n            code.Invoke();\n        }\n    }\n}\n\n\nThis can be called using the following line of code:\n\nthis.UIThread(() => this.myLabel.Text = \"Text Goes Here\");\n\n    ",
        "votes": 144,
        "comentarios": [
            {
                "decripcion": "What's the point of the @this usage?  Wouldn't \"control\" be equivalent?  Are there any benefits to @this?",
                "fecha": { "$date" : "2013-09-09T00:03:38Z" },
                "usuario": "argyle",
                "usuario_id": 1147
            },
            {
                "decripcion": "@jeromeyers - The @this is simply the variable name, in this case the reference to the current control calling the extension. You could rename it to source, or whatever floats your boat. I use @this, because it's referring to 'this Control' that is calling the extension and is consistent (in my head, at least) with using the 'this' keyword in normal (non-extension) code.",
                "fecha": { "$date" : "2013-09-12T04:26:05Z" },
                "usuario": "StyxRiver",
                "usuario_id": 1148
            },
            {
                "decripcion": "This is great, easy and for me the best solution. You could include all the work you have to do in the ui thread. Example:            this.UIThread(() =>             {                 txtMessage.Text = message;                 listBox1.Items.Add(message);             });",
                "fecha": { "$date" : "2016-02-23T19:39:13Z" },
                "usuario": "Auto",
                "usuario_id": 1149
            },
            {
                "decripcion": "I really like this solution. Minor nit:  I would name this method OnUIThread rather than UIThread.",
                "fecha": { "$date" : "2016-05-16T18:08:35Z" },
                "usuario": "ToolmakerSteve",
                "usuario_id": 1150
            },
            {
                "decripcion": "That's why I named this extension RunOnUiThread. But thats just personal taste.",
                "fecha": { "$date" : "2019-01-30T08:11:26Z" },
                "usuario": "Grisgram",
                "usuario_id": 1151
            }
        ],
        "usuario": "StyxRiver",
        "usuario_id": 1148
    },
    {
        "_id": 712,
        "fecha": { "$date" : "2017-03-26T09:45:55Z" },
        "decripcion": "\nThis is the classic way you should do this:\n\nusing System;\nusing System.Windows.Forms;\nusing System.Threading;\n\nnamespace Test\n{\n    public partial class UIThread : Form\n    {\n        Worker worker;\n\n        Thread workerThread;\n\n        public UIThread()\n        {\n            InitializeComponent();\n\n            worker = new Worker();\n            worker.ProgressChanged += new EventHandler<ProgressChangedArgs>(OnWorkerProgressChanged);\n            workerThread = new Thread(new ThreadStart(worker.StartWork));\n            workerThread.Start();\n        }\n\n        private void OnWorkerProgressChanged(object sender, ProgressChangedArgs e)\n        {\n            // Cross thread - so you don't get the cross-threading exception\n            if (this.InvokeRequired)\n            {\n                this.BeginInvoke((MethodInvoker)delegate\n                {\n                    OnWorkerProgressChanged(sender, e);\n                });\n                return;\n            }\n\n            // Change control\n            this.label1.Text = e.Progress;\n        }\n    }\n\n    public class Worker\n    {\n        public event EventHandler<ProgressChangedArgs> ProgressChanged;\n\n        protected void OnProgressChanged(ProgressChangedArgs e)\n        {\n            if(ProgressChanged!=null)\n            {\n                ProgressChanged(this,e);\n            }\n        }\n\n        public void StartWork()\n        {\n            Thread.Sleep(100);\n            OnProgressChanged(new ProgressChangedArgs(\"Progress Changed\"));\n            Thread.Sleep(100);\n        }\n    }\n\n\n    public class ProgressChangedArgs : EventArgs\n    {\n        public string Progress {get;private set;}\n        public ProgressChangedArgs(string progress)\n        {\n            Progress = progress;\n        }\n    }\n}\n\n\nYour worker thread has an event. Your UI thread starts off another thread to do the work and hooks up that worker event so you can display the state of the worker thread.\n\nThen in the UI you need to cross threads to change the actual control... like a label or a progress bar.\n    ",
        "votes": 70,
        "comentarios": [],
        "usuario": "Hath",
        "usuario_id": 1152
    },
    {
        "_id": 713,
        "fecha": { "$date" : "2015-12-19T10:02:10Z" },
        "decripcion": "\nThe simple solution is to use Control.Invoke.\n\nvoid DoSomething()\n{\n    if (InvokeRequired) {\n        Invoke(new MethodInvoker(updateGUI));\n    } else {\n        // Do Something\n        updateGUI();\n    }\n}\n\nvoid updateGUI() {\n    // update gui here\n}\n\n    ",
        "votes": 65,
        "comentarios": [
            {
                "decripcion": "well done for the simplicity! not only simple, but also works well! I really did not understand why microsoft could not make it simpler as it is meant to be! for calling 1 line on the main thread, we should write couple of functions!",
                "fecha": { "$date" : "2015-12-19T09:17:43Z" },
                "usuario": "MBH",
                "usuario_id": 1153
            },
            {
                "decripcion": "@MBH Agree.  BTW, did you notice stackoverflow.com/a/3588137/199364 answer above, which defines an extension method?  Do that once in a custom utilities class, then don't have to care any more that Microsoft did not do it for us :)",
                "fecha": { "$date" : "2016-05-16T18:14:54Z" },
                "usuario": "ToolmakerSteve",
                "usuario_id": 1150
            },
            {
                "decripcion": "@ToolmakerSteve Thats exactly what it meant to be! you are right we can find a way, but i mean from DRY (don't repeat yourself) point of view, the problem that has common solution, can be solved by them with minimum effort by Microsoft which will save a lot of time for programmers :)",
                "fecha": { "$date" : "2016-05-16T18:56:40Z" },
                "usuario": "MBH",
                "usuario_id": 1153
            }
        ],
        "usuario": "OregonGhost",
        "usuario_id": 1154
    },
    {
        "_id": 714,
        "fecha": { "$date" : "2012-09-22T03:59:50Z" },
        "decripcion": "\nThreading code is often buggy and always hard to test. You don't need to write threading code to update the user interface from a background task. Just use the BackgroundWorker class to run the task and its ReportProgress method to update the user interface. Usually, you just report a percentage complete, but there's another overload that includes a state object. Here's an example that just reports a string object:\n\n    private void button1_Click(object sender, EventArgs e)\n    {\n        backgroundWorker1.WorkerReportsProgress = true;\n        backgroundWorker1.RunWorkerAsync();\n    }\n\n    private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)\n    {\n        Thread.Sleep(5000);\n        backgroundWorker1.ReportProgress(0, \"A\");\n        Thread.Sleep(5000);\n        backgroundWorker1.ReportProgress(0, \"B\");\n        Thread.Sleep(5000);\n        backgroundWorker1.ReportProgress(0, \"C\");\n    }\n\n    private void backgroundWorker1_ProgressChanged(\n        object sender, \n        ProgressChangedEventArgs e)\n    {\n        label1.Text = e.UserState.ToString();\n    }\n\n\nThat's fine if you always want to update the same field. If you've got more complicated updates to make, you could define a class to represent the UI state and pass it to the ReportProgress method.\n\nOne final thing, be sure to set the WorkerReportsProgress flag, or the ReportProgress method will be completely ignored.\n    ",
        "votes": 50,
        "comentarios": [
            {
                "decripcion": "At the end of processing, it is also possible to update the user interface via backgroundWorker1_RunWorkerCompleted.",
                "fecha": { "$date" : "2016-04-01T19:18:04Z" },
                "usuario": "DavidRR",
                "usuario_id": 1155
            }
        ],
        "usuario": "Don Kirkby",
        "usuario_id": 1156
    },
    {
        "_id": 715,
        "fecha": { "$date" : "2017-05-23T12:34:51Z" },
        "decripcion": "\nThe vast majority of answers use Control.Invoke which is a race condition waiting to happen. For example, consider the accepted answer:\n\nstring newText = \"abc\"; // running on worker thread\nthis.Invoke((MethodInvoker)delegate { \n    someLabel.Text = newText; // runs on UI thread\n});\n\n\nIf the user closes the form just before this.Invoke is called (remember, this is the Form object), an ObjectDisposedException will be likely fired.\n\nThe solution is to use SynchronizationContext, specifically SynchronizationContext.Current as hamilton.danielb suggests (other answers rely on specific SynchronizationContext implementations which is completely unnecessary). I would slightly modify his code to use SynchronizationContext.Post rather than SynchronizationContext.Send though (as there's typically no need for the worker thread to wait):\n\npublic partial class MyForm : Form\n{\n    private readonly SynchronizationContext _context;\n    public MyForm()\n    {\n        _context = SynchronizationContext.Current\n        ...\n    }\n\n    private MethodOnOtherThread()\n    {\n         ...\n         _context.Post(status => someLabel.Text = newText,null);\n    }\n}\n\n\nNote that on .NET 4.0 and up you should really be using tasks for async operations. See n-san's answer for the equivalent task-based approach (using TaskScheduler.FromCurrentSynchronizationContext). \n\nFinally, on .NET 4.5 and up you can also use Progress<T> (which basically captures SynchronizationContext.Current upon its creation) as demonstrated by Ryszard D\u017cegan's for cases where the long-running operation needs to run UI code while still working.\n    ",
        "votes": 45,
        "comentarios": [],
        "usuario": "Ohad Schneider",
        "usuario_id": 1157
    },
    {
        "_id": 716,
        "fecha": { "$date" : "2017-09-16T10:05:49Z" },
        "decripcion": "\nYou'll have to make sure that the update happens on the correct thread; the UI thread.\n\nIn order to do this, you'll have to Invoke the event-handler instead of calling it directly.\n\nYou can do this by raising your event like this:\n\n(The code is typed here out of my head, so I haven't checked for correct syntax, etc., but it should get you going.)\n\nif( MyEvent != null )\n{\n   Delegate[] eventHandlers = MyEvent.GetInvocationList();\n\n   foreach( Delegate d in eventHandlers )\n   {\n      // Check whether the target of the delegate implements \n      // ISynchronizeInvoke (Winforms controls do), and see\n      // if a context-switch is required.\n      ISynchronizeInvoke target = d.Target as ISynchronizeInvoke;\n\n      if( target != null && target.InvokeRequired )\n      {\n         target.Invoke (d, ... );\n      }\n      else\n      {\n          d.DynamicInvoke ( ... );\n      }\n   }\n}\n\n\nNote that the code above will not work on WPF projects, since WPF controls do not implement the ISynchronizeInvoke interface.\n\nIn order to make sure that the code above works with Windows Forms and WPF, and all other platforms, you can have a look at the AsyncOperation, AsyncOperationManager and SynchronizationContext classes.\n\nIn order to easily raise events this way, I've created an extension method, which allows me to simplify raising an event by just calling:\n\nMyEvent.Raise(this, EventArgs.Empty);\n\n\nOf course, you can also make use of the BackGroundWorker class, which will abstract this matter for you.\n    ",
        "votes": 40,
        "comentarios": [
            {
                "decripcion": "Indeed, but I don't like to 'clutter' my GUI code with this matter.  My GUI shouldn't care whether it needs to Invoke or not. In other words: i don't think that it is the responsability of the GUI to perform the context-swithc.",
                "fecha": { "$date" : "2009-03-19T09:51:40Z" },
                "usuario": "Frederik Gheysels",
                "usuario_id": 1158
            },
            {
                "decripcion": "Breaking the delegate apart etc seems overkill - why not just: SynchronizationContext.Current.Send(delegate { MyEvent(...); }, null);",
                "fecha": { "$date" : "2009-03-19T11:07:47Z" },
                "usuario": "Marc Gravell\u2666",
                "usuario_id": 1128
            },
            {
                "decripcion": "Do you always have access to the SynchronizationContext ?  Even if your class is in a class lib ?",
                "fecha": { "$date" : "2009-03-19T11:42:57Z" },
                "usuario": "Frederik Gheysels",
                "usuario_id": 1158
            }
        ],
        "usuario": "Frederik Gheysels",
        "usuario_id": 1158
    },
    {
        "_id": 717,
        "fecha": { "$date" : "2017-03-26T09:48:03Z" },
        "decripcion": "\nBecause of the triviality of the scenario I would actually have the UI thread poll for the status. I think you will find that it can be quite elegant.\n\npublic class MyForm : Form\n{\n  private volatile string m_Text = \"\";\n  private System.Timers.Timer m_Timer;\n\n  private MyForm()\n  {\n    m_Timer = new System.Timers.Timer();\n    m_Timer.SynchronizingObject = this;\n    m_Timer.Interval = 1000;\n    m_Timer.Elapsed += (s, a) => { MyProgressLabel.Text = m_Text; };\n    m_Timer.Start();\n    var thread = new Thread(WorkerThread);\n    thread.Start();\n  }\n\n  private void WorkerThread()\n  {\n    while (...)\n    {\n      // Periodically publish progress information.\n      m_Text = \"Still working...\";\n    }\n  }\n}\n\n\nThe approach avoids the marshaling operation required when using the ISynchronizeInvoke.Invoke and ISynchronizeInvoke.BeginInvoke methods. There is nothing wrong with using the marshaling technique, but there are a couple of caveats you need to be aware of.\n\n\nMake sure you do not call BeginInvoke too frequently or it could overrun the message pump.\nCalling Invoke on the worker thread is a blocking call. It will temporarily halt the work being done in that thread.\n\n\nThe strategy I propose in this answer reverses the communication roles of the threads. Instead of the worker thread pushing the data the UI thread polls for it. This a common pattern used in many scenarios. Since all you are wanting to do is display progress information from the worker thread then I think you will find that this solution is a great alternative to the marshaling solution. It has the following advantages.\n\n\nThe UI and worker threads remain loosely coupled as opposed to the Control.Invoke or Control.BeginInvoke approach which tightly couples them.\nThe UI thread will not impede the progress of the worker thread.\nThe worker thread cannot dominate the time the UI thread spends updating.\nThe intervals at which the UI and worker threads perform operations can remain independent.\nThe worker thread cannot overrun the UI thread's message pump.\nThe UI thread gets to dictate when and how often the UI gets updated.\n\n    ",
        "votes": 33,
        "comentarios": [
            {
                "decripcion": "Good idea. The only thing you didn't mention is how you properly dispose the timer once the WorkerThread is finished. Note this can cause trouble when the application ends (i.e. the user closes the application). Do you have an idea how to solve this?",
                "fecha": { "$date" : "2013-11-11T10:24:59Z" },
                "usuario": "Matt",
                "usuario_id": 1159
            },
            {
                "decripcion": "@Matt Instead of using an anonymous handler for Elapsed event, you use a member method so you can remove the timer when the form is disposed...",
                "fecha": { "$date" : "2018-04-20T00:54:08Z" },
                "usuario": "Phil1970",
                "usuario_id": 1160
            },
            {
                "decripcion": "@Phil1970 - Good point. You meant like System.Timers.ElapsedEventHandler handler = (s, a) => { MyProgressLabel.Text = m_Text; }; and assigning it via m_Timer.Elapsed += handler;, later in the dispose context doing a m_Timer.Elapsed -= handler; am I right? And for the disposing/closing following the advice as discussed here.",
                "fecha": { "$date" : "2018-04-20T08:37:29Z" },
                "usuario": "Matt",
                "usuario_id": 1159
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 718,
        "fecha": { "$date" : "2009-03-19T09:47:27Z" },
        "decripcion": "\nYou'll need to Invoke the method on the GUI thread. You can do that by calling Control.Invoke.\n\nFor example:\n\ndelegate void UpdateLabelDelegate (string message);\n\nvoid UpdateLabel (string message)\n{\n    if (InvokeRequired)\n    {\n         Invoke (new UpdateLabelDelegate (UpdateLabel), message);\n         return;\n    }\n\n    MyLabelControl.Text = message;\n}\n\n    ",
        "votes": 31,
        "comentarios": [
            {
                "decripcion": "The invoke line gives me a compiler error. The best overloaded method match for 'System.Windows.Forms.Control.Invoke(System.Delegate, object[])' has some invalid arguments",
                "fecha": { "$date" : "2009-03-19T11:12:09Z" },
                "usuario": "CruelIO",
                "usuario_id": 1161
            }
        ],
        "usuario": "Kieron",
        "usuario_id": 1162
    },
    {
        "_id": 719,
        "fecha": { "$date" : "2017-03-26T10:06:14Z" },
        "decripcion": "\nNone of the Invoke stuff in the previous answers is necessary.\n\nYou need to look at WindowsFormsSynchronizationContext:\n\n// In the main thread\nWindowsFormsSynchronizationContext mUiContext = new WindowsFormsSynchronizationContext();\n\n...\n\n// In some non-UI Thread\n\n// Causes an update in the GUI thread.\nmUiContext.Post(UpdateGUI, userData);\n\n...\n\nvoid UpdateGUI(object userData)\n{\n    // Update your GUI controls here\n}\n\n    ",
        "votes": 30,
        "comentarios": [
            {
                "decripcion": "what do you think the Post method uses under the hood? :)",
                "fecha": { "$date" : "2016-05-05T09:09:23Z" },
                "usuario": "increddibelly",
                "usuario_id": 1163
            }
        ],
        "usuario": "Jon H",
        "usuario_id": 1164
    },
    {
        "_id": 720,
        "fecha": { "$date" : "2017-03-26T09:56:51Z" },
        "decripcion": "\nThis one is similar to the solution above using .NET Framework 3.0, but it solved the issue of compile-time safety support.\n\npublic  static class ControlExtension\n{\n    delegate void SetPropertyValueHandler<TResult>(Control souce, Expression<Func<Control, TResult>> selector, TResult value);\n\n    public static void SetPropertyValue<TResult>(this Control source, Expression<Func<Control, TResult>> selector, TResult value)\n    {\n        if (source.InvokeRequired)\n        {\n            var del = new SetPropertyValueHandler<TResult>(SetPropertyValue);\n            source.Invoke(del, new object[]{ source, selector, value});\n        }\n        else\n        {\n            var propInfo = ((MemberExpression)selector.Body).Member as PropertyInfo;\n            propInfo.SetValue(source, value, null);\n        }\n    }\n}\n\n\nTo use:\n\nthis.lblTimeDisplay.SetPropertyValue(a => a.Text, \"some string\");\nthis.lblTimeDisplay.SetPropertyValue(a => a.Visible, false);\n\n\nThe compiler will fail if the user passes the wrong data type.\n\nthis.lblTimeDisplay.SetPropertyValue(a => a.Visible, \"sometext\");\n\n    ",
        "votes": 25,
        "comentarios": [],
        "usuario": "Francis",
        "usuario_id": 1165
    },
    {
        "_id": 721,
        "fecha": { "$date" : "2017-03-26T09:58:47Z" },
        "decripcion": "\nSalvete! Having searched for this question, I found the answers by FrankG and Oregon Ghost to be the easiest most useful to me. Now, I code in Visual Basic and ran this snippet through a convertor; so I'm not sure quite how it turns out.\n\nI have a dialog form called form_Diagnostics, which has a richtext box, called updateDiagWindow, which I am using as a sort of logging display.  I needed to be able to update its text from all threads. The extra lines allow the window to automatically scroll to the newest lines.\n\nAnd so, I can now update the display with one line, from anywhere in the entire program in the manner which you think it would work without any threading:\n\n  form_Diagnostics.updateDiagWindow(whatmessage);\n\n\nMain Code (put this inside of your form's class code):\n\n#region \"---------Update Diag Window Text------------------------------------\"\n// This sub allows the diag window to be updated by all threads\npublic void updateDiagWindow(string whatmessage)\n{\n    var _with1 = diagwindow;\n    if (_with1.InvokeRequired) {\n        _with1.Invoke(new UpdateDiagDelegate(UpdateDiag), whatmessage);\n    } else {\n        UpdateDiag(whatmessage);\n    }\n}\n// This next line makes the private UpdateDiagWindow available to all threads\nprivate delegate void UpdateDiagDelegate(string whatmessage);\nprivate void UpdateDiag(string whatmessage)\n{\n    var _with2 = diagwindow;\n    _with2.appendtext(whatmessage);\n    _with2.SelectionStart = _with2.Text.Length;\n    _with2.ScrollToCaret();\n}\n#endregion\n\n    ",
        "votes": 25,
        "comentarios": [],
        "usuario": "bgmCoder",
        "usuario_id": 1166
    },
    {
        "_id": 722,
        "fecha": { "$date" : "2017-03-08T12:44:54Z" },
        "decripcion": "\nLabel lblText; //initialized elsewhere\n\nvoid AssignLabel(string text)\n{\n   if (InvokeRequired)\n   {\n      BeginInvoke((Action<string>)AssignLabel, text);\n      return;\n   }\n\n   lblText.Text = text;           \n}\n\n\nNote that BeginInvoke() is preferred over Invoke() because it's less likely to cause deadlocks (however, this is not an issue here when just assigning text to a label): \n\nWhen using Invoke() you are waiting for the method to return. Now, it may be that you do something in the invoked code that will need to wait for the thread, which may not be immediately obvious if it's buried in some functions that you are calling, which itself may happen indirectly via event handlers. So you would be waiting for the thread, the thread would be waiting for you and you are deadlocked. \n\nThis actually caused some of our released software to hang. It was easy enough to fix by replacing Invoke() with BeginInvoke(). Unless you have a need for synchronous operation, which may be the case if you need a return value, use BeginInvoke().\n    ",
        "votes": 23,
        "comentarios": [],
        "usuario": "ILoveFortran",
        "usuario_id": 1167
    },
    {
        "_id": 723,
        "fecha": { "$date" : "2010-08-26T03:17:44Z" },
        "decripcion": "\nFor many purposes it's as simple as this:\n\npublic delegate void serviceGUIDelegate();\nprivate void updateGUI()\n{\n  this.Invoke(new serviceGUIDelegate(serviceGUI));\n}\n\n\n\"serviceGUI()\" is a GUI level method within the form (this) that can change as many controls as you want. Call \"updateGUI()\" from the other thread. Parameters can be added to pass values, or (probably faster) use class scope variables with locks on them as required if there is any possibility of a clash between threads accessing them that could cause instability.  Use BeginInvoke instead of Invoke if the non-GUI thread is time critical (keeping Brian Gideon's warning in mind). \n    ",
        "votes": 22,
        "comentarios": [],
        "usuario": "Frankg",
        "usuario_id": 1168
    },
    {
        "_id": 724,
        "fecha": { "$date" : "2011-09-15T20:40:57Z" },
        "decripcion": "\nThis in my C# 3.0 variation of Ian Kemp's solution:\n\npublic static void SetPropertyInGuiThread<C,V>(this C control, Expression<Func<C, V>> property, V value) where C : Control\n{\n    var memberExpression = property.Body as MemberExpression;\n    if (memberExpression == null)\n        throw new ArgumentException(\"The 'property' expression must specify a property on the control.\");\n\n    var propertyInfo = memberExpression.Member as PropertyInfo;\n    if (propertyInfo == null)\n        throw new ArgumentException(\"The 'property' expression must specify a property on the control.\");\n\n    if (control.InvokeRequired)\n        control.Invoke(\n            (Action<C, Expression<Func<C, V>>, V>)SetPropertyInGuiThread,\n            new object[] { control, property, value }\n        );\n    else\n        propertyInfo.SetValue(control, value, null);\n}\n\n\nYou call it like this:\n\nmyButton.SetPropertyInGuiThread(b => b.Text, \"Click Me!\")\n\n\n\nIt adds null-checking to the result of the \"as MemberExpression\".\nIt improves the static type-safety.\n\n\nOtherwise, the original is a very nice solution.\n    ",
        "votes": 21,
        "comentarios": [],
        "usuario": "Rotaerk",
        "usuario_id": 1169
    },
    {
        "_id": 725,
        "fecha": { "$date" : "2017-04-24T07:23:27Z" },
        "decripcion": "\nWhen I encountered the same issue I sought help from Google, but rather than give me a simple solution it confused me more by giving examples of MethodInvoker and blah blah blah. So I decided to solve it on my own. Here is my solution:\n\nMake a delegate like this:\n\nPublic delegate void LabelDelegate(string s);\n\nvoid Updatelabel(string text)\n{\n   if (label.InvokeRequired)\n   {\n       LabelDelegate LDEL = new LabelDelegate(Updatelabel);\n       label.Invoke(LDEL, text);\n   }\n   else\n       label.Text = text\n}\n\n\nYou can call this function in a new thread like this\n\nThread th = new Thread(() => Updatelabel(\"Hello World\"));\nth.start();\n\n\nDon't be confused with Thread(() => .....). I use an anonymous function or lambda expression when I work on a thread. To reduce the lines of code you can use the ThreadStart(..) method too which I am not supposed to explain here.\n    ",
        "votes": 21,
        "comentarios": [],
        "usuario": "ahmar",
        "usuario_id": 1170
    },
    {
        "_id": 726,
        "fecha": { "$date" : "2016-01-11T19:47:30Z" },
        "decripcion": "\nSimply use something like this:\n\n this.Invoke((MethodInvoker)delegate\n            {\n                progressBar1.Value = e.ProgressPercentage; // runs on UI thread\n            });\n\n    ",
        "votes": 18,
        "comentarios": [
            {
                "decripcion": "If you have e.ProgressPercentage, aren't you already in the UI thread from the method you are calling this?",
                "fecha": { "$date" : "2016-01-11T19:55:05Z" },
                "usuario": "LarsTech",
                "usuario_id": 1171
            },
            {
                "decripcion": "The ProgressChanged event runs on the UI thread.  That's one of the conveniences of using the BackgroundWorker.  The Completed event runs on the gui, too.  The only thing running in the non-UI thread is the DoWork method.",
                "fecha": { "$date" : "2016-01-11T20:18:35Z" },
                "usuario": "LarsTech",
                "usuario_id": 1171
            }
        ],
        "usuario": "Hassan Shouman",
        "usuario_id": 1172
    },
    {
        "_id": 727,
        "fecha": { "$date" : "2018-07-11T04:11:35Z" },
        "decripcion": "\nMost of the other answers are a little complex for me on this question (I'm new to C#), so I am writing mine:\n\nI have a WPF application and have defined a worker as below:\n\nIssue:\n\nBackgroundWorker workerAllocator;\nworkerAllocator.DoWork += delegate (object sender1, DoWorkEventArgs e1) {\n    // This is my DoWork function.\n    // It is given as an anonymous function, instead of a separate DoWork function\n\n    // I need to update a message to textbox (txtLog) from this thread function\n\n    // Want to write below line, to update UI\n    txt.Text = \"my message\"\n\n    // But it fails with:\n    //  'System.InvalidOperationException':\n    //  \"The calling thread cannot access this object because a different thread owns it\"\n}\n\n\nSolution:\n\nworkerAllocator.DoWork += delegate (object sender1, DoWorkEventArgs e1)\n{\n    // The below single line works\n    txtLog.Dispatcher.BeginInvoke((Action)(() => txtLog.Text = \"my message\"));\n}\n\n\nI am yet to find out what the above line means, but it works.\n\nFor WinForms:\n\nSolution:\n\ntxtLog.Invoke((MethodInvoker)delegate\n{\n    txtLog.Text = \"my message\";\n});\n\n    ",
        "votes": 17,
        "comentarios": [
            {
                "decripcion": "The question was about Winforms, not WPF.",
                "fecha": { "$date" : "2018-07-10T17:52:02Z" },
                "usuario": "Marc L.",
                "usuario_id": 1173
            },
            {
                "decripcion": "Thanks. Added WinForms solution above.",
                "fecha": { "$date" : "2018-07-11T04:12:41Z" },
                "usuario": "Manohar Reddy Poreddy",
                "usuario_id": 1174
            },
            {
                "decripcion": "...which is just a copy of however many other answers on this same question, but okay. Why not be part of the solution and just delete your answer?",
                "fecha": { "$date" : "2018-07-11T13:52:09Z" },
                "usuario": "Marc L.",
                "usuario_id": 1173
            },
            {
                "decripcion": "hmm, correct you are, if only, you read my answer with attention, the beginning part (the reason why i wrote the answer), and hopefully with a little more attention you see there is someone who had exact same problem & upvoted today for my simple answer, and with even more attn if you could foresee the real story on why all this happened, that google sends me here even when i search for wpf. Sure since you missed these more or less obvious 3 reasons, i can understand why you won't remove your downvote. Instead of cleaning the okay one, create something new which is much more difficult.",
                "fecha": { "$date" : "2018-07-11T15:51:15Z" },
                "usuario": "Manohar Reddy Poreddy",
                "usuario_id": 1174
            }
        ],
        "usuario": "Manohar Reddy Poreddy",
        "usuario_id": 1174
    },
    {
        "_id": 728,
        "fecha": { "$date" : "2017-03-26T10:00:26Z" },
        "decripcion": "\nMy version is to insert one line of recursive \"mantra\":\n\nFor no arguments:\n\n    void Aaaaaaa()\n    {\n        if (InvokeRequired) { Invoke(new Action(Aaaaaaa)); return; } //1 line of mantra\n\n        // Your code!\n    }\n\n\nFor a function that has arguments:\n\n    void Bbb(int x, string text)\n    {\n        if (InvokeRequired) { Invoke(new Action<int, string>(Bbb), new[] { x, text }); return; }\n        // Your code!\n    }\n\n\nTHAT is IT.\n\n\n\nSome argumentation: Usually it is bad for code readability to put {} after an if () statement in one line. But in this case it is routine all-the-same \"mantra\". It doesn't break code readability if this method is consistent over the project. And it saves your code from littering (one line of code instead of five).\n\nAs you see if(InvokeRequired) {something long} you just know \"this function is safe to call from another thread\".\n    ",
        "votes": 15,
        "comentarios": [],
        "usuario": "MajesticRa",
        "usuario_id": 1175
    },
    {
        "_id": 729,
        "fecha": { "$date" : "2017-03-26T10:01:11Z" },
        "decripcion": "\nYou may use the already-existing delegate Action:\n\nprivate void UpdateMethod()\n{\n    if (InvokeRequired)\n    {\n        Invoke(new Action(UpdateMethod));\n    }\n}\n\n    ",
        "votes": 15,
        "comentarios": [],
        "usuario": "Embedd_0913",
        "usuario_id": 1176
    },
    {
        "_id": 730,
        "fecha": { "$date" : "2017-03-26T10:10:52Z" },
        "decripcion": "\nCreate a class variable:\n\nSynchronizationContext _context;\n\n\nSet it in the constructor that creates your UI:\n\nvar _context = SynchronizationContext.Current;\n\n\nWhen you want to update the label:\n\n_context.Send(status =>{\n    // UPDATE LABEL\n}, null);\n\n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "blackmind",
        "usuario_id": 1177
    },
    {
        "_id": 731,
        "fecha": { "$date" : "2013-09-10T13:55:34Z" },
        "decripcion": "\nYou must use invoke and delegate\n\nprivate delegate void MyLabelDelegate();\nlabel1.Invoke( new MyLabelDelegate(){ label1.Text += 1; });\n\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "A. Zalonis",
        "usuario_id": 1178
    },
    {
        "_id": 732,
        "fecha": { "$date" : "2014-04-17T09:56:54Z" },
        "decripcion": "\nTry to refresh the label using this\n\npublic static class ExtensionMethods\n{\n    private static Action EmptyDelegate = delegate() { };\n\n    public static void Refresh(this UIElement uiElement)\n    {\n        uiElement.Dispatcher.Invoke(DispatcherPriority.Render, EmptyDelegate);\n    }\n}\n\n    ",
        "votes": 13,
        "comentarios": [
            {
                "decripcion": "Is it for Windows Forms ?",
                "fecha": { "$date" : "2017-04-03T14:13:41Z" },
                "usuario": "Kiquenet",
                "usuario_id": 1142
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 733,
        "fecha": { "$date" : "2017-03-26T10:26:32Z" },
        "decripcion": "\nThe simplest way in WPF applications is:\n\nthis.Dispatcher.Invoke((Action)(() =>\n{\n    // This refers to a form in a WPF application \n    val1 = textBox.Text; // Access the UI \n}));\n\n    ",
        "votes": 10,
        "comentarios": [
            {
                "decripcion": "This is correct, if you are using a WPF application. But he is using Windows Forms.",
                "fecha": { "$date" : "2016-09-27T08:28:26Z" },
                "usuario": "Gertjan Gielen",
                "usuario_id": 1179
            },
            {
                "decripcion": "You can use the Dispatcher even in a Winforms application. stackoverflow.com/questions/303116/\u2026",
                "fecha": { "$date" : "2019-04-10T06:39:28Z" },
                "usuario": "Francis",
                "usuario_id": 1165
            }
        ],
        "usuario": "Basheer AL-MOMANI",
        "usuario_id": 1180
    },
    {
        "_id": 734,
        "fecha": { "$date" : "2017-03-26T10:11:42Z" },
        "decripcion": "\nFor example, access a control other than in the current thread:\n\nSpeed_Threshold = 30;\ntextOutput.Invoke(new EventHandler(delegate\n{\n    lblThreshold.Text = Speed_Threshold.ToString();\n}));\n\n\nThere the lblThreshold is a Label and Speed_Threshold is a global variable.\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "Da Xiong",
        "usuario_id": 1181
    },
    {
        "_id": 735,
        "fecha": { "$date" : "2017-03-26T10:15:32Z" },
        "decripcion": "\nWhen you're in the UI thread you could ask it for its synchronization context task scheduler. It would give you a TaskScheduler that schedules everything on the UI thread.\n\nThen you can chain your tasks so that when the result is ready then another task (which is scheduled on the UI thread) picks it and assigns it to a label.\n\npublic partial class MyForm : Form\n{\n  private readonly TaskScheduler _uiTaskScheduler;\n  public MyForm()\n  {\n    InitializeComponent();\n    _uiTaskScheduler = TaskScheduler.FromCurrentSynchronizationContext();\n  }\n\n  private void buttonRunAsyncOperation_Click(object sender, EventArgs e)\n  {\n    RunAsyncOperation();\n  }\n\n  private void RunAsyncOperation()\n  {\n    var task = new Task<string>(LengthyComputation);\n    task.ContinueWith(antecedent =>\n                         UpdateResultLabel(antecedent.Result), _uiTaskScheduler);\n    task.Start();\n  }\n\n  private string LengthyComputation()\n  {\n    Thread.Sleep(3000);\n    return \"47\";\n  }\n\n  private void UpdateResultLabel(string text)\n  {\n    labelResult.Text = text;\n  }\n}\n\n\nThis works for tasks (not threads) which are the preferred way of writing concurrent code now.\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "Calling Task.Start is typically not a good practice blogs.msdn.com/b/pfxteam/archive/2012/01/14/10256832.aspx",
                "fecha": { "$date" : "2014-05-24T08:07:12Z" },
                "usuario": "Ohad Schneider",
                "usuario_id": 1157
            }
        ],
        "usuario": "nan",
        "usuario_id": 1182
    },
    {
        "_id": 736,
        "fecha": { "$date" : "2018-11-17T21:40:04Z" },
        "decripcion": "\nAnd yet another generic Control extension aproach..\n\nFirst add an extension method for objects of type Control\n\npublic static void InvokeIfRequired<T>(this T c, Action<T> action) where T : Control\n{\n    if (c.InvokeRequired)\n    {\n        c.Invoke(new Action(() => action(c)));\n    }\n    else\n    {\n        action(c);\n    }\n}\n\n\nand call like this from another thread to access a Control named object1 in UI-thread:\n\nobject1.InvokeIfRequired(c => { c.Visible = true; });\nobject1.InvokeIfRequired(c => { c.Text = \"ABC\"; });\n\n\n..or like this\n\nobject1.InvokeIfRequired(c => \n  { \n      c.Text = \"ABC\";\n      c.Visible = true; \n  }\n);\n\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "Very elegant, very nice!",
                "fecha": { "$date" : "2021-03-12T14:57:33Z" },
                "usuario": "Norbert Boros",
                "usuario_id": 1183
            },
            {
                "decripcion": "I have started using c.BeginInvoke for asynchronous update. It is less likely to cause deadlocks if Invoked in a cascade.",
                "fecha": { "$date" : "2021-03-13T23:24:35Z" },
                "usuario": "flodis",
                "usuario_id": 1184
            }
        ],
        "usuario": "flodis",
        "usuario_id": 1184
    },
    {
        "_id": 737,
        "fecha": { "$date" : "2019-07-05T11:24:54Z" },
        "decripcion": "\nServletContext\n\nWhen the servlet container (like Apache Tomcat) starts up, it will deploy and load all its web applications. When a web application is loaded, the servlet container creates the ServletContext once and keeps it in the server's memory. The web app's web.xml and all of included web-fragment.xml files is parsed, and each <servlet>, <filter> and <listener> found (or each class annotated with @WebServlet, @WebFilter and @WebListener respectively) is instantiated once and kept in the server's memory as well. For each instantiated filter, its init() method is invoked with a new FilterConfig.\n\nWhen a Servlet has a <servlet><load-on-startup> or @WebServlet(loadOnStartup) value greater than 0, then its init() method is also invoked during startup with a new ServletConfig. Those servlets are initialized in the same order specified by that value (1 is 1st, 2 is 2nd, etc). If the same value is specified for more than one servlet, then each of those servlets is loaded in the same order as they appear in the web.xml, web-fragment.xml, or @WebServlet classloading. In the event the \"load-on-startup\" value is absent, the init() method will be invoked whenever the HTTP request hits that servlet for the very first time. \n\nWhen the servlet container is finished with all of the above described initialization steps, then the ServletContextListener#contextInitialized() will be invoked.\n\nWhen the servlet container shuts down, it unloads all web applications, invokes the destroy() method of all its initialized servlets and filters, and all ServletContext, Servlet, Filter and Listener instances are trashed. Finally the ServletContextListener#contextDestroyed() will be invoked.\n\nHttpServletRequest and HttpServletResponse\n\nThe servlet container is attached to a web server that listens for HTTP requests on a certain port number (port 8080 is usually used during development and port 80 in production). When a client (e.g. user with a web browser, or programmatically using URLConnection) sends an HTTP request, the servlet container creates new HttpServletRequest and HttpServletResponse objects and passes them through any defined Filter in the chain and, eventually, the Servlet instance. \n\nIn the case of filters, the doFilter() method is invoked. When the servlet container's code calls chain.doFilter(request, response), the request and response continue on to the next filter, or hit the servlet if there are no remaining filters.\n\nIn the case of servlets, the service() method is invoked. By default, this method determines which one of the doXxx() methods to invoke based off of  request.getMethod(). If the determined method is absent from the servlet, then an HTTP 405 error is returned in the response. \n\nThe request object provides access to all of the information about the HTTP request, such as its URL, headers, query string and body. The response object provides the ability to control and send the HTTP response the way you want by, for instance, allowing you to set the headers and the body (usually with generated HTML content from a JSP file). When the HTTP response is committed and finished, both the request and response objects are recycled and made available for reuse.\n\nHttpSession\n\nWhen a client visits the webapp for the first time and/or the HttpSession is obtained for the first time via request.getSession(), the servlet container creates a new HttpSession object, generates a long and unique ID (which you can get by session.getId()), and stores it in the server's memory. The servlet container also sets a Cookie in the Set-Cookie header of the HTTP response with JSESSIONID as its name and the unique session ID as its value. \n\nAs per the HTTP cookie specification (a contract any decent web browser and web server must adhere to), the client (the web browser) is required to send this cookie back in subsequent requests in the Cookie header for as long as the cookie is valid (i.e. the unique ID must refer to an unexpired session and the domain and path are correct). Using your browser's built-in HTTP traffic monitor, you can verify that the cookie is valid (press F12 in Chrome / Firefox 23+ / IE9+, and check the Net/Network tab). The servlet container will check the Cookie header of every incoming HTTP request for the presence of the cookie with the name JSESSIONID and use its value (the session ID) to get the associated HttpSession from server's memory.\n\nThe HttpSession stays alive until it has been idle (i.e. not used in a request) for more than the timeout value specified in <session-timeout>, a setting in web.xml. The timeout value defaults to 30 minutes. So, when the client doesn't visit the web app for longer than the time specified, the servlet container trashes the session. Every subsequent request, even with the cookie specified, will not have access to the same session anymore; the servlet container will create a new session.\n\nOn the client side, the session cookie stays alive for as long as the browser instance is running. So, if the client closes the browser instance (all tabs/windows), then the session is trashed on the client's side. In a new browser instance, the cookie associated with the session wouldn't exist, so it would no longer be sent. This causes an entirely new HttpSession to be created, with an entirely new session cookie being used.\n\nIn a nutshell\n\n\nThe ServletContext lives for as long as the web app lives. It is shared among all requests in all sessions.\nThe HttpSession lives for as long as the client is interacting with the web app with the same browser instance, and the session hasn't timed out at the server side. It is shared among all requests in the same session.\nThe HttpServletRequest and HttpServletResponse live from the time the servlet receives an HTTP request from the client, until the complete response (the web page) has arrived. It is not shared elsewhere.\nAll Servlet, Filter and Listener instances live as long as the web app lives. They are shared among all requests in all sessions.\nAny attribute that is defined in ServletContext, HttpServletRequest and HttpSession will live as long as the object in question lives. The object itself represents the \"scope\" in bean management frameworks such as JSF, CDI, Spring, etc. Those frameworks store their scoped beans as an attribute of its closest matching scope.\n\n\nThread Safety\n\nThat said, your major concern is possibly thread safety. You should now know that servlets and filters are shared among all requests. That's the nice thing about Java, it's multithreaded and different threads (read: HTTP requests) can make use of the same instance. It would otherwise be too expensive to recreate, init() and destroy() them for every single request.\n\nYou should also realize that you should never assign any request or session scoped data as an instance variable of a servlet or filter. It will be shared among all other requests in other sessions. That's not thread-safe! The below example illustrates this:\n\npublic class ExampleServlet extends HttpServlet {\n\n    private Object thisIsNOTThreadSafe;\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        Object thisIsThreadSafe;\n\n        thisIsNOTThreadSafe = request.getParameter(\"foo\"); // BAD!! Shared among all requests!\n        thisIsThreadSafe = request.getParameter(\"foo\"); // OK, this is thread safe.\n    } \n}\n\n\nSee also:\n\n\nWhat is the difference between JSF, Servlet and JSP?\nBest option for Session management in Java\nDifference between / and /* in servlet mapping url pattern\ndoGet and doPost in Servlets\nServlet seems to handle multiple concurrent browser requests synchronously\nWhy Servlets are not thread Safe?\n\n    ",
        "votes": 1895,
        "comentarios": [
            {
                "decripcion": "So when I somehow can find out the JSessionId which gets send to a client, I can steal his session?",
                "fecha": { "$date" : "2011-11-30T13:37:58Z" },
                "usuario": "Toskan",
                "usuario_id": 1188
            },
            {
                "decripcion": "@Toskan: that's correct. It's known as session fixation hack. Please note that this is not specific to JSP/Servlet. All other server side languages which maintains the session by a cookie are sensitive as well, like PHP with PHPSESSID cookie, ASP.NET with ASP.NET_SessionID cookie, etcetera. That's also why URL rewriting with ;jsessionid=xxx as some JSP/Servlet MVC frameworks automatically do is frowned upon. Just make sure that session ID is never exposed in URL or by other means in webpages so that the unaware enduser won't be attacked.",
                "fecha": { "$date" : "2011-11-30T13:45:39Z" },
                "usuario": "BalusC",
                "usuario_id": 1189
            },
            {
                "decripcion": "@Toskan: Also, make sure that your webapp is not sensitive to XSS attacks. I.e. do not redisplay any user-controlled input in unescaped form. XSS put doors open to ways to collect session IDs of all endusers. See also What is the general concept behind XSS?",
                "fecha": { "$date" : "2011-11-30T13:48:52Z" },
                "usuario": "BalusC",
                "usuario_id": 1189
            },
            {
                "decripcion": "@BalusC, Sorry for my stupidity. It means all user access the same instance of thisIsNOTThreadSafe right?",
                "fecha": { "$date" : "2014-08-26T03:35:52Z" },
                "usuario": "overshadow",
                "usuario_id": 1190
            },
            {
                "decripcion": "@TwoThumbSticks 404 is returned when whole servlet itself is absent. 405 is returned when servlet is present but desired doXxx() method is not implemented.",
                "fecha": { "$date" : "2017-02-20T11:52:58Z" },
                "usuario": "BalusC",
                "usuario_id": 1189
            }
        ],
        "usuario": "BalusC",
        "usuario_id": 1189
    },
    {
        "_id": 738,
        "fecha": { "$date" : "2013-09-25T15:47:00Z" },
        "decripcion": "\nSessions\n\n\n\n\nIn short: the web server issues a unique identifier to each visitor on his first visit. The visitor must bring back that ID for him to be recognised next time around. This identifier also allows the server to properly segregate objects owned by one session against that of another.\n\nServlet Instantiation\n\nIf load-on-startup is false:\n\n\n\n\nIf load-on-startup is true:\n\n\n\n\nOnce he's on the service mode and on the groove, the same servlet will work on the requests from all other clients. \n\n\n\nWhy isn't it a good idea to have one instance per client? Think about this: Will you hire one pizza guy for every order that came? Do that and you'd be out of business in no time.\n\nIt comes with a small risk though. Remember: this single guy holds all the order information in his pocket: so if you're not cautious about thread safety on servlets, he may end up giving the wrong order to a certain client.\n    ",
        "votes": 436,
        "comentarios": [
            {
                "decripcion": "Your picture is very good for my comprehension. I have one question , What will this pizza restaurant do when too many pizza order came , just wait for one pizza guy or hire more pizza guy ? Thanks .",
                "fecha": { "$date" : "2016-01-16T06:25:43Z" },
                "usuario": "zh18",
                "usuario_id": 1191
            },
            {
                "decripcion": "He will return a message with to many requests at this moment. try again later",
                "fecha": { "$date" : "2017-04-10T21:40:50Z" },
                "usuario": "Please_Dont_Bully_Me_SO_Lords",
                "usuario_id": 1192
            },
            {
                "decripcion": "Servlets, unlike Pizza delivery people, can do more than one delivery at the same time. They just need to take special care on where they write down the client's address, the pizza's flavor...",
                "fecha": { "$date" : "2019-01-04T16:27:02Z" },
                "usuario": "bruno",
                "usuario_id": 1193
            }
        ],
        "usuario": "Jops",
        "usuario_id": 1194
    },
    {
        "_id": 739,
        "fecha": { "$date" : "2013-10-17T05:59:35Z" },
        "decripcion": "\nSession in Java servlets is the same as session in other languages such as PHP.  It is unique to the user.  The server can keep track of it in different ways such as cookies, url rewriting etc.  This Java doc article explains it in the context of Java servlets and indicates that exactly how session is maintained is an implementation detail left to the designers of the server.  The specification only stipulates that it must be maintained as unique to a user across multiple connections to the server.  Check out this article from Oracle for more information about both of your questions.\n\nEdit There is an excellent tutorial here on how to work with session inside of servlets. And here is a chapter from Sun about Java Servlets, what they are and how to use them.  Between those two articles, you should be able to answer all of your questions.  \n    ",
        "votes": 42,
        "comentarios": [
            {
                "decripcion": "This brings up another question for me, Since there is only one servlet context for the whole application and we get access to the session variables through this servletcontext so how can the session variables be unique to every user? Thanks..",
                "fecha": { "$date" : "2010-06-24T01:27:53Z" },
                "usuario": "Ku Jon",
                "usuario_id": 1195
            },
            {
                "decripcion": "how are you accessing the session from the servletContext? You're not referring to servletContext.setAttribute(), are you?",
                "fecha": { "$date" : "2010-06-24T01:44:47Z" },
                "usuario": "matt b",
                "usuario_id": 1196
            },
            {
                "decripcion": "@KuJon Each web app has one ServletContext object. That object has zero, one, or more session objects -- a collection of session objects. Each session is identified by some kind of identifier string, as seen in cartoons on other answer. That identifier is tracked on client by either cookie or URL-rewriting. Each session object has its own variables.",
                "fecha": { "$date" : "2015-01-22T17:53:01Z" },
                "usuario": "Basil Bourque",
                "usuario_id": 1197
            }
        ],
        "usuario": "Chris Thompson",
        "usuario_id": 1198
    },
    {
        "_id": 740,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nWhen the servlet container (like Apache Tomcat) starts up, it will read from the web.xml file (only one per application) if anything goes wrong or shows up an error at container side console, otherwise, it will deploy and load all web applications by using web.xml (so named it as deployment descriptor).\nDuring instantiation phase of the servlet, servlet instance is ready but it cannot serve the client request because it is missing with two pieces of information:\n1: context information\n2: initial configuration information\nServlet engine creates servletConfig interface object encapsulating the above missing information into it\nservlet engine calls init() of the servlet by supplying servletConfig object references as an argument. Once init() is completely executed servlet is ready to serve the client request.\nQ) In the lifetime of servlet how many times instantiation and initialization happens ??\nA)only once (for every client request a new thread is created)\nonly one instance of the servlet serves any number of the client request ie, after serving one client request server does not die. It waits for other client requests ie what CGI (for every client request a new process is created) limitation is overcome with the servlet (internally servlet engine creates the thread).\nQ)How session concept works?\nA)whenever getSession() is called on HttpServletRequest object\nStep 1: request object is evaluated for incoming session ID.\nStep 2: if ID not available a brand new HttpSession object is created and its corresponding session ID is generated (ie of HashTable) session ID is stored into httpservlet response object and the reference of HttpSession object is returned to the servlet (doGet/doPost).\nStep 3: if ID available brand new session object is not created session ID is picked up from the request object search is made in the collection of sessions by using session ID as the key.\nOnce the search is successful session ID is stored into HttpServletResponse and the existing session object references are returned to the doGet() or doPost() of UserDefineservlet.\nNote:\n1)when control leaves from servlet code to client don't forget that session object is being held by servlet container ie, the servlet engine\n2)multithreading is left to servlet developers people for implementing ie., handle the multiple requests of client nothing to bother about multithread code\nInshort form:\nA servlet is created when the application starts (it is deployed on the servlet container) or when it is first accessed (depending on the load-on-startup setting)\nwhen the servlet is instantiated, the init() method of the servlet is called\nthen the servlet (its one and only instance) handles all requests (its service() method being called by multiple threads). That's why it is not advisable to have any synchronization in it, and you should avoid instance variables of the servlet\nwhen the application is undeployed (the servlet container stops), the destroy() method is called.\n    ",
        "votes": 33,
        "comentarios": [],
        "usuario": "Ajay Takur",
        "usuario_id": 1199
    },
    {
        "_id": 741,
        "fecha": { "$date" : "2010-06-24T00:27:46Z" },
        "decripcion": "\nSessions - what Chris Thompson said.\n\nInstantiation - a servlet is instantiated when the container receives the first request mapped to the servlet (unless the servlet is configured to load on startup with the <load-on-startup> element in web.xml). The same instance is used to serve subsequent requests.\n    ",
        "votes": 20,
        "comentarios": [
            {
                "decripcion": "Correct. Additional thought:  Each request gets a new (or recycled) thread to run on that single Servlet instance. Each Servlet has one instance, and possibly many threads (if many simultaneous requests).",
                "fecha": { "$date" : "2015-01-22T17:41:19Z" },
                "usuario": "Basil Bourque",
                "usuario_id": 1197
            }
        ],
        "usuario": "Lauri Lehtinen",
        "usuario_id": 1200
    },
    {
        "_id": 742,
        "fecha": { "$date" : "2017-04-26T08:07:57Z" },
        "decripcion": "\nThe Servlet Specification JSR-315 clearly defines the web container behavior in the service (and doGet, doPost, doPut etc.) methods (2.3.3.1 Multithreading Issues, Page 9):\n\n\n  A servlet container may send concurrent requests through the service\n  method of the servlet. To handle the requests, the Servlet Developer\n  must make adequate provisions for concurrent processing with multiple\n  threads in the service method.\n  \n  Although it is not recommended, an alternative for the Developer is to\n  implement the SingleThreadModel interface which requires the container\n  to guarantee that there is only one request thread at a time in the\n  service method. A servlet container may satisfy this requirement by\n  serializing requests on a servlet, or by maintaining a pool of servlet\n  instances. If the servlet is part of a Web application that has been\n  marked as distributable, the container may maintain a pool of servlet\n  instances in each JVM that the application is distributed across.\n  \n  For servlets not implementing the SingleThreadModel interface, if the\n  service method (or methods such as doGet or doPost which are\n  dispatched to the service method of the HttpServlet abstract class)\n  has been defined with the synchronized keyword, the servlet container\n  cannot use the instance pool approach, but must serialize requests\n  through it. It is strongly recommended that Developers not synchronize\n  the service method (or methods dispatched to it) in these\n  circumstances because of detrimental effects on performance\n\n    ",
        "votes": 13,
        "comentarios": [
            {
                "decripcion": "FYI, current Servlet spec (2015-01) is 3.1, defined by JSR 340.",
                "fecha": { "$date" : "2015-01-22T17:44:27Z" },
                "usuario": "Basil Bourque",
                "usuario_id": 1197
            },
            {
                "decripcion": "JSR 340: Java Servlet 3.1 Specification And JSR 369: JavaTM Servlet 4.0 Specification",
                "fecha": { "$date" : "2018-02-01T05:35:29Z" },
                "usuario": "Reva",
                "usuario_id": 1201
            },
            {
                "decripcion": "Very neat answer ! @tharindu_DG",
                "fecha": { "$date" : "2018-03-06T11:12:29Z" },
                "usuario": "Tom Taylor",
                "usuario_id": 1202
            }
        ],
        "usuario": "tharindu_DG",
        "usuario_id": 1203
    },
    {
        "_id": 743,
        "fecha": { "$date" : "2019-02-06T05:31:07Z" },
        "decripcion": "\nNo. Servlets are not Thread safe\n\nThis is allows accessing more than one threads at a time\n\nif u want to make it Servlet as Thread safe ., U can go for\n\nImplement SingleThreadInterface(i) \nwhich is a blank Interface there is no\n\nmethods\n\nor we can go for synchronize methods\n\nwe can make whole service method as synchronized by using synchronized\n\nkeyword in front of method\n\nExample::\n\npublic Synchronized class service(ServletRequest request,ServletResponse response)throws ServletException,IOException\n\n\nor we can the put block of the code in the Synchronized block\n\nExample::\n\nSynchronized(Object)\n\n{\n\n----Instructions-----\n\n}\n\n\nI feel that Synchronized block is better than making the whole method\n\nSynchronized\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Ved Prakash",
        "usuario_id": 1204
    },
    {
        "_id": 744,
        "fecha": { "$date" : "2019-02-06T06:43:53Z" },
        "decripcion": "\nAs is clear from above explanations, by implementing the SingleThreadModel, a servlet can be assured thread-safety by the servlet container. The container implementation can do this in 2 ways:\n\n1) Serializing requests (queuing) to a single instance - this is similar to a servlet NOT implementing SingleThreadModel BUT synchronizing the service/ doXXX methods; OR\n\n2) Creating a pool of instances - which's a better option and a trade-off between the boot-up/initialization effort/time of the servlet as against the restrictive parameters (memory/ CPU time) of the environment hosting the servlet.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Mahesh Balasubramanian",
        "usuario_id": 1205
    },
    {
        "_id": 745,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nAs per Prerak K's update comment (since deleted):\n\nI guess I have not presented the question properly.\nSituation is this: I want to load data into a global variable based on the value of a control. I don't want to change the value of a control from the child thread. I'm not going to do it ever from a child thread.\nSo only accessing the value so that corresponding data can be fetched from the database.\n\nThe solution you want then should look like:\nUserContrl1_LOadDataMethod()\n{\n    string name = \"\";\n    if(textbox1.InvokeRequired)\n    {\n        textbox1.Invoke(new MethodInvoker(delegate { name = textbox1.text; }));\n    }\n    if(name == \"MyName\")\n    {\n        // do whatever\n    }\n}\n\nDo your serious processing in the separate thread before you attempt to switch back to the control's thread. For example:\nUserContrl1_LOadDataMethod()\n{\n    if(textbox1.text==\"MyName\") //<<======Now it wont give exception**\n    {\n        //Load data correspondin to \"MyName\"\n        //Populate a globale variable List<string> which will be\n        //bound to grid at some later stage\n        if(InvokeRequired)\n        {\n            // after we've done all the processing, \n            this.Invoke(new MethodInvoker(delegate {\n                // load the control with the appropriate data\n            }));\n            return;\n        }\n    }\n}\n\n    ",
        "votes": 459,
        "comentarios": [
            {
                "decripcion": "It's been a while now since I've done C# programming, but based on the MSDN article and my patchy knowledge, it looks like it.",
                "fecha": { "$date" : "2016-12-13T21:17:17Z" },
                "usuario": "Jeff Hubbard",
                "usuario_id": 1206
            },
            {
                "decripcion": "The difference is, BeginInvoke() is asynchronous while Invoke() runs synchronously. stackoverflow.com/questions/229554/\u2026",
                "fecha": { "$date" : "2017-10-13T00:18:48Z" },
                "usuario": "frzsombor",
                "usuario_id": 1207
            }
        ],
        "usuario": "Jeff Hubbard",
        "usuario_id": 1206
    },
    {
        "_id": 746,
        "fecha": { "$date" : "2020-06-12T08:30:48Z" },
        "decripcion": "\nThreading Model in UI\n\nPlease read the Threading Model in UI applications (old VB link is here) in order to understand basic concepts. The link navigates to page that describes the WPF threading model. However, Windows Forms utilizes the same idea.\n\nThe UI Thread\n\n\nThere is only one thread (UI thread), that is allowed to access System.Windows.Forms.Control and its subclasses members.\nAttempt to access member of System.Windows.Forms.Control from different thread than UI thread will cause cross-thread exception.\nSince there is only one thread, all UI operations are queued as work items into that thread:\n\n\n\n\n\nIf there is no work for UI thread, then there are idle gaps that can be used by a not-UI related computing.\nIn order to use mentioned gaps use System.Windows.Forms.Control.Invoke or System.Windows.Forms.Control.BeginInvoke methods:\n\n\n\n\nBeginInvoke and Invoke methods\n\n\nThe computing overhead of method being invoked should be small as well as computing overhead of event handler methods because the UI thread is used there - the same that is responsible for handling user input. Regardless if this is System.Windows.Forms.Control.Invoke or System.Windows.Forms.Control.BeginInvoke.\nTo perform computing expensive operation always use separate thread. Since .NET 2.0 BackgroundWorker is dedicated to performing computing expensive operations in Windows Forms. However in new solutions you should use the async-await pattern as described here.\nUse System.Windows.Forms.Control.Invoke or System.Windows.Forms.Control.BeginInvoke methods only to update a user interface. If you use them for heavy computations, your application will block:\n\n\n\n\nInvoke\n\n\nSystem.Windows.Forms.Control.Invoke causes separate thread to wait till invoked method is completed:\n\n\n\n\nBeginInvoke\n\n\nSystem.Windows.Forms.Control.BeginInvoke doesn't cause the separate thread to wait till invoked method is completed:\n\n\n\n\nCode solution\n\nRead answers on question How to update the GUI from another thread in C#?.\nFor C# 5.0 and .NET 4.5 the recommended solution is here.\n    ",
        "votes": 194,
        "comentarios": [
            {
                "decripcion": "Here is the updated link for WPF threading model.",
                "fecha": { "$date" : "2019-03-04T20:01:42Z" },
                "usuario": "Adam Howell",
                "usuario_id": 1208
            }
        ],
        "usuario": "Ryszard D\u017cegan",
        "usuario_id": 1138
    },
    {
        "_id": 747,
        "fecha": { "$date" : "2020-04-23T08:08:41Z" },
        "decripcion": "\nYou only want to use Invoke or BeginInvoke for the bare minimum piece of work required to change the UI. Your \"heavy\" method should execute on another thread (e.g. via BackgroundWorker) but then using Control.Invoke/Control.BeginInvoke just to update the UI. That way your UI thread will be free to handle UI events etc.\n\nSee my threading article for a WinForms example - although the article was written before BackgroundWorker arrived on the scene, and I'm afraid I haven't updated it in that respect. BackgroundWorker merely simplifies the callback a bit.\n    ",
        "votes": 75,
        "comentarios": [
            {
                "decripcion": "here in this condition of mine . i m not even changing the UI. I m just accessig its current values from the child thread. any suggestion hw to implement",
                "fecha": { "$date" : "2008-09-26T21:26:20Z" },
                "usuario": "Prerak K",
                "usuario_id": 1209
            },
            {
                "decripcion": "You still need to marshal over to the UI thread even just to access properties. If your method can't continue until the value is accessed, you can use a delegate which returns the value. But yes, go via the UI thread.",
                "fecha": { "$date" : "2008-09-26T21:38:36Z" },
                "usuario": "Jon Skeet",
                "usuario_id": 1210
            },
            {
                "decripcion": "Hi Jon, i belive you are heading me to the right direction. Yes i need the value without it i cant proceed further. Please could you eloborate on that ' Using a delegate which return a value'. Thanks",
                "fecha": { "$date" : "2008-09-26T21:46:16Z" },
                "usuario": "Prerak K",
                "usuario_id": 1209
            },
            {
                "decripcion": "Use a delegate such as Func<string>:  string text = textbox1.Invoke((Func<string>) () => textbox1.Text);  (That's assuming you're using C# 3.0 - you could use an anonymous method otherwise.)",
                "fecha": { "$date" : "2008-09-26T21:49:57Z" },
                "usuario": "Jon Skeet",
                "usuario_id": 1210
            }
        ],
        "usuario": "Jon Skeet",
        "usuario_id": 1210
    },
    {
        "_id": 748,
        "fecha": { "$date" : "2017-10-17T11:55:28Z" },
        "decripcion": "\nI know its too late now. However even today if you are having trouble accessing cross thread controls? This is the shortest answer till date :P\n\nInvoke(new Action(() =>\n                {\n                    label1.Text = \"WooHoo!!!\";\n                }));\n\n\nThis is how i access any form control from a thread.\n    ",
        "votes": 56,
        "comentarios": [
            {
                "decripcion": "This gives me Invoke or BeginInvoke cannot be called on a control until the window handle has been created. I solved it here",
                "fecha": { "$date" : "2018-01-24T16:22:02Z" },
                "usuario": "rupweb",
                "usuario_id": 1211
            },
            {
                "decripcion": "How we can access \"label1.Text\" from another class to perform invoke.",
                "fecha": { "$date" : "2021-04-01T08:37:27Z" },
                "usuario": "Deniz",
                "usuario_id": 1212
            }
        ],
        "usuario": "Bravo",
        "usuario_id": 1213
    },
    {
        "_id": 749,
        "fecha": { "$date" : "2016-03-30T17:52:46Z" },
        "decripcion": "\nI have had this problem with the FileSystemWatcher and found that the following code solved the problem:\n\nfsw.SynchronizingObject = this\n\nThe control then uses the current form object to deal with the events, and will therefore be on the same thread.\n    ",
        "votes": 44,
        "comentarios": [
            {
                "decripcion": "This saved my bacon. In VB.NET I used .SynchronizingObject = Me",
                "fecha": { "$date" : "2016-06-23T02:40:12Z" },
                "usuario": "codingcoding",
                "usuario_id": 1214
            }
        ],
        "usuario": "Peter C",
        "usuario_id": 1215
    },
    {
        "_id": 750,
        "fecha": { "$date" : "2016-08-15T13:05:41Z" },
        "decripcion": "\nI find the check-and-invoke code which needs to be littered within all methods related to forms to be way too verbose and unneeded. Here's a simple extension method which lets you do away with it completely:\n\npublic static class Extensions\n{\n    public static void Invoke<TControlType>(this TControlType control, Action<TControlType> del) \n        where TControlType : Control\n        {\n            if (control.InvokeRequired)\n                control.Invoke(new Action(() => del(control)));\n            else\n                del(control);\n    }\n}\n\n\nAnd then you can simply do this:\n\ntextbox1.Invoke(t => t.Text = \"A\");\n\n\nNo more messing around - simple.\n    ",
        "votes": 21,
        "comentarios": [],
        "usuario": "Rob",
        "usuario_id": 1216
    },
    {
        "_id": 751,
        "fecha": { "$date" : "2009-12-11T00:43:07Z" },
        "decripcion": "\nControls in .NET are not generally thread safe.  That means you shouldn't access a control from a thread other than the one where it lives.  To get around this, you need to invoke the control, which is what your 2nd sample is attempting.  \n\nHowever, in your case all you've done is pass the long-running method back to the main thread.  Of course, that's not really what you want to do.  You need to rethink this a little so that all you're doing on the main thread is setting a quick property here and there.\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "Joel Coehoorn",
        "usuario_id": 1217
    },
    {
        "_id": 752,
        "fecha": { "$date" : "2009-04-27T05:18:06Z" },
        "decripcion": "\nThe cleanest (and proper) solution for UI cross-threading issues is to use SynchronizationContext, see Synchronizing calls to the UI in a multi-threaded application article, it explains it very nicely.\n    ",
        "votes": 15,
        "comentarios": [],
        "usuario": "Igor Brejc",
        "usuario_id": 1218
    },
    {
        "_id": 753,
        "fecha": { "$date" : "2017-02-04T16:28:58Z" },
        "decripcion": "\nA new look using Async/Await and callbacks.  You only need one line of code if you keep the extension method in your project.  \n\n/// <summary>\n/// A new way to use Tasks for Asynchronous calls\n/// </summary>\npublic class Example\n{\n    /// <summary>\n    /// No more delegates, background workers etc. just one line of code as shown below\n    /// Note it is dependent on the XTask class shown next.\n    /// </summary>\n    public async void ExampleMethod()\n    {\n        //Still on GUI/Original Thread here\n        //Do your updates before the next line of code\n        await XTask.RunAsync(() =>\n        {\n            //Running an asynchronous task here\n            //Cannot update GUI Thread here, but can do lots of work\n        });\n        //Can update GUI/Original thread on this line\n    }\n}\n\n/// <summary>\n/// A class containing extension methods for the Task class \n/// Put this file in folder named Extensions\n/// Use prefix of X for the class it Extends\n/// </summary>\npublic static class XTask\n{\n    /// <summary>\n    /// RunAsync is an extension method that encapsulates the Task.Run using a callback\n    /// </summary>\n    /// <param name=\"Code\">The caller is called back on the new Task (on a different thread)</param>\n    /// <returns></returns>\n    public async static Task RunAsync(Action Code)\n    {\n        await Task.Run(() =>\n        {\n            Code();\n        });\n        return;\n    }\n}\n\n\nYou can add other things to the Extension method such as wrapping it in a Try/Catch statement, allowing caller to tell it what type to return after completion, an exception callback to caller:\n\nAdding Try Catch, Auto Exception Logging and CallBack\n\n    /// <summary>\n    /// Run Async\n    /// </summary>\n    /// <typeparam name=\"T\">The type to return</typeparam>\n    /// <param name=\"Code\">The callback to the code</param>\n    /// <param name=\"Error\">The handled and logged exception if one occurs</param>\n    /// <returns>The type expected as a competed task</returns>\n\n    public async static Task<T> RunAsync<T>(Func<string,T> Code, Action<Exception> Error)\n    {\n       var done =  await Task<T>.Run(() =>\n        {\n            T result = default(T);\n            try\n            {\n               result = Code(\"Code Here\");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"Unhandled Exception: \" + ex.Message);\n                Console.WriteLine(ex.StackTrace);\n                Error(ex);\n            }\n            return result;\n\n        });\n        return done;\n    }\n    public async void HowToUse()\n    {\n       //We now inject the type we want the async routine to return!\n       var result =  await RunAsync<bool>((code) => {\n           //write code here, all exceptions are logged via the wrapped try catch.\n           //return what is needed\n           return someBoolValue;\n       }, \n       error => {\n\n          //exceptions are already handled but are sent back here for further processing\n       });\n        if (result)\n        {\n            //we can now process the result because the code above awaited for the completion before\n            //moving to this statement\n        }\n    }\n\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "JWP",
        "usuario_id": 1219
    },
    {
        "_id": 754,
        "fecha": { "$date" : "2017-09-03T20:25:21Z" },
        "decripcion": "\nThis is not the recommended way to solve this error but you can suppress it quickly, it will do the job . I prefer this for prototypes or demos . add \n\nCheckForIllegalCrossThreadCalls = false\n\n\nin Form1() constructor . \n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "\u00d6zg\u00fcr",
        "usuario_id": 1220
    },
    {
        "_id": 755,
        "fecha": { "$date" : "2016-05-06T16:49:44Z" },
        "decripcion": "\nFollow the simplest (in my opinion) way to modify objects from another thread:\n\nusing System.Threading.Tasks;\nusing System.Threading;\n\nnamespace TESTE\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        private void button1_Click(object sender, EventArgs e)\n        {\n            Action<string> DelegateTeste_ModifyText = THREAD_MOD;\n            Invoke(DelegateTeste_ModifyText, \"MODIFY BY THREAD\");\n        }\n\n        private void THREAD_MOD(string teste)\n        {\n            textBox1.Text = teste;\n        }\n    }\n}\n\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "Vanderley Maia",
        "usuario_id": 1221
    },
    {
        "_id": 756,
        "fecha": { "$date" : "2008-09-26T21:41:02Z" },
        "decripcion": "\nYou need to look at the Backgroundworker example:\nhttp://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx\nEspecially how it interacts with the UI layer.  Based on your posting, this seems to answer your issues.\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Pat",
        "usuario_id": 1222
    },
    {
        "_id": 757,
        "fecha": { "$date" : "2015-12-16T21:00:50Z" },
        "decripcion": "\nI found a need for this while programming an iOS-Phone monotouch app controller in a visual studio winforms prototype project outside of xamarin stuidio. Preferring to program in VS over xamarin studio as much as possible, I wanted the controller to be completely decoupled from the phone framework. This way implementing this for other frameworks like Android and Windows Phone would be much easier for future uses.\n\nI wanted a solution where the GUI could respond to events without the burden of dealing with the cross threading switching code behind every button click. Basically let the class controller handle that to keep the client code simple. You could possibly have many events on the GUI where as if you could handle it in one place in the class would be cleaner. I am not a multi theading expert, let me know if this is flawed.\n\npublic partial class Form1 : Form\n{\n    private ExampleController.MyController controller;\n\n    public Form1()\n    {          \n        InitializeComponent();\n        controller = new ExampleController.MyController((ISynchronizeInvoke) this);\n        controller.Finished += controller_Finished;\n    }\n\n    void controller_Finished(string returnValue)\n    {\n        label1.Text = returnValue; \n    }\n\n    private void button1_Click(object sender, EventArgs e)\n    {\n        controller.SubmitTask(\"Do It\");\n    }\n}\n\n\nThe GUI form is unaware the controller is running asynchronous tasks.\n\npublic delegate void FinishedTasksHandler(string returnValue);\n\npublic class MyController\n{\n    private ISynchronizeInvoke _syn; \n    public MyController(ISynchronizeInvoke syn) {  _syn = syn; } \n    public event FinishedTasksHandler Finished; \n\n    public void SubmitTask(string someValue)\n    {\n        System.Threading.ThreadPool.QueueUserWorkItem(state => submitTask(someValue));\n    }\n\n    private void submitTask(string someValue)\n    {\n        someValue = someValue + \" \" + DateTime.Now.ToString();\n        System.Threading.Thread.Sleep(5000);\n//Finished(someValue); This causes cross threading error if called like this.\n\n        if (Finished != null)\n        {\n            if (_syn.InvokeRequired)\n            {\n                _syn.Invoke(Finished, new object[] { someValue });\n            }\n            else\n            {\n                Finished(someValue);\n            }\n        }\n    }\n}\n\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "RandallTo",
        "usuario_id": 1223
    },
    {
        "_id": 758,
        "fecha": { "$date" : "2012-05-24T22:49:15Z" },
        "decripcion": "\nHere is an alternative way if the object you are working with doesn't have \n\n(InvokeRequired)\n\n\nThis is useful if you are working with the main form in a class other than the main form with an object that is in the main form, but doesn't have InvokeRequired\n\ndelegate void updateMainFormObject(FormObjectType objectWithoutInvoke, string text);\n\nprivate void updateFormObjectType(FormObjectType objectWithoutInvoke, string text)\n{\n    MainForm.Invoke(new updateMainFormObject(UpdateObject), objectWithoutInvoke, text);\n}\n\npublic void UpdateObject(ToolStripStatusLabel objectWithoutInvoke, string text)\n{\n    objectWithoutInvoke.Text = text;\n}\n\n\nIt works the same as above, but it is a different approach if you don't have an object with invokerequired, but do have access to the MainForm\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Ashitakalax",
        "usuario_id": 1224
    },
    {
        "_id": 759,
        "fecha": { "$date" : "2015-12-16T19:53:57Z" },
        "decripcion": "\nAlong the same lines as previous answers,\nbut a very short addition that Allows to use all Control properties without having cross thread invokation exception.\n\nHelper Method\n\n/// <summary>\n/// Helper method to determin if invoke required, if so will rerun method on correct thread.\n/// if not do nothing.\n/// </summary>\n/// <param name=\"c\">Control that might require invoking</param>\n/// <param name=\"a\">action to preform on control thread if so.</param>\n/// <returns>true if invoke required</returns>\npublic bool ControlInvokeRequired(Control c, Action a)\n{\n    if (c.InvokeRequired) c.Invoke(new MethodInvoker(delegate\n    {\n        a();\n    }));\n    else return false;\n\n    return true;\n}\n\n\nSample Usage\n\n// usage on textbox\npublic void UpdateTextBox1(String text)\n{\n    //Check if invoke requied if so return - as i will be recalled in correct thread\n    if (ControlInvokeRequired(textBox1, () => UpdateTextBox1(text))) return;\n    textBox1.Text = ellapsed;\n}\n\n//Or any control\npublic void UpdateControl(Color c, String s)\n{\n    //Check if invoke requied if so return - as i will be recalled in correct thread\n    if (ControlInvokeRequired(myControl, () => UpdateControl(c, s))) return;\n    myControl.Text = s;\n    myControl.BackColor = c;\n}\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Mike",
        "usuario_id": 1225
    },
    {
        "_id": 760,
        "fecha": { "$date" : "2017-11-02T22:20:46Z" },
        "decripcion": "\nthis.Invoke(new MethodInvoker(delegate\n            {\n                //your code here;\n            }));\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Hamid Jolany",
        "usuario_id": 1226
    },
    {
        "_id": 761,
        "fecha": { "$date" : "2018-11-22T03:07:55Z" },
        "decripcion": "\nFor example to get the text from a Control of the UI thread:\n\nPrivate Delegate Function GetControlTextInvoker(ByVal ctl As Control) As String\n\nPrivate Function GetControlText(ByVal ctl As Control) As String\n    Dim text As String\n\n    If ctl.InvokeRequired Then\n        text = CStr(ctl.Invoke(\n            New GetControlTextInvoker(AddressOf GetControlText), ctl))\n    Else\n        text = ctl.Text\n    End If\n\n    Return text\nEnd Function\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "UrsulRosu",
        "usuario_id": 1227
    },
    {
        "_id": 762,
        "fecha": { "$date" : "2017-10-01T08:56:13Z" },
        "decripcion": "\nSame question : how-to-update-the-gui-from-another-thread-in-c\n\nTwo Ways:\n\n\nReturn value in e.result and use it to set yout textbox value in backgroundWorker_RunWorkerCompleted event\nDeclare some variable to hold these kind of values in a separate class (which will work as data holder) . Create static instance of this class adn you can access it over any thread.\n\n\nExample:\n\npublic  class data_holder_for_controls\n{\n    //it will hold value for your label\n    public  string status = string.Empty;\n}\n\nclass Demo\n{\n    public static  data_holder_for_controls d1 = new data_holder_for_controls();\n    static void Main(string[] args)\n    {\n        ThreadStart ts = new ThreadStart(perform_logic);\n        Thread t1 = new Thread(ts);\n        t1.Start();\n        t1.Join();\n        //your_label.Text=d1.status; --- can access it from any thread \n    }\n\n    public static void perform_logic()\n    {\n        //put some code here in this function\n        for (int i = 0; i < 10; i++)\n        {\n            //statements here\n        }\n        //set result in status variable\n        d1.status = \"Task done\";\n    }\n}\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Saurabh",
        "usuario_id": 1228
    },
    {
        "_id": 763,
        "fecha": { "$date" : "2020-05-08T18:44:09Z" },
        "decripcion": "\nSimple and re-usable way to work around this problem.\n\nExtension Method\n\npublic static class FormExts\n{\n    public static void LoadOnUI(this Form frm, Action action)\n    {\n        if (frm.InvokeRequired) frm.Invoke(action);\n        else action.Invoke();\n    }\n}\n\n\nSample Usage\n\nprivate void OnAnyEvent(object sender, EventArgs args)\n{\n    this.LoadOnUI(() =>\n    {\n        label1.Text = \"\";\n        button1.Text = \"\";\n    });\n}\n\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "Can anyone argue against this approach? It seems insanely easy by comparison to the popular answers.",
                "fecha": { "$date" : "2020-10-03T20:52:05Z" },
                "usuario": "Programmer Paul",
                "usuario_id": 1229
            }
        ],
        "usuario": "Timothy Macharia",
        "usuario_id": 1230
    },
    {
        "_id": 764,
        "fecha": { "$date" : "2019-04-28T20:56:53Z" },
        "decripcion": "\nSimply use this:\n\nthis.Invoke((MethodInvoker)delegate\n            {\n                YourControl.Property= value; // runs thread safe\n            });\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Hasan Shouman",
        "usuario_id": 1231
    },
    {
        "_id": 765,
        "fecha": { "$date" : "2017-12-17T06:40:25Z" },
        "decripcion": "\nAction y; //declared inside class\n\nlabel1.Invoke(y=()=>label1.Text=\"text\");\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Antonio Leite",
        "usuario_id": 1143
    },
    {
        "_id": 766,
        "fecha": { "$date" : "2018-04-03T09:04:36Z" },
        "decripcion": "\nThere are two options for cross thread operations.\n\nControl.InvokeRequired Property \n\n\nand second one is to use \n\nSynchronizationContext Post Method\n\n\nControl.InvokeRequired is only useful when working controls inherited from Control class while SynchronizationContext can be used anywhere. Some useful information is as following links\n\nCross Thread Update UI | .Net \n\nCross Thread Update UI using SynchronizationContext | .Net\n    ",
        "votes": -3,
        "comentarios": [],
        "usuario": "Nasir Mahmood",
        "usuario_id": 1232
    },
    {
        "_id": 767,
        "fecha": { "$date" : "2020-11-09T14:25:00Z" },
        "decripcion": "\nIt is generally a bad pattern to kill a thread abruptly, in Python, and in any language. Think of the following cases:\n\nthe thread is holding a critical resource that must be closed properly\nthe thread has created several other threads that must be killed as well.\n\nThe nice way of handling this, if you can afford it (if you are managing your own threads), is to have an exit_request flag that each thread checks on a regular interval to see if it is time for it to exit.\nFor example:\nimport threading\n\nclass StoppableThread(threading.Thread):\n    \"\"\"Thread class with a stop() method. The thread itself has to check\n    regularly for the stopped() condition.\"\"\"\n\n    def __init__(self,  *args, **kwargs):\n        super(StoppableThread, self).__init__(*args, **kwargs)\n        self._stop_event = threading.Event()\n\n    def stop(self):\n        self._stop_event.set()\n\n    def stopped(self):\n        return self._stop_event.is_set()\n\nIn this code, you should call stop() on the thread when you want it to exit, and wait for the thread to exit properly using join(). The thread should check the stop flag at regular intervals.\nThere are cases, however, when you really need to kill a thread. An example is when you are wrapping an external library that is busy for long calls, and you want to interrupt it.\nThe following code allows (with some restrictions) to raise an Exception in a Python thread:\ndef _async_raise(tid, exctype):\n    '''Raises an exception in the threads with id tid'''\n    if not inspect.isclass(exctype):\n        raise TypeError(\"Only types can be raised (not instances)\")\n    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid),\n                                                     ctypes.py_object(exctype))\n    if res == 0:\n        raise ValueError(\"invalid thread id\")\n    elif res != 1:\n        # \"if it returns a number greater than one, you're in trouble,\n        # and you should call it again with exc=NULL to revert the effect\"\n        ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid), None)\n        raise SystemError(\"PyThreadState_SetAsyncExc failed\")\n\nclass ThreadWithExc(threading.Thread):\n    '''A thread class that supports raising an exception in the thread from\n       another thread.\n    '''\n    def _get_my_tid(self):\n        \"\"\"determines this (self's) thread id\n\n        CAREFUL: this function is executed in the context of the caller\n        thread, to get the identity of the thread represented by this\n        instance.\n        \"\"\"\n        if not self.isAlive():\n            raise threading.ThreadError(\"the thread is not active\")\n\n        # do we have it cached?\n        if hasattr(self, \"_thread_id\"):\n            return self._thread_id\n\n        # no, look for it in the _active dict\n        for tid, tobj in threading._active.items():\n            if tobj is self:\n                self._thread_id = tid\n                return tid\n\n        # TODO: in python 2.6, there's a simpler way to do: self.ident\n\n        raise AssertionError(\"could not determine the thread's id\")\n\n    def raiseExc(self, exctype):\n        \"\"\"Raises the given exception type in the context of this thread.\n\n        If the thread is busy in a system call (time.sleep(),\n        socket.accept(), ...), the exception is simply ignored.\n\n        If you are sure that your exception should terminate the thread,\n        one way to ensure that it works is:\n\n            t = ThreadWithExc( ... )\n            ...\n            t.raiseExc( SomeException )\n            while t.isAlive():\n                time.sleep( 0.1 )\n                t.raiseExc( SomeException )\n\n        If the exception is to be caught by the thread, you need a way to\n        check that your thread has caught it.\n\n        CAREFUL: this function is executed in the context of the\n        caller thread, to raise an exception in the context of the\n        thread represented by this instance.\n        \"\"\"\n        _async_raise( self._get_my_tid(), exctype )\n\n(Based on Killable Threads by Tomer Filiba. The quote about the return value of PyThreadState_SetAsyncExc appears to be from an old version of Python.)\nAs noted in the documentation, this is not a magic bullet because if the thread is busy outside the Python interpreter, it will not catch the interruption.\nA good usage pattern of this code is to have the thread catch a specific exception and perform the cleanup. That way, you can interrupt a task and still have proper cleanup.\n    ",
        "votes": 751,
        "comentarios": [
            {
                "decripcion": "@Bluebird75: Furthermore, I'm not sure I get the argument that threads should not be killed abruptly \"because the thread might be holding a critical resource that must be closed properly\": this is also true from a main program, and main programs can be killed abruptly by the user (Ctrl-C in Unix, for instance)\u2013in which case they try to handle this possibility as nicely as possible.  So, I fail to see what is special with threads, and why they should not receive the same treatment as main programs (namely that they can be killed abruptly). :)  Could you elaborate on this?",
                "fecha": { "$date" : "2011-07-14T16:53:10Z" },
                "usuario": "Eric O Lebigot",
                "usuario_id": 1234
            },
            {
                "decripcion": "@EOL: On the other hand, if all the resources that the thread is owning are local resources (open files, sockets), Linux is reasonably good at the process cleanup and this does not leak. I had cases though where I created a server using socket, and if I do a brutal interruption with Ctrl-C, I can non longer launch the program because it can not binds the socket. I need to wait 5 minutes. Proper solution was to catch Ctrl-C and do clean socket deconnection.",
                "fecha": { "$date" : "2011-08-02T09:45:03Z" },
                "usuario": "Philippe F",
                "usuario_id": 1235
            },
            {
                "decripcion": "@Bluebird75: btw. you can use SO_REUSEADDR socket option to avoid Address already in use error.",
                "fecha": { "$date" : "2011-09-11T09:09:55Z" },
                "usuario": "Messa",
                "usuario_id": 1236
            },
            {
                "decripcion": "Note about this answer: at least for me (py2.6), I had to pass None instead of 0 for the res != 1 case, and I had to call ctypes.c_long(tid) and pass that to any ctypes function rather than the tid directly.",
                "fecha": { "$date" : "2011-11-17T21:16:35Z" },
                "usuario": "Walt W",
                "usuario_id": 1237
            },
            {
                "decripcion": "Its worth mentioning that _stop is already occupied in the Python 3 threading library. As such, maybe use a different variable otherwise you will get an error.",
                "fecha": { "$date" : "2013-01-18T01:51:59Z" },
                "usuario": "diedthreetimes",
                "usuario_id": 1238
            }
        ],
        "usuario": "Philippe F",
        "usuario_id": 1235
    },
    {
        "_id": 768,
        "fecha": { "$date" : "2008-11-27T15:08:07Z" },
        "decripcion": "\nThere is no official API to do that, no.\n\nYou need to use platform API to kill the thread, e.g. pthread_kill, or TerminateThread. You can access such API e.g. through pythonwin, or through ctypes.\n\nNotice that this is inherently unsafe. It will likely lead to uncollectable garbage (from local variables of the stack frames that become garbage), and may lead to deadlocks, if the thread being killed has the GIL at the point when it is killed.\n    ",
        "votes": 128,
        "comentarios": [
            {
                "decripcion": "It will lead to deadlocks if the thread in question holds the GIL.",
                "fecha": { "$date" : "2015-09-20T15:09:47Z" },
                "usuario": "Matthias Urlichs",
                "usuario_id": 1239
            }
        ],
        "usuario": "Martin v. L\u00f6wis",
        "usuario_id": 1240
    },
    {
        "_id": 769,
        "fecha": { "$date" : "2020-08-08T00:19:54Z" },
        "decripcion": "\nA multiprocessing.Process can p.terminate()\nIn the cases where I want to kill a thread, but do not want to use flags/locks/signals/semaphores/events/whatever, I promote the threads to full blown processes. For code that makes use of just a few threads the overhead is not that bad.\nE.g. this comes in handy to easily terminate helper \"threads\" which execute blocking I/O\nThe conversion is trivial: In related code replace all threading.Thread with multiprocessing.Process and all queue.Queue with multiprocessing.Queue and add the required calls of p.terminate() to your parent process which wants to kill its child p\nSee the Python documentation for multiprocessing.\nExample:\nimport multiprocessing\nproc = multiprocessing.Process(target=your_proc_function, args=())\nproc.start()\n# Terminate the process\nproc.terminate()  # sends a SIGTERM\n\n    ",
        "votes": 128,
        "comentarios": [
            {
                "decripcion": "Thanks. I replaced queue.Queue with multiprocessing.JoinableQueue and followed this answer: stackoverflow.com/a/11984760/911207",
                "fecha": { "$date" : "2014-08-15T17:30:31Z" },
                "usuario": "David Braun",
                "usuario_id": 1241
            },
            {
                "decripcion": "multiprocessing is nice, but be aware that arguments is pickled to the new process. So if one of the arguments is something not-pickable (like a logging.log) it might not be a good idea to use multiprocessing.",
                "fecha": { "$date" : "2018-04-09T09:10:39Z" },
                "usuario": "Lyager",
                "usuario_id": 1242
            },
            {
                "decripcion": "multiprocessing arguments are pickled to the new process on Windows, but Linux uses forking to copy them (Python 3.7, unsure what other versions). So you'll end up with code that works on Linux but raises pickle errors on Windows.",
                "fecha": { "$date" : "2019-04-18T22:21:41Z" },
                "usuario": "nyanpasu64",
                "usuario_id": 1243
            },
            {
                "decripcion": "multiprocessing with logging is tricky business. Need to use QueueHandler (see this tutorial). I learned it the hard way.",
                "fecha": { "$date" : "2019-12-09T00:10:33Z" },
                "usuario": "Fanchen Bao",
                "usuario_id": 1244
            }
        ],
        "usuario": "cfi",
        "usuario_id": 1245
    },
    {
        "_id": 770,
        "fecha": { "$date" : "2009-11-18T15:54:53Z" },
        "decripcion": "\nIf you are trying to terminate the whole program you can set the thread as a \"daemon\". see\nThread.daemon\n    ",
        "votes": 90,
        "comentarios": [
            {
                "decripcion": "This doesn't make any sense. The documentation clearly states, \"this must be set before start() is called, otherwise RuntimeError is raised.\" Thus, if I want to kill a thread that was not originally a daemon, how can I use this?",
                "fecha": { "$date" : "2011-11-29T19:21:14Z" },
                "usuario": "Raffi Khatchadourian",
                "usuario_id": 1246
            },
            {
                "decripcion": "Raffi I think he's suggesting you would set it in advance, knowing that when your main thread exits you also want the daemon threads to exit.",
                "fecha": { "$date" : "2014-07-31T07:06:04Z" },
                "usuario": "fantabolous",
                "usuario_id": 308
            },
            {
                "decripcion": "Isn't setting a thread as a daemon something you would do in case you want the thread to keep running even if your main program shuts down?",
                "fecha": { "$date" : "2020-02-19T09:41:35Z" },
                "usuario": "Michele Piccolini",
                "usuario_id": 1247
            },
            {
                "decripcion": "@MichelePiccolini: It\u2019s the opposite: daemon threads don\u2019t keep the process running when the others are gone.",
                "fecha": { "$date" : "2020-05-02T01:57:14Z" },
                "usuario": "Davis Herring",
                "usuario_id": 1248
            },
            {
                "decripcion": "This was the best answer for me, I just wanted to cleanup threads when the parent process shuts down.  Thanks!",
                "fecha": { "$date" : "2021-03-20T13:49:27Z" },
                "usuario": "Lin Meyer",
                "usuario_id": 1249
            }
        ],
        "usuario": "schettino72",
        "usuario_id": 1250
    },
    {
        "_id": 771,
        "fecha": { "$date" : "2014-12-03T00:07:06Z" },
        "decripcion": "\nAs others have mentioned, the norm is to set a stop flag. For something lightweight (no subclassing of Thread, no global variable), a lambda callback is an option. (Note the parentheses in if stop().)\n\nimport threading\nimport time\n\ndef do_work(id, stop):\n    print(\"I am thread\", id)\n    while True:\n        print(\"I am thread {} doing something\".format(id))\n        if stop():\n            print(\"  Exiting loop.\")\n            break\n    print(\"Thread {}, signing off\".format(id))\n\n\ndef main():\n    stop_threads = False\n    workers = []\n    for id in range(0,3):\n        tmp = threading.Thread(target=do_work, args=(id, lambda: stop_threads))\n        workers.append(tmp)\n        tmp.start()\n    time.sleep(3)\n    print('main: done sleeping; time to stop the threads.')\n    stop_threads = True\n    for worker in workers:\n        worker.join()\n    print('Finis.')\n\nif __name__ == '__main__':\n    main()\n\n\nReplacing print() with a pr() function that always flushes (sys.stdout.flush()) may improve the precision of the shell output.\n\n(Only tested on Windows/Eclipse/Python3.3)\n    ",
        "votes": 62,
        "comentarios": [
            {
                "decripcion": "Verified on Linux / Python 2.7, works like a charm.  This should be the official answer, it is much simpler.",
                "fecha": { "$date" : "2017-11-20T04:15:07Z" },
                "usuario": "Paul Kenjora",
                "usuario_id": 1251
            },
            {
                "decripcion": "Verified on Linux Ubuntu Server 17.10/Python 3.6.3 and works it.",
                "fecha": { "$date" : "2017-12-06T19:40:31Z" },
                "usuario": "Marcos",
                "usuario_id": 1252
            },
            {
                "decripcion": "What is pr() function?",
                "fecha": { "$date" : "2020-05-23T12:51:59Z" },
                "usuario": "alper",
                "usuario_id": 1253
            },
            {
                "decripcion": "@alper You create a new function that acts just like the print function but flushes the output and call it pr.",
                "fecha": { "$date" : "2021-01-03T00:07:44Z" },
                "usuario": "Pyzard",
                "usuario_id": 1254
            }
        ],
        "usuario": "Jon Coombs",
        "usuario_id": 1255
    },
    {
        "_id": 772,
        "fecha": { "$date" : "2016-07-28T08:56:28Z" },
        "decripcion": "\nThis is based on thread2 -- killable threads (Python recipe)\n\nYou need to call PyThreadState_SetasyncExc(), which is only available through ctypes.\n\nThis has only been tested on Python 2.7.3, but it is likely to work with other recent 2.x releases.\n\nimport ctypes\n\ndef terminate_thread(thread):\n    \"\"\"Terminates a python thread from another thread.\n\n    :param thread: a threading.Thread instance\n    \"\"\"\n    if not thread.isAlive():\n        return\n\n    exc = ctypes.py_object(SystemExit)\n    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(\n        ctypes.c_long(thread.ident), exc)\n    if res == 0:\n        raise ValueError(\"nonexistent thread id\")\n    elif res > 1:\n        # \"\"\"if it returns a number greater than one, you're in trouble,\n        # and you should call it again with exc=NULL to revert the effect\"\"\"\n        ctypes.pythonapi.PyThreadState_SetAsyncExc(thread.ident, None)\n        raise SystemError(\"PyThreadState_SetAsyncExc failed\")\n\n    ",
        "votes": 37,
        "comentarios": [
            {
                "decripcion": "I'm using something like this to give my threads a KeyboardInterrupt so they've a chance to clean up. If they're STILL hanging after that, then SystemExit is appropriate, or just kill the process from a terminal.",
                "fecha": { "$date" : "2013-11-21T01:01:31Z" },
                "usuario": "drevicko",
                "usuario_id": 293
            },
            {
                "decripcion": "This works if the thread is currently executing. It does not work if the thread is in a syscall; the exception will be silently ignored.",
                "fecha": { "$date" : "2014-06-22T16:08:59Z" },
                "usuario": "Matthias Urlichs",
                "usuario_id": 1239
            },
            {
                "decripcion": "@JohanDahlin You could wait a bit (which, if you want to retry, you need to do anyway) and then do the isAlive() test. In any case, while this would work, I also wouldn't guarantee that it doesn't leave dangling references around. While it's possible in theory to make thread killing safe in CPython, by judicious use of pthread_cleanup_push()/_pop(), it'd be a lot of work to implement correctly and it would slow down the interpreter noticably.",
                "fecha": { "$date" : "2014-07-11T01:00:21Z" },
                "usuario": "Matthias Urlichs",
                "usuario_id": 1239
            }
        ],
        "usuario": "Johan Dahlin",
        "usuario_id": 1256
    },
    {
        "_id": 773,
        "fecha": { "$date" : "2017-04-24T02:16:31Z" },
        "decripcion": "\nIn Python, you simply cannot kill a Thread directly.\n\nIf you do NOT really need to have a Thread (!), what you can do, instead of using the threading package , is to use the \nmultiprocessing package . Here, to kill a process, you can simply call the method:\n\nyourProcess.terminate()  # kill the process!\n\n\nPython will kill your process (on Unix through the SIGTERM signal, while on Windows through the TerminateProcess() call). Pay attention to use it while using a Queue or a Pipe! (it may corrupt the data in the Queue/Pipe)\n\nNote that the multiprocessing.Event and the multiprocessing.Semaphore work exactly in the same way of the threading.Event and the threading.Semaphore respectively. In fact, the first ones are clones of the latters.\n\nIf you REALLY need to use a Thread, there is no way to kill it directly. What you can do, however, is to use a \"daemon thread\". In fact, in Python, a Thread can be flagged as daemon:\n\nyourThread.daemon = True  # set the Thread as a \"daemon thread\"\n\n\nThe main program will exit when no alive non-daemon threads are left. In other words, when your main thread (which is, of course, a non-daemon thread) will finish its operations, the program will exit even if there are still some daemon threads working.\n\nNote that it is necessary to set a Thread as daemon before the start() method is called!\n\nOf course you can, and should, use daemon even with multiprocessing. Here, when the main process exits, it attempts to terminate all of its daemonic child processes.\n\nFinally, please, note that sys.exit() and os.kill() are not choices.\n    ",
        "votes": 36,
        "comentarios": [
            {
                "decripcion": "I don't know why people don't vote this up. What's wrong with this answer? This one works for me though.",
                "fecha": { "$date" : "2020-09-10T12:51:50Z" },
                "usuario": "fsevenm",
                "usuario_id": 1257
            },
            {
                "decripcion": "@fsevenm: Processes are the same as threads. They run in separate memory-spaces, so there's no easy sharing of global variables. and passing arguments involves pickling them and unpickling them on the other side. That plus the overhead of starting up and running separate processes involves a lot more other overhead that simply switching threads does. It's apple vs oranges in many respects, so that is probably why \u2014 to answer your question.",
                "fecha": { "$date" : "2020-11-28T23:36:57Z" },
                "usuario": "martineau",
                "usuario_id": 82
            },
            {
                "decripcion": "@martineau I never said they were the same things. I actually started with a \"If you do NOT really need to have a Thread\", because that's not always the case, and then continue with a \"If you REALLY need to use a Thread\"...",
                "fecha": { "$date" : "2021-05-08T12:01:48Z" },
                "usuario": "Paolo Rovelli",
                "usuario_id": 1258
            },
            {
                "decripcion": "@PaoloRovelli: In the first part of my comment, I meant to write \"Processes aren't the same as threads.\"",
                "fecha": { "$date" : "2021-05-08T15:18:14Z" },
                "usuario": "martineau",
                "usuario_id": 82
            }
        ],
        "usuario": "Paolo Rovelli",
        "usuario_id": 1258
    },
    {
        "_id": 774,
        "fecha": { "$date" : "2008-11-27T14:58:49Z" },
        "decripcion": "\nYou should never forcibly kill a thread without cooperating with it.\n\nKilling a thread removes any guarantees that try/finally blocks set up so you might leave locks locked, files open, etc.\n\nThe only time you can argue that forcibly killing threads is a good idea is to kill a program fast, but never single threads.\n    ",
        "votes": 33,
        "comentarios": [
            {
                "decripcion": "Why is it so hard to just tell a thread, please kill yourself when you finish your current loop... I don't get it.",
                "fecha": { "$date" : "2016-04-08T14:37:10Z" },
                "usuario": "Mehdi",
                "usuario_id": 1259
            },
            {
                "decripcion": "There is no mechanism built into the cpu to identify a \"loop\" as such, the best you can hope for is to use some kind of signal that the code that is currently inside the loop will check once it exits. The correct way to handle thread synchronization is by cooperative means, the suspension, resuming, and killing of threads is functions that are meant for debuggers and the operating system, not application code.",
                "fecha": { "$date" : "2016-04-08T18:39:51Z" },
                "usuario": "Lasse V. Karlsen",
                "usuario_id": 1260
            },
            {
                "decripcion": "@Mehdi: if I (personally) am writing the code in the thread, yes, I agree with you.  But there are cases where I'm running third party libraries, and I don't have access to that code's execution loop.  That is one use case for the requested feature.",
                "fecha": { "$date" : "2017-10-13T14:16:29Z" },
                "usuario": "Dan H",
                "usuario_id": 1261
            },
            {
                "decripcion": "@DanH It is even worst with third party code as you have no idea what damage it can cause. If your third party library is not robust enough that it require to be killed, then you should do one of these: (1) ask the author to fix the problem, (2) use something else. If you really have no choice, then putting that code in a distinct process should be safer as some resources are shared only within a single process.",
                "fecha": { "$date" : "2018-12-24T19:47:31Z" },
                "usuario": "Phil1970",
                "usuario_id": 1160
            }
        ],
        "usuario": "Lasse V. Karlsen",
        "usuario_id": 1260
    },
    {
        "_id": 775,
        "fecha": { "$date" : "2018-04-17T12:05:19Z" },
        "decripcion": "\nIf you are explicitly calling time.sleep() as part of your thread (say polling some external service), an improvement upon Phillipe's method is to use the timeout in the event's wait() method wherever you sleep()\n\nFor example:\n\nimport threading\n\nclass KillableThread(threading.Thread):\n    def __init__(self, sleep_interval=1):\n        super().__init__()\n        self._kill = threading.Event()\n        self._interval = sleep_interval\n\n    def run(self):\n        while True:\n            print(\"Do Something\")\n\n            # If no kill signal is set, sleep for the interval,\n            # If kill signal comes in while sleeping, immediately\n            #  wake up and handle\n            is_killed = self._kill.wait(self._interval)\n            if is_killed:\n                break\n\n        print(\"Killing Thread\")\n\n    def kill(self):\n        self._kill.set()\n\n\nThen to run it\n\nt = KillableThread(sleep_interval=5)\nt.start()\n# Every 5 seconds it prints:\n#: Do Something\nt.kill()\n#: Killing Thread\n\n\nThe advantage of using wait() instead of sleep()ing and regularly checking the event is that you can program in longer intervals of sleep, the thread is stopped almost immediately (when you would otherwise be sleep()ing) and in my opinion, the code for handling exit is significantly simpler.\n    ",
        "votes": 20,
        "comentarios": [
            {
                "decripcion": "why was this post downvoted? What's wrong w/ this post? It look exactly like what I need....",
                "fecha": { "$date" : "2018-08-29T17:57:05Z" },
                "usuario": "JDOaktown",
                "usuario_id": 1262
            },
            {
                "decripcion": "While this post was not what I needed (I need to safely interrupt the parent from the child), I was definitely using time.sleep in other parts of my code and making the polling interval small so my script would react faster, however this solution has all the benefits of making a small polling interval with none of the drawbacks (wasted computation). +1 Thanks a lot.",
                "fecha": { "$date" : "2020-12-25T12:53:36Z" },
                "usuario": "A Kareem",
                "usuario_id": 1263
            }
        ],
        "usuario": "SCB",
        "usuario_id": 251
    },
    {
        "_id": 776,
        "fecha": { "$date" : "2015-01-14T01:40:37Z" },
        "decripcion": "\nYou can kill a thread by installing trace into the thread that will exit the thread.   See attached link for one possible implementation.\n\nKill a thread in Python \n    ",
        "votes": 16,
        "comentarios": [
            {
                "decripcion": "One of the few answers here that actually WORKS",
                "fecha": { "$date" : "2013-07-04T01:53:22Z" },
                "usuario": "Ponkadoodle",
                "usuario_id": 1264
            },
            {
                "decripcion": "Two problems with this solution: (a) installing a tracer with sys.settrace() will make your thread run slower. As much as 10 times slower if it's compute bound. (b) won't affect your thread while it's in a system call.",
                "fecha": { "$date" : "2014-06-22T16:22:40Z" },
                "usuario": "Matthias Urlichs",
                "usuario_id": 1239
            },
            {
                "decripcion": "Another problem with the linked recipe is that it overrides the start() method, whereas the current documentation explicitly states \"In other words, only override the __init__() and run() methods of this class\" (when defining a subclass).",
                "fecha": { "$date" : "2020-11-28T23:44:48Z" },
                "usuario": "martineau",
                "usuario_id": 82
            }
        ],
        "usuario": "Kozyarchuk",
        "usuario_id": 1265
    },
    {
        "_id": 777,
        "fecha": { "$date" : "2008-11-27T15:12:07Z" },
        "decripcion": "\nIt is better if you don't kill a thread.\nA way could be to introduce a \"try\" block into the thread's cycle and to throw an exception when you want to stop the thread (for example a break/return/... that stops your for/while/...). \nI've used this on my app and it works...\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "Giancarlo",
        "usuario_id": 1266
    },
    {
        "_id": 778,
        "fecha": { "$date" : "2015-10-13T15:37:29Z" },
        "decripcion": "\nIt is definitely possible to implement a Thread.stop method as shown in the following example code:\n\nimport sys\nimport threading\nimport time\n\n\nclass StopThread(StopIteration):\n    pass\n\nthreading.SystemExit = SystemExit, StopThread\n\n\nclass Thread2(threading.Thread):\n\n    def stop(self):\n        self.__stop = True\n\n    def _bootstrap(self):\n        if threading._trace_hook is not None:\n            raise ValueError('Cannot run thread with tracing!')\n        self.__stop = False\n        sys.settrace(self.__trace)\n        super()._bootstrap()\n\n    def __trace(self, frame, event, arg):\n        if self.__stop:\n            raise StopThread()\n        return self.__trace\n\n\nclass Thread3(threading.Thread):\n\n    def _bootstrap(self, stop_thread=False):\n        def stop():\n            nonlocal stop_thread\n            stop_thread = True\n        self.stop = stop\n\n        def tracer(*_):\n            if stop_thread:\n                raise StopThread()\n            return tracer\n        sys.settrace(tracer)\n        super()._bootstrap()\n\n###############################################################################\n\n\ndef main():\n    test1 = Thread2(target=printer)\n    test1.start()\n    time.sleep(1)\n    test1.stop()\n    test1.join()\n    test2 = Thread2(target=speed_test)\n    test2.start()\n    time.sleep(1)\n    test2.stop()\n    test2.join()\n    test3 = Thread3(target=speed_test)\n    test3.start()\n    time.sleep(1)\n    test3.stop()\n    test3.join()\n\n\ndef printer():\n    while True:\n        print(time.time() % 1)\n        time.sleep(0.1)\n\n\ndef speed_test(count=0):\n    try:\n        while True:\n            count += 1\n    except StopThread:\n        print('Count =', count)\n\nif __name__ == '__main__':\n    main()\n\n\nThe Thread3 class appears to run code approximately 33% faster than the Thread2 class.\n    ",
        "votes": 10,
        "comentarios": [
            {
                "decripcion": "This is a clever way to inject checks for the self.__stop being set into the thread. Note that like most of the other solutions here, it won't actually interrupt a blocking call, since the trace function only gets called when a new local scope is entered. Also worth noting is that sys.settrace really meant for implementing debuggers, profiles, etc. and as such is considered an implementation detail of CPython, and is not guaranteed to exist in other Python implementations.",
                "fecha": { "$date" : "2014-09-04T21:18:40Z" },
                "usuario": "dano",
                "usuario_id": 1267
            },
            {
                "decripcion": "@dano: One of the biggest problems with the Thread2 class is that it runs code approximately ten times slower. Some people might still find this acceptable.",
                "fecha": { "$date" : "2014-09-05T14:20:35Z" },
                "usuario": "Noctis Skytower",
                "usuario_id": 1268
            },
            {
                "decripcion": "+1 on this slows down the code execution considerably.. I would suggest that the author of this solution include this information in the answer.",
                "fecha": { "$date" : "2018-09-06T05:47:26Z" },
                "usuario": "Vishal",
                "usuario_id": 1269
            }
        ],
        "usuario": "Noctis Skytower",
        "usuario_id": 1268
    },
    {
        "_id": 779,
        "fecha": { "$date" : "2018-05-22T18:37:59Z" },
        "decripcion": "\nI'm way late to this game, but I've been wrestling with a similar question and the following appears to both resolve the issue perfectly for me AND lets me do some basic thread state checking and cleanup when the daemonized sub-thread exits:\n\nimport threading\nimport time\nimport atexit\n\ndef do_work():\n\n  i = 0\n  @atexit.register\n  def goodbye():\n    print (\"'CLEANLY' kill sub-thread with value: %s [THREAD: %s]\" %\n           (i, threading.currentThread().ident))\n\n  while True:\n    print i\n    i += 1\n    time.sleep(1)\n\nt = threading.Thread(target=do_work)\nt.daemon = True\nt.start()\n\ndef after_timeout():\n  print \"KILL MAIN THREAD: %s\" % threading.currentThread().ident\n  raise SystemExit\n\nthreading.Timer(2, after_timeout).start()\n\n\nYields:\n\n0\n1\nKILL MAIN THREAD: 140013208254208\n'CLEANLY' kill sub-thread with value: 2 [THREAD: 140013674317568]\n\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "Why would raising SystemExit on the after_timeout thread do anything to the main thread (which is simply waiting on the former to exit in this example)?",
                "fecha": { "$date" : "2020-03-02T17:08:01Z" },
                "usuario": "Davis Herring",
                "usuario_id": 1248
            },
            {
                "decripcion": "@DavisHerring I'm not sure what you are getting at.  SystemExit kills the main thread, why do you think it WOULDNT do anything on the main thread?  Without that call, the program will just continue to wait on the child thread.  You could also ctrl+c or use any other means to kill the main thread but this is an example.",
                "fecha": { "$date" : "2020-05-01T16:51:30Z" },
                "usuario": "slumtrimpet",
                "usuario_id": 1270
            },
            {
                "decripcion": "@slumtrimpet: SystemExit has only two special properties: it doesn\u2019t produce a traceback (when any thread exits by throwing one), and if the main thread exits by throwing one it sets the exit status (while nonetheless waiting for other non-daemon threads to exit).",
                "fecha": { "$date" : "2020-05-01T18:17:52Z" },
                "usuario": "Davis Herring",
                "usuario_id": 1248
            },
            {
                "decripcion": "-1 Main thread continued work and was not interrupted by the SystemExit raised from the child thread. Had to terminate the script from the terminal with kill -9",
                "fecha": { "$date" : "2020-12-25T12:39:44Z" },
                "usuario": "A Kareem",
                "usuario_id": 1263
            }
        ],
        "usuario": "slumtrimpet",
        "usuario_id": 1270
    },
    {
        "_id": 780,
        "fecha": { "$date" : "2018-03-14T21:59:07Z" },
        "decripcion": "\nFollowing workaround can be used to kill a thread:\n\nkill_threads = False\n\ndef doSomething():\n    global kill_threads\n    while True:\n        if kill_threads:\n            thread.exit()\n        ......\n        ......\n\nthread.start_new_thread(doSomething, ())\n\n\nThis can be used even for terminating threads, whose code is written in another module, from main thread. We can declare a global variable in that module and use it to terminate thread/s spawned in that module.\n\nI usually use this to terminate all the threads at the program exit. This might not be the perfect way to terminate thread/s but could help.\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "Amit Chahar",
        "usuario_id": 1271
    },
    {
        "_id": 781,
        "fecha": { "$date" : "2017-04-24T02:16:42Z" },
        "decripcion": "\nfrom ctypes import *\npthread = cdll.LoadLibrary(\"libpthread-2.15.so\")\npthread.pthread_cancel(c_ulong(t.ident))\n\n\nt is your Thread object.\n\nRead the python source (Modules/threadmodule.c and Python/thread_pthread.h) you can see the Thread.ident is an pthread_t type, so you can do anything pthread can do in python use libpthread.\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "You don't; not on Windows and not on Linux either. Reason: The thread in question might hold the GIL while you're doing this (Python releases the GIL when you call into C). If it does, your program will instantly deadlock. Even if it doesn't, finally: blocks will not be executed etc., so this is a very unsafe idea.",
                "fecha": { "$date" : "2014-06-22T16:00:38Z" },
                "usuario": "Matthias Urlichs",
                "usuario_id": 1239
            }
        ],
        "usuario": "snyh",
        "usuario_id": 1272
    },
    {
        "_id": 782,
        "fecha": { "$date" : "2017-05-23T12:34:41Z" },
        "decripcion": "\nOne thing I want to add is that if you read official documentation in threading lib Python, it's recommended to avoid use of \"demonic\" threads, when you don't want threads end abruptly, with the flag that Paolo Rovelli mentioned.\n\nFrom official documentation:\n\n\n  Daemon threads are abruptly stopped at shutdown. Their resources (such as open files, database transactions, etc.) may not be released properly. If you want your threads to stop gracefully, make them non-daemonic and use a suitable signaling mechanism such as an Event.\n\n\nI think that creating daemonic threads depends of your application, but in general (and in my opinion) it's better to avoid killing them or making them daemonic. In multiprocessing you can use is_alive() to check process status  and \"terminate\" for finish them (Also you avoid GIL problems). But you can find more problems, sometimes, when you execute your code in Windows.\n\nAnd always remember that if you have \"live threads\", the Python interpreter will be running for wait them. (Because of this daemonic can help you if don't matter abruptly ends).\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "@Tshepang It means that if there are any running non-daemonic threads in your application, the Python interpreter will continue running until all non-daemon threads are done. If you don't care if the thread(s) end when the program terminates, then making them daemon can be of use.",
                "fecha": { "$date" : "2016-05-06T16:17:03Z" },
                "usuario": "Tom Myddeltyn",
                "usuario_id": 1273
            }
        ],
        "usuario": "Chema",
        "usuario_id": 1274
    },
    {
        "_id": 783,
        "fecha": { "$date" : "2018-07-23T23:53:12Z" },
        "decripcion": "\nThere is a library built for this purpose, stopit. Although some of the same cautions listed herein still apply, at least this library presents a regular, repeatable technique for achieving the stated goal.\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Jason R. Coombs",
        "usuario_id": 1275
    },
    {
        "_id": 784,
        "fecha": { "$date" : "2021-01-01T22:23:08Z" },
        "decripcion": "\nHere's yet another way to do it, but with extremely clean and simple code, that works in Python 3.7 in 2021:\nimport ctypes \n\ndef kill_thread(thread):\n    \"\"\"\n    thread: a threading.Thread object\n    \"\"\"\n    thread_id = thread.ident\n    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(thread_id, ctypes.py_object(SystemExit))\n    if res > 1:\n        ctypes.pythonapi.PyThreadState_SetAsyncExc(thread_id, 0)\n        print('Exception raise failure')\n\nAdapted from here: https://www.geeksforgeeks.org/python-different-ways-to-kill-a-thread/\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "If you're using Python 3.7 you must be a time traveler from 2018. If you refer to 2021, provide a test with Python 3.9. PyThreadState_SetAsyncExc method just does a \"schedule\" for an thread exit. It does not kill a thread especially if it's executing external C-libraries. Try to kill a sleep(100) with your method. It will be \"killed\" after 100 seconds. It's just as effective as the while flag: -> flag = False method.",
                "fecha": { "$date" : "2021-06-21T12:42:56Z" },
                "usuario": "sausix",
                "usuario_id": 1276
            }
        ],
        "usuario": "serg06",
        "usuario_id": 1277
    },
    {
        "_id": 785,
        "fecha": { "$date" : "2020-12-11T23:42:29Z" },
        "decripcion": "\nJust to build up on @SCB's idea (which was exactly what I needed) to create a KillableThread  subclass with a customized function:\nfrom threading import Thread, Event\n\nclass KillableThread(Thread):\n    def __init__(self, sleep_interval=1, target=None, name=None, args=(), kwargs={}):\n        super().__init__(None, target, name, args, kwargs)\n        self._kill = Event()\n        self._interval = sleep_interval\n        print(self._target)\n\n    def run(self):\n        while True:\n            # Call custom function with arguments\n            self._target(*self._args)\n\n            # If no kill signal is set, sleep for the interval,\n            # If kill signal comes in while sleeping, immediately\n            #  wake up and handle\n            is_killed = self._kill.wait(self._interval)\n            if is_killed:\n                break\n\n        print(\"Killing Thread\")\n\n    def kill(self):\n        self._kill.set()\n\nif __name__ == '__main__':\n\n    def print_msg(msg):\n        print(msg)\n\n    t = KillableThread(10, print_msg, args=(\"hello world\"))\n    t.start()\n    time.sleep(6)\n    print(\"About to kill thread\")\n    t.kill()\n\nNaturally, like with @SBC, the thread doesn't wait to run a new loop to stop. In this example, you would see the \"Killing Thread\" message printed right after the \"About to kill thread\" instead of waiting for 4 more seconds for the thread to complete (since we have slept for 6 seconds already).\nSecond argument in KillableThread constructor is your custom function (print_msg here). Args argument are the arguments that will be used when calling the function ((\"hello world\")) here.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Tim Meehan",
        "usuario_id": 1278
    },
    {
        "_id": 786,
        "fecha": { "$date" : "2017-11-24T07:15:56Z" },
        "decripcion": "\nWhile it's rather old, this might be a handy solution for some:  \n\n\n  A little module that extends the threading's module functionality --\n  allows one thread to raise exceptions in the context of another\n  thread. By raising SystemExit, you can finally kill python threads.\n\n\nimport threading\nimport ctypes     \n\ndef _async_raise(tid, excobj):\n    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, ctypes.py_object(excobj))\n    if res == 0:\n        raise ValueError(\"nonexistent thread id\")\n    elif res > 1:\n        # \"\"\"if it returns a number greater than one, you're in trouble, \n        # and you should call it again with exc=NULL to revert the effect\"\"\"\n        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, 0)\n        raise SystemError(\"PyThreadState_SetAsyncExc failed\")\n\nclass Thread(threading.Thread):\n    def raise_exc(self, excobj):\n        assert self.isAlive(), \"thread must be started\"\n        for tid, tobj in threading._active.items():\n            if tobj is self:\n                _async_raise(tid, excobj)\n                return\n\n        # the thread was alive when we entered the loop, but was not found \n        # in the dict, hence it must have been already terminated. should we raise\n        # an exception here? silently ignore?\n\n    def terminate(self):\n        # must raise the SystemExit type, instead of a SystemExit() instance\n        # due to a bug in PyThreadState_SetAsyncExc\n        self.raise_exc(SystemExit)\n\n\nSo, it allows a \"thread to raise exceptions in the context of another thread\" and in this way, the terminated thread can handle the termination without regularly checking an abort flag.\n\nHowever, according to its original source, there are some issues with this code.\n\n\n  \n  The exception will be raised only when executing python bytecode. If    your thread calls a native/built-in blocking function, the\n  exception    will be raised only when execution returns to the python\n  code. \n  \n  \n  There is also an issue if the built-in function internally calls    PyErr_Clear(), which would effectively cancel your pending exception. \n  You can try to raise it again.\n  \n  Only exception types can be raised    safely. Exception instances are likely to cause unexpected behavior,    and are thus restricted.\n  \n  \n  For example: t1.raise_exc(TypeError) and    not t1.raise_exc(TypeError(\"blah\")).\n  IMHO it's a bug, and I reported it as one. For more info,    http://mail.python.org/pipermail/python-dev/2006-August/068158.html  \n  \n  I asked to expose this function in the built-in thread module, but    since ctypes has become a standard library (as of 2.5), and this\n  feature is not likely to be implementation-agnostic, it may be kept\n  unexposed.\n  \n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "wp78de",
        "usuario_id": 1279
    },
    {
        "_id": 787,
        "fecha": { "$date" : "2019-09-04T15:59:03Z" },
        "decripcion": "\nAsuming, that you want to have multiple threads of the same function, this is IMHO the easiest implementation to stop one by id:\n\nimport time\nfrom threading import Thread\n\ndef doit(id=0):\n    doit.stop=0\n    print(\"start id:%d\"%id)\n    while 1:\n        time.sleep(1)\n        print(\".\")\n        if doit.stop==id:\n            doit.stop=0\n            break\n    print(\"end thread %d\"%id)\n\nt5=Thread(target=doit, args=(5,))\nt6=Thread(target=doit, args=(6,))\n\nt5.start() ; t6.start()\ntime.sleep(2)\ndoit.stop =5  #kill t5\ntime.sleep(2)\ndoit.stop =6  #kill t6\n\n\nThe nice thing is here, you can have multiple of same and different functions, and stop them all by functionname.stop\n\nIf you want to have only one thread of the function then you don't need to remember the id. Just stop, if doit.stop > 0.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "rundekugel",
        "usuario_id": 1280
    },
    {
        "_id": 788,
        "fecha": { "$date" : "2020-06-01T12:21:00Z" },
        "decripcion": "\nAs mentioned in @Kozyarchuk's answer, installing trace works. Since this answer contained no code, here is a working ready-to-use example:\n\nimport sys, threading, time \n\nclass TraceThread(threading.Thread): \n    def __init__(self, *args, **keywords): \n        threading.Thread.__init__(self, *args, **keywords) \n        self.killed = False\n    def start(self): \n        self._run = self.run \n        self.run = self.settrace_and_run\n        threading.Thread.start(self) \n    def settrace_and_run(self): \n        sys.settrace(self.globaltrace) \n        self._run()\n    def globaltrace(self, frame, event, arg): \n        return self.localtrace if event == 'call' else None\n    def localtrace(self, frame, event, arg): \n        if self.killed and event == 'line': \n            raise SystemExit() \n        return self.localtrace \n\ndef f(): \n    while True: \n        print('1') \n        time.sleep(2)\n        print('2') \n        time.sleep(2)\n        print('3') \n        time.sleep(2)\n\nt = TraceThread(target=f) \nt.start() \ntime.sleep(2.5) \nt.killed = True\n\n\nIt stops after having printed 1 and 2. 3 is not printed.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Basj",
        "usuario_id": 1281
    },
    {
        "_id": 789,
        "fecha": { "$date" : "2021-04-01T11:58:33Z" },
        "decripcion": "\nPython version: 3.8\nUsing daemon thread to execute what we wanted, if we want to daemon thread be terminated, all we need is making parent thread exit, then system will terminate daemon thread which parent thread created.\nAlso support coroutine and coroutine function.\ndef main():\n    start_time = time.perf_counter()\n    t1 = ExitThread(time.sleep, (10,), debug=False)\n    t1.start()\n    time.sleep(0.5)\n    t1.exit()\n    try:\n        print(t1.result_future.result())\n    except concurrent.futures.CancelledError:\n        pass\n    end_time = time.perf_counter()\n    print(f\"time cost {end_time - start_time:0.2f}\")\n\nbelow is ExitThread source code\nimport concurrent.futures\nimport threading\nimport typing\nimport asyncio\n\n\nclass _WorkItem(object):\n    \"\"\" concurrent\\futures\\thread.py\n\n    \"\"\"\n\n    def __init__(self, future, fn, args, kwargs, *, debug=None):\n        self._debug = debug\n        self.future = future\n        self.fn = fn\n        self.args = args\n        self.kwargs = kwargs\n\n    def run(self):\n        if self._debug:\n            print(\"ExitThread._WorkItem run\")\n        if not self.future.set_running_or_notify_cancel():\n            return\n\n        try:\n            coroutine = None\n            if asyncio.iscoroutinefunction(self.fn):\n                coroutine = self.fn(*self.args, **self.kwargs)\n            elif asyncio.iscoroutine(self.fn):\n                coroutine = self.fn\n            if coroutine is None:\n                result = self.fn(*self.args, **self.kwargs)\n            else:\n                result = asyncio.run(coroutine)\n            if self._debug:\n                print(\"_WorkItem done\")\n        except BaseException as exc:\n            self.future.set_exception(exc)\n            # Break a reference cycle with the exception 'exc'\n            self = None\n        else:\n            self.future.set_result(result)\n\n\nclass ExitThread:\n    \"\"\" Like a stoppable thread\n\n    Using coroutine for target then exit before running may cause RuntimeWarning.\n\n    \"\"\"\n\n    def __init__(self, target: typing.Union[typing.Coroutine, typing.Callable] = None\n                 , args=(), kwargs={}, *, daemon=None, debug=None):\n        #\n        self._debug = debug\n        self._parent_thread = threading.Thread(target=self._parent_thread_run, name=\"ExitThread_parent_thread\"\n                                               , daemon=daemon)\n        self._child_daemon_thread = None\n        self.result_future = concurrent.futures.Future()\n        self._workItem = _WorkItem(self.result_future, target, args, kwargs, debug=debug)\n        self._parent_thread_exit_lock = threading.Lock()\n        self._parent_thread_exit_lock.acquire()\n        self._parent_thread_exit_lock_released = False  # When done it will be True\n        self._started = False\n        self._exited = False\n        self.result_future.add_done_callback(self._release_parent_thread_exit_lock)\n\n    def _parent_thread_run(self):\n        self._child_daemon_thread = threading.Thread(target=self._child_daemon_thread_run\n                                                     , name=\"ExitThread_child_daemon_thread\"\n                                                     , daemon=True)\n        self._child_daemon_thread.start()\n        # Block manager thread\n        self._parent_thread_exit_lock.acquire()\n        self._parent_thread_exit_lock.release()\n        if self._debug:\n            print(\"ExitThread._parent_thread_run exit\")\n\n    def _release_parent_thread_exit_lock(self, _future):\n        if self._debug:\n            print(f\"ExitThread._release_parent_thread_exit_lock {self._parent_thread_exit_lock_released} {_future}\")\n        if not self._parent_thread_exit_lock_released:\n            self._parent_thread_exit_lock_released = True\n            self._parent_thread_exit_lock.release()\n\n    def _child_daemon_thread_run(self):\n        self._workItem.run()\n\n    def start(self):\n        if self._debug:\n            print(f\"ExitThread.start {self._started}\")\n        if not self._started:\n            self._started = True\n            self._parent_thread.start()\n\n    def exit(self):\n        if self._debug:\n            print(f\"ExitThread.exit exited: {self._exited} lock_released: {self._parent_thread_exit_lock_released}\")\n        if self._parent_thread_exit_lock_released:\n            return\n        if not self._exited:\n            self._exited = True\n            if not self.result_future.cancel():\n                if self.result_future.running():\n                    self.result_future.set_exception(concurrent.futures.CancelledError())\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "\u6797\u5955\u5fe0",
        "usuario_id": 1282
    },
    {
        "_id": 790,
        "fecha": { "$date" : "2015-07-29T10:59:06Z" },
        "decripcion": "\nThis seems to work with pywin32 on windows 7\n\nmy_thread = threading.Thread()\nmy_thread.start()\nmy_thread._Thread__stop()\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "zzart",
        "usuario_id": 1283
    },
    {
        "_id": 791,
        "fecha": { "$date" : "2018-02-09T11:18:10Z" },
        "decripcion": "\nPieter Hintjens -- one of the founders of the \u00d8MQ-project -- says, using \u00d8MQ and avoiding synchronization primitives like locks, mutexes, events etc., is the sanest and securest way to write multi-threaded programs:\n\nhttp://zguide.zeromq.org/py:all#Multithreading-with-ZeroMQ\n\nThis includes telling a child thread, that it should cancel its work. This would be done by equipping the thread with a \u00d8MQ-socket and polling on that socket for a message saying that it should cancel.\n\nThe link also provides an example on multi-threaded python code with \u00d8MQ.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "paulkernstock",
        "usuario_id": 1284
    },
    {
        "_id": 792,
        "fecha": { "$date" : "2016-01-17T06:21:26Z" },
        "decripcion": "\nIf you really need the ability to kill a sub-task, use an alternate implementation. multiprocessing and gevent both support indiscriminately killing a \"thread\".\n\nPython's threading does not support cancellation. Do not even try. Your code is very likely to deadlock, corrupt or leak memory, or have other unintended \"interesting\" hard-to-debug effects which happen rarely and nondeterministically.\n    ",
        "votes": -1,
        "comentarios": [
            {
                "decripcion": "\u2026 and yes, I know that both are not strictly \"threading\", but they both work if your code fits (or can be made to fit) their model.",
                "fecha": { "$date" : "2015-09-20T15:08:02Z" },
                "usuario": "Matthias Urlichs",
                "usuario_id": 1239
            }
        ],
        "usuario": "Matthias Urlichs",
        "usuario_id": 1239
    },
    {
        "_id": 793,
        "fecha": { "$date" : "2016-04-14T19:01:09Z" },
        "decripcion": "\nYou can execute your command in a process and then kill it using the process id.\nI needed to sync between two thread one of which  doesn\u2019t return by itself.\n\nprocessIds = []\n\ndef executeRecord(command):\n    print(command)\n\n    process = subprocess.Popen(command, stdout=subprocess.PIPE)\n    processIds.append(process.pid)\n    print(processIds[0])\n\n    #Command that doesn't return by itself\n    process.stdout.read().decode(\"utf-8\")\n    return;\n\n\ndef recordThread(command, timeOut):\n\n    thread = Thread(target=executeRecord, args=(command,))\n    thread.start()\n    thread.join(timeOut)\n\n    os.kill(processIds.pop(), signal.SIGINT)\n\n    return;\n\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "user1942887",
        "usuario_id": 1285
    },
    {
        "_id": 794,
        "fecha": { "$date" : "2016-05-17T20:13:43Z" },
        "decripcion": "\nStart the sub thread with setDaemon(True).\n\ndef bootstrap(_filename):\n    mb = ModelBootstrap(filename=_filename) # Has many Daemon threads. All get stopped automatically when main thread is stopped.\n\nt = threading.Thread(target=bootstrap,args=('models.conf',))\nt.setDaemon(False)\n\nwhile True:\n    t.start()\n    time.sleep(10) # I am just allowing the sub-thread to run for 10 sec. You can listen on an event to stop execution.\n    print('Thread stopped')\n    break\n\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "Sud",
        "usuario_id": 1286
    },
    {
        "_id": 795,
        "fecha": { "$date" : "2015-07-30T02:11:07Z" },
        "decripcion": "\n\n  This is a bad answer, see the comments\n\n\nHere's how to do it:\n\nfrom threading import *\n\n...\n\nfor thread in enumerate():\n    if thread.isAlive():\n        try:\n            thread._Thread__stop()\n        except:\n            print(str(thread.getName()) + ' could not be terminated'))\n\n\nGive it a few seconds then your thread should be stopped. Check also the thread._Thread__delete() method.\n\nI'd recommend a thread.quit() method for convenience. For example if you have a socket in your thread, I'd recommend creating a quit() method in your socket-handle class, terminate the socket, then run a thread._Thread__stop() inside of your quit().\n    ",
        "votes": -2,
        "comentarios": [
            {
                "decripcion": "More details on \"this doesn't really stop a thread\" would be helpful.",
                "fecha": { "$date" : "2011-12-27T22:40:09Z" },
                "usuario": "2371",
                "usuario_id": 1287
            },
            {
                "decripcion": "Basically, calling the _Thread__stop method has no effect apart from telling Python that the thread is stopped. It can actually continue running. See gist.github.com/2787191 for an example.",
                "fecha": { "$date" : "2012-05-25T10:26:25Z" },
                "usuario": "Bluehorn",
                "usuario_id": 1288
            },
            {
                "decripcion": "This is plain wrong. _Thread__stop() merely marks a thread as stopped, it does not actually stop the thread! Never do this. Have a read.",
                "fecha": { "$date" : "2013-07-21T07:16:53Z" },
                "usuario": "dotancohen",
                "usuario_id": 1289
            }
        ],
        "usuario": "DoXiD",
        "usuario_id": 1290
    },
    {
        "_id": 796,
        "fecha": { "$date" : "2020-10-26T14:02:08Z" },
        "decripcion": "\nYes: implements Runnable is the preferred way to do it, IMO. You're not really specialising the thread's behaviour.  You're just giving it something to run. That means composition is the philosophically \"purer\" way to go.\nIn practical terms, it means you can implement Runnable and extend from another class as well... and you can also implement Runnable via a lambda expression as of Java 8.\n    ",
        "votes": 1758,
        "comentarios": [
            {
                "decripcion": "Exactly, well put.  What behavior are we trying to overwrite in Thread by extending it?  I would argue most people are not trying to overwrite any behavior, but trying to use behavior of Thread.",
                "fecha": { "$date" : "2009-02-12T16:50:22Z" },
                "usuario": "hooknc",
                "usuario_id": 1292
            },
            {
                "decripcion": "As a side comment, if you instantiate a Thread and do not call its start() method you are creating a memory leak in Java < 5 (this does not happen with Runnables): stackoverflow.com/questions/107823/\u2026",
                "fecha": { "$date" : "2013-02-07T13:48:02Z" },
                "usuario": "Nacho Coloma",
                "usuario_id": 1293
            },
            {
                "decripcion": "One minor advantage of Runnable is that, if in certain circumstances you don't care about, or don't want to use threading, and you just want to execute the code, you have the option to simply call run().  e.g. (very handwavy)  if (numberCores > 4) myExecutor.excute(myRunnable); else myRunnable.run()",
                "fecha": { "$date" : "2013-03-06T19:30:18Z" },
                "usuario": "user949300",
                "usuario_id": 1294
            },
            {
                "decripcion": "@user949300 you can also do that with extends Thread and if you don't want threading why would you even implement Runnable...",
                "fecha": { "$date" : "2013-04-23T08:15:52Z" },
                "usuario": "m0skit0",
                "usuario_id": 1295
            },
            {
                "decripcion": "To paraphrase Sierra and Bates, a key benefit of implementing Runnable is that you are architecturally seperating the \"job\" from the \"runner\".",
                "fecha": { "$date" : "2014-02-12T09:28:00Z" },
                "usuario": "8bitjunkie",
                "usuario_id": 1296
            }
        ],
        "usuario": "Jon Skeet",
        "usuario_id": 1210
    },
    {
        "_id": 797,
        "fecha": { "$date" : "2019-08-14T12:01:19Z" },
        "decripcion": "\ntl;dr: implements Runnable is better.  However, the caveat is important\n\nIn general, I would recommend using something like Runnable rather than Thread because it allows you to keep your work only loosely coupled with your choice of concurrency.  For example, if you use a Runnable and decide later on that this doesn't in fact require it's own Thread, you can just call threadA.run().\n\nCaveat: Around here, I strongly discourage the use of raw Threads.  I much prefer the use of Callables and FutureTasks (From the javadoc: \"A cancellable asynchronous computation\").  The integration of timeouts, proper cancelling and the thread pooling of the modern concurrency support are all much more useful to me than piles of raw Threads.\n\nFollow-up: there is a FutureTask constructor that allows you to use Runnables (if that's what you are most comfortable with) and still get the benefit of the modern concurrency tools.  To quote the javadoc:\n\nIf you don't need a particular result, consider using constructions of the form: \n\nFuture<?> f = new FutureTask<Object>(runnable, null)\n\n\nSo, if we replace their runnable with your threadA, we get the following:\n\nnew FutureTask<Object>(threadA, null)\n\n\nAnother option that allows you to stay closer to Runnables is a ThreadPoolExecutor.  You can use the execute method to pass in a Runnable to execute \"the given task sometime in the future.\"\n\nIf you'd like to try using a thread pool, the code fragment above would become something like the following (using the Executors.newCachedThreadPool() factory method):\n\nExecutorService es = Executors.newCachedThreadPool();\nes.execute(new ThreadA());\n\n    ",
        "votes": 598,
        "comentarios": [
            {
                "decripcion": "This is better than the accepted answer IMHO. One thing: the snippet of code you have doesn't close down the executor and I see millions of questions where people get this wrong, creating a new Executor every time they want to spawn a task. es would be better as a static (or injected) field so it only gets created once.",
                "fecha": { "$date" : "2012-11-19T11:27:01Z" },
                "usuario": "artbristol",
                "usuario_id": 1297
            },
            {
                "decripcion": "@artbristol, thanks!  I don't disagree on the new Executor (we do what you suggest in our code).  In writing the original answer, I was trying to write minimal code analagous to the original fragment.  We have to hope that many readers of these answers use them as jumping off points.  I'm not trying to write a replacement for the javadoc.  I'm effectively writing marketing material for it: if you like this method, you should see all the other great things we have to offer...!",
                "fecha": { "$date" : "2012-11-19T13:28:41Z" },
                "usuario": "Bob Cross",
                "usuario_id": 1298
            },
            {
                "decripcion": "I know I'm a bit late commenting on this, but dealing with FutureTask directly is generally not what you want to do.  ExecutorServices will create the appropriate Future for you when you submit a Runnable/Callable to them.  Likewise for ScheduledExecutorServices and ScheduledFuture when you schedule a Runnable/Callable.",
                "fecha": { "$date" : "2015-04-28T13:44:19Z" },
                "usuario": "Powerlord",
                "usuario_id": 1299
            },
            {
                "decripcion": "@Powerlord, my intention was to make code fragments that matched the OP's as closely as possible. I agree that new FutureTask isn't optimal but it is clear for the purposes of explanation.",
                "fecha": { "$date" : "2015-04-28T17:04:01Z" },
                "usuario": "Bob Cross",
                "usuario_id": 1298
            }
        ],
        "usuario": "Bob Cross",
        "usuario_id": 1298
    },
    {
        "_id": 798,
        "fecha": { "$date" : "2015-08-28T16:26:50Z" },
        "decripcion": "\nMoral of the story:\n\nInherit only if you want to override some behavior.\n\nOr rather it should be read as:\n\nInherit less, interface more.\n    ",
        "votes": 277,
        "comentarios": [
            {
                "decripcion": "This should always be the question if you start making a concurrent running Object! Do you even need the Thread Object funtions?",
                "fecha": { "$date" : "2015-10-21T07:59:15Z" },
                "usuario": "Liebertee",
                "usuario_id": 1300
            },
            {
                "decripcion": "When inheriting from Thread, one nearly always wants to override the behavior of the run() method.",
                "fecha": { "$date" : "2016-06-07T04:01:35Z" },
                "usuario": "Warren Dew",
                "usuario_id": 1301
            },
            {
                "decripcion": "You cannot override the behavior of a java.lang.Thread by overriding the run() method. In that case you need to override the start() method I guess. Normally you just reuse the behavior of the java.lang.Thread by injecting your execution block in to the run() method.",
                "fecha": { "$date" : "2016-07-06T09:28:09Z" },
                "usuario": "sura2k",
                "usuario_id": 1302
            },
            {
                "decripcion": "The inheritance is not just for overriding some behavior, is also to use common behaviors. And it is the opposite, the more overrides, the worser hierarchy.",
                "fecha": { "$date" : "2018-08-30T13:41:17Z" },
                "usuario": "peja",
                "usuario_id": 1303
            }
        ],
        "usuario": "panzerschreck",
        "usuario_id": 1304
    },
    {
        "_id": 799,
        "fecha": { "$date" : "2020-07-06T21:54:25Z" },
        "decripcion": "\nWell so many good Answers, I want to add more on this. This will help to understand Extending v/s Implementing Thread.Extends binds two class files very closely and can cause some pretty hard to deal with code.\nBoth approaches do the same job but there have been some differences.\nThe most common difference is\n\nWhen you extend Thread class, after that you can\u2019t extend any other class which you required. (As you know, Java does not allow inheriting more than one class).\nWhen you implement Runnable, you can save space for your class to extend any other class in the future or now.\n\nHowever, one significant difference between implementing Runnable and extending Thread is that by extending Thread, each of your threads has a unique object associated with it, whereas implementing Runnable, many threads can share the same object instance.\nThe following example will help you to understand more clearly\n//Implement Runnable Interface...\nclass ImplementsRunnable implements Runnable {\n\n    private int counter = 0;\n\n    public void run() {\n        counter++;\n        System.out.println(\"ImplementsRunnable : Counter : \" + counter);\n    }\n}\n\n//Extend Thread class...\nclass ExtendsThread extends Thread {\n\n    private int counter = 0;\n\n    public void run() {\n        counter++;\n        System.out.println(\"ExtendsThread : Counter : \" + counter);\n    }\n}\n    \n//Use the above classes here in main to understand the differences more clearly...\npublic class ThreadVsRunnable {\n\n    public static void main(String args[]) throws Exception {\n        // Multiple threads share the same object.\n        ImplementsRunnable rc = new ImplementsRunnable();\n        Thread t1 = new Thread(rc);\n        t1.start();\n        Thread.sleep(1000); // Waiting for 1 second before starting next thread\n        Thread t2 = new Thread(rc);\n        t2.start();\n        Thread.sleep(1000); // Waiting for 1 second before starting next thread\n        Thread t3 = new Thread(rc);\n        t3.start();\n\n        // Creating new instance for every thread access.\n        ExtendsThread tc1 = new ExtendsThread();\n        tc1.start();\n        Thread.sleep(1000); // Waiting for 1 second before starting next thread\n        ExtendsThread tc2 = new ExtendsThread();\n        tc2.start();\n        Thread.sleep(1000); // Waiting for 1 second before starting next thread\n        ExtendsThread tc3 = new ExtendsThread();\n        tc3.start();\n    }\n}\n\nOutput of the above program.\nImplementsRunnable : Counter : 1\nImplementsRunnable : Counter : 2\nImplementsRunnable : Counter : 3\nExtendsThread : Counter : 1\nExtendsThread : Counter : 1\nExtendsThread : Counter : 1\n\nIn the Runnable interface approach, only one instance of a class is being created and it has been shared by different threads. So the value of counter is incremented for each and every thread access.\nWhereas, Thread class approach, you must have to create separate instance for every thread access. Hence different memory is allocated for every class instances and each has separate counter, the value remains same, which means no increment will happen because none of the object reference is same.\nWhen to use Runnable?\nUse Runnable interface when you want to access the same resources from the group of threads. Avoid using Thread class here, because multiple objects creation consumes more memory and it becomes a big performance overhead.\nA class that implements Runnable is not a thread and just a class. For a Runnable to become a Thread, You need to create an instance of Thread and passing itself in as the target.\nIn most cases, the Runnable interface should be used if you are only planning to override the run() method and no other Thread methods. This is important because classes should not be subclassed unless the programmer intends on modifying or enhancing the fundamental behavior of the class.\nWhen there is a need to extend a superclass, implementing the Runnable interface is more appropriate than using the Thread class. Because we can extend another class while implementing Runnable interface to make a thread.\nI hope this will help!\n    ",
        "votes": 259,
        "comentarios": [
            {
                "decripcion": "Your code is patently wrong. I mean, it does what it does, but not what you intended to show.",
                "fecha": { "$date" : "2013-06-10T06:25:08Z" },
                "usuario": "zEro",
                "usuario_id": 1305
            },
            {
                "decripcion": "To clarify: for the runnable case you've used the same ImplementsRunnable instance to start multiple threads, whereas for the Thread case you're creating different ExtendsThread instances which obviously leads to the behavior you showed.   The 2nd half of your main method should be:  ExtendsThread et = new ExtendsThread(); Thread tc1 = new Thread(et); tc1.start(); Thread.sleep(1000); Thread tc2 = new Thread(et); tc2.start(); Thread.sleep(1000); Thread tc3 = new Thread(et); tc3.start();  Is it any clearer?",
                "fecha": { "$date" : "2013-06-10T06:31:25Z" },
                "usuario": "zEro",
                "usuario_id": 1305
            },
            {
                "decripcion": "I don't yet understand your intent, but my point was that if you create multiple instances of ExtendsThread -- they will all return 1 (as you've shown). You can get the same results for Runnable by doing the same thing there, i.e. creating multiple instances of ImplementsRunnable.",
                "fecha": { "$date" : "2013-06-10T12:29:17Z" },
                "usuario": "zEro",
                "usuario_id": 1305
            },
            {
                "decripcion": "@zEro Hi, I'm from the future. Given that your version of the code has Thread incrementing as well, is the statement by extending Thread, each of your threads has a unique object associated with it, whereas implementing Runnable, many threads can share the same object instance then wrong? If not, then what is a case which demonstrates this?",
                "fecha": { "$date" : "2015-02-09T11:23:14Z" },
                "usuario": "Evil Washing Machine",
                "usuario_id": 1306
            },
            {
                "decripcion": "@EvilWashingMachine: Been inactive for long.. and just saw this. I've added the object's hashcode to the print statements... + \" hashcode: \" + this.hashCode()",
                "fecha": { "$date" : "2015-05-18T20:07:41Z" },
                "usuario": "zEro",
                "usuario_id": 1305
            }
        ],
        "usuario": "Rupesh Yadav",
        "usuario_id": 1307
    },
    {
        "_id": 800,
        "fecha": { "$date" : "2016-10-12T12:53:26Z" },
        "decripcion": "\nOne thing that I'm surprised hasn't been mentioned yet is that implementing Runnable makes your class more flexible.\n\nIf you extend thread then the action you're doing is always going to be in a thread.  However, if you implement Runnable it doesn't have to be.  You can run it in a thread, or pass it to some kind of executor service, or just pass it around as a task within a single threaded application (maybe to be run at a later time, but within the same thread).  The options are a lot more open if you just use Runnable than if you bind yourself to Thread.\n    ",
        "votes": 84,
        "comentarios": [
            {
                "decripcion": "Well, you can actually do the same thing with a Thread object too because Thread implements Runnable\u2026 ;-) But it \"feels better\" doing this things with a Runnable than doing them with a Thread!",
                "fecha": { "$date" : "2012-04-26T21:13:10Z" },
                "usuario": "siegi",
                "usuario_id": 1308
            },
            {
                "decripcion": "True, but Thread adds a lot of extra stuff that you don't need, and in many cases don't want.  You're always better off implementing the interface that matches what you're actually doing.",
                "fecha": { "$date" : "2012-04-27T13:19:31Z" },
                "usuario": "Herms",
                "usuario_id": 1309
            }
        ],
        "usuario": "Herms",
        "usuario_id": 1309
    },
    {
        "_id": 801,
        "fecha": { "$date" : "2019-04-22T22:30:18Z" },
        "decripcion": "\nIf you want to implements or extends any other class then Runnable interface is most preferable, otherwise, if you do not want any other class to extend or implement then Thread class is preferable. \n\nThe most common difference is\n\n\n\nWhen you extends Thread class, after that you can\u2019t extend any other class which you required. (As you know, Java does not allow inheriting more than one class).\n\nWhen you implements Runnable, you can save space for your class to extend any other class in the future or now.\n\n\nJava doesn't support multiple inheritances, which means you can only extend one class in Java so once you extended Thread class you lost your chance and cannot extend or inherit another class in Java.\nIn Object-oriented programming, extending a class generally means, adding new functionality, and modifying or improving behaviors. If we are not making any modification on Thread then use Runnable interface instead.\nRunnable interface represents a Task which can be executed by either plain Thread or Executors or any other means. so logical separation of Task as Runnable than Thread is a good design decision.\nSeparating task as Runnable means we can reuse the task and also has the liberty to execute it from different means. since you can not restart a Thread once it completes. again Runnable vs Thread for task, Runnable is winner.\nJava designer recognizes this and that's why Executors accept Runnable as Task and they have worker thread which executes those task.\nInheriting all Thread methods are additional overhead just for representing a Task which can be done easily with Runnable.\n\n\nCourtesy from javarevisited.blogspot.com\n\nThese were some of the notable differences between Thread and Runnable in Java. If you know any other differences on Thread vs Runnable than please share it via comments. I personally use Runnable over Thread for this scenario and recommends to use Runnable or Callable interface based on your requirement.\n\nHowever, the significant difference is.\n\nWhen you extends Thread class, each of your thread creates a unique object and associate with it.\nWhen you implements Runnable, it shares the same object to multiple threads.\n    ",
        "votes": 82,
        "comentarios": [],
        "usuario": "Nidhish Krishnan",
        "usuario_id": 1310
    },
    {
        "_id": 802,
        "fecha": { "$date" : "2016-08-03T05:58:59Z" },
        "decripcion": "\nActually, It is not wise to compare Runnable and Thread with each other.  \n\nThis two have a dependency and relationship in multi-threading just like Wheel and Engine relationship of motor vehicle.\n\nI would say, there is only one way for multi-threading with two steps. Let me make my point.\n\nRunnable:\nWhen implementing interface Runnable it means you are creating something which is run able in a different thread. Now creating something which can run inside a thread (runnable inside a thread), doesn't mean to creating a Thread.\nSo the class MyRunnable is nothing but a ordinary class with a void run method.\nAnd it's objects will be some ordinary objects with only a method run which will execute normally when called.  (unless we pass the object in a thread).\n\nThread:\nclass Thread, I would say A very special class with the capability of starting a new Thread which actually enables multi-threading through its start() method.\n\nWhy not wise to compare?\nBecause we need both of them for multi-threading.   \n\nFor Multi-threading we need two things:  \n\n\nSomething that can run inside a Thread (Runnable).   \nSomething That can start a new Thread (Thread).\n\n\nSo technically and theoretically  both of them is necessary to start a thread, one will run and one will make it run (Like Wheel and Engine of motor vehicle).\n\nThat's why you can not start a thread with MyRunnable you need to pass it to a instance of Thread.\n\nBut it is possible to create and run a thread only using class Thread because Class Thread implements Runnable so we all know Thread also is a Runnable inside.\n\nFinally Thread and Runnable are complement to each other for multithreading  not competitor or replacement.\n    ",
        "votes": 80,
        "comentarios": [
            {
                "decripcion": "Exactly! This should be the accepted answer. BTW I think the question has been edited and ThreadA has no longer sense",
                "fecha": { "$date" : "2016-03-22T16:51:37Z" },
                "usuario": "idelvall",
                "usuario_id": 1311
            },
            {
                "decripcion": "the accepted answer is much more delegate thanks for you response @idelvall",
                "fecha": { "$date" : "2016-03-22T17:10:13Z" },
                "usuario": "Saif",
                "usuario_id": 1312
            },
            {
                "decripcion": "The best answer! Thanks!",
                "fecha": { "$date" : "2020-02-21T13:15:25Z" },
                "usuario": "MichaelYe",
                "usuario_id": 1313
            }
        ],
        "usuario": "Saif",
        "usuario_id": 1312
    },
    {
        "_id": 803,
        "fecha": { "$date" : "2017-05-23T12:26:36Z" },
        "decripcion": "\nYou should implement Runnable, but if you are running on Java 5 or higher, you should not start it with new Thread but use an ExecutorService instead. For details see: How to implement simple threading in Java.\n    ",
        "votes": 46,
        "comentarios": [
            {
                "decripcion": "I wouldn't think ExecutorService would be that useful if you just want to launch a single thread.",
                "fecha": { "$date" : "2009-02-12T14:54:07Z" },
                "usuario": "Powerlord",
                "usuario_id": 1299
            },
            {
                "decripcion": "From what I have learned one should no longer start a thread on your own in general, because leaving that to the executor service makes all much more controllable (like, waiting for the thread to suspend). Also, I don't see anything in the question that implies it's about a single thread.",
                "fecha": { "$date" : "2009-02-12T15:16:08Z" },
                "usuario": "Fabian Steeg",
                "usuario_id": 1314
            },
            {
                "decripcion": "What's the point of using any multi-threading if we know aprior that it's going to be a single thread. So let's assume we have multiple threads and this answer is valuable.",
                "fecha": { "$date" : "2013-06-22T21:16:03Z" },
                "usuario": "zEro",
                "usuario_id": 1305
            },
            {
                "decripcion": "@zEro I'm pretty sure there is a reason there is only one Event Dispatch Thread. I doubt it's the only case were it's best to have a separate thread but possibly not best to have multiple.",
                "fecha": { "$date" : "2013-12-23T15:07:51Z" },
                "usuario": "Bodey Baker",
                "usuario_id": 1315
            }
        ],
        "usuario": "Fabian Steeg",
        "usuario_id": 1314
    },
    {
        "_id": 804,
        "fecha": { "$date" : "2009-02-12T14:32:01Z" },
        "decripcion": "\nI'm not an expert, but I can think of one reason to implement Runnable instead of extend Thread: Java only supports single inheritance, so you can only extend one class.\n\nEdit: This originally said \"Implementing an interface requires less resources.\" as well, but you need to create a new Thread instance either way, so this was wrong.\n    ",
        "votes": 35,
        "comentarios": [
            {
                "decripcion": "In runnable we can't make network calls, is it? As i am having android.os.NetworkOnMainThreadException. But by using thread i can make network calls. Please correct me if i am wrong.",
                "fecha": { "$date" : "2014-10-16T05:16:56Z" },
                "usuario": "Nabeel Thobani",
                "usuario_id": 1316
            },
            {
                "decripcion": "@NabeelThobani Normal Java doesn't care, but it sounds like Android does.  I'm not familiar enough with Android to say, though.",
                "fecha": { "$date" : "2014-10-16T13:15:18Z" },
                "usuario": "Powerlord",
                "usuario_id": 1299
            },
            {
                "decripcion": "@NabeelThobani Of course you can. Probably you're not creating a Thread with your Runnable.",
                "fecha": { "$date" : "2015-01-08T19:11:21Z" },
                "usuario": "m0skit0",
                "usuario_id": 1295
            }
        ],
        "usuario": "Powerlord",
        "usuario_id": 1299
    },
    {
        "_id": 805,
        "fecha": { "$date" : "2010-10-25T21:41:00Z" },
        "decripcion": "\nI would say there is a third way:\n\npublic class Something {\n\n    public void justAnotherMethod() { ... }\n\n}\n\nnew Thread(new Runnable() {\n   public void run() {\n    instanceOfSomething.justAnotherMethod();\n   }\n}).start();\n\n\nMaybe this is influenced a bit by my recent heavy usage of Javascript and Actionscript 3, but this way your class doesn't need to implement a pretty vague interface like Runnable.\n    ",
        "votes": 21,
        "comentarios": [
            {
                "decripcion": "This isn't really a third way.  You're still implementing Runnable, just doing it anonymously.",
                "fecha": { "$date" : "2011-01-12T18:50:17Z" },
                "usuario": "Don Roby",
                "usuario_id": 1317
            },
            {
                "decripcion": "@Don Roby: Which is different. It's often convenient, and you can use fields and final local variables from the containing class/method.",
                "fecha": { "$date" : "2011-01-13T09:59:38Z" },
                "usuario": "Bart van Heukelom",
                "usuario_id": 1318
            },
            {
                "decripcion": "@BartvanHeukelom It's convenient, but not different. You can do this with any type of nested class, i.e. inner classes, local classes and lambda expressions.",
                "fecha": { "$date" : "2015-01-06T01:28:30Z" },
                "usuario": "xehpuk",
                "usuario_id": 1319
            }
        ],
        "usuario": "Bart van Heukelom",
        "usuario_id": 1318
    },
    {
        "_id": 806,
        "fecha": { "$date" : "2015-09-05T12:10:44Z" },
        "decripcion": "\nWith the release of Java 8, there is now a third option.\n\nRunnable is a functional interface, which means that instances of it can be created with lambda expressions or method references.\n\nYour example can be replaced with:\n\nnew Thread(() -> { /* Code here */ }).start()\n\n\nor if you want to use an ExecutorService and a method reference:\n\nexecutor.execute(runner::run)\n\n\nThese are not only much shorter than your examples, but also come with many of the advantages stated in other answers of using Runnable over Thread, such as single responsibility and using composition because you're not specializing the thread's behaviour. This way also avoids creating an extra class if all you need is a Runnable as you do in your examples.\n    ",
        "votes": 19,
        "comentarios": [
            {
                "decripcion": "This answer needs explanation. After some puzzling, I conclude that () -> {} is supposed to represent the custom logic that someone needs? So it would be better said as () -> { /* Code here */ }?",
                "fecha": { "$date" : "2015-09-05T11:56:23Z" },
                "usuario": "ToolmakerSteve",
                "usuario_id": 1150
            }
        ],
        "usuario": "Alex - GlassEditor.com",
        "usuario_id": 1320
    },
    {
        "_id": 807,
        "fecha": { "$date" : "2009-02-12T14:33:09Z" },
        "decripcion": "\nInstantiating an interface gives a cleaner separation between your code and the implementation of threads, so I'd prefer to implement Runnable in this case.\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "starblue",
        "usuario_id": 1321
    },
    {
        "_id": 808,
        "fecha": { "$date" : "2017-10-01T15:05:06Z" },
        "decripcion": "\nDifference between Extending Thread and Implementing Runnable are:\n\n\n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "Raman Gupta",
        "usuario_id": 1322
    },
    {
        "_id": 809,
        "fecha": { "$date" : "2012-06-19T23:12:49Z" },
        "decripcion": "\nEveryone here seems to think that implementing Runnable is the way to go and I don't really disagree with them but there is also a case for extending Thread in my opinion, in fact you have sort of demonstrated it in your code.\n\nIf you implement Runnable then the class that implements Runnable has no control over the thread name, it is the calling code that can set the thread name, like so:\n\nnew Thread(myRunnable,\"WhateverNameiFeelLike\");\n\n\nbut if you extend Thread then you get to manage this within the class itself (just like in your example you name the thread 'ThreadB').  In this case you:\n\nA) might give it a more useful name for debugging purposes \n\nB) are forcing that that name be used for all instances of that class (unless you ignore the fact that it is a thread and do the above with it as if it is a Runnable but we are talking about convention here in any case so can ignore that possibility I feel).\n\nYou might even for example take a stack trace of its creation and use that as the thread name.  This might seem odd but depending on how your code is structured it can be very useful for debugging purposes.\n\nThis might seem like a small thing but where you have a very complex application with a lot of threads and all of a sudden things 'have stopped' (either for reasons of deadlock or possibly because of a flaw in a network protocol which would be less obvious - or other endless reasons) then getting a stack dump from Java where all the threads are called 'Thread-1','Thread-2','Thread-3' is not always very useful (it depends on how your threads are structured and whether you can usefully tell which is which just by their stack trace - not always possible if you are using groups of multiple threads all running the same code).\n\nHaving said that you could of course also do the above in a generic way by creating an extension of the thread class which sets its name to a stack trace of its creation call and then use that with your Runnable implementations instead of the standard java Thread class (see below) but in addition to the stack trace there might be more context specific information that would be useful in the thread name for debugging (a reference to one of many queues or sockets it could processing for example in which case you might prefer to extend Thread specifically for that case so that you can have the compiler force you (or others using your libraries) to pass in certain info (e.g. the queue/socket in question) for use in the name).\n\nHere's an example of the generic thread with the calling stack trace as its name:\n\npublic class DebuggableThread extends Thread {\n    private static String getStackTrace(String name) {\n        Throwable t= new Throwable(\"DebuggableThread-\"+name);\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        PrintStream ps = new PrintStream(os);\n        t.printStackTrace(ps);\n        return os.toString();\n    }\n\n    public DebuggableThread(String name) {\n        super(getStackTrace(name));\n    }\n\n    public static void main(String[] args) throws Exception {\n        System.out.println(new Thread());\n        System.out.println(new DebuggableThread(\"MainTest\"));\n    }\n}\n\n\nand here's a sample of the output comparing the two names:\n\nThread[Thread-1,5,main]\nThread[java.lang.Throwable: DebuggableThread-MainTest\n    at DebuggableThread.getStackTrace(DebuggableThread.java:6)\n    at DebuggableThread.<init>(DebuggableThread.java:14)\n    at DebuggableThread.main(DebuggableThread.java:19)\n,5,main]\n\n    ",
        "votes": 13,
        "comentarios": [
            {
                "decripcion": "cHao what is your point?  You could not use your code above during the execution of the thread to obtain a stacktrace of the threads creation (instead you would get a simple name or at best a stacktrace of the threads launch) but by subclassing thread you can do exactly that and force it, even requiring further context specific information thereby giving you a more concrete understanding of exactly which thread may be having an issue.",
                "fecha": { "$date" : "2012-11-02T13:56:11Z" },
                "usuario": "AntonyM",
                "usuario_id": 1323
            },
            {
                "decripcion": "My point is that \"If you implement Runnable then the class that implements Runnable has no control over the thread name...\" is patently false.  A class implementing Runnable can indeed control the thread name, as the thread running the code is by definition the current thread (and any code that passes the security checks has control over thread names).  Considering you devote half your post to \"omg, what about thread names!\", that seems like a kinda big deal.",
                "fecha": { "$date" : "2012-11-02T14:02:44Z" },
                "usuario": "cHao",
                "usuario_id": 1324
            },
            {
                "decripcion": "The thread name?  Nothing is stopping you extending the thread class as well.",
                "fecha": { "$date" : "2014-07-28T02:59:36Z" },
                "usuario": "RichieHH",
                "usuario_id": 1325
            }
        ],
        "usuario": "AntonyM",
        "usuario_id": 1323
    },
    {
        "_id": 810,
        "fecha": { "$date" : "2010-05-07T04:28:57Z" },
        "decripcion": "\nRunnable because: \n\n\nLeaves more flexibility for the\nRunnable implementation to extend\nanother class \nSeparates the code from\nexecution\nAllows you to run your\nrunnable from a Thread Pool, the\nevent thread, or in any other way in\nthe future.\n\n\nEven if you don't need any of this now, you may in the future. Since there is no benefit to overriding Thread, Runnable is a better solution.\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "n13",
        "usuario_id": 1326
    },
    {
        "_id": 811,
        "fecha": { "$date" : "2017-05-23T12:26:36Z" },
        "decripcion": "\nSince this is a very popular topic and the good answers are spread all over and dealt with in great depth, I felt it is justifiable to compile the good answers from the others into a more concise form, so newcomers have an easy overview upfront:\n\n\nYou usually extend a class to add or modify functionality. So, if you don't want to overwrite any Thread behavior, then use Runnable.\nIn the same light, if you don't need to inherit thread methods, you can do without that overhead by using Runnable.\nSingle inheritance: If you extend Thread you cannot extend from any other class, so if that is what you need to do, you have to use Runnable.\nIt is good design to separate domain logic from technical means, in that sense it is better to have a Runnable task isolating your task from your runner.\nYou can execute the same Runnable object multiple times, a Thread object, however, can only be started once. (Maybe the reason, why Executors do accept Runnables, but not Threads.)\nIf you develop your task as Runnable, you have all flexibility how to use it now and in the future. You can have it run concurrently via Executors but also via Thread. And you still could also use/call it non-concurrently within the same thread just as any other ordinary type/object. \nThis makes it also easier to separate task-logic and concurrency aspects in your unit tests.\nIf you are interested in this question, you might be also interested in the difference between Callable and Runnable.\n\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "@Pino Yes, Thread itself is also a Runnable. However, if you extend it to just use it as a Runnable, what's the point? Why not just use a plain Runnable without all the baggage. So, I'd argue, that if you extend Thread, you also would execute it by using its start method, which can only be used once. That's the point Nidhish-Krishnan wanted to make in his answer. Note, that mine is just a compilation or brief summary of other answers here.",
                "fecha": { "$date" : "2016-04-29T10:15:59Z" },
                "usuario": "J\u00f6rg",
                "usuario_id": 1327
            }
        ],
        "usuario": "J\u00f6rg",
        "usuario_id": 1327
    },
    {
        "_id": 812,
        "fecha": { "$date" : "2014-01-21T16:44:09Z" },
        "decripcion": "\nThis is discussed in Oracle's Defining and Starting a Thread tutorial:\n\n\n  Which of these idioms should you use? The first idiom, which employs a\n  Runnable object, is more general, because the Runnable object can\n  subclass a class other than Thread. The second idiom is easier to use\n  in simple applications, but is limited by the fact that your task\n  class must be a descendant of Thread. This lesson focuses on the first\n  approach, which separates the Runnable task from the Thread object\n  that executes the task. Not only is this approach more flexible, but\n  it is applicable to the high-level thread management APIs covered\n  later.\n\n\nIn other words, implementing Runnable will work in scenarios where your class extends a class other than Thread. Java does not support multiple inheritance. Also, extending Thread will not be possible when using some of the high-level thread management APIs. The only scenario where extending Thread is preferable is in a small application that won't be subject to updates in future. It is almost always better to implement Runnable as it is more flexible as your project grows. A design change won't have a major impact as you can implement many interfaces in java, but only extend one class.\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "Sionnach733",
        "usuario_id": 1328
    },
    {
        "_id": 813,
        "fecha": { "$date" : "2019-01-03T07:18:46Z" },
        "decripcion": "\nThe simplest explanation would be by implementing Runnable we can assign the same object to multiple threads and each Thread shares the same object states and behavior. \n\nFor example, suppose there are two threads, thread1 puts an integer in an array and thread2 takes integers from the array when the array is filled up. Notice that in order for thread2 to work it needs to know the state of array, whether thread1 has filled it up or not. \n\nImplementing Runnable lets you to have this flexibility to share the object whereas extends Thread makes you to create new objects for each threads therefore any update that is done by thread1 is lost to thread2.    \n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "Shababb Karim",
        "usuario_id": 1329
    },
    {
        "_id": 814,
        "fecha": { "$date" : "2017-05-23T11:47:31Z" },
        "decripcion": "\nIf I am not wrong, it's more or less similar to \n\nWhat is the difference between an interface and abstract class?\n\nextends establishes \"Is A\" relation & interface provides \"Has a\" capability.\n\nPrefer implements Runnable :\n\n\nIf you don't have to extend Thread class and modify Thread API default implementation\nIf you are executing a fire and forget command\nIf You are already extending another class\n\n\nPrefer \"extends Thread\" :\n\n\nIf you have to override any of these Thread methods as listed in oracle documentation page\n\n\nGenerally you don't need to override Thread behaviour. So implements Runnable is preferred for most of the times. \n\nOn a different note, using advanced ExecutorService or ThreadPoolExecutorService API provides more flexibility and control.\n\nHave a look at this SE Question:\n\nExecutorService vs Casual Thread Spawner\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Ravindra babu",
        "usuario_id": 1330
    },
    {
        "_id": 815,
        "fecha": { "$date" : "2010-03-08T07:03:06Z" },
        "decripcion": "\nSeparating the Thread class from the Runnable implementation also avoids potential synchronization problems between the thread and the run() method. A separate Runnable generally gives greater flexibility in the way that runnable code is referenced and executed.\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Govula Srinivas",
        "usuario_id": 1331
    },
    {
        "_id": 816,
        "fecha": { "$date" : "2012-08-18T17:47:11Z" },
        "decripcion": "\nRunnable is an interface, while Thread is a class which implements this interface. From a design point of view, there should be a clean separation between how a task is defined and between how it is executed. The former is the responsibility of a Runnalbe implementation, and the latter is job of the Thread class. In most of the cases implementing Runnable is the right way to follow.\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "developer110",
        "usuario_id": 1332
    },
    {
        "_id": 817,
        "fecha": { "$date" : "2013-05-11T08:41:39Z" },
        "decripcion": "\nThat's the S of SOLID: Single responsibility. \n\nA thread embodies the running context (as in execution context: stack frame, thread id, etc.) of the asynchronous execution of a piece of code. That piece of code ideally should be the same implementation, whether synchronous or asynchronous.\n\nIf you bundle them together in one implementation, you give the resulting object two unrelated causes of change:\n\n\nthread handling in your application (ie. querying and modifying the execution context)\nalgorithm implemented by the piece of code (the runnable part)\n\n\nIf the language you use supports partial classes or multiple inheritance, then you can segregate each cause in its own super class, but it boils down to the same as composing the two objects, since their feature sets don't overlap. That's for the theory. \n\nIn practice, generally speaking, a programme does not need to carry more complexity than necessary. If you have one thread working on a specific task, without ever changing that task, there is probably no point in making the tasks separate classes, and your code remains simpler.  \n\nIn the context of Java, since the facility is already there, it is probably easier to start directly with stand alone Runnable classes, and pass their instances to Thread (or Executor) instances. Once used to that pattern, it is not harder to use (or even read) than the simple runnable thread case.\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "didierc",
        "usuario_id": 1333
    },
    {
        "_id": 818,
        "fecha": { "$date" : "2013-07-25T17:29:00Z" },
        "decripcion": "\nOne reason you'd want to implement an interface rather than extend a base class is that you are already extending some other class. You can only extend one class, but you can implement any number of interfaces.\n\nIf you extend Thread, you're basically preventing your logic to be executed by any other thread than 'this'. If you only want some thread to execute your logic, it's better to just implement Runnable.\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "Yes by implementing Runnable interface to are free to implement your own logic by extending any class, thats why Runnable is mostly preferred over Thread class.",
                "fecha": { "$date" : "2013-12-04T06:11:04Z" },
                "usuario": "Akash5288",
                "usuario_id": 1334
            }
        ],
        "usuario": "Nikhil A A",
        "usuario_id": 1335
    },
    {
        "_id": 819,
        "fecha": { "$date" : "2013-09-26T05:58:02Z" },
        "decripcion": "\nif you use runnable you can save the space to extend to any of your other class.\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "user2771655",
        "usuario_id": 1336
    },
    {
        "_id": 820,
        "fecha": { "$date" : "2013-11-22T03:11:51Z" },
        "decripcion": "\nCan we re-visit the basic reason we wanted our class to behave as a Thread?\nThere is no reason at all, we just wanted to execute a task, most likely in an asynchronous mode, which precisely means that the execution of the task must branch from our main thread and the main thread if finishes early, may or may not wait for the branched path(task).\n\nIf this is the whole purpose, then where do I see the need of a specialized Thread. This can be accomplished by picking up a RAW Thread from the System's Thread Pool and assigning it our task (may be an instance of our class) and that is it.\n\nSo let us obey the OOPs concept and write a class of the type we need. There are many ways to do things, doing it in the right way matters. \n\nWe need a task, so write a task definition which can be run on a Thread. So use Runnable.\n\nAlways remember implements is specially used to impart a behaviour and extends is used to impart a feature/property.\n\nWe do not want the thread's property, instead we want our class to behave as a task which can be run.\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "dharam",
        "usuario_id": 1337
    },
    {
        "_id": 821,
        "fecha": { "$date" : "2012-01-28T08:31:16Z" },
        "decripcion": "\nYes,\nIf you call ThreadA call , then  not need to call the start method and run method is call after call the ThreadA class only.\nBut If use the ThreadB call then need to necessary the start thread for call run method.\nIf you have any more help, reply me.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Manoj Kumar",
        "usuario_id": 1338
    },
    {
        "_id": 822,
        "fecha": { "$date" : "2012-06-09T19:09:15Z" },
        "decripcion": "\nI find it is most useful to use Runnable for all the reasons mentioned, but sometimes I like to extend Thread so I can create my own thread stopping method and call it directly on the thread I have created.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Tarvaris Jackson",
        "usuario_id": 1339
    },
    {
        "_id": 823,
        "fecha": { "$date" : "2012-06-09T19:28:31Z" },
        "decripcion": "\nJava does not support multiple inheritence so if you extends Thread class then no other class will be extended. \n\nFor Example: If you create an applet then it must extends Applet class so here the only way to create thread is by implementing Runnable interface\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Himanshu Mohta",
        "usuario_id": 1340
    },
    {
        "_id": 824,
        "fecha": { "$date" : "2014-03-05T06:13:58Z" },
        "decripcion": "\nDifference between Thread and runnable\n.If  we are creating Thread using Thread class then Number of thread equal to number of object we created  .\nIf we are creating thread  by implementing the runnable interface then we can use single object for creating multiple thread.So single object is shared by multiple Thread.So it will take less memory\n\nSo depending upon the requirement if our data is not senstive. So It can be shared between multiple Thread we can used Runnable interface.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Rohit Chugh",
        "usuario_id": 1341
    },
    {
        "_id": 825,
        "fecha": { "$date" : "2015-01-03T09:41:19Z" },
        "decripcion": "\nAdding my two cents here -\nAlways whenever possible use implements Runnable . Below are two caveats on why you should not use \nextends Threads\n\n\nIdeally you should never extend the Thread class; the Thread class should be made final.\nAt least its methods like thread.getId(). \nSee this discussion for a bug related to extending Threads. \nThose who like to solve puzzles can see another side effect of extending Thread. The below code \nwill print unreachable code when nobody is notifying them.\n\n\nPlease see  http://pastebin.com/BjKNNs2G. \n\npublic class WaitPuzzle {\n\n    public static void main(String[] args) throws InterruptedException {\n        DoNothing doNothing = new DoNothing();\n        new WaitForever(doNothing).start();\n        new WaitForever(doNothing).start();\n        new WaitForever(doNothing).start();\n        Thread.sleep(100);\n        doNothing.start();\n        while(true) {\n            Thread.sleep(10);\n        }\n    }\n\n\n    static class WaitForever extends  Thread {\n\n        private DoNothing doNothing;\n\n        public WaitForever(DoNothing doNothing) {\n            this.doNothing =  doNothing;\n        }\n\n        @Override\n        public void run() {\n            synchronized (doNothing) {\n                try {\n                    doNothing.wait(); // will wait forever here as nobody notifies here\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(\"Unreachable Code\");\n            }\n        }\n    }\n\n    static class DoNothing extends Thread {\n\n        @Override\n        public void run() {\n            System.out.println(\"Do Nothing \");\n        }\n    } \n}\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "veritas",
        "usuario_id": 1342
    },
    {
        "_id": 826,
        "fecha": { "$date" : "2014-11-17T16:28:39Z" },
        "decripcion": "\nThe JVM is allowed to assume that other threads do not change the pizzaArrived variable during the loop. In other words, it can hoist the pizzaArrived == false test outside the loop, optimizing this:\n\nwhile (pizzaArrived == false) {}\n\n\ninto this:\n\nif (pizzaArrived == false) while (true) {}\n\n\nwhich is an infinite loop.\n\nTo ensure that changes made by one thread are visible to other threads you must always add some synchronization between the threads. The simplest way to do this is to make the shared variable volatile:\n\nvolatile boolean pizzaArrived = false;\n\n\nMaking a variable volatile guarantees that different threads will see the effects of each other's changes to it. This prevents the JVM from caching the value of pizzaArrived or hoisting the test outside the loop. Instead, it must read the value of the real variable every time.\n\n(More formally, volatile creates a happens-before relationship between accesses to the variable. This means that all other work a thread did before delivering the pizza is also visible to the thread receiving the pizza, even if those other changes are not to volatile variables.)\n\nSynchronized methods are used principally to implement mutual exclusion (preventing two things happening at the same time), but they also have all the same side-effects that volatile has. Using them when reading and writing a variable is another way to make the changes visible to other threads:\n\nclass MyHouse {\n    boolean pizzaArrived = false;\n\n    void eatPizza() {\n        while (getPizzaArrived() == false) {}\n        System.out.println(\"That was delicious!\");\n    }\n\n    synchronized boolean getPizzaArrived() {\n        return pizzaArrived;\n    }\n\n    synchronized void deliverPizza() {\n        pizzaArrived = true;\n    }\n}\n\n\n\n\nThe effect of a print statement\n\nSystem.out is a PrintStream object. The methods of PrintStream are synchronized like this:\n\npublic void println(String x) {\n    synchronized (this) {\n        print(x);\n        newLine();\n    }\n}\n\n\nThe synchronization prevents pizzaArrived being cached during the loop. Strictly speaking, both threads must synchronize on the same object to guarantee that changes to the variable are visible. (For example, calling println after setting pizzaArrived and calling it again before reading pizzaArrived would be correct.) If only one thread synchronizes on a particular object, the JVM is allowed to ignore it. In practice, the JVM is not smart enough to prove that other threads won't call println after setting pizzaArrived, so it assumes that they might. Therefore, it cannot cache the variable during the loop if you call System.out.println. That's why loops like this work when they have a print statement, although it is not a correct fix.\n\nUsing System.out is not the only way to cause this effect, but it is the one people discover most often, when they are trying to debug why their loop doesn't work!\n\n\n\nThe bigger problem\n\nwhile (pizzaArrived == false) {} is a busy-wait loop. That's bad! While it waits, it hogs the CPU, which slows down other applications, and increases the power usage, temperature, and fan speed of the system. Ideally, we would like the loop thread to sleep while it waits, so it does not hog the CPU.\n\nHere are some ways to do that:\n\nUsing wait/notify\n\nA low-level solution is to use the wait/notify methods of Object:\n\nclass MyHouse {\n    boolean pizzaArrived = false;\n\n    void eatPizza() {\n        synchronized (this) {\n            while (!pizzaArrived) {\n                try {\n                    this.wait();\n                } catch (InterruptedException e) {}\n            }\n        }\n\n        System.out.println(\"That was delicious!\");\n    }\n\n    void deliverPizza() {\n        synchronized (this) {\n            pizzaArrived = true;\n            this.notifyAll();\n        }\n    }\n}\n\n\nIn this version of the code, the loop thread calls wait(), which puts the thread the sleep. It will not use any CPU cycles while sleeping. After the second thread sets the variable, it calls notifyAll() to wake up any/all threads which were waiting on that object. This is like having the pizza guy ring the doorbell, so you can sit down and rest while waiting, instead of standing awkwardly at the door.\n\nWhen calling wait/notify on an object you must hold the synchronization lock of that object, which is what the above code does. You can use any object you like so long as both threads use the same object: here I used this (the instance of MyHouse). Usually, two threads would not be able to enter synchronized blocks of the same object simultaneously (which is part of the purpose of synchronization) but it works here because a thread temporarily releases the synchronization lock when it is inside the wait() method.\n\nBlockingQueue\n\nA BlockingQueue is used to implement producer-consumer queues. \"Consumers\" take items from the front of the queue, and \"producers\" push items on at the back. An example:\n\nclass MyHouse {\n    final BlockingQueue<Object> queue = new LinkedBlockingQueue<>();\n\n    void eatFood() throws InterruptedException {\n        // take next item from the queue (sleeps while waiting)\n        Object food = queue.take();\n        // and do something with it\n        System.out.println(\"Eating: \" + food);\n    }\n\n    void deliverPizza() throws InterruptedException {\n        // in producer threads, we push items on to the queue.\n        // if there is space in the queue we can return immediately;\n        // the consumer thread(s) will get to it later\n        queue.put(\"A delicious pizza\");\n    }\n}\n\n\nNote: The put and take methods of BlockingQueue can throw InterruptedExceptions, which are checked exceptions which must be handled. In the above code, for simplicity, the exceptions are rethrown. You might prefer to catch the exceptions in the methods and retry the put or take call to be sure it succeeds. Apart from that one point of ugliness, BlockingQueue is very easy to use.\n\nNo other synchronization is needed here because a BlockingQueue makes sure that everything threads did before putting items in the queue is visible to the threads taking those items out.\n\nExecutors\n\nExecutors are like ready-made BlockingQueues which execute tasks. Example:\n\n// A \"SingleThreadExecutor\" has one work thread and an unlimited queue\nExecutorService executor = Executors.newSingleThreadExecutor();\n\nRunnable eatPizza = () -> { System.out.println(\"Eating a delicious pizza\"); };\nRunnable cleanUp = () -> { System.out.println(\"Cleaning up the house\"); };\n\n// we submit tasks which will be executed on the work thread\nexecutor.execute(eatPizza);\nexecutor.execute(cleanUp);\n// we continue immediately without needing to wait for the tasks to finish\n\n\nFor details see the doc for Executor, ExecutorService, and Executors.\n\nEvent handling\n\nLooping while waiting for the user to click something in a UI is wrong. Instead, use the event handling features of the UI toolkit. In Swing, for example:\n\nJLabel label = new JLabel();\nJButton button = new JButton(\"Click me\");\nbutton.addActionListener((ActionEvent e) -> {\n    // This event listener is run when the button is clicked.\n    // We don't need to loop while waiting.\n    label.setText(\"Button was clicked\");\n});\n\n\nBecause the event handler runs on the event dispatch thread, doing long work in the event handler blocks other interaction with the UI until the work is finished. Slow operations can be started on a new thread, or dispatched to a waiting thread using one of the above techniques (wait/notify, a BlockingQueue, or Executor). You can also use a SwingWorker, which is designed exactly for this, and automatically supplies a background worker thread:\n\nJLabel label = new JLabel();\nJButton button = new JButton(\"Calculate answer\");\n\n// Add a click listener for the button\nbutton.addActionListener((ActionEvent e) -> {\n\n    // Defines MyWorker as a SwingWorker whose result type is String:\n    class MyWorker extends SwingWorker<String,Void> {\n        @Override\n        public String doInBackground() throws Exception {\n            // This method is called on a background thread.\n            // You can do long work here without blocking the UI.\n            // This is just an example:\n            Thread.sleep(5000);\n            return \"Answer is 42\";\n        }\n\n        @Override\n        protected void done() {\n            // This method is called on the Swing thread once the work is done\n            String result;\n            try {\n                result = get();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n            label.setText(result); // will display \"Answer is 42\"\n        }\n    }\n\n    // Start the worker\n    new MyWorker().execute();\n});\n\n\nTimers\n\nTo perform periodic actions, you can use a java.util.Timer. It is easier to use than writing your own timing loop, and easier to start and stop. This demo prints the current time once per second:\n\nTimer timer = new Timer();\nTimerTask task = new TimerTask() {\n    @Override\n    public void run() {\n        System.out.println(System.currentTimeMillis());\n    }\n};\ntimer.scheduleAtFixedRate(task, 0, 1000);\n\n\nEach java.util.Timer has its own background thread which is used to execute its scheduled TimerTasks. Naturally, the thread sleeps between tasks, so it does not hog the CPU.\n\nIn Swing code, there is also a javax.swing.Timer, which is similar, but it executes the listener on the Swing thread, so you can safely interact with Swing components without needing to manually switch threads:\n\nJFrame frame = new JFrame();\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nTimer timer = new Timer(1000, (ActionEvent e) -> {\n    frame.setTitle(String.valueOf(System.currentTimeMillis()));\n});\ntimer.setRepeats(true);\ntimer.start();\nframe.setVisible(true);\n\n\nOther ways\n\nIf you are writing multithreaded code, it is worth exploring the classes in these packages to see what is available:\n\n\njava.util.concurrent\njava.util.concurrent.atomic\njava.util.concurrent.locks\n\n\nAnd also see the Concurrency section of the Java tutorials. Multithreading is complicated, but there is lots of help available!\n    ",
        "votes": 163,
        "comentarios": [
            {
                "decripcion": "Very professional answer, after reading this no misconception is left on my mind, thank you",
                "fecha": { "$date" : "2015-08-30T12:39:14Z" },
                "usuario": "Humoyun Ahmad",
                "usuario_id": 1347
            },
            {
                "decripcion": "Awesome answer. I am working with Java threads for quite a while and still learned something here (wait() releases the synchronization lock!).",
                "fecha": { "$date" : "2015-10-15T20:05:00Z" },
                "usuario": "brimborium",
                "usuario_id": 1348
            },
            {
                "decripcion": "Thank you, Boann! Great answer, it's like a full article with examples! Yes, also liked \"wait() releases the synchronization lock\"",
                "fecha": { "$date" : "2016-10-14T17:28:49Z" },
                "usuario": "Kiryl Ivanou",
                "usuario_id": 1349
            },
            {
                "decripcion": "java public class ThreadTest {     private static boolean flag = false;      private static class Reader extends Thread {          @Override         public void run() {             while(flag == false) {}             System.out.println(flag);         }      }      public static void main(String[] args) {         new Reader().start();         flag = true;     } }  @Boann, this code doesn't  hoist the pizzaArrived == false test outside the loop, and loop can see flag changed by main thread,why?",
                "fecha": { "$date" : "2019-12-21T18:30:47Z" },
                "usuario": "gaussclb",
                "usuario_id": 1350
            },
            {
                "decripcion": "@gaussclb If you mean that you decompiled a class file, correct. The Java compiler does almost no optimization. The hoisting is done by the JVM. You need to disassemble the native machine code. Try: wiki.openjdk.java.net/display/HotSpot/PrintAssembly",
                "fecha": { "$date" : "2019-12-22T13:48:24Z" },
                "usuario": "Boann",
                "usuario_id": 613
            }
        ],
        "usuario": "Boann",
        "usuario_id": 613
    },
    {
        "_id": 827,
        "fecha": { "$date" : "2013-11-05T10:26:54Z" },
        "decripcion": "\n#include <thread>\n#include <iostream>\n\nclass bar {\npublic:\n  void foo() {\n    std::cout << \"hello from member function\" << std::endl;\n  }\n};\n\nint main()\n{\n  std::thread t(&bar::foo, bar());\n  t.join();\n}\n\n\nEDIT:\nAccounting your edit, you have to do it like this:\n\n  std::thread spawn() {\n    return std::thread(&blub::test, this);\n  }\n\n\n\n\nUPDATE: I want to explain some more points, some of them have also been discussed in the comments.\n\nThe syntax described above is defined in terms of the INVOKE definition (\u00a720.8.2.1):\n\n\n  Define INVOKE (f, t1, t2, ..., tN) as follows: \n  \n  \n  (t1.*f)(t2, ..., tN) when f is a pointer to a member function of a class T and t1 is an object of type T or a reference to an object of\n  type T or a reference to an object of a type derived from T;\n  ((*t1).*f)(t2, ..., tN) when f is a pointer to a member function of a class T and t1 is not one of the types described in the previous\n  item;\n  t1.*f when N ==    1 and f is a pointer to member data of a class T and  t  1 is an object of type T or a\n  reference to an object of type T or a reference to an object of a\n  type derived from T;\n  (*t1).*f when N == 1 and f is a pointer to member data of a class T and t 1 is not one of the types described in the previous item;\n  f(t1, t2, ..., tN) in all other cases.\n  \n\n\n\n\nAnother general fact which I want to point out is that by default the thread constructor will copy all arguments passed to it. The reason for this is that the arguments may need to outlive the calling thread, copying the arguments guarantees that. Instead, if you want to really pass a reference, you can use a std::reference_wrapper created by std::ref.\n\nstd::thread (foo, std::ref(arg1));\n\n\nBy doing this, you are promising that you will take care of guaranteeing that the arguments will still exist when the thread operates on them.\n\n\n\nNote that all the things mentioned above can also be applied to std::async and std::bind.\n    ",
        "votes": 433,
        "comentarios": [
            {
                "decripcion": "At least this way it compiles. Though I have no idea why you are passing the instance as the second argument.",
                "fecha": { "$date" : "2012-05-20T13:37:46Z" },
                "usuario": "abergmeier",
                "usuario_id": 1351
            },
            {
                "decripcion": "@LCID: The multi-argument version of the std::thread constructor works as if the arguments were passed to std::bind.  To call a member function, the first argument to std::bind must be a pointer, reference, or shared pointer to an object of the appropriate type.",
                "fecha": { "$date" : "2012-05-20T13:49:51Z" },
                "usuario": "Dave S",
                "usuario_id": 1352
            },
            {
                "decripcion": "Where do you take it from that the constructor acts like an implicit bind? I can't find that anywhere.",
                "fecha": { "$date" : "2012-05-20T13:58:56Z" },
                "usuario": "Kerrek SB",
                "usuario_id": 1353
            },
            {
                "decripcion": "@KerrekSB, compare [thread.thread.constr]p4 with [func.bind.bind]p3, the semantics are quite similar, defined in terms of the INVOKE pseudocode, which defines how member functions are called",
                "fecha": { "$date" : "2012-05-20T14:39:04Z" },
                "usuario": "Jonathan Wakely",
                "usuario_id": 1354
            },
            {
                "decripcion": "remember that not static member functions as first parameter take instance of class (it's not visible for programmer), so when passing this method as raw function you will always encounter a problem during compilation and declaration mismatch.",
                "fecha": { "$date" : "2013-10-10T11:56:54Z" },
                "usuario": "zoska",
                "usuario_id": 1355
            }
        ],
        "usuario": "Stephan Dollberg",
        "usuario_id": 1356
    },
    {
        "_id": 828,
        "fecha": { "$date" : "2020-07-12T18:30:35Z" },
        "decripcion": "\nSince you are using C++11, lambda-expression is a nice&clean solution.\nclass blub {\n    void test() {}\n  public:\n    std::thread spawn() {\n      return std::thread( [this] { this->test(); } );\n    }\n};\n\nsince this-> can be omitted, it could be shorten to:\nstd::thread( [this] { test(); } )\n\nor just (deprecated)\nstd::thread( [=] { test(); } )\n    ",
        "votes": 117,
        "comentarios": [
            {
                "decripcion": "In general, you shouldn't use std::move when returning a local variable by value.  This actually inhibits RVO.  If you just return by value (without the move) the compiler may use RVO, and if it doesn't the standard says it has to invoke move semantics.",
                "fecha": { "$date" : "2013-10-10T11:53:41Z" },
                "usuario": "zmb",
                "usuario_id": 1357
            },
            {
                "decripcion": "@zmb, with the exception that you want code to compile on VC10, you have to move if the return type is not CopyConstructable.",
                "fecha": { "$date" : "2013-10-10T13:20:06Z" },
                "usuario": "abergmeier",
                "usuario_id": 1351
            },
            {
                "decripcion": "RVO still generates better code than move semantics, and is not going away.",
                "fecha": { "$date" : "2014-10-09T10:41:40Z" },
                "usuario": "Jonathan Wakely",
                "usuario_id": 1354
            },
            {
                "decripcion": "Be careful with [=]. With that you can inadvertently copy a huge object. In general, it's a code smell to use [&] or [=].",
                "fecha": { "$date" : "2016-09-09T08:37:13Z" },
                "usuario": "rustyx",
                "usuario_id": 1358
            },
            {
                "decripcion": "@Everyone Don't forget it's a thread here. This means the lambda function may outlive its context scope. So by using capturing-by-reference ([&]), you may introduce bugs like some dangling references. (For example, std::thread spawn() { int i = 10; return std::thread( [&] { std::cout<<i<<\"\\n\"; } ); })",
                "fecha": { "$date" : "2018-01-09T08:13:18Z" },
                "usuario": "RnMss",
                "usuario_id": 1359
            }
        ],
        "usuario": "RnMss",
        "usuario_id": 1359
    },
    {
        "_id": 829,
        "fecha": { "$date" : "2015-08-24T07:31:53Z" },
        "decripcion": "\nHere is a complete example\n\n#include <thread>\n#include <iostream>\n\nclass Wrapper {\n   public:\n      void member1() {\n          std::cout << \"i am member1\" << std::endl;\n      }\n      void member2(const char *arg1, unsigned arg2) {\n          std::cout << \"i am member2 and my first arg is (\" << arg1 << \") and second arg is (\" << arg2 << \")\" << std::endl;\n      }\n      std::thread member1Thread() {\n          return std::thread([=] { member1(); });\n      }\n      std::thread member2Thread(const char *arg1, unsigned arg2) {\n          return std::thread([=] { member2(arg1, arg2); });\n      }\n};\nint main(int argc, char **argv) {\n   Wrapper *w = new Wrapper();\n   std::thread tw1 = w->member1Thread();\n   std::thread tw2 = w->member2Thread(\"hello\", 100);\n   tw1.join();\n   tw2.join();\n   return 0;\n}\n\n\nCompiling with g++ produces the following result\n\ng++ -Wall -std=c++11 hello.cc -o hello -pthread\n\ni am member1\ni am member2 and my first arg is (hello) and second arg is (100)\n\n    ",
        "votes": 33,
        "comentarios": [
            {
                "decripcion": "not really relevant to the OP question, but why do you allocate Wrapper on the heap (and not deallocate it)? do you have java/c# background?",
                "fecha": { "$date" : "2016-10-13T13:34:19Z" },
                "usuario": "Alessandro Teruzzi",
                "usuario_id": 1360
            },
            {
                "decripcion": "Don't forget to delete the memory from heap :)",
                "fecha": { "$date" : "2020-03-21T21:03:28Z" },
                "usuario": "Slack Bot",
                "usuario_id": 1361
            },
            {
                "decripcion": "There is no reason to delete an object right before the program ends.  Don't memory shame people for no reason.",
                "fecha": { "$date" : "2020-08-15T23:19:42Z" },
                "usuario": "CaptainCodeman",
                "usuario_id": 1362
            }
        ],
        "usuario": "hop5",
        "usuario_id": 1363
    },
    {
        "_id": 830,
        "fecha": { "$date" : "2017-11-18T08:32:51Z" },
        "decripcion": "\n@hop5 and @RnMss suggested to use C++11 lambdas, but if you deal with pointers, you can use them directly:\n\n#include <thread>\n#include <iostream>\n\nclass CFoo {\n  public:\n    int m_i = 0;\n    void bar() {\n      ++m_i;\n    }\n};\n\nint main() {\n  CFoo foo;\n  std::thread t1(&CFoo::bar, &foo);\n  t1.join();\n  std::thread t2(&CFoo::bar, &foo);\n  t2.join();\n  std::cout << foo.m_i << std::endl;\n  return 0;\n}\n\n\noutputs\n\n2\n\n\nRewritten sample from this answer would be then:\n\n#include <thread>\n#include <iostream>\n\nclass Wrapper {\n  public:\n      void member1() {\n          std::cout << \"i am member1\" << std::endl;\n      }\n      void member2(const char *arg1, unsigned arg2) {\n          std::cout << \"i am member2 and my first arg is (\" << arg1 << \") and second arg is (\" << arg2 << \")\" << std::endl;\n      }\n      std::thread member1Thread() {\n          return std::thread(&Wrapper::member1, this);\n      }\n      std::thread member2Thread(const char *arg1, unsigned arg2) {\n          return std::thread(&Wrapper::member2, this, arg1, arg2);\n      }\n};\n\nint main() {\n  Wrapper *w = new Wrapper();\n  std::thread tw1 = w->member1Thread();\n  tw1.join();\n  std::thread tw2 = w->member2Thread(\"hello\", 100);\n  tw2.join();\n  return 0;\n}\n\n    ",
        "votes": 24,
        "comentarios": [],
        "usuario": "Andrey Starodubtsev",
        "usuario_id": 1364
    },
    {
        "_id": 831,
        "fecha": { "$date" : "2017-02-20T18:43:31Z" },
        "decripcion": "\nSome users have already given their answer and explained it very well.\n\nI would like to add few more things related to thread.\n\n\nHow to work with functor and thread. \nPlease refer to below example.\nThe thread will make its own copy of the object while passing the object.\n\n#include<thread>\n#include<Windows.h>\n#include<iostream>\n\nusing namespace std;\n\nclass CB\n{\n\npublic:\n    CB()\n    {\n        cout << \"this=\" << this << endl;\n    }\n    void operator()();\n};\n\nvoid CB::operator()()\n{\n    cout << \"this=\" << this << endl;\n    for (int i = 0; i < 5; i++)\n    {\n        cout << \"CB()=\" << i << endl;\n        Sleep(1000);\n    }\n}\n\nvoid main()\n{\n    CB obj;     // please note the address of obj.\n\n    thread t(obj); // here obj will be passed by value \n                   //i.e. thread will make it own local copy of it.\n                    // we can confirm it by matching the address of\n                    //object printed in the constructor\n                    // and address of the obj printed in the function\n\n    t.join();\n}\n\n\n\nAnother way of achieving the same thing is like:\n\nvoid main()\n{\n    thread t((CB()));\n\n    t.join();\n}\n\n\nBut if you want to pass the object by reference then use the below syntax:\n\nvoid main()\n{\n    CB obj;\n    //thread t(obj);\n    thread t(std::ref(obj));\n    t.join();\n}\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Mohit",
        "usuario_id": 1365
    },
    {
        "_id": 832,
        "fecha": { "$date" : "2020-07-25T11:40:16Z" },
        "decripcion": "\nYou may use the signal package if you are running on UNIX:\nIn [1]: import signal\n\n# Register an handler for the timeout\nIn [2]: def handler(signum, frame):\n   ...:     print(\"Forever is over!\")\n   ...:     raise Exception(\"end of time\")\n   ...: \n\n# This function *may* run for an indetermined time...\nIn [3]: def loop_forever():\n   ...:     import time\n   ...:     while 1:\n   ...:         print(\"sec\")\n   ...:         time.sleep(1)\n   ...:         \n   ...:         \n\n# Register the signal function handler\nIn [4]: signal.signal(signal.SIGALRM, handler)\nOut[4]: 0\n\n# Define a timeout for your function\nIn [5]: signal.alarm(10)\nOut[5]: 0\n\nIn [6]: try:\n   ...:     loop_forever()\n   ...: except Exception, exc: \n   ...:     print(exc)\n   ....: \nsec\nsec\nsec\nsec\nsec\nsec\nsec\nsec\nForever is over!\nend of time\n\n# Cancel the timer if the function returned before timeout\n# (ok, mine won't but yours maybe will :)\nIn [7]: signal.alarm(0)\nOut[7]: 0\n\n10 seconds after the call signal.alarm(10), the handler is called. This raises an exception that you can intercept from the regular Python code.\nThis module doesn't play well with threads (but then, who does?)\nNote that since we raise an exception when timeout happens, it may end up caught and ignored inside the function, for example of one such function:\ndef loop_forever():\n    while 1:\n        print('sec')\n        try:\n            time.sleep(10)\n        except:\n            continue\n\n    ",
        "votes": 276,
        "comentarios": [
            {
                "decripcion": "I use Python 2.5.4. There is such an error: Traceback (most recent call last):   File \"aa.py\", line 85, in func     signal.signal(signal.SIGALRM, handler) AttributeError: 'module' object has no attribute 'SIGALRM'",
                "fecha": { "$date" : "2011-05-13T01:59:51Z" },
                "usuario": "flypen",
                "usuario_id": 1368
            },
            {
                "decripcion": "@flypen that's because signal.alarm and the related SIGALRM are not available on Windows platforms.",
                "fecha": { "$date" : "2011-08-19T16:20:28Z" },
                "usuario": "Double AA",
                "usuario_id": 1369
            },
            {
                "decripcion": "If there are a lot of processes, and each calls signal.signal --- will they all work properly? Won't each signal.signal call cancel \"concurrent\" one?",
                "fecha": { "$date" : "2012-05-10T08:28:47Z" },
                "usuario": "brownian",
                "usuario_id": 1370
            },
            {
                "decripcion": "Warning for those wishing to use this with a C extension: The Python signal handler won't be called until the C function returns control to the Python interpreter. For this use case, use ATOzTOA's answer: stackoverflow.com/a/14924210/1286628",
                "fecha": { "$date" : "2014-02-20T20:25:26Z" },
                "usuario": "wkschwartz",
                "usuario_id": 1371
            },
            {
                "decripcion": "I second the warning about threads.  signal.alarm only works on main thread. I tried to use this in Django views - immediate fail with verbiage about main thread only.",
                "fecha": { "$date" : "2015-04-02T06:51:30Z" },
                "usuario": "JL Peyret",
                "usuario_id": 1372
            }
        ],
        "usuario": "piro",
        "usuario_id": 1373
    },
    {
        "_id": 833,
        "fecha": { "$date" : "2020-09-21T10:08:55Z" },
        "decripcion": "\nYou can use multiprocessing.Process to do exactly that.\nCode\nimport multiprocessing\nimport time\n\n# bar\ndef bar():\n    for i in range(100):\n        print \"Tick\"\n        time.sleep(1)\n\nif __name__ == '__main__':\n    # Start bar as a process\n    p = multiprocessing.Process(target=bar)\n    p.start()\n\n    # Wait for 10 seconds or until process finishes\n    p.join(10)\n\n    # If thread is still active\n    if p.is_alive():\n        print \"running... let's kill it...\"\n\n        # Terminate - may not work if process is stuck for good\n        p.terminate()\n        # OR Kill - will work for sure, no chance for process to finish nicely however\n        # p.kill()\n\n        p.join()\n\n    ",
        "votes": 188,
        "comentarios": [
            {
                "decripcion": "How can I get the return value of the target method ?",
                "fecha": { "$date" : "2015-08-11T07:05:10Z" },
                "usuario": "bad_keypoints",
                "usuario_id": 1374
            },
            {
                "decripcion": "This doesn't seem to work if the called function gets stuck on an I/O block.",
                "fecha": { "$date" : "2016-07-29T18:35:06Z" },
                "usuario": "sudo",
                "usuario_id": 1375
            },
            {
                "decripcion": "@bad_keypoints See this answer: stackoverflow.com/a/10415215/1384471 Basically, you pass a list along that you put the answer into.",
                "fecha": { "$date" : "2016-12-15T10:19:31Z" },
                "usuario": "Peter",
                "usuario_id": 1376
            },
            {
                "decripcion": "@sudo then remove the join(). that makes your x number of concurrent subprocesses being running untill them finish their work, or amount defined in join(10). Case you have a blocking I/O for 10 processes, using join(10) you have set them to wait all of them max 10 for EACH process that has started. Use daemon flag like this example stackoverflow.com/a/27420072/2480481. Of course u can pass flag daemon=True directly to multiprocessing.Process() function.",
                "fecha": { "$date" : "2017-01-02T11:35:10Z" },
                "usuario": "m3nda",
                "usuario_id": 1377
            },
            {
                "decripcion": "@ATOzTOA the problem with this solution, at least for my purposes, is that it potentially does not allow children treads to clean after themselves. From documentation of terminate function terminate() ... Note that exit handlers and finally clauses, etc., will not be executed. Note that descendant processes of the process will not be terminated \u2013 they will simply become orphaned.",
                "fecha": { "$date" : "2017-05-10T14:03:37Z" },
                "usuario": "abalcerek",
                "usuario_id": 1378
            }
        ],
        "usuario": "ATOzTOA",
        "usuario_id": 1379
    },
    {
        "_id": 834,
        "fecha": { "$date" : "2017-05-23T12:34:42Z" },
        "decripcion": "\n\n  How do I call the function or what do I wrap it in so that if it takes longer than 5 seconds the script cancels it?\n\n\nI posted a gist that solves this question/problem with a decorator and a threading.Timer. Here it is with a breakdown. \n\nImports and setups for compatibility\n\nIt was tested with Python 2 and 3. It should also work under Unix/Linux and Windows.\n\nFirst the imports. These attempt to keep the code consistent regardless of the Python version:\n\nfrom __future__ import print_function\nimport sys\nimport threading\nfrom time import sleep\ntry:\n    import thread\nexcept ImportError:\n    import _thread as thread\n\n\nUse version independent code:\n\ntry:\n    range, _print = xrange, print\n    def print(*args, **kwargs): \n        flush = kwargs.pop('flush', False)\n        _print(*args, **kwargs)\n        if flush:\n            kwargs.get('file', sys.stdout).flush()            \nexcept NameError:\n    pass\n\n\nNow we have imported our functionality from the standard library. \n\nexit_after decorator\n\nNext we need a function to terminate the main() from the child thread:\n\ndef quit_function(fn_name):\n    # print to stderr, unbuffered in Python 2.\n    print('{0} took too long'.format(fn_name), file=sys.stderr)\n    sys.stderr.flush() # Python 3 stderr is likely buffered.\n    thread.interrupt_main() # raises KeyboardInterrupt\n\n\nAnd here is the decorator itself:\n\ndef exit_after(s):\n    '''\n    use as decorator to exit process if \n    function takes longer than s seconds\n    '''\n    def outer(fn):\n        def inner(*args, **kwargs):\n            timer = threading.Timer(s, quit_function, args=[fn.__name__])\n            timer.start()\n            try:\n                result = fn(*args, **kwargs)\n            finally:\n                timer.cancel()\n            return result\n        return inner\n    return outer\n\n\nUsage\n\nAnd here's the usage that directly answers your question about exiting after 5 seconds!:\n\n@exit_after(5)\ndef countdown(n):\n    print('countdown started', flush=True)\n    for i in range(n, -1, -1):\n        print(i, end=', ', flush=True)\n        sleep(1)\n    print('countdown finished')\n\n\nDemo:\n\n>>> countdown(3)\ncountdown started\n3, 2, 1, 0, countdown finished\n>>> countdown(10)\ncountdown started\n10, 9, 8, 7, 6, countdown took too long\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 11, in inner\n  File \"<stdin>\", line 6, in countdown\nKeyboardInterrupt\n\n\nThe second function call will not finish, instead the process should exit with a traceback!\n\nKeyboardInterrupt does not always stop a sleeping thread\n\nNote that sleep will not always be interrupted by a keyboard interrupt, on Python 2 on Windows, e.g.:\n\n@exit_after(1)\ndef sleep10():\n    sleep(10)\n    print('slept 10 seconds')\n\n>>> sleep10()\nsleep10 took too long         # Note that it hangs here about 9 more seconds\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 11, in inner\n  File \"<stdin>\", line 3, in sleep10\nKeyboardInterrupt\n\n\nnor is it likely to interrupt code running in extensions unless it explicitly checks for PyErr_CheckSignals(), see  Cython, Python and KeyboardInterrupt ignored\n\nI would avoid sleeping a thread more than a second, in any case - that's an eon in processor time.\n\n\n  How do I call the function or what do I wrap it in so that if it takes longer than 5 seconds the script cancels it and does something else?\n\n\nTo catch it and do something else, you can catch the KeyboardInterrupt.\n\n>>> try:\n...     countdown(10)\n... except KeyboardInterrupt:\n...     print('do something else')\n... \ncountdown started\n10, 9, 8, 7, 6, countdown took too long\ndo something else\n\n    ",
        "votes": 93,
        "comentarios": [
            {
                "decripcion": "I didn't read your whole post yet, but I just wondered: what if flush is 0? That would be interpreted as False in the if-statement underneath, right?",
                "fecha": { "$date" : "2019-03-17T07:17:16Z" },
                "usuario": "Koenraad van Duin",
                "usuario_id": 1380
            },
            {
                "decripcion": "Why do I have to call thread.interrupt_main(), why can't I directly raise an exception?",
                "fecha": { "$date" : "2019-07-30T20:54:18Z" },
                "usuario": "Anirban Nag 'tintinmj'",
                "usuario_id": 1381
            },
            {
                "decripcion": "Any thoughts on wrapping multiprocessing.connection.Client with this? - Trying to solve: stackoverflow.com/questions/57817955/\u2026",
                "fecha": { "$date" : "2019-09-08T16:59:49Z" },
                "usuario": "wwii",
                "usuario_id": 1382
            },
            {
                "decripcion": "It hangs on thread.interrupt_main() when I try different function instead of countdown. For example I run a subprocess() inside the count which didn't terminated even the timer is completed, I had to press ^C",
                "fecha": { "$date" : "2020-08-06T12:06:43Z" },
                "usuario": "alper",
                "usuario_id": 1253
            },
            {
                "decripcion": "How do you stop just all processes but not raise an the error KeyboardInterrupt?",
                "fecha": { "$date" : "2021-03-04T17:46:02Z" },
                "usuario": "JohnAndrews",
                "usuario_id": 1383
            }
        ],
        "usuario": "Aaron Hall",
        "usuario_id": 119
    },
    {
        "_id": 835,
        "fecha": { "$date" : "2012-12-11T13:41:31Z" },
        "decripcion": "\nI have a different proposal which is a pure function (with the same API as the threading suggestion) and seems to work fine (based on suggestions on this thread)\n\ndef timeout(func, args=(), kwargs={}, timeout_duration=1, default=None):\n    import signal\n\n    class TimeoutError(Exception):\n        pass\n\n    def handler(signum, frame):\n        raise TimeoutError()\n\n    # set the timeout handler\n    signal.signal(signal.SIGALRM, handler) \n    signal.alarm(timeout_duration)\n    try:\n        result = func(*args, **kwargs)\n    except TimeoutError as exc:\n        result = default\n    finally:\n        signal.alarm(0)\n\n    return result\n\n    ",
        "votes": 59,
        "comentarios": [
            {
                "decripcion": "You should also restore the original signal handler. See stackoverflow.com/questions/492519/\u2026",
                "fecha": { "$date" : "2013-06-11T15:21:21Z" },
                "usuario": "Martin Konecny",
                "usuario_id": 1384
            },
            {
                "decripcion": "One more note: The Unix signal method only works if you are applying it in the main thread. Applying it in a sub-thread throws an exception and will not work.",
                "fecha": { "$date" : "2013-06-12T20:23:14Z" },
                "usuario": "Martin Konecny",
                "usuario_id": 1384
            },
            {
                "decripcion": "This is not the best solution because it only works on linux.",
                "fecha": { "$date" : "2014-03-13T20:10:15Z" },
                "usuario": "max",
                "usuario_id": 301
            },
            {
                "decripcion": "Max, not true - works on any POSIX-compliant unix.  I think your comment should be more accurately, doesn't work on Windows.",
                "fecha": { "$date" : "2015-11-16T19:41:06Z" },
                "usuario": "Chris Johnson",
                "usuario_id": 1385
            },
            {
                "decripcion": "You should avoid setting kwargs to an empty dict. A common Python gotcha is that default arguments on functions are mutable. So that dictionary will be shared across all calls to timeout. It is much better to set the default to None and, on the first line of the function, add kwargs = kwargs or {}. Args is okay because tuples are not mutable.",
                "fecha": { "$date" : "2016-08-12T17:13:38Z" },
                "usuario": "scottmrogowski",
                "usuario_id": 1386
            }
        ],
        "usuario": "Alex",
        "usuario_id": 24
    },
    {
        "_id": 836,
        "fecha": { "$date" : "2016-04-24T01:33:36Z" },
        "decripcion": "\nI ran across this thread when searching for a timeout call on unit tests.  I didn't find anything simple in the answers or 3rd party packages so I wrote the decorator below you can drop right into code:\n\nimport multiprocessing.pool\nimport functools\n\ndef timeout(max_timeout):\n    \"\"\"Timeout decorator, parameter in seconds.\"\"\"\n    def timeout_decorator(item):\n        \"\"\"Wrap the original function.\"\"\"\n        @functools.wraps(item)\n        def func_wrapper(*args, **kwargs):\n            \"\"\"Closure for function.\"\"\"\n            pool = multiprocessing.pool.ThreadPool(processes=1)\n            async_result = pool.apply_async(item, args, kwargs)\n            # raises a TimeoutError if execution exceeds max_timeout\n            return async_result.get(max_timeout)\n        return func_wrapper\n    return timeout_decorator\n\n\nThen it's as simple as this to timeout a test or any function you like:\n\n@timeout(5.0)  # if execution takes longer than 5 seconds, raise a TimeoutError\ndef test_base_regression(self):\n    ...\n\n    ",
        "votes": 35,
        "comentarios": [
            {
                "decripcion": "Be careful since this does not terminate the function after timeout is reached!",
                "fecha": { "$date" : "2016-09-16T10:35:18Z" },
                "usuario": "Sylvain",
                "usuario_id": 1387
            },
            {
                "decripcion": "Note that on Windows, this spawns an entirely new process - which will eat into the time to timeout, perhaps by a lot if the dependencies take a long time to set up.",
                "fecha": { "$date" : "2017-01-11T17:59:51Z" },
                "usuario": "Aaron Hall\u2666",
                "usuario_id": 118
            },
            {
                "decripcion": "Yes, this needs some tweaking. It leaves threads going forever.",
                "fecha": { "$date" : "2017-01-28T21:15:00Z" },
                "usuario": "sudo",
                "usuario_id": 1375
            },
            {
                "decripcion": "IDK if this is the best way, but you can try/catch Exception inside of func_wrapper and do pool.close() after the catch to ensure the thread always dies afterwards no matter what. Then you can throw TimeoutError or whatever you want after. Seems to work for me.",
                "fecha": { "$date" : "2017-01-28T21:23:36Z" },
                "usuario": "sudo",
                "usuario_id": 1375
            },
            {
                "decripcion": "This is usefull, but once I have done it lots of times, I get RuntimeError: can't start new thread. Will it still work if I ignore it or is there something else I can do to get around this? Thanks in advance!",
                "fecha": { "$date" : "2017-07-26T12:39:50Z" },
                "usuario": "Benjie",
                "usuario_id": 1388
            }
        ],
        "usuario": "Rich",
        "usuario_id": 1389
    },
    {
        "_id": 837,
        "fecha": { "$date" : "2015-02-15T12:43:32Z" },
        "decripcion": "\nThe stopit package, found on pypi, seems to handle timeouts well.\n\nI like the @stopit.threading_timeoutable decorator, which adds a timeout parameter to the decorated function, which does what you expect, it stops the function.\n\nCheck it out on pypi: https://pypi.python.org/pypi/stopit\n    ",
        "votes": 31,
        "comentarios": [
            {
                "decripcion": "Library claims, some functionality does not work in Windows.",
                "fecha": { "$date" : "2019-06-03T16:48:17Z" },
                "usuario": "Stefan Simik",
                "usuario_id": 1390
            },
            {
                "decripcion": "For people who might get confused as me: The stopit.utils.TimeoutException doesn't stop your code! The code continues normal after this! I have spend 30 min in a program that was functioning normally..  Really good answer!",
                "fecha": { "$date" : "2020-09-01T08:08:33Z" },
                "usuario": "Charalamm",
                "usuario_id": 1391
            },
            {
                "decripcion": "With stopit-1.1.2 the basic timeout decorator: @stopit.threading_timeoutable(default='not finished') works well on Linux and Windows as well. Simple and excellent solution if you only want a simple timeout.",
                "fecha": { "$date" : "2021-08-19T07:49:02Z" },
                "usuario": "Bence Kaulics",
                "usuario_id": 1392
            }
        ],
        "usuario": "egeland",
        "usuario_id": 1393
    },
    {
        "_id": 838,
        "fecha": { "$date" : "2017-10-23T21:30:52Z" },
        "decripcion": "\nThere are a lot of suggestions, but none using concurrent.futures, which I think is the most legible way to handle this.\n\nfrom concurrent.futures import ProcessPoolExecutor\n\n# Warning: this does not terminate function if timeout\ndef timeout_five(fnc, *args, **kwargs):\n    with ProcessPoolExecutor() as p:\n        f = p.submit(fnc, *args, **kwargs)\n        return f.result(timeout=5)\n\n\nSuper simple to read and maintain.\n\nWe make a pool, submit a single process and then wait up to 5 seconds before raising a TimeoutError that you could catch and handle however you needed.\n\nNative to python 3.2+ and backported to 2.7 (pip install futures).\n\nSwitching between threads and processes is as simple as replacing ProcessPoolExecutor with ThreadPoolExecutor.\n\nIf you want to terminate the Process on timeout I would suggest looking into Pebble.\n    ",
        "votes": 19,
        "comentarios": [
            {
                "decripcion": "What does \"Warning: this does not terminate function if timeout\" mean?",
                "fecha": { "$date" : "2017-12-08T16:25:34Z" },
                "usuario": "Scott Stafford",
                "usuario_id": 1394
            },
            {
                "decripcion": "@ScottStafford Processes/threads don't end just because a TimeoutError has been raised. So the process or the thread will still try to run to completion and will not automatically give you back control at your timeout.",
                "fecha": { "$date" : "2017-12-11T07:59:26Z" },
                "usuario": "Brian",
                "usuario_id": 176
            },
            {
                "decripcion": "Would this let me save any results that are intermediate at that time? e.g. if I have recursive function that I set timeout to 5, and in that time I have partial results, how do I write the function to return the partial results on timeout?",
                "fecha": { "$date" : "2018-03-16T11:49:22Z" },
                "usuario": "SumNeuron",
                "usuario_id": 1395
            },
            {
                "decripcion": "I'm using exactly this, however I have a 1000 tasks, each is allowed 5 seconds before timeout. My problem is that cores get clogged on tasks that never end b'cause the timeout is only applied on the total of tasks not on individual tasks. concurrent.futures does not provide a solution to this afaik.",
                "fecha": { "$date" : "2019-04-01T04:42:08Z" },
                "usuario": "Bastiaan",
                "usuario_id": 1396
            }
        ],
        "usuario": "Brian",
        "usuario_id": 176
    },
    {
        "_id": 839,
        "fecha": { "$date" : "2018-08-08T12:06:25Z" },
        "decripcion": "\nGreat, easy to use and reliable PyPi project timeout-decorator (https://pypi.org/project/timeout-decorator/)\n\ninstallation:\n\npip install timeout-decorator\n\n\nUsage:\n\nimport time\nimport timeout_decorator\n\n@timeout_decorator.timeout(5)\ndef mytest():\n    print \"Start\"\n    for i in range(1,10):\n        time.sleep(1)\n        print \"%d seconds have passed\" % i\n\nif __name__ == '__main__':\n    mytest()\n\n    ",
        "votes": 16,
        "comentarios": [
            {
                "decripcion": "I appreciate the clear solution. But could anyone explain how this library works, especially when dealing with multithreading. Personally I fear to use an unknown machanism to handle threads or signals.",
                "fecha": { "$date" : "2018-11-25T03:07:06Z" },
                "usuario": "wsysuper",
                "usuario_id": 1397
            },
            {
                "decripcion": "@wsysuper the lib has 2 modes of operations: open new thread or a new subprocess (which suppose to be thread safe)",
                "fecha": { "$date" : "2018-12-02T13:35:33Z" },
                "usuario": "Gil",
                "usuario_id": 1398
            },
            {
                "decripcion": "It seems that it does not work under linux as other solutions based on signal.SIGALRM",
                "fecha": { "$date" : "2021-02-23T16:59:43Z" },
                "usuario": "Mathieu Roger",
                "usuario_id": 1399
            },
            {
                "decripcion": "This solution is not working on Python 3.7.6. I though you should know! That is too bad for me.",
                "fecha": { "$date" : "2021-05-11T13:55:14Z" },
                "usuario": "Andre Carneiro",
                "usuario_id": 1400
            }
        ],
        "usuario": "Gil",
        "usuario_id": 1398
    },
    {
        "_id": 840,
        "fecha": { "$date" : "2020-06-24T19:12:02Z" },
        "decripcion": "\nI am the author of wrapt_timeout_decorator\nMost of the solutions presented here work wunderfully under Linux on the first glance - because we have fork() and signals() - but on windows the things look a bit different.\nAnd when it comes to subthreads on Linux, You cant use Signals anymore.\nIn order to spawn a process under Windows, it needs to be picklable - and many decorated functions or Class methods are not.\nSo You need to use a better pickler like dill and multiprocess (not pickle and multiprocessing) - thats why You cant use ProcessPoolExecutor (or only with limited functionality).\nFor the timeout itself - You need to define what timeout means - because on Windows it will take considerable (and not determinable) time to spawn the process. This can be tricky on short timeouts. Lets assume, spawning the process takes about 0.5 seconds (easily !!!). If You give a timeout of 0.2 seconds what should happen ?\nShould the function time out after 0.5 + 0.2 seconds (so let the method run for 0.2 seconds)?\nOr should the called process time out after 0.2 seconds (in that case, the decorated function will ALWAYS timeout, because in that time it is not even spawned) ?\nAlso nested decorators can be nasty and You cant use Signals in a subthread. If You want to create a truly universal, cross-platform decorator, all this needs to be taken into consideration (and tested).\nOther issues are passing exceptions back to the caller, as well as logging issues (if used in the decorated function - logging to files in another process is NOT supported)\nI tried to cover all edge cases, You might look into the package wrapt_timeout_decorator, or at least test Your own solutions inspired by the unittests used there.\n@Alexis Eggermont - unfortunately I dont have enough points to comment - maybe someone else can notify You - I think I solved Your import issue.\n    ",
        "votes": 14,
        "comentarios": [
            {
                "decripcion": "This is a life saver for me! My problem was sometimes multiprocessing worker stalled for no reason and was consuming lot of memory and cpu in the sleep state. Tried various wrappers for multiprocessing which has an option for pool timeout but each gave me other different problems like processes not killed after the pool is terminated. Now with this decorator, simply after a long timeout, the function will be killed and the processes spawned inside it. It gives me BrokenPipeError for abruptly closing the pool, but it solved my main problem. Thank you! Any suggestions to handle BrokenPipeError ?",
                "fecha": { "$date" : "2020-07-23T07:50:47Z" },
                "usuario": "Arjun Sankarlal",
                "usuario_id": 1401
            },
            {
                "decripcion": "@Arjun Sankarlal : of course if the worker is killed, the pipe will be broken. You need to catch the broken pipe error on the scheduler task and clean up properly.",
                "fecha": { "$date" : "2020-07-24T09:05:58Z" },
                "usuario": "bitranox",
                "usuario_id": 1402
            },
            {
                "decripcion": "Yes I understand, and I did in try/except with BrokenPipeError but it was not caught. So I am using it in a webserver. I have a catch for BrokenPipeError and general Exception. So when the timeout occurred, I was returned with general exception not with broken pipe error. But after few seconds, the server printed BrokenPipeError in the console and it server the other requests without any problem. May be I introduce a delay after to check if the pool is broken and then return !?",
                "fecha": { "$date" : "2020-07-26T04:09:12Z" },
                "usuario": "Arjun Sankarlal",
                "usuario_id": 1401
            }
        ],
        "usuario": "bitranox",
        "usuario_id": 1402
    },
    {
        "_id": 841,
        "fecha": { "$date" : "2021-05-20T10:55:22Z" },
        "decripcion": "\nBuilding on and and enhancing the answer by @piro , you can build a contextmanager. This allows for very readable code which will disable the alaram signal after a successful run (sets signal.alarm(0))\nfrom contextlib import contextmanager\nimport signal\nimport time\n\n@contextmanager\ndef timeout(duration):\n    def timeout_handler(signum, frame):\n        raise Exception(f'block timedout after {duration} seconds')\n    signal.signal(signal.SIGALRM, timeout_handler)\n    signal.alarm(duration)\n    yield\n    signal.alarm(0)\n\ndef sleeper(duration):\n    time.sleep(duration)\n    print('finished')\n\nExample usage:\nIn [19]: with timeout(2):\n    ...:     sleeper(1)\n    ...:     \nfinished\n\nIn [20]: with timeout(2):\n    ...:     sleeper(3)\n    ...:         \n---------------------------------------------------------------------------\nException                                 Traceback (most recent call last)\n<ipython-input-20-66c78858116f> in <module>()\n      1 with timeout(2):\n----> 2     sleeper(3)\n      3 \n\n<ipython-input-7-a75b966bf7ac> in sleeper(t)\n      1 def sleeper(t):\n----> 2     time.sleep(t)\n      3     print('finished')\n      4 \n\n<ipython-input-18-533b9e684466> in timeout_handler(signum, frame)\n      2 def timeout(duration):\n      3     def timeout_handler(signum, frame):\n----> 4         raise Exception(f'block timedout after {duration} seconds')\n      5     signal.signal(signal.SIGALRM, timeout_handler)\n      6     signal.alarm(duration)\n\nException: block timedout after 2 seconds\n\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "This is a great way of doing it indeed. Just to add for completeness, the required import for this to work: from contextlib import contextmanager",
                "fecha": { "$date" : "2021-03-07T11:35:14Z" },
                "usuario": "jose.marcos.rf",
                "usuario_id": 1403
            },
            {
                "decripcion": "An issue with the current implementation of this contextmanager is that an exception within the code block inside the context can result in the signal alarm not being disabled. To fix it a try + finally should be added. Similar to my timeout function decorator below (stackoverflow.com/a/66515961/1522304)",
                "fecha": { "$date" : "2021-04-19T14:33:38Z" },
                "usuario": "jose.marcos.rf",
                "usuario_id": 1403
            }
        ],
        "usuario": "boogie",
        "usuario_id": 1404
    },
    {
        "_id": 842,
        "fecha": { "$date" : "2018-08-29T22:28:56Z" },
        "decripcion": "\ntimeout-decorator don't work on windows system as , windows didn't support signal well.\n\nIf you use timeout-decorator in windows system you will get the following \n\nAttributeError: module 'signal' has no attribute 'SIGALRM'\n\n\nSome suggested to use use_signals=False but didn't worked for me.\n\nAuthor @bitranox created the following package:\n\npip install https://github.com/bitranox/wrapt-timeout-decorator/archive/master.zip\n\n\nCode Sample: \n\nimport time\nfrom wrapt_timeout_decorator import *\n\n@timeout(5)\ndef mytest(message):\n    print(message)\n    for i in range(1,10):\n        time.sleep(1)\n        print('{} seconds have passed'.format(i))\n\ndef main():\n    mytest('starting')\n\n\nif __name__ == '__main__':\n    main()\n\n\nGives the following exception:\n\nTimeoutError: Function mytest timed out after 5 seconds\n\n    ",
        "votes": 7,
        "comentarios": [
            {
                "decripcion": "This sound like a very nice solution. Strangely, the line from wrapt_timeout_decorator import *  seems to kill some of my other imports. For example I get ModuleNotFoundError: No module named 'google.appengine', but I don't get this error if I don't import wrapt_timeout_decorator",
                "fecha": { "$date" : "2019-04-23T14:48:06Z" },
                "usuario": "Alexis Eggermont",
                "usuario_id": 1405
            },
            {
                "decripcion": "@AlexisEggermont I was about to use this with appengine... so I am very curious ifthis error persisted?",
                "fecha": { "$date" : "2019-09-03T15:14:31Z" },
                "usuario": "PascalVKooten",
                "usuario_id": 1406
            },
            {
                "decripcion": "when testing this, nothing seems to be printed out from either message or seconds passed",
                "fecha": { "$date" : "2021-04-03T00:12:20Z" },
                "usuario": "Avan",
                "usuario_id": 1407
            }
        ],
        "usuario": "as - if",
        "usuario_id": 1408
    },
    {
        "_id": 843,
        "fecha": { "$date" : "2021-01-13T12:20:11Z" },
        "decripcion": "\nHighlights\n\nRaises TimeoutError uses exceptions to alert on timeout - can easily be modified\nCross Platform: Windows & Mac OS X\nCompatibility: Python 3.6+ (I also tested on python 2.7 and it works with small syntax adjustments)\n\nFor full explanation and extension to parallel maps, see here https://flipdazed.github.io/blog/quant%20dev/parallel-functions-with-timeouts\nMinimal Example\n>>> @killer_call(timeout=4)\n... def bar(x):\n...        import time\n...        time.sleep(x)\n...        return x\n>>> bar(10)\nTraceback (most recent call last):\n  ...\n__main__.TimeoutError: function 'bar' timed out after 4s\n\nand as expected\n>>> bar(2)\n2\n\nFull code\nimport multiprocessing as mp\nimport multiprocessing.queues as mpq\nimport functools\nimport dill\n\nfrom typing import Tuple, Callable, Dict, Optional, Iterable, List, Any\n\nclass TimeoutError(Exception):\n\n    def __init__(self, func: Callable, timeout: int):\n        self.t = timeout\n        self.fname = func.__name__\n\n    def __str__(self):\n            return f\"function '{self.fname}' timed out after {self.t}s\"\n\n\ndef _lemmiwinks(func: Callable, args: Tuple, kwargs: Dict[str, Any], q: mp.Queue):\n    \"\"\"lemmiwinks crawls into the unknown\"\"\"\n    q.put(dill.loads(func)(*args, **kwargs))\n\n\ndef killer_call(func: Callable = None, timeout: int = 10) -> Callable:\n    \"\"\"\n    Single function call with a timeout\n\n    Args:\n        func: the function\n        timeout: The timeout in seconds\n    \"\"\"\n\n    if not isinstance(timeout, int):\n        raise ValueError(f'timeout needs to be an int. Got: {timeout}')\n\n    if func is None:\n        return functools.partial(killer_call, timeout=timeout)\n\n    @functools.wraps(killer_call)\n    def _inners(*args, **kwargs) -> Any:\n        q_worker = mp.Queue()\n        proc = mp.Process(target=_lemmiwinks, args=(dill.dumps(func), args, kwargs, q_worker))\n        proc.start()\n        try:\n            return q_worker.get(timeout=timeout)\n        except mpq.Empty:\n            raise TimeoutError(func, timeout)\n        finally:\n            try:\n                proc.terminate()\n            except:\n                pass\n    return _inners\n\nif __name__ == '__main__':\n    @killer_call(timeout=4)\n    def bar(x):\n        import time\n        time.sleep(x)\n        return x\n\n    print(bar(2))\n    bar(10)\n\nNotes\nYou will need to import inside the function because of the way dill works.\nThis will also mean these functions may not be not compatible with doctest if there are imports inside your target functions. You will get an issue with __import__ not found.\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "Your class TimeoutError is masking an existing builtin exception TimeoutError.",
                "fecha": { "$date" : "2021-02-11T10:01:38Z" },
                "usuario": "gerrit",
                "usuario_id": 147
            }
        ],
        "usuario": "Alexander McFarlane",
        "usuario_id": 1409
    },
    {
        "_id": 844,
        "fecha": { "$date" : "2013-07-26T09:30:44Z" },
        "decripcion": "\nWe can use signals for the same. I think the below example will be useful for you. It is very simple compared to threads. \n\nimport signal\n\ndef timeout(signum, frame):\n    raise myException\n\n#this is an infinite loop, never ending under normal circumstances\ndef main():\n    print 'Starting Main ',\n    while 1:\n        print 'in main ',\n\n#SIGALRM is only usable on a unix platform\nsignal.signal(signal.SIGALRM, timeout)\n\n#change 5 to however many seconds you need\nsignal.alarm(5)\n\ntry:\n    main()\nexcept myException:\n    print \"whoops\"\n\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "It would be better to choose a specific exception and to catch only it. Bare try: ... except: ... are always a bad idea.",
                "fecha": { "$date" : "2013-07-23T11:28:07Z" },
                "usuario": "hivert",
                "usuario_id": 1410
            },
            {
                "decripcion": "I agree with you hivert.",
                "fecha": { "$date" : "2013-07-26T06:58:41Z" },
                "usuario": "A R",
                "usuario_id": 1411
            },
            {
                "decripcion": "while I understand the reason, as a sysadmin/integrator I have disagree - python code is notorious for neglecting error handling, and handling the one thing you expect isn't good enough for quality software. you can handle the 5 things you plan for AND a generic strategy for other things. \"Traceback, None\" is not a strategy, it's an insult.",
                "fecha": { "$date" : "2020-06-19T00:15:22Z" },
                "usuario": "Florian Heigl",
                "usuario_id": 1412
            },
            {
                "decripcion": "I don't understand you at all. If I'm planing do some timeout for specific function, how to do it in elegant style? What strategy must I plan when called function is depended on not elegant components? how to perfectly glue this one? please explain me with working elegant examples.",
                "fecha": { "$date" : "2020-09-21T18:50:24Z" },
                "usuario": "Znik",
                "usuario_id": 1413
            }
        ],
        "usuario": "A R",
        "usuario_id": 1411
    },
    {
        "_id": 845,
        "fecha": { "$date" : "2020-12-17T20:59:26Z" },
        "decripcion": "\nAnother solution with asyncio :\nIf you want to cancel the background task and not just timeout on the running main code, then you need an explicit communication from main thread to ask the code of the task to cancel , like a threading.Event()\nimport asyncio\nimport functools\nimport multiprocessing\nfrom concurrent.futures.thread import ThreadPoolExecutor\n\n\nclass SingletonTimeOut:\n    pool = None\n\n    @classmethod\n    def run(cls, to_run: functools.partial, timeout: float):\n        pool = cls.get_pool()\n        loop = cls.get_loop()\n        try:\n            task = loop.run_in_executor(pool, to_run)\n            return loop.run_until_complete(asyncio.wait_for(task, timeout=timeout))\n        except asyncio.TimeoutError as e:\n            error_type = type(e).__name__ #TODO\n            raise e\n\n    @classmethod\n    def get_pool(cls):\n        if cls.pool is None:\n            cls.pool = ThreadPoolExecutor(multiprocessing.cpu_count())\n        return cls.pool\n\n    @classmethod\n    def get_loop(cls):\n        try:\n            return asyncio.get_event_loop()\n        except RuntimeError:\n            asyncio.set_event_loop(asyncio.new_event_loop())\n            # print(\"NEW LOOP\" + str(threading.current_thread().ident))\n            return asyncio.get_event_loop()\n\n# ---------------\n\nTIME_OUT = float('0.2')  # seconds\n\ndef toto(input_items,nb_predictions):\n    return 1\n\nto_run = functools.partial(toto,\n                           input_items=1,\n                           nb_predictions=\"a\")\n\nresults = SingletonTimeOut.run(to_run, TIME_OUT)\n\n\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "InternalError is not defined - might be worthwhile filling that placeholder in",
                "fecha": { "$date" : "2020-08-10T23:49:00Z" },
                "usuario": "Alexander McFarlane",
                "usuario_id": 1409
            },
            {
                "decripcion": "This doesn't work as you expect: gist.github.com/coxley/5879f5ceecfbb4624bee23a6cef47510",
                "fecha": { "$date" : "2020-12-17T16:54:52Z" },
                "usuario": "coxley",
                "usuario_id": 1414
            },
            {
                "decripcion": "docs.python.org/3/library/asyncio-task.html#timeouts If a timeout occurs, it TRY to cancels the task and raises asyncio.TimeoutError.",
                "fecha": { "$date" : "2020-12-17T20:54:47Z" },
                "usuario": "raphaelauv",
                "usuario_id": 1415
            }
        ],
        "usuario": "raphaelauv",
        "usuario_id": 1415
    },
    {
        "_id": 846,
        "fecha": { "$date" : "2016-04-27T13:27:21Z" },
        "decripcion": "\n#!/usr/bin/python2\nimport sys, subprocess, threading\nproc = subprocess.Popen(sys.argv[2:])\ntimer = threading.Timer(float(sys.argv[1]), proc.terminate)\ntimer.start()\nproc.wait()\ntimer.cancel()\nexit(proc.returncode)\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "While this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value",
                "fecha": { "$date" : "2016-04-27T13:48:44Z" },
                "usuario": "Dan Cornilescu",
                "usuario_id": 1416
            },
            {
                "decripcion": "I don't think this does answer the question as subprocess.Popen(sys.argv[2:]) would be used to run a command not a Python function call. Unless the intent is to wrap the other Python script in this one, but that may not make for the easiest recovery from the stall.",
                "fecha": { "$date" : "2020-12-05T22:01:35Z" },
                "usuario": "Alex Moore-Niemi",
                "usuario_id": 1417
            }
        ],
        "usuario": "Hal Canary",
        "usuario_id": 1418
    },
    {
        "_id": 847,
        "fecha": { "$date" : "2021-03-07T11:26:17Z" },
        "decripcion": "\nJust in case it is helpful for anyone, building on the answer by @piro, I've made a function decorator:\nimport time\nimport signal\nfrom functools import wraps\n\n\ndef timeout(timeout_secs: int):\n    def wrapper(func):\n        @wraps(func)\n        def time_limited(*args, **kwargs):\n            # Register an handler for the timeout\n            def handler(signum, frame):\n                raise Exception(f\"Timeout for function '{func.__name__}'\")\n\n            # Register the signal function handler\n            signal.signal(signal.SIGALRM, handler)\n\n            # Define a timeout for your function\n            signal.alarm(timeout_secs)\n\n            result = None\n            try:\n                result = func(*args, **kwargs)\n            except Exception as exc:\n                raise exc\n            finally:\n                # disable the signal alarm\n                signal.alarm(0)\n\n            return result\n\n        return time_limited\n\n    return wrapper\n\nUsing the wrapper on a function with a 20 seconds timeout would look something like:\n    @timeout(20)\n    def my_slow_or_never_ending_function(name):\n        while True:\n            time.sleep(1)\n            print(f\"Yet another second passed {name}...\")\n\n    try:\n        results = my_slow_or_never_ending_function(\"Yooo!\")\n    except Exception as e:\n        print(f\"ERROR: {e}\")\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "jose.marcos.rf",
        "usuario_id": 1403
    },
    {
        "_id": 848,
        "fecha": { "$date" : "2016-01-25T18:36:02Z" },
        "decripcion": "\nI had a need for nestable timed interrupts (which SIGALARM can't do) that won't get blocked by time.sleep (which the thread-based approach can't do). I ended up copying and lightly modifying code from here: http://code.activestate.com/recipes/577600-queue-for-managing-multiple-sigalrm-alarms-concurr/\n\nThe code itself:\n\n#!/usr/bin/python\n\n# lightly modified version of http://code.activestate.com/recipes/577600-queue-for-managing-multiple-sigalrm-alarms-concurr/\n\n\n\"\"\"alarm.py: Permits multiple SIGALRM events to be queued.\n\nUses a `heapq` to store the objects to be called when an alarm signal is\nraised, so that the next alarm is always at the top of the heap.\n\"\"\"\n\nimport heapq\nimport signal\nfrom time import time\n\n__version__ = '$Revision: 2539 $'.split()[1]\n\nalarmlist = []\n\n__new_alarm = lambda t, f, a, k: (t + time(), f, a, k)\n__next_alarm = lambda: int(round(alarmlist[0][0] - time())) if alarmlist else None\n__set_alarm = lambda: signal.alarm(max(__next_alarm(), 1))\n\n\nclass TimeoutError(Exception):\n    def __init__(self, message, id_=None):\n        self.message = message\n        self.id_ = id_\n\n\nclass Timeout:\n    ''' id_ allows for nested timeouts. '''\n    def __init__(self, id_=None, seconds=1, error_message='Timeout'):\n        self.seconds = seconds\n        self.error_message = error_message\n        self.id_ = id_\n    def handle_timeout(self):\n        raise TimeoutError(self.error_message, self.id_)\n    def __enter__(self):\n        self.this_alarm = alarm(self.seconds, self.handle_timeout)\n    def __exit__(self, type, value, traceback):\n        try:\n            cancel(self.this_alarm) \n        except ValueError:\n            pass\n\n\ndef __clear_alarm():\n    \"\"\"Clear an existing alarm.\n\n    If the alarm signal was set to a callable other than our own, queue the\n    previous alarm settings.\n    \"\"\"\n    oldsec = signal.alarm(0)\n    oldfunc = signal.signal(signal.SIGALRM, __alarm_handler)\n    if oldsec > 0 and oldfunc != __alarm_handler:\n        heapq.heappush(alarmlist, (__new_alarm(oldsec, oldfunc, [], {})))\n\n\ndef __alarm_handler(*zargs):\n    \"\"\"Handle an alarm by calling any due heap entries and resetting the alarm.\n\n    Note that multiple heap entries might get called, especially if calling an\n    entry takes a lot of time.\n    \"\"\"\n    try:\n        nextt = __next_alarm()\n        while nextt is not None and nextt <= 0:\n            (tm, func, args, keys) = heapq.heappop(alarmlist)\n            func(*args, **keys)\n            nextt = __next_alarm()\n    finally:\n        if alarmlist: __set_alarm()\n\n\ndef alarm(sec, func, *args, **keys):\n    \"\"\"Set an alarm.\n\n    When the alarm is raised in `sec` seconds, the handler will call `func`,\n    passing `args` and `keys`. Return the heap entry (which is just a big\n    tuple), so that it can be cancelled by calling `cancel()`.\n    \"\"\"\n    __clear_alarm()\n    try:\n        newalarm = __new_alarm(sec, func, args, keys)\n        heapq.heappush(alarmlist, newalarm)\n        return newalarm\n    finally:\n        __set_alarm()\n\n\ndef cancel(alarm):\n    \"\"\"Cancel an alarm by passing the heap entry returned by `alarm()`.\n\n    It is an error to try to cancel an alarm which has already occurred.\n    \"\"\"\n    __clear_alarm()\n    try:\n        alarmlist.remove(alarm)\n        heapq.heapify(alarmlist)\n    finally:\n        if alarmlist: __set_alarm()\n\n\nand a usage example:\n\nimport alarm\nfrom time import sleep\n\ntry:\n    with alarm.Timeout(id_='a', seconds=5):\n        try:\n            with alarm.Timeout(id_='b', seconds=2):\n                sleep(3)\n        except alarm.TimeoutError as e:\n            print 'raised', e.id_\n        sleep(30)\nexcept alarm.TimeoutError as e:\n    print 'raised', e.id_\nelse:\n    print 'nope.'\n\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "This also uses signal hence won't work if called from a thread.",
                "fecha": { "$date" : "2018-10-08T13:37:35Z" },
                "usuario": "garg10may",
                "usuario_id": 1419
            }
        ],
        "usuario": "James",
        "usuario_id": 533
    },
    {
        "_id": 849,
        "fecha": { "$date" : "2021-06-06T09:20:06Z" },
        "decripcion": "\nI have face the same problem but my situation is need work on sub thread, signal didn't work for me, so I wrote a python package: timeout-timer to solve this problem, support for use as context or decorator, use signal or sub thread module to trigger a timeout interrupt:\nfrom timeout_timer import timeout, TimeoutInterrupt\n\nclass TimeoutInterruptNested(TimeoutInterrupt):\n    pass\n\ndef test_timeout_nested_loop_both_timeout(timer=\"thread\"):\n    cnt = 0\n    try:\n        with timeout(5, timer=timer):\n            try:\n                with timeout(2, timer=timer, exception=TimeoutInterruptNested):\n                    sleep(2)\n            except TimeoutInterruptNested:\n                cnt += 1\n            time.sleep(10)\n    except TimeoutInterrupt:\n        cnt += 1\n    assert cnt == 2\n\nsee more: https://github.com/dozysun/timeout-timer\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Dozy Sun",
        "usuario_id": 1420
    },
    {
        "_id": 850,
        "fecha": { "$date" : "2012-09-06T08:25:33Z" },
        "decripcion": "\nHere is a slight improvement to the given thread-based solution.\n\nThe code below supports exceptions:\n\ndef runFunctionCatchExceptions(func, *args, **kwargs):\n    try:\n        result = func(*args, **kwargs)\n    except Exception, message:\n        return [\"exception\", message]\n\n    return [\"RESULT\", result]\n\n\ndef runFunctionWithTimeout(func, args=(), kwargs={}, timeout_duration=10, default=None):\n    import threading\n    class InterruptableThread(threading.Thread):\n        def __init__(self):\n            threading.Thread.__init__(self)\n            self.result = default\n        def run(self):\n            self.result = runFunctionCatchExceptions(func, *args, **kwargs)\n    it = InterruptableThread()\n    it.start()\n    it.join(timeout_duration)\n    if it.isAlive():\n        return default\n\n    if it.result[0] == \"exception\":\n        raise it.result[1]\n\n    return it.result[1]\n\n\nInvoking it with a 5 second timeout:\n\nresult = timeout(remote_calculate, (myarg,), timeout_duration=5)\n\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "This will raise a new exception hiding the original traceback. See my version below...",
                "fecha": { "$date" : "2012-12-14T11:20:28Z" },
                "usuario": "Meitham",
                "usuario_id": 1421
            },
            {
                "decripcion": "This is also unsafe, as if within runFunctionCatchExceptions() certain Python functions obtaining GIL are called. E.g. the following would never, or for very long time, return if called within the function: eval(2**9999999999**9999999999). See stackoverflow.com/questions/22138190/\u2026",
                "fecha": { "$date" : "2014-10-27T12:53:24Z" },
                "usuario": "Mikko Ohtamaa",
                "usuario_id": 1422
            }
        ],
        "usuario": "diemacht",
        "usuario_id": 1423
    },
    {
        "_id": 851,
        "fecha": { "$date" : "2020-08-08T15:29:44Z" },
        "decripcion": "\nHere is a POSIX version that combines many of the previous answers to deliver following features:\n\nSubprocesses blocking the execution.\nUsage of the timeout function on class member functions.\nStrict requirement on time-to-terminate.\n\nHere is the code and some test cases:\nimport threading\nimport signal\nimport os\nimport time\n\nclass TerminateExecution(Exception):\n    \"\"\"\n    Exception to indicate that execution has exceeded the preset running time.\n    \"\"\"\n\n\ndef quit_function(pid):\n    # Killing all subprocesses\n    os.setpgrp()\n    os.killpg(0, signal.SIGTERM)\n\n    # Killing the main thread\n    os.kill(pid, signal.SIGTERM)\n\n\ndef handle_term(signum, frame):\n    raise TerminateExecution()\n\n\ndef invoke_with_timeout(timeout, fn, *args, **kwargs):\n    # Setting a sigterm handler and initiating a timer\n    old_handler = signal.signal(signal.SIGTERM, handle_term)\n    timer = threading.Timer(timeout, quit_function, args=[os.getpid()])\n    terminate = False\n\n    # Executing the function\n    timer.start()\n    try:\n        result = fn(*args, **kwargs)\n    except TerminateExecution:\n        terminate = True\n    finally:\n        # Restoring original handler and cancel timer\n        signal.signal(signal.SIGTERM, old_handler)\n        timer.cancel()\n\n    if terminate:\n        raise BaseException(\"xxx\")\n\n    return result\n\n### Test cases\ndef countdown(n):\n    print('countdown started', flush=True)\n    for i in range(n, -1, -1):\n        print(i, end=', ', flush=True)\n        time.sleep(1)\n    print('countdown finished')\n    return 1337\n\n\ndef really_long_function():\n    time.sleep(10)\n\n\ndef really_long_function2():\n    os.system(\"sleep 787\")\n\n\n# Checking that we can run a function as expected.\nassert invoke_with_timeout(3, countdown, 1) == 1337\n\n# Testing various scenarios\nt1 = time.time()\ntry:\n    print(invoke_with_timeout(1, countdown, 3))\n    assert(False)\nexcept BaseException:\n    assert(time.time() - t1 < 1.1)\n    print(\"All good\", time.time() - t1)\n\nt1 = time.time()\ntry:\n    print(invoke_with_timeout(1, really_long_function2))\n    assert(False)\nexcept BaseException:\n    assert(time.time() - t1 < 1.1)\n    print(\"All good\", time.time() - t1)\n\n\nt1 = time.time()\ntry:\n    print(invoke_with_timeout(1, really_long_function))\n    assert(False)\nexcept BaseException:\n    assert(time.time() - t1 < 1.1)\n    print(\"All good\", time.time() - t1)\n\n# Checking that classes are referenced and not\n# copied (as would be the case with multiprocessing)\n\n\nclass X:\n    def __init__(self):\n        self.value = 0\n\n    def set(self, v):\n        self.value = v\n\n\nx = X()\ninvoke_with_timeout(2, x.set, 9)\nassert x.value == 9\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Troels",
        "usuario_id": 1424
    },
    {
        "_id": 852,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nSince this question was asked in 2010, there has been real simplification in how to do simple multithreading with Python with map and pool.\nThe code below comes from an article/blog post that you should definitely check out (no affiliation) - Parallelism in one line: A Better Model for Day to Day Threading Tasks. I'll summarize below - it ends up being just a few lines of code:\nfrom multiprocessing.dummy import Pool as ThreadPool\npool = ThreadPool(4)\nresults = pool.map(my_function, my_array)\n\nWhich is the multithreaded version of:\nresults = []\nfor item in my_array:\n    results.append(my_function(item))\n\n\nDescription\n\nMap is a cool little function, and the key to easily injecting parallelism into your Python code. For those unfamiliar, map is something lifted from functional languages like Lisp. It is a function which maps another function over a sequence.\nMap handles the iteration over the sequence for us, applies the function, and stores all of the results in a handy list at the end.\n\n\n\nImplementation\n\nParallel versions of the map function are provided by two libraries:multiprocessing, and also its little known, but equally fantastic step child:multiprocessing.dummy.\n\nmultiprocessing.dummy is exactly the same as multiprocessing module, but uses threads instead (an important distinction - use multiple processes for CPU-intensive tasks; threads for (and during) I/O):\n\nmultiprocessing.dummy replicates the API of multiprocessing, but is no more than a wrapper around the threading module.\n\nimport urllib2\nfrom multiprocessing.dummy import Pool as ThreadPool\n\nurls = [\n  'http://www.python.org',\n  'http://www.python.org/about/',\n  'http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html',\n  'http://www.python.org/doc/',\n  'http://www.python.org/download/',\n  'http://www.python.org/getit/',\n  'http://www.python.org/community/',\n  'https://wiki.python.org/moin/',\n]\n\n# Make the Pool of workers\npool = ThreadPool(4)\n\n# Open the URLs in their own threads\n# and return the results\nresults = pool.map(urllib2.urlopen, urls)\n\n# Close the pool and wait for the work to finish\npool.close()\npool.join()\n\nAnd the timing results:\nSingle thread:   14.4 seconds\n       4 Pool:   3.1 seconds\n       8 Pool:   1.4 seconds\n      13 Pool:   1.3 seconds\n\n\nPassing multiple arguments (works like this only in Python 3.3 and later):\nTo pass multiple arrays:\nresults = pool.starmap(function, zip(list_a, list_b))\n\nOr to pass a constant and an array:\nresults = pool.starmap(function, zip(itertools.repeat(constant), list_a))\n\nIf you are using an earlier version of Python, you can pass multiple arguments via this workaround).\n(Thanks to user136036 for the helpful comment.)\n    ",
        "votes": 1540,
        "comentarios": [
            {
                "decripcion": "This is only lacking votes because it is so freshly posted. This answer works beautifully and demonstrates the 'map' functionality which gives a much easier to understand syntax than the other answers here.",
                "fecha": { "$date" : "2015-02-21T07:51:33Z" },
                "usuario": "idle",
                "usuario_id": 1427
            },
            {
                "decripcion": "Is this even threads and not processes? It seems like it attempts to multiprocess != multithread",
                "fecha": { "$date" : "2015-07-29T11:02:00Z" },
                "usuario": "AturSams",
                "usuario_id": 1428
            },
            {
                "decripcion": "By the way, guys, you can write with Pool(8) as p: p.map( *whatever* ) and get rid of bookkeeping lines too.",
                "fecha": { "$date" : "2015-09-03T07:06:44Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "@BarafuAlbino: Useful as that is, it's probably worth noting that this only works in Python 3.3+.",
                "fecha": { "$date" : "2015-10-19T10:38:17Z" },
                "usuario": "fuglede",
                "usuario_id": 1429
            },
            {
                "decripcion": "How can you leave this answer and not mention that this is only useful for I/O operations? This only runs on a single thread which is useless for most cases, and is actually slower than just doing it the normal way",
                "fecha": { "$date" : "2017-08-14T07:03:45Z" },
                "usuario": "Frobot",
                "usuario_id": 1430
            }
        ],
        "usuario": "philshem",
        "usuario_id": 1431
    },
    {
        "_id": 853,
        "fecha": { "$date" : "2020-09-06T19:30:41Z" },
        "decripcion": "\nHere's a simple example: you need to try a few alternative URLs and return the contents of the first one to respond.\nimport Queue\nimport threading\nimport urllib2\n\n# Called by each thread\ndef get_url(q, url):\n    q.put(urllib2.urlopen(url).read())\n\ntheurls = [\"http://google.com\", \"http://yahoo.com\"]\n\nq = Queue.Queue()\n\nfor u in theurls:\n    t = threading.Thread(target=get_url, args = (q,u))\n    t.daemon = True\n    t.start()\n\ns = q.get()\nprint s\n\nThis is a case where threading is used as a simple optimization: each subthread is waiting for a URL to resolve and respond, to put its contents on the queue; each thread is a daemon (won't keep the process up if the main thread ends -- that's more common than not); the main thread starts all subthreads, does a get on the queue to wait until one of them has done a put, then emits the results and terminates (which takes down any subthreads that might still be running, since they're daemon threads).\nProper use of threads in Python is invariably connected to I/O operations (since CPython doesn't use multiple cores to run CPU-bound tasks anyway, the only reason for threading is not blocking the process while there's a wait for some I/O). Queues are almost invariably the best way to farm out work to threads and/or collect the work's results, by the way, and they're intrinsically threadsafe, so they save you from worrying about locks, conditions, events, semaphores, and other inter-thread coordination/communication concepts.\n    ",
        "votes": 735,
        "comentarios": [
            {
                "decripcion": "Thanks again, MartelliBot. I've updated the example to wait for all to urls to respond:  import Queue, threading, urllib2  q = Queue.Queue()  urls = '''a.com           b.com           c.com'''.split()  urls_received = 0   def get_url(q, url):   req = urllib2.Request(url)   resp = urllib2.urlopen(req)   q.put(resp.read())   global urls_received   urls_received +=1    print urls_received   for u in urls:   t = threading.Thread(target=get_url, args = (q,u))   t.daemon = True   t.start()  while q.empty() and urls_received < len(urls):   s = q.get()   print s",
                "fecha": { "$date" : "2013-01-07T02:23:12Z" },
                "usuario": "htmldrum",
                "usuario_id": 1432
            },
            {
                "decripcion": "@JRM: if you look at the next answer below, I think that a better way to wait until the threads are finished would be to use the join() method, since that would make the main thread wait until they're done without consuming processor by constantly checking the value. @Alex: thanks, this is exactly what I needed to understand how to use threads.",
                "fecha": { "$date" : "2013-05-31T05:33:45Z" },
                "usuario": "krs013",
                "usuario_id": 1433
            },
            {
                "decripcion": "For python3, replace 'import urllib2' with 'import urllib.request as urllib2'. and put parentheses in the print statement.",
                "fecha": { "$date" : "2013-09-21T01:50:13Z" },
                "usuario": "Harvey",
                "usuario_id": 1434
            },
            {
                "decripcion": "For python 3 replace Queue module name with queue. Method name is the same.",
                "fecha": { "$date" : "2014-01-05T21:13:39Z" },
                "usuario": "JSmyth",
                "usuario_id": 1435
            },
            {
                "decripcion": "I note that solution will only print out one of the pages. To print both pages from the queue simply run the command again: s = q.get() print s  @krs013 You don't need the join because Queue.get() is blocking.",
                "fecha": { "$date" : "2014-01-07T05:50:33Z" },
                "usuario": "Tom Anderson",
                "usuario_id": 1436
            }
        ],
        "usuario": "Alex Martelli",
        "usuario_id": 288
    },
    {
        "_id": 854,
        "fecha": { "$date" : "2019-12-09T16:55:56Z" },
        "decripcion": "\nNOTE: For actual parallelization in Python, you should use the multiprocessing module to fork multiple processes that execute in parallel (due to the global interpreter lock, Python threads provide interleaving, but they are in fact executed serially, not in parallel, and are only useful when interleaving I/O operations).\n\nHowever, if you are merely looking for interleaving (or are doing I/O operations that can be parallelized despite the global interpreter lock), then the threading module is the place to start. As a really simple example, let's consider the problem of summing a large range by summing subranges in parallel:\n\nimport threading\n\nclass SummingThread(threading.Thread):\n     def __init__(self,low,high):\n         super(SummingThread, self).__init__()\n         self.low=low\n         self.high=high\n         self.total=0\n\n     def run(self):\n         for i in range(self.low,self.high):\n             self.total+=i\n\n\nthread1 = SummingThread(0,500000)\nthread2 = SummingThread(500000,1000000)\nthread1.start() # This actually causes the thread to run\nthread2.start()\nthread1.join()  # This waits until the thread has completed\nthread2.join()\n# At this point, both threads have completed\nresult = thread1.total + thread2.total\nprint result\n\n\nNote that the above is a very stupid example, as it does absolutely no I/O and will be executed serially albeit interleaved (with the added overhead of context switching) in CPython due to the global interpreter lock.\n    ",
        "votes": 274,
        "comentarios": [
            {
                "decripcion": "@Alex, I didn't say it was practical, but it does demonstrate how to define and spawn threads, which I think is what the OP wants.",
                "fecha": { "$date" : "2010-05-17T04:39:09Z" },
                "usuario": "Michael Aaron Safyan",
                "usuario_id": 1437
            },
            {
                "decripcion": "While this does show how to define and spawn threads, it actually does not sum the subranges in parallel. thread1 runs until it's completed while the main thread blocks, then the same thing happens with thread2, then the main thread resumes and prints out the values they accumulated.",
                "fecha": { "$date" : "2014-02-17T19:32:31Z" },
                "usuario": "martineau",
                "usuario_id": 82
            },
            {
                "decripcion": "Shouldn't that be super(SummingThread, self).__init__()? As in stackoverflow.com/a/2197625/806988",
                "fecha": { "$date" : "2014-03-06T09:37:09Z" },
                "usuario": "James Andres",
                "usuario_id": 1438
            },
            {
                "decripcion": "@JamesAndres, assuming that no one inherits from \"SummingThread\", then either one works fine; in such a case super(SummingThread, self) is just a fancy way to look up the next class in the method resolution order (MRO), which is threading.Thread (and then subsequently calling init on that in both cases). You are right, though, in that using super() is better style for current Python. Super was relatively recent at the time that I provided this answer, hence calling directly to the super class rather than using super().  I'll update this to use super, though.",
                "fecha": { "$date" : "2014-03-06T11:16:04Z" },
                "usuario": "Michael Aaron Safyan",
                "usuario_id": 1437
            },
            {
                "decripcion": "WARNING: Don't use multithreading in tasks like this! As was shown by Dave Beazley: dabeaz.com/python/NewGIL.pdf, 2 python threads on 2 CPUs carry out a CPU-heavy task 2 times SLOWER than 1 thread on 1 CPU and 1.5 times SLOWER than 2 threads on 1 CPU. This bizarre behavior is due to mis-coordination of efforts between OS and Python. A real-life use case for threads is an I/O heavy task. E.g. when you perform read/writes over network, it makes sense to put a thread, waiting for data to be read/written, to background and switch CPU to another thread, which needs to process data.",
                "fecha": { "$date" : "2014-05-15T23:13:46Z" },
                "usuario": "Boris Burkov",
                "usuario_id": 1439
            }
        ],
        "usuario": "Michael Aaron Safyan",
        "usuario_id": 1437
    },
    {
        "_id": 855,
        "fecha": { "$date" : "2019-12-09T17:01:45Z" },
        "decripcion": "\nLike others mentioned, CPython can use threads only for I/O waits due to GIL.\n\nIf you want to benefit from multiple cores for CPU-bound tasks, use multiprocessing:\n\nfrom multiprocessing import Process\n\ndef f(name):\n    print 'hello', name\n\nif __name__ == '__main__':\n    p = Process(target=f, args=('bob',))\n    p.start()\n    p.join()\n\n    ",
        "votes": 108,
        "comentarios": [
            {
                "decripcion": "could you explain a little what this does?",
                "fecha": { "$date" : "2013-09-14T16:01:58Z" },
                "usuario": "pandita",
                "usuario_id": 1440
            },
            {
                "decripcion": "@pandita: the code creates a process, then starts it. So now there's two things happening at once: the main line of the program, and the process that's starting with the target, f function. In parallel, the main program now just waits for the process to exit, joining up with it.  If the main part just exited, the subprocess might or might not run to completion, so doing a join is always recommended.",
                "fecha": { "$date" : "2014-07-02T05:56:07Z" },
                "usuario": "johntellsall",
                "usuario_id": 1441
            },
            {
                "decripcion": "An expanded answer that includes the map function is here: stackoverflow.com/a/28463266/2327328",
                "fecha": { "$date" : "2015-03-09T08:15:55Z" },
                "usuario": "philshem",
                "usuario_id": 1431
            },
            {
                "decripcion": "@philshem Be careful b/c the link you posted is using a pool of threads (not processes) as mentioned here stackoverflow.com/questions/26432411/\u2026.  However, this answer is using a process.  I'm new to this stuff, but seems like (due to GIL) you will only get performance gains in specific situations when using multithreading in Python.  However, using a pool of processes can take advantage of a multicore processor by have more than 1 core work on a process.",
                "fecha": { "$date" : "2015-07-27T23:01:01Z" },
                "usuario": "user3731622",
                "usuario_id": 1442
            },
            {
                "decripcion": "This is the best answer for actually doing something useful and taking advantage of multiple CPU cores",
                "fecha": { "$date" : "2017-08-14T07:19:38Z" },
                "usuario": "Frobot",
                "usuario_id": 1430
            }
        ],
        "usuario": "Kai",
        "usuario_id": 1443
    },
    {
        "_id": 856,
        "fecha": { "$date" : "2019-12-09T17:04:19Z" },
        "decripcion": "\nJust a note: A queue is not required for threading.\n\nThis is the simplest example I could imagine that shows 10 processes running concurrently.\n\nimport threading\nfrom random import randint\nfrom time import sleep\n\n\ndef print_number(number):\n\n    # Sleeps a random 1 to 10 seconds\n    rand_int_var = randint(1, 10)\n    sleep(rand_int_var)\n    print \"Thread \" + str(number) + \" slept for \" + str(rand_int_var) + \" seconds\"\n\nthread_list = []\n\nfor i in range(1, 10):\n\n    # Instantiates the thread\n    # (i) does not make a sequence, so (i,)\n    t = threading.Thread(target=print_number, args=(i,))\n    # Sticks the thread in a list so that it remains accessible\n    thread_list.append(t)\n\n# Starts threads\nfor thread in thread_list:\n    thread.start()\n\n# This blocks the calling thread until the thread whose join() method is called is terminated.\n# From http://docs.python.org/2/library/threading.html#thread-objects\nfor thread in thread_list:\n    thread.join()\n\n# Demonstrates that the main process waited for threads to complete\nprint \"Done\"\n\n    ",
        "votes": 93,
        "comentarios": [
            {
                "decripcion": "Add the last quote to \"Done to make it print \"Done\"",
                "fecha": { "$date" : "2014-02-11T09:53:26Z" },
                "usuario": "iChux",
                "usuario_id": 1444
            },
            {
                "decripcion": "I like this example better than Martelli's, it's easier to play with. However, I would recommend that printNumber do the following, to make it a little bit clearer what's going on: it should save the randint to a variable before sleeping on it, and then the print should be changed to say \"Thread\" + str(number) + \" slept for \" + theRandintVariable + \" seconds\"",
                "fecha": { "$date" : "2014-12-17T15:38:09Z" },
                "usuario": "Nickolai",
                "usuario_id": 1445
            },
            {
                "decripcion": "Is there a way to know when each thread has finished, as it finishes?",
                "fecha": { "$date" : "2016-01-29T23:11:12Z" },
                "usuario": "Matt",
                "usuario_id": 1159
            },
            {
                "decripcion": "@Matt There are a few ways to do something like that, but it would depend on your needs. One way would be to update a singleton or some other publicly accessible variable that's being watched in a while loop and updated at the end of the thread.",
                "fecha": { "$date" : "2016-02-03T00:06:33Z" },
                "usuario": "Douglas Adams",
                "usuario_id": 1446
            },
            {
                "decripcion": "No need for second for loop, you can call thread.start() in first loop.",
                "fecha": { "$date" : "2019-03-23T11:33:09Z" },
                "usuario": "Mark Mishyn",
                "usuario_id": 1447
            }
        ],
        "usuario": "Douglas Adams",
        "usuario_id": 1446
    },
    {
        "_id": 857,
        "fecha": { "$date" : "2019-12-09T17:07:26Z" },
        "decripcion": "\nThe answer from Alex Martelli helped me. However, here is a modified version that I thought was more useful (at least to me).\n\nUpdated: works in both Python\u00a02 and Python\u00a03\n\ntry:\n    # For Python 3\n    import queue\n    from urllib.request import urlopen\nexcept:\n    # For Python 2 \n    import Queue as queue\n    from urllib2 import urlopen\n\nimport threading\n\nworker_data = ['http://google.com', 'http://yahoo.com', 'http://bing.com']\n\n# Load up a queue with your data. This will handle locking\nq = queue.Queue()\nfor url in worker_data:\n    q.put(url)\n\n# Define a worker function\ndef worker(url_queue):\n    queue_full = True\n    while queue_full:\n        try:\n            # Get your data off the queue, and do some work\n            url = url_queue.get(False)\n            data = urlopen(url).read()\n            print(len(data))\n\n        except queue.Empty:\n            queue_full = False\n\n# Create as many threads as you want\nthread_count = 5\nfor i in range(thread_count):\n    t = threading.Thread(target=worker, args = (q,))\n    t.start()\n\n    ",
        "votes": 49,
        "comentarios": [
            {
                "decripcion": "Why not just break on the exception?",
                "fecha": { "$date" : "2014-02-09T19:16:45Z" },
                "usuario": "Stavros Korokithakis",
                "usuario_id": 1448
            },
            {
                "decripcion": "you could, just personal preference",
                "fecha": { "$date" : "2014-02-10T21:10:41Z" },
                "usuario": "JimJty",
                "usuario_id": 1449
            },
            {
                "decripcion": "I haven't run the code, but don't you need to daemonize the threads? I think that after that last for-loop, your program might exit - at least it should because that's how threads should work. I think a better approach is not put the worker data in the queue, but put the output into a queue because then you could have a mainloop that not only handles information coming into the queue from the workers, but now it is also not threading, and you know it won't exit prematurely.",
                "fecha": { "$date" : "2016-10-12T16:11:17Z" },
                "usuario": "dylnmc",
                "usuario_id": 1450
            },
            {
                "decripcion": "@dylnmc, that's outside my use case (my input queue is predefined). If you want to go your route, I would suggest looking at celery",
                "fecha": { "$date" : "2016-10-18T17:45:47Z" },
                "usuario": "JimJty",
                "usuario_id": 1449
            },
            {
                "decripcion": "@JimJty do you know why I'm getting this error:     import Queue ModuleNotFoundError: No module named 'Queue' I am running python 3.6.5 some posts mention that in python 3.6.5 it is queue but even after I change it, still does not work",
                "fecha": { "$date" : "2019-03-01T13:19:37Z" },
                "usuario": "user9371654",
                "usuario_id": 1451
            }
        ],
        "usuario": "JimJty",
        "usuario_id": 1449
    },
    {
        "_id": 858,
        "fecha": { "$date" : "2017-03-16T16:07:46Z" },
        "decripcion": "\nGiven a function, f, thread it like this:\n\nimport threading\nthreading.Thread(target=f).start()\n\n\nTo pass arguments to f\n\nthreading.Thread(target=f, args=(a,b,c)).start()\n\n    ",
        "votes": 25,
        "comentarios": [
            {
                "decripcion": "This is very straightforward.  How do you ensure that the threads close when you are done with them?",
                "fecha": { "$date" : "2017-05-05T20:57:40Z" },
                "usuario": "cameronroytaylor",
                "usuario_id": 1452
            },
            {
                "decripcion": "As far as I understand it, when the function exits the Thread object cleans up. See the docs. There is an is_alive() method you can use to check a thread if you need to.",
                "fecha": { "$date" : "2017-05-06T18:50:18Z" },
                "usuario": "starfry",
                "usuario_id": 1453
            },
            {
                "decripcion": "I saw the is_alive method, but I couldn't figure out how to apply it to the thread.  I tried assigning thread1=threading.Thread(target=f).start() and then checking it with thread1.is_alive(), but thread1 is populated with None, so no luck there.  Do you know if there is any other way to access the thread?",
                "fecha": { "$date" : "2017-05-06T19:39:04Z" },
                "usuario": "cameronroytaylor",
                "usuario_id": 1452
            },
            {
                "decripcion": "You need to assign the thread object to a variable and then start it using that varaible: thread1=threading.Thread(target=f) followed by thread1.start().  Then you can do thread1.is_alive().",
                "fecha": { "$date" : "2017-05-07T13:08:14Z" },
                "usuario": "starfry",
                "usuario_id": 1453
            },
            {
                "decripcion": "That worked.  And yes, testing with thread1.is_alive() returns False as soon as the function exits.",
                "fecha": { "$date" : "2017-05-08T13:45:48Z" },
                "usuario": "cameronroytaylor",
                "usuario_id": 1452
            }
        ],
        "usuario": "starfry",
        "usuario_id": 1453
    },
    {
        "_id": 859,
        "fecha": { "$date" : "2019-12-09T17:09:06Z" },
        "decripcion": "\nI found this very useful: create as many threads as cores and let them execute a (large) number of tasks (in this case, calling a shell program):\n\nimport Queue\nimport threading\nimport multiprocessing\nimport subprocess\n\nq = Queue.Queue()\nfor i in range(30): # Put 30 tasks in the queue\n    q.put(i)\n\ndef worker():\n    while True:\n        item = q.get()\n        # Execute a task: call a shell program and wait until it completes\n        subprocess.call(\"echo \" + str(item), shell=True)\n        q.task_done()\n\ncpus = multiprocessing.cpu_count() # Detect number of cores\nprint(\"Creating %d threads\" % cpus)\nfor i in range(cpus):\n     t = threading.Thread(target=worker)\n     t.daemon = True\n     t.start()\n\nq.join() # Block until all tasks are done\n\n    ",
        "votes": 25,
        "comentarios": [
            {
                "decripcion": "@shavenwarthog sure one can adjust the \"cpus\" variable depending on one's needs. Anyway, the subprocess call will spawn subprocesses and these will be allocated cpus by the OS (python's \"parent process\" does not mean \"same CPU\" for the subprocesses).",
                "fecha": { "$date" : "2014-07-02T02:28:11Z" },
                "usuario": "dolphin",
                "usuario_id": 1454
            },
            {
                "decripcion": "you're correct, my comment about \"threads are started on the same CPU as the parent process\" is wrong.  Thanks for the reply!",
                "fecha": { "$date" : "2014-07-02T05:51:24Z" },
                "usuario": "johntellsall",
                "usuario_id": 1441
            },
            {
                "decripcion": "maybe worth noting that unlike multithreading which uses the same memory space, multiprocessing can not share variables / data as easily. +1 though.",
                "fecha": { "$date" : "2014-07-23T09:07:42Z" },
                "usuario": "fantabolous",
                "usuario_id": 308
            }
        ],
        "usuario": "dolphin",
        "usuario_id": 1454
    },
    {
        "_id": 860,
        "fecha": { "$date" : "2019-12-09T17:25:46Z" },
        "decripcion": "\nPython 3 has the facility of launching parallel tasks. This makes our work easier.\n\nIt has thread pooling and process pooling.\n\nThe following gives an insight:\n\nThreadPoolExecutor Example (source)\n\nimport concurrent.futures\nimport urllib.request\n\nURLS = ['http://www.foxnews.com/',\n        'http://www.cnn.com/',\n        'http://europe.wsj.com/',\n        'http://www.bbc.co.uk/',\n        'http://some-made-up-domain.com/']\n\n# Retrieve a single page and report the URL and contents\ndef load_url(url, timeout):\n    with urllib.request.urlopen(url, timeout=timeout) as conn:\n        return conn.read()\n\n# We can use a with statement to ensure threads are cleaned up promptly\nwith concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n    # Start the load operations and mark each future with its URL\n    future_to_url = {executor.submit(load_url, url, 60): url for url in URLS}\n    for future in concurrent.futures.as_completed(future_to_url):\n        url = future_to_url[future]\n        try:\n            data = future.result()\n        except Exception as exc:\n            print('%r generated an exception: %s' % (url, exc))\n        else:\n            print('%r page is %d bytes' % (url, len(data)))\n\n\nProcessPoolExecutor (source)\n\nimport concurrent.futures\nimport math\n\nPRIMES = [\n    112272535095293,\n    112582705942171,\n    112272535095293,\n    115280095190773,\n    115797848077099,\n    1099726899285419]\n\ndef is_prime(n):\n    if n % 2 == 0:\n        return False\n\n    sqrt_n = int(math.floor(math.sqrt(n)))\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    with concurrent.futures.ProcessPoolExecutor() as executor:\n        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):\n            print('%d is prime: %s' % (number, prime))\n\nif __name__ == '__main__':\n    main()\n\n    ",
        "votes": 22,
        "comentarios": [],
        "usuario": "Jeril",
        "usuario_id": 1455
    },
    {
        "_id": 861,
        "fecha": { "$date" : "2019-12-09T17:39:12Z" },
        "decripcion": "\nI saw a lot of examples here where no real work was being performed, and they were mostly CPU-bound. Here is an example of a CPU-bound task that computes all prime numbers between 10 million and 10.05 million. I have used all four methods here:\n\nimport math\nimport timeit\nimport threading\nimport multiprocessing\nfrom concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor\n\n\ndef time_stuff(fn):\n    \"\"\"\n    Measure time of execution of a function\n    \"\"\"\n    def wrapper(*args, **kwargs):\n        t0 = timeit.default_timer()\n        fn(*args, **kwargs)\n        t1 = timeit.default_timer()\n        print(\"{} seconds\".format(t1 - t0))\n    return wrapper\n\ndef find_primes_in(nmin, nmax):\n    \"\"\"\n    Compute a list of prime numbers between the given minimum and maximum arguments\n    \"\"\"\n    primes = []\n\n    # Loop from minimum to maximum\n    for current in range(nmin, nmax + 1):\n\n        # Take the square root of the current number\n        sqrt_n = int(math.sqrt(current))\n        found = False\n\n        # Check if the any number from 2 to the square root + 1 divides the current numnber under consideration\n        for number in range(2, sqrt_n + 1):\n\n            # If divisible we have found a factor, hence this is not a prime number, lets move to the next one\n            if current % number == 0:\n                found = True\n                break\n\n        # If not divisible, add this number to the list of primes that we have found so far\n        if not found:\n            primes.append(current)\n\n    # I am merely printing the length of the array containing all the primes, but feel free to do what you want\n    print(len(primes))\n\n@time_stuff\ndef sequential_prime_finder(nmin, nmax):\n    \"\"\"\n    Use the main process and main thread to compute everything in this case\n    \"\"\"\n    find_primes_in(nmin, nmax)\n\n@time_stuff\ndef threading_prime_finder(nmin, nmax):\n    \"\"\"\n    If the minimum is 1000 and the maximum is 2000 and we have four workers,\n    1000 - 1250 to worker 1\n    1250 - 1500 to worker 2\n    1500 - 1750 to worker 3\n    1750 - 2000 to worker 4\n    so let\u2019s split the minimum and maximum values according to the number of workers\n    \"\"\"\n    nrange = nmax - nmin\n    threads = []\n    for i in range(8):\n        start = int(nmin + i * nrange/8)\n        end = int(nmin + (i + 1) * nrange/8)\n\n        # Start the thread with the minimum and maximum split up to compute\n        # Parallel computation will not work here due to the GIL since this is a CPU-bound task\n        t = threading.Thread(target = find_primes_in, args = (start, end))\n        threads.append(t)\n        t.start()\n\n    # Don\u2019t forget to wait for the threads to finish\n    for t in threads:\n        t.join()\n\n@time_stuff\ndef processing_prime_finder(nmin, nmax):\n    \"\"\"\n    Split the minimum, maximum interval similar to the threading method above, but use processes this time\n    \"\"\"\n    nrange = nmax - nmin\n    processes = []\n    for i in range(8):\n        start = int(nmin + i * nrange/8)\n        end = int(nmin + (i + 1) * nrange/8)\n        p = multiprocessing.Process(target = find_primes_in, args = (start, end))\n        processes.append(p)\n        p.start()\n\n    for p in processes:\n        p.join()\n\n@time_stuff\ndef thread_executor_prime_finder(nmin, nmax):\n    \"\"\"\n    Split the min max interval similar to the threading method, but use a thread pool executor this time.\n    This method is slightly faster than using pure threading as the pools manage threads more efficiently.\n    This method is still slow due to the GIL limitations since we are doing a CPU-bound task.\n    \"\"\"\n    nrange = nmax - nmin\n    with ThreadPoolExecutor(max_workers = 8) as e:\n        for i in range(8):\n            start = int(nmin + i * nrange/8)\n            end = int(nmin + (i + 1) * nrange/8)\n            e.submit(find_primes_in, start, end)\n\n@time_stuff\ndef process_executor_prime_finder(nmin, nmax):\n    \"\"\"\n    Split the min max interval similar to the threading method, but use the process pool executor.\n    This is the fastest method recorded so far as it manages process efficiently + overcomes GIL limitations.\n    RECOMMENDED METHOD FOR CPU-BOUND TASKS\n    \"\"\"\n    nrange = nmax - nmin\n    with ProcessPoolExecutor(max_workers = 8) as e:\n        for i in range(8):\n            start = int(nmin + i * nrange/8)\n            end = int(nmin + (i + 1) * nrange/8)\n            e.submit(find_primes_in, start, end)\n\ndef main():\n    nmin = int(1e7)\n    nmax = int(1.05e7)\n    print(\"Sequential Prime Finder Starting\")\n    sequential_prime_finder(nmin, nmax)\n    print(\"Threading Prime Finder Starting\")\n    threading_prime_finder(nmin, nmax)\n    print(\"Processing Prime Finder Starting\")\n    processing_prime_finder(nmin, nmax)\n    print(\"Thread Executor Prime Finder Starting\")\n    thread_executor_prime_finder(nmin, nmax)\n    print(\"Process Executor Finder Starting\")\n    process_executor_prime_finder(nmin, nmax)\n\nmain()\n\n\nHere are the results on my Mac\u00a0OS\u00a0X four-core machine\n\nSequential Prime Finder Starting\n9.708213827005238 seconds\nThreading Prime Finder Starting\n9.81836523200036 seconds\nProcessing Prime Finder Starting\n3.2467174359990167 seconds\nThread Executor Prime Finder Starting\n10.228896902000997 seconds\nProcess Executor Finder Starting\n2.656402041000547 seconds\n\n    ",
        "votes": 20,
        "comentarios": [
            {
                "decripcion": "@TheUnfunCat no process executor s far better than threading for cpu bound tasks",
                "fecha": { "$date" : "2018-05-02T03:52:57Z" },
                "usuario": "PirateApp",
                "usuario_id": 1456
            },
            {
                "decripcion": "Great answer dude. I can confirm that in Python 3.6 on Windows (at least) ThreadPoolExecutor does nothing good for CPU-heavy tasks. It's not utilizing cores for computation. Whereas ProcessPoolExecutor copies data into EVERY process it spawns, it's deadly for large matrices.",
                "fecha": { "$date" : "2018-07-22T07:33:03Z" },
                "usuario": "Anatoly Alekseev",
                "usuario_id": 1457
            },
            {
                "decripcion": "Very useful example, but I don't understand how it ever worked. We need a if __name__ == '__main__': before the main call, otherwise the measurement spawns itself and prints An attempt has been made to start a new process before....",
                "fecha": { "$date" : "2019-07-15T18:37:05Z" },
                "usuario": "Stein",
                "usuario_id": 1458
            },
            {
                "decripcion": "@Stein I believe that is only an issue on Windows, though.",
                "fecha": { "$date" : "2020-01-25T18:47:03Z" },
                "usuario": "AMC",
                "usuario_id": 1459
            }
        ],
        "usuario": "PirateApp",
        "usuario_id": 1456
    },
    {
        "_id": 862,
        "fecha": { "$date" : "2016-10-29T22:03:21Z" },
        "decripcion": "\nUsing the blazing new concurrent.futures module\n\ndef sqr(val):\n    import time\n    time.sleep(0.1)\n    return val * val\n\ndef process_result(result):\n    print(result)\n\ndef process_these_asap(tasks):\n    import concurrent.futures\n\n    with concurrent.futures.ProcessPoolExecutor() as executor:\n        futures = []\n        for task in tasks:\n            futures.append(executor.submit(sqr, task))\n\n        for future in concurrent.futures.as_completed(futures):\n            process_result(future.result())\n        # Or instead of all this just do:\n        # results = executor.map(sqr, tasks)\n        # list(map(process_result, results))\n\ndef main():\n    tasks = list(range(10))\n    print('Processing {} tasks'.format(len(tasks)))\n    process_these_asap(tasks)\n    print('Done')\n    return 0\n\nif __name__ == '__main__':\n    import sys\n    sys.exit(main())\n\n\nThe executor approach might seem familiar to all those who have gotten their hands dirty with Java before.\n\nAlso on a side note: To keep the universe sane, don't forget to close your pools/executors if you don't use with context (which is so awesome that it does it for you)\n    ",
        "votes": 19,
        "comentarios": [],
        "usuario": "Shubham Chaudhary",
        "usuario_id": 1460
    },
    {
        "_id": 863,
        "fecha": { "$date" : "2019-12-09T17:31:47Z" },
        "decripcion": "\nMost documentation and tutorials use Python's Threading and Queue module, and they could seem overwhelming for beginners.\n\nPerhaps consider the concurrent.futures.ThreadPoolExecutor module of Python\u00a03.\n\nCombined with with clause and list comprehension it could be a real charm.\n\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\ndef get_url(url):\n    # Your actual program here. Using threading.Lock() if necessary\n    return \"\"\n\n# List of URLs to fetch\nurls = [\"url1\", \"url2\"]\n\nwith ThreadPoolExecutor(max_workers = 5) as executor:\n\n    # Create threads\n    futures = {executor.submit(get_url, url) for url in urls}\n\n    # as_completed() gives you the threads once finished\n    for f in as_completed(futures):\n        # Get the results\n        rs = f.result()\n\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "Yibo",
        "usuario_id": 1461
    },
    {
        "_id": 864,
        "fecha": { "$date" : "2019-12-09T17:03:11Z" },
        "decripcion": "\nFor me, the perfect example for threading is monitoring asynchronous events. Look at this code.\n\n# thread_test.py\nimport threading\nimport time\n\nclass Monitor(threading.Thread):\n    def __init__(self, mon):\n        threading.Thread.__init__(self)\n        self.mon = mon\n\n    def run(self):\n        while True:\n            if self.mon[0] == 2:\n                print \"Mon = 2\"\n                self.mon[0] = 3;\n\n\nYou can play with this code by opening an IPython session and doing something like:\n\n>>> from thread_test import Monitor\n>>> a = [0]\n>>> mon = Monitor(a)\n>>> mon.start()\n>>> a[0] = 2\nMon = 2\n>>>a[0] = 2\nMon = 2\n\n\nWait a few minutes\n\n>>> a[0] = 2\nMon = 2\n\n    ",
        "votes": 17,
        "comentarios": [
            {
                "decripcion": "AttributeError: 'Monitor' object has no attribute 'stop' ?",
                "fecha": { "$date" : "2013-09-14T15:29:58Z" },
                "usuario": "pandita",
                "usuario_id": 1440
            },
            {
                "decripcion": "Aren't you blasting away CPU cycles while waiting for your event to happen? Not always a very practical thing to do.",
                "fecha": { "$date" : "2013-09-16T16:58:11Z" },
                "usuario": "mogul",
                "usuario_id": 1462
            },
            {
                "decripcion": "Like mogul says, this will be constantly executing. At a minimum you could add in a short sleep, say sleep(0.1), which would probably significantly reduce cpu usage on a simple example like this.",
                "fecha": { "$date" : "2014-07-23T09:10:10Z" },
                "usuario": "fantabolous",
                "usuario_id": 308
            },
            {
                "decripcion": "This is a horrible example, wasting one core. Add a sleep at the very least but the proper solution is to use some signaling-mechanism.",
                "fecha": { "$date" : "2015-12-11T10:51:11Z" },
                "usuario": "PureW",
                "usuario_id": 1463
            },
            {
                "decripcion": "I've read about GIL lately, i wonder how it is possible to input a[0] = 2 while the started thread is running which is a python CPU-bound task. Doesn't GIL prevent you from being able to run any other python code since it is once acquired by the Monitor thread? Or does python constantly switch between threads and GIL just prevents that no threads are executed at the same time but can be executed concurrently (but not parallely)?",
                "fecha": { "$date" : "2020-12-25T16:44:34Z" },
                "usuario": "iRestMyCaseYourHonor",
                "usuario_id": 1464
            }
        ],
        "usuario": "dvreed77",
        "usuario_id": 1465
    },
    {
        "_id": 865,
        "fecha": { "$date" : "2019-12-09T17:41:30Z" },
        "decripcion": "\nHere is the very simple example of CSV import using threading. (Library inclusion may differ for different purpose.)\n\nHelper Functions:\n\nfrom threading import Thread\nfrom project import app\nimport csv\n\n\ndef import_handler(csv_file_name):\n    thr = Thread(target=dump_async_csv_data, args=[csv_file_name])\n    thr.start()\n\ndef dump_async_csv_data(csv_file_name):\n    with app.app_context():\n        with open(csv_file_name) as File:\n            reader = csv.DictReader(File)\n            for row in reader:\n                # DB operation/query\n\n\nDriver Function:\n\nimport_handler(csv_file_name)\n\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "Chirag Vora",
        "usuario_id": 1466
    },
    {
        "_id": 866,
        "fecha": { "$date" : "2019-12-09T17:50:42Z" },
        "decripcion": "\nI would like to contribute with a simple example and the explanations I've found useful when I had to tackle this problem myself.\n\nIn this answer you will find some information about Python's GIL (global interpreter lock) and a simple day-to-day example written using multiprocessing.dummy plus some simple benchmarks.\n\nGlobal Interpreter Lock (GIL)\n\nPython doesn't allow multi-threading in the truest sense of the word. It has a multi-threading package, but if you want to multi-thread to speed your code up, then it's usually not a good idea to use it.\n\nPython has a construct called the global interpreter lock (GIL).\nThe GIL makes sure that only one of your 'threads' can execute at any one time. A thread acquires the GIL, does a little work, then passes the GIL onto the next thread.\n\nThis happens very quickly so to the human eye it may seem like your threads are executing in parallel, but they are really just taking turns using the same CPU core.\n\nAll this GIL passing adds overhead to execution. This means that if you want to make your code run faster then using the threading\npackage often isn't a good idea.\n\nThere are reasons to use Python's threading package. If you want to run some things simultaneously, and efficiency is not a concern,\nthen it's totally fine and convenient. Or if you are running code that needs to wait for something (like some I/O) then it could make a lot of sense. But the threading library won't let you use extra CPU cores.\n\nMulti-threading can be outsourced to the operating system (by doing multi-processing), and some external application that calls your Python code (for example, Spark or Hadoop), or some code that your Python code calls (for example: you could have your Python code call a C function that does the expensive multi-threaded stuff).\n\nWhy This Matters\n\nBecause lots of people spend a lot of time trying to find bottlenecks in their fancy Python multi-threaded code before they learn what the GIL is.\n\nOnce this information is clear, here's my code:\n\n#!/bin/python\nfrom multiprocessing.dummy import Pool\nfrom subprocess import PIPE,Popen\nimport time\nimport os\n\n# In the variable pool_size we define the \"parallelness\".\n# For CPU-bound tasks, it doesn't make sense to create more Pool processes\n# than you have cores to run them on.\n#\n# On the other hand, if you are using I/O-bound tasks, it may make sense\n# to create a quite a few more Pool processes than cores, since the processes\n# will probably spend most their time blocked (waiting for I/O to complete).\npool_size = 8\n\ndef do_ping(ip):\n    if os.name == 'nt':\n        print (\"Using Windows Ping to \" + ip)\n        proc = Popen(['ping', ip], stdout=PIPE)\n        return proc.communicate()[0]\n    else:\n        print (\"Using Linux / Unix Ping to \" + ip)\n        proc = Popen(['ping', ip, '-c', '4'], stdout=PIPE)\n        return proc.communicate()[0]\n\n\nos.system('cls' if os.name=='nt' else 'clear')\nprint (\"Running using threads\\n\")\nstart_time = time.time()\npool = Pool(pool_size)\nwebsite_names = [\"www.google.com\",\"www.facebook.com\",\"www.pinterest.com\",\"www.microsoft.com\"]\nresult = {}\nfor website_name in website_names:\n    result[website_name] = pool.apply_async(do_ping, args=(website_name,))\npool.close()\npool.join()\nprint (\"\\n--- Execution took {} seconds ---\".format((time.time() - start_time)))\n\n# Now we do the same without threading, just to compare time\nprint (\"\\nRunning NOT using threads\\n\")\nstart_time = time.time()\nfor website_name in website_names:\n    do_ping(website_name)\nprint (\"\\n--- Execution took {} seconds ---\".format((time.time() - start_time)))\n\n# Here's one way to print the final output from the threads\noutput = {}\nfor key, value in result.items():\n    output[key] = value.get()\nprint (\"\\nOutput aggregated in a Dictionary:\")\nprint (output)\nprint (\"\\n\")\n\nprint (\"\\nPretty printed output: \")\nfor key, value in output.items():\n    print (key + \"\\n\")\n    print (value)\n\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "Pitto",
        "usuario_id": 1467
    },
    {
        "_id": 867,
        "fecha": { "$date" : "2020-12-02T06:25:48Z" },
        "decripcion": "\nWith borrowing from this post we know about choosing between the multithreading, multiprocessing, and async/asyncio and their usage.\nPython 3 has a new built-in library in order to make concurrency and parallelism: concurrent.futures\nSo I'll demonstrate through an experiment to run four tasks (i.e. .sleep() method) by Threading-Pool:\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nfrom time import sleep, time\n\ndef concurrent(max_worker):\n    futures = []\n    tic = time()\n    with ThreadPoolExecutor(max_workers=max_worker) as executor:\n        futures.append(executor.submit(sleep, 2))  # Two seconds sleep\n        futures.append(executor.submit(sleep, 1))\n        futures.append(executor.submit(sleep, 7))\n        futures.append(executor.submit(sleep, 3))\n        for future in as_completed(futures):\n            if future.result() is not None:\n                print(future.result())\n    print(f'Total elapsed time by {max_worker} workers:', time()-tic)\n\nconcurrent(5)\nconcurrent(4)\nconcurrent(3)\nconcurrent(2)\nconcurrent(1)\n\nOutput:\nTotal elapsed time by 5 workers: 7.007831811904907\nTotal elapsed time by 4 workers: 7.007944107055664\nTotal elapsed time by 3 workers: 7.003149509429932\nTotal elapsed time by 2 workers: 8.004627466201782\nTotal elapsed time by 1 workers: 13.013478994369507\n\n\n[NOTE]:\n\nAs you can see in the above results, the best case was 3 workers for those four tasks.\nIf you have a process task instead of I/O bound or blocking (multiprocessing instead of threading) you can change the ThreadPoolExecutor to ProcessPoolExecutor.\n\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "Benyamin Jafari",
        "usuario_id": 1468
    },
    {
        "_id": 868,
        "fecha": { "$date" : "2019-12-09T17:21:56Z" },
        "decripcion": "\nHere is multi threading with a simple example which will be helpful. You can run it and understand easily how multi threading is working in Python. I used a lock for preventing access to other threads until the previous threads finished their work. By the use of this line of code,\n\n\n  tLock = threading.BoundedSemaphore(value=4)\n\n\nyou can allow a number of processes at a time and keep hold to the rest of the threads which will run later or after finished previous processes.\n\nimport threading\nimport time\n\n#tLock = threading.Lock()\ntLock = threading.BoundedSemaphore(value=4)\ndef timer(name, delay, repeat):\n    print  \"\\r\\nTimer: \", name, \" Started\"\n    tLock.acquire()\n    print \"\\r\\n\", name, \" has the acquired the lock\"\n    while repeat > 0:\n        time.sleep(delay)\n        print \"\\r\\n\", name, \": \", str(time.ctime(time.time()))\n        repeat -= 1\n\n    print \"\\r\\n\", name, \" is releaseing the lock\"\n    tLock.release()\n    print \"\\r\\nTimer: \", name, \" Completed\"\n\ndef Main():\n    t1 = threading.Thread(target=timer, args=(\"Timer1\", 2, 5))\n    t2 = threading.Thread(target=timer, args=(\"Timer2\", 3, 5))\n    t3 = threading.Thread(target=timer, args=(\"Timer3\", 4, 5))\n    t4 = threading.Thread(target=timer, args=(\"Timer4\", 5, 5))\n    t5 = threading.Thread(target=timer, args=(\"Timer5\", 0.1, 5))\n\n    t1.start()\n    t2.start()\n    t3.start()\n    t4.start()\n    t5.start()\n\n    print \"\\r\\nMain Complete\"\n\nif __name__ == \"__main__\":\n    Main()\n\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "cSharma",
        "usuario_id": 1469
    },
    {
        "_id": 869,
        "fecha": { "$date" : "2019-12-09T17:23:53Z" },
        "decripcion": "\nNone of the previous solutions actually used multiple cores on my GNU/Linux server (where I don't have administrator rights). They just ran on a single core.\n\nI used the lower level os.fork interface to spawn multiple processes. This is the code that worked for me:\n\nfrom os import fork\n\nvalues = ['different', 'values', 'for', 'threads']\n\nfor i in range(len(values)):\n    p = fork()\n    if p == 0:\n        my_function(values[i])\n        break\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "David Schumann",
        "usuario_id": 1470
    },
    {
        "_id": 870,
        "fecha": { "$date" : "2018-05-07T18:06:31Z" },
        "decripcion": "\nimport threading\nimport requests\n\ndef send():\n\n  r = requests.get('https://www.stackoverlow.com')\n\nthread = []\nt = threading.Thread(target=send())\nthread.append(t)\nt.start()\n\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "@sP_ I'm guessing because then you have thread objects so you can wait for them to finish.",
                "fecha": { "$date" : "2018-10-16T12:28:47Z" },
                "usuario": "Aleksandar Makragi\u0107",
                "usuario_id": 1471
            },
            {
                "decripcion": "t = threading.Thread(target=send()) should be t = threading.Thread(target=send)",
                "fecha": { "$date" : "2019-01-23T00:30:03Z" },
                "usuario": "TRiNE",
                "usuario_id": 1472
            },
            {
                "decripcion": "I'm downvoting this answer because it doesn't provide an explanation of how it improves upon existing answers, in addition to containing a serious inaccuracy.",
                "fecha": { "$date" : "2019-01-27T04:22:13Z" },
                "usuario": "Jules",
                "usuario_id": 1473
            }
        ],
        "usuario": "Skiller Dz",
        "usuario_id": 1474
    },
    {
        "_id": 871,
        "fecha": { "$date" : "2021-06-28T11:44:33Z" },
        "decripcion": "\nAs a python3 version of the second anwser:\nimport queue as Queue\nimport threading\nimport urllib.request\n\n# Called by each thread\ndef get_url(q, url):\n    q.put(urllib.request.urlopen(url).read())\n\ntheurls = [\"http://google.com\", \"http://yahoo.com\", \"http://www.python.org\",\"https://wiki.python.org/moin/\"]\n\nq = Queue.Queue()\ndef thread_func():\n    for u in theurls:\n        t = threading.Thread(target=get_url, args = (q,u))\n        t.daemon = True\n        t.start()\n\n    s = q.get()\n    \ndef non_thread_func():\n    for u in theurls:\n        get_url(q,u)\n        \n\n    s = q.get()\n   \n\nAnd you can test it:\nstart = time.time()\nthread_func()\nend = time.time()\nprint(end - start)\n\nstart = time.time()\nnon_thread_func()\nend = time.time()\nprint(end - start)\n\nnon_thread_func() should cost 4 times the time spent than thread_func()\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Aaron Chen",
        "usuario_id": 1475
    },
    {
        "_id": 872,
        "fecha": { "$date" : "2021-08-28T13:09:15Z" },
        "decripcion": "\nIt's very easy to understand. Here are the two simple ways to do threading.\nimport time\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nimport threading\n\ndef a(a=1, b=2):\n    print(a)\n    time.sleep(5)\n    print(b)\n    return a+b\n\ndef b(**kwargs):\n    if \"a\" in kwargs:\n        print(\"am b\")\n    else:\n        print(\"nothing\")\n        \nto_do=[]\nexecutor = ThreadPoolExecutor(max_workers=4)\nex1=executor.submit(a)\nto_do.append(ex1)\nex2=executor.submit(b, **{\"a\":1})\nto_do.append(ex2)\n\nfor future in as_completed(to_do):\n    print(\"Future {} and Future Return is {}\\n\".format(future, future.result()))\n\nprint(\"threading\")\n\nto_do=[]\nto_do.append(threading.Thread(target=a))\nto_do.append(threading.Thread(target=b, kwargs={\"a\":1}))\n\nfor threads in to_do:\n    threads.start()\n    \nfor threads in to_do:\n    threads.join()\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "JGK",
        "usuario_id": 1476
    },
    {
        "_id": 873,
        "fecha": { "$date" : "2015-04-07T11:03:02Z" },
        "decripcion": "\nA race condition occurs when two or more threads can access shared data and they try to change it at the same time. Because the thread scheduling algorithm can swap between threads at any time, you don't know the order in which the threads will attempt to access the shared data. Therefore, the result of the change in data is dependent on the thread scheduling algorithm, i.e. both threads are \"racing\" to access/change the data. \n\nProblems often occur when one thread does a \"check-then-act\" (e.g. \"check\" if the value is X, then \"act\" to do something that depends on the value being X) and another thread does something to the value in between the \"check\" and the \"act\". E.g:\n\nif (x == 5) // The \"Check\"\n{\n   y = x * 2; // The \"Act\"\n\n   // If another thread changed x in between \"if (x == 5)\" and \"y = x * 2\" above,\n   // y will not be equal to 10.\n}\n\n\nThe point being, y could be 10, or it could be anything, depending on whether another thread changed x in between the check and act. You have no real way of knowing.\n\nIn order to prevent race conditions from occurring, you would typically put a lock around the shared data to ensure only one thread can access the data at a time. This would mean something like this:\n\n// Obtain lock for x\nif (x == 5)\n{\n   y = x * 2; // Now, nothing can change x until the lock is released. \n              // Therefore y = 10\n}\n// release lock for x\n\n    ",
        "votes": 1445,
        "comentarios": [
            {
                "decripcion": "What does the other thread do when it encounters the lock? Does it wait? Error?",
                "fecha": { "$date" : "2009-10-19T01:58:26Z" },
                "usuario": "Brian Ortiz",
                "usuario_id": 1482
            },
            {
                "decripcion": "Yes, the other thread will have to wait until the lock is released before it can proceed. This makes it very important that the lock is released by the holding thread when it is finished with it. If it never releases it, then the other thread will wait indefinitely.",
                "fecha": { "$date" : "2009-10-22T09:01:39Z" },
                "usuario": "Lehane",
                "usuario_id": 1483
            },
            {
                "decripcion": "@Ian In a multithreaded system there will always be times when resources need to be shared. To say that one approach is bad without giving an alternative just isn't productive. I'm always looking for ways to improve and if there is an alternative I will gladly research it and weigh the pro's and cons.",
                "fecha": { "$date" : "2012-05-03T05:16:27Z" },
                "usuario": "Despertar",
                "usuario_id": 1484
            },
            {
                "decripcion": "@Despertar ...also, its not necessarily the case that resources will always need to be shared in a milti-threaded system. For example you might have an array where each element needs processing. You could possibly partition the array and have a thread for each partition and the threads can do their work completely independently of one another.",
                "fecha": { "$date" : "2012-05-03T17:29:21Z" },
                "usuario": "Ian Warburton",
                "usuario_id": 1485
            },
            {
                "decripcion": "For a race to occur it's enough that a single thread attempts to change the shared data while rest of the threads can either read or change it.",
                "fecha": { "$date" : "2012-11-09T16:13:30Z" },
                "usuario": "SomeWittyUsername",
                "usuario_id": 1486
            }
        ],
        "usuario": "Lehane",
        "usuario_id": 1483
    },
    {
        "_id": 874,
        "fecha": { "$date" : "2015-11-12T19:31:01Z" },
        "decripcion": "\nA \"race condition\" exists when multithreaded (or otherwise parallel) code that would access a shared resource could do so in such a way as to cause unexpected results.\n\nTake this example:\n\nfor ( int i = 0; i < 10000000; i++ )\n{\n   x = x + 1; \n}\n\n\nIf you had 5 threads executing this code at once, the value of x WOULD NOT end up being 50,000,000.  It would in fact vary with each run.\n\nThis is because, in order for each thread to increment the value of x, they have to do the following: (simplified, obviously)\n\nRetrieve the value of x\nAdd 1 to this value\nStore this value to x\n\n\nAny thread can be at any step in this process at any time, and they can step on each other when a shared resource is involved.  The state of x can be changed by another thread during the time between x is being read and when it is written back.\n\nLet's say a thread retrieves the value of x, but hasn't stored it yet.  Another thread can also retrieve the same value of x (because no thread has changed it yet) and then they would both be storing the same value (x+1) back in x!\n\nExample:\n\nThread 1: reads x, value is 7\nThread 1: add 1 to x, value is now 8\nThread 2: reads x, value is 7\nThread 1: stores 8 in x\nThread 2: adds 1 to x, value is now 8\nThread 2: stores 8 in x\n\n\nRace conditions can be avoided by employing some sort of locking mechanism before the code that accesses the shared resource:\n\nfor ( int i = 0; i < 10000000; i++ )\n{\n   //lock x\n   x = x + 1; \n   //unlock x\n}\n\n\nHere, the answer comes out as 50,000,000 every time.\n\nFor more on locking, search for: mutex, semaphore, critical section, shared resource.\n    ",
        "votes": 234,
        "comentarios": [
            {
                "decripcion": "See jakob.engbloms.se/archives/65 for an example of a program to test how oiften such things go bad... it really depends on the memory model of the machine you are running on.",
                "fecha": { "$date" : "2008-10-12T19:54:00Z" },
                "usuario": "jakobengblom2",
                "usuario_id": 1487
            },
            {
                "decripcion": "How can it get to 50 million if it has to stop at 10 million?",
                "fecha": { "$date" : "2015-10-26T14:24:15Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "@nocomprende: By 5 threads executing the same code at a time, as described directly below the snippet...",
                "fecha": { "$date" : "2015-11-12T18:47:03Z" },
                "usuario": "Jon Skeet",
                "usuario_id": 1210
            },
            {
                "decripcion": "@JonSkeet You are right, I confused the i and the x. Thank you.",
                "fecha": { "$date" : "2015-11-12T18:57:45Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "Double check locking in implementing Singleton pattern is such an example of preventing race condition.",
                "fecha": { "$date" : "2016-08-31T08:02:34Z" },
                "usuario": "Bharat Dodeja",
                "usuario_id": 1488
            }
        ],
        "usuario": "privatehuff",
        "usuario_id": 1489
    },
    {
        "_id": 875,
        "fecha": { "$date" : "2015-08-05T06:11:31Z" },
        "decripcion": "\n\n  What is a Race Condition?\n\n\nYou are planning to go to a movie at 5 pm. You inquire about the availability of the tickets at 4 pm. The representative says that they are available. You relax and reach the ticket window 5 minutes before the show. I'm sure you can guess what happens: it's a full house. The problem here was in the duration between the check and the action. You inquired at 4 and acted at 5. In the meantime, someone else grabbed the tickets. That's a race condition - specifically a \"check-then-act\" scenario of race conditions.\n\n\n  How do you detect them?\n\n\nReligious code review, multi-threaded unit tests. There is no shortcut. There are few Eclipse plugin emerging on this, but nothing stable yet.\n\n\n  How do you handle and prevent them?\n\n\nThe best thing would be to create side-effect free and stateless functions, use immutables as much as possible. But that is not always possible. So using java.util.concurrent.atomic, concurrent data structures, proper synchronization, and actor based concurrency will help.\n\nThe best resource for concurrency is JCIP. You can also get some more details on above explanation here.\n    ",
        "votes": 163,
        "comentarios": [
            {
                "decripcion": "Code reviews and unit tests are secondary to modeling the flow between your ears, and making less use of shared memory.",
                "fecha": { "$date" : "2013-11-25T22:49:59Z" },
                "usuario": "Asclepius",
                "usuario_id": 1490
            },
            {
                "decripcion": "I appreciated the real world example of a race condition",
                "fecha": { "$date" : "2017-06-06T17:45:16Z" },
                "usuario": "Tom O.",
                "usuario_id": 1491
            },
            {
                "decripcion": "Like the answer thumbs up. Solution is: you lock the tickets between 4-5 with mutex (mutual exception, c++). In real world it is called ticket reservation :)",
                "fecha": { "$date" : "2017-08-25T12:11:43Z" },
                "usuario": "Volt",
                "usuario_id": 1492
            },
            {
                "decripcion": "would be a decent answer if you dropped the java-only bits (the question is not about Java, but rather race conditions in general)",
                "fecha": { "$date" : "2018-08-26T07:12:39Z" },
                "usuario": "Corey Goldberg",
                "usuario_id": 415
            },
            {
                "decripcion": "No. This isn't a race condition. From a \"business\" perspective you just waited too long. Obviously backorder is not a solution. Try a scalper otherwise just buy the ticket as insurance",
                "fecha": { "$date" : "2018-12-03T11:59:21Z" },
                "usuario": "csherriff",
                "usuario_id": 1493
            }
        ],
        "usuario": "Vishal Shukla",
        "usuario_id": 1494
    },
    {
        "_id": 876,
        "fecha": { "$date" : "2017-05-23T10:31:37Z" },
        "decripcion": "\nThere is an important technical difference between race conditions and data races. Most answers seem to make the assumption that these terms are equivalent, but they are not. \n\nA data race occurs when 2 instructions access the same memory location, at least one of these accesses is a write and there is no happens before ordering among these accesses. Now what constitutes a happens before ordering is subject to a lot of debate, but in general ulock-lock pairs on the same lock variable and wait-signal pairs on the same condition variable induce a happens-before order. \n\nA race condition is a semantic error. It is a flaw that occurs in the timing or the ordering of events that leads to erroneous program behavior. \n\nMany race conditions can be (and in fact are) caused by data races, but this is not necessary. As a matter of fact, data races and race conditions are neither the necessary, nor the sufficient condition for one another. This blog post also explains the difference very well, with a simple bank transaction example. Here is another simple example that explains the difference.\n\nNow that we nailed down the terminology, let us try to answer the original question.\n\nGiven that race conditions are semantic bugs, there is no general way of detecting them. This is because there is no way of having an automated oracle that can distinguish correct vs. incorrect program behavior in the general case. Race detection is an undecidable problem.\n\nOn the other hand, data races have a precise definition that does not necessarily relate to correctness, and therefore one can detect them. There are many flavors of data race detectors (static/dynamic data race detection, lockset-based data race detection, happens-before based data race detection, hybrid data race detection). A state of the art dynamic data race detector is ThreadSanitizer which works very well in practice.\n\nHandling data races in general requires some programming discipline to induce happens-before edges between accesses to shared data (either during development, or once they are detected using the above mentioned tools). this can be done through locks, condition variables, semaphores, etc. However, one can also employ different programming paradigms like message passing (instead of shared memory) that avoid data races by construction.\n    ",
        "votes": 74,
        "comentarios": [
            {
                "decripcion": "The difference is critical to understand race condition. Thanks!",
                "fecha": { "$date" : "2018-04-03T08:33:36Z" },
                "usuario": "ProgramCpp",
                "usuario_id": 1495
            },
            {
                "decripcion": "\"It is a flaw that occurs in the timing or the ordering of events that leads to erroneous program behavior.\" Perfect definition! Indeed, there is no reason to assume that the events must occur within one instance of an application. Multiple instances are just as applicable.",
                "fecha": { "$date" : "2020-07-08T04:11:45Z" },
                "usuario": "truefusion",
                "usuario_id": 1496
            }
        ],
        "usuario": "Baris Kasikci",
        "usuario_id": 1497
    },
    {
        "_id": 877,
        "fecha": { "$date" : "2008-08-29T16:21:41Z" },
        "decripcion": "\nA sort-of-canonical definition is \"when two threads access the same location in memory at the same time, and at least one of the accesses is a write.\" In the situation the \"reader\" thread may get the old value or the new value, depending on which thread \"wins the race.\" This is not always a bug\u2014in fact, some really hairy low-level algorithms do this on purpose\u2014but it should generally be avoided. @Steve Gury give's a good example of when it might be a problem.\n    ",
        "votes": 43,
        "comentarios": [
            {
                "decripcion": "Could you please give an example of how race conditions can be useful? Googling didn't help.",
                "fecha": { "$date" : "2013-12-11T14:47:52Z" },
                "usuario": "Alex V.",
                "usuario_id": 1498
            },
            {
                "decripcion": "@Alex V. At this point, I have no idea what I was talking about. I think this may have been a reference to lock-free programming, but it's not really accurate to say that depends on race conditions, per se.",
                "fecha": { "$date" : "2013-12-12T15:31:29Z" },
                "usuario": "Chris Conway",
                "usuario_id": 1499
            }
        ],
        "usuario": "Chris Conway",
        "usuario_id": 1499
    },
    {
        "_id": 878,
        "fecha": { "$date" : "2013-05-16T05:08:54Z" },
        "decripcion": "\nA race condition is a kind of bug, that happens only with certain temporal conditions.\n\nExample:\nImagine you have two threads, A and B.\n\nIn Thread A:\n\nif( object.a != 0 )\n    object.avg = total / object.a\n\n\nIn Thread B:\n\nobject.a = 0\n\n\nIf thread A is preempted just after having check that object.a is not null, B will do a = 0, and when thread A will gain the processor, it will do a \"divide by zero\". \n\nThis bug only happen when thread A is preempted just after the if statement, it's very rare, but it can happen.\n    ",
        "votes": 34,
        "comentarios": [],
        "usuario": "Steve Gury",
        "usuario_id": 1500
    },
    {
        "_id": 879,
        "fecha": { "$date" : "2019-02-09T17:35:34Z" },
        "decripcion": "\nA race condition is a situation on concurrent programming where two concurrent threads or processes compete for a resource and the resulting final state depends on who gets the resource first.\n    ",
        "votes": 28,
        "comentarios": [
            {
                "decripcion": "just brilliant explanation",
                "fecha": { "$date" : "2019-02-09T17:12:07Z" },
                "usuario": "gokareless",
                "usuario_id": 1501
            },
            {
                "decripcion": "Final state of what?",
                "fecha": { "$date" : "2019-06-20T06:41:55Z" },
                "usuario": "Roman Alexandrovich",
                "usuario_id": 1502
            },
            {
                "decripcion": "@RomanAlexandrovich The final state of the program. The state referring to things such as the values of variables, etc. See Lehane's excellent answer. The \"state\" in his example would refer to the final values of 'x' and 'y'.",
                "fecha": { "$date" : "2019-11-11T11:14:34Z" },
                "usuario": "AMTerp",
                "usuario_id": 1503
            }
        ],
        "usuario": "Jorge C\u00f3rdoba",
        "usuario_id": 1504
    },
    {
        "_id": 880,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nRace condition is not only related with software but also related with hardware too. Actually the term was initially coined by the hardware industry.\nAccording to wikipedia:\n\nThe term originates with the idea of two signals racing each other to\ninfluence the output first.\nRace condition in a logic circuit:\n\n\nSoftware industry took this term without modification, which makes it a little bit difficult to understand.\nYou need to do some replacement to map it to the software world:\n\n\"two signals\" => \"two threads\"/\"two processes\"\n\"influence the output\" => \"influence some shared state\"\n\nSo race condition in software industry means \"two threads\"/\"two processes\" racing each other to \"influence some shared state\", and the final result of the shared state will depend on some subtle timing difference, which could be caused by some specific thread/process launching order, thread/process scheduling, etc.\n    ",
        "votes": 24,
        "comentarios": [],
        "usuario": "nybon",
        "usuario_id": 1505
    },
    {
        "_id": 881,
        "fecha": { "$date" : "2008-08-29T16:12:09Z" },
        "decripcion": "\nRace conditions occur in multi-threaded applications or multi-process systems.  A race condition, at its most basic, is anything that makes the assumption that two things not in the same thread or process will happen in a particular order, without taking steps to ensure that they do.  This happens commonly when two threads are passing messages by setting and checking member variables of a class both can access.  There's almost always a race condition when one thread calls sleep to give another thread time to finish a task (unless that sleep is in a loop, with some checking mechanism).\n\nTools for preventing race conditions are dependent on the language and OS, but some comon ones are mutexes, critical sections, and signals.  Mutexes are good when you want to make sure you're the only one doing something.  Signals are good when you want to make sure someone else has finished doing something.  Minimizing shared resources can also help prevent unexpected behaviors\n\nDetecting race conditions can be difficult, but there are a couple signs.  Code which relies heavily on sleeps is prone to race conditions, so first check for calls to sleep in the affected code.  Adding particularly long sleeps can also be used for debugging to try and force a particular order of events.  This can be useful for reproducing the behavior, seeing if you can make it disappear by changing the timing of things, and for testing solutions put in place.  The sleeps should be removed after debugging.\n\nThe signature sign that one has a race condition though, is if there's an issue that only occurs intermittently on some machines.  Common bugs would be crashes and deadlocks.  With logging, you should be able to find the affected area and work back from there.\n    ",
        "votes": 19,
        "comentarios": [],
        "usuario": "tsellon",
        "usuario_id": 1506
    },
    {
        "_id": 882,
        "fecha": { "$date" : "2012-09-14T08:00:50Z" },
        "decripcion": "\nMicrosoft actually have published a really detailed article on this matter of race conditions and deadlocks. The most summarized abstract from it would be the title paragraph:\n\n\n  A race condition occurs when two threads access a shared variable at\n  the same time. The first thread reads the variable, and the second\n  thread reads the same value from the variable. Then the first thread\n  and second thread perform their operations on the value, and they race\n  to see which thread can write the value last to the shared variable.\n  The value of the thread that writes its value last is preserved,\n  because the thread is writing over the value that the previous thread\n  wrote.\n\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "Konstantin Dinev",
        "usuario_id": 1507
    },
    {
        "_id": 883,
        "fecha": { "$date" : "2019-03-26T18:14:14Z" },
        "decripcion": "\n\n  What is a race condition?\n\n\nThe situation when the process is critically dependent on the sequence or timing of other events.\n\nFor example,\nProcessor A and processor B both needs identical resource for their execution.\n\n\n  How do you detect them? \n\n\nThere are tools to detect race condition automatically:\n\n\nLockset-Based Race Checker\nHappens-Before Race Detection\nHybrid Race Detection\n\n\n\n  How do you handle them? \n\n\nRace condition can be handled by Mutex or Semaphores. They act as a lock allows a process to acquire a resource based on certain requirements to prevent race condition.\n\n\n  How do you prevent them from occurring?\n\n\nThere are various ways to prevent race condition, such as Critical Section Avoidance.\n\n\nNo two processes simultaneously inside their critical regions. (Mutual Exclusion)\nNo assumptions are made about speeds or the number of CPUs.\nNo process running outside its critical region which blocks other processes.\nNo process has to wait forever to enter its critical region. (A waits for B resources, B waits for C resources, C waits for A resources)\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Adnan Qureshi",
        "usuario_id": 1508
    },
    {
        "_id": 884,
        "fecha": { "$date" : "2012-04-13T11:29:23Z" },
        "decripcion": "\nA race condition is an undesirable situation that occurs when a device or system attempts to perform two or more operations at the same time, but because of the nature of the device or system, the operations must be done in the proper sequence in order to be done correctly.\n\nIn computer memory or storage, a race condition may occur if commands to read and write a large amount of data are received at almost the same instant, and the machine attempts to overwrite some or all of the old data while that old data is still being read. The result may be one or more of the following: a computer crash, an \"illegal operation,\" notification and shutdown of the program, errors reading the old data, or errors writing the new data.\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "dilbag koundal",
        "usuario_id": 1509
    },
    {
        "_id": 885,
        "fecha": { "$date" : "2017-08-19T18:19:46Z" },
        "decripcion": "\nYou can prevent race condition, if you use \"Atomic\" classes. The reason is just the thread don't separate operation get and set, example is below:\n\nAtomicInteger ai = new AtomicInteger(2);\nai.getAndAdd(5);\n\n\nAs a result, you will have 7 in link \"ai\". \nAlthough you did two actions, but the both operation confirm the same thread and no one other thread will interfere to this, that means no race conditions!   \n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Aleksei Moshkov",
        "usuario_id": 1510
    },
    {
        "_id": 886,
        "fecha": { "$date" : "2013-05-16T05:12:14Z" },
        "decripcion": "\nHere is the classical Bank Account Balance example which will help newbies to understand Threads in Java easily w.r.t. race conditions:\n\npublic class BankAccount {\n\n/**\n * @param args\n */\nint accountNumber;\ndouble accountBalance;\n\npublic synchronized boolean Deposit(double amount){\n    double newAccountBalance=0;\n    if(amount<=0){\n        return false;\n    }\n    else {\n        newAccountBalance = accountBalance+amount;\n        accountBalance=newAccountBalance;\n        return true;\n    }\n\n}\npublic synchronized boolean Withdraw(double amount){\n    double newAccountBalance=0;\n    if(amount>accountBalance){\n        return false;\n    }\n    else{\n        newAccountBalance = accountBalance-amount;\n        accountBalance=newAccountBalance;\n        return true;\n    }\n}\n\npublic static void main(String[] args) {\n    // TODO Auto-generated method stub\n    BankAccount b = new BankAccount();\n    b.accountBalance=2000;\n    System.out.println(b.Withdraw(3000));\n\n}\n\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "on deposit method if amount in negative value , people can deposit right",
                "fecha": { "$date" : "2020-06-28T05:46:04Z" },
                "usuario": "Parthasarathy B",
                "usuario_id": 1511
            }
        ],
        "usuario": "realPK",
        "usuario_id": 1512
    },
    {
        "_id": 887,
        "fecha": { "$date" : "2013-05-31T15:51:21Z" },
        "decripcion": "\nTry this basic example for better understanding of race condition:\n\n    public class ThreadRaceCondition {\n\n    /**\n     * @param args\n     * @throws InterruptedException\n     */\n    public static void main(String[] args) throws InterruptedException {\n        Account myAccount = new Account(22222222);\n\n        // Expected deposit: 250\n        for (int i = 0; i < 50; i++) {\n            Transaction t = new Transaction(myAccount,\n                    Transaction.TransactionType.DEPOSIT, 5.00);\n            t.start();\n        }\n\n        // Expected withdrawal: 50\n        for (int i = 0; i < 50; i++) {\n            Transaction t = new Transaction(myAccount,\n                    Transaction.TransactionType.WITHDRAW, 1.00);\n            t.start();\n\n        }\n\n        // Temporary sleep to ensure all threads are completed. Don't use in\n        // realworld :-)\n        Thread.sleep(1000);\n        // Expected account balance is 200\n        System.out.println(\"Final Account Balance: \"\n                + myAccount.getAccountBalance());\n\n    }\n\n}\n\nclass Transaction extends Thread {\n\n    public static enum TransactionType {\n        DEPOSIT(1), WITHDRAW(2);\n\n        private int value;\n\n        private TransactionType(int value) {\n            this.value = value;\n        }\n\n        public int getValue() {\n            return value;\n        }\n    };\n\n    private TransactionType transactionType;\n    private Account account;\n    private double amount;\n\n    /*\n     * If transactionType == 1, deposit else if transactionType == 2 withdraw\n     */\n    public Transaction(Account account, TransactionType transactionType,\n            double amount) {\n        this.transactionType = transactionType;\n        this.account = account;\n        this.amount = amount;\n    }\n\n    public void run() {\n        switch (this.transactionType) {\n        case DEPOSIT:\n            deposit();\n            printBalance();\n            break;\n        case WITHDRAW:\n            withdraw();\n            printBalance();\n            break;\n        default:\n            System.out.println(\"NOT A VALID TRANSACTION\");\n        }\n        ;\n    }\n\n    public void deposit() {\n        this.account.deposit(this.amount);\n    }\n\n    public void withdraw() {\n        this.account.withdraw(amount);\n    }\n\n    public void printBalance() {\n        System.out.println(Thread.currentThread().getName()\n                + \" : TransactionType: \" + this.transactionType + \", Amount: \"\n                + this.amount);\n        System.out.println(\"Account Balance: \"\n                + this.account.getAccountBalance());\n    }\n}\n\nclass Account {\n    private int accountNumber;\n    private double accountBalance;\n\n    public int getAccountNumber() {\n        return accountNumber;\n    }\n\n    public double getAccountBalance() {\n        return accountBalance;\n    }\n\n    public Account(int accountNumber) {\n        this.accountNumber = accountNumber;\n    }\n\n    // If this method is not synchronized, you will see race condition on\n    // Remove syncronized keyword to see race condition\n    public synchronized boolean deposit(double amount) {\n        if (amount < 0) {\n            return false;\n        } else {\n            accountBalance = accountBalance + amount;\n            return true;\n        }\n    }\n\n    // If this method is not synchronized, you will see race condition on\n    // Remove syncronized keyword to see race condition\n    public synchronized boolean withdraw(double amount) {\n        if (amount > accountBalance) {\n            return false;\n        } else {\n            accountBalance = accountBalance - amount;\n            return true;\n        }\n    }\n}\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Morsu",
        "usuario_id": 1513
    },
    {
        "_id": 888,
        "fecha": { "$date" : "2014-09-07T09:11:25Z" },
        "decripcion": "\nYou don't always want to discard a race condition. If you have a flag which can be read and written by multiple threads, and this flag is set to 'done' by one thread so that other thread stop processing when flag is set to 'done', you don't want that \"race condition\" to be eliminated. In fact, this one can be referred to as a benign race condition. \n\nHowever, using a tool for detection of race condition, it will be spotted as a harmful race condition.\n\nMore details on race condition here, http://msdn.microsoft.com/en-us/magazine/cc546569.aspx. \n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "What language is your answer based on?",
                "fecha": { "$date" : "2015-04-21T17:14:24Z" },
                "usuario": "MikeMB",
                "usuario_id": 1514
            },
            {
                "decripcion": "Frankly it seems to me that if you have race conditions per se, you are not architecting your code in a tightly-controlled manner. Which, while it may not be an issue in your theoretical case, is evidence of larger issues with the way you design & develop software. Expect to face painful race condition bugs sooner or later.",
                "fecha": { "$date" : "2016-07-13T12:57:30Z" },
                "usuario": "Engineer",
                "usuario_id": 1515
            }
        ],
        "usuario": "kiriloff",
        "usuario_id": 1516
    },
    {
        "_id": 889,
        "fecha": { "$date" : "2015-07-15T08:06:48Z" },
        "decripcion": "\nConsider an operation which has to display the count as soon as the count gets incremented. ie., as soon as CounterThread increments the value DisplayThread needs to display the recently updated value.\n\nint i = 0;\n\n\nOutput  \n\nCounterThread -> i = 1  \nDisplayThread -> i = 1  \nCounterThread -> i = 2  \nCounterThread -> i = 3  \nCounterThread -> i = 4  \nDisplayThread -> i = 4\n\n\nHere CounterThread gets the lock frequently and updates the value before DisplayThread displays it. Here exists a Race condition. Race Condition can be solved by using Synchronzation\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "bharanitharan",
        "usuario_id": 1517
    },
    {
        "_id": 890,
        "fecha": { "$date" : "2018-12-05T07:02:36Z" },
        "decripcion": "\nA race condition is an undesirable situation that occurs when two or more process can access and change the shared data at the same time.It occurred because  there were conflicting accesses to a resource . Critical section problem may cause race condition. To solve critical condition among the process we have take out only one process at a time which execute the critical section.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "rashedcs",
        "usuario_id": 1518
    },
    {
        "_id": 891,
        "fecha": { "$date" : "2018-04-22T00:59:09Z" },
        "decripcion": "\nYou have to move the portion of the background task that updates the UI onto the main thread. There is a simple piece of code for this:\n\nrunOnUiThread(new Runnable() {\n\n    @Override\n    public void run() {\n\n        // Stuff that updates the UI\n\n    }\n});\n\n\nDocumentation for Activity.runOnUiThread.\n\nJust nest this inside the method that is running in the background, and then copy paste the code that implements any updates in the middle of the block. Include only the smallest amount of code possible, otherwise you start to defeat the purpose of the background thread.\n    ",
        "votes": 2142,
        "comentarios": [
            {
                "decripcion": "worked like a charm. for me the only problem here is that I wanted to do an error.setText(res.toString()); inside the run() method, but I couldn't use the res because it wasn't final.. too bad",
                "fecha": { "$date" : "2011-08-01T12:31:01Z" },
                "usuario": "noloman",
                "usuario_id": 1520
            },
            {
                "decripcion": "One brief comment on this. I had a separate thread that was trying to modify the UI, and the above code worked, but I had call runOnUiThread from the Activity object.  I had to do something like  myActivityObject.runOnUiThread(etc)",
                "fecha": { "$date" : "2012-02-17T21:27:14Z" },
                "usuario": "Kirby",
                "usuario_id": 1521
            },
            {
                "decripcion": "@Kirby Thank you for this reference. You can simply do 'MainActivity.this' and it should work as well so you don't have to keep reference to your activity class.",
                "fecha": { "$date" : "2013-04-05T14:37:52Z" },
                "usuario": "JRomero",
                "usuario_id": 1522
            },
            {
                "decripcion": "It took me a while to figure out that runOnUiThread() is a method of Activity. I was running my code in a fragment. I ended up doing getActivity().runOnUiThread(etc) and it worked. Fantastic!;",
                "fecha": { "$date" : "2013-08-19T20:07:06Z" },
                "usuario": "lejonl",
                "usuario_id": 1523
            },
            {
                "decripcion": "Can we stop the task being performed that is written in the body of   'runOnUiThread' method ?",
                "fecha": { "$date" : "2014-09-04T20:18:10Z" },
                "usuario": "Karan Sharma",
                "usuario_id": 1524
            }
        ],
        "usuario": "providence",
        "usuario_id": 1525
    },
    {
        "_id": 892,
        "fecha": { "$date" : "2016-08-17T13:12:18Z" },
        "decripcion": "\nI solved this by putting runOnUiThread( new Runnable(){ .. inside run():\n\nthread = new Thread(){\n        @Override\n        public void run() {\n            try {\n                synchronized (this) {\n                    wait(5000);\n\n                    runOnUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            dbloadingInfo.setVisibility(View.VISIBLE);\n                            bar.setVisibility(View.INVISIBLE);\n                            loadingText.setVisibility(View.INVISIBLE);\n                        }\n                    });\n\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            Intent mainActivity = new Intent(getApplicationContext(),MainActivity.class);\n            startActivity(mainActivity);\n        };\n    };  \n    thread.start();\n\n    ",
        "votes": 152,
        "comentarios": [
            {
                "decripcion": "This one rocked. Thanks for information that, this can also be used inside any other thread.",
                "fecha": { "$date" : "2015-03-16T02:10:47Z" },
                "usuario": "Nabin",
                "usuario_id": 1526
            },
            {
                "decripcion": "Thank you, it's really sad to create a thread in order to go back to the UI Thread but only this solution saved my case.",
                "fecha": { "$date" : "2015-05-04T17:16:01Z" },
                "usuario": "Pierre Maoui",
                "usuario_id": 1527
            },
            {
                "decripcion": "One important aspect is that wait(5000); isn't inside the Runnable, otherwise your UI will freeze during the wait period. You should consider using AsyncTask instead of Thread for operations like these.",
                "fecha": { "$date" : "2015-08-12T07:44:39Z" },
                "usuario": "Martin",
                "usuario_id": 1528
            },
            {
                "decripcion": "this is so bad for memory leak",
                "fecha": { "$date" : "2018-05-06T20:58:03Z" },
                "usuario": "Rafael Lima",
                "usuario_id": 1529
            },
            {
                "decripcion": "Why bother with the synchronized block? The code inside it looks reasonably thread safe (although I'm fully prepared to eat my words).",
                "fecha": { "$date" : "2019-03-07T00:13:56Z" },
                "usuario": "David",
                "usuario_id": 839
            }
        ],
        "usuario": "G\u00fcnay G\u00fcltekin",
        "usuario_id": 1530
    },
    {
        "_id": 893,
        "fecha": { "$date" : "2018-04-22T01:05:52Z" },
        "decripcion": "\nMy solution to this:\n\nprivate void setText(final TextView text,final String value){\n    runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            text.setText(value);\n        }\n    });\n}\n\n\nCall this method on a background thread.\n    ",
        "votes": 81,
        "comentarios": [
            {
                "decripcion": "Error:(73, 67) error: non-static method set(String) cannot be referenced from a static context",
                "fecha": { "$date" : "2015-12-01T16:33:53Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "I have the same issue with my test classes.  This worked like a charm for me.  However, replacing runOnUiThread with runTestOnUiThread.  Thanks",
                "fecha": { "$date" : "2016-02-21T17:45:52Z" },
                "usuario": "DaddyMoe",
                "usuario_id": 1531
            }
        ],
        "usuario": "Angelo Angeles",
        "usuario_id": 1532
    },
    {
        "_id": 894,
        "fecha": { "$date" : "2013-08-19T20:23:57Z" },
        "decripcion": "\nUsually, any action involving the user interface must be done in the main or UI thread, that is the one in which onCreate() and event handling are executed. One way to be sure of that is using runOnUiThread(), another is using Handlers.\n\nProgressBar.setProgress() has a mechanism for which it will always execute on the main thread, so that's why it worked.\n\nSee Painless Threading.\n    ",
        "votes": 32,
        "comentarios": [
            {
                "decripcion": "The Painless Threading article at that link is now a 404. Here is a link to an (older?) blog piece on Painless Threading - android-developers.blogspot.com/2009/05/painless-threading.html",
                "fecha": { "$date" : "2013-07-18T18:14:41Z" },
                "usuario": "Tony Adams",
                "usuario_id": 1533
            }
        ],
        "usuario": "bigstones",
        "usuario_id": 1534
    },
    {
        "_id": 895,
        "fecha": { "$date" : "2020-05-15T10:00:48Z" },
        "decripcion": "\nKotlin coroutines can make your code more concise and readable like this:\n\nMainScope().launch {\n    withContext(Dispatchers.Default) {\n        //TODO(\"Background processing...\")\n    }\n    TODO(\"Update UI here!\")\n}\n\n\nOr vice versa:\n\nGlobalScope.launch {\n    //TODO(\"Background processing...\")\n    withContext(Dispatchers.Main) {\n        // TODO(\"Update UI here!\")\n    }\n    TODO(\"Continue background processing...\")\n}\n\n    ",
        "votes": 27,
        "comentarios": [
            {
                "decripcion": "Perfect! Thank you!",
                "fecha": { "$date" : "2020-09-11T16:07:23Z" },
                "usuario": "Michel Fernandes",
                "usuario_id": 1535
            },
            {
                "decripcion": "Thank you so much for saving my day",
                "fecha": { "$date" : "2020-12-10T01:14:23Z" },
                "usuario": "Nik",
                "usuario_id": 1536
            },
            {
                "decripcion": "Thanks for saving my time.",
                "fecha": { "$date" : "2020-12-22T13:06:25Z" },
                "usuario": "Dashesh",
                "usuario_id": 1537
            }
        ],
        "usuario": "KenIchi",
        "usuario_id": 1538
    },
    {
        "_id": 896,
        "fecha": { "$date" : "2018-04-29T16:07:31Z" },
        "decripcion": "\nI've been in this situation, but I found a solution with the Handler Object.\n\nIn my case, I want to update a ProgressDialog with the observer pattern.\nMy view implements observer and overrides the update method.\n\nSo, my main thread create the view and another thread call the update method that update the ProgressDialop and....:\n\n\n  Only the original thread that created a view hierarchy can touch its\n  views.\n\n\nIt's possible to solve the problem with the Handler Object.\n\nBelow, different parts of my code:\n\npublic class ViewExecution extends Activity implements Observer{\n\n    static final int PROGRESS_DIALOG = 0;\n    ProgressDialog progressDialog;\n    int currentNumber;\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        currentNumber = 0;\n        final Button launchPolicyButton =  ((Button) this.findViewById(R.id.launchButton));\n        launchPolicyButton.setOnClickListener(new OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n                showDialog(PROGRESS_DIALOG);\n            }\n        });\n    }\n\n    @Override\n    protected Dialog onCreateDialog(int id) {\n        switch(id) {\n        case PROGRESS_DIALOG:\n            progressDialog = new ProgressDialog(this);\n            progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n            progressDialog.setMessage(\"Loading\");\n            progressDialog.setCancelable(true);\n            return progressDialog;\n        default:\n            return null;\n        }\n    }\n\n    @Override\n    protected void onPrepareDialog(int id, Dialog dialog) {\n        switch(id) {\n        case PROGRESS_DIALOG:\n            progressDialog.setProgress(0);\n        }\n\n    }\n\n    // Define the Handler that receives messages from the thread and update the progress\n    final Handler handler = new Handler() {\n        public void handleMessage(Message msg) {\n            int current = msg.arg1;\n            progressDialog.setProgress(current);\n            if (current >= 100){\n                removeDialog (PROGRESS_DIALOG);\n            }\n        }\n    };\n\n    // The method called by the observer (the second thread)\n    @Override\n    public void update(Observable obs, Object arg1) {\n\n        Message msg = handler.obtainMessage();\n        msg.arg1 = ++currentPluginNumber;\n        handler.sendMessage(msg);\n    }\n}\n\n\nThis explanation can be found on this page, and you must read the \"Example ProgressDialog with a second thread\".\n    ",
        "votes": 21,
        "comentarios": [],
        "usuario": "Jonathan",
        "usuario_id": 206
    },
    {
        "_id": 897,
        "fecha": { "$date" : "2021-01-04T15:28:29Z" },
        "decripcion": "\nYou can use Handler to Delete View without disturbing the main UI Thread.\nHere is example code\nnew Handler(Looper.getMainLooper()).post(new Runnable() {\n    @Override\n    public void run() {\n          //do stuff like remove view etc\n          adapter.remove(selecteditem);\n          }\n    });\n\n    ",
        "votes": 20,
        "comentarios": [],
        "usuario": "Bilal Mustafa",
        "usuario_id": 1539
    },
    {
        "_id": 898,
        "fecha": { "$date" : "2013-05-20T06:55:42Z" },
        "decripcion": "\nI see that you have accepted @providence's answer. Just in case, you can also use the handler too! First, do the int fields.\n\n    private static final int SHOW_LOG = 1;\n    private static final int HIDE_LOG = 0;\n\n\nNext, make a handler instance as a field.\n\n    //TODO __________[ Handler ]__________\n    @SuppressLint(\"HandlerLeak\")\n    protected Handler handler = new Handler()\n    {\n        @Override\n        public void handleMessage(Message msg)\n        {\n            // Put code here...\n\n            // Set a switch statement to toggle it on or off.\n            switch(msg.what)\n            {\n            case SHOW_LOG:\n            {\n                ads.setVisibility(View.VISIBLE);\n                break;\n            }\n            case HIDE_LOG:\n            {\n                ads.setVisibility(View.GONE);\n                break;\n            }\n            }\n        }\n    };\n\n\nMake a method.\n\n//TODO __________[ Callbacks ]__________\n@Override\npublic void showHandler(boolean show)\n{\n    handler.sendEmptyMessage(show ? SHOW_LOG : HIDE_LOG);\n}\n\n\nFinally, put this at onCreate() method.\n\nshowHandler(true);\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "David Dimalanta",
        "usuario_id": 1540
    },
    {
        "_id": 899,
        "fecha": { "$date" : "2016-09-16T16:03:37Z" },
        "decripcion": "\nUse this code, and no need to runOnUiThread function:\n\nprivate Handler handler;\nprivate Runnable handlerTask;\n\nvoid StartTimer(){\n    handler = new Handler();   \n    handlerTask = new Runnable()\n    {\n        @Override \n        public void run() { \n            // do something  \n            textView.setText(\"some text\");\n            handler.postDelayed(handlerTask, 1000);    \n        }\n    };\n    handlerTask.run();\n}\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Hamid",
        "usuario_id": 1541
    },
    {
        "_id": 900,
        "fecha": { "$date" : "2018-04-22T01:07:29Z" },
        "decripcion": "\nI had a similar issue, and my solution is ugly, but it works:\n\nvoid showCode() {\n    hideRegisterMessage(); // Hides view \n    final Handler handler = new Handler();\n    handler.postDelayed(new Runnable() {\n        @Override\n        public void run() {\n            showRegisterMessage(); // Shows view\n        }\n    }, 3000); // After 3 seconds\n}\n\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "@R.jzadeh it's nice to hear that. Since the moment I did wrote that answer, probably now you can do it better :)",
                "fecha": { "$date" : "2018-07-20T19:02:12Z" },
                "usuario": "B\u0142a\u017cej",
                "usuario_id": 1542
            }
        ],
        "usuario": "B\u0142a\u017cej",
        "usuario_id": 1542
    },
    {
        "_id": 901,
        "fecha": { "$date" : "2018-04-22T01:08:47Z" },
        "decripcion": "\nI use Handler with Looper.getMainLooper(). It worked fine for me.\n\n    Handler handler = new Handler(Looper.getMainLooper()) {\n        @Override\n        public void handleMessage(Message msg) {\n              // Any UI task, example\n              textView.setText(\"your text\");\n        }\n    };\n    handler.sendEmptyMessage(1);\n\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "Sankar Behera",
        "usuario_id": 1543
    },
    {
        "_id": 902,
        "fecha": { "$date" : "2018-04-22T01:10:18Z" },
        "decripcion": "\nThis is explicitly throwing an error. It says whichever thread created a view, only that can touch its views. It is because the created view is inside that thread's space. The view creation (GUI) happens in the UI (main) thread. So, you always use the UI thread to access those methods. \n\n\n\nIn the above picture, the progress variable is inside the space of the UI thread. So, only the UI thread can access this variable. Here, you're accessing progress via new Thread(), and that's why you got an error. \n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "Uddhav Gautam",
        "usuario_id": 1544
    },
    {
        "_id": 903,
        "fecha": { "$date" : "2018-11-19T16:06:41Z" },
        "decripcion": "\nI was facing a similar problem and none of the methods mentioned above worked for me. In the end, this did the trick for me:\n\nDevice.BeginInvokeOnMainThread(() =>\n    {\n        myMethod();\n    });\n\n\nI found this gem here.\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "Hagbard",
        "usuario_id": 1545
    },
    {
        "_id": 904,
        "fecha": { "$date" : "2018-04-22T01:11:07Z" },
        "decripcion": "\nThis happened to my when I called for an UI change from a doInBackground from Asynctask instead of using onPostExecute.\n\nDealing with the UI in onPostExecute solved my problem.\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "Thanks Jonathan. This was my issue too but I had to do a bit more reading to understand what you meant here. For anyone else, onPostExecute is also a method of AsyncTask but it runs on the UI thread. See here: blog.teamtreehouse.com/all-about-android-asynctasks",
                "fecha": { "$date" : "2019-04-24T22:24:31Z" },
                "usuario": "ciaranodc",
                "usuario_id": 1546
            }
        ],
        "usuario": "Jonathan dos Santos",
        "usuario_id": 1547
    },
    {
        "_id": 905,
        "fecha": { "$date" : "2021-05-21T17:47:34Z" },
        "decripcion": "\n\nKotlin Answer\n\nWe have to use UI Thread for the job with true way. We can use UI Thread in Kotlin:\nrunOnUiThread(Runnable {\n   //TODO: Your job is here..!\n})\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "canerkaseler",
        "usuario_id": 1548
    },
    {
        "_id": 906,
        "fecha": { "$date" : "2018-04-22T01:12:16Z" },
        "decripcion": "\nI was working with a class that did not contain a reference to the context. So it was not possible for me to use runOnUIThread(); I used view.post(); and it was solved.\n\ntimer.scheduleAtFixedRate(new TimerTask() {\n\n    @Override\n    public void run() {\n        final int currentPosition = mediaPlayer.getCurrentPosition();\n        audioMessage.seekBar.setProgress(currentPosition / 1000);\n        audioMessage.tvPlayDuration.post(new Runnable() {\n            @Override\n            public void run() {\n                audioMessage.tvPlayDuration.setText(ChatDateTimeFormatter.getDuration(currentPosition));\n            }\n        });\n    }\n}, 0, 1000);\n\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "What is the analogy of audioMessage and tvPlayDuration to the questions code?",
                "fecha": { "$date" : "2020-04-29T10:29:29Z" },
                "usuario": "gotwo",
                "usuario_id": 1549
            },
            {
                "decripcion": "audioMessage is a holder object of the text view. tvPlayDuration is the text view we want to update from a non UI thread.  In the question above, currentTime is the text view but it does not have a holder object.",
                "fecha": { "$date" : "2020-04-30T04:53:10Z" },
                "usuario": "Ifta",
                "usuario_id": 1550
            }
        ],
        "usuario": "Ifta",
        "usuario_id": 1550
    },
    {
        "_id": 907,
        "fecha": { "$date" : "2018-05-10T13:30:03Z" },
        "decripcion": "\nWhen using AsyncTask Update the UI in onPostExecute method\n\n    @Override\n    protected void onPostExecute(String s) {\n   // Update UI here\n\n     }\n\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "this happened to me. i was updating ui in doinbackground of asynk task.",
                "fecha": { "$date" : "2019-01-03T06:43:43Z" },
                "usuario": "mehmoodnisar125",
                "usuario_id": 1551
            }
        ],
        "usuario": "Deepak Kataria",
        "usuario_id": 1552
    },
    {
        "_id": 908,
        "fecha": { "$date" : "2018-04-22T01:06:48Z" },
        "decripcion": "\nIf you do not want to use runOnUiThread API, you can in fact implement AsynTask for the operations that takes some seconds to complete. But in that case, also after processing your work in doinBackground(), you need to return the finished view in onPostExecute(). The Android implementation allows only main UI thread to interact with views.\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Sam",
        "usuario_id": 1553
    },
    {
        "_id": 909,
        "fecha": { "$date" : "2015-01-19T09:06:12Z" },
        "decripcion": "\nThis is the stack trace of mentioned exception\n\n        at android.view.ViewRootImpl.checkThread(ViewRootImpl.java:6149)\n        at android.view.ViewRootImpl.requestLayout(ViewRootImpl.java:843)\n        at android.view.View.requestLayout(View.java:16474)\n        at android.view.View.requestLayout(View.java:16474)\n        at android.view.View.requestLayout(View.java:16474)\n        at android.view.View.requestLayout(View.java:16474)\n        at android.widget.RelativeLayout.requestLayout(RelativeLayout.java:352)\n        at android.view.View.requestLayout(View.java:16474)\n        at android.widget.RelativeLayout.requestLayout(RelativeLayout.java:352)\n        at android.view.View.setFlags(View.java:8938)\n        at android.view.View.setVisibility(View.java:6066)\n\n\nSo if you go and dig then you come to know\n\nvoid checkThread() {\n    if (mThread != Thread.currentThread()) {\n        throw new CalledFromWrongThreadException(\n                \"Only the original thread that created a view hierarchy can touch its views.\");\n    }\n}\n\n\nWhere mThread is initialize in constructor like below\n\nmThread = Thread.currentThread();\n\n\nAll I mean to say that when we created particular view we created it on UI Thread and later try to modifying in a Worker Thread.\n\nWe can verify it via below code snippet\n\nThread.currentThread().getName()\n\n\nwhen we inflate layout and later where you are getting exception.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Amit Yadav",
        "usuario_id": 1554
    },
    {
        "_id": 910,
        "fecha": { "$date" : "2019-02-01T18:11:45Z" },
        "decripcion": "\nIf you simply want to invalidate (call repaint/redraw function) from your non UI Thread, use postInvalidate()\n\nmyView.postInvalidate();\n\n\nThis will post an invalidate request on the UI-thread.\n\nFor more information : what-does-postinvalidate-do\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Nalin",
        "usuario_id": 1555
    },
    {
        "_id": 911,
        "fecha": { "$date" : "2020-12-28T17:29:59Z" },
        "decripcion": "\nWell, You can do it like this.\nhttps://developer.android.com/reference/android/view/View#post(java.lang.Runnable)\nA simple approach\ncurrentTime.post(new Runnable(){\n            @Override\n            public void run() {\n                 currentTime.setText(time);     \n            }\n        }\n\nit also provides delay\nhttps://developer.android.com/reference/android/view/View#postDelayed(java.lang.Runnable,%20long)\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "Glad to see you posting answers! Do keep in mind that you are expected to add some details about what you fixed or why it is right. It helps users understand what is going on, rather than just being served the answer. Consider it a rule for all your answers here. I hope you have a good time.",
                "fecha": { "$date" : "2020-12-28T17:20:25Z" },
                "usuario": "Aman",
                "usuario_id": 1556
            }
        ],
        "usuario": "rahat",
        "usuario_id": 1557
    },
    {
        "_id": 912,
        "fecha": { "$date" : "2014-07-04T08:23:13Z" },
        "decripcion": "\nFor me the issue was that I was calling onProgressUpdate() explicitly from my code. This shouldn't be done. I called publishProgress() instead and that resolved the error.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "mindreader",
        "usuario_id": 1558
    },
    {
        "_id": 913,
        "fecha": { "$date" : "2018-04-22T01:08:16Z" },
        "decripcion": "\nIn my case,\nI have EditText in Adaptor, and it's already in the UI thread. However, when this Activity loads, it's crashes with this error.\n\nMy solution is I need to remove <requestFocus /> out from EditText in XML.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Sruit A.Suk",
        "usuario_id": 1559
    },
    {
        "_id": 914,
        "fecha": { "$date" : "2019-05-02T08:05:03Z" },
        "decripcion": "\nFor the people struggling in Kotlin, it works like this:\n\nlateinit var runnable: Runnable //global variable\n\n runOnUiThread { //Lambda\n            runnable = Runnable {\n\n                //do something here\n\n                runDelayedHandler(5000)\n            }\n        }\n\n        runnable.run()\n\n //you need to keep the handler outside the runnable body to work in kotlin\n fun runDelayedHandler(timeToWait: Long) {\n\n        //Keep it running\n        val handler = Handler()\n        handler.postDelayed(runnable, timeToWait)\n    }\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Tarun Kumar",
        "usuario_id": 1560
    },
    {
        "_id": 915,
        "fecha": { "$date" : "2020-10-22T20:24:43Z" },
        "decripcion": "\nIf you are within a fragment, then you also need to get the activity object as runOnUIThread is a method on the activity.\nAn example in Kotlin with some surrounding context to make it clearer - this example is navigating from a camera fragment to a gallery fragment:\n// Setup image capture listener which is triggered after photo has been taken\nimageCapture.takePicture(\n       outputOptions, cameraExecutor, object : ImageCapture.OnImageSavedCallback {\n\n           override fun onError(exc: ImageCaptureException) {\n           Log.e(TAG, \"Photo capture failed: ${exc.message}\", exc)\n        }\n\n        override fun onImageSaved(output: ImageCapture.OutputFileResults) {\n                        val savedUri = output.savedUri ?: Uri.fromFile(photoFile)\n                        Log.d(TAG, \"Photo capture succeeded: $savedUri\")\n               \n             //Do whatever work you do when image is saved         \n             \n             //Now ask navigator to move to new tab - as this\n             //updates UI do on the UI thread           \n             activity?.runOnUiThread( {\n                 Navigation.findNavController(\n                        requireActivity(), R.id.fragment_container\n                 ).navigate(CameraFragmentDirections\n                        .actionCameraToGallery(outputDirectory.absolutePath))\n              })\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Mick",
        "usuario_id": 1561
    },
    {
        "_id": 916,
        "fecha": { "$date" : "2018-09-28T08:06:01Z" },
        "decripcion": "\nSolved : Just put this method in doInBackround Class... and pass the message\n\npublic void setProgressText(final String progressText){\n        Handler handler = new Handler(Looper.getMainLooper()) {\n            @Override\n            public void handleMessage(Message msg) {\n                // Any UI task, example\n                progressDialog.setMessage(progressText);\n            }\n        };\n        handler.sendEmptyMessage(1);\n\n    }\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Kaushal Sachan",
        "usuario_id": 1562
    },
    {
        "_id": 917,
        "fecha": { "$date" : "2019-03-11T08:03:14Z" },
        "decripcion": "\nIn my case, the caller calls too many times in short time will get this error, I simply put elapsed time checking to do nothing if too short, e.g. ignore if function get called less than 0.5 second:\n\n    private long mLastClickTime = 0;\n\n    public boolean foo() {\n        if ( (SystemClock.elapsedRealtime() - mLastClickTime) < 500) {\n            return false;\n        }\n        mLastClickTime = SystemClock.elapsedRealtime();\n\n        //... do ui update\n    }\n\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "Better solution would be to disable the button on click and enable it again when the action completes.",
                "fecha": { "$date" : "2020-02-12T16:39:54Z" },
                "usuario": "lsrom",
                "usuario_id": 1563
            },
            {
                "decripcion": "@lsrom In my case is not that simple because the caller is 3rd party library internal and out of my control.",
                "fecha": { "$date" : "2020-02-12T17:06:35Z" },
                "usuario": "Fruit",
                "usuario_id": 1564
            }
        ],
        "usuario": "Fruit",
        "usuario_id": 1564
    },
    {
        "_id": 918,
        "fecha": { "$date" : "2019-12-02T05:41:25Z" },
        "decripcion": "\nIf you couldn't find a UIThread you can use this way .\n\nyourcurrentcontext mean, you need to parse Current Context\n\n new Thread(new Runnable() {\n        public void run() {\n            while (true) {\n                (Activity) yourcurrentcontext).runOnUiThread(new Runnable() {\n                    public void run() { \n                        Log.d(\"Thread Log\",\"I am from UI Thread\");\n                    }\n                });\n                try {\n                    Thread.sleep(1000);\n                } catch (Exception ex) {\n\n                }\n            }\n        }\n    }).start();\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Udara Kasun",
        "usuario_id": 1565
    },
    {
        "_id": 919,
        "fecha": { "$date" : "2020-05-04T19:16:42Z" },
        "decripcion": "\nIn Kotlin simply put your code in runOnUiThread activity method\n\nrunOnUiThread{\n    // write your code here, for example\n    val task = Runnable {\n            Handler().postDelayed({\n                var smzHtcList = mDb?.smzHtcReferralDao()?.getAll()\n                tv_showSmzHtcList.text = smzHtcList.toString()\n            }, 10)\n\n        }\n    mDbWorkerThread.postTask(task)\n}\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Raheel Khan",
        "usuario_id": 1566
    },
    {
        "_id": 920,
        "fecha": { "$date" : "2020-12-23T19:49:12Z" },
        "decripcion": "\nRunOnUIThread didn't seem to work for me but the following ended up solving my issues.\n            _ = MainThread.InvokeOnMainThreadAsync(async () =>\n           {\n               this.LoadApplication(Startup.Init(this.ConfigureServices));\n\n               var authenticationService = App.ServiceProvider.GetService<AuthenticationService>();\n               if (authenticationService.AuthenticationResult == null)\n               {\n                   await authenticationService.AuthenticateAsync(AuthenticationUserFlow.SignUpSignIn, CrossCurrentActivity.Current.Activity).ConfigureAwait(false);\n               }\n           });\n\nWithin the Startup.Init method there is ReactiveUI routing and this needs to be invoked on the main thread. This Invoke method also accepts async/await better than RunOnUIThread.\nSo anywhere I need to invoke methods on the mainthread I use this.\nPlease comment on this if anyone knows something I don't and can help me improve my application.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Justin",
        "usuario_id": 1567
    },
    {
        "_id": 921,
        "fecha": { "$date" : "2010-06-15T14:39:02Z" },
        "decripcion": "\nHere are some pros/cons I came up with.\n\nMultiprocessing\n\nPros\n\n\nSeparate memory space\nCode is usually straightforward\nTakes advantage of multiple CPUs & cores\nAvoids GIL limitations for cPython\nEliminates most needs for synchronization primitives unless if you use shared memory (instead, it's more of a communication model for IPC)\nChild processes are interruptible/killable\nPython multiprocessing module includes useful abstractions with an interface much like threading.Thread\nA must with cPython for CPU-bound processing\n\n\nCons\n\n\nIPC a little more complicated with more overhead (communication model vs. shared memory/objects)\nLarger memory footprint\n\n\nThreading\n\nPros\n\n\nLightweight - low memory footprint\nShared memory - makes access to state from another context easier\nAllows you to easily make responsive UIs\ncPython C extension modules that properly release the GIL will run in parallel\nGreat option for I/O-bound applications\n\n\nCons\n\n\ncPython - subject to the GIL\nNot interruptible/killable\nIf not following a command queue/message pump model (using the Queue module), then manual use of synchronization primitives become a necessity (decisions are needed for the granularity of locking)\nCode is usually harder to understand and to get right - the potential for race conditions increases dramatically \n\n    ",
        "votes": 896,
        "comentarios": [
            {
                "decripcion": "For multiprocess: \"Takes advantage of multiple CPUs & cores\". Does threading have this pro too?",
                "fecha": { "$date" : "2014-08-21T13:33:14Z" },
                "usuario": "Deqing",
                "usuario_id": 1569
            },
            {
                "decripcion": "@Deqing no it does not. In Python, because of GIL (Global Interpreter Lock) a single python process cannot run threads in parallel (utilize multiple cores). It can however run them concurrently (context switch during I/O bound operations).",
                "fecha": { "$date" : "2014-09-05T04:56:40Z" },
                "usuario": "Andrew Guenther",
                "usuario_id": 1570
            },
            {
                "decripcion": "@AndrewGuenther straight from the multiprocessing docs (emphasis mine): \"The multiprocessing package offers both local and remote concurrency, effectively side-stepping the Global Interpreter Lock by using subprocesses instead of threads. Due to this, the multiprocessing module allows the programmer to fully leverage multiple processors on a given machine.\"",
                "fecha": { "$date" : "2014-12-13T02:19:50Z" },
                "usuario": "camconn",
                "usuario_id": 1571
            },
            {
                "decripcion": "@camconn \"@AndrewGuenther straight from the multiprocessing docs\" Yes, the multiprocessing package can do this, but not the multithreading package, which it what my comment was referring to.",
                "fecha": { "$date" : "2014-12-14T20:46:40Z" },
                "usuario": "Andrew Guenther",
                "usuario_id": 1570
            },
            {
                "decripcion": "@AndrewGuenther Mea copa. I'm an ID10T trying to act smart. My fault.",
                "fecha": { "$date" : "2014-12-14T23:31:14Z" },
                "usuario": "camconn",
                "usuario_id": 1571
            }
        ],
        "usuario": "Jeremy Brown",
        "usuario_id": 1572
    },
    {
        "_id": 922,
        "fecha": { "$date" : "2020-02-09T02:35:02Z" },
        "decripcion": "\nThe threading module uses threads, the multiprocessing module uses processes. The difference is that threads run in the same memory space, while processes have separate memory. This makes it a bit harder to share objects between processes with multiprocessing. Since threads use the same memory, precautions have to be taken or two threads will write to the same memory at the same time. This is what the global interpreter lock is for.\n\nSpawning processes is a bit slower than spawning threads.\n    ",
        "votes": 807,
        "comentarios": [
            {
                "decripcion": "The GIL in cPython does not protect your program state.  It protects the interpreter's state.",
                "fecha": { "$date" : "2010-06-15T14:19:57Z" },
                "usuario": "Jeremy Brown",
                "usuario_id": 1572
            },
            {
                "decripcion": "Also, the OS handles process scheduling.  The threading library handles thread scheduling.  And, threads share I/O scheduling -- which can be a bottleneck.  Processes have independent I/O scheduling.",
                "fecha": { "$date" : "2010-06-15T14:36:48Z" },
                "usuario": "S.Lott",
                "usuario_id": 416
            },
            {
                "decripcion": "how about IPC performance of multiprocessing? FOr a program which requires frequent share of objects among processes (e.g., through multiprocessing.Queue), what's the performance comparison to the in-process queue?",
                "fecha": { "$date" : "2012-10-21T23:48:36Z" },
                "usuario": "KFL",
                "usuario_id": 1573
            },
            {
                "decripcion": "There is actually a good deal of difference: eli.thegreenplace.net/2012/01/16/\u2026",
                "fecha": { "$date" : "2013-05-29T11:36:40Z" },
                "usuario": "Andrew Sledge",
                "usuario_id": 1574
            },
            {
                "decripcion": "Is there a problem though if there are too many processes being spawned too often since the CPU might run out of processes/memory. But it can be the same in case of too many threads spawned too often but still lesser overhead than multiple processes. Right?",
                "fecha": { "$date" : "2015-02-23T20:13:07Z" },
                "usuario": "TommyT",
                "usuario_id": 1575
            }
        ],
        "usuario": "Sjoerd",
        "usuario_id": 1576
    },
    {
        "_id": 923,
        "fecha": { "$date" : "2010-06-15T13:38:10Z" },
        "decripcion": "\nThreading's job is to enable applications to be responsive. Suppose you have a database connection and you need to respond to user input. Without threading, if the database connection is busy the application will not be able to respond to the user. By splitting off the database connection into a separate thread you can make the application more responsive. Also because both threads are in the same process, they can access the same data structures - good performance, plus a flexible software design.\n\nNote that due to the GIL the app isn't actually doing two things at once, but what we've done is put the resource lock on the database into a separate thread so that CPU time can be switched between it and the user interaction. CPU time gets rationed out between the threads.\n\nMultiprocessing is for times when you really do want more than one thing to be done at any given time. Suppose your application needs to connect to 6 databases and perform a complex matrix transformation on each dataset. Putting each job in a separate thread might help a little because when one connection is idle another one could get some CPU time, but the processing would not be done in parallel because the GIL means that you're only ever using the resources of one CPU. By putting each job in a Multiprocessing process, each can run on it's own CPU and run at full efficiency.\n    ",
        "votes": 242,
        "comentarios": [
            {
                "decripcion": "\"but the processing would not be done in parallel because the GIL means that you're only ever using the resources of one CPU\" GIL in multiprocessing how come .... ?",
                "fecha": { "$date" : "2014-10-12T20:33:44Z" },
                "usuario": "Nishant Kashyap",
                "usuario_id": 1577
            },
            {
                "decripcion": "@NishantKashyap - Reread the sentence you took that quote from. Simon is talking about the processing of multiple threads - it's not about multiprocessing.",
                "fecha": { "$date" : "2015-06-24T21:19:13Z" },
                "usuario": "ArtOfWarfare",
                "usuario_id": 1578
            },
            {
                "decripcion": "On memory differences these are in a capEx up-front cost sense.  OpEx (running) threads can be just as hungry as processes. You have control of both. Treat them as costs.",
                "fecha": { "$date" : "2017-09-07T12:24:53Z" },
                "usuario": "MrMesees",
                "usuario_id": 1579
            },
            {
                "decripcion": "@ArtOfWarfare can you explain why the accepted answer assumes multithreaded parallelism can be achieved if the GIL 'releases properly'?",
                "fecha": { "$date" : "2019-06-21T17:21:12Z" },
                "usuario": "Loveen Dyall",
                "usuario_id": 1580
            },
            {
                "decripcion": "@LoveenDyall - I'm not sure why you called me of all people out and are commenting on this answer instead of the one you're asking about, but that bullet point is talking about writing a Python extension in C. If you're dropping out of the Python Interpreter and into the land of native code, you can absolutely utilize multiple CPU cores without concern for the Global Interpreter Lock, because it is only going to lock the interpreter, not native code. Beyond that, I'm not sure what exactly they mean by releasing the GIL properly - I've never written Python extensions before.",
                "fecha": { "$date" : "2019-06-21T18:01:44Z" },
                "usuario": "ArtOfWarfare",
                "usuario_id": 1578
            }
        ],
        "usuario": "Simon Hibbs",
        "usuario_id": 1581
    },
    {
        "_id": 924,
        "fecha": { "$date" : "2020-02-29T15:31:37Z" },
        "decripcion": "\nPython documentation quotes\n\nThe canonical version of this answer is now at the dupliquee question: What are the differences between the threading and multiprocessing modules?\n\nI've highlighted the key Python documentation quotes about Process vs Threads and the GIL at: What is the global interpreter lock (GIL) in CPython?\n\nProcess vs thread experiments\n\nI did a bit of benchmarking in order to show the difference more concretely.\n\nIn the benchmark, I timed CPU and IO bound work for various numbers of threads on an 8 hyperthread CPU. The work supplied per thread is always the same, such that more threads means more total work supplied.\n\nThe results were:\n\n\n\nPlot data.\n\nConclusions:\n\n\nfor CPU bound work, multiprocessing is always faster, presumably due to the GIL\nfor IO bound work. both are exactly the same speed\nthreads only scale up to about 4x instead of the expected 8x since I'm on an 8 hyperthread machine.\n\nContrast that with a C POSIX CPU-bound work which reaches the expected 8x speedup: What do 'real', 'user' and 'sys' mean in the output of time(1)?\n\nTODO: I don't know the reason for this, there must be other Python inefficiencies coming into play.\n\n\nTest code:\n\n#!/usr/bin/env python3\n\nimport multiprocessing\nimport threading\nimport time\nimport sys\n\ndef cpu_func(result, niters):\n    '''\n    A useless CPU bound function.\n    '''\n    for i in range(niters):\n        result = (result * result * i + 2 * result * i * i + 3) % 10000000\n    return result\n\nclass CpuThread(threading.Thread):\n    def __init__(self, niters):\n        super().__init__()\n        self.niters = niters\n        self.result = 1\n    def run(self):\n        self.result = cpu_func(self.result, self.niters)\n\nclass CpuProcess(multiprocessing.Process):\n    def __init__(self, niters):\n        super().__init__()\n        self.niters = niters\n        self.result = 1\n    def run(self):\n        self.result = cpu_func(self.result, self.niters)\n\nclass IoThread(threading.Thread):\n    def __init__(self, sleep):\n        super().__init__()\n        self.sleep = sleep\n        self.result = self.sleep\n    def run(self):\n        time.sleep(self.sleep)\n\nclass IoProcess(multiprocessing.Process):\n    def __init__(self, sleep):\n        super().__init__()\n        self.sleep = sleep\n        self.result = self.sleep\n    def run(self):\n        time.sleep(self.sleep)\n\nif __name__ == '__main__':\n    cpu_n_iters = int(sys.argv[1])\n    sleep = 1\n    cpu_count = multiprocessing.cpu_count()\n    input_params = [\n        (CpuThread, cpu_n_iters),\n        (CpuProcess, cpu_n_iters),\n        (IoThread, sleep),\n        (IoProcess, sleep),\n    ]\n    header = ['nthreads']\n    for thread_class, _ in input_params:\n        header.append(thread_class.__name__)\n    print(' '.join(header))\n    for nthreads in range(1, 2 * cpu_count):\n        results = [nthreads]\n        for thread_class, work_size in input_params:\n            start_time = time.time()\n            threads = []\n            for i in range(nthreads):\n                thread = thread_class(work_size)\n                threads.append(thread)\n                thread.start()\n            for i, thread in enumerate(threads):\n                thread.join()\n            results.append(time.time() - start_time)\n        print(' '.join('{:.6e}'.format(result) for result in results))\n\n\nGitHub upstream + plotting code on same directory.\n\nTested on Ubuntu 18.10, Python 3.6.7, in a Lenovo ThinkPad P51 laptop with CPU: Intel Core i7-7820HQ CPU (4 cores / 8 threads), RAM: 2x Samsung M471A2K43BB1-CRC (2x 16GiB), SSD: Samsung MZVLB512HAJQ-000L7 (3,000 MB/s).\n\nVisualize which threads are running at a given time\n\nThis post https://rohanvarma.me/GIL/ taught me that you can run a callback whenever a thread is scheduled with the target= argument of threading.Thread and the same for multiprocessing.Process.\n\nThis allows us to view exactly which thread runs at each time. When this is done, we would see something like (I made this particular graph up): \n\n            +--------------------------------------+\n            + Active threads / processes           +\n+-----------+--------------------------------------+\n|Thread   1 |********     ************             |\n|         2 |        *****            *************|\n+-----------+--------------------------------------+\n|Process  1 |***  ************** ******  ****      |\n|         2 |** **** ****** ** ********* **********|\n+-----------+--------------------------------------+\n            + Time -->                             +\n            +--------------------------------------+\n\n\nwhich would show that:\n\n\nthreads are fully serialized by the GIL\nprocesses can run in parallel\n\n    ",
        "votes": 78,
        "comentarios": [
            {
                "decripcion": "Re: \"threads only scale up to about 4x instead of the expected 8x since I'm on an 8 hyperthread machine.\"  For CPU bound tasks, it should be expected that a 4 core machine max out at 4x.  Hyper-threading only helps CPU context switching.  (In most cases it only the \"hype\" that is effective. /joke)",
                "fecha": { "$date" : "2019-09-16T18:14:34Z" },
                "usuario": "Blaine",
                "usuario_id": 1582
            },
            {
                "decripcion": "SO doesn't like dupe answers though, so you should probably consider deleting this instance of the answer.",
                "fecha": { "$date" : "2020-02-28T12:09:26Z" },
                "usuario": "Andras Deak",
                "usuario_id": 1583
            },
            {
                "decripcion": "@AndrasDeak I will leave it here because this page will be less good otherwise and certain links would break and I would lose hard earned rep.",
                "fecha": { "$date" : "2020-02-28T12:22:29Z" },
                "usuario": "Ciro Santilli \u65b0\u7586\u518d\u6559\u80b2\u8425\u516d\u56db\u4e8b\u4ef6\u6cd5\u8f6e\u529f\u90dd\u6d77\u4e1c",
                "usuario_id": 298
            }
        ],
        "usuario": "Ciro Santilli \u65b0\u7586\u518d\u6559\u80b2\u8425\u516d\u56db\u4e8b\u4ef6\u6cd5\u8f6e\u529f\u90dd\u6d77\u4e1c",
        "usuario_id": 298
    },
    {
        "_id": 925,
        "fecha": { "$date" : "2010-06-15T11:15:29Z" },
        "decripcion": "\nThe key advantage is isolation. A crashing process won't bring down other processes, whereas a crashing thread will probably wreak havoc with other threads.\n    ",
        "votes": 47,
        "comentarios": [
            {
                "decripcion": "Pretty sure this is just wrong. If a standard thread in Python ends by raising an exception, nothing will happen when you join it. I wrote my own subclass of thread which catches the exception in a thread and re-raises it on the thread that joins it, because the fact it was just ignores was really bad (lead to other hard to find bugs.) A process would have the same behavior. Unless by crashing you meant Python actual crashing, not an exception being raised. If you ever find Python crashing, that is definitely a bug that you should report. Python should always raise exceptions and never crash.",
                "fecha": { "$date" : "2015-10-16T19:07:22Z" },
                "usuario": "ArtOfWarfare",
                "usuario_id": 1578
            },
            {
                "decripcion": "@ArtOfWarfare Threads can do much more than raise an exception. A rogue thread can, via buggy native or ctypes code, trash memory structures anywhere in the process, including the python runtime itself, thus corrupting the entire process.",
                "fecha": { "$date" : "2015-10-17T01:11:09Z" },
                "usuario": "Marcelo Cantos",
                "usuario_id": 1584
            },
            {
                "decripcion": "@jar from a generic point of view, Marcelo's answer is more complete. If the system is really critical, you should never rely in the fact that \"things work as expected\". With separate memory spaces, an overflow must happen in order to damage nearby processes, which is a more unlikely thing to happen than the situation exposed by marcelo.",
                "fecha": { "$date" : "2019-01-17T00:41:59Z" },
                "usuario": "DGoiko",
                "usuario_id": 1585
            }
        ],
        "usuario": "Marcelo Cantos",
        "usuario_id": 1584
    },
    {
        "_id": 926,
        "fecha": { "$date" : "2010-06-15T11:22:41Z" },
        "decripcion": "\nAnother thing not mentioned is that it depends on what OS you are using where speed is concerned. In Windows processes are costly so threads would be better in windows but in unix processes are faster than their windows variants so using processes in unix is much safer plus quick to spawn.\n    ",
        "votes": 29,
        "comentarios": [
            {
                "decripcion": "Do you have actual numbers to back this up with? IE, comparing doing a task serially, then on multiple threads, then on multiple processes, on both Windows and Unix?",
                "fecha": { "$date" : "2015-06-24T21:21:26Z" },
                "usuario": "ArtOfWarfare",
                "usuario_id": 1578
            },
            {
                "decripcion": "Agree with @ArtOfWarfare question. Numbers? Do you recommend using Threads for Windows?",
                "fecha": { "$date" : "2015-10-16T11:31:18Z" },
                "usuario": "m3nda",
                "usuario_id": 1377
            },
            {
                "decripcion": "The OS doesn't matter much because pythons GIL doesn't allow it to run multiple threads on a single process. Multiprocessing will be faster in Windows and Linux.",
                "fecha": { "$date" : "2019-03-05T23:04:42Z" },
                "usuario": "Viliami",
                "usuario_id": 1586
            }
        ],
        "usuario": "chrisg",
        "usuario_id": 1587
    },
    {
        "_id": 927,
        "fecha": { "$date" : "2018-09-10T19:26:17Z" },
        "decripcion": "\nAs mentioned in the question, Multiprocessing in Python is the only real way to achieve true parallelism. Multithreading cannot achieve this because the GIL prevents threads from running in parallel. \n\nAs a consequence, threading may not always be useful in Python, and in fact, may even result in worse performance depending on what you are trying to achieve. For example, if you are performing a CPU-bound task such as decompressing gzip files or 3D-rendering (anything CPU intensive) then threading may actually hinder your performance rather than help. In such a case, you would want to use Multiprocessing as only this method actually runs in parallel and will help distribute the weight of the task at hand. There could be some overhead to this since Multiprocessing involves copying the memory of a script into each subprocess which may cause issues for larger-sized applications.\n\nHowever, Multithreading becomes useful when your task is IO-bound. For example, if most of your task involves waiting on API-calls, you would use Multithreading because why not start up another request in another thread while you wait, rather than have your CPU sit idly by.\n\nTL;DR\n\n\nMultithreading is concurrent and is used for IO-bound tasks\nMultiprocessing achieves true parallelism and is used for CPU-bound tasks\n\n    ",
        "votes": 26,
        "comentarios": [
            {
                "decripcion": "Could you give an example of task that is IO-bound?",
                "fecha": { "$date" : "2018-10-13T16:16:34Z" },
                "usuario": "YellowPillow",
                "usuario_id": 1588
            },
            {
                "decripcion": "@YellowPillow Let's say you're making multiple API calls to request some data, in this case the majority of the time is spent waiting on the network. As it awaits this network I/O, the GIL can be released to be used by the next task. However, the task will need to re-acquire the GIL in order to go to execute the rest of any python code associated with each API request, but, as the task is waiting for the network, it does not need to hold on to the GIL.",
                "fecha": { "$date" : "2018-10-13T20:26:57Z" },
                "usuario": "buydadip",
                "usuario_id": 1589
            }
        ],
        "usuario": "buydadip",
        "usuario_id": 1589
    },
    {
        "_id": 928,
        "fecha": { "$date" : "2018-05-29T10:50:48Z" },
        "decripcion": "\nOther answers have focused more on the multithreading vs multiprocessing aspect, but in python Global Interpreter Lock (GIL) has to be taken into account. When more number (say k) of threads are created, generally they will not increase the performance by  k  times, as it will still be running as a single threaded application. GIL is a global lock which locks everything out and allows only single thread execution  utilizing only a single core. The performance does increase in places where C extensions like numpy, Network, I/O are being used, where a lot of background work is done and GIL is released.  So when threading is used, there is only a single operating system level thread while python creates pseudo-threads which are completely managed by threading itself but are essentially running as a single process. Preemption takes place between these pseudo threads. If the CPU runs at maximum capacity, you may want to switch to multiprocessing.\nNow in case of self-contained instances of execution, you can instead opt for pool. But in case of overlapping data, where you may want processes communicating you should use multiprocessing.Process.\n    ",
        "votes": 18,
        "comentarios": [
            {
                "decripcion": "\"So when threading is used, there is only a single operating system level thread while python creates pseudo-threads which are completely managed by threading itself but are essentially running as a single process. \" That is not true. Python threads are real OS-threads. What you are describing are green threads, Python does not use that. It's just that a thread needs to hold the GIL to execute Python-bytecode which makes thread-execution sequential.",
                "fecha": { "$date" : "2019-02-13T16:09:55Z" },
                "usuario": "Darkonaut",
                "usuario_id": 360
            },
            {
                "decripcion": "Now in case of self-contained instances of execution, you can instead opt for pool. But in case of overlapping data, where you may want processes communicating you should use multiprocessing.Process. What pool? The multiprocessing library has a Pool, so this doesn't make much sense.",
                "fecha": { "$date" : "2020-02-09T16:22:55Z" },
                "usuario": "AMC",
                "usuario_id": 1459
            }
        ],
        "usuario": "Chitransh Gaurav",
        "usuario_id": 1590
    },
    {
        "_id": 929,
        "fecha": { "$date" : "2019-03-26T11:04:30Z" },
        "decripcion": "\nMULTIPROCESSING\n\n\nMultiprocessing adds CPUs to increase computing power.\nMultiple processes are executed concurrently.\nCreation of a process is time-consuming and resource intensive.\nMultiprocessing can be symmetric or asymmetric.\n\n\n\n  \n  The multiprocessing library in Python uses separate memory space, multiple CPU cores, bypasses GIL limitations in CPython, child processes are killable (ex. function calls in program) and is much easier to use.\n  Some caveats of the module are a larger memory footprint and IPC\u2019s a little more complicated with more overhead.\n  \n\n\nMULTITHREADING\n\n\nMultithreading creates multiple threads of a single process to increase computing power.\nMultiple threads of a single process are executed concurrently.\nCreation of a thread is economical in both sense time and resource.\n\n\n\n  \n  The multithreading library is lightweight, shares memory, responsible for responsive UI and is used well for I/O bound applications. \n  The module isn\u2019t killable and is subject to the GIL. \n  Multiple threads live in the same process in the same space, each thread will do a specific task, have its own code, own stack memory, instruction pointer, and share heap memory. \n  If a thread has a memory leak it can damage the other threads and parent process.\n  \n\n\nExample of Multi-threading and Multiprocessing using Python\n\nPython 3 has the facility of Launching parallel tasks. This makes our work easier. \n\nIt has for thread pooling and Process pooling. \n\nThe following gives an insight:\n\nThreadPoolExecutor Example\n\nimport concurrent.futures\nimport urllib.request\n\nURLS = ['http://www.foxnews.com/',\n        'http://www.cnn.com/',\n        'http://europe.wsj.com/',\n        'http://www.bbc.co.uk/',\n        'http://some-made-up-domain.com/']\n\n# Retrieve a single page and report the URL and contents\ndef load_url(url, timeout):\n    with urllib.request.urlopen(url, timeout=timeout) as conn:\n        return conn.read()\n\n# We can use a with statement to ensure threads are cleaned up promptly\nwith concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n    # Start the load operations and mark each future with its URL\n    future_to_url = {executor.submit(load_url, url, 60): url for url in URLS}\n    for future in concurrent.futures.as_completed(future_to_url):\n        url = future_to_url[future]\n        try:\n            data = future.result()\n        except Exception as exc:\n            print('%r generated an exception: %s' % (url, exc))\n        else:\n            print('%r page is %d bytes' % (url, len(data)))\n\n\nProcessPoolExecutor\n\nimport concurrent.futures\nimport math\n\nPRIMES = [\n    112272535095293,\n    112582705942171,\n    112272535095293,\n    115280095190773,\n    115797848077099,\n    1099726899285419]\n\ndef is_prime(n):\n    if n % 2 == 0:\n        return False\n\n    sqrt_n = int(math.floor(math.sqrt(n)))\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    with concurrent.futures.ProcessPoolExecutor() as executor:\n        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):\n            print('%d is prime: %s' % (number, prime))\n\nif __name__ == '__main__':\n    main()\n\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "Jeril",
        "usuario_id": 1455
    },
    {
        "_id": 930,
        "fecha": { "$date" : "2020-01-07T12:04:57Z" },
        "decripcion": "\nThreads share the same memory space to guarantee that two threads don't share the same memory location so special precautions must be taken the CPython interpreter handles this using a mechanism called GIL, or the Global Interpreter Lock\n\nwhat is GIL(Just I want to Clarify GIL it's repeated above)?\n\nIn CPython, the global interpreter lock, or GIL, is a mutex that protects access to Python objects, preventing multiple threads from executing Python bytecodes at once. This lock is necessary mainly because CPython's memory management is not thread-safe.\n\nFor the main question, we can compare using Use Cases, How?\n\n1-Use Cases for Threading: in case of GUI programs threading can be used to make the application responsive  For example, in a text editing program, one thread can take care of recording the user inputs, another can be responsible for displaying the text, a third can do spell-checking, and so on. Here, the program has to wait for user interaction. which is the biggest bottleneck. Another use case for threading is programs that are IO bound or network bound, such as web-scrapers.\n\n2-Use Cases for Multiprocessing: Multiprocessing outshines threading in cases where the program is CPU intensive and doesn\u2019t have to do any IO or user interaction.\n\nFor More Details visit this link and link or you need in-depth knowledge for threading visit here for Multiprocessing visit here\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "EL TEGANI MOHAMED HAMAD GABIR",
        "usuario_id": 1591
    },
    {
        "_id": 931,
        "fecha": { "$date" : "2018-09-19T23:22:50Z" },
        "decripcion": "\nProcess may have multiple threads. These threads may share memory and are the units of execution within a process. \n\nProcesses run on the CPU, so  threads are residing under each process. Processes are individual entities which run independently. If you want to share data or state between each process, you may use a memory-storage tool such as Cache(redis, memcache), Files, or a Database.\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "Processes run on the CPU, so threads are residing under each process. How does the first part of that sentence lead to the second part? Threads run on the CPU too.",
                "fecha": { "$date" : "2020-02-09T16:24:43Z" },
                "usuario": "AMC",
                "usuario_id": 1459
            }
        ],
        "usuario": "Satya Srinivasu Rankireddy",
        "usuario_id": 1592
    },
    {
        "_id": 932,
        "fecha": { "$date" : "2019-04-29T01:35:08Z" },
        "decripcion": "\nAs I learnd in university most of the answers above are right. In PRACTISE on different platforms (always using python) spawning multiple threads ends up like spawning one process. The difference is the multiple cores share the load instead of only 1 core processing everything at 100%. So if you spawn for example 10 threads on a 4 core pc, you will end up getting only the 25% of the cpus power!! And if u spawn 10 processes u will end up with the cpu processing at 100% (if u dont have other limitations). Im not a expert in all the new technologies. Im answering with own real experience background\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "In PRACTISE on different platforms (always using python) spawning multiple threads ends up like spawning one process. They don't have the same use cases at all though, so I'm not sure I agree with that.",
                "fecha": { "$date" : "2020-02-09T16:28:05Z" },
                "usuario": "AMC",
                "usuario_id": 1459
            }
        ],
        "usuario": "Alex",
        "usuario_id": 24
    },
    {
        "_id": 933,
        "fecha": { "$date" : "2017-05-11T07:44:40Z" },
        "decripcion": "\nvolatile has semantics for memory visibility. Basically, the value of a volatile field becomes visible to all readers (other threads in particular) after a write operation completes on it. Without volatile, readers could see some non-updated value.\n\nTo answer your question: Yes, I use a volatile variable to control whether some code continues a loop. The loop tests the volatile value and continues if it is true. The condition can be set to false by calling a \"stop\" method. The loop sees false and terminates when it tests the value after the stop method completes execution.\n\nThe book \"Java Concurrency in Practice,\" which I highly recommend, gives a good explanation of volatile. This book is written by the same person who wrote the IBM article that is referenced in the question (in fact, he cites his book at the bottom of that article). My use of volatile is what his article calls the \"pattern 1 status flag.\"\n\nIf you want to learn more about how volatile works under the hood, read up on the Java memory model. If you want to go beyond that level, check out a good computer architecture book like Hennessy & Patterson and read about cache coherence and cache consistency.\n    ",
        "votes": 794,
        "comentarios": [
            {
                "decripcion": "This answer is correct, but incomplete. It omits an important property of volatile that came with the new Java Memory Model defined in JSR 133: that when a thread reads a volatile variable it sees not only the value last written to it by some other thread, but also all other writes to other variables that were visible in that other thread at the time of the volatile write. See this answer and this reference.",
                "fecha": { "$date" : "2013-07-18T12:32:53Z" },
                "usuario": "Adam Zalcman",
                "usuario_id": 1595
            },
            {
                "decripcion": "For beginners, I'd request you to demonstrate with some code (please?)",
                "fecha": { "$date" : "2014-02-22T06:43:38Z" },
                "usuario": "Hungry Blue Dev",
                "usuario_id": 1596
            },
            {
                "decripcion": "The article linked in the question has code examples.",
                "fecha": { "$date" : "2014-02-22T23:37:13Z" },
                "usuario": "Greg Mattes",
                "usuario_id": 1597
            },
            {
                "decripcion": "I think the link 'Hennessy & Patterson' is broken. And the link to 'the Java memory model' actually leads to Oracle's Java Language Specification 'Chapter 17. Threads and Locks'.",
                "fecha": { "$date" : "2015-09-18T17:56:32Z" },
                "usuario": "Kris",
                "usuario_id": 1598
            },
            {
                "decripcion": "@fefrei: \u201cimmediately\u201d is a colloquial term. Of course, that can\u2019t be guaranteed when neither, execution timing nor thread scheduling algorithms, are actually specified. The only way for a program to find out whether a volatile read is subsequent to a particular volatile write, is by checking whether the seen value is the expected written one.",
                "fecha": { "$date" : "2017-07-05T08:06:36Z" },
                "usuario": "Holger",
                "usuario_id": 1599
            }
        ],
        "usuario": "Greg Mattes",
        "usuario_id": 1597
    },
    {
        "_id": 934,
        "fecha": { "$date" : "2019-11-17T14:09:42Z" },
        "decripcion": "\n\u201c\u2026 the volatile modifier guarantees that any thread that reads a field will see the most recently written value.\u201d - Josh Bloch\nIf you are thinking about using volatile, read up on the package java.util.concurrent which deals with atomic behaviour.\nThe Wikipedia post on a Singleton Pattern shows volatile in use.\n    ",
        "votes": 193,
        "comentarios": [
            {
                "decripcion": "Why is there both volatile and synchronized keywords?",
                "fecha": { "$date" : "2015-05-09T02:32:34Z" },
                "usuario": "ptkato",
                "usuario_id": 1600
            },
            {
                "decripcion": "The Wikipedia article on a Singleton Pattern has changed a lot since and doesn't feature said volatile example any longer. It can be found in an archived version.",
                "fecha": { "$date" : "2016-09-23T12:26:13Z" },
                "usuario": "bskp",
                "usuario_id": 1601
            },
            {
                "decripcion": "@ptkato Those two keywords serve completely different purposes, so the question doesn't make much sense as a comparison, although they are both related to concurrency. It's like saying \"Why are there both void and public keywords\".",
                "fecha": { "$date" : "2019-12-03T19:08:25Z" },
                "usuario": "DavidS",
                "usuario_id": 1602
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 935,
        "fecha": { "$date" : "2018-06-26T15:45:27Z" },
        "decripcion": "\nImportant point about volatile: \n\n\nSynchronization in Java is possible by using Java keywords synchronized and volatile and locks.\nIn Java, we can not have synchronized variable. Using synchronized keyword with a variable is illegal and will result in compilation error. Instead of using the synchronized variable in Java, you can use the java volatile variable, which will instruct JVM threads to read the value of volatile variable from main memory and don\u2019t cache it locally.\nIf a variable is not shared between multiple threads then there is no need to use the volatile keyword.\n\n\nsource\n\nExample usage of volatile:\n\npublic class Singleton {\n    private static volatile Singleton _instance; // volatile variable\n    public static Singleton getInstance() {\n        if (_instance == null) {\n            synchronized (Singleton.class) {\n                if (_instance == null)\n                    _instance = new Singleton();\n            }\n        }\n        return _instance;\n    }\n}\n\n\nWe are creating instance lazily at the time the first request comes.\n\nIf we do not make the _instance variable volatile then the Thread which is creating the instance of Singleton is not able to communicate to the other thread. So if Thread A is creating Singleton instance and just after creation, the CPU corrupts etc, all other threads will not be able to see the value of _instance as not null and they will believe it is still assigned null.  \n\nWhy does this happen? Because reader threads are not doing any locking and until the writer thread comes out of a synchronized block, the memory will not be synchronized and value of _instance will not be updated in main memory. With the Volatile keyword in Java, this is handled by Java itself and such updates will be visible by all reader threads.  \n\n\n  Conclusion: volatile keyword is also used to communicate the content of memory between threads.  \n\n\nExample usage of without volatile:\n\npublic class Singleton{    \n    private static Singleton _instance;   //without volatile variable\n    public static Singleton getInstance(){   \n          if(_instance == null){  \n              synchronized(Singleton.class){  \n               if(_instance == null) _instance = new Singleton(); \n      } \n     }   \n    return _instance;  \n    }\n\n\nThe code above is not thread-safe. Although it checks the value of instance once again within the synchronized block (for performance reasons), the JIT compiler can rearrange the bytecode in a way that the reference to the instance is set before the constructor has finished its execution. This means the method getInstance() returns an object that may not have been initialized completely. To make the code thread-safe, the keyword volatile can be used since Java 5 for the instance variable. Variables that are marked as volatile get only visible to other threads once the constructor of the object has finished its execution completely.\nSource\n\n\n\nvolatile usage in Java:\n\nThe fail-fast iterators are typically implemented using a volatile counter on the list object.\n\n\nWhen the list is updated, the counter is incremented.  \nWhen an Iterator is created, the current value of the counter is embedded in the Iterator object.\nWhen an Iterator operation is performed, the method compares the two counter values and throws a ConcurrentModificationException if they are different.\n\n\nThe implementation of fail-safe iterators is typically light-weight.  They typically rely on properties of the specific list implementation's data structures.  There is no general pattern.   \n    ",
        "votes": 149,
        "comentarios": [
            {
                "decripcion": "\"The fail-fast iterators are typically implemented using a volatile counter\" - no longer the case, too costly: bugs.java.com/bugdatabase/view_bug.do?bug_id=6625725",
                "fecha": { "$date" : "2017-05-24T17:15:48Z" },
                "usuario": "Vsevolod Golovanov",
                "usuario_id": 1603
            },
            {
                "decripcion": "are the double checking for _instance safe? i thought they are not safe even with volatile",
                "fecha": { "$date" : "2017-11-25T21:18:51Z" },
                "usuario": "Dexters",
                "usuario_id": 1604
            },
            {
                "decripcion": "\" which will instruct JVM threads to read value of volatile variable from main memory and don\u2019t cache it locally.\" good point",
                "fecha": { "$date" : "2017-12-20T02:30:53Z" },
                "usuario": "Humoyun Ahmad",
                "usuario_id": 1347
            },
            {
                "decripcion": "For thread-safety one could go with private static final Singleton _instance; as well.",
                "fecha": { "$date" : "2018-02-26T09:23:36Z" },
                "usuario": "Chris311",
                "usuario_id": 1605
            },
            {
                "decripcion": "@Chris311\uff0c sure,  the static final field, it's thread safe.",
                "fecha": { "$date" : "2020-10-17T14:40:43Z" },
                "usuario": "Li-Tian",
                "usuario_id": 1606
            }
        ],
        "usuario": "Premraj",
        "usuario_id": 1607
    },
    {
        "_id": 936,
        "fecha": { "$date" : "2020-03-11T04:39:08Z" },
        "decripcion": "\nvolatile is very useful to stop threads.\n\nNot that you should be writing your own threads, Java 1.6 has a lot of nice thread pools.  But if you are sure you need a thread, you'll need to know how to stop it.\n\nThe pattern I use for threads is:\n\npublic class Foo extends Thread {\n\n  private volatile boolean close = false;\n\n  public void run() {\n    while(!close) {\n      // do work\n    }\n  }\n  public void close() {\n    close = true;\n    // interrupt here if needed\n  }\n}\n\n\nIn the above code segment, the thread reading close in the while loop is different from the one that calls close(). Without volatile, the thread running the loop may never see the change to close.\n\nNotice how there's no need for synchronization\n    ",
        "votes": 60,
        "comentarios": [
            {
                "decripcion": "I wonder why that is even necessary. Isn't that only necessary if other threads have to react on the status change of this thread in such a way that the threads synchronization is at danger?",
                "fecha": { "$date" : "2013-06-06T07:27:25Z" },
                "usuario": "Jori",
                "usuario_id": 1608
            },
            {
                "decripcion": "@Jori, you need volatile because the thread reading close in the while loop is different from the one that calls close().  Without volatile, the thread running the loop may never see the change to close.",
                "fecha": { "$date" : "2013-06-06T18:48:11Z" },
                "usuario": "Pyrolistical",
                "usuario_id": 1609
            },
            {
                "decripcion": "would you say there is an advantage between stopping a thread like that or using Thread#interrupt() and Thread#isInterrupted() methods ?",
                "fecha": { "$date" : "2015-09-03T14:33:51Z" },
                "usuario": "Ricardo Belchior",
                "usuario_id": 1610
            },
            {
                "decripcion": "@Pyrolistical - Have you observed the thread never seeing the change in practice?  Or can you extend the example to reliably trigger that issue?  I'm curious because I know I've used (and seen others using) code that's basically identical to the example but without the volatile keyword, and it always seems to work fine.",
                "fecha": { "$date" : "2016-02-21T13:28:22Z" },
                "usuario": "aroth",
                "usuario_id": 1611
            },
            {
                "decripcion": "@aroth: with today\u2019s JVMs, you can observe that in practice, even with the simplest examples, however, you can\u2019t reliably reproduce this behavior. With more complex applications, you sometimes have other actions with memory visibility guarantees within you code which make it happen to work, which is especially dangerous as you don\u2019t know why it works and a simple, apparently unrelated change in your code can break your application\u2026",
                "fecha": { "$date" : "2016-10-18T10:39:50Z" },
                "usuario": "Holger",
                "usuario_id": 1599
            }
        ],
        "usuario": "Pyrolistical",
        "usuario_id": 1609
    },
    {
        "_id": 937,
        "fecha": { "$date" : "2019-09-05T06:25:40Z" },
        "decripcion": "\nA variable declared with volatile keyword, has two main qualities which make it special.\n\n\nIf we have a volatile variable, it cannot be cached into the computer's(microprocessor) cache memory by any thread. Access always happened from main memory.\nIf there is a write operation going on a volatile variable, and suddenly a read operation is requested, it is guaranteed that the write operation will be finished prior to the read operation.\n\n\nTwo above qualities deduce that\n\n\nAll the threads reading a volatile variable will definitely read the latest value. Because no cached value can pollute it. And also the read request will be granted only after the completion of the current write operation.\n\n\nAnd on the other hand,\n\n\nIf we further investigate the #2 that I have mentioned, we can see that volatile keyword is an ideal way to maintain a shared variable which has 'n' number of reader threads and only one writer thread to access it. Once we add the volatile keyword, it is done. No any other overhead about thread safety.\n\n\nConversly, \n\nWe can't make use of volatile keyword solely, to satisfy a shared variable which has more than one writer thread accessing it.\n    ",
        "votes": 34,
        "comentarios": [
            {
                "decripcion": "This explains the difference between volatile and synchronized.",
                "fecha": { "$date" : "2019-09-05T06:11:17Z" },
                "usuario": "ajay",
                "usuario_id": 1612
            },
            {
                "decripcion": "This is, sadly, incorrect.  \"Volatile\" does not control cache and does not provide any magic instant global update for memory views of other CPUs.  \"Volatile\" simply ensures that whenever a reference to the variable is done (either read or write), JVM performs a reference to the assigned address of the variable in virtual memory space, rather than to a value stored in a register or in some other convenient shadow location (such as stack) selected by the optimizer, nor does it skip a reference on the judgement of the optimizer.",
                "fecha": { "$date" : "2020-10-21T17:20:01Z" },
                "usuario": "sergey_o",
                "usuario_id": 1613
            },
            {
                "decripcion": "Without \"volatile\", an instruction such as \"for (...) {a += b + c;}\" may not refer memory locations at all, just keeping \"a\", \"b\" and \"c\" in registers for the whole duration of the loop.  When a value is written by CPU to a virtual memory address (or for that matter, corresponding physical memory address), the update does not become instantly visible to other CPUs, nor is it flushed immediatelly to RAM [*].",
                "fecha": { "$date" : "2020-10-21T17:20:33Z" },
                "usuario": "sergey_o",
                "usuario_id": 1613
            },
            {
                "decripcion": "The update is simply put to the cache of the local CPU and then is queued to the inter-CPU interconnect that implements memory coherency protocol (such as MESI), and the protocol message starts travelling to other CPUs, eventually causing their caches to be updated too. This takes short, but non-zero time. In the meanwhile, other CPUs remain unaware that an update has happened.  If CPU1 updated volatile variable X, and CPU2 read it a jiffy later, CPU2 may find either old value for X or new value for X.",
                "fecha": { "$date" : "2020-10-21T17:20:47Z" },
                "usuario": "sergey_o",
                "usuario_id": 1613
            },
            {
                "decripcion": "On the write side, the difference between \"volatile\" and \"non-volatile\" is that for \"volatile\" CPU2 will see an update a nanosecond or so later, whereas for \"non-volatile\" the delay in update is unpredictable and depends on the optimizer.  On the read side, the difference is that for \"volatile\" a reference to the variable in the program code forces a reference to the assigned variable location in virtual memory. Whereas for \"non-volatile\" the optimizer may choose to skip making such a reference.",
                "fecha": { "$date" : "2020-10-21T17:20:57Z" },
                "usuario": "sergey_o",
                "usuario_id": 1613
            }
        ],
        "usuario": "Supun Wijerathne",
        "usuario_id": 1614
    },
    {
        "_id": 938,
        "fecha": { "$date" : "2008-09-20T04:00:01Z" },
        "decripcion": "\nOne common example for using volatile is to use a volatile boolean variable as a flag to terminate a thread.  If you've started a thread, and you want to be able to safely interrupt it from a different thread, you can have the thread periodically check a flag.  To stop it, set the flag to true.  By making the flag volatile, you can ensure that the thread that is checking it will see it has been set the next time it checks it without having to even use a synchronized block.\n    ",
        "votes": 31,
        "comentarios": [],
        "usuario": "Dave L.",
        "usuario_id": 1615
    },
    {
        "_id": 939,
        "fecha": { "$date" : "2015-02-11T14:51:29Z" },
        "decripcion": "\nNo one has mentioned the treatment of read and write operation for long and double variable type. Reads and writes are atomic operations for reference variables and for most primitive variables, except for long and double variable types, which must use the volatile keyword to be atomic operations. @link\n    ",
        "votes": 13,
        "comentarios": [
            {
                "decripcion": "To make it even more clearer, there is NO NEED to set a boolean volatile, because the read and write of a boolean IS ALREADY atomic.",
                "fecha": { "$date" : "2017-04-03T14:10:26Z" },
                "usuario": "Kai Wang",
                "usuario_id": 1616
            },
            {
                "decripcion": "@KaiWang you don't need to use volatile on booleans for atomicity purposes. But you certainly might for visibility reasons. Is that what you meant to say?",
                "fecha": { "$date" : "2017-06-16T12:27:26Z" },
                "usuario": "SusanW",
                "usuario_id": 1617
            }
        ],
        "usuario": "Donatello Boccaforno",
        "usuario_id": 1618
    },
    {
        "_id": 940,
        "fecha": { "$date" : "2008-09-20T04:26:30Z" },
        "decripcion": "\nYes, volatile must be used whenever you want a mutable variable to be accessed by multiple threads. It is not very common usecase because typically you need to perform more than a single atomic operation (e.g. check the variable state before modifying it), in which case you would use a synchronized block instead.\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "ykaganovich",
        "usuario_id": 1619
    },
    {
        "_id": 941,
        "fecha": { "$date" : "2019-10-01T16:45:51Z" },
        "decripcion": "\nIn my opinion, two important scenarios other than stopping thread in which volatile keyword is used are:\n\n\nDouble-checked locking mechanism. Used often in Singleton design\npattern. In this the singleton object needs to be declared volatile.\nSpurious Wakeups. Thread may sometimes wake up from wait call even if no notify call has been issued. This behavior is called spurious wakeup. This can be countered by using a conditional variable (boolean flag). Put the wait() call in a while loop as long as the flag is true. So if thread wakes up from wait call due to any reasons other than Notify/NotifyAll then it encounters flag is still true and hence calls wait again. Prior to calling notify set this flag to true. In this case the boolean flag is declared as volatile.\n\n    ",
        "votes": 10,
        "comentarios": [
            {
                "decripcion": "The whole #2 section seems very confused, it is conflating lost notifications, spurious wakeups, and memory visibility issues. Also if all usages of the flag are in synchronized then volatile is redundant. I think i get your point but spurious wakeup is not the correct term. Please clarify.",
                "fecha": { "$date" : "2019-10-25T18:12:46Z" },
                "usuario": "Nathan Hughes",
                "usuario_id": 1620
            }
        ],
        "usuario": "Aniket Thakur",
        "usuario_id": 1621
    },
    {
        "_id": 942,
        "fecha": { "$date" : "2021-04-13T14:25:54Z" },
        "decripcion": "\nvolatile => synchronized[About]\nvolatile says for a programmer that the value always will be up to date. The problem is that the value can be saved on different types of hardware memory. For example it can be CPU registers, CPU cache, RAM... \u0421PU registers and CPU cache belong to CPU and can not share a data unlike of RAM which is on the rescue in multithreading envirompment\n\nvolatile keyword says that a variable will be read and written from/to RAM memory directly. It has some computation footprint\nJava 5 extended volatile by supporting happens-before[About]\n\nA write to a volatile field happens-before every subsequent read of that field.\n\nRead is after write\n\nvolatile keyword does not cure a race condition situation when several threads can write some values simultaneously. The answer is synchronized keyword[About]\nAs a result it safety only when one thread writes and others just read the volatile value\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "yoAlex5",
        "usuario_id": 1622
    },
    {
        "_id": 943,
        "fecha": { "$date" : "2012-07-10T18:02:44Z" },
        "decripcion": "\nYou'll need to use 'volatile' keyword, or 'synchronized' and any other concurrency control tools and techniques you might have at your disposal if you are developing a multithreaded application. Example of such application is desktop apps.\n\nIf you are developing an application that would be deployed to application server (Tomcat, JBoss AS, Glassfish, etc) you don't have to handle concurrency control yourself as it already addressed by the application server. In fact, if I remembered correctly the Java EE standard prohibit any concurrency control in servlets and EJBs, since it is part of the 'infrastructure' layer which you supposed to be freed from handling it. You only do concurrency control in such app if you're implementing singleton objects. This even already addressed if you knit your components using frameworkd like Spring.\n\nSo, in most cases of Java development where the application is a web application and using IoC framework like Spring or EJB, you wouldn't need to use 'volatile'.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Rudi Adianto",
        "usuario_id": 1623
    },
    {
        "_id": 944,
        "fecha": { "$date" : "2016-08-18T15:06:14Z" },
        "decripcion": "\nvolatile only guarantees that all threads, even themselves, are incrementing. For example: a counter sees the same face of the variable at the same time. It is not used instead of synchronized or atomic or other stuff, it completely makes the reads synchronized. Please do not compare it with other java keywords. As the example shows below volatile variable operations are also atomic they fail or succeed at once.\n\npackage io.netty.example.telnet;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n\n    public static volatile  int a = 0;\n    public static void main(String args[]) throws InterruptedException{\n\n        List<Thread> list = new  ArrayList<Thread>();\n        for(int i = 0 ; i<11 ;i++){\n            list.add(new Pojo());\n        }\n\n        for (Thread thread : list) {\n            thread.start();\n        }\n\n        Thread.sleep(20000);\n        System.out.println(a);\n    }\n}\nclass Pojo extends Thread{\n    int a = 10001;\n    public void run() {\n        while(a-->0){\n            try {\n                Thread.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            Main.a++;\n            System.out.println(\"a = \"+Main.a);\n        }\n    }\n}\n\n\nEven you put volatile or not results will always differ. But if you use AtomicInteger as below results will be always same. This is same with synchronized also.\n\n    package io.netty.example.telnet;\n\n    import java.util.ArrayList;\n    import java.util.List;\n    import java.util.concurrent.atomic.AtomicInteger;\n\n    public class Main {\n\n        public static volatile  AtomicInteger a = new AtomicInteger(0);\n        public static void main(String args[]) throws InterruptedException{\n\n            List<Thread> list = new  ArrayList<Thread>();\n            for(int i = 0 ; i<11 ;i++){\n                list.add(new Pojo());\n            }\n\n            for (Thread thread : list) {\n                thread.start();\n            }\n\n            Thread.sleep(20000);\n            System.out.println(a.get());\n\n        }\n    }\n    class Pojo extends Thread{\n        int a = 10001;\n        public void run() {\n            while(a-->0){\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                Main.a.incrementAndGet();\n                System.out.println(\"a = \"+Main.a);\n            }\n        }\n    }\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "fatih tekin",
        "usuario_id": 1624
    },
    {
        "_id": 945,
        "fecha": { "$date" : "2020-12-03T13:21:58Z" },
        "decripcion": "\nAssume that a thread modifies the value of a shared variable, if you didn't use volatile modifier for that variable. When other threads want to read this variable's value, they don't see the updated value because they read the variable's value from the CPU's cache instead of RAM memory. This problem also known as Visibility Problem.\nBy declaring the shared variable volatile, all writes to the counter variable will be written back to main memory immediately. Also, all reads of the counter variable will be read directly from main memory.\npublic class SharedObject {\n    public volatile int sharedVariable = 0;\n}\n\nWith non-volatile variables there are no guarantees about when the Java Virtual Machine (JVM) reads data from main memory into CPU caches, or writes data from CPU caches to main memory. This can cause several problems which I will explain in the following sections.\n\nExample:\nImagine a situation in which two or more threads have access to a shared object which contains a counter variable declared like this:\npublic class SharedObject {\n    public int counter = 0;\n}\n\nImagine too, that only Thread 1 increments the counter variable, but both Thread 1 and Thread 2 may read the counter variable from time to time.\nIf the counter variable is not declared volatile there is no guarantee about when the value of the counter variable is written from the CPU cache back to main memory. This means, that the counter variable value in the CPU cache may not be the same as in main memory. This situation is illustrated here:\n\nThe problem with threads not seeing the latest value of a variable because it has not yet been written back to main memory by another thread, is called a \"visibility\" problem. The updates of one thread are not visible to other threads.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "CJay",
        "usuario_id": 1625
    },
    {
        "_id": 946,
        "fecha": { "$date" : "2008-09-20T11:07:48Z" },
        "decripcion": "\nYes, I use it quite a lot - it can be very useful for multi-threaded code.  The article you pointed to is a good one.  Though there are two important things to bear in mind:\n\n\nYou should only use volatile if you\ncompletely understand what it does\nand how it differs to synchronized. \nIn many situations volatile appears,\non the surface, to be a simpler more\nperformant alternative to\nsynchronized, when often a better\nunderstanding of volatile would make\nclear that synchronized is the only\noption that would work.\nvolatile doesn't actually work in a\nlot of older JVMs, although\nsynchronized does.  I remember seeing a document that referenced the various levels of support in different JVMs but unfortunately I can't find it now.  Definitely look into it if you're using Java pre 1.5 or if you don't have control over the JVMs that your program will be running on.\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "MB.",
        "usuario_id": 1626
    },
    {
        "_id": 947,
        "fecha": { "$date" : "2014-08-11T16:27:12Z" },
        "decripcion": "\nEvery thread accessing a volatile field will read its current value before continuing, instead of (potentially) using a cached value.\n\nOnly member variable can be volatile or transient.\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "tstuber",
        "usuario_id": 1627
    },
    {
        "_id": 948,
        "fecha": { "$date" : "2012-01-06T14:28:48Z" },
        "decripcion": "\nAbsolutely, yes. (And not just in Java, but also in C#.) There are times when you need to get or set a value that is guaranteed to be an atomic operation on your given platform, an int or boolean, for example, but do not require the overhead of thread locking. The volatile keyword allows you to ensure that when you read the value that you get the current value and not a cached value that was just made obsolete by a write on another thread.\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "dgvid",
        "usuario_id": 1628
    },
    {
        "_id": 949,
        "fecha": { "$date" : "2017-03-02T08:42:57Z" },
        "decripcion": "\nThere are two different uses of volatile keyword.\n\n\nPrevents JVM from reading values from register (assume as cache), and forces its value to be read from memory.\nReduces the risk of memory in-consistency errors.\n\n\n\n  Prevents JVM from reading values in register, and forces its\n  value to be read from memory.\n\n\nA busy flag is used to prevent a thread from continuing while the device is busy and the flag is not protected by a lock:\n\nwhile (busy) {\n    /* do something else */\n}\n\n\nThe testing thread will continue when another thread turns off the busy flag:\n\nbusy = 0;\n\n\nHowever, since busy is accessed frequently in the testing thread, the JVM may optimize the test by placing the value of busy in a register, then test the contents of the register without reading the value of busy in memory before every test. The testing thread would never see busy change and the other thread would only change the value of busy in memory, resulting in deadlock. Declaring the busy flag as volatile forces its value to be read before each test.\n\n\n  Reduces the risk of memory consistency errors.\n\n\nUsing volatile variables reduces the risk of memory consistency errors, because any write to a volatile variable establishes a\n\"happens-before\" relationship with subsequent reads of that same variable. This means that changes to a volatile variable are always visible to other threads.\n\nThe technique of reading, writing without memory consistency errors is called atomic action.\n\nAn atomic action is one that effectively happens all at once. An atomic action cannot stop in the middle: it either happens completely, or it doesn't happen at all. No side effects of an atomic action are visible until the action is complete.\n\nBelow are actions you can specify that are atomic:\n\n\nReads and writes are atomic for reference variables and for most\nprimitive variables (all types except long and double).\nReads and writes are atomic for all variables declared volatile\n(including long and double variables).\n\n\nCheers!\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Mohanraj",
        "usuario_id": 1629
    },
    {
        "_id": 950,
        "fecha": { "$date" : "2020-09-05T14:28:25Z" },
        "decripcion": "\nWhile I see many good Theoretical explanations in the answers mentioned here, I am adding a practical example with an explanation here:\n1.\nCODE RUN WITHOUT VOLATILE USE\npublic class VisibilityDemonstration {\n\nprivate static int sCount = 0;\n\npublic static void main(String[] args) {\n    new Consumer().start();\n    try {\n        Thread.sleep(100);\n    } catch (InterruptedException e) {\n        return;\n    }\n    new Producer().start();\n}\n\nstatic class Consumer extends Thread {\n    @Override\n    public void run() {\n        int localValue = -1;\n        while (true) {\n            if (localValue != sCount) {\n                System.out.println(\"Consumer: detected count change \" + sCount);\n                localValue = sCount;\n            }\n            if (sCount >= 5) {\n                break;\n            }\n        }\n        System.out.println(\"Consumer: terminating\");\n    }\n}\n\nstatic class Producer extends Thread {\n    @Override\n    public void run() {\n        while (sCount < 5) {\n            int localValue = sCount;\n            localValue++;\n            System.out.println(\"Producer: incrementing count to \" + localValue);\n            sCount = localValue;\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                return;\n            }\n        }\n        System.out.println(\"Producer: terminating\");\n    }\n}\n}\n\nIn the above code, there are two threads - Producer and Consumer.\nThe producer thread iterates over the loop 5 times (with a sleep of 1000 milliSecond or 1 Sec) in between. In every iteration, the producer thread increases the value of sCount variable by 1. So, the producer changes the value of sCount from 0 to 5 in all iterations\nThe consumer thread is in a constant loop and print whenever the value of sCount changes until the value reaches 5 where it ends.\nBoth the loops are started at the same time. So both the producer and consumer should print the value of sCount 5 times.\nOUTPUT\nConsumer: detected count change 0\nProducer: incrementing count to 1\nProducer: incrementing count to 2\nProducer: incrementing count to 3\nProducer: incrementing count to 4\nProducer: incrementing count to 5\nProducer: terminating\n\nANALYSIS\nIn the above program, when the producer thread updates the value of sCount, it does update the value of the variable in the main memory(memory from where every thread is going to initially read the value of variable). But the consumer thread reads the value of sCount only the first time from this main memory and then caches the value of that variable inside its own memory. So, even if the value of original sCount in main memory has been updated by the producer thread, the consumer thread is reading from its cached value which is not updated. This is called VISIBILITY PROBLEM .\n2.\nCODE RUN WITH VOLATILE USE\nIn the above code, replace the line of code where sCount is declared by the following :\nprivate volatile  static int sCount = 0;\n\nOUTPUT\nConsumer: detected count change 0\nProducer: incrementing count to 1\nConsumer: detected count change 1\nProducer: incrementing count to 2\nConsumer: detected count change 2\nProducer: incrementing count to 3\nConsumer: detected count change 3\nProducer: incrementing count to 4\nConsumer: detected count change 4\nProducer: incrementing count to 5\nConsumer: detected count change 5\nConsumer: terminating\nProducer: terminating\n\nANALYSIS\nWhen we declare a variable volatile, it means that all reads and all writes to this variable or from this variable will go directly into the main memory. The values of these variables will never be cached.\nAs the value of the sCount variable is never cached by any thread, the consumer always reads the original value of sCount from the main memory(where it is being updated by producer thread). So, In this case the output is correct where both the threads prints the different values of sCount 5 times.\nIn this way, the volatile keyword solves the VISIBILITY PROBLEM .\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "Interestingly, the consumer doesn't cache the value when you print it out before the if statement. Weird",
                "fecha": { "$date" : "2021-07-06T15:07:12Z" },
                "usuario": "Regyn",
                "usuario_id": 1630
            }
        ],
        "usuario": "Abhishek Luthra",
        "usuario_id": 1631
    },
    {
        "_id": 951,
        "fecha": { "$date" : "2018-05-31T06:23:43Z" },
        "decripcion": "\nVolatile does following.\n\n1> Read and write of volatile variables by different threads are always from memory, not from thread's own cache or cpu register. So each thread always deals with the latest value.\n2> When 2 different threads work with same instance or static variables in heap, one may see other's actions as out of order. See jeremy manson's blog on this. But volatile helps here.\n\nFollowing fully running code shows how a number of threads can execute in predefined order and print outputs without using synchronized keyword.\n\nthread 0 prints 0\nthread 1 prints 1\nthread 2 prints 2\nthread 3 prints 3\nthread 0 prints 0\nthread 1 prints 1\nthread 2 prints 2\nthread 3 prints 3\nthread 0 prints 0\nthread 1 prints 1\nthread 2 prints 2\nthread 3 prints 3\n\n\nTo achieve this we may use the following full fledged running code.\n\npublic class Solution {\n    static volatile int counter = 0;\n    static int print = 0;\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        Thread[] ths = new Thread[4];\n        for (int i = 0; i < ths.length; i++) {\n            ths[i] = new Thread(new MyRunnable(i, ths.length));\n            ths[i].start();\n        }\n    }\n    static class MyRunnable implements Runnable {\n        final int thID;\n        final int total;\n        public MyRunnable(int id, int total) {\n            thID = id;\n            this.total = total;\n        }\n        @Override\n        public void run() {\n            // TODO Auto-generated method stub\n            while (true) {\n                if (thID == counter) {\n                    System.out.println(\"thread \" + thID + \" prints \" + print);\n                    print++;\n                    if (print == total)\n                        print = 0;\n                    counter++;\n                    if (counter == total)\n                        counter = 0;\n                } else {\n                    try {\n                        Thread.sleep(30);\n                    } catch (InterruptedException e) {\n                        // log it\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nThe following github link has a readme, which gives proper explanation.\nhttps://github.com/sankar4git/volatile_thread_ordering\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "sankar banerjee",
        "usuario_id": 1632
    },
    {
        "_id": 952,
        "fecha": { "$date" : "2017-05-23T11:55:13Z" },
        "decripcion": "\nFrom oracle documentation page, the need for volatile variable arises to fix memory consistency issues:\n\n\n  Using volatile variables reduces the risk of memory consistency errors, because any write to a volatile variable establishes a happens-before relationship with subsequent reads of that same variable. \n\n\nThis means that changes to a volatile variable are always visible to other threads. It also means that when a thread reads a volatile variable, it sees not just the latest change to the volatile, but also the side effects of the code that led up the change.\n\nAs explained in Peter Parker answer, in absence of volatile modifier, each thread's stack may have their own copy of variable. By making the variable as volatile, memory consistency issues have been fixed. \n\nHave a look at jenkov tutorial page for better understanding. \n\nHave a look at related SE question for some more details on volatile & use cases to use volatile:\n\nDifference between volatile and synchronized in Java\n\nOne practical use case:\n\nYou have many threads, which need to print current time in a particular format for example : java.text.SimpleDateFormat(\"HH-mm-ss\"). Yon can have one class, which converts current time into SimpleDateFormat and updated the variable for every one second. All other threads can simply use this volatile variable to print current time in log files.  \n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Ravindra babu",
        "usuario_id": 1330
    },
    {
        "_id": 953,
        "fecha": { "$date" : "2018-02-06T12:57:06Z" },
        "decripcion": "\nVolatile Variables are light-weight synchronization. When visibility of latest data among all threads is requirement and atomicity can be compromised , in such situations Volatile Variables must be preferred. Read on volatile variables always return most recent write done by any thread since they are neither cached in registers nor in caches where other processors can not see. Volatile is Lock-Free. I use volatile, when scenario meets criteria as mentioned above. \n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Neha Vari",
        "usuario_id": 1633
    },
    {
        "_id": 954,
        "fecha": { "$date" : "2019-05-17T11:00:18Z" },
        "decripcion": "\nvolatile variable is basically used for instant update (flush) in main shared cache line once it updated, so that changes reflected to all worker threads immediately.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Niyaz Ahamad",
        "usuario_id": 1634
    },
    {
        "_id": 955,
        "fecha": { "$date" : "2015-12-24T16:41:21Z" },
        "decripcion": "\nThe     volatile key when used with a variable, will make sure that threads reading this variable will see the same value . Now if you have multiple threads reading and writing to a variable, making the variable volatile will not be enough and data will be corrupted . Image threads have read the same value but each one has done some chages (say incremented a counter) , when writing back to the memory, data integrity is violated . That is why it is necessary to make the varible synchronized (diffrent ways are possible)\n\nIf the changes are done by 1 thread and the others need just to read this value, the volatile will be suitable.\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "Java Main",
        "usuario_id": 1635
    },
    {
        "_id": 956,
        "fecha": { "$date" : "2019-06-04T05:34:46Z" },
        "decripcion": "\nBelow is a very simple code to demonstrate the requirement of volatile for variable which is used to control the Thread execution from other thread (this is one scenario where volatile is required).\n\n// Code to prove importance of 'volatile' when state of one thread is being mutated from another thread.\n// Try running this class with and without 'volatile' for 'state' property of Task class.\npublic class VolatileTest {\n    public static void main(String[] a) throws Exception {\n        Task task = new Task();\n        new Thread(task).start();\n\n        Thread.sleep(500);\n        long stoppedOn = System.nanoTime();\n\n        task.stop(); // -----> do this to stop the thread\n\n        System.out.println(\"Stopping on: \" + stoppedOn);\n    }\n}\n\nclass Task implements Runnable {\n    // Try running with and without 'volatile' here\n    private volatile boolean state = true;\n    private int i = 0;\n\n    public void stop() {\n        state = false;\n    } \n\n    @Override\n    public void run() {\n        while(state) {\n            i++;\n        }\n        System.out.println(i + \"> Stopped on: \" + System.nanoTime());\n    }\n}\n\n\n\nWhen volatile is not used: you'll never see 'Stopped on: xxx' message even after 'Stopping on: xxx', and the program continues to run.\n\nStopping on: 1895303906650500\n\n\nWhen volatile used: you'll see the 'Stopped on: xxx' immediately.\n\nStopping on: 1895285647980000\n324565439> Stopped on: 1895285648087300\n\n\nDemo: https://repl.it/repls/SilverAgonizingObjectcode\n    ",
        "votes": -2,
        "comentarios": [
            {
                "decripcion": "To downvoter: Care to explain why downvote? If this is not  true, at least I'll learn whats wrong. I've added this same comment twice, but don't know who is deleting again and again",
                "fecha": { "$date" : "2019-09-15T10:55:46Z" },
                "usuario": "manikanta",
                "usuario_id": 1636
            },
            {
                "decripcion": "Same is explained here as well: How can you exit a thread reliably using an external condition variable?",
                "fecha": { "$date" : "2019-11-26T04:33:56Z" },
                "usuario": "manikanta",
                "usuario_id": 1636
            }
        ],
        "usuario": "manikanta",
        "usuario_id": 1636
    },
    {
        "_id": 957,
        "fecha": { "$date" : "2018-02-04T19:14:48Z" },
        "decripcion": "\nSee this thread by Sun on why they deprecated Thread.stop().  It goes into detail about why this was a bad method and what should be done to safely stop threads in general.  \n\nThe way they recommend is to use a shared variable as a flag which asks the background thread to stop.  This variable can then be set by a different object requesting the thread terminate.  \n    ",
        "votes": 198,
        "comentarios": [
            {
                "decripcion": "if you check the thread that you have interrupted isAlive() it will return you true and they will continue adding to your current ThreadGroup[], you can see this using Thread.currentThread.getThreadGroup().list(); it will prints all the threads its has and you will see multiple instances of  your thread if you repeat your flow.",
                "fecha": { "$date" : "2011-06-10T14:08:35Z" },
                "usuario": "AZ_",
                "usuario_id": 1638
            },
            {
                "decripcion": "If you are on a PC then its no problem but if you are developing a software for mobile (android i have experienced it) then you will get OutOfMemoryError",
                "fecha": { "$date" : "2011-06-10T14:09:21Z" },
                "usuario": "AZ_",
                "usuario_id": 1638
            },
            {
                "decripcion": "It could/should be noted, that to ensure prompt communication of the stop-request via flag, the variable must be volatile (or access to the variable must be synchronized), as stated in the recommendation.",
                "fecha": { "$date" : "2011-06-18T19:32:21Z" },
                "usuario": "mtsz",
                "usuario_id": 1639
            },
            {
                "decripcion": "That link has been killed at this point.  I was able to find it on archive.org, though: web.archive.org/web/20090202093154/http://java.sun.com/j2se/\u2026",
                "fecha": { "$date" : "2011-09-27T16:38:39Z" },
                "usuario": "Jay Taylor",
                "usuario_id": 1640
            },
            {
                "decripcion": "I use method getConnection() from java.sql.DriverManager. If the connection attemt takes too long I try to kill the corresponding thread by calling Thread.interrupt() but it doesn't influence the thread at all. The Thread.stop() works however, although oracle says it shouldn't work if interrupt() doesn't. I wonder how make it work and avoid using deprecated method.",
                "fecha": { "$date" : "2014-04-24T14:42:16Z" },
                "usuario": "Danny Lo",
                "usuario_id": 1641
            }
        ],
        "usuario": "JaredPar",
        "usuario_id": 1642
    },
    {
        "_id": 958,
        "fecha": { "$date" : "2014-03-26T10:33:22Z" },
        "decripcion": "\nGenerally you don't..\n\nYou ask it to interrupt whatever it is doing using Thread.interrupt() (javadoc link)\n\nA good explanation of why is in the javadoc here  (java technote link)\n    ",
        "votes": 131,
        "comentarios": [
            {
                "decripcion": "@Fredrik What happens to the Thread context when interrupt() method is called? The main question is related to log generation for each new thread.",
                "fecha": { "$date" : "2016-09-06T05:51:28Z" },
                "usuario": "ABcDexter",
                "usuario_id": 1643
            },
            {
                "decripcion": "@ABcDexter The whole point is that interrupt doesn't interrupt anything, it just signals to the code in the thread (or the code being called by the thread) that someone has asked it to interrupt whatever it is doing. The thread is then supposed to nicely stop the processing and return, just like if it was done doing what it should (and at that point, the thread context is probably also discarded). OTOH, had you really force stopped the thread, your question would be really good and the answer undefined.",
                "fecha": { "$date" : "2016-09-06T06:50:35Z" },
                "usuario": "Fredrik",
                "usuario_id": 1644
            }
        ],
        "usuario": "Fredrik",
        "usuario_id": 1644
    },
    {
        "_id": 959,
        "fecha": { "$date" : "2018-05-08T11:50:29Z" },
        "decripcion": "\nIn Java threads are not killed, but the stopping of a thread is done in a cooperative way. The thread is asked to terminate and the thread can then shutdown gracefully.\n\nOften a volatile boolean field is used which the thread periodically checks and terminates when it is set to the corresponding value.\n\nI would not use a boolean to check whether the thread should terminate. If you use volatile as a field modifier, this will work reliable, but if your code becomes more complex, for instead uses other blocking methods inside the while loop, it might happen, that your code will not terminate at all or at least takes longer as you might want.\n\n\n  Certain blocking library methods support interruption.\n\n\nEvery thread has already a boolean flag interrupted status and you should make use of it. It can be implemented like this:\n\npublic void run() {\n   try {\n      while (!interrupted()) {\n         // ...\n      }\n   } catch (InterruptedException consumed)\n      /* Allow thread to exit */\n   }\n}\n\npublic void cancel() { interrupt(); }\n\n\nSource code adapted from Java Concurrency in Practice. Since the cancel() method is public you can let another thread invoke this method as you wanted.\n    ",
        "votes": 64,
        "comentarios": [
            {
                "decripcion": "And what to do if you run untrusted code as a plugin or script? Java has embedded sandbox for untrusted code. And that sandbox is useless, it it allows to work without forceful stop. Imagine you are writing a browser on java. Ability to kill arbitrary page script is priceless.",
                "fecha": { "$date" : "2015-10-25T05:08:16Z" },
                "usuario": "ayvango",
                "usuario_id": 1645
            },
            {
                "decripcion": "@ayvango Then you have to run that script in your own sandbox. The Java sandbox protects the machine from the application, not parts of the application from each other.",
                "fecha": { "$date" : "2016-08-10T10:08:37Z" },
                "usuario": "David Schwartz",
                "usuario_id": 1646
            },
            {
                "decripcion": "@DavidSchwartz do you mean, that I just should use other platform then java?",
                "fecha": { "$date" : "2016-08-16T06:45:37Z" },
                "usuario": "ayvango",
                "usuario_id": 1645
            },
            {
                "decripcion": "@ayvango You can still use the Java sandbox to protect the machine from your application. But if you want to protect parts of your application from other parts of your application, you'll need to choose some tool that can do that.",
                "fecha": { "$date" : "2016-08-16T16:58:06Z" },
                "usuario": "David Schwartz",
                "usuario_id": 1646
            },
            {
                "decripcion": "I tried this but believe that \"cancel()\" is called from a different thread than \"run()\" and \"interrupt()\" is not available on a Runnable Class (Java 8).  I ended up storing the thread handle to \"volatile Thread runningThread\" (thanks for the volatile point) and calling \"runningThread.interrupt()\" in \"cancel()\".",
                "fecha": { "$date" : "2017-12-20T12:03:38Z" },
                "usuario": "Dazed",
                "usuario_id": 1647
            }
        ],
        "usuario": "Konrad Reiche",
        "usuario_id": 1648
    },
    {
        "_id": 960,
        "fecha": { "$date" : "2013-05-11T08:54:09Z" },
        "decripcion": "\nOne way is by setting a class variable and using it as a sentinel.\n\nClass Outer {\n    public static volatile flag = true;\n\n    Outer() {\n        new Test().start();\n    }\n    class Test extends Thread {\n\n        public void run() {\n            while (Outer.flag) {\n                //do stuff here\n            }\n        }\n    }\n\n}\n\n\nSet an external class variable, i.e. flag = true in the above example. Set it to false to 'kill' the thread.\n    ",
        "votes": 21,
        "comentarios": [
            {
                "decripcion": "Just as a side hint: A variable as flag only works, when the thread runs and it is not stuck. Thread.interrupt() should free the thread out of most waiting conditions (wait, sleep, network read, and so on). Therefore you should never never catch the InterruptedException to make this work.",
                "fecha": { "$date" : "2009-03-23T03:49:42Z" },
                "usuario": "ReneS",
                "usuario_id": 1649
            },
            {
                "decripcion": "This isn't reliable; make \"flag\" volatile to ensure it works properly everywhere. The inner class is not static, so the flag should an instance variable. The flag should be cleared in an accessor method so that other operations (like interrupt) can be performed. The name \"flag\" is not descriptive.",
                "fecha": { "$date" : "2009-03-23T04:03:18Z" },
                "usuario": "erickson",
                "usuario_id": 978
            },
            {
                "decripcion": "I don't get the \"while\" thing in the run method. Doesn't this mean that whatever is written in the run method will be being repeated? this is not something we wanted the thread to do in the first place :(",
                "fecha": { "$date" : "2009-10-28T01:14:13Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "+1 doing while (!Thread.currentThread().isInteruppted()) is prefered",
                "fecha": { "$date" : "2010-12-23T13:37:45Z" },
                "usuario": "Toby",
                "usuario_id": 1650
            },
            {
                "decripcion": "Both cases fail, when e.g you open an external process inside the while{// open ext process} and that process is hanged, now neither the thread will be interrupted nor it will reach the end to check on your Boolean condition, and you are left hanging... try it with e.g launch a python console using java.exec and try getting the control back without writing exit, and see if there is a way to kill that process and get out.... there is no way to get out of such situation...",
                "fecha": { "$date" : "2012-10-04T13:38:27Z" },
                "usuario": "Space Rocker",
                "usuario_id": 1651
            }
        ],
        "usuario": "karim79",
        "usuario_id": 1652
    },
    {
        "_id": 961,
        "fecha": { "$date" : "2020-02-11T23:57:14Z" },
        "decripcion": "\nI want to add several observations, based on the comments that have accumulated.\n\n\nThread.stop() will stop a thread if the security manager allows it.\nThread.stop() is dangerous. Having said that, if you are working in a JEE environment and you have no control over the code being called, it may be necessary; see Why is Thread.stop deprecated?\nYou should never stop stop a container worker thread. If you want to run code that tends to hang, (carefully) start a new daemon thread and monitor it, killing if necessary.\nstop() creates a new ThreadDeathError error on the calling thread and then throws that error on the target thread. Therefore, the stack trace is generally worthless.\nIn JRE 6, stop() checks with the security manager and then calls stop1() that calls stop0(). stop0() is native code.\nAs of Java 13 Thread.stop() has not been removed (yet), but Thread.stop(Throwable) was removed in Java 11.  (mailing list, JDK-8204243) \n\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "Steve11235",
        "usuario_id": 1653
    },
    {
        "_id": 962,
        "fecha": { "$date" : "2014-04-23T12:45:15Z" },
        "decripcion": "\nThere is a way how you can do it. But if you had to use it, either you are a bad programmer or you are using a code written by bad programmers. So, you should think about stopping being a bad programmer or stopping using this bad code.\nThis solution is only for situations when THERE IS NO OTHER WAY.\n\nThread f = <A thread to be stopped>\nMethod m = Thread.class.getDeclaredMethod( \"stop0\" , new Class[]{Object.class} );\nm.setAccessible( true );\nm.invoke( f , new ThreadDeath() );\n\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "There are no reasons at all to do this, because it is still possible to call the public Thread.stop even if it is deprecated.",
                "fecha": { "$date" : "2015-10-04T08:44:52Z" },
                "usuario": "Lii",
                "usuario_id": 1654
            },
            {
                "decripcion": "@Lii Thread.stop does the same but also checks access and permissions. Using Thread.stop is rather obvious, and I don't remember the reason why did I use Thread.stop0 instead of that. Maybe Thread.stop didn't work for my special case (Weblogic on Java 6). Or maybe because Thread.stop is deprecated and causes warning.",
                "fecha": { "$date" : "2015-10-07T11:48:57Z" },
                "usuario": "VadimPlatonov",
                "usuario_id": 1655
            },
            {
                "decripcion": "In my scenario this was the only way to stop a endless running thread. For some Reason .stop() did not stop the thread, but stop0() did",
                "fecha": { "$date" : "2017-06-02T08:30:25Z" },
                "usuario": "fiffy",
                "usuario_id": 1656
            }
        ],
        "usuario": "VadimPlatonov",
        "usuario_id": 1655
    },
    {
        "_id": 963,
        "fecha": { "$date" : "2016-02-18T11:59:34Z" },
        "decripcion": "\nI'd vote for Thread.stop().\n\nAs for instance you have a long lasting operation (like a network request).\nSupposedly you are waiting for a response, but it can take time and the user navigated to other UI.\nThis waiting thread is now a) useless b) potential problem because when he will get result, it's completely useless and he will trigger callbacks that can lead to number of errors.\n\nAll of that and he can do response processing that could be CPU intense. And you, as a developer, cannot even stop it, because you can't throw if (Thread.currentThread().isInterrupted()) lines in all code.\n\nSo the inability to forcefully stop a thread it weird.\n    ",
        "votes": 7,
        "comentarios": [
            {
                "decripcion": "If the network operation is already safely abortable, just interrupt the thread. If the network operation is not safely abortable, you couldn't call Thread.stop() safely anyway. You are not voting for Thread.stop(), you are asking for every person who implements every operation that may take a long time to make it safely abortable. And that may well be a good idea, but it has nothing to do with implementing Thread.stop() as the way to request the safe abortion. We already have interrupt for that.",
                "fecha": { "$date" : "2016-08-02T10:49:54Z" },
                "usuario": "David Schwartz",
                "usuario_id": 1646
            },
            {
                "decripcion": "\"So the inability to forcefully stop a thread it weird.\" - ... until you look deeply (as the Java designers have done) and conclude that there are no technically viable solutions that aren't worse than deprecating stop.",
                "fecha": { "$date" : "2020-02-11T23:45:50Z" },
                "usuario": "Stephen C",
                "usuario_id": 886
            }
        ],
        "usuario": "Anfet",
        "usuario_id": 1657
    },
    {
        "_id": 964,
        "fecha": { "$date" : "2013-11-05T16:07:53Z" },
        "decripcion": "\nThe question is rather vague. If you meant \u201chow do I write a program so that a thread stops running when I want it to\u201d, then various other responses should be helpful. But if you meant \u201cI have an emergency with a server I cannot restart right now and I just need a particular thread to die, come what may\u201d, then you need an intervention tool to match monitoring tools like jstack.\n\nFor this purpose I created jkillthread. See its instructions for usage.\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "Thank you! Exactly what I was looking for!",
                "fecha": { "$date" : "2018-11-02T08:49:36Z" },
                "usuario": "Denis Kokorin",
                "usuario_id": 1658
            }
        ],
        "usuario": "Jesse Glick",
        "usuario_id": 1659
    },
    {
        "_id": 965,
        "fecha": { "$date" : "2011-02-20T19:25:03Z" },
        "decripcion": "\nThere is of course the case where you are running some kind of not-completely-trusted code. (I personally have this by allowing uploaded scripts to execute in my Java environment. Yes, there are security alarm bell ringing everywhere, but it's part of the application.) In this unfortunate instance you first of all are merely being hopeful by asking script writers to respect some kind of boolean run/don't-run signal. Your only decent fail safe is to call the stop method on the thread if, say, it runs longer than some timeout.\n\nBut, this is just \"decent\", and not absolute, because the code could catch the ThreadDeath error (or whatever exception you explicitly throw), and not rethrow it like a gentlemanly thread is supposed to do. So, the bottom line is AFAIA there is no absolute fail safe. \n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "AFAIK more and more services are becoming hybrid and use managed environment to execute 3rd party code (plugin, scripts, etc.) which they don't have fully control over the code, it seems unreasonable to completely take thread.stop off the table, since for service engineers, a live-and-serving state can be infinitely better than a non serving state (either due to hanging (which takes away threads), or busy infinite looping (which takes away cores))",
                "fecha": { "$date" : "2018-10-25T18:52:06Z" },
                "usuario": "Weipeng L",
                "usuario_id": 1660
            }
        ],
        "usuario": "mlohbihler",
        "usuario_id": 1661
    },
    {
        "_id": 966,
        "fecha": { "$date" : "2014-08-20T14:37:32Z" },
        "decripcion": "\nThere is no way to gracefully kill a thread.\n\nYou can try to interrupt the thread, one commons strategy is to use a poison pill to message the thread to stop itself\n\npublic class CancelSupport {\n    public static class CommandExecutor implements Runnable {\n            private BlockingQueue<String> queue;\n            public static final String POISON_PILL  = \u201cstopnow\u201d;\n            public CommandExecutor(BlockingQueue<String> queue) {\n                    this.queue=queue;\n            }\n            @Override\n            public void run() {\n                    boolean stop=false;\n                    while(!stop) {\n                            try {\n                                    String command=queue.take();\n                                    if(POISON_PILL.equals(command)) {\n                                            stop=true;\n                                    } else {\n                                            // do command\n                                            System.out.println(command);\n                                    }\n                            } catch (InterruptedException e) {\n                                    stop=true;\n                            }\n                    }\n                    System.out.println(\u201cStopping execution\u201d);\n            }\n\n    }\n\n\n}\n\nBlockingQueue<String> queue=new LinkedBlockingQueue<String>();\nThread t=new Thread(new CommandExecutor(queue));\nqueue.put(\u201chello\u201d);\nqueue.put(\u201cworld\u201d);\nt.start();\nThread.sleep(1000);\nqueue.put(\u201cstopnow\u201d);\n\n\nhttp://anandsekar.github.io/cancel-support-for-threads/\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Anand Rajasekar",
        "usuario_id": 1662
    },
    {
        "_id": 967,
        "fecha": { "$date" : "2018-06-23T23:05:42Z" },
        "decripcion": "\nGenerally you don't kill, stop, or interrupt a thread (or check wheter it is interrupted()), but let it terminate naturally.\n\nIt is simple. You can use any loop together with (volatile) boolean variable inside run() method to control thread's activity. You can also return from active thread to the main thread to stop it.\n\nThis way you gracefully kill a thread :) .\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Wojciech Domalewski",
        "usuario_id": 1663
    },
    {
        "_id": 968,
        "fecha": { "$date" : "2019-03-19T11:41:15Z" },
        "decripcion": "\n'Killing a thread' is not the right phrase to use. Here is one way we can implement graceful completion/exit of the thread on will:\n\nRunnable which I used:\n\nclass TaskThread implements Runnable {\n\n    boolean shouldStop;\n\n    public TaskThread(boolean shouldStop) {\n        this.shouldStop = shouldStop;\n    }\n\n    @Override\n    public void run() {\n\n        System.out.println(\"Thread has started\");\n\n        while (!shouldStop) {\n            // do something\n        }\n\n        System.out.println(\"Thread has ended\");\n\n    }\n\n    public void stop() {\n        shouldStop = true;\n    }\n\n}\n\n\nThe triggering class:\n\npublic class ThreadStop {\n\n    public static void main(String[] args) {\n\n        System.out.println(\"Start\");\n\n        // Start the thread\n        TaskThread task = new TaskThread(false);\n        Thread t = new Thread(task);\n        t.start();\n\n        // Stop the thread\n        task.stop();\n\n        System.out.println(\"End\");\n\n    }\n\n}\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "volatile keyword should be added to shouldStop variable, in case the compiler optimises with thread local storage.",
                "fecha": { "$date" : "2020-06-01T22:20:10Z" },
                "usuario": "Oleksii Kyslytsyn",
                "usuario_id": 1664
            },
            {
                "decripcion": "This doesn't work if \"// do something\" is a blocking task that takes a long time to complete.",
                "fecha": { "$date" : "2020-12-04T16:55:25Z" },
                "usuario": "Robber",
                "usuario_id": 1665
            }
        ],
        "usuario": "Adesh Srivastava",
        "usuario_id": 1666
    },
    {
        "_id": 969,
        "fecha": { "$date" : "2015-02-18T09:32:37Z" },
        "decripcion": "\nAttempts of abrupt thread termination are well-known bad programming practice and evidence of poor application design. All threads in the multithreaded application explicitly and implicitly share the same process state and forced to cooperate with each other to keep it consistent, otherwise your application will be prone to the bugs which will be really hard to diagnose. So, it is a responsibility of developer to provide an assurance of such consistency via careful and clear application design.\n\nThere are two main right solutions for the controlled threads terminations:\n\n\nUse of the shared volatile flag\nUse of the pair of Thread.interrupt() and Thread.interrupted() methods.\n\n\nGood and detailed explanation of the issues related to the abrupt threads termination as well as examples of wrong and right solutions for the controlled threads termination can be found here:\n\nhttps://www.securecoding.cert.org/confluence/display/java/THI05-J.+Do+not+use+Thread.stop%28%29+to+terminate+threads\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "Since programs are no longer written by single developer, killing threads are often necessary. Therefore cannot be considered bad programming. I cannot imagine Linux without kill. Inability to kill threads is Java defect.",
                "fecha": { "$date" : "2017-03-07T15:52:54Z" },
                "usuario": "Pavel Niedoba",
                "usuario_id": 1667
            },
            {
                "decripcion": "Awesome, Mr. Right... What if you have to call some 3rd party library, which you have no control over and which has a buggy timeout and might hang once every 1000-2000 times when being executed? Bad programming practice huh? Well you can't always have access to the code you are using. Anyway, the op is asking how to kill a thread not how to control its flow when designing his own code...",
                "fecha": { "$date" : "2017-05-08T20:46:07Z" },
                "usuario": "Arturas M",
                "usuario_id": 1668
            },
            {
                "decripcion": "The question is what will happen when you kill a thread which has mutex owned or has some memory block allocated, or which should generate some event or data which other thread is waiting for? What will happen with the rest of the logic of your application? You will be always at risk that small and evident problem will be converted into complex  problem which will be hard to reproduce and investigate. Killing the thread is unsafe because it can leave your application in a number of different inconsistent states. Take a look at the information from the link on cert.org.",
                "fecha": { "$date" : "2017-05-09T08:07:59Z" },
                "usuario": "ZarathustrA",
                "usuario_id": 1669
            },
            {
                "decripcion": "We have a controlling thread that on certain conditions may decide that the whole calculation just became pointless.  The many different runnables doing the actual work need to be splattered with some variant of isInterrupted() at any convenient place \u2013 how horrible!  It is so much nicer if the controller causes a ThreadDeath to rise seemingly out of nowhere, cleanly unwinding all synchronized & finally blocks.  Everyone says this is so error prone, but for fairly unrelated Threads, I don't see why.",
                "fecha": { "$date" : "2020-01-17T12:19:30Z" },
                "usuario": "Daniel",
                "usuario_id": 1670
            }
        ],
        "usuario": "ZarathustrA",
        "usuario_id": 1669
    },
    {
        "_id": 970,
        "fecha": { "$date" : "2016-08-04T19:42:20Z" },
        "decripcion": "\nHere are a couple of good reads on the subject:\n\nWhat Do You Do With InterruptedException?\n\nShutting down threads cleanly\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "splashout",
        "usuario_id": 1671
    },
    {
        "_id": 971,
        "fecha": { "$date" : "2017-07-07T10:48:17Z" },
        "decripcion": "\nI didn't get the interrupt to work in Android, so I used this method, works perfectly:\n\nboolean shouldCheckUpdates = true;\n\nprivate void startupCheckForUpdatesEveryFewSeconds() {\n    Thread t = new Thread(new CheckUpdates());\n    t.start();\n}\n\nprivate class CheckUpdates implements Runnable{\n    public void run() {\n        while (shouldCheckUpdates){\n            //Thread sleep 3 seconds\n            System.out.println(\"Do your thing here\");\n        }\n    }\n}\n\n public void stop(){\n        shouldCheckUpdates = false;\n }\n\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "volatile keyword should be added to shouldCheckUpdates, incase the compiler optimises with thread local storage.",
                "fecha": { "$date" : "2018-04-19T05:26:59Z" },
                "usuario": "clinux",
                "usuario_id": 1672
            }
        ],
        "usuario": "Mindborg",
        "usuario_id": 1673
    },
    {
        "_id": 972,
        "fecha": { "$date" : "2020-05-21T20:56:57Z" },
        "decripcion": "\nThread.stop is deprecated so how do we stop a thread in java ?\n\nAlways use interrupt method and future to request cancellation    \n\n\nWhen the task responds to interrupt signal, for example, blocking queue take method.\n\n\nCallable < String > callable = new Callable < String > () {\n    @Override\n    public String call() throws Exception {\n        String result = \"\";\n        try {\n            //assume below take method is blocked as no work is produced.\n            result = queue.take();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        return result;\n    }\n};\nFuture future = executor.submit(callable);\ntry {\n    String result = future.get(5, TimeUnit.SECONDS);\n} catch (TimeoutException e) {\n    logger.error(\"Thread timedout!\");\n    return \"\";\n} finally {\n    //this will call interrupt on queue which will abort the operation.\n    //if it completes before time out, it has no side effects\n    future.cancel(true);\n}\n\n\n\n\nWhen the task does not respond to interrupt signal.Suppose the task performs socket I/O which does not respond to interrupt signal and thus using above approach will not abort the task, future would time out but the cancel in finally block will have no effect, thread will keep on listening to socket. We can close the socket or call close method on connection if implemented by pool.\n\n\npublic interface CustomCallable < T > extends Callable < T > {\n    void cancel();\n    RunnableFuture < T > newTask();\n}\n\npublic class CustomExecutorPool extends ThreadPoolExecutor {\n    protected < T > RunnableFuture < T > newTaskFor(Callable < T > callable) {\n        if (callable instanceof CancellableTask)\n            return ((CancellableTask < T > ) callable).newTask();\n        else\n            return super.newTaskFor(callable);\n    }\n}\n\npublic abstract class UnblockingIOTask < T > implements CustomCallable < T > {\n    public synchronized void cancel() {\n        try {\n            obj.close();\n        } catch (IOException e) {\n            logger.error(\"io exception\", e);\n        }\n    }\n\n    public RunnableFuture < T > newTask() {\n        return new FutureTask < T > (this) {\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                try {\n                    this.cancel();\n                } finally {\n                    return super.cancel(mayInterruptIfRunning);\n                }\n            }\n\n        };\n    }\n}\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Gautam Tadigoppula",
        "usuario_id": 1674
    },
    {
        "_id": 973,
        "fecha": { "$date" : "2010-11-24T21:09:43Z" },
        "decripcion": "\nYou have to create an STA thread that pumps a message loop.  That's the only hospitable environment for an ActiveX component like WebBrowser.  You won't get the DocumentCompleted event otherwise.  Some sample code:\n\nprivate void runBrowserThread(Uri url) {\n    var th = new Thread(() => {\n        var br = new WebBrowser();\n        br.DocumentCompleted += browser_DocumentCompleted;\n        br.Navigate(url);\n        Application.Run();\n    });\n    th.SetApartmentState(ApartmentState.STA);\n    th.Start();\n}\n\nvoid browser_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e) {\n    var br = sender as WebBrowser;\n    if (br.Url == e.Url) {\n        Console.WriteLine(\"Natigated to {0}\", e.Url);\n        Application.ExitThread();   // Stops the thread\n    }\n}\n\n    ",
        "votes": 156,
        "comentarios": [
            {
                "decripcion": "Yes! Just add System.Windows.Forms. Saved my day, too. Thanks",
                "fecha": { "$date" : "2012-08-07T15:31:51Z" },
                "usuario": "zee",
                "usuario_id": 1679
            },
            {
                "decripcion": "I'm trying to adapt this code to my situation. I have to keep the WebBrowser object alive (to save state/cookies etc.) and perform multiple Navigate() calls over time. But I'm not sure where to place my Application.Run() call, becuz it blocks further code from executing. Any clues?",
                "fecha": { "$date" : "2014-02-14T06:16:23Z" },
                "usuario": "dotNET",
                "usuario_id": 1680
            },
            {
                "decripcion": "You can call Application.Exit(); to let Application.Run() return.",
                "fecha": { "$date" : "2014-12-02T08:04:10Z" },
                "usuario": "Mike de Klerk",
                "usuario_id": 1681
            }
        ],
        "usuario": "Hans Passant",
        "usuario_id": 1682
    },
    {
        "_id": 974,
        "fecha": { "$date" : "2017-05-23T12:34:50Z" },
        "decripcion": "\nHere is how to organize a message loop on a non-UI thread, to run asynchronous tasks like WebBrowser automation. It uses async/await to provide the convenient linear code flow and loads a set of web pages in a loop. The code is a ready-to-run console app which is partially based on this excellent post.\n\nRelated answers:\n\n\nhttps://stackoverflow.com/a/22262976/1768303 \nhttps://stackoverflow.com/a/21775343/1768303\n\n\n\n\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace ConsoleApplicationWebBrowser\n{\n    // by Noseratio - https://stackoverflow.com/users/1768303/noseratio\n    class Program\n    {\n        // Entry Point of the console app\n        static void Main(string[] args)\n        {\n            try\n            {\n                // download each page and dump the content\n                var task = MessageLoopWorker.Run(DoWorkAsync,\n                    \"http://www.example.com\", \"http://www.example.net\", \"http://www.example.org\");\n                task.Wait();\n                Console.WriteLine(\"DoWorkAsync completed.\");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"DoWorkAsync failed: \" + ex.Message);\n            }\n\n            Console.WriteLine(\"Press Enter to exit.\");\n            Console.ReadLine();\n        }\n\n        // navigate WebBrowser to the list of urls in a loop\n        static async Task<object> DoWorkAsync(object[] args)\n        {\n            Console.WriteLine(\"Start working.\");\n\n            using (var wb = new WebBrowser())\n            {\n                wb.ScriptErrorsSuppressed = true;\n\n                TaskCompletionSource<bool> tcs = null;\n                WebBrowserDocumentCompletedEventHandler documentCompletedHandler = (s, e) =>\n                    tcs.TrySetResult(true);\n\n                // navigate to each URL in the list\n                foreach (var url in args)\n                {\n                    tcs = new TaskCompletionSource<bool>();\n                    wb.DocumentCompleted += documentCompletedHandler;\n                    try\n                    {\n                        wb.Navigate(url.ToString());\n                        // await for DocumentCompleted\n                        await tcs.Task;\n                    }\n                    finally\n                    {\n                        wb.DocumentCompleted -= documentCompletedHandler;\n                    }\n                    // the DOM is ready\n                    Console.WriteLine(url.ToString());\n                    Console.WriteLine(wb.Document.Body.OuterHtml);\n                }\n            }\n\n            Console.WriteLine(\"End working.\");\n            return null;\n        }\n\n    }\n\n    // a helper class to start the message loop and execute an asynchronous task\n    public static class MessageLoopWorker\n    {\n        public static async Task<object> Run(Func<object[], Task<object>> worker, params object[] args)\n        {\n            var tcs = new TaskCompletionSource<object>();\n\n            var thread = new Thread(() =>\n            {\n                EventHandler idleHandler = null;\n\n                idleHandler = async (s, e) =>\n                {\n                    // handle Application.Idle just once\n                    Application.Idle -= idleHandler;\n\n                    // return to the message loop\n                    await Task.Yield();\n\n                    // and continue asynchronously\n                    // propogate the result or exception\n                    try\n                    {\n                        var result = await worker(args);\n                        tcs.SetResult(result);\n                    }\n                    catch (Exception ex)\n                    {\n                        tcs.SetException(ex);\n                    }\n\n                    // signal to exit the message loop\n                    // Application.Run will exit at this point\n                    Application.ExitThread();\n                };\n\n                // handle Application.Idle just once\n                // to make sure we're inside the message loop\n                // and SynchronizationContext has been correctly installed\n                Application.Idle += idleHandler;\n                Application.Run();\n            });\n\n            // set STA model for the new thread\n            thread.SetApartmentState(ApartmentState.STA);\n\n            // start the thread and await for the task\n            thread.Start();\n            try\n            {\n                return await tcs.Task;\n            }\n            finally\n            {\n                thread.Join();\n            }\n        }\n    }\n}\n\n    ",
        "votes": 26,
        "comentarios": [
            {
                "decripcion": "Thanks for that brilliant and informative answer! It's exactly what I was looking for. However you seem to have (intentionally?) misplaced the Dispose() statement.",
                "fecha": { "$date" : "2014-03-15T15:25:59Z" },
                "usuario": "wodzu",
                "usuario_id": 1683
            },
            {
                "decripcion": "@Pawe\u0142, you're right, that code did not even compile :) I think pasted a wrong version, now fixed. Thanks for spotting this. You may want to check a more generic approach: stackoverflow.com/a/22262976/1768303",
                "fecha": { "$date" : "2014-03-16T11:47:00Z" },
                "usuario": "noseratio",
                "usuario_id": 1684
            },
            {
                "decripcion": "I tried to run this code, however it gets stuck on task.Wait();. I am doing something wrong ?",
                "fecha": { "$date" : "2016-02-21T03:26:46Z" },
                "usuario": "0014",
                "usuario_id": 1685
            },
            {
                "decripcion": "Hi, maybe you could help me with this one: stackoverflow.com/questions/41533997/\u2026 - the method works well, but if Form was instantiated before the MessageLoopWorker, it stops working.",
                "fecha": { "$date" : "2017-01-08T16:21:14Z" },
                "usuario": "Alex Netkachov",
                "usuario_id": 1686
            }
        ],
        "usuario": "noseratio",
        "usuario_id": 1684
    },
    {
        "_id": 975,
        "fecha": { "$date" : "2017-05-23T12:18:21Z" },
        "decripcion": "\nFrom my experience in the past the webbrowser does not like operating outside of the main application thread. \n\nTry using httpwebrequests instead, you can set them as asynchronous and create a handler for the response to know when it is succesfull:\n\nhow-to-use-httpwebrequest-net-asynchronously\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "My problem with that is this. The Uri being clicked required the site to be logged in. I can't achieve this with WebRequest. By using the WebBrowser it uses the IE cache already, so the sites logged in. Is there a way around that? The links involve facebook. So can I log into facebook and click the link with webwrequest?",
                "fecha": { "$date" : "2010-11-24T18:28:35Z" },
                "usuario": "Art W",
                "usuario_id": 1687
            },
            {
                "decripcion": "@ArtW I know this is an old comment, but people can probably solve that by setting webRequest.Credentials = CredentialsCache.DefaultCredentials;",
                "fecha": { "$date" : "2018-11-28T20:02:57Z" },
                "usuario": "vapcguy",
                "usuario_id": 1065
            },
            {
                "decripcion": "@vapcguy If it's an API then yes, but if it's a website with HTML elements for logging in then it'll need to use IE cookies or cache, otherwise the client doesn't know what to do with the Credentials object property and how to fill the HTML.",
                "fecha": { "$date" : "2020-01-02T16:57:32Z" },
                "usuario": "ColinM",
                "usuario_id": 1688
            },
            {
                "decripcion": "@ColinM The context this whole page is talking about is using the HttpWebRequest object and C# .NET, not simple HTML and form elements being posted, like you might do with JavaScript/AJAX. But regardless, you have a receiver. And for log-on you should be using Windows Authentication and IIS handles this automatically, anyway. If you need to test them manually you can use WindowsIdentity.GetCurrent().Name after implementing impersonation and test it against an AD search, if you like. Not sure how cookies and cache would be used for any of that.",
                "fecha": { "$date" : "2020-01-06T07:54:25Z" },
                "usuario": "vapcguy",
                "usuario_id": 1065
            },
            {
                "decripcion": "@vapcguy The question is talking about WebBrowser which would indicate that HTML pages are being loaded, OP has even said that WebRequest won't achieve what he wants, therefore if a website expects HTML input for login then setting the Credentials object won't work. Additionally, as OP says, the sites include Facebook; Windows authentication will not work on this.",
                "fecha": { "$date" : "2020-01-06T09:16:11Z" },
                "usuario": "ColinM",
                "usuario_id": 1688
            }
        ],
        "usuario": "barc0de",
        "usuario_id": 1689
    },
    {
        "_id": 976,
        "fecha": { "$date" : "2017-11-01T07:20:59Z" },
        "decripcion": "\nA simple solution at which the simultaneous operation of several WebBrowsers occurs\n\n\nCreate a new Windows Forms application\nPlace the button named\nbutton1\nPlace the text box named textBox1\nSet properties of text\nfield: Multiline true and ScrollBars Both\nWrite the following\nbutton1 click handler:\n\ntextBox1.Clear();\ntextBox1.AppendText(DateTime.Now.ToString() + Environment.NewLine);\nint completed_count = 0;\nint count = 10;\nfor (int i = 0; i < count; i++)\n{\n    int tmp = i;\n    this.BeginInvoke(new Action(() =>\n    {\n        var wb = new WebBrowser();\n        wb.ScriptErrorsSuppressed = true;\n        wb.DocumentCompleted += (cur_sender, cur_e) =>\n        {\n            var cur_wb = cur_sender as WebBrowser;\n            if (cur_wb.Url == cur_e.Url)\n            {\n                textBox1.AppendText(\"Task \" + tmp + \", navigated to \" + cur_e.Url + Environment.NewLine);\n                completed_count++;\n            }\n        };\n        wb.Navigate(\"https://stackoverflow.com/questions/4269800/webbrowser-control-in-a-new-thread\");\n    }\n    ));\n}\n\nwhile (completed_count != count)\n{\n    Application.DoEvents();\n    Thread.Sleep(10);\n}\ntextBox1.AppendText(\"All completed\" + Environment.NewLine);\n\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Ramil Shavaleev",
        "usuario_id": 1690
    },
    {
        "_id": 977,
        "fecha": { "$date" : "2018-09-25T18:04:43Z" },
        "decripcion": "\nMongoDB 2.2's new $elemMatch projection operator provides another way to alter the returned document to contain only the first matched shapes element:\n\n\n\ndb.test.find(\n    {\"shapes.color\": \"red\"}, \n    {_id: 0, shapes: {$elemMatch: {color: \"red\"}}});\n\n\nReturns:\n\n{\"shapes\" : [{\"shape\": \"circle\", \"color\": \"red\"}]}\n\n\nIn 2.2 you can also do this using the $ projection operator, where the $ in a projection object field name represents the index of the field's first matching array element from the query.  The following returns the same results as above:\n\ndb.test.find({\"shapes.color\": \"red\"}, {_id: 0, 'shapes.$': 1});\n\n\nMongoDB 3.2 Update\n\nStarting with the 3.2 release, you can use the new $filter aggregation operator to filter an array during projection, which has the benefit of including all matches, instead of just the first one.\n\ndb.test.aggregate([\n    // Get just the docs that contain a shapes element where color is 'red'\n    {$match: {'shapes.color': 'red'}},\n    {$project: {\n        shapes: {$filter: {\n            input: '$shapes',\n            as: 'shape',\n            cond: {$eq: ['$$shape.color', 'red']}\n        }},\n        _id: 0\n    }}\n])\n\n\nResults:\n\n[ \n    {\n        \"shapes\" : [ \n            {\n                \"shape\" : \"circle\",\n                \"color\" : \"red\"\n            }\n        ]\n    }\n]\n\n    ",
        "votes": 472,
        "comentarios": [
            {
                "decripcion": "any solution if I want it to return every elements that matches it instead of just the first?",
                "fecha": { "$date" : "2013-12-25T08:12:53Z" },
                "usuario": "Steve Ng",
                "usuario_id": 1691
            },
            {
                "decripcion": "I'm afraid I am using Mongo 3.0.X :-(",
                "fecha": { "$date" : "2016-01-10T20:33:49Z" },
                "usuario": "charliebrownie",
                "usuario_id": 1692
            },
            {
                "decripcion": "@charliebrownie Then use one of the other answers that use aggregate.",
                "fecha": { "$date" : "2016-01-10T21:14:50Z" },
                "usuario": "JohnnyHK",
                "usuario_id": 672
            },
            {
                "decripcion": "this query only return the array \"shapes\" and it won't return other fields. Anyone knows how to return other fields also?",
                "fecha": { "$date" : "2016-07-29T00:24:45Z" },
                "usuario": "Mark Thien",
                "usuario_id": 1693
            },
            {
                "decripcion": "This also works: db.test.find({}, {shapes: {$elemMatch: {color: \"red\"}}});",
                "fecha": { "$date" : "2017-07-14T19:15:07Z" },
                "usuario": "Paul",
                "usuario_id": 930
            }
        ],
        "usuario": "JohnnyHK",
        "usuario_id": 672
    },
    {
        "_id": 978,
        "fecha": { "$date" : "2015-01-28T08:41:36Z" },
        "decripcion": "\nThe new Aggregation Framework in MongoDB 2.2+ provides an alternative to Map/Reduce.  The $unwind operator can be used to separate your shapes array into a stream of documents that can be matched:\n\ndb.test.aggregate(\n  // Start with a $match pipeline which can take advantage of an index and limit documents processed\n  { $match : {\n     \"shapes.color\": \"red\"\n  }},\n  { $unwind : \"$shapes\" },\n  { $match : {\n     \"shapes.color\": \"red\"\n  }}\n)\n\n\nResults in:\n\n{\n    \"result\" : [\n        {\n            \"_id\" : ObjectId(\"504425059b7c9fa7ec92beec\"),\n            \"shapes\" : {\n                \"shape\" : \"circle\",\n                \"color\" : \"red\"\n            }\n        }\n    ],\n    \"ok\" : 1\n}\n\n    ",
        "votes": 107,
        "comentarios": [
            {
                "decripcion": "@JohnnyHK: In this case, $elemMatch is another option.  I actually got here by way of a Google Group question where $elemMatch wouldn't work because it only returns the first match per document.",
                "fecha": { "$date" : "2012-09-03T04:24:14Z" },
                "usuario": "Stennie",
                "usuario_id": 1694
            },
            {
                "decripcion": "Thanks, I wasn't aware of that limitation so that's good to know.  Sorry for deleting my comment you're responding to, I decided to post another answer instead and didn't want to confuse people.",
                "fecha": { "$date" : "2012-09-03T04:35:59Z" },
                "usuario": "JohnnyHK",
                "usuario_id": 672
            },
            {
                "decripcion": "@JohnnyHK: No worries, there are now three useful answers for the question ;-)",
                "fecha": { "$date" : "2012-09-03T04:41:44Z" },
                "usuario": "Stennie",
                "usuario_id": 1694
            },
            {
                "decripcion": "For other searchers, in addition to this I also tried adding { $project : { shapes : 1 } } - which seemed to work and would be helpful if the enclosing documents were large and you just wanted to view the shapes key values.",
                "fecha": { "$date" : "2014-12-04T08:23:15Z" },
                "usuario": "user1063287",
                "usuario_id": 1695
            },
            {
                "decripcion": "@calmbird I updated the example to include an initial $match stage. If you're interested in a more efficient feature suggestion I would watch/upvote SERVER-6612: Support projecting multiple array values in a projection like the $elemMatch projection specifier in the MongoDB issue tracker.",
                "fecha": { "$date" : "2015-01-28T08:52:56Z" },
                "usuario": "Stennie",
                "usuario_id": 1694
            }
        ],
        "usuario": "Stennie",
        "usuario_id": 1694
    },
    {
        "_id": 979,
        "fecha": { "$date" : "2016-07-19T18:42:45Z" },
        "decripcion": "\n\n  Caution: This answer provides a solution that was relevant at that time, before the new features of MongoDB 2.2 and up were introduced. See the other answers if you are using a more recent version of MongoDB.\n\n\nThe field selector parameter is limited to complete properties. It cannot be used to select part of an array, only the entire array. I tried using the $ positional operator, but that didn't work.\n\nThe easiest way is to just filter the shapes in the client.\n\nIf you really need the correct output directly from MongoDB, you can use a map-reduce to filter the shapes.\n\nfunction map() {\n  filteredShapes = [];\n\n  this.shapes.forEach(function (s) {\n    if (s.color === \"red\") {\n      filteredShapes.push(s);\n    }\n  });\n\n  emit(this._id, { shapes: filteredShapes });\n}\n\nfunction reduce(key, values) {\n  return values[0];\n}\n\nres = db.test.mapReduce(map, reduce, { query: { \"shapes.color\": \"red\" } })\n\ndb[res.result].find()\n\n    ",
        "votes": 32,
        "comentarios": [],
        "usuario": "Niels van der Rest",
        "usuario_id": 1696
    },
    {
        "_id": 980,
        "fecha": { "$date" : "2014-06-04T08:31:35Z" },
        "decripcion": "\nAnother interesing way is to use $redact, which is one of the new aggregation features of MongoDB 2.6. If you are using 2.6, you don't need an $unwind which might cause you performance problems if you have large arrays. \n\ndb.test.aggregate([\n    { $match: { \n         shapes: { $elemMatch: {color: \"red\"} } \n    }},\n    { $redact : {\n         $cond: {\n             if: { $or : [{ $eq: [\"$color\",\"red\"] }, { $not : \"$color\" }]},\n             then: \"$$DESCEND\",\n             else: \"$$PRUNE\"\n         }\n    }}]);\n\n\n$redact \"restricts the contents of the documents based on information stored in the documents themselves\". So it will run only inside of the document. It basically scans your document top to the bottom, and checks if it matches with your if condition which is in $cond, if there is match it will either keep the content($$DESCEND) or remove($$PRUNE).\n\nIn the example  above, first $match returns the whole shapes array, and $redact strips it down to the expected result. \n\nNote that {$not:\"$color\"} is necessary, because it will scan the top document as well, and if $redact does not find a color field on the top level this will return false that might strip the whole document which we don't want. \n    ",
        "votes": 31,
        "comentarios": [
            {
                "decripcion": "perfect answer. As you mentioned $unwind will consume lot of RAM. So this will be better when compared.",
                "fecha": { "$date" : "2015-04-21T11:21:56Z" },
                "usuario": "manojpt",
                "usuario_id": 1697
            },
            {
                "decripcion": "I have a doubt. In the example, \"shapes\" is an array. Will \"$redact\"  scan all the objects in the \"shapes\" array ?? How this will be good with respect to performance??",
                "fecha": { "$date" : "2015-04-23T08:13:13Z" },
                "usuario": "manojpt",
                "usuario_id": 1697
            },
            {
                "decripcion": "not all of it, but the result of your first match. That is the reason why you put $match as your first aggregate stage",
                "fecha": { "$date" : "2015-04-23T16:36:17Z" },
                "usuario": "anvarik",
                "usuario_id": 1698
            },
            {
                "decripcion": "okkk.. if an index created on \"color\" field, even then it will scan all the objects in the \"shapes\" array??? Which could be the efficient way of matching multiple objects in an array???",
                "fecha": { "$date" : "2015-04-24T04:47:39Z" },
                "usuario": "manojpt",
                "usuario_id": 1697
            },
            {
                "decripcion": "Brilliant! I do not understand how $eq works here. I left it off originally and this didn't work for me. Somehow, it looks in the array of shapes to find the match, but the query never specifies which array to look in. Like, if the documents had shapes and, for example, sizes; would $eq look in both arrays for matches? Is $redact just looking for anything within the document that matches the 'if' condition?",
                "fecha": { "$date" : "2015-12-30T14:46:36Z" },
                "usuario": "Onosa",
                "usuario_id": 1699
            }
        ],
        "usuario": "anvarik",
        "usuario_id": 1698
    },
    {
        "_id": 981,
        "fecha": { "$date" : "2014-09-18T09:14:37Z" },
        "decripcion": "\nBetter you can query in matching array element using $slice is it helpful to returning the significant object in an array.\n\ndb.test.find({\"shapes.color\" : \"blue\"}, {\"shapes.$\" : 1})\n\n\n$slice is helpful when you know the index of the element, but sometimes you want\nwhichever array element matched your criteria. You can return the matching element\nwith the $ operator.\n    ",
        "votes": 27,
        "comentarios": [],
        "usuario": "Narendran",
        "usuario_id": 1700
    },
    {
        "_id": 982,
        "fecha": { "$date" : "2016-12-07T06:25:02Z" },
        "decripcion": "\n db.getCollection('aj').find({\"shapes.color\":\"red\"},{\"shapes.$\":1})\n\n\nOUTPUTS\n\n{\n\n   \"shapes\" : [ \n       {\n           \"shape\" : \"circle\",\n           \"color\" : \"red\"\n       }\n   ]\n}\n\n    ",
        "votes": 20,
        "comentarios": [
            {
                "decripcion": "thanks for the query, but it is just returning the first one even though the condition is matching for multiple elements in the array, any suggestion?",
                "fecha": { "$date" : "2021-03-11T08:12:03Z" },
                "usuario": "Deepam Gupta",
                "usuario_id": 1701
            }
        ],
        "usuario": "Viral Patel",
        "usuario_id": 1702
    },
    {
        "_id": 983,
        "fecha": { "$date" : "2014-01-31T08:19:11Z" },
        "decripcion": "\nThe syntax for find in mongodb is \n\n    db.<collection name>.find(query, projection);\n\n\nand the second query that you have written, that is\n\n    db.test.find(\n    {shapes: {\"$elemMatch\": {color: \"red\"}}}, \n    {\"shapes.color\":1})\n\n\nin this you have used the $elemMatch operator in query part, whereas if you use this operator in the projection part then you will get the desired result. You can write down your query as \n\n     db.users.find(\n     {\"shapes.color\":\"red\"},\n     {_id:0, shapes: {$elemMatch : {color: \"red\"}}})\n\n\nThis will give you the desired result.\n    ",
        "votes": 14,
        "comentarios": [
            {
                "decripcion": "This works for me. However, It appears that \"shapes.color\":\"red\" in the query parameter (the first parameter of the find method) is not necessary. You can replace it with {} and get the same results.",
                "fecha": { "$date" : "2014-05-09T20:35:55Z" },
                "usuario": "Erik Olson",
                "usuario_id": 1703
            },
            {
                "decripcion": "@ErikOlson Your suggestion is right in the above case, where we need to find all the document that with red color and to apply the projection on them only. But let's say if somebody requires to find out all the document that have color blue but it should return only those element of that shapes array that have color red. In this case the above query can be referenced by somebody else also..",
                "fecha": { "$date" : "2014-05-11T09:22:11Z" },
                "usuario": "Vicky",
                "usuario_id": 1704
            },
            {
                "decripcion": "This seems to be the easiest, but I can't make it work it. It only returns the first matching subdocument.",
                "fecha": { "$date" : "2015-08-29T23:05:30Z" },
                "usuario": "newman",
                "usuario_id": 1705
            },
            {
                "decripcion": "populate is not working on this why?",
                "fecha": { "$date" : "2021-02-17T07:49:57Z" },
                "usuario": "Mahmood Hussain",
                "usuario_id": 1706
            },
            {
                "decripcion": "@MahmoodHussain This answer is almost 7 years old, so may be version issue. Can you check latest documentation.   I will try to run similar on latest version and share my findings. Can you explain what exactly you are trying to achieve ?",
                "fecha": { "$date" : "2021-02-17T15:59:17Z" },
                "usuario": "Vicky",
                "usuario_id": 1704
            }
        ],
        "usuario": "Vicky",
        "usuario_id": 1704
    },
    {
        "_id": 984,
        "fecha": { "$date" : "2017-05-23T11:54:50Z" },
        "decripcion": "\nThanks to JohnnyHK.\n\nHere I just want to add some more complex usage.\n\n// Document \n{ \n\"_id\" : 1\n\"shapes\" : [\n  {\"shape\" : \"square\",  \"color\" : \"red\"},\n  {\"shape\" : \"circle\",  \"color\" : \"green\"}\n  ] \n} \n\n{ \n\"_id\" : 2\n\"shapes\" : [\n  {\"shape\" : \"square\",  \"color\" : \"red\"},\n  {\"shape\" : \"circle\",  \"color\" : \"green\"}\n  ] \n} \n\n\n// The Query   \ndb.contents.find({\n    \"_id\" : ObjectId(1),\n    \"shapes.color\":\"red\"\n},{\n    \"_id\": 0,\n    \"shapes\" :{\n       \"$elemMatch\":{\n           \"color\" : \"red\"\n       } \n    }\n}) \n\n\n//And the Result\n\n{\"shapes\":[\n    {\n       \"shape\" : \"square\",\n       \"color\" : \"red\"\n    }\n]}\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Eddy",
        "usuario_id": 1707
    },
    {
        "_id": 985,
        "fecha": { "$date" : "2016-11-10T07:50:37Z" },
        "decripcion": "\nYou just need to run query\n\ndb.test.find(\n{\"shapes.color\": \"red\"}, \n{shapes: {$elemMatch: {color: \"red\"}}});\n\n\noutput of this query is\n\n{\n    \"_id\" : ObjectId(\"562e7c594c12942f08fe4192\"),\n    \"shapes\" : [ \n        {\"shape\" : \"circle\", \"color\" : \"red\"}\n    ]\n}\n\n\nas you expected it'll gives the exact field from array that matches color:'red'.\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "Vaibhav Patil",
        "usuario_id": 1708
    },
    {
        "_id": 986,
        "fecha": { "$date" : "2021-02-04T17:02:09Z" },
        "decripcion": "\nAlong with  $project it will be more appropriate  other wise matching elements will be clubbed together with other elements in document.\ndb.test.aggregate(\n  { \"$unwind\" : \"$shapes\" },\n  { \"$match\" : { \"shapes.color\": \"red\" } },\n  { \n    \"$project\": {\n      \"_id\":1,\n      \"item\":1\n    }\n  }\n)\n\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "can you pls describe that this accomplishes with an input and output set?",
                "fecha": { "$date" : "2015-11-24T17:13:18Z" },
                "usuario": "Alexander Mills",
                "usuario_id": 1709
            }
        ],
        "usuario": "shakthydoss",
        "usuario_id": 1710
    },
    {
        "_id": 987,
        "fecha": { "$date" : "2018-10-25T08:04:05Z" },
        "decripcion": "\ndb.test.find( {\"shapes.color\": \"red\"}, {_id: 0})\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "Welcome to Stack Overflow! Thank you for the code snippet, which might provide some limited, immediate help. A proper explanation would greatly improve its long-term value by describing why this is a good solution to the problem, and would make it more useful to future readers with other similar questions. Please edit your answer to add some explanation, including the assumptions you've made.",
                "fecha": { "$date" : "2018-10-25T15:06:43Z" },
                "usuario": "sepehr",
                "usuario_id": 1711
            }
        ],
        "usuario": "Poonam Agrawal",
        "usuario_id": 1712
    },
    {
        "_id": 988,
        "fecha": { "$date" : "2020-02-28T07:15:43Z" },
        "decripcion": "\nLikewise you can find for the multiple\n\ndb.getCollection('localData').aggregate([\n    // Get just the docs that contain a shapes element where color is 'red'\n  {$match: {'shapes.color': {$in : ['red','yellow'] } }},\n  {$project: {\n     shapes: {$filter: {\n        input: '$shapes',\n        as: 'shape',\n        cond: {$in: ['$$shape.color', ['red', 'yellow']]}\n     }}\n  }}\n])\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "This answer is indeed the prefered 4.x way:  $match to cut down the space, then $filter to keep what you want, overwriting the input field (use output of $filter on field shapes to $project back on to shapes.   Style note:  best not to use the field name as the as argument because that can lead to confusion later with $$shape and $shape.  I prefer zz as the as field because it really stands out.",
                "fecha": { "$date" : "2020-03-03T15:52:54Z" },
                "usuario": "Buzz Moschetti",
                "usuario_id": 1713
            }
        ],
        "usuario": "ashishSober",
        "usuario_id": 1714
    },
    {
        "_id": 989,
        "fecha": { "$date" : "2020-02-09T07:43:21Z" },
        "decripcion": "\nUse aggregation function and $project to get specific object field in document\n\ndb.getCollection('geolocations').aggregate([ { $project : { geolocation : 1} } ])\n\n\nresult:\n\n{\n    \"_id\" : ObjectId(\"5e3ee15968879c0d5942464b\"),\n    \"geolocation\" : [ \n        {\n            \"_id\" : ObjectId(\"5e3ee3ee68879c0d5942465e\"),\n            \"latitude\" : 12.9718313,\n            \"longitude\" : 77.593551,\n            \"country\" : \"India\",\n            \"city\" : \"Chennai\",\n            \"zipcode\" : \"560001\",\n            \"streetName\" : \"Sidney Road\",\n            \"countryCode\" : \"in\",\n            \"ip\" : \"116.75.115.248\",\n            \"date\" : ISODate(\"2020-02-08T16:38:06.584Z\")\n        }\n    ]\n}\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "KARTHIKEYAN.A",
        "usuario_id": 1715
    },
    {
        "_id": 990,
        "fecha": { "$date" : "2020-04-16T10:07:45Z" },
        "decripcion": "\nAlthough the question was asked 9.6 years ago, this has been of immense help to numerous people, me being one of them. Thank you everyone for all your queries, hints and answers. Picking up from one of the answers here.. I found that the following method can also be used to project other fields in the parent document.This may be helpful to someone. \n\nFor the following document, the need was to find out if an employee (emp #7839) has his leave history set for the year 2020. Leave history is implemented as an embedded document within the parent Employee document. \n\ndb.employees.find( {\"leave_history.calendar_year\": 2020}, \n    {leave_history: {$elemMatch: {calendar_year: 2020}},empno:true,ename:true}).pretty()\n\n\n{\n        \"_id\" : ObjectId(\"5e907ad23997181dde06e8fc\"),\n        \"empno\" : 7839,\n        \"ename\" : \"KING\",\n        \"mgrno\" : 0,\n        \"hiredate\" : \"1990-05-09\",\n        \"sal\" : 100000,\n        \"deptno\" : {\n                \"_id\" : ObjectId(\"5e9065f53997181dde06e8f8\")\n        },\n        \"username\" : \"none\",\n        \"password\" : \"none\",\n        \"is_admin\" : \"N\",\n        \"is_approver\" : \"Y\",\n        \"is_manager\" : \"Y\",\n        \"user_role\" : \"AP\",\n        \"admin_approval_received\" : \"Y\",\n        \"active\" : \"Y\",\n        \"created_date\" : \"2020-04-10\",\n        \"updated_date\" : \"2020-04-10\",\n        \"application_usage_log\" : [\n                {\n                        \"logged_in_as\" : \"AP\",\n                        \"log_in_date\" : \"2020-04-10\"\n                },\n                {\n                        \"logged_in_as\" : \"EM\",\n                        \"log_in_date\" : ISODate(\"2020-04-16T07:28:11.959Z\")\n                }\n        ],\n        \"leave_history\" : [\n                {\n                        \"calendar_year\" : 2020,\n                        \"pl_used\" : 0,\n                        \"cl_used\" : 0,\n                        \"sl_used\" : 0\n                },\n                {\n                        \"calendar_year\" : 2021,\n                        \"pl_used\" : 0,\n                        \"cl_used\" : 0,\n                        \"sl_used\" : 0\n                }\n        ]\n}\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Ali",
        "usuario_id": 1716
    },
    {
        "_id": 991,
        "fecha": { "$date" : "2020-01-28T06:24:28Z" },
        "decripcion": "\nThe best way to do this is in version 4.2+ which allows using of aggregation pipeline in the update document and the updateOne, updateMany or update collection method. Note that the latter has been deprecated in most if not all languages drivers.\n\nMongoDB 4.2+\n\nVersion 4.2 also introduced the $set pipeline stage operator which is an alias for  $addFields. I will use $set here as it maps with what we are trying to achieve.\n\ndb.collection.<update method>(\n    {},\n    [\n        {\"$set\": {\"name\": { \"$concat\": [\"$firstName\", \" \", \"$lastName\"]}}}\n    ]\n)\n\n\nMongoDB 3.4+\n\nIn 3.4+ you can use $addFields and the $out aggregation pipeline operators.\n\ndb.collection.aggregate(\n    [\n        { \"$addFields\": { \n            \"name\": { \"$concat\": [ \"$firstName\", \" \", \"$lastName\" ] } \n        }},\n        { \"$out\": \"collection\" }\n    ]\n)\n\n\nNote that this does not update your collection but instead replace the existing collection or create a new one. Also for update operations that require \"type casting\" you will need client side processing, and depending on the operation, you may need to use the find() method instead of the .aggreate() method.\n\nMongoDB 3.2 and 3.0\n\nThe way we do this is by $projecting our documents and use the $concat string aggregation operator to return the concatenated string.\nwe From there, you then iterate the cursor and use the $set update operator to add the new field to your documents using bulk operations for maximum efficiency.\n\nAggregation query:\n\nvar cursor = db.collection.aggregate([ \n    { \"$project\":  { \n        \"name\": { \"$concat\": [ \"$firstName\", \" \", \"$lastName\" ] } \n    }}\n])\n\n\nMongoDB 3.2 or newer\n\nfrom this, you need to use the bulkWrite method.\n\nvar requests = [];\ncursor.forEach(document => { \n    requests.push( { \n        'updateOne': {\n            'filter': { '_id': document._id },\n            'update': { '$set': { 'name': document.name } }\n        }\n    });\n    if (requests.length === 500) {\n        //Execute per 500 operations and re-init\n        db.collection.bulkWrite(requests);\n        requests = [];\n    }\n});\n\nif(requests.length > 0) {\n     db.collection.bulkWrite(requests);\n}\n\n\nMongoDB 2.6 and  3.0\n\nFrom this version you need to use the now deprecated Bulk API and its associated methods.\n\nvar bulk = db.collection.initializeUnorderedBulkOp();\nvar count = 0;\n\ncursor.snapshot().forEach(function(document) { \n    bulk.find({ '_id': document._id }).updateOne( {\n        '$set': { 'name': document.name }\n    });\n    count++;\n    if(count%500 === 0) {\n        // Excecute per 500 operations and re-init\n        bulk.execute();\n        bulk = db.collection.initializeUnorderedBulkOp();\n    }\n})\n\n// clean up queues\nif(count > 0) {\n    bulk.execute();\n}\n\n\nMongoDB 2.4\n\ncursor[\"result\"].forEach(function(document) {\n    db.collection.update(\n        { \"_id\": document._id }, \n        { \"$set\": { \"name\": document.name } }\n    );\n})\n\n    ",
        "votes": 391,
        "comentarios": [
            {
                "decripcion": "4.2+ Doesn't work. MongoError: The dollar ($) prefixed field '$concat' in 'name.$concat' is not valid for storage.",
                "fecha": { "$date" : "2019-10-16T04:25:32Z" },
                "usuario": "Josh Woodcock",
                "usuario_id": 1718
            },
            {
                "decripcion": "@JoshWoodcock, I think you had a typo in the query you are running. I suggest you double check.",
                "fecha": { "$date" : "2019-10-17T21:33:43Z" },
                "usuario": "styvane",
                "usuario_id": 1719
            },
            {
                "decripcion": "For those running into the same problem @JoshWoodcock described: pay attention that the answer for 4.2+ describes an aggregation pipeline, so don't miss the square brackets in the second parameter!",
                "fecha": { "$date" : "2020-01-07T20:05:36Z" },
                "usuario": "philsch",
                "usuario_id": 1720
            },
            {
                "decripcion": "Is it possible to do the same thing as in this solution but instead of concatenating two strings together, add two numbers together?",
                "fecha": { "$date" : "2020-01-30T14:03:32Z" },
                "usuario": "Isaac Vidrine",
                "usuario_id": 1721
            },
            {
                "decripcion": "@IsaacVidrine Yes, use $add instead of $concat.  docs.mongodb.com/master/reference/operator/aggregation/add/\u2026",
                "fecha": { "$date" : "2020-10-08T11:58:00Z" },
                "usuario": "Paul",
                "usuario_id": 930
            }
        ],
        "usuario": "styvane",
        "usuario_id": 1719
    },
    {
        "_id": 992,
        "fecha": { "$date" : "2015-10-28T05:24:44Z" },
        "decripcion": "\nYou should iterate through. For your specific case:\n\ndb.person.find().snapshot().forEach(\n    function (elem) {\n        db.person.update(\n            {\n                _id: elem._id\n            },\n            {\n                $set: {\n                    name: elem.firstname + ' ' + elem.lastname\n                }\n            }\n        );\n    }\n);\n\n    ",
        "votes": 251,
        "comentarios": [
            {
                "decripcion": "What happens if another user has changed the document between your find() and your save()?",
                "fecha": { "$date" : "2013-02-15T11:33:53Z" },
                "usuario": "UpTheCreek",
                "usuario_id": 1722
            },
            {
                "decripcion": "True, but copying between fields should not require transactions to be atomic.",
                "fecha": { "$date" : "2013-02-19T09:25:09Z" },
                "usuario": "UpTheCreek",
                "usuario_id": 1722
            },
            {
                "decripcion": "It's important to notice that save() fully replaces the document. Should use update() instead.",
                "fecha": { "$date" : "2013-03-22T21:44:29Z" },
                "usuario": "Carlos Melo",
                "usuario_id": 1723
            },
            {
                "decripcion": "How about db.person.update( { _id: elem._id }, { $set: { name: elem.firstname + ' ' + elem.lastname } } );",
                "fecha": { "$date" : "2013-08-19T13:34:12Z" },
                "usuario": "Philipp Jardas",
                "usuario_id": 1724
            },
            {
                "decripcion": "I created a function called create_guid that only produced a unique guid per document when iterating with forEach in this way (i.e. simply using create_guid in an update statement with mutli=true caused the same guid to be generated for all documents).  This answer worked perfectly for me. +1",
                "fecha": { "$date" : "2015-04-09T15:02:06Z" },
                "usuario": "rmirabelle",
                "usuario_id": 1725
            }
        ],
        "usuario": "Carlos Morales",
        "usuario_id": 1726
    },
    {
        "_id": 993,
        "fecha": { "$date" : "2018-10-29T07:56:26Z" },
        "decripcion": "\nApparently there is a way to do this efficiently since MongoDB 3.4, see styvane's answer.\n\n\n\nObsolete answer below\n\nYou cannot refer to the document itself in an update (yet). You'll need to iterate through the documents and update each document using a function. See this answer for an example, or this one for server-side eval().\n    ",
        "votes": 106,
        "comentarios": [
            {
                "decripcion": "Is this still valid today?",
                "fecha": { "$date" : "2013-01-12T22:08:46Z" },
                "usuario": "Christian Engel",
                "usuario_id": 1727
            },
            {
                "decripcion": "@ChristianEngel: It appears so. I wasn't able to find anything in the MongoDB docs that mentions a reference to the current document in an update operation. This related feature request is still unresolved as well.",
                "fecha": { "$date" : "2013-01-14T12:28:18Z" },
                "usuario": "Niels van der Rest",
                "usuario_id": 1696
            },
            {
                "decripcion": "Is it still valid in April 2017? Or there are already new features which can do this?",
                "fecha": { "$date" : "2017-04-26T12:01:51Z" },
                "usuario": "Kim",
                "usuario_id": 1728
            },
            {
                "decripcion": "@Kim It looks like it is still valid. Also, the feature request that @niels-van-der-rest pointed out back in 2013 is still in OPEN.",
                "fecha": { "$date" : "2017-05-03T22:30:07Z" },
                "usuario": "Danziger",
                "usuario_id": 1729
            },
            {
                "decripcion": "this is not a valid answer anymore, have a look at @styvane answer",
                "fecha": { "$date" : "2018-03-11T18:28:43Z" },
                "usuario": "aitchkhan",
                "usuario_id": 1730
            }
        ],
        "usuario": "Niels van der Rest",
        "usuario_id": 1696
    },
    {
        "_id": 994,
        "fecha": { "$date" : "2015-02-11T16:58:51Z" },
        "decripcion": "\nFor a database with high activity, you may run into issues where your updates affect actively changing records and for this reason I recommend using snapshot() \n\ndb.person.find().snapshot().forEach( function (hombre) {\n    hombre.name = hombre.firstName + ' ' + hombre.lastName; \n    db.person.save(hombre); \n});\n\n\nhttp://docs.mongodb.org/manual/reference/method/cursor.snapshot/\n    ",
        "votes": 46,
        "comentarios": [
            {
                "decripcion": "What happens if another user edited the person between the find() and save()? I have a case where multiple calls can be done to the same object changing them based on their current values. The 2nd user should have to wait with reading until the 1st is done with saving. Does this accomplish that?",
                "fecha": { "$date" : "2017-10-11T12:48:35Z" },
                "usuario": "Marco",
                "usuario_id": 889
            },
            {
                "decripcion": "About the snapshot():  Deprecated in the mongo Shell since v3.2. Starting in v3.2, the $snapshot operator is deprecated in the mongo shell. In the mongo shell, use cursor.snapshot() instead. link",
                "fecha": { "$date" : "2017-12-20T14:52:12Z" },
                "usuario": "ppython",
                "usuario_id": 1731
            }
        ],
        "usuario": "Eric Kigathi",
        "usuario_id": 1732
    },
    {
        "_id": 995,
        "fecha": { "$date" : "2019-06-11T23:03:02Z" },
        "decripcion": "\nStarting Mongo 4.2, db.collection.update() can accept an aggregation pipeline, finally allowing the update/creation of a field based on another field:\n\n// { firstName: \"Hello\", lastName: \"World\" }\ndb.collection.update(\n  {},\n  [{ $set: { name: { $concat: [ \"$firstName\", \" \", \"$lastName\" ] } } }],\n  { multi: true }\n)\n// { \"firstName\" : \"Hello\", \"lastName\" : \"World\", \"name\" : \"Hello World\" }\n\n\n\nThe first part {} is the match query, filtering which documents to update (in our case all documents).\nThe second part [{ $set: { name: { ... } }] is the update aggregation pipeline (note the squared brackets signifying the use of an aggregation pipeline). $set is a new aggregation operator and an alias of $addFields.\nDon't forget { multi: true }, otherwise only the first matching document will be updated.\n\n    ",
        "votes": 20,
        "comentarios": [],
        "usuario": "Xavier Guihot",
        "usuario_id": 1733
    },
    {
        "_id": 996,
        "fecha": { "$date" : "2019-01-15T17:20:53Z" },
        "decripcion": "\nRegarding this answer, the snapshot function is deprecated in version 3.6, according to this update. So, on version 3.6 and above, it is possible to perform the operation this way:\n\ndb.person.find().forEach(\n    function (elem) {\n        db.person.update(\n            {\n                _id: elem._id\n            },\n            {\n                $set: {\n                    name: elem.firstname + ' ' + elem.lastname\n                }\n            }\n        );\n    }\n);\n\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "Aldo",
        "usuario_id": 1734
    },
    {
        "_id": 997,
        "fecha": { "$date" : "2015-04-03T11:44:17Z" },
        "decripcion": "\nI tried the above solution but I found it unsuitable for large amounts of data. I then discovered the stream feature:\n\nMongoClient.connect(\"...\", function(err, db){\n    var c = db.collection('yourCollection');\n    var s = c.find({/* your query */}).stream();\n    s.on('data', function(doc){\n        c.update({_id: doc._id}, {$set: {name : doc.firstName + ' ' + doc.lastName}}, function(err, result) { /* result == true? */} }\n    });\n    s.on('end', function(){\n        // stream can end before all your updates do if you have a lot\n    })\n})\n\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "How is this different? Will the steam be throttled by the update activity? Do you have any reference to it? The Mongo docs are quite poor.",
                "fecha": { "$date" : "2016-11-21T14:58:06Z" },
                "usuario": "Nico",
                "usuario_id": 600
            }
        ],
        "usuario": "Chris Gibb",
        "usuario_id": 1735
    },
    {
        "_id": 998,
        "fecha": { "$date" : "2016-06-08T15:07:08Z" },
        "decripcion": "\nHere's what we came up with for copying one field to another for ~150_000 records. It took about 6 minutes, but is still significantly less resource intensive than it would have been to instantiate and iterate over the same number of ruby objects.\n\njs_query = %({\n  $or : [\n    {\n      'settings.mobile_notifications' : { $exists : false },\n      'settings.mobile_admin_notifications' : { $exists : false }\n    }\n  ]\n})\n\njs_for_each = %(function(user) {\n  if (!user.settings.hasOwnProperty('mobile_notifications')) {\n    user.settings.mobile_notifications = user.settings.email_notifications;\n  }\n  if (!user.settings.hasOwnProperty('mobile_admin_notifications')) {\n    user.settings.mobile_admin_notifications = user.settings.email_admin_notifications;\n  }\n  db.users.save(user);\n})\n\njs = \"db.users.find(#{js_query}).forEach(#{js_for_each});\"\nMongoid::Sessions.default.command('$eval' => js)\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Chris Bloom",
        "usuario_id": 1736
    },
    {
        "_id": 999,
        "fecha": { "$date" : "2020-04-15T11:06:12Z" },
        "decripcion": "\nWith MongoDB version 4.2+, updates are more flexible as it allows the use of aggregation pipeline in its update, updateOne and updateMany. You can now transform your documents using the aggregation operators then update without the need to explicity state the $set command (instead we use $replaceRoot: {newRoot: \"$$ROOT\"})\n\nHere we use the aggregate query to extract the timestamp from MongoDB's ObjectID \"_id\" field and update the documents (I am not an expert in SQL but I think SQL does not provide any auto generated ObjectID that has timestamp to it, you would have to automatically create that date) \n\nvar collection = \"person\"\n\nagg_query = [\n    {\n        \"$addFields\" : {\n            \"_last_updated\" : {\n                \"$toDate\" : \"$_id\"\n            }\n        }\n    },\n    {\n        $replaceRoot: {\n            newRoot: \"$$ROOT\"\n        } \n    }\n]\n\ndb.getCollection(collection).updateMany({}, agg_query, {upsert: true})\n\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "You don't need { $replaceRoot: { newRoot: \"$$ROOT\" } }; it means replacing the document by itself, which is pointless. If you replace $addFields by its alias $set and updateMany which is one of the aliases for update, then you get to the exact same answer as this one above.",
                "fecha": { "$date" : "2020-04-15T13:19:04Z" },
                "usuario": "Xavier Guihot",
                "usuario_id": 1733
            },
            {
                "decripcion": "Thanks @Xavier Guihot for the comment. The reason why $replaceRoot is used because we needed to use the $toDate query, while $set does not provide us a way to use $toDate",
                "fecha": { "$date" : "2020-07-09T09:45:07Z" },
                "usuario": "Yi Xiang Chong",
                "usuario_id": 1737
            }
        ],
        "usuario": "Yi Xiang Chong",
        "usuario_id": 1737
    },
    {
        "_id": 1000,
        "fecha": { "$date" : "2020-08-23T22:07:00Z" },
        "decripcion": "\n(I would have posted this as a comment, but couldn't)\nFor anyone who lands here trying to update one field using another in the document with the c# driver...\nI could not figure out how to use any of the UpdateXXX methods and their associated overloads since they take an UpdateDefinition as an argument.\n// we want to set Prop1 to Prop2\nclass Foo { public string Prop1 { get; set; } public string Prop2 { get; set;} } \n\nvoid Test()\n{ \n     var update = new UpdateDefinitionBuilder<Foo>();\n     update.Set(x => x.Prop1, <new value; no way to get a hold of the object that I can find>)\n}\n\nAs a workaround, I found that you can use the RunCommand method on an IMongoDatabase (https://docs.mongodb.com/manual/reference/command/update/#dbcmd.update).\nvar command = new BsonDocument\n        {\n            { \"update\", \"CollectionToUpdate\" },\n            { \"updates\", new BsonArray \n                 { \n                       new BsonDocument\n                       {\n                            // Any filter; here the check is if Prop1 does not exist\n                            { \"q\", new BsonDocument{ [\"Prop1\"] = new BsonDocument(\"$exists\", false) }}, \n                            // set it to the value of Prop2\n                            { \"u\", new BsonArray { new BsonDocument { [\"$set\"] = new BsonDocument(\"Prop1\", \"$Prop2\") }}},\n                            { \"multi\", true }\n                       }\n                 }\n            }\n        };\n\n database.RunCommand<BsonDocument>(command);\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "user1239961",
        "usuario_id": 1738
    },
    {
        "_id": 1001,
        "fecha": { "$date" : "2021-07-13T13:01:40Z" },
        "decripcion": "\nupdate() method takes aggregation pipeline as parameter like\ndb.collection_name.update(\n  {\n    // Query\n  },\n  [\n    // Aggregation pipeline\n    { \"$set\": { \"id\": \"$_id\" } }\n  ],\n  {\n    // Options\n    \"multi\": true // false when a single doc has to be updated\n  }\n)\n\nThe field can be set or unset with existing values using the aggregation pipeline.\nNote: use $ with field name to specify the field which has to be read.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Yuvaraj Anbarasan",
        "usuario_id": 1739
    },
    {
        "_id": 1002,
        "fecha": { "$date" : "2021-01-03T16:37:06Z" },
        "decripcion": "\nUPDATE:\nAs of Mongo version 3.6, this answer is no longer valid as the mentioned issue was fixed and there are ways to achieve this. Please check other answers.\n\nAt this moment it is not possible to use the positional operator to update all items in an array. See JIRA http://jira.mongodb.org/browse/SERVER-1243\nAs a work around you can:\n\nUpdate each item individually\n(events.0.handled events.1.handled\n...) or...\nRead the document, do the edits\nmanually and save it replacing the\nolder one (check \"Update if\nCurrent\" if you want to ensure\natomic updates)\n\n    ",
        "votes": 115,
        "comentarios": [
            {
                "decripcion": "if you have similar problem, vote for this issue - jira.mongodb.org/browse/SERVER-1243",
                "fecha": { "$date" : "2011-01-12T16:08:45Z" },
                "usuario": "LiorH",
                "usuario_id": 1741
            },
            {
                "decripcion": "I actually like the read document and save approach.  But I used Couch before Mongo so that approach seems more natural since there is no query API for Couch, just a REST api for whole documents",
                "fecha": { "$date" : "2011-12-15T19:50:14Z" },
                "usuario": "adam",
                "usuario_id": 1742
            },
            {
                "decripcion": "Both of these approaches require quite high amount of memory, right? If there's a lot of documents which have to be searched, and have to load all of them (or the nested arrays) in order to update... + also a bit troublesome to implement if this has to be done asynchronously...",
                "fecha": { "$date" : "2013-10-01T20:24:07Z" },
                "usuario": "User",
                "usuario_id": 1743
            },
            {
                "decripcion": "All technical difficulties aside, it is rather astonishing that this feature is not available in MongoDB. This constraint takes away much freedom from customizing database schema.",
                "fecha": { "$date" : "2016-02-17T04:13:54Z" },
                "usuario": "Sung Cho",
                "usuario_id": 1744
            },
            {
                "decripcion": "Neil Lunn stackoverflow.com/a/46054172/337401 answered this for version 3.6. Since this is a popular question it might be worth while to update this accepted answer with a referral to the answer by Neil Lunn.",
                "fecha": { "$date" : "2017-12-08T20:52:53Z" },
                "usuario": "Jaap",
                "usuario_id": 1745
            }
        ],
        "usuario": "Javier Ferrero",
        "usuario_id": 1746
    },
    {
        "_id": 1003,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nWith the release of MongoDB 3.6 ( and available in the development branch from MongoDB 3.5.12 ) you can now update multiple array elements in a single request.\nThis uses the filtered positional $[<identifier>] update operator syntax introduced in this version:\ndb.collection.update(\n  { \"events.profile\":10 },\n  { \"$set\": { \"events.$[elem].handled\": 0 } },\n  { \"arrayFilters\": [{ \"elem.profile\": 10 }], \"multi\": true }\n)\n\nThe \"arrayFilters\" as passed to the options for .update() or even\n.updateOne(), .updateMany(), .findOneAndUpdate() or .bulkWrite() method specifies the conditions to match on the identifier given in the update statement. Any elements that match the condition given will be updated.\nNoting that the \"multi\" as given in the context of the question was used in the expectation that this would \"update multiple elements\" but this was not and still is not the case. It's usage here applies to \"multiple documents\" as has always been the case or now otherwise specified as the mandatory setting of .updateMany() in modern API versions.\n\nNOTE Somewhat ironically, since this is specified in the \"options\" argument for .update() and like methods, the syntax is generally compatible with all recent release driver versions.\nHowever this is not true of the mongo shell, since the way the method is implemented there ( \"ironically for backward compatibility\" ) the arrayFilters argument is not recognized and removed by an internal method that parses the options in order to deliver \"backward compatibility\" with prior MongoDB server versions and a \"legacy\" .update() API call syntax.\nSo if you want to use the command in the mongo shell or other \"shell based\" products ( notably Robo 3T ) you need a latest version from either the development branch or production release as of 3.6 or greater.\n\nSee also positional all $[] which also updates \"multiple array elements\" but without applying to specified conditions and applies to all elements in the array where that is the desired action.\nAlso see Updating a Nested Array with MongoDB for how these new positional operators apply to \"nested\" array structures, where \"arrays are within other arrays\".\n\nIMPORTANT - Upgraded installations from previous versions \"may\" have not enabled MongoDB features, which can also cause statements to fail. You should ensure your upgrade procedure is complete with details such as index upgrades and then run\n   db.adminCommand( { setFeatureCompatibilityVersion: \"3.6\" } )\n\nOr higher version as is applicable to your installed version. i.e \"4.0\" for version 4 and onwards at present. This enabled such features as the new positional update operators and others. You can also check with:\n   db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )\n\nTo return the current setting\n\n    ",
        "votes": 108,
        "comentarios": [
            {
                "decripcion": "The accepted answer should be updated and refer to this answer.",
                "fecha": { "$date" : "2017-12-08T20:51:14Z" },
                "usuario": "Jaap",
                "usuario_id": 1745
            },
            {
                "decripcion": "What is elem?",
                "fecha": { "$date" : "2018-09-10T08:01:16Z" },
                "usuario": "user1063287",
                "usuario_id": 1695
            },
            {
                "decripcion": "This is correct. Note that RoboMongo doesn't support arrayFilters yet, so running update via CLI. stackoverflow.com/questions/48322834/\u2026",
                "fecha": { "$date" : "2018-09-28T22:25:12Z" },
                "usuario": "drlff",
                "usuario_id": 1747
            },
            {
                "decripcion": "thank you, Neil, especially for the IMPORTANT section, exactly what I needed",
                "fecha": { "$date" : "2018-10-05T10:53:21Z" },
                "usuario": "janfabian",
                "usuario_id": 1748
            },
            {
                "decripcion": "this  code returns ERROR in pymongo. tehre is error: raise TypeError(\"%s must be True or False\" % (option,)) TypeError: upsert must be True or False",
                "fecha": { "$date" : "2020-06-08T12:05:10Z" },
                "usuario": "Vagif",
                "usuario_id": 1749
            }
        ],
        "usuario": "Neil Lunn",
        "usuario_id": 1750
    },
    {
        "_id": 1004,
        "fecha": { "$date" : "2015-08-25T09:36:29Z" },
        "decripcion": "\nWhat worked for me was this:\n\ndb.collection.find({ _id: ObjectId('4d2d8deff4e6c1d71fc29a07') })\n  .forEach(function (doc) {\n    doc.events.forEach(function (event) {\n      if (event.profile === 10) {\n        event.handled=0;\n      }\n    });\n    db.collection.save(doc);\n  });\n\n\nI think it's clearer for mongo newbies and anyone familiar with JQuery & friends.\n    ",
        "votes": 71,
        "comentarios": [
            {
                "decripcion": "I'm using db.posts.find({ 'permalink':permalink }).forEach( function(doc) {... and I'm getting Oops.. TypeError: Object # has no method 'forEach'",
                "fecha": { "$date" : "2013-12-21T04:20:08Z" },
                "usuario": "Squirrl",
                "usuario_id": 1751
            },
            {
                "decripcion": "@Squirrl could be outdated mongodb version? The doc is clear on how to apply forEach function on a cursor but does not state since which version is supported. docs.mongodb.org/manual/reference/method/cursor.forEach",
                "fecha": { "$date" : "2014-02-11T10:34:31Z" },
                "usuario": "Daniel Cerecedo",
                "usuario_id": 1752
            },
            {
                "decripcion": "@Squirrl try db.posts.find(...).toArray().forEach(...)",
                "fecha": { "$date" : "2016-12-12T15:30:21Z" },
                "usuario": "marmor",
                "usuario_id": 1753
            },
            {
                "decripcion": "Can we not do this without using Javascript? I want to perform this update directly from a mongo shell without using Javascript API.",
                "fecha": { "$date" : "2017-03-12T05:28:21Z" },
                "usuario": "Meliodas",
                "usuario_id": 1754
            },
            {
                "decripcion": "Can you please write this query in mongodb driver for java or with spring-data-mongodb? Thanks, kris",
                "fecha": { "$date" : "2017-07-29T11:07:02Z" },
                "usuario": "chiku",
                "usuario_id": 1755
            }
        ],
        "usuario": "Daniel Cerecedo",
        "usuario_id": 1752
    },
    {
        "_id": 1005,
        "fecha": { "$date" : "2016-09-07T04:29:06Z" },
        "decripcion": "\nThis can also be accomplished with a while loop which checks to see if any documents remain that still have subdocuments that have not been updated. This method preserves the atomicity of your updates (which many of the other solutions here do not).\n\nvar query = {\n    events: {\n        $elemMatch: {\n            profile: 10,\n            handled: { $ne: 0 }\n        }\n    }\n};\n\nwhile (db.yourCollection.find(query).count() > 0) {\n    db.yourCollection.update(\n        query,\n        { $set: { \"events.$.handled\": 0 } },\n        { multi: true }\n    );\n}\n\n\nThe number of times the loop is executed will equal the maximum number of times subdocuments with profile equal to 10 and handled not equal to 0 occur in any of the documents in your collection. So if you have 100 documents in your collection and one of them has three subdocuments that match query and all the other documents have fewer matching subdocuments, the loop will execute three times.\n\nThis method avoids the danger of clobbering other data that may be updated by another process while this script executes. It also minimizes the amount of data being transferred between client and server.\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "Sean",
        "usuario_id": 1756
    },
    {
        "_id": 1006,
        "fecha": { "$date" : "2017-07-24T21:46:25Z" },
        "decripcion": "\n\n\nThis does in fact relate to the long standing issue at http://jira.mongodb.org/browse/SERVER-1243 where there are in fact a number of challenges to a clear syntax that supports \"all cases\" where mutiple array matches are found. There are in fact methods already in place that \"aid\" in solutions to this problem, such as Bulk Operations which have been implemented after this original post.\n\nIt is still not possible to update more than a single matched array element in a single update statement, so even with a \"multi\" update all you will ever be able to update is just one mathed element in the array for each document in that single statement.\n\nThe best possible solution at present is to find and loop all matched documents and process Bulk updates which will at least allow many operations to be sent in a single request with a singular response. You can optionally use .aggregate() to reduce the array content returned in the search result to just those that match the conditions for the update selection:\n\ndb.collection.aggregate([\n    { \"$match\": { \"events.handled\": 1 } },\n    { \"$project\": {\n        \"events\": {\n            \"$setDifference\": [\n               { \"$map\": {\n                   \"input\": \"$events\",\n                   \"as\": \"event\",\n                   \"in\": {\n                       \"$cond\": [\n                           { \"$eq\": [ \"$$event.handled\", 1 ] },\n                           \"$$el\",\n                           false\n                       ]\n                   }\n               }},\n               [false]\n            ]\n        }\n    }}\n]).forEach(function(doc) {\n    doc.events.forEach(function(event) {\n        bulk.find({ \"_id\": doc._id, \"events.handled\": 1  }).updateOne({\n            \"$set\": { \"events.$.handled\": 0 }\n        });\n        count++;\n\n        if ( count % 1000 == 0 ) {\n            bulk.execute();\n            bulk = db.collection.initializeOrderedBulkOp();\n        }\n    });\n});\n\nif ( count % 1000 != 0 )\n    bulk.execute();\n\n\nThe .aggregate() portion there will work when there is a \"unique\" identifier for the array or all content for each element forms a \"unique\" element itself. This is due to the \"set\" operator in $setDifference used to filter any false values returned from the $map operation used to process the array for matches.\n\nIf your array content does not have unique elements you can try an alternate approach with $redact:\n\ndb.collection.aggregate([\n    { \"$match\": { \"events.handled\": 1 } },\n    { \"$redact\": {\n        \"$cond\": {\n            \"if\": {\n                \"$eq\": [ { \"$ifNull\": [ \"$handled\", 1 ] }, 1 ]\n            },\n            \"then\": \"$$DESCEND\",\n            \"else\": \"$$PRUNE\"\n        }\n    }}\n])\n\n\nWhere it's limitation is that if \"handled\" was in fact a field meant to be present at other document levels then you are likely going to get unexepected results, but is fine where that field appears only in one document position and is an equality match.\n\nFuture releases ( post 3.1 MongoDB ) as of writing will have a $filter operation that is simpler:\n\ndb.collection.aggregate([\n    { \"$match\": { \"events.handled\": 1 } },\n    { \"$project\": {\n        \"events\": {\n            \"$filter\": {\n                \"input\": \"$events\",\n                \"as\": \"event\",\n                \"cond\": { \"$eq\": [ \"$$event.handled\", 1 ] }\n            }\n        }\n    }}\n])\n\n\nAnd all releases that support .aggregate() can use the following approach with $unwind, but the usage of that operator makes it the least efficient approach due to the array expansion in the pipeline:\n\ndb.collection.aggregate([\n    { \"$match\": { \"events.handled\": 1 } },\n    { \"$unwind\": \"$events\" },\n    { \"$match\": { \"events.handled\": 1 } },\n    { \"$group\": {\n        \"_id\": \"$_id\",\n        \"events\": { \"$push\": \"$events\" }\n    }}        \n])\n\n\nIn all cases where the MongoDB version supports a \"cursor\" from aggregate output, then this is just a matter of choosing an approach and iterating the results with the same block of code shown to process the Bulk update statements. Bulk Operations and \"cursors\" from aggregate output are introduced in the same version ( MongoDB 2.6 ) and therefore usually work hand in hand for processing.\n\nIn even earlier versions then it is probably best to just use .find() to return the cursor, and filter out the execution of statements to just the number of times the array element is matched for the .update() iterations:\n\ndb.collection.find({ \"events.handled\": 1 }).forEach(function(doc){ \n    doc.events.filter(function(event){ return event.handled == 1 }).forEach(function(event){\n        db.collection.update({ \"_id\": doc._id },{ \"$set\": { \"events.$.handled\": 0 }});\n    });\n});\n\n\nIf you are aboslutely determined to do \"multi\" updates or deem that to be ultimately more efficient than processing multiple updates for each matched document, then you can always determine the maximum number of possible array matches and just execute a \"multi\" update that many times, until basically there are no more documents to update.\n\nA valid approach for MongoDB 2.4 and 2.2 versions could also use .aggregate() to find this value:\n\nvar result = db.collection.aggregate([\n    { \"$match\": { \"events.handled\": 1 } },\n    { \"$unwind\": \"$events\" },\n    { \"$match\": { \"events.handled\": 1 } },\n    { \"$group\": {\n        \"_id\": \"$_id\",\n        \"count\": { \"$sum\": 1 }\n    }},\n    { \"$group\": {\n        \"_id\": null,\n        \"count\": { \"$max\": \"$count\" }\n    }}\n]);\n\nvar max = result.result[0].count;\n\nwhile ( max-- ) {\n    db.collection.update({ \"events.handled\": 1},{ \"$set\": { \"events.$.handled\": 0 }},{ \"multi\": true })\n}\n\n\nWhatever the case, there are certain things you do not want to do within the update:\n\n\nDo not \"one shot\" update the array: Where if you think it might be more efficient to update the whole array content in code and then just $set the whole array in each document. This might seem faster to process, but there is no guarantee that the array content has not changed since it was read and the update is performed. Though $set is still an atomic operator, it will only update the array with what it \"thinks\" is the correct data, and thus is likely to overwrite any changes occurring between read and write.\nDo not calculate index values to update: Where similar to the \"one shot\" approach you just work out that position 0 and position 2 ( and so on ) are the elements to update and code these in with and eventual statement like:\n\n{ \"$set\": {\n    \"events.0.handled\": 0,\n    \"events.2.handled\": 0\n}}\n\n\nAgain the problem here is the \"presumption\" that those index values found when the document was read are the same index values in th array at the time of update. If new items are added to the array in a way that changes the order then those positions are not longer valid and the wrong items are in fact updated.\n\n\nSo until there is a reasonable syntax determined for allowing multiple matched array elements to be processed in single update statement then the basic approach is to either update each matched array element in an indvidual statement ( ideally in Bulk ) or essentially work out the maximum array elements to update or keep updating until no more modified results are returned. At any rate, you should \"always\" be processing positional $ updates on the matched array element, even if that is only updating one element per statement.\n\nBulk Operations are in fact the \"generalized\" solution to processing any operations that work out to be \"multiple operations\", and since there are more applications for this than merely updating mutiple array elements with the same value, then it has of course been implemented already, and it is presently the best approach to solve this problem.\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "Blakes Seven",
        "usuario_id": 1757
    },
    {
        "_id": 1007,
        "fecha": { "$date" : "2013-08-08T07:59:10Z" },
        "decripcion": "\nI'm amazed this still hasn't been addressed in mongo. Overall mongo doesn't seem to be great when dealing with sub-arrays. You can't count sub-arrays simply for example.\n\nI used Javier's first solution. Read the array into events then loop through and build the set exp:\n\nvar set = {}, i, l;\nfor(i=0,l=events.length;i<l;i++) {\n  if(events[i].profile == 10) {\n    set['events.' + i + '.handled'] = 0;\n  }\n}\n\n.update(objId, {$set:set});\n\n\nThis can be abstracted into a function using a callback for the conditional test\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "Thanks for this! Can't believe this feature still isn't natively supported! Used this to increment every item of a subarray, for others reading... to update every item just remove the if statement.",
                "fecha": { "$date" : "2014-03-11T14:46:07Z" },
                "usuario": "Zaheer",
                "usuario_id": 1758
            },
            {
                "decripcion": "This is not a safe solution. If a record gets added while you are running the update, you will corrupt your data.",
                "fecha": { "$date" : "2014-03-15T01:10:57Z" },
                "usuario": "Merc",
                "usuario_id": 769
            }
        ],
        "usuario": "lukenofurther",
        "usuario_id": 1759
    },
    {
        "_id": 1008,
        "fecha": { "$date" : "2020-03-14T14:45:40Z" },
        "decripcion": "\nFirst: your code did not work because you were using the positional operator $ which only identifies an element to update in an array but does not even explicitly specify its position in the array.\n\nWhat you need is the filtered positional operator $[<identifier>]. It would update all elements that match an array filter condition. \n\nSolution:\n\ndb.collection.update({\"events.profile\":10}, { $set: { \"events.$[elem].handled\" : 0 } },\n   {\n     multi: true,\n     arrayFilters: [ { \"elem.profile\": 10 } ]\n})\n\n\nVisit mongodb doc here\n\nWhat the code does: \n\n\n{\"events.profile\":10} filters your collection and return the documents matching the filter\nThe $set update operator: modifies matching fields of documents it acts on. \n{multi:true} It makes .update() modifies all documents matching the filter hence behaving like updateMany()\n{ \"events.$[elem].handled\" : 0 } and arrayFilters: [ { \"elem.profile\": 10 } ]\nThis technique involves the use of the filtered positional array with arrayFilters. the filtered positional array here $[elem] acts as a placeholder for all elements in the array fields that match the conditions specified in the array filter.\n\n\nArray filters\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Lawrence Eagles",
        "usuario_id": 1760
    },
    {
        "_id": 1009,
        "fecha": { "$date" : "2020-06-22T10:25:03Z" },
        "decripcion": "\nYou can update all elements in MongoDB\ndb.collectioname.updateOne(\n{ \"key\": /vikas/i },\n{ $set: { \n \"arr.$[].status\" : \"completed\"\n} }\n)\n\nIt will update all the \"status\" value to \"completed\" in the \"arr\" Array\nIf Only one document\ndb.collectioname.updateOne(\n\u00a0{ key:\"someunique\", \"arr.key\": \"myuniq\" },\n\u00a0{ $set: { \n\u00a0 \u00a0\"arr.$.status\" : \"completed\", \n\u00a0 \u00a0\"arr.$.msgs\": \u00a0{\n\u00a0 \u00a0 \u00a0 \u00a0         \"result\" : \"\"\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0\n\u00a0} }\n)\n\nBut if not one and also you don't want all the documents in the array to update then you need to loop through the element and inside the if block\ndb.collectioname.find({findCriteria })\n  .forEach(function (doc) {\n    doc.arr.forEach(function (singlearr) {\n      if (singlearr check) {\n        singlearr.handled =0\n      }\n    });\n    db.collection.save(doc);\n  });\n\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "VIKAS KOHLI",
        "usuario_id": 1761
    },
    {
        "_id": 1010,
        "fecha": { "$date" : "2019-06-19T05:29:22Z" },
        "decripcion": "\nThe thread is very old, but I came looking for answer here hence providing new solution.\n\nWith MongoDB version 3.6+, it is now possible to use the positional operator to update all items in an array. See official documentation here.\n\nFollowing query would work for the question asked here. I have also verified with Java-MongoDB driver and it works successfully.\n\n.update(   // or updateMany directly, removing the flag for 'multi'\n   {\"events.profile\":10},\n   {$set:{\"events.$[].handled\":0}},  // notice the empty brackets after '$' opearor\n   false,\n   true\n)\n\n\nHope this helps someone like me.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "ersnh",
        "usuario_id": 1762
    },
    {
        "_id": 1011,
        "fecha": { "$date" : "2018-06-06T00:27:30Z" },
        "decripcion": "\nI've been looking for a solution to this using the newest driver for C# 3.6 and here's the fix I eventually settled on.  The key here is using \"$[]\" which according to MongoDB is new as of version 3.6.  See https://docs.mongodb.com/manual/reference/operator/update/positional-all/#up.S[] for more information.\n\nHere's the code:\n\n{\n   var filter = Builders<Scene>.Filter.Where(i => i.ID != null);\n   var update = Builders<Scene>.Update.Unset(\"area.$[].discoveredBy\");\n   var result = collection.UpdateMany(filter, update, new UpdateOptions { IsUpsert = true});\n}\n\n\nFor more context see my original post here:\nRemove array element from ALL documents using MongoDB C# driver\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "C0d3 0n3",
        "usuario_id": 1763
    },
    {
        "_id": 1012,
        "fecha": { "$date" : "2019-08-19T02:22:05Z" },
        "decripcion": "\nPlease be aware that some answers in this thread suggesting use $[] is WRONG.\n\ndb.collection.update(\n   {\"events.profile\":10},\n   {$set:{\"events.$[].handled\":0}},\n   {multi:true}\n)\n\n\nThe above code will update \"handled\" to 0 for all elements in \"events\" array, regardless of its \"profile\" value. The query {\"events.profile\":10} is only to filter the whole document, not the documents in the array. In this situation it is a must to use $[elem] with arrayFilters to specify the condition of array items so Neil Lunn's answer is correct.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Wenda Hu",
        "usuario_id": 1764
    },
    {
        "_id": 1013,
        "fecha": { "$date" : "2017-07-29T18:35:11Z" },
        "decripcion": "\nActually, The save command is only on instance of Document class.\nThat have a lot of methods and attribute. So you can use lean() function to reduce work load.\nRefer here. https://hashnode.com/post/why-are-mongoose-mongodb-odm-lean-queries-faster-than-normal-queries-cillvawhq0062kj53asxoyn7j \n\nAnother problem with save function, that will make conflict data in with multi-save at a same time.\nModel.Update will make data consistently.\nSo to update multi items in array of document. Use your familiar programming language and try something like this, I use mongoose in that:\n\nUser.findOne({'_id': '4d2d8deff4e6c1d71fc29a07'}).lean().exec()\n  .then(usr =>{\n    if(!usr)  return\n    usr.events.forEach( e => {\n      if(e && e.profile==10 ) e.handled = 0\n    })\n    User.findOneAndUpdate(\n      {'_id': '4d2d8deff4e6c1d71fc29a07'},\n      {$set: {events: usr.events}},\n      {new: true}\n    ).lean().exec().then(updatedUsr => console.log(updatedUsr))\n})\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "user3176403",
        "usuario_id": 1765
    },
    {
        "_id": 1014,
        "fecha": { "$date" : "2019-08-12T11:24:46Z" },
        "decripcion": "\n$[] operator selects all nested array ..You can update all array items with '$[]' \n\n.update({\"events.profile\":10},{$set:{\"events.$[].handled\":0}},false,true)\n\n\nReference\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "Can you please explain why you include the \"false,true\" at the end here? I can't find it in the documentation.",
                "fecha": { "$date" : "2020-02-07T14:49:41Z" },
                "usuario": "garson",
                "usuario_id": 1766
            },
            {
                "decripcion": "Wrong answer the all positional operator $[]  just updates all fields in the specified array. What works is the filtered positional operator $[identifier] that operators on array fields that match the specified conditions. Should be used with arrayFilters  Refrence: docs.mongodb.com/manual/release-notes/3.6/#arrayfilters and docs.mongodb.com/manual/reference/operator/update/\u2026",
                "fecha": { "$date" : "2020-03-14T14:48:18Z" },
                "usuario": "Lawrence Eagles",
                "usuario_id": 1760
            }
        ],
        "usuario": "Ucdemir",
        "usuario_id": 1767
    },
    {
        "_id": 1015,
        "fecha": { "$date" : "2019-10-15T07:19:11Z" },
        "decripcion": "\nUpdate array field in multiple documents in mongo db.\n\nUse $pull or $push with update many query to update array elements in mongoDb.\n\nNotification.updateMany(\n    { \"_id\": { $in: req.body.notificationIds } },\n    {\n        $pull: { \"receiversId\": req.body.userId }\n    }, function (err) {\n        if (err) {\n            res.status(500).json({ \"msg\": err });\n        } else {\n            res.status(200).json({\n                \"msg\": \"Notification Deleted Successfully.\"\n            });\n        }\n    });\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Irfan",
        "usuario_id": 1768
    },
    {
        "_id": 1016,
        "fecha": { "$date" : "2017-09-04T16:45:27Z" },
        "decripcion": "\nI tried the following and its working fine.\n\n.update({'events.profile': 10}, { '$set': {'events.$.handled': 0 }},{ safe: true, multi:true }, callback function);\n\n\n// callback function in case of nodejs\n    ",
        "votes": -1,
        "comentarios": [
            {
                "decripcion": "This code just update the first matched item in the array. Wrong answer.",
                "fecha": { "$date" : "2019-02-07T18:38:22Z" },
                "usuario": "Hamlett",
                "usuario_id": 1769
            },
            {
                "decripcion": "It works for v2.6. You may be at a older version? Here's its doc docs.mongodb.com/manual/reference/method/db.collection.update/\u2026",
                "fecha": { "$date" : "2019-05-16T18:57:25Z" },
                "usuario": "Jialin Zou",
                "usuario_id": 1770
            },
            {
                "decripcion": "The docs for the positional update operator states that it only applies to the first match docs.mongodb.com/v2.6/reference/operator/update/positional/\u2026",
                "fecha": { "$date" : "2020-08-12T09:38:18Z" },
                "usuario": "Sam",
                "usuario_id": 1553
            }
        ],
        "usuario": "Pranay Saha",
        "usuario_id": 1771
    },
    {
        "_id": 1017,
        "fecha": { "$date" : "2017-04-10T05:25:37Z" },
        "decripcion": "\nAs of Mongo 3.2 the answers to this question are mostly no longer correct. The new $lookup operator added to the aggregation pipeline is essentially identical to a left outer join:\n\nhttps://docs.mongodb.org/master/reference/operator/aggregation/lookup/#pipe._S_lookup\n\nFrom the docs:\n\n{\n   $lookup:\n     {\n       from: <collection to join>,\n       localField: <field from the input documents>,\n       foreignField: <field from the documents of the \"from\" collection>,\n       as: <output array field>\n     }\n}\n\n\nOf course Mongo is not a relational database, and the devs are being careful to recommend specific use cases for $lookup, but at least as of 3.2 doing join is now possible with MongoDB.\n    ",
        "votes": 336,
        "comentarios": [
            {
                "decripcion": "@clayton :  How about more then two collections?",
                "fecha": { "$date" : "2016-01-08T10:36:39Z" },
                "usuario": "Dipen Dedania",
                "usuario_id": 1772
            },
            {
                "decripcion": "@DipenDedania just add additional $lookup stages to the aggregation pipeline.",
                "fecha": { "$date" : "2016-01-09T01:01:05Z" },
                "usuario": "Clayton Gulick",
                "usuario_id": 1773
            },
            {
                "decripcion": "I cant join any field in array in left collection with its corresponding id in right collection.can anybody help me??",
                "fecha": { "$date" : "2016-02-01T16:52:32Z" },
                "usuario": "Prateek Singh",
                "usuario_id": 1774
            },
            {
                "decripcion": "I'm a little confused about this - is there any way to specify that you want only certain documents in the \"from\" collection, or does it automatically join all in the db at once?",
                "fecha": { "$date" : "2016-06-21T04:07:30Z" },
                "usuario": "user3413723",
                "usuario_id": 1775
            },
            {
                "decripcion": "Just wondering if the latest Spring Data MongoDB has support for 3.2?",
                "fecha": { "$date" : "2016-07-18T12:55:36Z" },
                "usuario": "gtiwari333",
                "usuario_id": 1776
            }
        ],
        "usuario": "Clayton Gulick",
        "usuario_id": 1773
    },
    {
        "_id": 1018,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nThis page on the official mongodb site addresses exactly this question:\nhttps://mongodb-documentation.readthedocs.io/en/latest/ecosystem/tutorial/model-data-for-ruby-on-rails.html\n\nWhen we display our list of stories, we'll need to show the name of the user who posted the story. If we were using a relational database, we could perform a join on users and stores, and get all our objects in a single query. But MongoDB does not support joins and so, at times, requires bit of denormalization. Here, this means caching the 'username' attribute.\nRelational purists may be feeling uneasy already, as if we were violating some universal law. But let\u2019s bear in mind that MongoDB collections are not equivalent to relational tables; each serves a unique design objective. A normalized table provides an atomic, isolated chunk of data. A document, however, more closely represents an object as a whole. In the case of a social news site, it can be argued that a username is intrinsic to the story being posted.\n\n    ",
        "votes": 150,
        "comentarios": [
            {
                "decripcion": "@dudelgrincen it's a paradigm shift from normalization and relational databases. The goal of a NoSQL is to read and write from the database very quickly. With BigData you're going to have scads of application and front end servers with lower numbers on DBs. You're expected to do millions of transactions a second.  Offload the heavy lifting from the database and put it onto the application level.  If you need deep analysis, you run an integration job that puts your data into an OLAP database.  You shouldn't be getting many deep queries from your OLTP dbs anyway.",
                "fecha": { "$date" : "2013-11-04T01:53:07Z" },
                "usuario": "Snowburnt",
                "usuario_id": 1777
            },
            {
                "decripcion": "@dudelgrincen I should also say that it's not for every project or design. If you have something that works in a SQL type database why change it? If you can't massage your schema to work with noSQL, then don't.",
                "fecha": { "$date" : "2013-11-12T00:30:21Z" },
                "usuario": "Snowburnt",
                "usuario_id": 1777
            },
            {
                "decripcion": "Migrations and a constantly evolving schemas are also a lot easier to manage on a NoSQL system.",
                "fecha": { "$date" : "2014-05-06T20:09:26Z" },
                "usuario": "justin",
                "usuario_id": 1778
            },
            {
                "decripcion": "What if the user has 3.540 posts in the website, and he does change his username in profile? Should every post be updated with the new username?",
                "fecha": { "$date" : "2016-03-02T17:39:55Z" },
                "usuario": "Ivo Pereira",
                "usuario_id": 1779
            },
            {
                "decripcion": "@IvoPereira Yes and that's exactly why one should avoid modeling data this way. There is an article that explains the same scenario and its consequences: Why You Should Never Use MongoDB",
                "fecha": { "$date" : "2017-11-30T20:43:24Z" },
                "usuario": "Omid",
                "usuario_id": 1780
            }
        ],
        "usuario": "William Stein",
        "usuario_id": 1781
    },
    {
        "_id": 1019,
        "fecha": { "$date" : "2014-03-30T03:12:08Z" },
        "decripcion": "\nWe can merge/join all data inside only one collection with a easy function in few lines using the mongodb client console, and now we could be able of perform the desired query.\nBelow a complete example,\n\n.- Authors:\n\ndb.authors.insert([\n    {\n        _id: 'a1',\n        name: { first: 'orlando', last: 'becerra' },\n        age: 27\n    },\n    {\n        _id: 'a2',\n        name: { first: 'mayra', last: 'sanchez' },\n        age: 21\n    }\n]);\n\n\n.- Categories:\n\ndb.categories.insert([\n    {\n        _id: 'c1',\n        name: 'sci-fi'\n    },\n    {\n        _id: 'c2',\n        name: 'romance'\n    }\n]);\n\n\n.- Books\n\ndb.books.insert([\n    {\n        _id: 'b1',\n        name: 'Groovy Book',\n        category: 'c1',\n        authors: ['a1']\n    },\n    {\n        _id: 'b2',\n        name: 'Java Book',\n        category: 'c2',\n        authors: ['a1','a2']\n    },\n]);\n\n\n.- Book lending\n\ndb.lendings.insert([\n    {\n        _id: 'l1',\n        book: 'b1',\n        date: new Date('01/01/11'),\n        lendingBy: 'jose'\n    },\n    {\n        _id: 'l2',\n        book: 'b1',\n        date: new Date('02/02/12'),\n        lendingBy: 'maria'\n    }\n]);\n\n\n.- The magic:\n\ndb.books.find().forEach(\n    function (newBook) {\n        newBook.category = db.categories.findOne( { \"_id\": newBook.category } );\n        newBook.lendings = db.lendings.find( { \"book\": newBook._id  } ).toArray();\n        newBook.authors = db.authors.find( { \"_id\": { $in: newBook.authors }  } ).toArray();\n        db.booksReloaded.insert(newBook);\n    }\n);\n\n\n.- Get the new collection data:\n\ndb.booksReloaded.find().pretty()\n\n\n.- Response :)\n\n{\n    \"_id\" : \"b1\",\n    \"name\" : \"Groovy Book\",\n    \"category\" : {\n        \"_id\" : \"c1\",\n        \"name\" : \"sci-fi\"\n    },\n    \"authors\" : [\n        {\n            \"_id\" : \"a1\",\n            \"name\" : {\n                \"first\" : \"orlando\",\n                \"last\" : \"becerra\"\n            },\n            \"age\" : 27\n        }\n    ],\n    \"lendings\" : [\n        {\n            \"_id\" : \"l1\",\n            \"book\" : \"b1\",\n            \"date\" : ISODate(\"2011-01-01T00:00:00Z\"),\n            \"lendingBy\" : \"jose\"\n        },\n        {\n            \"_id\" : \"l2\",\n            \"book\" : \"b1\",\n            \"date\" : ISODate(\"2012-02-02T00:00:00Z\"),\n            \"lendingBy\" : \"maria\"\n        }\n    ]\n}\n{\n    \"_id\" : \"b2\",\n    \"name\" : \"Java Book\",\n    \"category\" : {\n        \"_id\" : \"c2\",\n        \"name\" : \"romance\"\n    },\n    \"authors\" : [\n        {\n            \"_id\" : \"a1\",\n            \"name\" : {\n                \"first\" : \"orlando\",\n                \"last\" : \"becerra\"\n            },\n            \"age\" : 27\n        },\n        {\n            \"_id\" : \"a2\",\n            \"name\" : {\n                \"first\" : \"mayra\",\n                \"last\" : \"sanchez\"\n            },\n            \"age\" : 21\n        }\n    ],\n    \"lendings\" : [ ]\n}\n\n\nI hope this lines can help you.\n    ",
        "votes": 148,
        "comentarios": [
            {
                "decripcion": "i'm wondering if this same code can be ran using doctrine mongodb?",
                "fecha": { "$date" : "2014-05-30T13:46:38Z" },
                "usuario": "abbood",
                "usuario_id": 1782
            },
            {
                "decripcion": "What happens when one of the references objects gets an update? Does that update automatically reflect in the book object? Or does that loop need to run again?",
                "fecha": { "$date" : "2014-06-04T05:55:27Z" },
                "usuario": "balupton",
                "usuario_id": 1783
            },
            {
                "decripcion": "This is fine as long as your data is small. It is going to bring each book content to your client and then fetch each category, lending and authors one by one. The moment your books are in thousands, this would go really really slow.  A better technique probably would be to use aggregation pipeline and output the merged data into a separate collection. Let me get back to it again. I will add that an answer.",
                "fecha": { "$date" : "2014-06-19T15:31:04Z" },
                "usuario": "Sandeep Giri",
                "usuario_id": 1784
            },
            {
                "decripcion": "Can you adapt your  algorithm to this other example? stackoverflow.com/q/32718079/287948",
                "fecha": { "$date" : "2015-09-22T14:13:42Z" },
                "usuario": "Peter Krauss",
                "usuario_id": 639
            },
            {
                "decripcion": "@SandeepGiri how can i do the aggregate pipeline since i have really really intensive data in separated collection need join ??",
                "fecha": { "$date" : "2015-10-07T20:16:32Z" },
                "usuario": "Yassine Abdul-Rahman",
                "usuario_id": 1785
            }
        ],
        "usuario": "Orlando Becerra",
        "usuario_id": 1786
    },
    {
        "_id": 1020,
        "fecha": { "$date" : "2010-02-28T11:34:00Z" },
        "decripcion": "\nYou have to do it the way you described. MongoDB is a non-relational database and doesn't support joins. \n    ",
        "votes": 37,
        "comentarios": [
            {
                "decripcion": "Seems wrong performance wise coming from a sql server background, but its maybe not that bad with a document db?",
                "fecha": { "$date" : "2010-07-15T18:20:39Z" },
                "usuario": "terjetyl",
                "usuario_id": 1787
            },
            {
                "decripcion": "from a sql server background as well, I would appreciate MongoDB taking a 'result set' (with selected returned fields) as input for a new query in one go, much like nested queries in SQL",
                "fecha": { "$date" : "2010-11-26T23:17:37Z" },
                "usuario": "Stijn Sanders",
                "usuario_id": 1788
            },
            {
                "decripcion": "@terjetyl You have to really plan for it.  What fields are you going be presenting on the front end, if it's a limited amount in an individual view then you take those as embedded documents. The key is to not need to do joins.  If you want to do deep analysis, you do it after the fact in another database.  Run a job that transforms the data into an OLAP cube for optimal performance.",
                "fecha": { "$date" : "2013-11-04T01:56:20Z" },
                "usuario": "Snowburnt",
                "usuario_id": 1777
            },
            {
                "decripcion": "From mongo 3.2 version left joins are supported.",
                "fecha": { "$date" : "2015-11-26T11:12:06Z" },
                "usuario": "Somnath Muluk",
                "usuario_id": 1789
            }
        ],
        "usuario": "Otto Allmendinger",
        "usuario_id": 1790
    },
    {
        "_id": 1021,
        "fecha": { "$date" : "2021-06-11T22:17:32Z" },
        "decripcion": "\nWith right combination of $lookup, $project and $match, you can join mutiple tables on multiple parameters. This is because they can be chained multiple times.\nSuppose we want to do following (reference)\nSELECT S.* FROM LeftTable S\nLEFT JOIN RightTable R ON S.ID = R.ID AND S.MID = R.MID  \nWHERE R.TIM > 0 AND S.MOB IS NOT NULL\n\nStep 1: Link all tables\nyou can $lookup as many tables as you want.\n$lookup - one for each table in query\n$unwind - correctly denormalises data , else it'd be wrapped in arrays\nPython code..\ndb.LeftTable.aggregate([\n                        # connect all tables\n\n                        {\"$lookup\": {\n                          \"from\": \"RightTable\",\n                          \"localField\": \"ID\",\n                          \"foreignField\": \"ID\",\n                          \"as\": \"R\"\n                        }},\n                        {\"$unwind\": \"R\"}\n                   \n                        ])\n\nStep 2: Define all conditionals\n$project : define all conditional statements here, plus all the variables you'd like to select.\nPython Code..\ndb.LeftTable.aggregate([\n                        # connect all tables\n\n                        {\"$lookup\": {\n                          \"from\": \"RightTable\",\n                          \"localField\": \"ID\",\n                          \"foreignField\": \"ID\",\n                          \"as\": \"R\"\n                        }},\n                        {\"$unwind\": \"R\"},\n\n                        # define conditionals + variables\n\n                        {\"$project\": {\n                          \"midEq\": {\"$eq\": [\"$MID\", \"$R.MID\"]},\n                          \"ID\": 1, \"MOB\": 1, \"MID\": 1\n                        }}\n                        ])\n\nStep 3: Join all the conditionals\n$match - join all conditions using OR or AND etc. There can be multiples of these.\n$project: undefine all conditionals\nComplete Python Code..\ndb.LeftTable.aggregate([\n                        # connect all tables\n\n                        {\"$lookup\": {\n                          \"from\": \"RightTable\",\n                          \"localField\": \"ID\",\n                          \"foreignField\": \"ID\",\n                          \"as\": \"R\"\n                        }},\n                        {\"$unwind\": \"$R\"},\n\n                        # define conditionals + variables\n\n                        {\"$project\": {\n                          \"midEq\": {\"$eq\": [\"$MID\", \"$R.MID\"]},\n                          \"ID\": 1, \"MOB\": 1, \"MID\": 1\n                        }},\n\n                        # join all conditionals\n\n                        {\"$match\": {\n                          \"$and\": [\n                            {\"R.TIM\": {\"$gt\": 0}}, \n                            {\"MOB\": {\"$exists\": True}},\n                            {\"midEq\": {\"$eq\": True}}\n                        ]}},\n\n                        # undefine conditionals\n\n                        {\"$project\": {\n                          \"midEq\": 0\n                        }}\n\n                        ])\n\nPretty much any combination of tables, conditionals and joins can be done in this manner.\n    ",
        "votes": 26,
        "comentarios": [
            {
                "decripcion": "Thanks !, liked the format of your answer.",
                "fecha": { "$date" : "2021-01-12T09:59:32Z" },
                "usuario": "Anindhito Irmandharu",
                "usuario_id": 1791
            },
            {
                "decripcion": "Perfect answer, for me it gave an error for {\"$unwind \":\"R\"}, if it is changed to {\"$unwind\":\"$R\"} it works perfect!",
                "fecha": { "$date" : "2021-04-29T16:46:25Z" },
                "usuario": "Vallemar",
                "usuario_id": 1792
            }
        ],
        "usuario": "sbharti",
        "usuario_id": 1793
    },
    {
        "_id": 1022,
        "fecha": { "$date" : "2016-02-17T13:06:01Z" },
        "decripcion": "\nAs others have pointed out you are trying to create a relational database from none relational database which you really don't want to do but anyways, if you have a case that you have to do this here is a solution you can use. We first do a foreach find on collection A( or in your case users) and then we get each item as an object then we use object property (in your case uid) to lookup in our second collection (in your case comments) if we can find it then we have a match and we can print or do something with it. \nHope this helps you and good luck :)\n\ndb.users.find().forEach(\nfunction (object) {\n    var commonInBoth=db.comments.findOne({ \"uid\": object.uid} );\n    if (commonInBoth != null) {\n        printjson(commonInBoth) ;\n        printjson(object) ;\n    }else {\n        // did not match so we don't care in this case\n    }\n});\n\n    ",
        "votes": 19,
        "comentarios": [
            {
                "decripcion": "Wont this find the item we are currently looping on?",
                "fecha": { "$date" : "2017-03-29T12:58:32Z" },
                "usuario": "Skarlinski",
                "usuario_id": 1794
            }
        ],
        "usuario": "grepit",
        "usuario_id": 1795
    },
    {
        "_id": 1023,
        "fecha": { "$date" : "2015-08-28T16:42:40Z" },
        "decripcion": "\nHere's an example of a \"join\" * Actors and Movies collections:\n\nhttps://github.com/mongodb/cookbook/blob/master/content/patterns/pivot.txt\n\nIt makes use of .mapReduce() method\n\n* join - an alternative to join in document-oriented databases\n    ",
        "votes": 17,
        "comentarios": [
            {
                "decripcion": "-1, This is NOT joining data from two collections. It is using data from a single collection (actors) pivoting data around. So that things that were keys are now values and values are now keys... very different than a JOIN.",
                "fecha": { "$date" : "2012-05-22T17:44:52Z" },
                "usuario": "Evan Teran",
                "usuario_id": 1796
            },
            {
                "decripcion": "This exactly what you have to do, MongoDB is not relational but document oriented. MapReduce allows to play with data with big performance (you can use cluster etc....) but even for simple cases, its very useful !",
                "fecha": { "$date" : "2012-06-17T19:16:28Z" },
                "usuario": "Thomas Decaux",
                "usuario_id": 1797
            }
        ],
        "usuario": "antitoxic",
        "usuario_id": 1798
    },
    {
        "_id": 1024,
        "fecha": { "$date" : "2016-08-09T13:35:48Z" },
        "decripcion": "\nYou can join two collection in Mongo by using lookup which is offered in 3.2 version. In your case the query would be\n\ndb.comments.aggregate({\n    $lookup:{\n        from:\"users\",\n        localField:\"uid\",\n        foreignField:\"uid\",\n        as:\"users_comments\"\n    }\n})\n\n\nor you can also join with respect to users then there will be a little change as given below.\n\ndb.users.aggregate({\n    $lookup:{\n        from:\"comments\",\n        localField:\"uid\",\n        foreignField:\"uid\",\n        as:\"users_comments\"\n    }\n})\n\n\nIt will work just same as left and right join in SQL.\n    ",
        "votes": 15,
        "comentarios": [],
        "usuario": "jarry jafery",
        "usuario_id": 1799
    },
    {
        "_id": 1025,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\n$lookup (aggregation) \n\nPerforms a left outer join to an unsharded collection in the same database to filter in documents from the \u201cjoined\u201d collection for processing. To each input document, the $lookup stage adds a new array field whose elements are the matching documents from the \u201cjoined\u201d collection. The $lookup stage passes these reshaped documents to the next stage.\nThe $lookup stage has the following syntaxes:\n\nEquality Match\n\nTo perform an equality match between a field from the input documents with a field from the documents of the \u201cjoined\u201d collection, the $lookup stage has the following syntax:\n\n{\n   $lookup:\n     {\n       from: <collection to join>,\n       localField: <field from the input documents>,\n       foreignField: <field from the documents of the \"from\" collection>,\n       as: <output array field>\n     }\n}\n\nThe operation would correspond to the following pseudo-SQL statement:\nSELECT *, <output array field>\nFROM collection\nWHERE <output array field> IN (SELECT <documents as determined from the pipeline>\n                               FROM <collection to join>\n                               WHERE <pipeline> );\n\nMongo URL\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "sub-query is totally different than join, if your left side table is huge, sub-query means each row has to do a query itself. it will become very slow. join is very fast in sql.",
                "fecha": { "$date" : "2020-04-30T02:14:30Z" },
                "usuario": "yww325",
                "usuario_id": 1800
            }
        ],
        "usuario": "GoutamS",
        "usuario_id": 1801
    },
    {
        "_id": 1026,
        "fecha": { "$date" : "2013-11-27T19:18:51Z" },
        "decripcion": "\nIt depends on what you're trying to do.\n\nYou currently have it set up as a normalized database, which is fine, and the way you are doing it is appropriate. \n\nHowever, there are other ways of doing it.\n\nYou could have a posts collection that has imbedded comments for each post with references to the users that you can iteratively query to get.  You could store the user's name with the comments, you could store them all in one document.\n\nThe thing with NoSQL is it's designed for flexible schemas and very fast reading and writing.  In a typical Big Data farm the database is the biggest bottleneck, you have fewer database engines than you do application and front end servers...they're more expensive but more powerful, also hard drive space is very cheap comparatively.  Normalization comes from the concept of trying to save space, but it comes with a cost at making your databases perform complicated Joins and verifying the integrity of relationships, performing cascading operations.  All of which saves the developers some headaches if they designed the database properly.\n\nWith NoSQL, if you accept that redundancy and storage space aren't issues because of their cost (both in processor time required to do updates and hard drive costs to store extra data), denormalizing isn't an issue (for embedded arrays that become hundreds of thousands of items it can be a performance issue, but most of the time that's not a problem).  Additionally you'll have several application and front end servers for every database cluster.  Have them do the heavy lifting of the joins and let the database servers stick to reading and writing. \n\nTL;DR: What you're doing is fine, and there are other ways of doing it.  Check out the mongodb documentation's data model patterns for some great examples. http://docs.mongodb.org/manual/data-modeling/\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "\"Normalization comes from the concept of trying to save space\"  I question this. IMHO normalization comes from the concept of avoiding redundancy. Say you store the name of a user along with a blogpost. What if she marries? In a not normalized model you will have to wade through all posts and change the name. In a normalized model you usually change ONE record.",
                "fecha": { "$date" : "2013-11-27T13:28:43Z" },
                "usuario": "DanielKhan",
                "usuario_id": 1802
            },
            {
                "decripcion": "@DanielKhan preventing redundancy and saving space are similar concepts, but on re-analysis I do agree, redundancy is the root cause for this design. I'll reword.  Thanks for the note.",
                "fecha": { "$date" : "2013-11-27T19:15:58Z" },
                "usuario": "Snowburnt",
                "usuario_id": 1777
            }
        ],
        "usuario": "Snowburnt",
        "usuario_id": 1777
    },
    {
        "_id": 1027,
        "fecha": { "$date" : "2015-11-23T13:13:55Z" },
        "decripcion": "\nThere is a specification that a lot of drivers support that's called DBRef.\n\n\n  DBRef is a more formal specification for creating references between documents.  DBRefs (generally) include a collection name as well as an object id.  Most developers only use DBRefs if the collection can change from one document to the next.  If your referenced collection will always be the same, the manual references outlined above are more efficient.\n\n\nTaken from MongoDB Documentation: Data Models > Data Model Reference > \nDatabase References\n    ",
        "votes": 11,
        "comentarios": [],
        "usuario": "Pickels",
        "usuario_id": 1803
    },
    {
        "_id": 1028,
        "fecha": { "$date" : "2016-10-22T04:19:49Z" },
        "decripcion": "\nBefore 3.2.6, Mongodb does not support join query as like mysql. below solution which works for you.   \n\n db.getCollection('comments').aggregate([\n        {$match : {pid : 444}},\n        {$lookup: {from: \"users\",localField: \"uid\",foreignField: \"uid\",as: \"userData\"}},\n   ])\n\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "Anish Agarwal",
        "usuario_id": 1804
    },
    {
        "_id": 1029,
        "fecha": { "$date" : "2013-06-14T15:21:57Z" },
        "decripcion": "\nYou can run SQL queries including join on MongoDB with mongo_fdw from Postgres.\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "metdos",
        "usuario_id": 1805
    },
    {
        "_id": 1030,
        "fecha": { "$date" : "2015-10-15T21:15:44Z" },
        "decripcion": "\nMongoDB does not allow joins, but you can use plugins to handle that. Check the mongo-join plugin. It's the best and I have already used it. You can install it using npm directly like this npm install mongo-join. You can check out the full documentation with examples.\n\n(++) really helpful tool when we need to join (N) collections\n\n(--) we can apply conditions just on the top level of the query\n\nExample\n\nvar Join = require('mongo-join').Join, mongodb = require('mongodb'), Db = mongodb.Db, Server = mongodb.Server;\ndb.open(function (err, Database) {\n    Database.collection('Appoint', function (err, Appoints) {\n\n        /* we can put conditions just on the top level */\n        Appoints.find({_id_Doctor: id_doctor ,full_date :{ $gte: start_date },\n            full_date :{ $lte: end_date }}, function (err, cursor) {\n            var join = new Join(Database).on({\n                field: '_id_Doctor', // <- field in Appoints document\n                to: '_id',         // <- field in User doc. treated as ObjectID automatically.\n                from: 'User'  // <- collection name for User doc\n            }).on({\n                field: '_id_Patient', // <- field in Appoints doc\n                to: '_id',         // <- field in User doc. treated as ObjectID automatically.\n                from: 'User'  // <- collection name for User doc\n            })\n            join.toArray(cursor, function (err, joinedDocs) {\n\n                /* do what ever you want here */\n                /* you can fetch the table and apply your own conditions */\n                .....\n                .....\n                .....\n\n\n                resp.status(200);\n                resp.json({\n                    \"status\": 200,\n                    \"message\": \"success\",\n                    \"Appoints_Range\": joinedDocs,\n\n\n                });\n                return resp;\n\n\n            });\n\n    });\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Amine_Dev",
        "usuario_id": 1806
    },
    {
        "_id": 1031,
        "fecha": { "$date" : "2017-12-13T14:28:43Z" },
        "decripcion": "\nYou can do it using the aggregation pipeline, but it's a pain to write it yourself. \n\nYou can use mongo-join-query to create the aggregation pipeline automatically from your query.\n\nThis is how your query would look like:\n\nconst mongoose = require(\"mongoose\");\nconst joinQuery = require(\"mongo-join-query\");\n\njoinQuery(\n    mongoose.models.Comment,\n    {\n        find: { pid:444 },\n        populate: [\"uid\"]\n    },\n    (err, res) => (err ? console.log(\"Error:\", err) : console.log(\"Success:\", res.results))\n);\n\n\nYour result would have the user object in the uid field and you can link as many levels deep as you want. You can populate the reference to the user, which makes reference to a Team, which makes reference to something else, etc.. \n\nDisclaimer: I wrote mongo-join-query to tackle this exact problem.\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Marcelo Lazaroni",
        "usuario_id": 1807
    },
    {
        "_id": 1032,
        "fecha": { "$date" : "2012-09-07T17:30:48Z" },
        "decripcion": "\nplayORM can do it for you using S-SQL(Scalable SQL) which just adds partitioning such that you can do joins within partitions.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Dean Hiller",
        "usuario_id": 981
    },
    {
        "_id": 1033,
        "fecha": { "$date" : "2015-09-04T15:23:14Z" },
        "decripcion": "\nNope, it doesn't seem like you're doing it wrong.  MongoDB joins are \"client side\".  Pretty much like you said:\n\n\n  At the moment, I am first getting the comments which match my criteria, then figuring out all the uid's in that result set, getting the user objects, and merging them with the comment's results. Seems like I am doing it wrong.\n\n\n1) Select from the collection you're interested in.\n2) From that collection pull out ID's you need\n3) Select from other collections\n4) Decorate your original results.\n\n\nIt's not a \"real\" join, but it's actually alot more useful than a SQL join because you don't have to deal with duplicate rows for \"many\" sided joins, instead your decorating the originally selected set.\n\nThere is alot of nonsense and FUD on this page.  Turns out 5 years later MongoDB is still a thing.\n    ",
        "votes": -2,
        "comentarios": [
            {
                "decripcion": "'you don't have to deal with duplicate rows for \"many\" sided joins' - no idea what you mean by this. Can you clarify?",
                "fecha": { "$date" : "2015-09-20T20:23:29Z" },
                "usuario": "Mark Amery",
                "usuario_id": 149
            },
            {
                "decripcion": "@MarkAmery, sure.  In SQL a n-n relationship will return duplicate rows.  E.g. Friends.  If Bob is friends with Mary and Jane, you'll get 2 rows for Bob:  Bob,Mary and Bob,Jane.  2 Bobs is a lie, there is only one Bob.  With client-side joins you can start with Bob and decorate how you like:  Bob, \"Mary and Jane\".  SQL let's you do this with subqueries, but that's doing work on the db server that could be done on the client.",
                "fecha": { "$date" : "2015-09-21T14:51:14Z" },
                "usuario": "Michael Cole",
                "usuario_id": 1808
            }
        ],
        "usuario": "Michael Cole",
        "usuario_id": 1808
    },
    {
        "_id": 1034,
        "fecha": { "$date" : "2015-09-23T06:57:27Z" },
        "decripcion": "\nI think, if You need normalized data tables  - You need to try some other database solutions.\n\nBut I've foun that sollution for MOngo on Git\nBy the way, in inserts code - it has movie's name, but noi movie's ID.\n\nProblem\n\nYou have a collection of Actors with an array of the Movies they've done. \n\nYou want to generate a collection of Movies with an array of Actors in each.\n\nSome sample data\n\n db.actors.insert( { actor: \"Richard Gere\", movies: ['Pretty Woman', 'Runaway Bride', 'Chicago'] });\n db.actors.insert( { actor: \"Julia Roberts\", movies: ['Pretty Woman', 'Runaway Bride', 'Erin Brockovich'] });\n\n\nSolution\n\nWe need to loop through each movie in the Actor document and emit each Movie individually.\n\nThe catch here is in the reduce phase. We cannot emit an array from the reduce phase, so we must build an Actors array inside of the \"value\" document that is returned.\n\nThe code\n\nmap = function() {\n  for(var i in this.movies){\n    key = { movie: this.movies[i] };\n    value = { actors: [ this.actor ] };\n    emit(key, value);\n  }\n}\n\nreduce = function(key, values) {\n  actor_list = { actors: [] };\n  for(var i in values) {\n    actor_list.actors = values[i].actors.concat(actor_list.actors);\n  }\n  return actor_list;\n}\n\n\nNotice how actor_list is actually a javascript object that contains an array. Also notice that map emits the same structure.\n\nRun the following to execute the map / reduce, output it to the \"pivot\" collection and print the result:\n\nprintjson(db.actors.mapReduce(map, reduce, \"pivot\"));\n  db.pivot.find().forEach(printjson);\n\nHere is the sample output, note that \"Pretty Woman\" and \"Runaway Bride\" have both \"Richard Gere\" and \"Julia Roberts\".\n\n{ \"_id\" : { \"movie\" : \"Chicago\" }, \"value\" : { \"actors\" : [ \"Richard Gere\" ] } }\n{ \"_id\" : { \"movie\" : \"Erin Brockovich\" }, \"value\" : { \"actors\" : [ \"Julia Roberts\" ] } }\n{ \"_id\" : { \"movie\" : \"Pretty Woman\" }, \"value\" : { \"actors\" : [ \"Richard Gere\", \"Julia Roberts\" ] } }\n{ \"_id\" : { \"movie\" : \"Runaway Bride\" }, \"value\" : { \"actors\" : [ \"Richard Gere\", \"Julia Roberts\" ] } }\n\n\n\n    ",
        "votes": -2,
        "comentarios": [
            {
                "decripcion": "Note that most of the content of this answer (i.e. the bit that's in comprehensible English) is copied from the MongoDB cookbook at the GitHub link the answerer provided.",
                "fecha": { "$date" : "2015-10-05T14:23:53Z" },
                "usuario": "Mark Amery",
                "usuario_id": 149
            }
        ],
        "usuario": "Max Sherbakov",
        "usuario_id": 1809
    },
    {
        "_id": 1035,
        "fecha": { "$date" : "2015-03-24T09:27:19Z" },
        "decripcion": "\nWe can merge two collection by using mongoDB sub query. Here is example,\nCommentss--\n\n`db.commentss.insert([\n  { uid:12345, pid:444, comment:\"blah\" },\n  { uid:12345, pid:888, comment:\"asdf\" },\n  { uid:99999, pid:444, comment:\"qwer\" }])`\n\n\nUserss--\n\ndb.userss.insert([\n  { uid:12345, name:\"john\" },\n  { uid:99999, name:\"mia\"  }])\n\n\nMongoDB sub query for JOIN--\n\n`db.commentss.find().forEach(\n    function (newComments) {\n        newComments.userss = db.userss.find( { \"uid\": newComments.uid } ).toArray();\n        db.newCommentUsers.insert(newComments);\n    }\n);`\n\n\nGet result from newly generated Collection--\n\ndb.newCommentUsers.find().pretty()\n\n\nResult--\n\n`{\n    \"_id\" : ObjectId(\"5511236e29709afa03f226ef\"),\n    \"uid\" : 12345,\n    \"pid\" : 444,\n    \"comment\" : \"blah\",\n    \"userss\" : [\n        {\n            \"_id\" : ObjectId(\"5511238129709afa03f226f2\"),\n            \"uid\" : 12345,\n            \"name\" : \"john\"\n        }\n    ]\n}\n{\n    \"_id\" : ObjectId(\"5511236e29709afa03f226f0\"),\n    \"uid\" : 12345,\n    \"pid\" : 888,\n    \"comment\" : \"asdf\",\n    \"userss\" : [\n        {\n            \"_id\" : ObjectId(\"5511238129709afa03f226f2\"),\n            \"uid\" : 12345,\n            \"name\" : \"john\"\n        }\n    ]\n}\n{\n    \"_id\" : ObjectId(\"5511236e29709afa03f226f1\"),\n    \"uid\" : 99999,\n    \"pid\" : 444,\n    \"comment\" : \"qwer\",\n    \"userss\" : [\n        {\n            \"_id\" : ObjectId(\"5511238129709afa03f226f3\"),\n            \"uid\" : 99999,\n            \"name\" : \"mia\"\n        }\n    ]\n}`\n\n\nHope so this will help.\n    ",
        "votes": -5,
        "comentarios": [
            {
                "decripcion": "Why did you basically copy this nearly identical, one-year-old answer?  stackoverflow.com/a/22739813/4186945",
                "fecha": { "$date" : "2015-05-05T20:45:17Z" },
                "usuario": "hackel",
                "usuario_id": 1810
            }
        ],
        "usuario": "Krishna",
        "usuario_id": 1811
    },
    {
        "_id": 1036,
        "fecha": { "$date" : "2020-06-26T18:28:35Z" },
        "decripcion": "\nThis is more an art than a science. The Mongo Documentation on Schemas is a good reference, but here are some things to consider:\n\nPut as much in as possible\nThe joy of a Document database is that it eliminates lots of Joins.  Your first instinct should be to place as much in a single document as you can.  Because MongoDB documents have structure, and because you can efficiently query within that structure (this means that you can take the part of the document that you need, so document size shouldn't worry you much) there is no immediate need to normalize data like you would in SQL.  In particular any data that is not useful apart from its parent document should be part of the same document.\n\nSeparate data that can be referred to from multiple places into its own collection.\nThis is not so much a \"storage space\" issue as it is a \"data consistency\" issue.  If many records will refer to the same data it is more efficient and less error prone to update a single record and keep references to it in other places.\n\nDocument size considerations\nMongoDB imposes a 4MB (16MB with 1.8) size limit on a single document.  In a world of GB of data this sounds small, but it is also 30 thousand tweets or 250 typical Stack Overflow answers or 20 flicker photos.  On the other hand, this is far more information than one might want to present at one time on a typical web page.  First consider what will make your queries easier.  In many cases concern about document sizes will be premature optimization.\n\nComplex data structures:\nMongoDB can store arbitrary deep nested data structures, but cannot search them efficiently.  If your data forms a tree, forest or graph, you effectively need to store each node and its edges in a separate document.  (Note that there are data stores specifically designed for this type of data that one should consider as well)\nIt has also been pointed out than it is impossible to return a subset of elements in a document.  If you need to pick-and-choose a few bits of each document, it will be easier to separate them out.\n\nData Consistency\nMongoDB makes a trade off between efficiency and consistency.  The rule is changes to a single document are always atomic, while updates to multiple documents should never be assumed to be atomic.  There is also no way to \"lock\" a record on the server (you can build this into the client's logic using for example a \"lock\" field).  When you design your schema consider how you will keep your data consistent.  Generally, the more that you keep in a document the better.\n\n\nFor what you are describing, I would embed the comments, and give each comment an id field with an ObjectID.  The ObjectID has a time stamp embedded in it so you can use that instead of created at if you like.\n    ",
        "votes": 821,
        "comentarios": [
            {
                "decripcion": "I'd like to add to the OP question: My comments model contains the user name and link to his avatar. What would be the best approach, considering a user can modify his name/avatar?",
                "fecha": { "$date" : "2013-02-05T09:36:17Z" },
                "usuario": "user1102018",
                "usuario_id": 1815
            },
            {
                "decripcion": "Regarding 'Complex data structures', it seems it is possible to return a subset of elements in a document using the aggregation framework (try $unwind).",
                "fecha": { "$date" : "2013-09-23T10:33:08Z" },
                "usuario": "Eyal Roth",
                "usuario_id": 1816
            },
            {
                "decripcion": "Errr, This technique was either not possibel or not widely known in MongoDB at the beginning of 2012. Given the popularity of this question, I would encourage you to write your own updated answer. I'm afraid I've stepped away from active development on MongoDB and I am not in a good position to address you comment within my original post.",
                "fecha": { "$date" : "2013-09-27T01:51:07Z" },
                "usuario": "John F. Miller",
                "usuario_id": 1817
            },
            {
                "decripcion": "16MB = 30 million tweets? ths menas about 0,5 byte per tweet?!",
                "fecha": { "$date" : "2014-11-15T19:13:40Z" },
                "usuario": "Paolo",
                "usuario_id": 1818
            },
            {
                "decripcion": "Yes, it appears I was off by a factor of 1000 and some people find this important.  I will edit the post. WRT 560bytes per tweet, when I rote this in 2011 twitter was still tied to text messages and Ruby 1.4 strings; in other words still ASCII chars only.",
                "fecha": { "$date" : "2017-09-08T18:52:02Z" },
                "usuario": "John F. Miller",
                "usuario_id": 1817
            }
        ],
        "usuario": "John F. Miller",
        "usuario_id": 1817
    },
    {
        "_id": 1037,
        "fecha": { "$date" : "2015-01-13T02:19:16Z" },
        "decripcion": "\nIn general, embed is good if you have one-to-one or one-to-many relationships between entities, and reference is good if you have many-to-many relationships.\n    ",
        "votes": 58,
        "comentarios": [
            {
                "decripcion": "can you please add a reference link? Thanks.",
                "fecha": { "$date" : "2015-11-25T09:45:06Z" },
                "usuario": "db80",
                "usuario_id": 1819
            },
            {
                "decripcion": "How do you find a specific comment with this design of one to many?",
                "fecha": { "$date" : "2019-08-09T01:58:56Z" },
                "usuario": "Mauricio Pastorini",
                "usuario_id": 1820
            },
            {
                "decripcion": "coderwall.com/p/px3c7g/\u2026",
                "fecha": { "$date" : "2020-04-22T08:23:03Z" },
                "usuario": "Kaherdin",
                "usuario_id": 1821
            },
            {
                "decripcion": "docs.mongodb.com/manual/tutorial/\u2026 @db80",
                "fecha": { "$date" : "2020-08-22T05:10:26Z" },
                "usuario": "ram",
                "usuario_id": 1822
            },
            {
                "decripcion": "Embeddings are not the way to go in the one-to-many if the many in this case is a large number. In that case reference or partial embeddings should be used instead",
                "fecha": { "$date" : "2021-04-30T05:45:55Z" },
                "usuario": "Abdelrhman Hosny",
                "usuario_id": 1823
            }
        ],
        "usuario": "ywang1724",
        "usuario_id": 1824
    },
    {
        "_id": 1038,
        "fecha": { "$date" : "2014-07-28T09:18:42Z" },
        "decripcion": "\nWell, I'm a bit late but still would like to share my way of schema creation.\n\nI have schemas for everything that can be described by a word, like you would do it in the classical OOP.\n\nE.G.\n\n\nComment\nAccount\nUser\nBlogpost\n...\n\n\nEvery schema can be saved as a Document or Subdocument, so I declare this for each schema.\n\nDocument:\n\n\nCan be used as a reference. (E.g. the user made a comment -> comment has a \"made by\" reference to user)\nIs a \"Root\" in you application. (E.g. the blogpost -> there is a page about the blogpost)\n\n\nSubdocument:\n\n\nCan only be used once / is never a reference. (E.g. Comment is saved in the blogpost)\nIs never a \"Root\" in you application. (The comment just shows up in the blogpost page but the page is still about the blogpost)\n\n    ",
        "votes": 25,
        "comentarios": [],
        "usuario": "Silom",
        "usuario_id": 1825
    },
    {
        "_id": 1039,
        "fecha": { "$date" : "2011-03-21T17:19:37Z" },
        "decripcion": "\n\n  If I want to edit a specified comment, how to get its content and its question?\n\n\nYou can query by sub-document: db.question.find({'comments.content' : 'xxx'}).\n\nThis will return the whole Question document. To edit the specified comment, you then have to find the comment on the client, make the edit and save that back to the DB.\n\nIn general, if your document contains an array of objects, you'll find that those sub-objects will need to be modified client side.\n    ",
        "votes": 24,
        "comentarios": [
            {
                "decripcion": "this won't work if two comments have identical contents. one might argue that we could also add author to the search query, which still wouldn't work if the author made two identical comments with same content",
                "fecha": { "$date" : "2015-07-24T22:45:49Z" },
                "usuario": "Steel Brain",
                "usuario_id": 1826
            },
            {
                "decripcion": "@SteelBrain: if he had kept the comment index, dot notation might help. see stackoverflow.com/a/33284416/1587329",
                "fecha": { "$date" : "2015-10-22T15:11:07Z" },
                "usuario": "serv-inc",
                "usuario_id": 1827
            },
            {
                "decripcion": "I don't understand how this answer has 34 upvotes, the second multiple people comment the same thing the whole system would break. This is an absolutely terrible design and should never be used. The way @user does it is the way to go",
                "fecha": { "$date" : "2017-03-23T09:30:51Z" },
                "usuario": "user2073973",
                "usuario_id": 1828
            },
            {
                "decripcion": "@user2073973 So what's the recommended way to fetch such comments?",
                "fecha": { "$date" : "2021-04-08T09:23:32Z" },
                "usuario": "I Want Answers",
                "usuario_id": 1829
            }
        ],
        "usuario": "Gates VP",
        "usuario_id": 1830
    },
    {
        "_id": 1040,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nI came across this small presentation while researching this question on my own. I was surprised at how well it was laid out, both the info and the presentation of it.\nhttp://openmymind.net/Multiple-Collections-Versus-Embedded-Documents\nIt summarized:\n\nAs a general rule, if you have a lot of [child documents] or if they are large, a separate collection might be best.\nSmaller and/or fewer documents tend to be a natural fit for embedding.\n\n    ",
        "votes": 23,
        "comentarios": [
            {
                "decripcion": "How much is a lot? 3? 10? 100? What's large? 1kb? 1MB? 3 fields? 20 fields? What is smaller / fewer?",
                "fecha": { "$date" : "2017-10-24T13:07:27Z" },
                "usuario": "Traxo",
                "usuario_id": 1831
            },
            {
                "decripcion": "That's a good question, and one I don't have a specific answer for. The same presentation included a slide that said \"A document, including all its embedded documents and arrays, cannot exceed 16MB\", so that could be your cutoff, or just go with what seems reasonable/comfortable for your specific situation. In my current project, the majority of embedded documents are for 1:1 relationships, or 1:many where the embedded documents are really simple.",
                "fecha": { "$date" : "2017-10-24T21:01:52Z" },
                "usuario": "Chris Bloom",
                "usuario_id": 1736
            },
            {
                "decripcion": "See also the current top comment by @john-f-miller, which while also not providing specific numbers for a threshold does contain some additional pointers that should help guide your decision.",
                "fecha": { "$date" : "2017-10-24T21:05:45Z" },
                "usuario": "Chris Bloom",
                "usuario_id": 1736
            }
        ],
        "usuario": "Chris Bloom",
        "usuario_id": 1736
    },
    {
        "_id": 1041,
        "fecha": { "$date" : "2018-11-05T06:53:54Z" },
        "decripcion": "\nActually, I'm quite curious why nobody spoke about the UML specifications. A rule of thumb is that if you have an aggregation, then you should use references. But if it is a composition, then the coupling is stronger, and you should use embedded documents.\n\nAnd you will quickly understand why it is logical. If an object can exist independently of the parent, then you will want to access it even if the parent doesn't exist. As you just can't embed it in a non-existing parent, you have to make it live in it's own data structure. And if a parent exist, just link them together by adding a ref of the object in the parent. \n\nDon't really know what is the difference between the two relationships ?\nHere is a link explaining them:\n Aggregation vs Composition in UML\n    ",
        "votes": 18,
        "comentarios": [
            {
                "decripcion": "Why -1 ? Please give an explanation that would clarify the reason",
                "fecha": { "$date" : "2019-02-18T16:19:32Z" },
                "usuario": "Bonjour123",
                "usuario_id": 1832
            },
            {
                "decripcion": "Your view about embedded and references actually gave me one more strong point to defend my view in the future. But in some cases if you are using composition and embedding like you said, the memory usage will increase for large docs even if we use projections to limit the fields. So, it is not entirely based on relationships. To actually increase the performance of read queries by avoiding reading whole doc, we can use references even though the design has composition. Maybe that's why -1 I guess.",
                "fecha": { "$date" : "2020-10-14T16:53:34Z" },
                "usuario": "SkrewEverything",
                "usuario_id": 1833
            },
            {
                "decripcion": "Yes, you're right, one should also base his strategy depending on how he's going to retrieve the data, and the size of the embedded documents, +1",
                "fecha": { "$date" : "2020-10-17T21:29:58Z" },
                "usuario": "Bonjour123",
                "usuario_id": 1832
            }
        ],
        "usuario": "Bonjour123",
        "usuario_id": 1832
    },
    {
        "_id": 1042,
        "fecha": { "$date" : "2014-10-07T00:37:35Z" },
        "decripcion": "\nYes, we can use the reference in the document.To populate the another document just like sql i joins.In mongo db they dont have joins to mapping one to many relationship document.Instead that we can use populate to fulfill our scenario..\n\nvar mongoose = require('mongoose')\n  , Schema = mongoose.Schema\n\nvar personSchema = Schema({\n  _id     : Number,\n  name    : String,\n  age     : Number,\n  stories : [{ type: Schema.Types.ObjectId, ref: 'Story' }]\n});\n\nvar storySchema = Schema({\n  _creator : { type: Number, ref: 'Person' },\n  title    : String,\n  fans     : [{ type: Number, ref: 'Person' }]\n});\n\n\nPopulation is the process of automatically replacing the specified paths in the document with document(s) from other collection(s). We may populate a single document, multiple documents, plain object, multiple plain objects, or all objects returned from a query. Let's look at some examples.\n\nBetter you can get more information please visit :http://mongoosejs.com/docs/populate.html  \n    ",
        "votes": 15,
        "comentarios": [
            {
                "decripcion": "Mongoose will issue a seperate request for each populated field. This is different to SQL JOINS as they are performed on the server. This includes extra traffic between the app server and the mongodb server. Again, you might consider this when you're optimizing. Nevertheless, your anwser is still correct.",
                "fecha": { "$date" : "2015-12-02T14:46:51Z" },
                "usuario": "Max",
                "usuario_id": 1834
            }
        ],
        "usuario": "Narendran",
        "usuario_id": 1700
    },
    {
        "_id": 1043,
        "fecha": { "$date" : "2013-09-25T20:16:31Z" },
        "decripcion": "\nI know this is quite old but if you are looking for the answer to the OP's question on how to return only specified comment, you can use the $ (query) operator like this:\n\ndb.question.update({'comments.content': 'xxx'}, {'comments.$': true})\n\n    ",
        "votes": 14,
        "comentarios": [
            {
                "decripcion": "this won't work if two comments have identical contents. one might argue that we could also add author to the search query, which still wouldn't work if the author made two identical comments with same content",
                "fecha": { "$date" : "2015-07-24T22:46:14Z" },
                "usuario": "Steel Brain",
                "usuario_id": 1826
            },
            {
                "decripcion": "@SteelBrain: Well played sir, well played.",
                "fecha": { "$date" : "2018-08-07T19:53:30Z" },
                "usuario": "JakeStrang",
                "usuario_id": 1835
            }
        ],
        "usuario": "finspin",
        "usuario_id": 1836
    },
    {
        "_id": 1044,
        "fecha": { "$date" : "2017-05-23T12:10:48Z" },
        "decripcion": "\n\n  If I want to edit a specified comment, how do I get its content and\n  its question?\n\n\nIf you had kept track of the number of comments and the index of the comment you wanted to alter, you could use the dot operator (SO example).\n\nYou could do f.ex.\n\ndb.questions.update(\n    {\n        \"title\": \"aaa\"       \n    }, \n    { \n        \"comments.0.contents\": \"new text\"\n    }\n)\n\n\n(as another way to edit the comments inside the question)\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "serv-inc",
        "usuario_id": 1827
    },
    {
        "_id": 1045,
        "fecha": { "$date" : "2020-09-02T13:50:16Z" },
        "decripcion": "\nMongoDB gives freedom to be schema-less and this feature can result in pain in the long term if not thought or planned well,\nThere are 2 options either Embed or Reference. I will not go through definitions as the above answers have well defined them.\nWhen embedding you should answer one question is your embedded document going to grow, if yes then how much (remember there is a limit of 16 MB per document) So if you have something like a comment on a post, what is the limit of comment count, if that post goes viral and people start adding comments. In such cases, reference could be a better option (but even reference can grow and reach 16 MB limit).\nSo how to balance it, the answer is a combination of different patterns, check these links, and create your own mix and match based on your use case.\nhttps://www.mongodb.com/blog/post/building-with-patterns-a-summary\nhttps://www.mongodb.com/blog/post/6-rules-of-thumb-for-mongodb-schema-design-part-1\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "That's a good rule of thumb +1. If you have a lot of related data like comments. There can be millions of comments and you don't want to show them all so obviously it's better to store it in post_comments collection or something like that.",
                "fecha": { "$date" : "2021-03-23T09:08:36Z" },
                "usuario": "Konrad",
                "usuario_id": 1837
            }
        ],
        "usuario": "r7r",
        "usuario_id": 1838
    },
    {
        "_id": 1046,
        "fecha": { "$date" : "2021-05-11T14:03:03Z" },
        "decripcion": "\nThat would have to be:\ndb.users.find({\"name\": /.*m.*/})\n\nOr, similar:\ndb.users.find({\"name\": /m/})\n\nYou're looking for something that contains \"m\" somewhere (SQL's '%' operator is equivalent to regular expressions' '.*'), not something that has \"m\" anchored to the beginning of the string.\nNote: MongoDB uses regular expressions which are more powerful than \"LIKE\" in SQL. With regular expressions you can create any pattern that you imagine.\nFor more information on regular expressions, refer to Regular expressions (MDN).\n    ",
        "votes": 2236,
        "comentarios": [
            {
                "decripcion": "is searching by regex expensive?",
                "fecha": { "$date" : "2010-07-22T10:13:54Z" },
                "usuario": "Freewind",
                "usuario_id": 1843
            },
            {
                "decripcion": "Actually, it depends. If the query doesn't use an index, and must do a table scan, then it can certainly be expensive. If you're doing a 'starts with' regex query, then that can use an index. Best to run an explain() to see what's happening.",
                "fecha": { "$date" : "2010-07-22T14:49:44Z" },
                "usuario": "Kyle Banker",
                "usuario_id": 1844
            },
            {
                "decripcion": "When not anchored to the beginning of the string, it is somewhat expensive. But then again, so is a LIKE query in SQL.",
                "fecha": { "$date" : "2010-07-26T18:50:07Z" },
                "usuario": "Emily",
                "usuario_id": 1845
            },
            {
                "decripcion": "I would add regex i javascript  db.users.find({ \"name\": { $regex: /m/i } })   ",
                "fecha": { "$date" : "2015-06-19T03:24:42Z" },
                "usuario": "Doron Segal",
                "usuario_id": 1846
            },
            {
                "decripcion": "It is worth mentioning that if you want to use it from Node app and you want a dynamic search, you can use:   users.find({\"name\": new RegExp('.*' + searchVariable + '.*')})  So, this way you can use it with other operators like $in, $nin, etc.",
                "fecha": { "$date" : "2021-07-30T21:18:02Z" },
                "usuario": "Ivan Cabrera",
                "usuario_id": 1847
            }
        ],
        "usuario": "Kyle H",
        "usuario_id": 1848
    },
    {
        "_id": 1047,
        "fecha": { "$date" : "2021-06-01T17:25:28Z" },
        "decripcion": "\ndb.users.insert({name: 'paulo'})\ndb.users.insert({name: 'patric'})\ndb.users.insert({name: 'pedro'})\n\nTherefore:\nFor:\ndb.users.find({name: /a/})  // Like '%a%'\n\nOutput: paulo, patric\nFor:\ndb.users.find({name: /^pa/}) // Like 'pa%'\n\nOutput: paulo, patric\nFor:\ndb.users.find({name: /ro$/}) //like '%ro'\n\nOutput: pedro\n    ",
        "votes": 448,
        "comentarios": [],
        "usuario": "Johnathan Douglas",
        "usuario_id": 1849
    },
    {
        "_id": 1048,
        "fecha": { "$date" : "2017-04-27T13:17:41Z" },
        "decripcion": "\nIn \n\n\nPyMongo using Python\nMongoose using Node.js \nJongo, using Java\nmgo, using Go\n\n\nyou can do:\n\ndb.users.find({'name': {'$regex': 'sometext'}})\n\n    ",
        "votes": 335,
        "comentarios": [
            {
                "decripcion": "@TahirYasin if you're still wondering, case-insensitive search would be done like this: db.users.find({'name': {'$regex': 'sometext', '$options': 'i'}})",
                "fecha": { "$date" : "2017-07-14T00:09:50Z" },
                "usuario": "sumowrestler",
                "usuario_id": 1850
            }
        ],
        "usuario": "Afshin Mehrabani",
        "usuario_id": 1851
    },
    {
        "_id": 1049,
        "fecha": { "$date" : "2021-05-11T14:06:51Z" },
        "decripcion": "\nIn PHP, you could use the following code:\n$collection->find(array('name'=> array('$regex' => 'm'));\n\n    ",
        "votes": 98,
        "comentarios": [],
        "usuario": "Leon",
        "usuario_id": 1852
    },
    {
        "_id": 1050,
        "fecha": { "$date" : "2021-05-11T14:40:42Z" },
        "decripcion": "\nHere are different types of requirements and solutions for string search with regular expressions.\nYou can do with a regular expression which contains a word, i.e., like. Also you can use $options => i for a case insensitive search.\nContains string\ndb.collection.find({name:{'$regex' : 'string', '$options' : 'i'}})\n\nDoesn't contain string, only with a regular expression\ndb.collection.find({name:{'$regex' : '^((?!string).)*$', '$options' : 'i'}})\n\nExact case insensitive string\ndb.collection.find({name:{'$regex' : '^string$', '$options' : 'i'}})\n\nStart with string\ndb.collection.find({name:{'$regex' : '^string', '$options' : 'i'}})\n\nEnd with string\ndb.collection.find({name:{'$regex' : 'string$', '$options' : 'i'}})\n\nKeep Regular Expressions Cheat Sheet as a bookmark, and a reference for any other alterations you may need.\n    ",
        "votes": 74,
        "comentarios": [
            {
                "decripcion": "this is a later comment but, how can I use a variable in above example? like let name = 'john doe' . how can I implement name variable in regex? thanks",
                "fecha": { "$date" : "2021-08-26T15:29:58Z" },
                "usuario": "Irfan Habib",
                "usuario_id": 1853
            }
        ],
        "usuario": "Somnath Muluk",
        "usuario_id": 1789
    },
    {
        "_id": 1051,
        "fecha": { "$date" : "2021-05-11T14:06:29Z" },
        "decripcion": "\nYou would use a regular expression for that in MongoDB.\nFor example,\ndb.users.find({\"name\": /^m/})\n\n    ",
        "votes": 58,
        "comentarios": [
            {
                "decripcion": "I think this only shows documents with a name value that starts with \"m\"",
                "fecha": { "$date" : "2014-07-17T00:23:27Z" },
                "usuario": "JackAce",
                "usuario_id": 1854
            }
        ],
        "usuario": "Joshua Partogi",
        "usuario_id": 1855
    },
    {
        "_id": 1052,
        "fecha": { "$date" : "2021-05-11T15:44:39Z" },
        "decripcion": "\nYou have two choices:\ndb.users.find({\"name\": /string/})\n\nor\ndb.users.find({\"name\": {\"$regex\": \"string\", \"$options\": \"i\"}})\n\nFor the second one, you have more options, like \"i\" in options to find using case insensitive.\nAnd about the \"string\", you can use like \".string.\" (%string%), or \"string.*\" (string%) and \".*string) (%string) for example. You can use a regular expression as you want.\n    ",
        "votes": 43,
        "comentarios": [],
        "usuario": "alvescleiton",
        "usuario_id": 1856
    },
    {
        "_id": 1053,
        "fecha": { "$date" : "2021-05-11T14:11:00Z" },
        "decripcion": "\nIf using Node.js, it says that you can write this:\ndb.collection.find( { field: /acme.*corp/i } );\n\n// Or\ndb.collection.find( { field: { $regex: 'acme.*corp', $options: 'i' } } );\n\nAlso, you can write this:\ndb.collection.find( { field: new RegExp('acme.*corp', 'i') } );\n\n    ",
        "votes": 38,
        "comentarios": [],
        "usuario": "Eddy",
        "usuario_id": 1707
    },
    {
        "_id": 1054,
        "fecha": { "$date" : "2021-05-11T14:26:00Z" },
        "decripcion": "\nAlready you got the answers, but to match with a regular expression with case insensitivity, you could use the following query:\ndb.users.find ({ \"name\" : /m/i } ).pretty()\n\nThe i in the /m/i indicates case insensitivity and .pretty() provides a prettier output.\n    ",
        "votes": 26,
        "comentarios": [],
        "usuario": "The6thSense",
        "usuario_id": 1857
    },
    {
        "_id": 1055,
        "fecha": { "$date" : "2021-05-11T14:32:58Z" },
        "decripcion": "\nFor Mongoose in Node.js:\ndb.users.find({'name': {'$regex': '.*sometext.*'}})\n\n    ",
        "votes": 21,
        "comentarios": [],
        "usuario": "Aqib Mumtaz",
        "usuario_id": 1858
    },
    {
        "_id": 1056,
        "fecha": { "$date" : "2017-04-19T08:01:35Z" },
        "decripcion": "\nWith MongoDB Compass, you need to use the strict mode syntax, as such:\n\n{ \"text\": { \"$regex\": \"^Foo.*\", \"$options\": \"i\" } }\n\n\n(In MongoDB Compass, it's important that you use \" instead of ')\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "damd",
        "usuario_id": 1859
    },
    {
        "_id": 1057,
        "fecha": { "$date" : "2021-05-11T14:18:46Z" },
        "decripcion": "\nYou can use the new feature of MongoDB 2.6:\ndb.foo.insert({desc: \"This is a string with text\"});\ndb.foo.insert({desc:\"This is a another string with Text\"});\ndb.foo.ensureIndex({\"desc\":\"text\"});\ndb.foo.find({\n    $text:{\n        $search:\"text\"\n    }\n});\n\n    ",
        "votes": 13,
        "comentarios": [
            {
                "decripcion": "Note, AFAIK Mongodb's text searching works on whole words only by default, so this will match values like \"This is a string with text\", but not \"This is a string with subtext\".  So it's not quite like sql's \"LIKE\" operator.",
                "fecha": { "$date" : "2015-03-10T18:34:33Z" },
                "usuario": "rocketmonkeys",
                "usuario_id": 1860
            }
        ],
        "usuario": "cmarrero01",
        "usuario_id": 1861
    },
    {
        "_id": 1058,
        "fecha": { "$date" : "2021-05-11T14:31:56Z" },
        "decripcion": "\nIn a Node.js project and using Mongoose, use a like query:\nvar User = mongoose.model('User');\n\nvar searchQuery = {};\nsearchQuery.email = req.query.email;\nsearchQuery.name = {$regex: req.query.name, $options: 'i'};\nUser.find(searchQuery, function(error, user) {\n                if(error || user === null) {\n                    return res.status(500).send(error);\n                }\n                return res.status(200).send(user);\n            });\n\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "Shaishab Roy",
        "usuario_id": 1862
    },
    {
        "_id": 1059,
        "fecha": { "$date" : "2018-06-08T06:43:22Z" },
        "decripcion": "\nUsing template literals with variables also works:\n\n{\"firstname\": {$regex : `^${req.body.firstname}.*` , $options: 'si' }}\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "besthost",
        "usuario_id": 1863
    },
    {
        "_id": 1060,
        "fecha": { "$date" : "2021-05-11T14:10:10Z" },
        "decripcion": "\nYou can use a where statement to build any JavaScript script:\ndb.myCollection.find( { $where: \"this.name.toLowerCase().indexOf('m') >= 0\" } );\n\nReference: $where\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "$where is highly inefficient. Do full collection scan :(",
                "fecha": { "$date" : "2013-09-23T15:23:05Z" },
                "usuario": "Sushant Gupta",
                "usuario_id": 1864
            }
        ],
        "usuario": "briba",
        "usuario_id": 1865
    },
    {
        "_id": 1061,
        "fecha": { "$date" : "2021-05-11T14:20:46Z" },
        "decripcion": "\nFor PHP mongo Like.\nI had several issues with PHP mongo like. I found that concatenating the regular expression parameters helps in some situations - PHP mongo find field starts with.\nFor example,\ndb()->users->insert(['name' => 'john']);\ndb()->users->insert(['name' => 'joe']);\ndb()->users->insert(['name' => 'jason']);\n\n// starts with\n$like_var = 'jo';\n$prefix = '/^';\n$suffix = '/';\n$name = $prefix . $like_var . $suffix;\ndb()->users->find(['name' => array('$regex'=>new MongoRegex($name))]);\noutput: (joe, john)\n\n// contains\n$like_var = 'j';\n$prefix = '/';\n$suffix = '/';\n$name = $prefix . $like_var . $suffix;\ndb()->users->find(['name' => array('$regex'=>new MongoRegex($name))]);\n\noutput: (joe, john, jason)\n\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "Dap",
        "usuario_id": 1866
    },
    {
        "_id": 1062,
        "fecha": { "$date" : "2021-05-11T14:12:27Z" },
        "decripcion": "\nIn Go and the mgo driver:\nCollection.Find(bson.M{\"name\": bson.RegEx{\"m\", \"\"}}).All(&result)\n\nwhere the result is the struct instance of the sought-after type.\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "pls avoid unkeyed fields in literals, do bson:RegEx{Pattern:\"m\", Options:\"i\"} instead",
                "fecha": { "$date" : "2016-11-13T17:33:57Z" },
                "usuario": "bithavoc",
                "usuario_id": 1867
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1063,
        "fecha": { "$date" : "2021-05-11T14:15:58Z" },
        "decripcion": "\nIn SQL, the \u2018like\u2019 query looks like this:\nselect * from users where name like '%m%'\n\nIn the MongoDB console, it looks like this:\ndb.users.find({\"name\": /m/})     // Not JSON formatted\n\ndb.users.find({\"name\": /m/}).pretty()  // JSON formatted\n\nIn addition, the pretty() method will produce a formatted JSON structure in all the places which is more readable.\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "MADHAIYAN M",
        "usuario_id": 1868
    },
    {
        "_id": 1064,
        "fecha": { "$date" : "2021-05-11T15:48:06Z" },
        "decripcion": "\nRegular expressions are expensive to process.\nAnother way is to create an index of text and then search it using $search.\nCreate a text index of fields you want to make searchable:\ndb.collection.createIndex({name: 'text', otherField: 'text'});\n\nSearch for a string in the text index:\ndb.collection.find({\n  '$text'=>{'$search': \"The string\"}\n})\n\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "Rusty",
        "usuario_id": 1869
    },
    {
        "_id": 1065,
        "fecha": { "$date" : "2016-05-16T11:20:25Z" },
        "decripcion": "\nUse regular expressions matching as below. The 'i' shows case insensitivity.\n\nvar collections = mongoDatabase.GetCollection(\"Abcd\");\n\nvar queryA = Query.And(\n         Query.Matches(\"strName\", new BsonRegularExpression(\"ABCD\", \"i\")), \n         Query.Matches(\"strVal\", new BsonRegularExpression(\"4121\", \"i\")));\n\nvar queryB = Query.Or(\n       Query.Matches(\"strName\", new BsonRegularExpression(\"ABCD\",\"i\")),\n       Query.Matches(\"strVal\", new BsonRegularExpression(\"33156\", \"i\")));\n\nvar getA = collections.Find(queryA);\nvar getB = collections.Find(queryB);\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Shalabh Raizada",
        "usuario_id": 1870
    },
    {
        "_id": 1066,
        "fecha": { "$date" : "2021-05-11T14:29:16Z" },
        "decripcion": "\nA like query would be as shown below:\ndb.movies.find({title: /.*Twelve Monkeys.*/}).sort({regularizedCorRelation : 1}).limit(10);\n\nFor the Scala ReactiveMongo API,\nval query = BSONDocument(\"title\" -> BSONRegex(\".*\" + name + \".*\", \"\")) // like\nval sortQ = BSONDocument(\"regularizedCorRelation\" -> BSONInteger(1))\nval cursor = collection.find(query).sort(sortQ).options(QueryOpts().batchSize(10)).cursor[BSONDocument]\n\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "prayagupd",
        "usuario_id": 1871
    },
    {
        "_id": 1067,
        "fecha": { "$date" : "2021-05-11T15:41:22Z" },
        "decripcion": "\nIt seems that there are reasons for using both the JavaScript /regex_pattern/ pattern as well as the MongoDB {'$regex': 'regex_pattern'} pattern. See: MongoDB RegEx Syntax Restrictions\nThis is not a complete regular expression tutorial, but I was inspired to run these tests after seeing a highly voted ambiguous post above.\n> ['abbbb','bbabb','bbbba'].forEach(function(v){db.test_collection.insert({val: v})})\n\n> db.test_collection.find({val: /a/})\n{ \"val\" : \"abbbb\" }\n{ \"val\" : \"bbabb\" }\n{ \"val\" : \"bbbba\" }\n\n> db.test_collection.find({val: /.*a.*/})\n{ \"val\" : \"abbbb\" }\n{ \"val\" : \"bbabb\" }\n{ \"val\" : \"bbbba\" }\n\n> db.test_collection.find({val: /.+a.+/})\n{ \"val\" : \"bbabb\" }\n\n> db.test_collection.find({val: /^a/})\n{ \"val\" : \"abbbb\" }\n\n> db.test_collection.find({val: /a$/})\n{ \"val\" : \"bbbba\" }\n\n> db.test_collection.find({val: {'$regex': 'a$'}})\n{ \"val\" : \"bbbba\" }\n\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Bruno Bronosky",
        "usuario_id": 1872
    },
    {
        "_id": 1068,
        "fecha": { "$date" : "2021-05-11T14:28:02Z" },
        "decripcion": "\nIf you are using Spring-Data MongoDB, you can do it in this way:\nString tagName = \"m\";\nQuery query = new Query();\nquery.limit(10);\nquery.addCriteria(Criteria.where(\"tagName\").regex(tagName));\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Vaibhav",
        "usuario_id": 1873
    },
    {
        "_id": 1069,
        "fecha": { "$date" : "2021-05-11T15:52:15Z" },
        "decripcion": "\nIf you have a string variable, you must convert it to a regex, so MongoDB will use a like statement on it.\nconst name = req.query.title; //John\ndb.users.find({ \"name\": new Regex(name) });\n\nIs the same result as:\ndb.users.find({\"name\": /John/})\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Lazaro Fernandes Lima Suleiman",
        "usuario_id": 1874
    },
    {
        "_id": 1070,
        "fecha": { "$date" : "2021-07-01T07:04:26Z" },
        "decripcion": "\nString yourdb={deepakparmar, dipak, parmar}\ndb.getCollection('yourdb').find({\"name\":/^dee/})\n\nans deepakparmar\ndb.getCollection('yourdb').find({\"name\":/d/})\n\nans deepakparmar, dipak\ndb.getCollection('yourdb').find({\"name\":/mar$/})\n\nans deepakparmar, parmar\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Deepak parmar",
        "usuario_id": 1875
    },
    {
        "_id": 1071,
        "fecha": { "$date" : "2018-01-03T19:16:55Z" },
        "decripcion": "\nUse aggregation substring search (with index!!!):\n\ndb.collection.aggregate([{\n        $project : {\n            fieldExists : {\n                $indexOfBytes : ['$field', 'string']\n            }\n        }\n    }, {\n        $match : {\n            fieldExists : {\n                $gt : -1\n            }\n        }\n    }, {\n        $limit : 5\n    }\n]);\n\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "This might still be better than all these regex suggestions - but it still does a colscan.",
                "fecha": { "$date" : "2021-08-03T21:16:29Z" },
                "usuario": "tcurdt",
                "usuario_id": 1876
            }
        ],
        "usuario": "kz_sergey",
        "usuario_id": 1877
    },
    {
        "_id": 1072,
        "fecha": { "$date" : "2021-05-11T14:36:33Z" },
        "decripcion": "\nAs the MongoDB shell supports regular expressions, that's completely possible.\ndb.users.findOne({\"name\" : /.*sometext.*/});\n\nIf we want the query to be case-insensitive, we can use the \"i\" option, like shown below:\ndb.users.findOne({\"name\" : /.*sometext.*/i});\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "sravanthi",
        "usuario_id": 1878
    },
    {
        "_id": 1073,
        "fecha": { "$date" : "2021-05-11T15:37:07Z" },
        "decripcion": "\nIf you want a 'like' search in MongoDB then you should go with $regex. By using it, the query will be:\ndb.product.find({name:{$regex:/m/i}})\n\nFor more, you can read the documentation as well - $regex\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "jarry jafery",
        "usuario_id": 1799
    },
    {
        "_id": 1074,
        "fecha": { "$date" : "2020-03-31T18:17:05Z" },
        "decripcion": "\nYou can query with a regular expression:\n\ndb.users.find({\"name\": /m/});\n\n\nIf the string is coming from the user, maybe you want to escape the string before using it. This will prevent literal chars from the user to be interpreted as regex tokens.\n\nFor example, searching the string \"A.\" will also match \"AB\" if not escaped.\nYou can use a simple replace to escape your string before using it. I made it a function for reusing:\n\nfunction textLike(str) {\n  var escaped = str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n  return new RegExp(escaped, 'i');\n}\n\n\nSo now, the string becomes a case-insensitive pattern matching also the literal dot. Example:\n\n>  textLike('A.');\n<  /A\\./i\n\n\nNow we are ready to generate the regular expression on the go:\n\ndb.users.find({ \"name\": textLike(\"m\") });\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Ezequias Dinella",
        "usuario_id": 1879
    },
    {
        "_id": 1075,
        "fecha": { "$date" : "2021-05-11T15:42:22Z" },
        "decripcion": "\nMongoRegex has been deprecated.\nUse MongoDB\\BSON\\Regex:\n$regex = new MongoDB\\BSON\\Regex ( '^m');\n$cursor = $collection->find(array('users' => $regex));\n//iterate through the cursor\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Albert s",
        "usuario_id": 1880
    },
    {
        "_id": 1076,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nGeneral Scope and Explanation\nThere are a few things wrong with what you are doing here. Firstly your query conditions. You are referring to several _id values where you should not need to, and at least one of which is not on the top level.\nIn order to get into a \"nested\" value and also presuming that _id value is unique and would not appear in any other document, you query form should be like this:\n\nModel.update(\n    { \"array1.array2._id\": \"123\" },\n    { \"$push\": { \"array1.0.array2.$.answeredBy\": \"success\" } },\n    function(err,numAffected) {\n       // something with the result in here\n    }\n);\n\nNow that would actually work, but really it is only a fluke that it does as there are very good reasons why it should not work for you.\nThe important reading is in the official documentation for the positional $ operator under the subject of \"Nested Arrays\". What this says is:\n\nThe positional $ operator cannot be used for queries which traverse more than one array, such as queries that traverse arrays nested within other arrays, because the replacement for the $ placeholder is a single value\n\nSpecifically what that means is the element that will be matched and returned in the positional placeholder is the value of the index from the first matching array. This means in your case the matching index on the \"top\" level array.\nSo if you look at the query notation as shown, we have \"hardcoded\" the first ( or 0 index ) position in the top level array, and it just so happens that the matching element within \"array2\" is also the zero index entry.\nTo demonstrate this you can change the matching _id value to \"124\" and the result will $push an new entry onto the element with _id \"123\" as they are both in the zero index entry of \"array1\" and that is the value returned to the placeholder.\nSo that is the general problem with nesting arrays. You could remove one of the levels and you would still be able to $push to the correct element in your \"top\" array, but there would still be multiple levels.\nTry to avoid nesting arrays as you will run into update problems as is shown.\nThe general case is to \"flatten\" the things you \"think\" are \"levels\" and actually make theses \"attributes\" on the final detail items. For example, the \"flattened\" form of the structure in the question should be something like:\n {\n   \"answers\": [\n     { \"by\": \"success\", \"type2\": \"123\", \"type1\": \"12\" }\n   ]\n }\n\nOr even when accepting the inner array is $push only, and never updated:\n {\n   \"array\": [\n     { \"type1\": \"12\", \"type2\": \"123\", \"answeredBy\": [\"success\"] },\n     { \"type1\": \"12\", \"type2\": \"124\", \"answeredBy\": [] }\n   ]\n }\n\nWhich both lend themselves to atomic updates within the scope of the positional $ operator\n\nMongoDB 3.6 and Above\nFrom MongoDB 3.6 there are new features available to work with nested arrays. This uses the positional filtered $[<identifier>] syntax in order to match the specific elements and apply different conditions through arrayFilters in the update statement:\nModel.update(\n  {\n    \"_id\": 1,\n    \"array1\": {\n      \"$elemMatch\": {\n        \"_id\": \"12\",\"array2._id\": \"123\"\n      }\n    }\n  },\n  {\n    \"$push\": { \"array1.$[outer].array2.$[inner].answeredBy\": \"success\" }\n  },\n  {\n    \"arrayFilters\": [{ \"outer._id\": \"12\" },{ \"inner._id\": \"123\" }] \n  }\n)\n\nThe \"arrayFilters\" as passed to the options for .update() or even\n.updateOne(), .updateMany(), .findOneAndUpdate() or .bulkWrite() method specifies the conditions to match on the identifier given in the update statement. Any elements that match the condition given will be updated.\nBecause the structure is \"nested\", we actually use \"multiple filters\" as is specified with an \"array\" of filter definitions as shown. The marked \"identifier\" is used in matching against the positional filtered $[<identifier>] syntax actually used in the update block of the statement. In this case inner and outer are the identifiers used for each condition as specified with the nested chain.\nThis new expansion makes the update of nested array content possible, but it does not really help with the practicality of \"querying\" such data, so the same caveats apply as explained earlier.\nYou typically really \"mean\" to express as \"attributes\", even if your brain initially thinks \"nesting\", it's just usually a reaction to how you believe the \"previous relational parts\" come together. In reality you really need more denormalization.\nAlso see How to Update Multiple Array Elements in mongodb, since these new update operators actually match and update \"multiple array elements\" rather than just the first, which has been the previous action of positional updates.\n\nNOTE Somewhat ironically, since this is specified in the \"options\" argument for .update() and like methods, the syntax is generally compatible with all recent release driver versions.\nHowever this is not true of the mongo shell, since the way the method is implemented there ( \"ironically for backward compatibility\" ) the arrayFilters argument is not recognized and removed by an internal method that parses the options in order to deliver \"backward compatibility\" with prior MongoDB server versions and a \"legacy\" .update() API call syntax.\nSo if you want to use the command in the mongo shell or other \"shell based\" products ( notably Robo 3T ) you need a latest version from either the development branch or production release as of 3.6 or greater.\n\nSee also positional all $[] which also updates \"multiple array elements\" but without applying to specified conditions and applies to all elements in the array where that is the desired action.\n    ",
        "votes": 77,
        "comentarios": [
            {
                "decripcion": "thanks, your explanation of arrayFilters is so much better than the mongoDB site documentation. they just don't demonstrate how a nested array update would work.",
                "fecha": { "$date" : "2018-07-29T08:33:26Z" },
                "usuario": "Nir",
                "usuario_id": 1884
            },
            {
                "decripcion": "Wow! You are a genius! your explanation is so clear and straightforward. Thank you!",
                "fecha": { "$date" : "2020-06-05T14:04:45Z" },
                "usuario": "Daggie Blanqx - Douglas Mwangi",
                "usuario_id": 1885
            }
        ],
        "usuario": "Neil Lunn",
        "usuario_id": 1750
    },
    {
        "_id": 1077,
        "fecha": { "$date" : "2014-10-22T10:09:24Z" },
        "decripcion": "\nI know this is a very old question, but I just struggled with this problem myself, and found, what I believe to be, a better answer. \n\nA way to solve this problem is to use Sub-Documents. This is done by nesting schemas within your schemas\n\nMainSchema = new mongoose.Schema({\n   array1: [Array1Schema]\n})\n\nArray1Schema = new mongoose.Schema({\n   array2: [Array2Schema]\n})\n\nArray2Schema = new mongoose.Schema({\n   answeredBy\": [...]\n})\n\n\nThis way the object will look like the one you show, but now each array are filled with sub-documents. This makes it possible to dot your way into the sub-document you want. Instead of using a .update you then use a .find or .findOne to get the document you want to update.\n\nMain.findOne((\n    {\n        _id: 1\n    }\n)\n.exec(\n    function(err, result){\n        result.array1.id(12).array2.id(123).answeredBy.push('success')\n        result.save(function(err){\n            console.log(result)\n        });\n    }\n)\n\n\nHaven't used the .push() function this way myself, so the syntax might not be right, but I have used both .set() and .remove(), and both works perfectly fine.\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "I suppose it is worth adding for reference and understanding that there is a good reason why this may not be a \"better\" answer to the problem. What is essentially happening here is \"reading\" the document from the server, making modifications to the data structure and then \"writing\" back. Despite the helper usage, this is not difficult to do in any language, but it's usually a bad idea. You generally don't want to do this as you cannot guarantee that the document has not changed on the server while this code was making a change. That is why server \"update\" operations are preferred.",
                "fecha": { "$date" : "2014-12-31T23:06:25Z" },
                "usuario": "Neil Lunn",
                "usuario_id": 1750
            }
        ],
        "usuario": "Jesper Nielsen",
        "usuario_id": 1886
    },
    {
        "_id": 1078,
        "fecha": { "$date" : "2016-09-02T13:54:20Z" },
        "decripcion": "\nQuerying for a Date Range (Specific Month or Day) in the MongoDB Cookbook has a very good explanation on the matter, but below is something I tried out myself and it seems to work.\n\nitems.save({\n    name: \"example\",\n    created_at: ISODate(\"2010-04-30T00:00:00.000Z\")\n})\nitems.find({\n    created_at: {\n        $gte: ISODate(\"2010-04-29T00:00:00.000Z\"),\n        $lt: ISODate(\"2010-05-01T00:00:00.000Z\")\n    }\n})\n=> { \"_id\" : ObjectId(\"4c0791e2b9ec877893f3363b\"), \"name\" : \"example\", \"created_at\" : \"Sun May 30 2010 00:00:00 GMT+0300 (EEST)\" }\n\n\nBased on my experiments you will need to serialize your dates into a format that MongoDB supports, because the following gave undesired search results.\n\nitems.save({\n    name: \"example\",\n    created_at: \"Sun May 30 18.49:00 +0000 2010\"\n})\nitems.find({\n    created_at: {\n        $gte:\"Mon May 30 18:47:00 +0000 2015\",\n        $lt: \"Sun May 30 20:40:36 +0000 2010\"\n    }\n})\n=> { \"_id\" : ObjectId(\"4c079123b9ec877893f33638\"), \"name\" : \"example\", \"created_at\" : \"Sun May 30 18.49:00 +0000 2010\" }\n\n\nIn the second example no results were expected, but there was still one gotten. This is because a basic string comparison is done.\n    ",
        "votes": 758,
        "comentarios": [
            {
                "decripcion": "Looks interesting, but does the stored date need to be in a specific format. I've just been storing what was provided by twitter, does this need to be changed into a different format?",
                "fecha": { "$date" : "2010-05-31T16:24:55Z" },
                "usuario": "Tom",
                "usuario_id": 233
            },
            {
                "decripcion": "You've probably stored the timestamps as strings, so I am guessing MongoDB won't realize that they are in fact dates. Thus doing a range query on them would result in an alphabetical range query (e.g. \"Jan Mon 01.01.2010\" being before \"Jan Sun 01.01.1000\"). It would probably make sense to format all date data into the MongoDB format, which I think is just plain JavaScript Date.",
                "fecha": { "$date" : "2010-05-31T16:47:54Z" },
                "usuario": "ponzao",
                "usuario_id": 1888
            },
            {
                "decripcion": "I just used this to convert my strings to date objects stackoverflow.com/questions/2900674/\u2026",
                "fecha": { "$date" : "2010-05-31T21:07:44Z" },
                "usuario": "Tom",
                "usuario_id": 233
            },
            {
                "decripcion": "Okay cool! I'd guess the range queries mentioned in the cookbook should work then, did you try them out already?",
                "fecha": { "$date" : "2010-05-31T21:26:22Z" },
                "usuario": "ponzao",
                "usuario_id": 1888
            },
            {
                "decripcion": "Yep once I was storing the dates correct the cookbook examples worked as expected.",
                "fecha": { "$date" : "2010-06-15T08:46:23Z" },
                "usuario": "Tom",
                "usuario_id": 233
            }
        ],
        "usuario": "ponzao",
        "usuario_id": 1888
    },
    {
        "_id": 1079,
        "fecha": { "$date" : "2014-07-30T15:34:18Z" },
        "decripcion": "\nTo clarify. What is important to know is that:\n\n\nYes, you have to pass a Javascript Date object.  \nYes, it has to be ISODate friendly\nYes, from my experience getting this to work, you need to manipulate the date to ISO\nYes, working with dates is generally always a tedious process, and mongo is no exception\n\n\nHere is a working snippet of code, where we do a little bit of date manipulation to ensure Mongo (here i am using mongoose module and want results for rows whose date attribute is less than (before) the date given as myDate param) can handle it correctly:\n\nvar inputDate = new Date(myDate.toISOString());\nMyModel.find({\n    'date': { $lte: inputDate }\n})\n\n    ",
        "votes": 42,
        "comentarios": [
            {
                "decripcion": "Plus one for clarity. If your using moment in the backend, it still retains the toISOString() function. I use moment to add and subtract time for my queries.",
                "fecha": { "$date" : "2019-02-28T15:41:30Z" },
                "usuario": "VocoJax",
                "usuario_id": 1889
            }
        ],
        "usuario": "arcseldon",
        "usuario_id": 1890
    },
    {
        "_id": 1080,
        "fecha": { "$date" : "2018-01-16T13:24:33Z" },
        "decripcion": "\nPython and pymongo\n\nFinding objects between two dates in Python with pymongo in collection posts (based on the tutorial):\n\nfrom_date = datetime.datetime(2010, 12, 31, 12, 30, 30, 125000)\nto_date = datetime.datetime(2011, 12, 31, 12, 30, 30, 125000)\n\nfor post in posts.find({\"date\": {\"$gte\": from_date, \"$lt\": to_date}}):\n    print(post)\n\n\nWhere {\"$gte\": from_date, \"$lt\": to_date} specifies the range in terms of datetime.datetime types.\n    ",
        "votes": 22,
        "comentarios": [
            {
                "decripcion": "This is not working. Whenever I run this query I get by default complete response and not filtered response",
                "fecha": { "$date" : "2020-04-23T07:51:09Z" },
                "usuario": "Abhay Bh",
                "usuario_id": 1891
            },
            {
                "decripcion": "This is not working. I tried with python3 and it gets no results back",
                "fecha": { "$date" : "2021-03-03T10:53:45Z" },
                "usuario": "hellbreak",
                "usuario_id": 1892
            }
        ],
        "usuario": "Anton Tarasenko",
        "usuario_id": 1893
    },
    {
        "_id": 1081,
        "fecha": { "$date" : "2010-06-03T20:22:54Z" },
        "decripcion": "\nMongoDB actually stores the millis of a date as an int(64), as prescribed by http://bsonspec.org/#/specification\n\nHowever, it can get pretty confusing when you retrieve dates as the client driver will instantiate a date object with its own local timezone. The JavaScript driver in the mongo console will certainly do this.\n\nSo, if you care about your timezones, then make sure you know what it's supposed to be when you get it back. This shouldn't matter so much for the queries, as it will still equate to the same int(64), regardless of what timezone your date object is in (I hope). But I'd definitely make queries with actual date objects (not strings) and let the driver do its thing.\n    ",
        "votes": 20,
        "comentarios": [],
        "usuario": "Ben Smith",
        "usuario_id": 1894
    },
    {
        "_id": 1082,
        "fecha": { "$date" : "2017-09-07T01:01:59Z" },
        "decripcion": "\ndb.collection.find({\"createdDate\":{$gte:new ISODate(\"2017-04-14T23:59:59Z\"),$lte:new ISODate(\"2017-04-15T23:59:59Z\")}}).count();\n\n\nReplace collection with name of collection you want to execute query\n    ",
        "votes": 18,
        "comentarios": [
            {
                "decripcion": "What does this add to the accepted answer (provided 7 years earlier)?",
                "fecha": { "$date" : "2018-07-22T22:42:16Z" },
                "usuario": "Dan Dascalescu",
                "usuario_id": 1895
            },
            {
                "decripcion": "@DanDascalescu -may be it did not add anything  but what is your concern here ?",
                "fecha": { "$date" : "2018-07-23T09:20:00Z" },
                "usuario": "GSK",
                "usuario_id": 1896
            },
            {
                "decripcion": "Duplicate answers waste people's time.",
                "fecha": { "$date" : "2018-07-23T19:43:12Z" },
                "usuario": "Dan Dascalescu",
                "usuario_id": 1895
            }
        ],
        "usuario": "GSK",
        "usuario_id": 1896
    },
    {
        "_id": 1083,
        "fecha": { "$date" : "2018-12-05T02:50:43Z" },
        "decripcion": "\nUsing with Moment.js and Comparison Query Operators\n\n  var today = moment().startOf('day');\n  // \"2018-12-05T00:00:00.00\n  var tomorrow = moment(today).endOf('day');\n  // (\"2018-12-05T23:59:59.999\n\n  Example.find(\n  {\n    // find in today\n    created: { '$gte': today, '$lte': tomorrow }\n    // Or greater than 5 days\n    // created: { $lt: moment().add(-5, 'days') },\n  }), function (err, docs) { ... });\n\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "T\u00ednh Ng\u00f4 Quang",
        "usuario_id": 1897
    },
    {
        "_id": 1084,
        "fecha": { "$date" : "2018-05-17T08:52:36Z" },
        "decripcion": "\nUse this code to find the record between two dates using $gte and $lt:\n\ndb.CollectionName.find({\"whenCreated\": {\n    '$gte': ISODate(\"2018-03-06T13:10:40.294Z\"),\n    '$lt': ISODate(\"2018-05-06T13:10:40.294Z\")\n}});\n\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "What does this add to the accepted answer, provided 8 years earlier?",
                "fecha": { "$date" : "2018-07-22T22:42:43Z" },
                "usuario": "Dan Dascalescu",
                "usuario_id": 1895
            }
        ],
        "usuario": "Sunil Pal",
        "usuario_id": 1898
    },
    {
        "_id": 1085,
        "fecha": { "$date" : "2018-11-20T13:37:04Z" },
        "decripcion": "\nuse $gte and $lte to find between date data's in mongodb\n\nvar tomorrowDate = moment(new Date()).add(1, 'days').format(\"YYYY-MM-DD\");\ndb.collection.find({\"plannedDeliveryDate\":{ $gte: new Date(tomorrowDate +\"T00:00:00.000Z\"),$lte: new Date(tomorrowDate + \"T23:59:59.999Z\")}})\n\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "Slight typo in your answer $gte not $get :)",
                "fecha": { "$date" : "2018-11-20T12:57:05Z" },
                "usuario": "Bob",
                "usuario_id": 1899
            },
            {
                "decripcion": "Sorry i answered very tired condition, so i made mistake. Thanks for your help to update my answer. you did good job :) @Bob",
                "fecha": { "$date" : "2018-11-20T13:39:17Z" },
                "usuario": "KARTHIKEYAN.A",
                "usuario_id": 1715
            }
        ],
        "usuario": "KARTHIKEYAN.A",
        "usuario_id": 1715
    },
    {
        "_id": 1086,
        "fecha": { "$date" : "2020-03-11T11:01:55Z" },
        "decripcion": "\nYou can also check this out. If you are using this method, then use the parse function to get values from Mongo Database:\n\ndb.getCollection('user').find({\n    createdOn: {\n        $gt: ISODate(\"2020-01-01T00:00:00.000Z\"),\n        $lt: ISODate(\"2020-03-01T00:00:00.000Z\")\n    }\n})\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Kevin007",
        "usuario_id": 1900
    },
    {
        "_id": 1087,
        "fecha": { "$date" : "2015-08-04T18:17:01Z" },
        "decripcion": "\nWhy not convert the string to an integer of the form YYYYMMDDHHMMSS?  Each increment of time would then create a larger integer, and you can filter on the integers instead of worrying about converting to ISO time.\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "Because time isn't just happening in my local timezone.",
                "fecha": { "$date" : "2016-12-09T17:32:38Z" },
                "usuario": "Michael Cole",
                "usuario_id": 1808
            },
            {
                "decripcion": "This becomes a nightmare once you start having to convert the time to and from that format everywhere. If you're going to do something like this at the very least use the return value from .getTime() from a JS date object.",
                "fecha": { "$date" : "2017-04-10T21:49:52Z" },
                "usuario": "nikk wong",
                "usuario_id": 1901
            },
            {
                "decripcion": "thats why we always store data in UTC",
                "fecha": { "$date" : "2017-07-10T21:12:44Z" },
                "usuario": "codewandler",
                "usuario_id": 1902
            }
        ],
        "usuario": "ZacharyST",
        "usuario_id": 1903
    },
    {
        "_id": 1088,
        "fecha": { "$date" : "2020-06-23T18:26:49Z" },
        "decripcion": "\ndb.collection.find({$and:\n  [\n    {date_time:{$gt:ISODate(\"2020-06-01T00:00:00.000Z\")}},\n     {date_time:{$lt:ISODate(\"2020-06-30T00:00:00.000Z\")}}\n   ]\n })\n\n##In case you are making the query directly from your application ##\n\ndb.collection.find({$and:\n   [\n     {date_time:{$gt:\"2020-06-01T00:00:00.000Z\"}},\n     {date_time:{$lt:\"2020-06-30T00:00:00.000Z\"}}\n  ]\n\n })\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Jos\u00e9 Pablo Ceballos",
        "usuario_id": 1904
    },
    {
        "_id": 1089,
        "fecha": { "$date" : "2014-03-26T14:24:23Z" },
        "decripcion": "\nConvert your dates to GMT timezone as you're stuffing them into Mongo.  That way there's never a timezone issue.  Then just do the math on the twitter/timezone field when you pull the data back out for presentation.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "heregear",
        "usuario_id": 1905
    },
    {
        "_id": 1090,
        "fecha": { "$date" : "2019-07-26T15:36:13Z" },
        "decripcion": "\nmongoose.model('ModelName').aggregate([\n    {\n        $match: {\n            userId: mongoose.Types.ObjectId(userId)\n        }\n    },\n    {\n        $project: {\n            dataList: {\n              $filter: {\n                 input: \"$dataList\",\n                 as: \"item\",\n                 cond: { \n                    $and: [\n                        {\n                            $gte: [ \"$$item.dateTime\", new Date(`2017-01-01T00:00:00.000Z`) ]\n                        },\n                        {\n                            $lte: [ \"$$item.dateTime\", new Date(`2019-12-01T00:00:00.000Z`) ]\n                        },\n                    ]\n                 }\n              }\n           }\n        }\n     }\n])\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Jitendra",
        "usuario_id": 1906
    },
    {
        "_id": 1091,
        "fecha": { "$date" : "2021-09-06T08:26:03Z" },
        "decripcion": "\nScala:\nWith joda DateTime and BSON syntax (reactivemongo):\nval queryDateRangeForOneField = (start: DateTime, end: DateTime) =>\n    BSONDocument(\n      \"created_at\" -> BSONDocument(\n        \"$gte\" -> BSONDateTime(start.millisOfDay().withMinimumValue().getMillis), \n        \"$lte\" -> BSONDateTime(end.millisOfDay().withMaximumValue().getMillis)),\n     )\n\nwhere millisOfDay().withMinimumValue() for \"2021-09-08T06:42:51.697Z\" will be \"2021-09-08T00:00:00.000Z\"\nand\nwhere millisOfDay(). withMaximumValue() for \"2021-09-08T06:42:51.697Z\" will be \"2021-09-08T23:59:99.999Z\"\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Roman Kazanovskyi",
        "usuario_id": 1907
    },
    {
        "_id": 1092,
        "fecha": { "$date" : "2013-12-04T11:29:29Z" },
        "decripcion": "\ni tried in this model as per my requirements i need to store a date when ever a  object is created later i want to retrieve all the records (documents ) between two dates\n in my html file\ni was using the following format mm/dd/yyyy\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n\n<html>\n<head>\n\n    <script>\n//jquery\n    $(document).ready(function(){  \n    $(\"#select_date\").click(function() { \n    $.ajax({\n    type: \"post\",\n    url: \"xxx\", \n    datatype: \"html\",\n    data: $(\"#period\").serialize(),  \n    success: function(data){\n    alert(data);\n    } ,//success\n\n    }); //event triggered\n\n    });//ajax\n    });//jquery  \n    </script>\n\n    <title></title>\n</head>\n\n<body>\n    <form id=\"period\" name='period'>\n        from <input id=\"selecteddate\" name=\"selecteddate1\" type=\"text\"> to \n        <input id=\"select_date\" type=\"button\" value=\"selected\">\n    </form>\n</body>\n</html>\n\n\nin my py (python) file i converted it into \"iso fomate\"\nin following way\n\ndate_str1   = request.POST[\"SelectedDate1\"] \nSelectedDate1   = datetime.datetime.strptime(date_str1, '%m/%d/%Y').isoformat()\n\n\nand saved in my dbmongo collection with \"SelectedDate\" as field in my collection \n\nto retrieve data or documents  between to 2 dates i used following query\n\ndb.collection.find( \"SelectedDate\": {'$gte': SelectedDate1,'$lt': SelectedDate2}})\n\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "ayu for u",
        "usuario_id": 1908
    },
    {
        "_id": 1093,
        "fecha": { "$date" : "2020-03-11T20:29:47Z" },
        "decripcion": "\nI routinely use tens of gigabytes of data in just this fashion\ne.g. I have tables on disk that I read via queries, create data and append back.\n\nIt's worth reading the docs and late in this thread for several suggestions for how to store your data.\n\nDetails which will affect how you store your data, like:\nGive as much detail as you can; and I can help you develop a structure.\n\n\nSize of data, # of rows, columns, types of columns; are you appending\nrows, or just columns? \nWhat will typical operations look like. E.g. do a query on columns to select a bunch of rows and specific columns, then do an operation (in-memory), create new columns, save these.\n(Giving a toy example could enable us to offer more specific recommendations.)\nAfter that processing, then what do you do? Is step 2 ad hoc, or repeatable?\nInput flat files: how many, rough total size in Gb. How are these organized e.g. by records? Does each one contains different fields, or do they have some records per file with all of the fields in each file?\nDo you ever select subsets of rows (records) based on criteria (e.g. select the rows with field A > 5)? and then do something, or do you just select fields A, B, C with all of the records (and then do something)?\nDo you 'work on' all of your columns (in groups), or are there a good proportion that you may only use for reports (e.g. you want to keep the data around, but don't need to pull in that column explicity until final results time)?\n\n\nSolution\n\nEnsure you have pandas at least 0.10.1 installed.\n\nRead iterating files chunk-by-chunk and multiple table queries.\n\nSince pytables is optimized to operate on row-wise (which is what you query on), we will create a table for each group of fields. This way it's easy to select a small group of fields (which will work with a big table, but it's more efficient to do it this way... I think I may be able to fix this limitation in the future... this is more intuitive anyhow):\n(The following is pseudocode.)\n\nimport numpy as np\nimport pandas as pd\n\n# create a store\nstore = pd.HDFStore('mystore.h5')\n\n# this is the key to your storage:\n#    this maps your fields to a specific group, and defines \n#    what you want to have as data_columns.\n#    you might want to create a nice class wrapping this\n#    (as you will want to have this map and its inversion)  \ngroup_map = dict(\n    A = dict(fields = ['field_1','field_2',.....], dc = ['field_1',....,'field_5']),\n    B = dict(fields = ['field_10',......        ], dc = ['field_10']),\n    .....\n    REPORTING_ONLY = dict(fields = ['field_1000','field_1001',...], dc = []),\n\n)\n\ngroup_map_inverted = dict()\nfor g, v in group_map.items():\n    group_map_inverted.update(dict([ (f,g) for f in v['fields'] ]))\n\n\nReading in the files and creating the storage (essentially doing what append_to_multiple does):\n\nfor f in files:\n   # read in the file, additional options may be necessary here\n   # the chunksize is not strictly necessary, you may be able to slurp each \n   # file into memory in which case just eliminate this part of the loop \n   # (you can also change chunksize if necessary)\n   for chunk in pd.read_table(f, chunksize=50000):\n       # we are going to append to each table by group\n       # we are not going to create indexes at this time\n       # but we *ARE* going to create (some) data_columns\n\n       # figure out the field groupings\n       for g, v in group_map.items():\n             # create the frame for this group\n             frame = chunk.reindex(columns = v['fields'], copy = False)    \n\n             # append it\n             store.append(g, frame, index=False, data_columns = v['dc'])\n\n\nNow you have all of the tables in the file (actually you could store them in separate files if you wish, you would prob have to add the filename to the group_map, but probably this isn't necessary).\n\nThis is how you get columns and create new ones:\n\nframe = store.select(group_that_I_want)\n# you can optionally specify:\n# columns = a list of the columns IN THAT GROUP (if you wanted to\n#     select only say 3 out of the 20 columns in this sub-table)\n# and a where clause if you want a subset of the rows\n\n# do calculations on this frame\nnew_frame = cool_function_on_frame(frame)\n\n# to 'add columns', create a new group (you probably want to\n# limit the columns in this new_group to be only NEW ones\n# (e.g. so you don't overlap from the other tables)\n# add this info to the group_map\nstore.append(new_group, new_frame.reindex(columns = new_columns_created, copy = False), data_columns = new_columns_created)\n\n\nWhen you are ready for post_processing:\n\n# This may be a bit tricky; and depends what you are actually doing.\n# I may need to modify this function to be a bit more general:\nreport_data = store.select_as_multiple([groups_1,groups_2,.....], where =['field_1>0', 'field_1000=foo'], selector = group_1)\n\n\nAbout data_columns, you don't actually need to define ANY data_columns; they allow you to sub-select rows based on the column. E.g. something like:\n\nstore.select(group, where = ['field_1000=foo', 'field_1001>0'])\n\n\nThey may be most interesting to you in the final report generation stage (essentially a data column is segregated from other columns, which might impact efficiency somewhat if you define a lot).\n\nYou also might want to:\n\n\ncreate a function which takes a list of fields, looks up the groups in the groups_map, then selects these and concatenates the results so you get the resulting frame (this is essentially what select_as_multiple does). This way the structure would be pretty transparent to you.\nindexes on certain data columns (makes row-subsetting much faster).\nenable compression.\n\n\nLet me know when you have questions!\n    ",
        "votes": 686,
        "comentarios": [
            {
                "decripcion": "Thanks for the links.  The second link makes me a bit worried that I can't append new columns to the tables in HDFStore?  Is that correct?  Also, I added an example of how I would use this setup.",
                "fecha": { "$date" : "2013-01-10T23:53:26Z" },
                "usuario": "Zelazny7",
                "usuario_id": 1911
            },
            {
                "decripcion": "The actual structure in the hdf is up to you. Pytables is row oriented, with fixed columns at creation time. You cannot append columns once a table is created. However, you can create a new table indexed the same as your existing table. (see the select_as_multiple examples in the docs). This way you can create arbitrary sized objects while having pretty efficient queries. The way you use the data is key to how it should be organized on-disk. Send me an off-list e-mail with pseudo code of a more specific example.",
                "fecha": { "$date" : "2013-01-11T00:27:41Z" },
                "usuario": "Jeff",
                "usuario_id": 1912
            },
            {
                "decripcion": "I have updated my question to respond to your detailed points.  I will work on an example to send you off-list.  Thanks!",
                "fecha": { "$date" : "2013-01-11T04:29:50Z" },
                "usuario": "Zelazny7",
                "usuario_id": 1911
            },
            {
                "decripcion": "@Jeff, with Pandas being at 0.17.x now have the issues outlined above been resolved in Pandas?",
                "fecha": { "$date" : "2016-01-13T09:33:18Z" },
                "usuario": "ctrl-alt-delete",
                "usuario_id": 1913
            },
            {
                "decripcion": "@Jeff keen on adding a quick update on your answer to promote dask?",
                "fecha": { "$date" : "2016-09-09T18:10:32Z" },
                "usuario": "Zeugma",
                "usuario_id": 1914
            }
        ],
        "usuario": "Jeff",
        "usuario_id": 1912
    },
    {
        "_id": 1094,
        "fecha": { "$date" : "2013-12-23T15:21:27Z" },
        "decripcion": "\nI think the answers above are missing a simple approach that I've found very useful. \n\nWhen I have a file that is too large to load in memory, I break up the file into multiple smaller files (either by row or cols)\n\nExample: In case of 30 days worth of trading data of ~30GB size, I break it into a file per day of ~1GB size. I subsequently process each file separately and aggregate results at the end\n\nOne of the biggest advantages is that it allows parallel processing of the files (either multiple threads or processes)\n\nThe other advantage is that file manipulation (like adding/removing dates in the example) can be accomplished by regular shell commands, which is not be possible in more advanced/complicated file formats\n\nThis approach doesn't cover all scenarios, but is very useful in a lot of them\n    ",
        "votes": 163,
        "comentarios": [
            {
                "decripcion": "Agreed. With all the hype, it's easy to forget that command-line tools can be 235x faster than a Hadoop cluster",
                "fecha": { "$date" : "2016-10-06T21:01:52Z" },
                "usuario": "zelusp",
                "usuario_id": 0
            },
            {
                "decripcion": "Updated link: adamdrake.com/\u2026",
                "fecha": { "$date" : "2020-09-25T23:25:45Z" },
                "usuario": "amin_nejad",
                "usuario_id": 1915
            }
        ],
        "usuario": "user1827356",
        "usuario_id": 1916
    },
    {
        "_id": 1095,
        "fecha": { "$date" : "2021-01-25T19:57:57Z" },
        "decripcion": "\nThere is now, two years after the question, an 'out-of-core' pandas equivalent: dask. It is excellent! Though it does not support all of pandas functionality, you can get really far with it. Update: in the past two years it has been consistently maintained and there is substantial user community working with Dask.\nAnd now, four years after the question, there is another high-performance 'out-of-core' pandas equivalent in Vaex. It \"uses memory mapping, zero memory copy policy and lazy computations for best performance (no memory wasted).\" It can handle data sets of billions of rows and does not store them into memory (making it even possible to do analysis on suboptimal hardware).\n    ",
        "votes": 103,
        "comentarios": [
            {
                "decripcion": "and for a fully worked out example with dask, just have a look here stackoverflow.com/questions/37979167/\u2026",
                "fecha": { "$date" : "2017-02-09T15:58:00Z" },
                "usuario": "\u2115\u0298\u0298\u1e06\u1e3d\u1e18",
                "usuario_id": 1917
            },
            {
                "decripcion": "Depending on your data it makes sense to take a look into pystore. It relies on dask.",
                "fecha": { "$date" : "2020-05-01T20:54:06Z" },
                "usuario": "gies0r",
                "usuario_id": 1918
            },
            {
                "decripcion": "Is it always \"out of core\"? (i.e. not RAM intensive?). If you don't have a cluster at hand, Dask is not a good solution, IMHO.  Quoting from the Dask documentation itself:  \"If you are looking to manage a terabyte or less of tabular CSV or JSON data, then you should forget both Spark and Dask and use Postgres or MongoDB.\"",
                "fecha": { "$date" : "2020-07-30T15:51:19Z" },
                "usuario": "Michele Piccolini",
                "usuario_id": 1247
            }
        ],
        "usuario": "Private",
        "usuario_id": 1919
    },
    {
        "_id": 1096,
        "fecha": { "$date" : "2013-11-02T07:14:07Z" },
        "decripcion": "\nIf your datasets are between 1 and 20GB, you should get a workstation with 48GB of RAM. Then Pandas can hold the entire dataset in RAM. I know its not the answer you're looking for here, but doing scientific computing on a notebook with 4GB of RAM isn't reasonable.\n    ",
        "votes": 70,
        "comentarios": [
            {
                "decripcion": "\"doing scientific computing on a notebook with 4GB of RAM isn't reasonable\" Define reasonable. I think UNIVAC would take a different view. arstechnica.com/tech-policy/2011/09/\u2026",
                "fecha": { "$date" : "2015-08-26T14:42:27Z" },
                "usuario": "grisaitis",
                "usuario_id": 1920
            },
            {
                "decripcion": "Agreed!  try to continue working in memory even if it costs $$ up front.  If your work leads to a financial return, then over time, you will recup expenses through your increased efficiency.",
                "fecha": { "$date" : "2017-11-10T17:57:31Z" },
                "usuario": "ansonw",
                "usuario_id": 1921
            },
            {
                "decripcion": "Doing scientific computing on a workstation with 48GB of RAM isn't reasonable.",
                "fecha": { "$date" : "2019-04-06T06:52:47Z" },
                "usuario": "Yaroslav Nikitenko",
                "usuario_id": 1922
            },
            {
                "decripcion": "@YaroslavNikitenko An r4.2xlarge with 61GB/RAM is $.532/hour. What kind of scientific computing are you doing that isn't that valuable? Sounds unusual, if not unreasonable.",
                "fecha": { "$date" : "2019-04-06T22:39:39Z" },
                "usuario": "rjurney",
                "usuario_id": 1923
            },
            {
                "decripcion": "@rjurney sorry, maybe I should had deleted my comment. Your judgement on \"unreasonable\" scientific computer seems very subjective. I do my scientific computations for years on laptops, and that seems enough for me, because most of the time I write code. My algorithms are much more difficult from programming point of view than from computational one. Also I'm pretty sure that to write scalable algorithms one should not rely on current hardware limitations. Your comment on other people's computing may sound a bit offensive (apart from subjectivity), would you mind deleting these few words?",
                "fecha": { "$date" : "2019-04-07T06:05:05Z" },
                "usuario": "Yaroslav Nikitenko",
                "usuario_id": 1922
            }
        ],
        "usuario": "rjurney",
        "usuario_id": 1923
    },
    {
        "_id": 1097,
        "fecha": { "$date" : "2014-12-03T22:09:40Z" },
        "decripcion": "\nI know this is an old thread but I think the Blaze library is worth checking out.  It's built for these types of situations.\n\nFrom the docs:\n\nBlaze extends the usability of NumPy and Pandas to distributed and out-of-core computing. Blaze provides an interface similar to that of the NumPy ND-Array or Pandas DataFrame but maps these familiar interfaces onto a variety of other computational engines like Postgres or Spark.\n\nEdit: By the way, it's supported by ContinuumIO and Travis Oliphant, author of NumPy.\n    ",
        "votes": 64,
        "comentarios": [
            {
                "decripcion": "Another library that might be worth looking at is GraphLab Create: It has an efficient DataFrame-like structure that is not limited by memory capacity. blog.dato.com/\u2026",
                "fecha": { "$date" : "2015-04-22T16:17:32Z" },
                "usuario": "waterproof",
                "usuario_id": 1924
            }
        ],
        "usuario": "chishaku",
        "usuario_id": 1925
    },
    {
        "_id": 1098,
        "fecha": { "$date" : "2014-08-14T13:50:41Z" },
        "decripcion": "\nThis is the case for pymongo.  I have also prototyped using sql server, sqlite, HDF, ORM (SQLAlchemy) in python.  First and foremost pymongo is a document based DB, so each person would be a document (dict of attributes).  Many people form a collection and you can have many collections (people, stock market, income).\n\npd.dateframe -> pymongo Note: I use the chunksize in read_csv to keep it to 5 to 10k records(pymongo drops the socket if larger)\n\naCollection.insert((a[1].to_dict() for a in df.iterrows()))\n\n\nquerying: gt = greater than...\n\npd.DataFrame(list(mongoCollection.find({'anAttribute':{'$gt':2887000, '$lt':2889000}})))\n\n\n.find() returns an iterator so I commonly use ichunked to chop into smaller iterators.  \n\nHow about a join since I normally get 10 data sources to paste together:\n\naJoinDF = pandas.DataFrame(list(mongoCollection.find({'anAttribute':{'$in':Att_Keys}})))\n\n\nthen (in my case sometimes I have to agg on aJoinDF first before its \"mergeable\".)\n\ndf = pandas.merge(df, aJoinDF, on=aKey, how='left')\n\n\nAnd you can then write the new info to your main collection via the update method below. (logical collection vs physical datasources).\n\ncollection.update({primarykey:foo},{key:change})\n\n\nOn smaller lookups, just denormalize.  For example, you have code in the document and you just add the field code text and do a dict lookup as you create documents.\n\nNow you have a nice dataset based around a person, you can unleash your logic on each case and make more attributes. Finally you can read into pandas your 3 to memory max key indicators and do pivots/agg/data exploration.  This works for me for 3 million records with numbers/big text/categories/codes/floats/...\n\nYou can also use the two methods built into MongoDB (MapReduce and aggregate framework). See here for more info about the aggregate framework, as it seems to be easier than MapReduce and looks handy for quick aggregate work.  Notice I didn't need to define my fields or relations, and I can add items to a document.  At the current state of the rapidly changing numpy, pandas, python toolset, MongoDB helps me just get to work :)\n    ",
        "votes": 57,
        "comentarios": [
            {
                "decripcion": "Hi, I'm playing around with your example as well and I run into this error when trying to insert into a database: In [96]: test.insert((a[1].to_dict() for a in df.iterrows())) --------------- InvalidDocument: Cannot encode object: 0. Any ideas what might be wrong?  My dataframe consists of all int64 dtypes and is very simple.",
                "fecha": { "$date" : "2013-01-16T02:53:36Z" },
                "usuario": "Zelazny7",
                "usuario_id": 1911
            },
            {
                "decripcion": "Yeah i did the same for a simple range DF and the int64 from numpy seems to bother pymongo.  All the data I have played with converts from CSV (vs artificially via range()) and has types long and hence no issues.  In numpy you can convert but I do see that as detracting.  I must admit the 10.1 items for HDF look exciting.",
                "fecha": { "$date" : "2013-01-17T22:01:14Z" },
                "usuario": "brian_the_bungler",
                "usuario_id": 1926
            }
        ],
        "usuario": "brian_the_bungler",
        "usuario_id": 1926
    },
    {
        "_id": 1099,
        "fecha": { "$date" : "2018-11-03T06:51:24Z" },
        "decripcion": "\nOne trick I found helpful for large data use cases is to reduce the volume of the data by reducing float precision to 32-bit. It's not applicable in all cases, but in many applications 64-bit precision is overkill and the 2x memory savings are worth it. To make an obvious point even more obvious:\n\n>>> df = pd.DataFrame(np.random.randn(int(1e8), 5))\n>>> df.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 100000000 entries, 0 to 99999999\nData columns (total 5 columns):\n...\ndtypes: float64(5)\nmemory usage: 3.7 GB\n\n>>> df.astype(np.float32).info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 100000000 entries, 0 to 99999999\nData columns (total 5 columns):\n...\ndtypes: float32(5)\nmemory usage: 1.9 GB\n\n    ",
        "votes": 53,
        "comentarios": [
            {
                "decripcion": "Generally speaking I think you should give a tought to every column type and have a dict that handle them consistently. This allows further downcasting (to small int, or even better, category). Depending on the purpose you may even use some 'trick' like changing the unit you use (using k$ might help you downcasting everything to int16) or grouping things into category. Ideally, that should be done before the first export.",
                "fecha": { "$date" : "2020-10-24T09:08:33Z" },
                "usuario": "lcrmorin",
                "usuario_id": 1927
            }
        ],
        "usuario": "ytsaig",
        "usuario_id": 1928
    },
    {
        "_id": 1100,
        "fecha": { "$date" : "2013-03-22T15:38:07Z" },
        "decripcion": "\nI spotted this a little late, but I work with a similar problem (mortgage prepayment models). My solution has been to skip the pandas HDFStore layer and use straight pytables. I save each column as an individual HDF5 array in my final file.\n\nMy basic workflow is to first get a CSV file from the database. I gzip it, so it's not as huge. Then I convert that to a row-oriented HDF5 file, by iterating over it in python, converting each row to a real data type, and writing it to a HDF5 file. That takes some tens of minutes, but it doesn't use any memory, since it's only operating row-by-row. Then I \"transpose\" the row-oriented HDF5 file into a column-oriented HDF5 file.\n\nThe table transpose looks like:\n\ndef transpose_table(h_in, table_path, h_out, group_name=\"data\", group_path=\"/\"):\n    # Get a reference to the input data.\n    tb = h_in.getNode(table_path)\n    # Create the output group to hold the columns.\n    grp = h_out.createGroup(group_path, group_name, filters=tables.Filters(complevel=1))\n    for col_name in tb.colnames:\n        logger.debug(\"Processing %s\", col_name)\n        # Get the data.\n        col_data = tb.col(col_name)\n        # Create the output array.\n        arr = h_out.createCArray(grp,\n                                 col_name,\n                                 tables.Atom.from_dtype(col_data.dtype),\n                                 col_data.shape)\n        # Store the data.\n        arr[:] = col_data\n    h_out.flush()\n\n\nReading it back in then looks like:\n\ndef read_hdf5(hdf5_path, group_path=\"/data\", columns=None):\n    \"\"\"Read a transposed data set from a HDF5 file.\"\"\"\n    if isinstance(hdf5_path, tables.file.File):\n        hf = hdf5_path\n    else:\n        hf = tables.openFile(hdf5_path)\n\n    grp = hf.getNode(group_path)\n    if columns is None:\n        data = [(child.name, child[:]) for child in grp]\n    else:\n        data = [(child.name, child[:]) for child in grp if child.name in columns]\n\n    # Convert any float32 columns to float64 for processing.\n    for i in range(len(data)):\n        name, vec = data[i]\n        if vec.dtype == np.float32:\n            data[i] = (name, vec.astype(np.float64))\n\n    if not isinstance(hdf5_path, tables.file.File):\n        hf.close()\n    return pd.DataFrame.from_items(data)\n\n\nNow, I generally run this on a machine with a ton of memory, so I may not be careful enough with my memory usage. For example, by default the load operation reads the whole data set.\n\nThis generally works for me, but it's a bit clunky, and I can't use the fancy pytables magic.\n\nEdit: The real advantage of this approach, over the array-of-records pytables default, is that I can then load the data into R using h5r, which can't handle tables. Or, at least, I've been unable to get it to load heterogeneous tables.\n    ",
        "votes": 48,
        "comentarios": [
            {
                "decripcion": "would you mind sharing with me some of your code?  I am interested in how you load the data from some flat text format without knowing the data types before pushing to pytables.  Also, it looks like you only work with data of one type.  Is that correct?",
                "fecha": { "$date" : "2013-03-27T02:01:27Z" },
                "usuario": "Zelazny7",
                "usuario_id": 1911
            },
            {
                "decripcion": "First of all, I assume I know the types of the columns before loading, rather than trying to guess from the data. I save a JSON \"data spec\" file with the column names and types and use that when processing the data. (The file is usually some awful BCP output without any labels.) The data types I use are strings, floats, integers, or monthly dates. I turn the strings into ints by saving an enumeration table and convert the dates into ints (months past 2000), so I'm just left with ints and floats in my data, plus the enumeration. I save the floats as float64 now, but I experimented with float32.",
                "fecha": { "$date" : "2013-03-28T16:34:27Z" },
                "usuario": "Johann Hibschman",
                "usuario_id": 1929
            },
            {
                "decripcion": "if you have time, pls give this a try for external compat with R: pandas.pydata.org/pandas-docs/dev/\u2026, and if you have difficulty, maybe we can tweak it",
                "fecha": { "$date" : "2013-04-01T16:50:29Z" },
                "usuario": "Jeff",
                "usuario_id": 1912
            },
            {
                "decripcion": "I'll try, if I can. rhdf5 is a pain, since it's a bioconductor package, rather than just being on CRAN like h5r. I'm at the mercy of our technical architecture team, and there was some issue with rhdf5 last time I asked for it. In any case, it just seems a mistake to go row-oriented rather than column-oriented with an OLAP store, but now I'm rambling.",
                "fecha": { "$date" : "2013-04-01T20:09:28Z" },
                "usuario": "Johann Hibschman",
                "usuario_id": 1929
            }
        ],
        "usuario": "Johann Hibschman",
        "usuario_id": 1929
    },
    {
        "_id": 1101,
        "fecha": { "$date" : "2020-01-08T17:07:24Z" },
        "decripcion": "\nAs noted by others, after some years an 'out-of-core' pandas equivalent has emerged: dask. Though dask is not a drop-in replacement of pandas and all of its functionality it stands out for several reasons:\n\nDask is a flexible parallel computing library for analytic computing that is optimized for dynamic task scheduling for interactive computational workloads of\n\u201cBig Data\u201d collections like parallel arrays, dataframes, and lists that extend common interfaces like NumPy, Pandas, or Python iterators to larger-than-memory or distributed environments and scales from laptops to clusters.\n\n\n  Dask emphasizes the following virtues:  \n  \n  \n  Familiar: Provides parallelized NumPy array and Pandas DataFrame    objects\n  Flexible: Provides a task scheduling interface for more custom workloads and integration with other projects.\n  Native: Enables distributed computing in Pure Python with access to the    PyData stack.\n  Fast: Operates with low overhead, low latency, and    minimal serialization necessary for fast numerical algorithms  \n  Scales up: Runs resiliently on clusters with 1000s of cores   Scales    down: Trivial to set up and run on a laptop in a single process  \n  Responsive: Designed with interactive computing in mind it provides    rapid feedback and diagnostics to aid humans\n  \n\n\nand to add a simple code sample:\n\nimport dask.dataframe as dd\ndf = dd.read_csv('2015-*-*.csv')\ndf.groupby(df.user_id).value.mean().compute()\n\n\nreplaces some pandas code like this:\n\nimport pandas as pd\ndf = pd.read_csv('2015-01-01.csv')\ndf.groupby(df.user_id).value.mean()\n\n\nand, especially noteworthy, provides through the concurrent.futures interface a general infrastructure for the submission of custom tasks:\n\nfrom dask.distributed import Client\nclient = Client('scheduler:port')\n\nfutures = []\nfor fn in filenames:\n    future = client.submit(load, fn)\n    futures.append(future)\n\nsummary = client.submit(summarize, futures)\nsummary.result()\n\n    ",
        "votes": 37,
        "comentarios": [
            {
                "decripcion": "I have added this answer since the post of @Private shows up regularly on the suggested for deletion list for content and length.",
                "fecha": { "$date" : "2017-11-22T03:57:10Z" },
                "usuario": "wp78de",
                "usuario_id": 1279
            },
            {
                "decripcion": "Dask is great unless you need multiindexing. Lack of multiindexing as of time of writing is a major problem.",
                "fecha": { "$date" : "2020-09-08T04:41:52Z" },
                "usuario": "misantroop",
                "usuario_id": 1930
            }
        ],
        "usuario": "wp78de",
        "usuario_id": 1279
    },
    {
        "_id": 1102,
        "fecha": { "$date" : "2021-06-11T08:50:28Z" },
        "decripcion": "\nIt is worth mentioning here Ray as well,\nit's a distributed computation framework, that has it's own implementation for pandas in a distributed way.\nJust replace the pandas import, and the code should work as is:\n# import pandas as pd\nimport ray.dataframe as pd\n\n# use pd as usual\n\ncan read more details here:\nhttps://rise.cs.berkeley.edu/blog/pandas-on-ray/\n\nUpdate:\nthe part that handles the pandas distribution, has been extracted to the modin project.\nthe proper way to use it is now is:\n# import pandas as pd\nimport modin.pandas as pd\n\n    ",
        "votes": 24,
        "comentarios": [],
        "usuario": "lev",
        "usuario_id": 1931
    },
    {
        "_id": 1103,
        "fecha": { "$date" : "2015-04-28T05:22:21Z" },
        "decripcion": "\nOne more variation\n\nMany of the operations done in pandas can also be done as a db query (sql, mongo)\n\nUsing a RDBMS or mongodb allows you to perform some of the aggregations in the DB Query (which is optimized for large data, and uses cache and indexes efficiently)\n\nLater, you can perform post processing using pandas.\n\nThe advantage of this method is that you gain the DB optimizations for working with large data, while still defining the logic in a high level declarative syntax - and not having to deal with the details of deciding what to do in memory and what to do out of core.\n\nAnd although the query language and pandas are different, it's usually not complicated to translate part of the logic from one to another.\n    ",
        "votes": 21,
        "comentarios": [],
        "usuario": "Ophir Yoktan",
        "usuario_id": 1932
    },
    {
        "_id": 1104,
        "fecha": { "$date" : "2014-10-09T19:07:16Z" },
        "decripcion": "\nConsider Ruffus if you go the simple path of creating a data pipeline which is broken down into multiple smaller files. \n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "Golf Monkey",
        "usuario_id": 1933
    },
    {
        "_id": 1105,
        "fecha": { "$date" : "2019-06-03T09:40:50Z" },
        "decripcion": "\nI'd like to point out the Vaex package.\n\n\n  Vaex is a python library for lazy Out-of-Core DataFrames (similar to Pandas), to visualize and explore big tabular datasets. It can calculate statistics such as mean, sum, count, standard deviation etc, on an N-dimensional grid up to a billion (109) objects/rows per second. Visualization is done using histograms, density plots and 3d volume rendering, allowing interactive exploration of big data. Vaex uses memory mapping, zero memory copy policy and lazy computations for best performance (no memory wasted).\n\n\nHave a look at the documentation: https://vaex.readthedocs.io/en/latest/\nThe API is very close to the API of pandas.\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "Rob",
        "usuario_id": 1216
    },
    {
        "_id": 1106,
        "fecha": { "$date" : "2016-10-04T15:32:56Z" },
        "decripcion": "\nI recently came across a similar issue. I found simply reading the data in chunks and appending it as I write it in chunks to the same csv works well. My problem was adding a date column based on information in another table, using the value of certain columns as follows. This may help those confused by dask and hdf5 but more familiar with pandas like myself. \n\ndef addDateColumn():\n\"\"\"Adds time to the daily rainfall data. Reads the csv as chunks of 100k \n   rows at a time and outputs them, appending as needed, to a single csv. \n   Uses the column of the raster names to get the date.\n\"\"\"\n    df = pd.read_csv(pathlist[1]+\"CHIRPS_tanz.csv\", iterator=True, \n                     chunksize=100000) #read csv file as 100k chunks\n\n    '''Do some stuff'''\n\n    count = 1 #for indexing item in time list \n    for chunk in df: #for each 100k rows\n        newtime = [] #empty list to append repeating times for different rows\n        toiterate = chunk[chunk.columns[2]] #ID of raster nums to base time\n        while count <= toiterate.max():\n            for i in toiterate: \n                if i ==count:\n                    newtime.append(newyears[count])\n            count+=1\n        print \"Finished\", str(chunknum), \"chunks\"\n        chunk[\"time\"] = newtime #create new column in dataframe based on time\n        outname = \"CHIRPS_tanz_time2.csv\"\n        #append each output to same csv, using no header\n        chunk.to_csv(pathlist[2]+outname, mode='a', header=None, index=None)\n\n    ",
        "votes": 11,
        "comentarios": [],
        "usuario": "timpjohns",
        "usuario_id": 1934
    },
    {
        "_id": 1107,
        "fecha": { "$date" : "2021-08-01T19:06:39Z" },
        "decripcion": "\nThe parquet file format is ideal for the use case you described.  You can efficiently read in a specific subset of columns with pd.read_parquet(path_to_file, columns=[\"foo\", \"bar\"])\nhttps://pandas.pydata.org/docs/reference/api/pandas.read_parquet.html\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "user2957943",
        "usuario_id": 1935
    },
    {
        "_id": 1108,
        "fecha": { "$date" : "2020-01-08T14:05:14Z" },
        "decripcion": "\nAt the moment I am working \"like\" you, just on a lower scale, which is why I don't have a PoC for my suggestion.\n\nHowever, I seem to find success in using pickle as caching system and outsourcing execution of various functions into files - executing these files from my commando / main file; For example i use a prepare_use.py to convert object types, split a data set into test, validating and prediction data set.\n\nHow does your caching with pickle work?\nI use strings in order to access pickle-files that are dynamically created, depending on which parameters and data sets were passed (with that i try to capture and determine if the program was already run, using .shape for data set, dict for passed parameters). \nRespecting these measures, i get a String to try to find and read a .pickle-file and can, if found, skip processing time in order to jump to the execution i am working on right now.\n\nUsing databases I encountered similar problems, which is why i found joy in using this solution, however - there are many constraints for sure - for example storing huge pickle sets due to redundancy.\nUpdating a table from before to after a transformation can be done with proper indexing - validating information opens up a whole other book (I tried consolidating crawled rent data and stopped using a database after 2 hours basically - as I would have liked to jump back after every transformation process)\n\nI hope my 2 cents help you in some way.\n\nGreetings.\n    ",
        "votes": -2,
        "comentarios": [],
        "usuario": "TiRoX",
        "usuario_id": 1936
    },
    {
        "_id": 1109,
        "fecha": { "$date" : "2018-05-12T03:57:46Z" },
        "decripcion": "\nWith a modern MongoDB greater than 3.2 you can use $lookup as an alternate to .populate() in most cases. This also has the advantage of actually doing the join \"on the server\" as opposed to what .populate() does which is actually \"multiple queries\" to \"emulate\" a join.\n\nSo .populate() is not really a \"join\" in the sense of how a relational database does it. The $lookup operator on the other hand, actually does the work on the server, and is more or less analogous to a \"LEFT JOIN\":\n\nItem.aggregate(\n  [\n    { \"$lookup\": {\n      \"from\": ItemTags.collection.name,\n      \"localField\": \"tags\",\n      \"foreignField\": \"_id\",\n      \"as\": \"tags\"\n    }},\n    { \"$unwind\": \"$tags\" },\n    { \"$match\": { \"tags.tagName\": { \"$in\": [ \"funny\", \"politics\" ] } } },\n    { \"$group\": {\n      \"_id\": \"$_id\",\n      \"dateCreated\": { \"$first\": \"$dateCreated\" },\n      \"title\": { \"$first\": \"$title\" },\n      \"description\": { \"$first\": \"$description\" },\n      \"tags\": { \"$push\": \"$tags\" }\n    }}\n  ],\n  function(err, result) {\n    // \"tags\" is now filtered by condition and \"joined\"\n  }\n)\n\n\n\n  N.B. The .collection.name here actually evaluates to the \"string\" that is the actual name of the MongoDB collection as assigned to the model. Since mongoose \"pluralizes\" collection names  by default and $lookup needs the actual MongoDB collection name as an argument ( since it's a server operation ), then this is a handy trick to use in mongoose code, as opposed to \"hard coding\" the collection name directly.\n\n\nWhilst we could also use $filter on arrays to remove the unwanted items, this is actually the most efficient form due to Aggregation Pipeline Optimization for the special condition of as $lookup followed by both an $unwind and a $match condition.\n\nThis actually results in the three pipeline stages being rolled into one:\n\n   { \"$lookup\" : {\n     \"from\" : \"itemtags\",\n     \"as\" : \"tags\",\n     \"localField\" : \"tags\",\n     \"foreignField\" : \"_id\",\n     \"unwinding\" : {\n       \"preserveNullAndEmptyArrays\" : false\n     },\n     \"matching\" : {\n       \"tagName\" : {\n         \"$in\" : [\n           \"funny\",\n           \"politics\"\n         ]\n       }\n     }\n   }}\n\n\nThis is highly optimal as the actual operation \"filters the collection to join first\", then it returns the results and \"unwinds\" the array. Both methods are employed so the results do not break the BSON limit of 16MB, which is a constraint that the client does not have.\n\nThe only problem is that it seems \"counter-intuitive\" in some ways, particularly when you want the results in an array, but that is what the $group is for here, as it reconstructs to the original document form.\n\nIt's also unfortunate that we simply cannot at this time actually write $lookup in the same eventual syntax the server uses. IMHO, this is an oversight to be corrected. But for now, simply using the sequence will work and is the most viable option with the best performance and scalability.\n\nAddendum - MongoDB 3.6 and upwards\n\nThough the pattern shown here is fairly optimized due to how the other stages get rolled into the $lookup, it does have one failing in that the \"LEFT JOIN\" which is normally inherent to both $lookup and the actions of populate() is negated by the \"optimal\" usage of $unwind here which does not preserve empty arrays. You can add the preserveNullAndEmptyArrays option, but this negates the \"optimized\" sequence described above and essentially leaves all three stages intact which would normally be combined in the optimization.\n\nMongoDB 3.6 expands with a \"more expressive\" form of $lookup allowing a \"sub-pipeline\" expression. Which not only meets the goal of retaining the \"LEFT JOIN\" but still allows an optimal query to reduce results returned and with a much simplified syntax:\n\nItem.aggregate([\n  { \"$lookup\": {\n    \"from\": ItemTags.collection.name,\n    \"let\": { \"tags\": \"$tags\" },\n    \"pipeline\": [\n      { \"$match\": {\n        \"tags\": { \"$in\": [ \"politics\", \"funny\" ] },\n        \"$expr\": { \"$in\": [ \"$_id\", \"$$tags\" ] }\n      }}\n    ]\n  }}\n])\n\n\nThe $expr used in order to match the declared \"local\" value with the \"foreign\" value is actually what MongoDB does \"internally\" now with the original $lookup syntax. By expressing in this form we can tailor the initial $match expression within the \"sub-pipeline\" ourselves.\n\nIn fact, as a true \"aggregation pipeline\" you can do just about anything you can do with an aggregation pipeline within this \"sub-pipeline\" expression, including \"nesting\" the levels of $lookup to other related collections.\n\nFurther usage is a bit beyond the scope of what the question here asks, but in relation to even \"nested population\" then the new usage pattern of $lookup allows this to be much the same, and a \"lot\" more powerful in it's full usage.\n\n\n\nWorking Example\n\nThe following gives an example using a static method on the model. Once that static method is implemented the call simply becomes:\n\n  Item.lookup(\n    {\n      path: 'tags',\n      query: { 'tags.tagName' : { '$in': [ 'funny', 'politics' ] } }\n    },\n    callback\n  )\n\n\nOr enhancing to be a bit more modern even becomes:\n\n  let results = await Item.lookup({\n    path: 'tags',\n    query: { 'tagName' : { '$in': [ 'funny', 'politics' ] } }\n  })\n\n\nMaking it very similar to .populate() in structure, but it's actually doing the join on the server instead. For completeness, the usage here casts the returned data back to mongoose document instances at according to both the parent and child cases.\n\nIt's fairly trivial and easy to adapt or just use as is for most common cases.\n\n\n  N.B The use of async here is just for brevity of running the enclosed example. The actual implementation is free of this dependency.\n\n\nconst async = require('async'),\n      mongoose = require('mongoose'),\n      Schema = mongoose.Schema;\n\nmongoose.Promise = global.Promise;\nmongoose.set('debug', true);\nmongoose.connect('mongodb://localhost/looktest');\n\nconst itemTagSchema = new Schema({\n  tagName: String\n});\n\nconst itemSchema = new Schema({\n  dateCreated: { type: Date, default: Date.now },\n  title: String,\n  description: String,\n  tags: [{ type: Schema.Types.ObjectId, ref: 'ItemTag' }]\n});\n\nitemSchema.statics.lookup = function(opt,callback) {\n  let rel =\n    mongoose.model(this.schema.path(opt.path).caster.options.ref);\n\n  let group = { \"$group\": { } };\n  this.schema.eachPath(p =>\n    group.$group[p] = (p === \"_id\") ? \"$_id\" :\n      (p === opt.path) ? { \"$push\": `$${p}` } : { \"$first\": `$${p}` });\n\n  let pipeline = [\n    { \"$lookup\": {\n      \"from\": rel.collection.name,\n      \"as\": opt.path,\n      \"localField\": opt.path,\n      \"foreignField\": \"_id\"\n    }},\n    { \"$unwind\": `$${opt.path}` },\n    { \"$match\": opt.query },\n    group\n  ];\n\n  this.aggregate(pipeline,(err,result) => {\n    if (err) callback(err);\n    result = result.map(m => {\n      m[opt.path] = m[opt.path].map(r => rel(r));\n      return this(m);\n    });\n    callback(err,result);\n  });\n}\n\nconst Item = mongoose.model('Item', itemSchema);\nconst ItemTag = mongoose.model('ItemTag', itemTagSchema);\n\nfunction log(body) {\n  console.log(JSON.stringify(body, undefined, 2))\n}\nasync.series(\n  [\n    // Clean data\n    (callback) => async.each(mongoose.models,(model,callback) =>\n      model.remove({},callback),callback),\n\n    // Create tags and items\n    (callback) =>\n      async.waterfall(\n        [\n          (callback) =>\n            ItemTag.create([{ \"tagName\": \"movies\" }, { \"tagName\": \"funny\" }],\n              callback),\n\n          (tags, callback) =>\n            Item.create({ \"title\": \"Something\",\"description\": \"An item\",\n              \"tags\": tags },callback)\n        ],\n        callback\n      ),\n\n    // Query with our static\n    (callback) =>\n      Item.lookup(\n        {\n          path: 'tags',\n          query: { 'tags.tagName' : { '$in': [ 'funny', 'politics' ] } }\n        },\n        callback\n      )\n  ],\n  (err,results) => {\n    if (err) throw err;\n    let result = results.pop();\n    log(result);\n    mongoose.disconnect();\n  }\n)\n\n\nOr a little more modern for Node 8.x and above with async/await and no additional dependencies:\n\nconst { Schema } = mongoose = require('mongoose');\nconst uri = 'mongodb://localhost/looktest';\n\nmongoose.Promise = global.Promise;\nmongoose.set('debug', true);\n\nconst itemTagSchema = new Schema({\n  tagName: String\n});\n\nconst itemSchema = new Schema({\n  dateCreated: { type: Date, default: Date.now },\n  title: String,\n  description: String,\n  tags: [{ type: Schema.Types.ObjectId, ref: 'ItemTag' }]\n});\n\nitemSchema.statics.lookup = function(opt) {\n  let rel =\n    mongoose.model(this.schema.path(opt.path).caster.options.ref);\n\n  let group = { \"$group\": { } };\n  this.schema.eachPath(p =>\n    group.$group[p] = (p === \"_id\") ? \"$_id\" :\n      (p === opt.path) ? { \"$push\": `$${p}` } : { \"$first\": `$${p}` });\n\n  let pipeline = [\n    { \"$lookup\": {\n      \"from\": rel.collection.name,\n      \"as\": opt.path,\n      \"localField\": opt.path,\n      \"foreignField\": \"_id\"\n    }},\n    { \"$unwind\": `$${opt.path}` },\n    { \"$match\": opt.query },\n    group\n  ];\n\n  return this.aggregate(pipeline).exec().then(r => r.map(m => \n    this({ ...m, [opt.path]: m[opt.path].map(r => rel(r)) })\n  ));\n}\n\nconst Item = mongoose.model('Item', itemSchema);\nconst ItemTag = mongoose.model('ItemTag', itemTagSchema);\n\nconst log = body => console.log(JSON.stringify(body, undefined, 2));\n\n(async function() {\n  try {\n\n    const conn = await mongoose.connect(uri);\n\n    // Clean data\n    await Promise.all(Object.entries(conn.models).map(([k,m]) => m.remove()));\n\n    // Create tags and items\n    const tags = await ItemTag.create(\n      [\"movies\", \"funny\"].map(tagName =>({ tagName }))\n    );\n    const item = await Item.create({ \n      \"title\": \"Something\",\n      \"description\": \"An item\",\n      tags \n    });\n\n    // Query with our static\n    const result = (await Item.lookup({\n      path: 'tags',\n      query: { 'tags.tagName' : { '$in': [ 'funny', 'politics' ] } }\n    })).pop();\n    log(result);\n\n    mongoose.disconnect();\n\n  } catch (e) {\n    console.error(e);\n  } finally {\n    process.exit()\n  }\n})()\n\n\nAnd from MongoDB 3.6 and upward, even without the $unwind and $group building:\n\nconst { Schema, Types: { ObjectId } } = mongoose = require('mongoose');\n\nconst uri = 'mongodb://localhost/looktest';\n\nmongoose.Promise = global.Promise;\nmongoose.set('debug', true);\n\nconst itemTagSchema = new Schema({\n  tagName: String\n});\n\nconst itemSchema = new Schema({\n  title: String,\n  description: String,\n  tags: [{ type: Schema.Types.ObjectId, ref: 'ItemTag' }]\n},{ timestamps: true });\n\nitemSchema.statics.lookup = function({ path, query }) {\n  let rel =\n    mongoose.model(this.schema.path(path).caster.options.ref);\n\n  // MongoDB 3.6 and up $lookup with sub-pipeline\n  let pipeline = [\n    { \"$lookup\": {\n      \"from\": rel.collection.name,\n      \"as\": path,\n      \"let\": { [path]: `$${path}` },\n      \"pipeline\": [\n        { \"$match\": {\n          ...query,\n          \"$expr\": { \"$in\": [ \"$_id\", `$$${path}` ] }\n        }}\n      ]\n    }}\n  ];\n\n  return this.aggregate(pipeline).exec().then(r => r.map(m =>\n    this({ ...m, [path]: m[path].map(r => rel(r)) })\n  ));\n};\n\nconst Item = mongoose.model('Item', itemSchema);\nconst ItemTag = mongoose.model('ItemTag', itemTagSchema);\n\nconst log = body => console.log(JSON.stringify(body, undefined, 2));\n\n(async function() {\n\n  try {\n\n    const conn = await mongoose.connect(uri);\n\n    // Clean data\n    await Promise.all(Object.entries(conn.models).map(([k,m]) => m.remove()));\n\n    // Create tags and items\n    const tags = await ItemTag.insertMany(\n      [\"movies\", \"funny\"].map(tagName => ({ tagName }))\n    );\n\n    const item = await Item.create({\n      \"title\": \"Something\",\n      \"description\": \"An item\",\n      tags\n    });\n\n    // Query with our static\n    let result = (await Item.lookup({\n      path: 'tags',\n      query: { 'tagName': { '$in': [ 'funny', 'politics' ] } }\n    })).pop();\n    log(result);\n\n\n    await mongoose.disconnect();\n\n  } catch(e) {\n    console.error(e)\n  } finally {\n    process.exit()\n  }\n\n})()\n\n    ",
        "votes": 68,
        "comentarios": [
            {
                "decripcion": "I'm no longer using Mongo / Mongoose but I've accepted your answer since this is a popular question and looks like this has been helpful to others. Glad to see this problem has a more scalable solution now. Thanks for providing an updated answer.",
                "fecha": { "$date" : "2018-05-12T02:27:03Z" },
                "usuario": "jschr",
                "usuario_id": 1941
            },
            {
                "decripcion": "Thank You <3,,,,",
                "fecha": { "$date" : "2021-03-04T11:12:46Z" },
                "usuario": "talha_ah",
                "usuario_id": 1942
            }
        ],
        "usuario": "Neil Lunn",
        "usuario_id": 1750
    },
    {
        "_id": 1110,
        "fecha": { "$date" : "2012-07-10T17:16:46Z" },
        "decripcion": "\nwhat you are asking for isn't directly supported but can be achieved by adding another filter step after the query returns.\n\nfirst, .populate( 'tags', null, { tagName: { $in: ['funny', 'politics'] } } ) is definitely what you need to do to filter the tags documents. then, after the query returns you'll need to manually filter out documents that don't have any tags docs that matched the populate criteria. something like:\n\nquery....\n.exec(function(err, docs){\n   docs = docs.filter(function(doc){\n     return doc.tags.length;\n   })\n   // do stuff with docs\n});\n\n    ",
        "votes": 41,
        "comentarios": [
            {
                "decripcion": "Hey Aaron, thanks for the reply. I may be wrong but won't the $in on populate() only populate the matched tags? So any additional tags on the item will get filtered out. It sounds like I'll have to populate all items and have the second filter step reduce it based on tag name then.",
                "fecha": { "$date" : "2012-07-10T18:35:07Z" },
                "usuario": "jschr",
                "usuario_id": 1941
            },
            {
                "decripcion": "@aaronheckmann I have implemented your suggested solution, you are right about to do filter after .exec, because though populate query is populating only required objects but still its returning entire data set. Do you think in Newer version of Mongoose there is some option to return only populated data set so we don't need to go for another filtering?",
                "fecha": { "$date" : "2015-11-11T08:58:03Z" },
                "usuario": "Aqib Mumtaz",
                "usuario_id": 1858
            },
            {
                "decripcion": "Im also curious to know about the performance, If query is returning entire dataset at the end then there is no purpose of going for population filtering? What do you say? Im adapting population query for performance optimisation but this way performance wont get better for large dataset?",
                "fecha": { "$date" : "2015-11-11T09:04:49Z" },
                "usuario": "Aqib Mumtaz",
                "usuario_id": 1858
            },
            {
                "decripcion": "mongoosejs.com/docs/api.html#query_Query-populate has all the details if anyone else is interested",
                "fecha": { "$date" : "2016-03-07T03:51:55Z" },
                "usuario": "samazi",
                "usuario_id": 1943
            },
            {
                "decripcion": "how match in different fields when populated ?",
                "fecha": { "$date" : "2018-07-26T22:09:52Z" },
                "usuario": "nicogaldo",
                "usuario_id": 1944
            }
        ],
        "usuario": "aaronheckmann",
        "usuario_id": 1945
    },
    {
        "_id": 1111,
        "fecha": { "$date" : "2012-07-03T19:46:38Z" },
        "decripcion": "\nTry replacing\n\n.populate('tags').where('tags.tagName').in(['funny', 'politics']) \n\n\nby\n\n.populate( 'tags', null, { tagName: { $in: ['funny', 'politics'] } } )\n\n    ",
        "votes": 23,
        "comentarios": [
            {
                "decripcion": "Thanks for the reply. I believe what this does is only populate each item with funny or politics, which wouldn't reduce the parent list. What I would actually like is only items that have funny or politics in their tag.",
                "fecha": { "$date" : "2012-07-03T13:27:01Z" },
                "usuario": "jschr",
                "usuario_id": 1941
            },
            {
                "decripcion": "Can you show how your document looks like? Coz a 'where' inside the tags array seems like a valid operation to me..Are we just getting the syntax wrong..Have you tried removing that 'where' clause completely and checked if anything is returned? Alternatively, just to test if writing 'tags.tagName' is syntactically ok, you might forget the ref thing for a while and try out your query with an embedded array inside the 'Item' document.",
                "fecha": { "$date" : "2012-07-03T14:13:51Z" },
                "usuario": "Aafreen Sheikh",
                "usuario_id": 1946
            },
            {
                "decripcion": "Edited my original post with the document. I was able to test it with the model as an embedded array inside Item with success but unfortunately I require it to be a DBRef as ItemTag is frequently updated. Thanks again for the help.",
                "fecha": { "$date" : "2012-07-03T22:59:21Z" },
                "usuario": "jschr",
                "usuario_id": 1941
            }
        ],
        "usuario": "Aafreen Sheikh",
        "usuario_id": 1946
    },
    {
        "_id": 1112,
        "fecha": { "$date" : "2018-05-08T17:04:53Z" },
        "decripcion": "\nUpdate: Please take a look at the comments - this answer does not correctly match to the question, but maybe it answers other questions of users which came across (I think that because of the upvotes) so I will not delete this \"answer\":\n\nFirst: I know this question is really outdated, but I searched for exactly this problem and this SO post was the Google entry #1. So I implemented the docs.filter version (accepted answer) but as I read in the mongoose v4.6.0 docs we can now simply use:\n\nItem.find({}).populate({\n    path: 'tags',\n    match: { tagName: { $in: ['funny', 'politics'] }}\n}).exec((err, items) => {\n  console.log(items.tags) \n  // contains only tags where tagName is 'funny' or 'politics'\n})\n\n\nHope this helps future search machine users.\n    ",
        "votes": 15,
        "comentarios": [
            {
                "decripcion": "But this will only filter the items.tags array surely? Items will be returned regardless of the tagName...",
                "fecha": { "$date" : "2016-12-01T00:10:10Z" },
                "usuario": "OllyBarca",
                "usuario_id": 1947
            },
            {
                "decripcion": "That is correct, @OllyBarca. According to the docs, match affects the population query only.",
                "fecha": { "$date" : "2016-12-07T11:52:06Z" },
                "usuario": "andreimarinescu",
                "usuario_id": 1948
            },
            {
                "decripcion": "I think this doesn't answer the question",
                "fecha": { "$date" : "2016-12-16T07:27:12Z" },
                "usuario": "Z.Alpha",
                "usuario_id": 1949
            },
            {
                "decripcion": "@Fabian that is not an error. Only the population query (in this case fans) gets filtered. The actual document returned (which is Story, contains fans as a property) is not affected or filtered.",
                "fecha": { "$date" : "2018-05-08T15:15:44Z" },
                "usuario": "EnKrypt",
                "usuario_id": 1950
            },
            {
                "decripcion": "This answer is thus not correct, for the reasons mentioned in the comments. Anyone looking at this in the future should be careful.",
                "fecha": { "$date" : "2018-05-08T15:17:38Z" },
                "usuario": "EnKrypt",
                "usuario_id": 1950
            }
        ],
        "usuario": "Fabian",
        "usuario_id": 1951
    },
    {
        "_id": 1113,
        "fecha": { "$date" : "2016-12-07T20:43:48Z" },
        "decripcion": "\nAfter having the same problem myself recently, I've come up with the following solution: \n\nFirst, find all ItemTags where tagName is either 'funny' or 'politics' and return an array of ItemTag _ids.\n\nThen, find Items which contain all ItemTag _ids in the tags array\n\nItemTag\n  .find({ tagName : { $in : ['funny','politics'] } })\n  .lean()\n  .distinct('_id')\n  .exec((err, itemTagIds) => {\n     if (err) { console.error(err); }\n     Item.find({ tag: { $all: itemTagIds} }, (err, items) => {\n        console.log(items); // Items filtered by tagName\n     });\n  });\n\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "How i did it     const tagsIds = await this.tagModel       .find({ name: { $in: tags } })       .lean()       .distinct('_id');     return this.adviceModel.find({ tags: { $all: tagsIds } });",
                "fecha": { "$date" : "2019-07-15T14:56:32Z" },
                "usuario": "Dragos Lupei",
                "usuario_id": 1952
            }
        ],
        "usuario": "OllyBarca",
        "usuario_id": 1947
    },
    {
        "_id": 1114,
        "fecha": { "$date" : "2017-09-27T21:47:01Z" },
        "decripcion": "\n@aaronheckmann 's answer worked for me but I had to replace return doc.tags.length; to return doc.tags != null; because that field contain null if it doesn't match with the conditions written inside populate. \nSo the final code:\n\nquery....\n.exec(function(err, docs){\n   docs = docs.filter(function(doc){\n     return doc.tags != null;\n   })\n   // do stuff with docs\n});\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "HernanFila",
        "usuario_id": 1953
    },
    {
        "_id": 1115,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nYou can use a $where. Just be aware it will be fairly slow (has to execute Javascript code on every record) so combine with indexed queries if you can.\ndb.T.find( { $where: function() { return this.Grade1 > this.Grade2 } } );\n\nor more compact:\ndb.T.find( { $where : \"this.Grade1 > this.Grade2\" } );\n\nUPD for mongodb v.3.6+\nyou can use $expr as described in recent answer\n    ",
        "votes": 135,
        "comentarios": [
            {
                "decripcion": "Oops, I get it, just joint-use javascript or other shell scripts, thanks both of you guys!",
                "fecha": { "$date" : "2010-12-14T19:59:50Z" },
                "usuario": "Diego Cheng",
                "usuario_id": 1954
            },
            {
                "decripcion": "You can do this a little more compact too ... > db.T.find({ $where : \"this.Grade1 > this.Grade2\" });",
                "fecha": { "$date" : "2010-12-14T20:03:25Z" },
                "usuario": "Justin Jenkins",
                "usuario_id": 1955
            },
            {
                "decripcion": "how could I  $where: function() { return this.Grade1 - this.Grade2 > variable } ?",
                "fecha": { "$date" : "2016-05-27T14:46:42Z" },
                "usuario": "Luis Gonz\u00e1lez",
                "usuario_id": 1956
            },
            {
                "decripcion": "when i tried db.T.find({$where: function() {return this.startDate == ISODate(\"2017-01-20T10:55:08.000Z\");}}); it returns nothing, even one of the doc in the collection is ISODate(\"2017-01-20T10:55:08.000Z\"). But <= and >= seem work. any idea?",
                "fecha": { "$date" : "2017-02-22T22:51:16Z" },
                "usuario": "cateyes",
                "usuario_id": 1957
            },
            {
                "decripcion": "@cateyes A bit late perhaps... but pure javascript always returns false when doing an == compare between 2 dates. Mongo, however, lets you search for exact matches between dates in queries. One workaround is using .getTime() to convert to milliseconds or whatever: this.startDate.getTime() == ISODate(\"2017-01-20T10:55:08.000Z\").getTime()",
                "fecha": { "$date" : "2019-10-01T10:28:02Z" },
                "usuario": "leinaD_natipaC",
                "usuario_id": 1958
            }
        ],
        "usuario": "Ian",
        "usuario_id": 1117
    },
    {
        "_id": 1116,
        "fecha": { "$date" : "2018-02-21T17:02:04Z" },
        "decripcion": "\nYou can use $expr ( 3.6 mongo version operator ) to use aggregation functions in regular query. \n\nCompare query operators vs aggregation comparison operators.\n\nRegular Query:\n\ndb.T.find({$expr:{$gt:[\"$Grade1\", \"$Grade2\"]}})\n\n\nAggregation Query:\n\ndb.T.aggregate({$match:{$expr:{$gt:[\"$Grade1\", \"$Grade2\"]}}})\n\n    ",
        "votes": 84,
        "comentarios": [],
        "usuario": "s7vr",
        "usuario_id": 1959
    },
    {
        "_id": 1117,
        "fecha": { "$date" : "2017-02-06T17:38:47Z" },
        "decripcion": "\nIf your query consists only of the $where operator, you can pass in just the JavaScript expression:\n\ndb.T.find(\"this.Grade1 > this.Grade2\");\n\n\n\n\nFor greater performance, run an aggregate operation that has a $redact pipeline to filter the documents which satisfy the given condition. \n\nThe $redact pipeline incorporates the functionality of $project and $match to implement field level redaction where it will return all documents matching the condition using $$KEEP and removes from the pipeline results those that don't match using the $$PRUNE variable.\n\n\n\nRunning the following aggregate operation filter the documents more efficiently than using $where for large collections as this uses a single pipeline and native MongoDB operators, rather than JavaScript evaluations with $where, which can slow down the query:\n\ndb.T.aggregate([\n    {\n        \"$redact\": {\n            \"$cond\": [\n                { \"$gt\": [ \"$Grade1\", \"$Grade2\" ] },\n                \"$$KEEP\",\n                \"$$PRUNE\"\n            ]\n        }\n    }\n])\n\n\nwhich is a more simplified version of incorporating the two pipelines $project and $match:\n\ndb.T.aggregate([\n    {\n        \"$project\": {\n            \"isGrade1Greater\": { \"$cmp\": [ \"$Grade1\", \"$Grade2\" ] },\n            \"Grade1\": 1,\n            \"Grade2\": 1,\n            \"OtherFields\": 1,\n            ...\n        }\n    },\n    { \"$match\": { \"isGrade1Greater\": 1 } }\n])\n\n\nWith MongoDB 3.4 and newer:\n\ndb.T.aggregate([\n    {\n        \"$addFields\": {\n            \"isGrade1Greater\": { \"$cmp\": [ \"$Grade1\", \"$Grade2\" ] }\n        }\n    },\n    { \"$match\": { \"isGrade1Greater\": 1 } }\n])\n\n    ",
        "votes": 41,
        "comentarios": [
            {
                "decripcion": "the last one doesnt seem to work with me. The isGrade1Greater field is properly added and evaluated but for some reason the query matches all rows no matter the value of isGrade1Greater. What could be the cause of this behaviour? EDIT: Never mind, I wasnt passing an array to aggregate() but rather each aggregation as a parameter itself, missed that.",
                "fecha": { "$date" : "2017-08-24T14:02:52Z" },
                "usuario": "ThatBrianDude",
                "usuario_id": 1960
            }
        ],
        "usuario": "chridam",
        "usuario_id": 557
    },
    {
        "_id": 1118,
        "fecha": { "$date" : "2016-07-05T17:27:35Z" },
        "decripcion": "\nIn case performance is more important than readability and as long as your condition consists of simple arithmetic operations, you can use aggregation pipeline. First, use $project to calculate the left hand side of the condition (take all fields to left hand side). Then use $match to compare with a constant and filter. This way you avoid javascript execution. Below is my test in python:\n\nimport pymongo\nfrom random import randrange\n\ndocs = [{'Grade1': randrange(10), 'Grade2': randrange(10)} for __ in range(100000)]\n\ncoll = pymongo.MongoClient().test_db.grades\ncoll.insert_many(docs)\n\n\nUsing aggregate:\n\n%timeit -n1 -r1 list(coll.aggregate([\n    {\n        '$project': {\n            'diff': {'$subtract': ['$Grade1', '$Grade2']},\n            'Grade1': 1,\n            'Grade2': 1\n        }\n    },\n    {\n        '$match': {'diff': {'$gt': 0}}\n    }\n]))\n\n\n1 loop, best of 1: 192 ms per loop\n\nUsing find and $where:\n\n%timeit -n1 -r1 list(coll.find({'$where': 'this.Grade1 > this.Grade2'}))\n\n\n1 loop, best of 1: 4.54 s per loop\n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "Sina",
        "usuario_id": 1961
    },
    {
        "_id": 1119,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\n\nThere are a couple of ways to do this.\nThe first is with Date Aggregation Operators, which allow you to dissect the \"date\" values in documents. Specifically for \"grouping\" as the primary intent:\ndb.collection.aggregate([\n  { \"$group\": {\n    \"_id\": {\n      \"year\": { \"$year\": \"$created_at\" },\n      \"dayOfYear\": { \"$dayOfYear\": \"$created_at\" },\n      \"hour\": { \"$hour\": \"$created_at\" },\n      \"interval\": {\n        \"$subtract\": [ \n          { \"$minute\": \"$created_at\" },\n          { \"$mod\": [{ \"$minute\": \"$created_at\"}, 15] }\n        ]\n      }\n    }},\n    \"count\": { \"$sum\": 1 }\n  }}\n])\n\nThe second way is by using a little trick of when a date object is subtracted (or other direct math operation) from another date object, then the result is a numeric value representing the epoch timestamp milliseconds between the two objects. So just using the epoch date you get the epoch milliseconds representation. Then use date math for the interval:\ndb.collection.aggregate([\n    { \"$group\": {\n        \"_id\": {\n            \"$subtract\": [\n                { \"$subtract\": [ \"$created_at\", new Date(\"1970-01-01\") ] },\n                { \"$mod\": [ \n                    { \"$subtract\": [ \"$created_at\", new Date(\"1970-01-01\") ] },\n                    1000 * 60 * 15\n                ]}\n            ]\n        },\n        \"count\": { \"$sum\": 1 }\n    }}\n])\n\nSo it depends on what kind of output format you want for the grouping interval. Both basically represent the same thing and have sufficient data to re-construct as a \"date\" object in your code.\nYou can put anything else you want in the \"grouping operator\" portion after the grouping _id. I'm just using the basic \"count\" example in lieu of any real statement from yourself as to what you really want to do.\n\nMongoDB 4.x and Upwards\nThere were some additions to Date Aggregation Operators since the original writing, but from MongoDB 4.0 there will be actual \"real casting of types\" as opposed to the basic math tricks done here with BSON Date conversion.\nFor instance we can use $toLong and $toDate as new helpers here:\ndb.collection.aggregate([\n  { \"$group\": {\n    \"_id\": {\n      \"$toDate\": {\n        \"$subtract\": [\n          { \"$toLong\": \"$created_at\" },\n          { \"$mod\": [ { \"$toLong\": \"$created_at\" }, 1000 * 60 * 15 ] }\n        ]\n      }\n    },\n    \"count\": { \"$sum\": 1 }\n  }}\n])\n\nThat's a bit shorter and does not require defining an external BSON Date for the \"epoch\" value as a constant in defining the pipeline so it's pretty consistent for all language implementations.\nThose are just two of the \"helper\" methods for type conversion which all tie back to the $convert method, which is a \"longer\" form of the implementation allowing for custom handling on null or error in conversion.\nIt's even possible with such casting to get the Date information from the ObjectId of the primary key, as this would be a reliable source of \"creation\" date:\ndb.collection.aggregate([\n  { \"$group\": {\n    \"_id\": {\n      \"$toDate\": {\n        \"$subtract\": [\n          { \"$toLong\": { \"$toDate\": \"$_id\" }  },\n          { \"$mod\": [ { \"$toLong\": { \"$toDate\": \"$_id\" } }, 1000 * 60 * 15 ] }\n        ]\n      }\n    },\n    \"count\": { \"$sum\": 1 }\n  }}\n])\n\nSo \"casting types\" with this sort of conversion can be pretty powerful tool.\n\nWarning - ObjectId values are limited to precision to the second only for the internal time value that makes up part of their data allowing the $toDate conversion. The actual inserted \"time\" is most probably dependent on the driver in use. Where precision is required, it's still recommended to use a discrete BSON Date field instead of relying on ObjectId values.\n\n    ",
        "votes": 149,
        "comentarios": [
            {
                "decripcion": "too bad i can't accept for him - really useful answer !",
                "fecha": { "$date" : "2015-03-28T19:44:36Z" },
                "usuario": "Petrov",
                "usuario_id": 1962
            },
            {
                "decripcion": "i couldn't agree more @Petrov",
                "fecha": { "$date" : "2015-08-27T10:24:21Z" },
                "usuario": "aiapatag",
                "usuario_id": 1963
            },
            {
                "decripcion": "Thanks for providing these good solutions! I think there might be a small error in your first example. You are missing the grouping by hour (in order to retrieve the 15 minutes intereval \u2013 which I assume \u2013 should be by the hour). So you would need to add \"hour\": { \"$hour\": \"$created_at\" }, after the dayOfYear-line",
                "fecha": { "$date" : "2017-07-19T23:25:01Z" },
                "usuario": "skofgar",
                "usuario_id": 1964
            },
            {
                "decripcion": "Mongodb 4.0 has released in 2018 and you know these aggregations from 2014... How ???",
                "fecha": { "$date" : "2018-07-20T17:25:01Z" },
                "usuario": "Ashh",
                "usuario_id": 1965
            },
            {
                "decripcion": "@AnthonyWinzlet, he edited his answer on 26 Apr 2018.",
                "fecha": { "$date" : "2018-08-25T14:20:45Z" },
                "usuario": "Paul",
                "usuario_id": 930
            }
        ],
        "usuario": "Neil Lunn",
        "usuario_id": 1750
    },
    {
        "_id": 1120,
        "fecha": { "$date" : "2015-12-29T00:46:40Z" },
        "decripcion": "\n\n\nI like the other answer here, and mostly for the use of date math instead of aggregation date operators which while helpful can also be a little obscure.\n\nThe only thing I want to add here is that you can also return a Date object from the aggregation framework by this approach as opposed to the \"numeric\" timestamp as the result. It's just a little extra math on the same principles, using $add:\n\ndb.collection.aggregate([\n    { \"$group\": {\n        \"_id\": {\n            \"$add\": [\n                { \"$subtract\": [\n                    { \"$subtract\": [ \"$current_date\", new Date(0) ] },\n                    { \"$mod\": [ \n                        { \"$subtract\": [ \"$current_date\", new Date(0) ] },\n                        1000 * 60 * 15\n                    ]}\n                ] },\n                new Date(0)\n            ]\n        },\n        \"count\": { \"$sum\": 1 }\n    }}\n])\n\n\nThe Date(0) contructs in JavaScript here represent the same \"epoch\" date in a shorter form, as 0 millisecond from epoch is epoch. But the main point is that when the \"addition\" to another BSON date object is done with a numeric identifier, then the inverse of the described condition is true and the end result is actually now a Date.\n\nAll drivers will return the native Date type to their language by this approach.\n    ",
        "votes": 15,
        "comentarios": [],
        "usuario": "Blakes Seven",
        "usuario_id": 1757
    },
    {
        "_id": 1121,
        "fecha": { "$date" : "2017-10-21T04:12:34Z" },
        "decripcion": "\nAnother useful way:\n\ndb.collection.aggregate([\n  {$group: {\n    _id: { \n      overallTime: { \n        $dateToString: { format: \"%Y-%m-%dT%H\", date: \"$created_at\" } \n      },\n      interval: { $trunc: { $divide: [{ $minute: \"$created_at\" }, 15 ]}}\n    },\n  }},\n])\n\n\nAnd more easier for min, hour, day intervals:\n\nvar format = \"%Y-%m-%dT%H:%M\"; // 1 min\nvar format = \"%Y-%m-%dT%H\"; // 1 hour\nvar format = \"%Y-%m-%d\"; // 1 day\n\ndb.collection.aggregate([\n  {$group: {\n    _id: { $dateToString: { format: format, date: \"$created_at\" } },\n  }},\n])\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Sergey Reutskiy",
        "usuario_id": 1966
    },
    {
        "_id": 1122,
        "fecha": { "$date" : "2015-09-16T10:58:55Z" },
        "decripcion": "\nA little more beautiful for mongo db.version() < 3.0\n\ndb.collection.aggregate([\n    {$match: {created_at:{$exists:1}}},\n    {$group: {\n        _id: {$add:[\n            {$dayOfYear: \"$created_at\" },\n            {$multiply: [{$year: \"$created_at\"}, 1000]}\n        ]},\n        count: {$sum: 1 }\n    }},\n    {$sort:{_id:-1}}\n])\n\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "Stierlitz",
        "usuario_id": 1967
    },
    {
        "_id": 1123,
        "fecha": { "$date" : "2019-01-04T05:47:30Z" },
        "decripcion": "\n@Neil Lunn's answer at https://stackoverflow.com/a/26814496/8474325 for MongoDb 4.x upwards is fantastic. But there is a small mistake in the code where he uses ObjectId for the aggregation. The Line { \"$toDate\": \"_id\" } has to be changed to { \"$toDate\": \"$_id\" } for the code to work.\n\nHere's the corrected code. \n\ndb.collection.aggregate([\n    { \"$group\": {\n      \"_id\": {\n          \"$toDate\": {\n              \"$subtract\": [\n                  { \"$toLong\": { \"$toDate\": \"$_id\" }  },\n                  { \"$mod\": [ { \"$toLong\": { \"$toDate\": \"$_id\" } }, 1000 * 60 * 15 ] }\n              ]\n          }\n      },\n      \"count\": { \"$sum\": 1 }\n   }}\n])\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "sanair96",
        "usuario_id": 1968
    },
    {
        "_id": 1124,
        "fecha": { "$date" : "2014-06-09T14:27:00Z" },
        "decripcion": "\nYou could do this with MapReduce:\n\nmr = db.runCommand({\n  \"mapreduce\" : \"my_collection\",\n  \"map\" : function() {\n    for (var key in this) { emit(key, null); }\n  },\n  \"reduce\" : function(key, stuff) { return null; }, \n  \"out\": \"my_collection\" + \"_keys\"\n})\n\n\nThen run distinct on the resulting collection so as to find all the keys:\n\ndb[mr.result].distinct(\"_id\")\n[\"foo\", \"bar\", \"baz\", \"_id\", ...]\n\n    ",
        "votes": 370,
        "comentarios": [
            {
                "decripcion": "Hi there! I've just posted a follow-up to this question asking how to make this snippet work even with keys located at deeper levels into the data structure (stackoverflow.com/questions/2997004/\u2026).",
                "fecha": { "$date" : "2010-06-08T14:53:22Z" },
                "usuario": "Andrea Fiore",
                "usuario_id": 1971
            },
            {
                "decripcion": "@kristina : How is it possible that I get entire things listed with the keys when using this on the things collection. It looks related to the history mechanism because I get things which I have modified in the past..",
                "fecha": { "$date" : "2011-09-26T02:54:09Z" },
                "usuario": "Shawn",
                "usuario_id": 1972
            },
            {
                "decripcion": "I know this is an old thread, but I seem to have a similar need. I'm using the nodejs mongodb native driver. The resulting temporary collection seems to empty always. I'm using the mapreduce function in the collection class for this. Is that not possible?",
                "fecha": { "$date" : "2014-05-22T14:15:09Z" },
                "usuario": "Deepak",
                "usuario_id": 1973
            },
            {
                "decripcion": "This may be obvious, but if you want to get a list of all the unique keys in a subdocument, just modify this line: for (var key in this.first_level.second_level.nth_level) { emit(key, null); }",
                "fecha": { "$date" : "2016-01-07T22:51:02Z" },
                "usuario": "dtbarne",
                "usuario_id": 1974
            },
            {
                "decripcion": "Instead of saving to a collection then running distinct on that, I use map(): db.runCommand({..., out: { \"inline\" : 1 }}).results.map(function(i) { return i._id; });",
                "fecha": { "$date" : "2017-03-03T14:01:44Z" },
                "usuario": "Ian Stanley",
                "usuario_id": 1975
            }
        ],
        "usuario": "kristina",
        "usuario_id": 1976
    },
    {
        "_id": 1125,
        "fecha": { "$date" : "2017-05-23T10:31:37Z" },
        "decripcion": "\nWith Kristina's answer as inspiration, I created an open source tool called Variety which does exactly this: https://github.com/variety/variety\n    ",
        "votes": 219,
        "comentarios": [
            {
                "decripcion": "This is a fantastic tool, congratulations. It does exactly what the question asks, and can be configured with limits, depth etc. Recommended by any who follows.",
                "fecha": { "$date" : "2012-06-10T20:35:08Z" },
                "usuario": "Paul Biggar",
                "usuario_id": 1977
            }
        ],
        "usuario": "James Cropcho",
        "usuario_id": 1978
    },
    {
        "_id": 1126,
        "fecha": { "$date" : "2020-09-01T12:54:44Z" },
        "decripcion": "\nYou can use aggregation with the new $objectToArray aggregation operator in version 3.4.4 to convert all top key-value pairs into document arrays, followed by $unwind and $group with $addToSet to get distinct keys across the entire collection. (Use $$ROOT for referencing the top level document.)\ndb.things.aggregate([\n  {\"$project\":{\"arrayofkeyvalue\":{\"$objectToArray\":\"$$ROOT\"}}},\n  {\"$unwind\":\"$arrayofkeyvalue\"},\n  {\"$group\":{\"_id\":null,\"allkeys\":{\"$addToSet\":\"$arrayofkeyvalue.k\"}}}\n])\n\nYou can use the following query for getting keys in a single document.\ndb.things.aggregate([\n  {\"$match\":{_id: \"<<ID>>\"}}, /* Replace with the document's ID */\n  {\"$project\":{\"arrayofkeyvalue\":{\"$objectToArray\":\"$$ROOT\"}}},\n  {\"$project\":{\"keys\":\"$arrayofkeyvalue.k\"}}\n])\n\n    ",
        "votes": 105,
        "comentarios": [
            {
                "decripcion": "This is really the best answer.  Solves the issue without involving some other programming language or package, and works with all drivers that support the aggregate framework (even Meteor!)",
                "fecha": { "$date" : "2017-11-16T21:48:46Z" },
                "usuario": "Micah Henning",
                "usuario_id": 1979
            },
            {
                "decripcion": "If you want to return an array rather than a cursor containing a single map entry with an \"allkeys\" key, you can append .next()[\"allkeys\"] to the command (assuming the collection has at least one element).",
                "fecha": { "$date" : "2020-04-09T22:09:51Z" },
                "usuario": "M. Justin",
                "usuario_id": 1980
            },
            {
                "decripcion": "I would just note that aggregate from @kristina answer takes 11 sec on my set, and Map Recude 2 sec). I did not expect that.",
                "fecha": { "$date" : "2020-07-13T13:20:48Z" },
                "usuario": "seven",
                "usuario_id": 1981
            },
            {
                "decripcion": "This worked for me on a collection with millions of documents where the map reduce timed out.",
                "fecha": { "$date" : "2021-07-19T21:45:05Z" },
                "usuario": "A. L. Strine",
                "usuario_id": 1982
            }
        ],
        "usuario": "s7vr",
        "usuario_id": 1959
    },
    {
        "_id": 1127,
        "fecha": { "$date" : "2019-06-16T17:14:56Z" },
        "decripcion": "\nA cleaned up and reusable solution using pymongo:\n\nfrom pymongo import MongoClient\nfrom bson import Code\n\ndef get_keys(db, collection):\n    client = MongoClient()\n    db = client[db]\n    map = Code(\"function() { for (var key in this) { emit(key, null); } }\")\n    reduce = Code(\"function(key, stuff) { return null; }\")\n    result = db[collection].map_reduce(map, reduce, \"myresults\")\n    return result.distinct('_id')\n\n\nUsage:\n\nget_keys('dbname', 'collection')\n>> ['key1', 'key2', ... ]\n\n    ",
        "votes": 20,
        "comentarios": [
            {
                "decripcion": "Works great. Finally got my problem solved....this is the simplest solution i saw in stack overflow..",
                "fecha": { "$date" : "2019-07-09T13:10:49Z" },
                "usuario": "Smack Alpha",
                "usuario_id": 1983
            },
            {
                "decripcion": "And to filter by type, just add e.g. if (typeof(this[key]) == 'number') before emit(key, null).",
                "fecha": { "$date" : "2020-01-12T22:31:34Z" },
                "usuario": "Skippy le Grand Gourou",
                "usuario_id": 1984
            },
            {
                "decripcion": "Note: using MongoDB free tier, I get errror pymongo.errors.OperationFailure: CMD_NOT_ALLOWED: mapReduce, full error: {'ok': 0, 'errmsg': 'CMD_NOT_ALLOWED: mapReduce', 'code': 8000, 'codeName': 'AtlasError'} apparently because mapReduce is not supported in free tier MongoDB unsupported-commands",
                "fecha": { "$date" : "2021-05-31T17:49:55Z" },
                "usuario": "curtisp",
                "usuario_id": 1985
            }
        ],
        "usuario": "Wolkenarchitekt",
        "usuario_id": 1986
    },
    {
        "_id": 1128,
        "fecha": { "$date" : "2016-12-26T06:38:57Z" },
        "decripcion": "\nIf your target collection is not too large, you can try this under mongo shell client:\n\nvar allKeys = {};\n\ndb.YOURCOLLECTION.find().forEach(function(doc){Object.keys(doc).forEach(function(key){allKeys[key]=1})});\n\nallKeys;\n\n    ",
        "votes": 18,
        "comentarios": [
            {
                "decripcion": "here how i can give regExp for particular keys if i want to see?",
                "fecha": { "$date" : "2017-03-24T05:41:25Z" },
                "usuario": "TB.M",
                "usuario_id": 1987
            },
            {
                "decripcion": "@TB.M  you can try this:   db.configs.find().forEach(function(doc){Object.keys(doc).forEach(function(key){ if (/YOURREGEXP/.test(key)) {allKeys[key]=1}})});",
                "fecha": { "$date" : "2017-03-27T04:22:08Z" },
                "usuario": "Li Chunlin",
                "usuario_id": 1988
            },
            {
                "decripcion": "what does test mean here? can u please explain?",
                "fecha": { "$date" : "2017-03-27T06:03:23Z" },
                "usuario": "TB.M",
                "usuario_id": 1987
            },
            {
                "decripcion": "@TB.M  developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/\u2026",
                "fecha": { "$date" : "2017-03-28T03:28:53Z" },
                "usuario": "Li Chunlin",
                "usuario_id": 1988
            }
        ],
        "usuario": "Li Chunlin",
        "usuario_id": 1988
    },
    {
        "_id": 1129,
        "fecha": { "$date" : "2014-03-06T12:56:19Z" },
        "decripcion": "\nTry this:\n\ndoc=db.thinks.findOne();\nfor (key in doc) print(key);\n\n    ",
        "votes": 16,
        "comentarios": [
            {
                "decripcion": "incorrect answer since this only outputs fields for a single document in a collection - the others may all have completely different keys.",
                "fecha": { "$date" : "2014-03-31T23:41:42Z" },
                "usuario": "Asya Kamsky",
                "usuario_id": 1989
            },
            {
                "decripcion": "It is still the most useful answer to me, being a simple reasonable minimum.",
                "fecha": { "$date" : "2014-07-31T16:13:55Z" },
                "usuario": "Boris Burkov",
                "usuario_id": 1439
            },
            {
                "decripcion": "It's not useful? How is it useful if it gives you the wrong answer?",
                "fecha": { "$date" : "2015-06-27T07:48:19Z" },
                "usuario": "Zlatko",
                "usuario_id": 1990
            },
            {
                "decripcion": "The context show what is usefull: if data is normalized (ex. origen from CSV file), it is useful... For data imported from SQL is useful.",
                "fecha": { "$date" : "2015-09-22T10:17:14Z" },
                "usuario": "Peter Krauss",
                "usuario_id": 639
            },
            {
                "decripcion": "it is not a good answer it's an answer on how to get keys of one element in the collection not all keys in the collection!",
                "fecha": { "$date" : "2016-01-07T08:57:23Z" },
                "usuario": "yonatan",
                "usuario_id": 1991
            }
        ],
        "usuario": "Carlos LM",
        "usuario_id": 1992
    },
    {
        "_id": 1130,
        "fecha": { "$date" : "2018-10-30T12:10:01Z" },
        "decripcion": "\nIf you are using mongodb 3.4.4 and above then you can use below aggregation using $objectToArray and $group aggregation\n\ndb.collection.aggregate([\n  { \"$project\": {\n    \"data\": { \"$objectToArray\": \"$$ROOT\" }\n  }},\n  { \"$project\": { \"data\": \"$data.k\" }},\n  { \"$unwind\": \"$data\" },\n  { \"$group\": {\n    \"_id\": null,\n    \"keys\": { \"$addToSet\": \"$data\" }\n  }}\n])\n\n\nHere is the working example\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "This is the best answer. You can also use $match at the beginning of the aggregation pipeline to only get the keys of documents that match a condition(s).",
                "fecha": { "$date" : "2019-08-27T18:21:52Z" },
                "usuario": "RonquilloAeon",
                "usuario_id": 1993
            }
        ],
        "usuario": "Ashh",
        "usuario_id": 1965
    },
    {
        "_id": 1131,
        "fecha": { "$date" : "2014-08-11T09:12:18Z" },
        "decripcion": "\nUsing python.  Returns the set of all top-level keys in the collection:\n\n#Using pymongo and connection named 'db'\n\nreduce(\n    lambda all_keys, rec_keys: all_keys | set(rec_keys), \n    map(lambda d: d.keys(), db.things.find()), \n    set()\n)\n\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "I've found this to work but how efficient is it compared to a raw mongod query?",
                "fecha": { "$date" : "2016-01-27T19:47:43Z" },
                "usuario": "Jesus Gomez",
                "usuario_id": 1994
            },
            {
                "decripcion": "I'm quite sure this is extremely inefficient compared to doing this directly in Mongodb",
                "fecha": { "$date" : "2018-01-05T16:39:10Z" },
                "usuario": "Wolkenarchitekt",
                "usuario_id": 1986
            }
        ],
        "usuario": "Laizer",
        "usuario_id": 1995
    },
    {
        "_id": 1132,
        "fecha": { "$date" : "2014-04-25T00:42:24Z" },
        "decripcion": "\nHere is the sample worked in Python:\nThis sample returns the results inline.\n\nfrom pymongo import MongoClient\nfrom bson.code import Code\n\nmapper = Code(\"\"\"\n    function() {\n                  for (var key in this) { emit(key, null); }\n               }\n\"\"\")\nreducer = Code(\"\"\"\n    function(key, stuff) { return null; }\n\"\"\")\n\ndistinctThingFields = db.things.map_reduce(mapper, reducer\n    , out = {'inline' : 1}\n    , full_response = True)\n## do something with distinctThingFields['results']\n\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "BobHy",
        "usuario_id": 1996
    },
    {
        "_id": 1133,
        "fecha": { "$date" : "2018-04-10T21:12:57Z" },
        "decripcion": "\nI think the best way do this as mentioned here is in mongod 3.4.4+ but without using the $unwind operator and using only two stages in the pipeline. Instead we can use the $mergeObjects and $objectToArray operators.\n\nIn the $group stage, we use the $mergeObjects operator to return a single document where key/value are from all documents in the collection.\n\nThen comes the $project where we use $map and $objectToArray to return the keys.\n\nlet allTopLevelKeys =  [\n    {\n        \"$group\": {\n            \"_id\": null,\n            \"array\": {\n                \"$mergeObjects\": \"$$ROOT\"\n            }\n        }\n    },\n    {\n        \"$project\": {\n            \"keys\": {\n                \"$map\": {\n                    \"input\": { \"$objectToArray\": \"$array\" },\n                    \"in\": \"$$this.k\"\n                }\n            }\n        }\n    }\n];\n\n\n\n\nNow if we have a nested documents and want to get the keys as well, this is doable. For simplicity, let consider a document with simple embedded document that look like this:\n\n{field1: {field2: \"abc\"}, field3: \"def\"}\n{field1: {field3: \"abc\"}, field4: \"def\"}\n\n\nThe following pipeline yield all keys (field1, field2, field3, field4).\n\nlet allFistSecondLevelKeys = [\n    {\n        \"$group\": {\n            \"_id\": null,\n            \"array\": {\n                \"$mergeObjects\": \"$$ROOT\"\n            }\n        }\n    },\n    {\n        \"$project\": {\n            \"keys\": {\n                \"$setUnion\": [\n                    {\n                        \"$map\": {\n                            \"input\": {\n                                \"$reduce\": {\n                                    \"input\": {\n                                        \"$map\": {\n                                            \"input\": {\n                                                \"$objectToArray\": \"$array\"\n                                            },\n                                            \"in\": {\n                                                \"$cond\": [\n                                                    {\n                                                        \"$eq\": [\n                                                            {\n                                                                \"$type\": \"$$this.v\"\n                                                            },\n                                                            \"object\"\n                                                        ]\n                                                    },\n                                                    {\n                                                        \"$objectToArray\": \"$$this.v\"\n                                                    },\n                                                    [\n                                                        \"$$this\"\n                                                    ]\n                                                ]\n                                            }\n                                        }\n                                    },\n                                    \"initialValue\": [\n\n                                    ],\n                                    \"in\": {\n                                        \"$concatArrays\": [\n                                            \"$$this\",\n                                            \"$$value\"\n                                        ]\n                                    }\n                                }\n                            },\n                            \"in\": \"$$this.k\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n]\n\n\n\n\nWith a little effort, we can get the key for all subdocument in an array field where the elements are object as well. \n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "Yes $unwind will explode collection (no.of fields * no.of docs), we can avoid that by using $mergeObjects on all versions > 3.6.. Did the same, Should've seen this answer before, my life would've been easier that way (-_-)",
                "fecha": { "$date" : "2020-02-11T00:42:21Z" },
                "usuario": "whoami - fakeFaceTrueSoul",
                "usuario_id": 1997
            }
        ],
        "usuario": "styvane",
        "usuario_id": 1719
    },
    {
        "_id": 1134,
        "fecha": { "$date" : "2019-04-16T05:46:54Z" },
        "decripcion": "\nI am surprise, no one here has ans by using simple javascript and Set logic to automatically filter the duplicates values, simple example on mongo shellas below:\n\nvar allKeys = new Set()\ndb.collectionName.find().forEach( function (o) {for (key in o ) allKeys.add(key)})\nfor(let key of allKeys) print(key)\n\n\nThis will print all possible unique keys in the collection name: collectionName.\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "krishna Prasad",
        "usuario_id": 1998
    },
    {
        "_id": 1135,
        "fecha": { "$date" : "2016-08-02T21:27:39Z" },
        "decripcion": "\nThis works fine for me:\n\nvar arrayOfFieldNames = [];\n\nvar items = db.NAMECOLLECTION.find();\n\nwhile(items.hasNext()) {\n  var item = items.next();\n  for(var index in item) {\n    arrayOfFieldNames[index] = index;\n   }\n}\n\nfor (var index in arrayOfFieldNames) {\n  print(index);\n}\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "ackuser",
        "usuario_id": 1999
    },
    {
        "_id": 1136,
        "fecha": { "$date" : "2018-10-12T09:59:44Z" },
        "decripcion": "\nMaybe slightly off-topic, but you can recursively pretty-print all keys/fields of an object:\n\nfunction _printFields(item, level) {\n    if ((typeof item) != \"object\") {\n        return\n    }\n    for (var index in item) {\n        print(\" \".repeat(level * 4) + index)\n        if ((typeof item[index]) == \"object\") {\n            _printFields(item[index], level + 1)\n        }\n    }\n}\n\nfunction printFields(item) {\n    _printFields(item, 0)\n}\n\n\nUseful when all objects in a collection has the same structure. \n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "qed",
        "usuario_id": 2000
    },
    {
        "_id": 1137,
        "fecha": { "$date" : "2018-02-25T21:59:25Z" },
        "decripcion": "\nTo get a list of all the keys minus _id, consider running the following aggregate pipeline:\n\nvar keys = db.collection.aggregate([\n    { \"$project\": {\n       \"hashmaps\": { \"$objectToArray\": \"$$ROOT\" } \n    } }, \n    { \"$project\": {\n       \"fields\": \"$hashmaps.k\"\n    } },\n    { \"$group\": {\n        \"_id\": null,\n        \"fields\": { \"$addToSet\": \"$fields\" }\n    } },\n    { \"$project\": {\n            \"keys\": {\n                \"$setDifference\": [\n                    {\n                        \"$reduce\": {\n                            \"input\": \"$fields\",\n                            \"initialValue\": [],\n                            \"in\": { \"$setUnion\" : [\"$$value\", \"$$this\"] }\n                        }\n                    },\n                    [\"_id\"]\n                ]\n            }\n        }\n    }\n]).toArray()[0][\"keys\"];\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "chridam",
        "usuario_id": 557
    },
    {
        "_id": 1138,
        "fecha": { "$date" : "2018-05-14T23:44:00Z" },
        "decripcion": "\nAs per the mongoldb documentation, a combination of distinct\n\n\n  Finds the distinct values for a specified field across a single collection or view and returns the results in an array.\n\n\nand indexes collection operations are what would return all possible values for a given key, or index:\n\n\n  Returns an array that holds a list of documents that identify and describe the existing indexes on the collection\n\n\nSo in a given method one could do use a method like the following one, in order to query a collection for all it's registered indexes, and return, say an object with the indexes for keys (this example uses async/await for NodeJS, but obviously you could use any other asynchronous approach):\n\nasync function GetFor(collection, index) {\n\n    let currentIndexes;\n    let indexNames = [];\n    let final = {};\n    let vals = [];\n\n    try {\n        currentIndexes = await collection.indexes();\n        await ParseIndexes();\n        //Check if a specific index was queried, otherwise, iterate for all existing indexes\n        if (index && typeof index === \"string\") return await ParseFor(index, indexNames);\n        await ParseDoc(indexNames);\n        await Promise.all(vals);\n        return final;\n    } catch (e) {\n        throw e;\n    }\n\n    function ParseIndexes() {\n        return new Promise(function (result) {\n            let err;\n            for (let ind in currentIndexes) {\n                let index = currentIndexes[ind];\n                if (!index) {\n                    err = \"No Key For Index \"+index; break;\n                }\n                let Name = Object.keys(index.key);\n                if (Name.length === 0) {\n                    err = \"No Name For Index\"; break;\n                }\n                indexNames.push(Name[0]);\n            }\n            return result(err ? Promise.reject(err) : Promise.resolve());\n        })\n    }\n\n    async function ParseFor(index, inDoc) {\n        if (inDoc.indexOf(index) === -1) throw \"No Such Index In Collection\";\n        try {\n            await DistinctFor(index);\n            return final;\n        } catch (e) {\n            throw e\n        }\n    }\n    function ParseDoc(doc) {\n        return new Promise(function (result) {\n            let err;\n            for (let index in doc) {\n                let key = doc[index];\n                if (!key) {\n                    err = \"No Key For Index \"+index; break;\n                }\n                vals.push(new Promise(function (pushed) {\n                    DistinctFor(key)\n                        .then(pushed)\n                        .catch(function (err) {\n                            return pushed(Promise.resolve());\n                        })\n                }))\n            }\n            return result(err ? Promise.reject(err) : Promise.resolve());\n        })\n    }\n\n    async function DistinctFor(key) {\n        if (!key) throw \"Key Is Undefined\";\n        try {\n            final[key] = await collection.distinct(key);\n        } catch (e) {\n            final[key] = 'failed';\n            throw e;\n        }\n    }\n}\n\n\nSo querying a collection with the basic _id index, would return the following (test collection only has one document at the time of the test):\n\nMongo.MongoClient.connect(url, function (err, client) {\n    assert.equal(null, err);\n\n    let collection = client.db('my db').collection('the targeted collection');\n\n    GetFor(collection, '_id')\n        .then(function () {\n            //returns\n            // { _id: [ 5ae901e77e322342de1fb701 ] }\n        })\n        .catch(function (err) {\n            //manage your error..\n        })\n});\n\n\nMind you, this uses methods native to the NodeJS Driver. As some other answers have suggested, there are other approaches, such as the aggregate framework. I personally find this approach more flexible, as you can easily create and fine-tune how to return the results. Obviously, this only addresses top-level attributes, not nested ones.\nAlso, to guarantee that all documents are represented should there be secondary indexes (other than the main _id one), those indexes should be set as required.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "jlmurph",
        "usuario_id": 2001
    },
    {
        "_id": 1139,
        "fecha": { "$date" : "2018-12-25T13:26:17Z" },
        "decripcion": "\nWe can achieve this by Using mongo js file. Add below code in your getCollectionName.js file and run js file in the console of Linux as given below :\n\n\n  mongo --host 192.168.1.135 getCollectionName.js\n\n\ndb_set = connect(\"192.168.1.135:27017/database_set_name\"); // for Local testing\n// db_set.auth(\"username_of_db\", \"password_of_db\"); // if required\n\ndb_set.getMongo().setSlaveOk();\n\nvar collectionArray = db_set.getCollectionNames();\n\ncollectionArray.forEach(function(collectionName){\n\n    if ( collectionName == 'system.indexes' || collectionName == 'system.profile' || collectionName == 'system.users' ) {\n        return;\n    }\n\n    print(\"\\nCollection Name = \"+collectionName);\n    print(\"All Fields :\\n\");\n\n    var arrayOfFieldNames = []; \n    var items = db_set[collectionName].find();\n    // var items = db_set[collectionName].find().sort({'_id':-1}).limit(100); // if you want fast & scan only last 100 records of each collection\n    while(items.hasNext()) {\n        var item = items.next(); \n        for(var index in item) {\n            arrayOfFieldNames[index] = index;\n        }\n    }\n    for (var index in arrayOfFieldNames) {\n        print(index);\n    }\n\n});\n\nquit();\n\n\nThanks @ackuser\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Irshad Khan",
        "usuario_id": 2002
    },
    {
        "_id": 1140,
        "fecha": { "$date" : "2019-08-14T13:16:49Z" },
        "decripcion": "\nFollowing the thread from @James Cropcho's answer, I landed on the following which I found to be super easy to use. It is a binary tool, which is exactly what I was looking for:\nmongoeye.\n\nUsing this tool it took about 2 minutes to get my schema exported from command line.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "paneer_tikka",
        "usuario_id": 2003
    },
    {
        "_id": 1141,
        "fecha": { "$date" : "2020-04-04T00:01:08Z" },
        "decripcion": "\nI know this question is 10 years old but there is no C# solution and this took me hours to figure out. I'm using the .NET driver and System.Linq to return a list of the keys.\n\nvar map = new BsonJavaScript(\"function() { for (var key in this) { emit(key, null); } }\");\nvar reduce = new BsonJavaScript(\"function(key, stuff) { return null; }\");\nvar options = new MapReduceOptions<BsonDocument, BsonDocument>();\nvar result = await collection.MapReduceAsync(map, reduce, options);\nvar list = result.ToEnumerable().Select(item => item[\"_id\"].ToString());\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Andrew Samole",
        "usuario_id": 2004
    },
    {
        "_id": 1142,
        "fecha": { "$date" : "2021-07-21T09:31:41Z" },
        "decripcion": "\nBased on @Wolkenarchitekt answer: https://stackoverflow.com/a/48117846/8808983, I write a script that can find patterns in all keys in the db and I think it can help others reading this thread:\n\"\"\"\nPython 3\nThis script get list of patterns and print the collections that contains fields with this patterns.\n\"\"\"\n\nimport argparse\n\nimport pymongo\nfrom bson import Code\n\n\n# initialize mongo connection:\ndef get_db():\n    client = pymongo.MongoClient(\"172.17.0.2\")\n    db = client[\"Data\"]\n    return db\n\n\ndef get_commandline_options():\n    description = \"To run use: python db_fields_pattern_finder.py -p <list_of_patterns>\"\n    parser = argparse.ArgumentParser(description=description)\n    parser.add_argument('-p', '--patterns', nargs=\"+\", help='List of patterns to look for in the db.', required=True)\n    return parser.parse_args()\n\n\ndef report_matching_fields(relevant_fields_by_collection):\n    print(\"Matches:\")\n\n    for collection_name in relevant_fields_by_collection:\n        if relevant_fields_by_collection[collection_name]:\n            print(f\"{collection_name}: {relevant_fields_by_collection[collection_name]}\")\n\n    # pprint(relevant_fields_by_collection)\n\n\ndef get_collections_names(db):\n    \"\"\"\n    :param pymongo.database.Database db:\n    :return list: collections names\n    \"\"\"\n    return db.list_collection_names()\n\n\ndef get_keys(db, collection):\n    \"\"\"\n    See: https://stackoverflow.com/a/48117846/8808983\n    :param db:\n    :param collection:\n    :return:\n    \"\"\"\n    map = Code(\"function() { for (var key in this) { emit(key, null); } }\")\n    reduce = Code(\"function(key, stuff) { return null; }\")\n    result = db[collection].map_reduce(map, reduce, \"myresults\")\n    return result.distinct('_id')\n\n\ndef get_fields(db, collection_names):\n    fields_by_collections = {}\n    for collection_name in collection_names:\n        fields_by_collections[collection_name] = get_keys(db, collection_name)\n    return fields_by_collections\n\n\ndef get_matches_fields(fields_by_collections, patterns):\n    relevant_fields_by_collection = {}\n    for collection_name in fields_by_collections:\n        relevant_fields = [field for field in fields_by_collections[collection_name] if\n                           [pattern for pattern in patterns if\n                            pattern in field]]\n        relevant_fields_by_collection[collection_name] = relevant_fields\n\n    return relevant_fields_by_collection\n\n\ndef main(patterns):\n    \"\"\"\n    :param list patterns: List of strings to look for in the db.\n    \"\"\"\n    db = get_db()\n\n    collection_names = get_collections_names(db)\n    fields_by_collections = get_fields(db, collection_names)\n    relevant_fields_by_collection = get_matches_fields(fields_by_collections, patterns)\n\n    report_matching_fields(relevant_fields_by_collection)\n\n\nif __name__ == '__main__':\n    args = get_commandline_options()\n    main(args.patterns)\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Rea Haas",
        "usuario_id": 2005
    },
    {
        "_id": 1143,
        "fecha": { "$date" : "2014-03-28T13:37:47Z" },
        "decripcion": "\nI extended Carlos LM's solution a bit so it's more detailed.\n\nExample of a schema:\n\nvar schema = {\n    _id: 123,\n    id: 12,\n    t: 'title',\n    p: 4.5,\n    ls: [{\n            l: 'lemma',\n            p: {\n                pp: 8.9\n            }\n        },\n         {\n            l: 'lemma2',\n            p: {\n               pp: 8.3\n           }\n        }\n    ]\n};\n\n\nType into the console:\n\nvar schemafy = function(schema, i, limit) {\n    var i = (typeof i !== 'undefined') ? i : 1;\n    var limit = (typeof limit !== 'undefined') ? limit : false;\n    var type = '';\n    var array = false;\n\n    for (key in schema) {\n        type = typeof schema[key];\n        array = (schema[key] instanceof Array) ? true : false;\n\n        if (type === 'object') {\n            print(Array(i).join('    ') + key+' <'+((array) ? 'array' : type)+'>:');\n            schemafy(schema[key], i+1, array);\n        } else {\n            print(Array(i).join('    ') + key+' <'+type+'>');\n        }\n\n        if (limit) {\n            break;\n        }\n    }\n}\n\n\nRun:\n\nschemafy(db.collection.findOne());\n\n\nOutput\n\n_id <number>\nid <number>\nt <string>\np <number>\nls <object>:\n    0 <object>:\n    l <string>\n    p <object>:\n        pp <number> \n\n    ",
        "votes": -1,
        "comentarios": [
            {
                "decripcion": "his answer is wrong and you built on top of it.  the whole point is to output all the fields of all the documents, not the first document which may have different fields than each next one.",
                "fecha": { "$date" : "2014-03-31T23:43:03Z" },
                "usuario": "Asya Kamsky",
                "usuario_id": 1989
            }
        ],
        "usuario": "va5ja",
        "usuario_id": 2006
    },
    {
        "_id": 1144,
        "fecha": { "$date" : "2017-10-10T09:43:39Z" },
        "decripcion": "\nI was trying to write in nodejs and finally came up with this:\n\ndb.collection('collectionName').mapReduce(\nfunction() {\n    for (var key in this) {\n        emit(key, null);\n    }\n},\nfunction(key, stuff) {\n    return null;\n}, {\n    \"out\": \"allFieldNames\"\n},\nfunction(err, results) {\n    var fields = db.collection('allFieldNames').distinct('_id');\n    fields\n        .then(function(data) {\n            var finalData = {\n                \"status\": \"success\",\n                \"fields\": data\n            };\n            res.send(finalData);\n            delteCollection(db, 'allFieldNames');\n        })\n        .catch(function(err) {\n            res.send(err);\n            delteCollection(db, 'allFieldNames');\n        });\n });\n\n\nAfter reading the newly created collection \"allFieldNames\", delete it.\n\ndb.collection(\"allFieldNames\").remove({}, function (err,result) {\n     db.close();\n     return; \n});\n\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "Gautam",
        "usuario_id": 967
    },
    {
        "_id": 1145,
        "fecha": { "$date" : "2014-03-21T11:41:39Z" },
        "decripcion": "\nI have 1 simpler work around...\n\nWhat you can do is while inserting data/document into your main collection \"things\" you must insert the attributes in 1 separate collection lets say \"things_attributes\".\n\nso every time you insert in \"things\", you do get from \"things_attributes\" compare values of that document with your new document keys if any new key present append it in that document and again re-insert it.\n\nSo things_attributes will have only 1 document of unique keys which you can easily get when ever you require by using findOne()\n    ",
        "votes": -3,
        "comentarios": [
            {
                "decripcion": "For databases with many entries where queries for all keys are frequent and inserts are infrequent, caching the result of the \"get all keys\" query would make sense.  This is one way to do that.",
                "fecha": { "$date" : "2019-04-02T15:51:32Z" },
                "usuario": "Him",
                "usuario_id": 2007
            }
        ],
        "usuario": "Paresh Behede",
        "usuario_id": 2008
    },
    {
        "_id": 1146,
        "fecha": { "$date" : "2019-04-18T04:17:34Z" },
        "decripcion": "\nStarting with the 3.2 release of MongoDB, you can get N random docs from a collection using the $sample aggregation pipeline operator:\n\n// Get one random document from the mycoll collection.\ndb.mycoll.aggregate([{ $sample: { size: 1 } }])\n\n\nIf you want to select the random document(s) from a filtered subset of the collection, prepend a $match stage to the pipeline:\n\n// Get one random document matching {a: 10} from the mycoll collection.\ndb.mycoll.aggregate([\n    { $match: { a: 10 } },\n    { $sample: { size: 1 } }\n])\n\n\nAs noted in the comments, when size is greater than 1, there may be duplicates in the returned document sample.\n    ",
        "votes": 311,
        "comentarios": [
            {
                "decripcion": "This is a good way, but remember that it DO NOT guarantee that there are no copies of the same object in the sample.",
                "fecha": { "$date" : "2016-01-06T01:28:59Z" },
                "usuario": "Matheus Araujo",
                "usuario_id": 2009
            },
            {
                "decripcion": "@MatheusAraujo which won't matter if you want one record but good point anyway",
                "fecha": { "$date" : "2016-01-10T03:35:21Z" },
                "usuario": "Toby",
                "usuario_id": 1650
            },
            {
                "decripcion": "Not to be pedantic but the question doesn't specify a MongoDB version, so I'd assume having the most recent version is reasonable.",
                "fecha": { "$date" : "2016-04-07T17:35:17Z" },
                "usuario": "dalanmiller",
                "usuario_id": 2010
            },
            {
                "decripcion": "@Nepoxx See the docs regarding the processing involved.",
                "fecha": { "$date" : "2016-06-07T13:32:45Z" },
                "usuario": "JohnnyHK",
                "usuario_id": 672
            },
            {
                "decripcion": "@brycejl That would have the fatal flaw of not matching anything if the $sample stage didn't select any matching documents.",
                "fecha": { "$date" : "2020-04-19T00:21:28Z" },
                "usuario": "JohnnyHK",
                "usuario_id": 672
            }
        ],
        "usuario": "JohnnyHK",
        "usuario_id": 672
    },
    {
        "_id": 1147,
        "fecha": { "$date" : "2014-02-16T02:25:10Z" },
        "decripcion": "\nDo a count of all records, generate a random number between 0 and the count, and then do:\n\ndb.yourCollection.find().limit(-1).skip(yourRandomNumber).next()\n\n    ",
        "votes": 118,
        "comentarios": [
            {
                "decripcion": "Unfortunately skip() is rather inefficient since it has to scan that many documents. Also, there is a race condition if rows are removed between getting the count and running the query.",
                "fecha": { "$date" : "2010-05-17T18:49:17Z" },
                "usuario": "mstearn",
                "usuario_id": 2011
            },
            {
                "decripcion": "Note that the random number should be between 0 and the count (exclusive). I.e., if you have 10 items, the random number should be between 0 and 9. Otherwise the cursor could try to skip past the last item, and nothing would be returned.",
                "fecha": { "$date" : "2011-04-20T22:05:03Z" },
                "usuario": "matt",
                "usuario_id": 2012
            },
            {
                "decripcion": "Thanks, worked perfectly for my purposes. @mstearn, your comments on both efficiency and race conditions are valid, but for collections where neither matters (one-time server-side batch extract in a collection where records aren't deleted), this is vastly superior to the hacky (IMO) solution in the Mongo Cookbook.",
                "fecha": { "$date" : "2012-09-05T16:27:01Z" },
                "usuario": "Michael Moussa",
                "usuario_id": 2013
            },
            {
                "decripcion": "what does setting the limit to -1 do?",
                "fecha": { "$date" : "2013-01-27T12:46:48Z" },
                "usuario": "MonkeyBonkey",
                "usuario_id": 2014
            },
            {
                "decripcion": "@MonkeyBonkey docs.mongodb.org/meta-driver/latest/legacy/\u2026 \"If numberToReturn is 0, the db will use the default return size. If the number is negative, then the database will return that number and close the cursor.\"",
                "fecha": { "$date" : "2013-01-27T15:24:22Z" },
                "usuario": "ceejayoz",
                "usuario_id": 2015
            }
        ],
        "usuario": "ceejayoz",
        "usuario_id": 2015
    },
    {
        "_id": 1148,
        "fecha": { "$date" : "2016-10-02T16:15:19Z" },
        "decripcion": "\nUpdate for MongoDB 3.2\n\n3.2 introduced $sample to the aggregation pipeline.\n\nThere's also a good blog post on putting it into practice.\n\nFor older versions (previous answer)\n\nThis was actually a feature request:  http://jira.mongodb.org/browse/SERVER-533 but it was filed under \"Won't fix.\"\n\nThe cookbook has a very good recipe to select a random document out of a collection:  http://cookbook.mongodb.org/patterns/random-attribute/\n\nTo paraphrase the recipe, you assign random numbers to your documents:\n\ndb.docs.save( { key : 1, ..., random : Math.random() } )\n\n\nThen select a random document:\n\nrand = Math.random()\nresult = db.docs.findOne( { key : 2, random : { $gte : rand } } )\nif ( result == null ) {\n  result = db.docs.findOne( { key : 2, random : { $lte : rand } } )\n}\n\n\nQuerying with both $gte and $lte is necessary to find the document with a random number nearest rand.\n\nAnd of course you'll want to index on the random field:\n\ndb.docs.ensureIndex( { key : 1, random :1 } )\n\n\nIf you're already querying against an index, simply drop it, append random: 1 to it, and add it again.\n    ",
        "votes": 88,
        "comentarios": [
            {
                "decripcion": "And here is a simple way to add the random field to every document in the collection.      function setRandom() {         db.topics.find().forEach(function (obj) {obj.random = Math.random();db.topics.save(obj);});     }     db.eval(setRandom);",
                "fecha": { "$date" : "2011-06-01T01:18:07Z" },
                "usuario": "Geoffrey",
                "usuario_id": 2016
            },
            {
                "decripcion": "This selects a document randomly, but if you do it more than once, the lookups are not independent. You are more likely to get the same document twice in a row than random chance would dictate.",
                "fecha": { "$date" : "2012-01-10T02:19:12Z" },
                "usuario": "lacker",
                "usuario_id": 2017
            },
            {
                "decripcion": "Looks like a bad implementation of circular hashing. It's even worse than lacker says: even one lookup is biased because the random numbers aren't evenly distributed. To do this properly, you'd need a set of, say, 10 random numbers per document. The more random numbers you use per document, the more uniform the output distribution becomes.",
                "fecha": { "$date" : "2012-03-29T21:11:15Z" },
                "usuario": "Thomas",
                "usuario_id": 2018
            },
            {
                "decripcion": "The MongoDB JIRA ticket is still alive: jira.mongodb.org/browse/SERVER-533 Go comment and vote if you want the feature.",
                "fecha": { "$date" : "2012-06-15T20:32:06Z" },
                "usuario": "David J.",
                "usuario_id": 2019
            },
            {
                "decripcion": "Take note the type of caveat mentioned. This does not work efficiently with small amount of documents. Given two items with random key of 3 and 63. The document #63 will be chosen more frequently where $gte is first. Alternative solution stackoverflow.com/a/9499484/79201 would work better in this case.",
                "fecha": { "$date" : "2013-10-30T15:50:05Z" },
                "usuario": "Ryan Schumacher",
                "usuario_id": 2020
            }
        ],
        "usuario": "Michael",
        "usuario_id": 303
    },
    {
        "_id": 1149,
        "fecha": { "$date" : "2012-02-29T12:50:05Z" },
        "decripcion": "\nYou can also use MongoDB's geospatial indexing feature to select the documents 'nearest' to a random number.\n\nFirst, enable geospatial indexing on a collection:\n\ndb.docs.ensureIndex( { random_point: '2d' } )\n\n\nTo create a bunch of documents with random points on the X-axis:\n\nfor ( i = 0; i < 10; ++i ) {\n    db.docs.insert( { key: i, random_point: [Math.random(), 0] } );\n}\n\n\nThen you can get a random document from the collection like this:\n\ndb.docs.findOne( { random_point : { $near : [Math.random(), 0] } } )\n\n\nOr you can retrieve several document nearest to a random point:\n\ndb.docs.find( { random_point : { $near : [Math.random(), 0] } } ).limit( 4 )\n\n\nThis requires only one query and no null checks, plus the code is clean, simple and flexible. You could even use the Y-axis of the geopoint to add a second randomness dimension to your query.\n    ",
        "votes": 57,
        "comentarios": [
            {
                "decripcion": "I like this answer, Its the most efficient one I've seen that doesn't require a bunch of messing about server side.",
                "fecha": { "$date" : "2012-03-10T17:58:25Z" },
                "usuario": "Tony Million",
                "usuario_id": 2021
            },
            {
                "decripcion": "This is also biased towards documents that happen to have few points in their vicinity.",
                "fecha": { "$date" : "2012-03-29T21:13:24Z" },
                "usuario": "Thomas",
                "usuario_id": 2018
            },
            {
                "decripcion": "That is true, and there are other problems as well: documents are strongly correlated on their random keys, so it's highly predictable which documents will be returned as a group if you select multiple documents. Also, documents close to the bounds (0 and 1) are less likely to be chosen. The latter could be solved by using spherical geomapping, which wraps around at the edges.  However, you should see this answer as an improved version of the cookbook recipe, not as a perfect random selection mechanism. It's random enough for most purposes.",
                "fecha": { "$date" : "2012-03-30T11:51:33Z" },
                "usuario": "Nico de Poel",
                "usuario_id": 2022
            },
            {
                "decripcion": "@NicodePoel, I like your answer as well as your comment! And I have a couple of questions for you: 1- How do you know that points close to bounds 0 and 1 are less likely to be chosen, is that based on some mathematical ground?, 2- Can you elaborate more on spherical geomapping, how it will better the random selection, and how to do it in MongoDB? ... Appreciated!",
                "fecha": { "$date" : "2015-09-10T12:47:25Z" },
                "usuario": "securecurve",
                "usuario_id": 2023
            },
            {
                "decripcion": "Apprichiate your idea. Finally, I have a great code that is much CPU & RAM friendly! Thank you",
                "fecha": { "$date" : "2020-03-03T22:49:43Z" },
                "usuario": "Qais Bsharat",
                "usuario_id": 2024
            }
        ],
        "usuario": "Nico de Poel",
        "usuario_id": 2022
    },
    {
        "_id": 1150,
        "fecha": { "$date" : "2015-06-11T16:14:08Z" },
        "decripcion": "\nThe following recipe is a little slower than the mongo cookbook solution (add a random key on every document), but returns more evenly distributed random documents.  It's a little less-evenly distributed than the skip( random ) solution, but much faster and more fail-safe in case documents are removed.\n\n\n\nfunction draw(collection, query) {\n    // query: mongodb query object (optional)\n    var query = query || { };\n    query['random'] = { $lte: Math.random() };\n    var cur = collection.find(query).sort({ rand: -1 });\n    if (! cur.hasNext()) {\n        delete query.random;\n        cur = collection.find(query).sort({ rand: -1 });\n    }\n    var doc = cur.next();\n    doc.random = Math.random();\n    collection.update({ _id: doc._id }, doc);\n    return doc;\n}\n\n\nIt also requires you to add a random \"random\" field to your documents so don't forget to add this when you create them : you may need to initialize your collection as shown by Geoffrey\n\nfunction addRandom(collection) { \n    collection.find().forEach(function (obj) {\n        obj.random = Math.random();\n        collection.save(obj);\n    }); \n} \ndb.eval(addRandom, db.things);\n\n\nBenchmark results\n\nThis method is much faster than the skip() method (of ceejayoz) and generates more uniformly random documents than the \"cookbook\" method reported by Michael:\n\nFor a collection with 1,000,000 elements:\n\n\nThis method takes less than a millisecond on my machine \nthe skip() method takes 180 ms on average\n\n\nThe cookbook method will cause large numbers of documents to never get picked because their random number does not favor them. \n\n\nThis method will pick all elements evenly over time. \nIn my benchmark it was only 30% slower than the cookbook method.\nthe randomness is not 100% perfect but it is very good (and it can be improved if necessary)\n\n\nThis recipe is not perfect - the perfect solution would be a built-in feature as others have noted.\nHowever it should be a good compromise for many purposes.\n    ",
        "votes": 21,
        "comentarios": [],
        "usuario": "spam_eggs",
        "usuario_id": 2025
    },
    {
        "_id": 1151,
        "fecha": { "$date" : "2015-06-26T11:06:04Z" },
        "decripcion": "\n\n\nHere is a way using the default ObjectId values for _id and a little math and logic.\n\n// Get the \"min\" and \"max\" timestamp values from the _id in the collection and the \n// diff between.\n// 4-bytes from a hex string is 8 characters\n\nvar min = parseInt(db.collection.find()\n        .sort({ \"_id\": 1 }).limit(1).toArray()[0]._id.str.substr(0,8),16)*1000,\n    max = parseInt(db.collection.find()\n        .sort({ \"_id\": -1 })limit(1).toArray()[0]._id.str.substr(0,8),16)*1000,\n    diff = max - min;\n\n// Get a random value from diff and divide/multiply be 1000 for The \"_id\" precision:\nvar random = Math.floor(Math.floor(Math.random(diff)*diff)/1000)*1000;\n\n// Use \"random\" in the range and pad the hex string to a valid ObjectId\nvar _id = new ObjectId(((min + random)/1000).toString(16) + \"0000000000000000\")\n\n// Then query for the single document:\nvar randomDoc = db.collection.find({ \"_id\": { \"$gte\": _id } })\n   .sort({ \"_id\": 1 }).limit(1).toArray()[0];\n\n\nThat's the general logic in shell representation and easily adaptable.\n\nSo in points:\n\n\nFind the min and max primary key values in the collection\nGenerate a random number that falls between the timestamps of those documents.\nAdd the random number to the minimum value and find the first document that is greater than or equal to that value.\n\n\nThis uses \"padding\" from the timestamp value in \"hex\" to form a valid ObjectId value since that is what we are looking for. Using integers as the _id value is essentially simplier but the same basic idea in the points.\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "I have a collection of 300 000 000 lines. This is the only solution that works and it's fast enough.",
                "fecha": { "$date" : "2019-04-14T06:51:41Z" },
                "usuario": "Nikos",
                "usuario_id": 2026
            }
        ],
        "usuario": "Blakes Seven",
        "usuario_id": 1757
    },
    {
        "_id": 1152,
        "fecha": { "$date" : "2017-02-06T17:00:45Z" },
        "decripcion": "\nNow you can use the aggregate.\nExample:\n\ndb.users.aggregate(\n   [ { $sample: { size: 3 } } ]\n)\n\n\nSee the doc.\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "Note: $sample may get the same document more than once",
                "fecha": { "$date" : "2017-05-29T04:46:44Z" },
                "usuario": "Saman",
                "usuario_id": 2027
            }
        ],
        "usuario": "dbam",
        "usuario_id": 2028
    },
    {
        "_id": 1153,
        "fecha": { "$date" : "2015-01-24T14:38:26Z" },
        "decripcion": "\nIn Python using pymongo:\n\nimport random\n\ndef get_random_doc():\n    count = collection.count()\n    return collection.find()[random.randrange(count)]\n\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "Worth noting that internally, this will use skip and limit, just like many of the other answers.",
                "fecha": { "$date" : "2015-01-24T15:07:26Z" },
                "usuario": "JohnnyHK",
                "usuario_id": 672
            },
            {
                "decripcion": "Your answer is correct. However, please replace count()with estimated_document_count() as count() is deprecated in Mongdo v4.2.",
                "fecha": { "$date" : "2020-06-11T23:50:14Z" },
                "usuario": "user3848207",
                "usuario_id": 2029
            }
        ],
        "usuario": "Jabba",
        "usuario_id": 2030
    },
    {
        "_id": 1154,
        "fecha": { "$date" : "2018-04-17T14:37:24Z" },
        "decripcion": "\nUsing Python (pymongo), the aggregate function also works.\n\ncollection.aggregate([{'$sample': {'size': sample_size }}])\n\n\nThis approach is a lot faster than running a query for a random number (e.g. collection.find([random_int]). This is especially the case for large collections. \n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Daniel",
        "usuario_id": 1670
    },
    {
        "_id": 1155,
        "fecha": { "$date" : "2010-05-13T13:48:41Z" },
        "decripcion": "\nit is tough if there is no data there to key off of.  what are the _id field?  are they mongodb object id's?  If so, you could get the highest and lowest values:\n\nlowest = db.coll.find().sort({_id:1}).limit(1).next()._id;\nhighest = db.coll.find().sort({_id:-1}).limit(1).next()._id;\n\n\nthen if you assume the id's are uniformly distributed (but they aren't, but at least it's a start):\n\nunsigned long long L = first_8_bytes_of(lowest)\nunsigned long long H = first_8_bytes_of(highest)\n\nV = (H - L) * random_from_0_to_1();\nN = L + V;\noid = N concat random_4_bytes();\n\nrandomobj = db.coll.find({_id:{$gte:oid}}).limit(1);\n\n    ",
        "votes": 7,
        "comentarios": [
            {
                "decripcion": "Any ideas how would that look like in PHP? or at least what language have you used above? is it Python?",
                "fecha": { "$date" : "2013-05-20T18:03:41Z" },
                "usuario": "Marcin",
                "usuario_id": 189
            }
        ],
        "usuario": "dm.",
        "usuario_id": 2031
    },
    {
        "_id": 1156,
        "fecha": { "$date" : "2014-12-04T23:53:26Z" },
        "decripcion": "\nYou can pick a random timestamp and search for the first object that was created afterwards.\nIt will only scan a single document, though it doesn't necessarily give you a uniform distribution.\n\nvar randRec = function() {\n    // replace with your collection\n    var coll = db.collection\n    // get unixtime of first and last record\n    var min = coll.find().sort({_id: 1}).limit(1)[0]._id.getTimestamp() - 0;\n    var max = coll.find().sort({_id: -1}).limit(1)[0]._id.getTimestamp() - 0;\n\n    // allow to pass additional query params\n    return function(query) {\n        if (typeof query === 'undefined') query = {}\n        var randTime = Math.round(Math.random() * (max - min)) + min;\n        var hexSeconds = Math.floor(randTime / 1000).toString(16);\n        var id = ObjectId(hexSeconds + \"0000000000000000\");\n        query._id = {$gte: id}\n        return coll.find(query).limit(1)\n    };\n}();\n\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "It would be easily possible to skew the random date to account for superlinear database growth.",
                "fecha": { "$date" : "2015-03-31T18:20:52Z" },
                "usuario": "Martin Nowak",
                "usuario_id": 2032
            },
            {
                "decripcion": "this is the best method for very large collections, it works at O(1), unline skip() or count() used in the other solutions here",
                "fecha": { "$date" : "2016-11-02T09:04:15Z" },
                "usuario": "marmor",
                "usuario_id": 1753
            }
        ],
        "usuario": "Martin Nowak",
        "usuario_id": 2032
    },
    {
        "_id": 1157,
        "fecha": { "$date" : "2014-12-23T17:29:22Z" },
        "decripcion": "\nMy solution on php:\n\n/**\n * Get random docs from Mongo\n * @param $collection\n * @param $where\n * @param $fields\n * @param $limit\n * @author happy-code\n * @url happy-code.com\n */\nprivate function _mongodb_get_random (MongoCollection $collection, $where = array(), $fields = array(), $limit = false) {\n\n    // Total docs\n    $count = $collection->find($where, $fields)->count();\n\n    if (!$limit) {\n        // Get all docs\n        $limit = $count;\n    }\n\n    $data = array();\n    for( $i = 0; $i < $limit; $i++ ) {\n\n        // Skip documents\n        $skip = rand(0, ($count-1) );\n        if ($skip !== 0) {\n            $doc = $collection->find($where, $fields)->skip($skip)->limit(1)->getNext();\n        } else {\n            $doc = $collection->find($where, $fields)->limit(1)->getNext();\n        }\n\n        if (is_array($doc)) {\n            // Catch document\n            $data[ $doc['_id']->{'$id'} ] = $doc;\n            // Ignore current document when making the next iteration\n            $where['_id']['$nin'][] = $doc['_id'];\n        }\n\n        // Every iteration catch document and decrease in the total number of document\n        $count--;\n\n    }\n\n    return $data;\n}\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "code_turist",
        "usuario_id": 2033
    },
    {
        "_id": 1158,
        "fecha": { "$date" : "2016-03-02T19:09:42Z" },
        "decripcion": "\nIn order to get a determinated number of random docs without duplicates:\n\n\nfirst get all ids\nget size of documents\nloop geting random index and skip duplicated\n\nnumber_of_docs=7\ndb.collection('preguntas').find({},{_id:1}).toArray(function(err, arr) {\ncount=arr.length\nidsram=[]\nrans=[]\nwhile(number_of_docs!=0){\n    var R = Math.floor(Math.random() * count);\n    if (rans.indexOf(R) > -1) {\n     continue\n      } else {           \n               ans.push(R)\n               idsram.push(arr[R]._id)\n               number_of_docs--\n                }\n    }\ndb.collection('preguntas').find({}).toArray(function(err1, doc1) {\n                if (err1) { console.log(err1); return;  }\n               res.send(doc1)\n            });\n        });\n\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Fabio Guerra",
        "usuario_id": 2034
    },
    {
        "_id": 1159,
        "fecha": { "$date" : "2014-02-06T11:01:49Z" },
        "decripcion": "\nI would suggest using map/reduce, where you use the map function to only emit when a random value is above a given probability. \n\nfunction mapf() {\n    if(Math.random() <= probability) {\n    emit(1, this);\n    }\n}\n\nfunction reducef(key,values) {\n    return {\"documents\": values};\n}\n\nres = db.questions.mapReduce(mapf, reducef, {\"out\": {\"inline\": 1}, \"scope\": { \"probability\": 0.5}});\nprintjson(res.results);\n\n\nThe reducef function above works because only one key ('1') is emitted from the map function.\n\nThe value of the \"probability\" is defined in the \"scope\", when invoking mapRreduce(...)\n\nUsing mapReduce like this should also be usable on a sharded db.\n\nIf you want to select exactly n of m documents from the db, you could do it like this:\n\nfunction mapf() {\n    if(countSubset == 0) return;\n    var prob = countSubset / countTotal;\n    if(Math.random() <= prob) {\n        emit(1, {\"documents\": [this]}); \n        countSubset--;\n    }\n    countTotal--;\n}\n\nfunction reducef(key,values) {\n    var newArray = new Array();\nfor(var i=0; i < values.length; i++) {\n    newArray = newArray.concat(values[i].documents);\n}\n\nreturn {\"documents\": newArray};\n}\n\nres = db.questions.mapReduce(mapf, reducef, {\"out\": {\"inline\": 1}, \"scope\": {\"countTotal\": 4, \"countSubset\": 2}})\nprintjson(res.results);\n\n\nWhere \"countTotal\" (m) is the number of documents in the db, and \"countSubset\" (n) is the number of documents to retrieve.\n\nThis approach might give some problems on sharded databases.\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "Doing a full collection scan to return 1 element... this must be the least efficient technique to do it.",
                "fecha": { "$date" : "2012-03-29T21:14:51Z" },
                "usuario": "Thomas",
                "usuario_id": 2018
            },
            {
                "decripcion": "The trick is, that it is a general solution for returning an arbitrary number of random elements - in which case it would be faster than the other solutions when getting > 2 random elements.",
                "fecha": { "$date" : "2014-02-06T10:52:25Z" },
                "usuario": "torbenl",
                "usuario_id": 2035
            }
        ],
        "usuario": "torbenl",
        "usuario_id": 2035
    },
    {
        "_id": 1160,
        "fecha": { "$date" : "2015-04-30T04:24:13Z" },
        "decripcion": "\nYou can pick random _id and return corresponding object:\n\n db.collection.count( function(err, count){\n        db.collection.distinct( \"_id\" , function( err, result) {\n            if (err)\n                res.send(err)\n            var randomId = result[Math.floor(Math.random() * (count-1))]\n            db.collection.findOne( { _id: randomId } , function( err, result) {\n                if (err)\n                    res.send(err)\n                console.log(result)\n            })\n        })\n    })\n\n\nHere you dont need to spend space on storing random numbers in collection.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Vijay13",
        "usuario_id": 2036
    },
    {
        "_id": 1161,
        "fecha": { "$date" : "2012-05-11T21:39:33Z" },
        "decripcion": "\nI'd suggest adding a random int field to each object. Then you can just do a \n\nfindOne({random_field: {$gte: rand()}}) \n\n\nto pick a random document. Just make sure you ensureIndex({random_field:1})\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "If the first record in your collection has a relatively high random_field value, won't it be returned almost all the time?",
                "fecha": { "$date" : "2013-01-23T23:03:10Z" },
                "usuario": "thehiatus",
                "usuario_id": 2037
            },
            {
                "decripcion": "thehaitus is correct, it will -- it is not suitable for any purpose",
                "fecha": { "$date" : "2013-08-07T21:54:54Z" },
                "usuario": "Heptic",
                "usuario_id": 2038
            },
            {
                "decripcion": "This solution is completely wrong, adding a random number (let's imagine in between 0 a 2^32-1) doesn't guarantee any good distribution and using $gte makes it even worst, due to your random selection won't be even close to a pseudo-random number. I suggest not to use this concept ever.",
                "fecha": { "$date" : "2013-12-02T20:32:38Z" },
                "usuario": "Maximiliano Rios",
                "usuario_id": 2039
            }
        ],
        "usuario": "mstearn",
        "usuario_id": 2011
    },
    {
        "_id": 1162,
        "fecha": { "$date" : "2013-09-11T16:32:43Z" },
        "decripcion": "\nWhen I was faced with a similar solution, I backtracked and found that the business request was actually for creating some form of rotation of the inventory being presented.  In that case, there are much better options, which have answers from search engines like Solr, not data stores like MongoDB.\n\nIn short, with the requirement to \"intelligently rotate\" content, what we should do instead of a random number across all of the documents is to include a personal q score modifier.  To implement this yourself, assuming a small population of users, you can store a document per user that has the productId, impression count, click-through count, last seen date, and whatever other factors the business finds as being meaningful to compute a q score modifier.  When retrieving the set to display, typically you request more documents from the data store than requested by the end user, then apply the q score modifier, take the number of records requested by the end user, then randomize the page of results, a tiny set, so simply sort the documents in the application layer (in memory).\n\nIf the universe of users is too large, you can categorize users into behavior groups and index by behavior group rather than user.\n\nIf the universe of products is small enough, you can create an index per user.\n\nI have found this technique to be much more efficient, but more importantly more effective in creating a relevant, worthwhile experience of using the software solution.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "paegun",
        "usuario_id": 2040
    },
    {
        "_id": 1163,
        "fecha": { "$date" : "2014-01-21T18:07:44Z" },
        "decripcion": "\nnon of the solutions worked well for me. especially when there are many gaps and set is small. \nthis worked very well for me(in php):\n\n$count = $collection->count($search);\n$skip = mt_rand(0, $count - 1);\n$result = $collection->find($search)->skip($skip)->limit(1)->getNext();\n\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "You specify the language, but not the library you're using?",
                "fecha": { "$date" : "2014-01-21T18:28:42Z" },
                "usuario": "BenMorel",
                "usuario_id": 2041
            },
            {
                "decripcion": "FYI, there is a race condition here if a document is removed between the first and third line. Also find + skip is pretty bad, you are returning all documents just to choose one :S.",
                "fecha": { "$date" : "2014-07-28T03:33:04Z" },
                "usuario": "Martin Konecny",
                "usuario_id": 1384
            }
        ],
        "usuario": "Mantas Karanauskas",
        "usuario_id": 2042
    },
    {
        "_id": 1164,
        "fecha": { "$date" : "2018-12-20T14:06:54Z" },
        "decripcion": "\nMy PHP/MongoDB sort/order by RANDOM solution. Hope this helps anyone.\n\nNote: I have numeric ID's within my MongoDB collection that refer to a MySQL database record.\n\nFirst I create an array with 10 randomly generated numbers\n\n    $randomNumbers = [];\n    for($i = 0; $i < 10; $i++){\n        $randomNumbers[] = rand(0,1000);\n    }\n\n\nIn my aggregation I use the $addField pipeline operator combined with $arrayElemAt and $mod (modulus). The modulus operator will give me a number from 0 - 9 which I then use to pick a number from the array with random generated numbers.\n\n    $aggregate[] = [\n        '$addFields' => [\n            'random_sort' => [ '$arrayElemAt' => [ $randomNumbers, [ '$mod' => [ '$my_numeric_mysql_id', 10 ] ] ] ],\n        ],\n    ];\n\n\nAfter that you can use the sort Pipeline.\n\n    $aggregate[] = [\n        '$sort' => [\n            'random_sort' => 1\n        ]\n    ];\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "feskr",
        "usuario_id": 2043
    },
    {
        "_id": 1165,
        "fecha": { "$date" : "2020-10-16T09:09:04Z" },
        "decripcion": "\nThe following aggregation operation randomly selects 3 documents from the collection:\ndb.users.aggregate(\n[ { $sample: { size: 3 } } ]\n)\nhttps://docs.mongodb.com/manual/reference/operator/aggregation/sample/\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Anup Panwar",
        "usuario_id": 2044
    },
    {
        "_id": 1166,
        "fecha": { "$date" : "2021-02-23T15:38:46Z" },
        "decripcion": "\nMongoDB now has $rand\nTo pick n non repeat items, aggregate with { $addFields: { _f: { $rand: {} } } } then $sort by _f and $limit n.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Polv",
        "usuario_id": 2045
    },
    {
        "_id": 1167,
        "fecha": { "$date" : "2013-03-19T14:10:47Z" },
        "decripcion": "\nIf you have a simple id key, you could store all the id's in an array, and then pick a random id. (Ruby answer):\n\nids = @coll.find({},fields:{_id:1}).to_a\n@coll.find(ids.sample).first\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Mr. Demetrius Michael",
        "usuario_id": 2046
    },
    {
        "_id": 1168,
        "fecha": { "$date" : "2014-01-29T23:26:46Z" },
        "decripcion": "\nUsing Map/Reduce, you can certainly get a random record, just not necessarily very efficiently depending on the size of the resulting filtered collection you end up working with.\n\nI've tested this method with 50,000 documents (the filter reduces it to about 30,000), and it executes in approximately 400ms on an Intel i3 with 16GB ram and a SATA3 HDD...\n\ndb.toc_content.mapReduce(\n    /* map function */\n    function() { emit( 1, this._id ); },\n\n    /* reduce function */\n    function(k,v) {\n        var r = Math.floor((Math.random()*v.length));\n        return v[r];\n    },\n\n    /* options */\n    {\n        out: { inline: 1 },\n        /* Filter the collection to \"A\"ctive documents */\n        query: { status: \"A\" }\n    }\n);\n\n\nThe Map function simply creates an array of the id's of all documents that match the query. In my case I tested this with approximately 30,000 out of the 50,000 possible documents.\n\nThe Reduce function simply picks a random integer between 0 and the number of items (-1) in the array, and then returns that _id from the array.\n\n400ms sounds like a long time, and it really is, if you had fifty million records instead of fifty thousand, this may increase the overhead to the point where it becomes unusable in multi-user situations.\n\nThere is an open issue for MongoDB to include this feature in the core... https://jira.mongodb.org/browse/SERVER-533\n\nIf this \"random\" selection was built into an index-lookup instead of collecting ids into an array and then selecting one, this would help incredibly. (go vote it up!)\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "doublehelix",
        "usuario_id": 2047
    },
    {
        "_id": 1169,
        "fecha": { "$date" : "2017-05-23T12:26:38Z" },
        "decripcion": "\nThis works nice, it's fast, works with multiple documents and doesn't require populating rand field, which will eventually populate itself:\n\n\nadd index to .rand field on your collection\nuse find and refresh, something like:\n\n\n// Install packages:\n//   npm install mongodb async\n// Add index in mongo:\n//   db.ensureIndex('mycollection', { rand: 1 })\n\nvar mongodb = require('mongodb')\nvar async = require('async')\n\n// Find n random documents by using \"rand\" field.\nfunction findAndRefreshRand (collection, n, fields, done) {\n  var result = []\n  var rand = Math.random()\n\n  // Append documents to the result based on criteria and options, if options.limit is 0 skip the call.\n  var appender = function (criteria, options, done) {\n    return function (done) {\n      if (options.limit > 0) {\n        collection.find(criteria, fields, options).toArray(\n          function (err, docs) {\n            if (!err && Array.isArray(docs)) {\n              Array.prototype.push.apply(result, docs)\n            }\n            done(err)\n          }\n        )\n      } else {\n        async.nextTick(done)\n      }\n    }\n  }\n\n  async.series([\n\n    // Fetch docs with unitialized .rand.\n    // NOTE: You can comment out this step if all docs have initialized .rand = Math.random()\n    appender({ rand: { $exists: false } }, { limit: n - result.length }),\n\n    // Fetch on one side of random number.\n    appender({ rand: { $gte: rand } }, { sort: { rand: 1 }, limit: n - result.length }),\n\n    // Continue fetch on the other side.\n    appender({ rand: { $lt: rand } }, { sort: { rand: -1 }, limit: n - result.length }),\n\n    // Refresh fetched docs, if any.\n    function (done) {\n      if (result.length > 0) {\n        var batch = collection.initializeUnorderedBulkOp({ w: 0 })\n        for (var i = 0; i < result.length; ++i) {\n          batch.find({ _id: result[i]._id }).updateOne({ rand: Math.random() })\n        }\n        batch.execute(done)\n      } else {\n        async.nextTick(done)\n      }\n    }\n\n  ], function (err) {\n    done(err, result)\n  })\n}\n\n// Example usage\nmongodb.MongoClient.connect('mongodb://localhost:27017/core-development', function (err, db) {\n  if (!err) {\n    findAndRefreshRand(db.collection('profiles'), 1024, { _id: true, rand: true }, function (err, result) {\n      if (!err) {\n        console.log(result)\n      } else {\n        console.error(err)\n      }\n      db.close()\n    })\n  } else {\n    console.error(err)\n  }\n})\n\n\nps. How to find random records in mongodb question is marked as duplicate of this question. The difference is that this question asks explicitly about single record as the other one explicitly about getting random documents.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Mirek Rusin",
        "usuario_id": 2048
    },
    {
        "_id": 1170,
        "fecha": { "$date" : "2021-04-06T09:21:52Z" },
        "decripcion": "\nThe best way in Mongoose is to make an aggregation call with $sample.\nHowever, Mongoose does not apply Mongoose documents to Aggregation - especially not if populate() is to be applied as well.\nFor getting a \"lean\" array from the database:\n/*\nSample model should be init first\nconst Sample = mongoose \u2026\n*/\n\nconst samples = await Sample.aggregate([\n  { $match: {} },\n  { $sample: { size: 33 } },\n]).exec();\nconsole.log(samples); //a lean Array\n\nFor getting an array of mongoose documents:\nconst samples = (\n  await Sample.aggregate([\n    { $match: {} },\n    { $sample: { size: 27 } },\n    { $project: { _id: 1 } },\n  ]).exec()\n).map(v => v._id);\n\nconst mongooseSamples = await Sample.find({ _id: { $in: samples } });\n\nconsole.log(mongooseSamples); //an Array of mongoose documents\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "TG___",
        "usuario_id": 2049
    },
    {
        "_id": 1171,
        "fecha": { "$date" : "2013-12-06T12:31:39Z" },
        "decripcion": "\nIf you're using mongoid, the document-to-object wrapper, you can do the following in\nRuby. (Assuming your model is User)\n\nUser.all.to_a[rand(User.count)]\n\n\nIn my .irbrc, I have\n\ndef rando klass\n    klass.all.to_a[rand(klass.count)]\nend\n\n\nso in rails console, I can do, for example,\n\nrando User\nrando Article\n\n\nto get documents randomly from any collection.\n    ",
        "votes": -2,
        "comentarios": [
            {
                "decripcion": "This is terribly inefficient as it will read the entire collection into an array and then pick one record.",
                "fecha": { "$date" : "2013-12-06T13:25:10Z" },
                "usuario": "JohnnyHK",
                "usuario_id": 672
            },
            {
                "decripcion": "Ok, maybe inefficient, but surely convenient.  try this if your data size isn't too big",
                "fecha": { "$date" : "2013-12-06T15:16:12Z" },
                "usuario": "Zack Xu",
                "usuario_id": 2050
            },
            {
                "decripcion": "Sure, but the original question was for a collection with 100 million docs so this would be a very bad solution for that case!",
                "fecha": { "$date" : "2013-12-06T15:25:10Z" },
                "usuario": "JohnnyHK",
                "usuario_id": 672
            }
        ],
        "usuario": "Zack Xu",
        "usuario_id": 2050
    },
    {
        "_id": 1172,
        "fecha": { "$date" : "2019-05-12T05:43:50Z" },
        "decripcion": "\nyou can also use shuffle-array after executing your query\n\nvar shuffle = require('shuffle-array');\n\nAccounts.find(qry,function(err,results_array){\nnewIndexArr=shuffle(results_array);\n    ",
        "votes": -5,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1173,
        "fecha": { "$date" : "2011-03-31T13:15:12Z" },
        "decripcion": "\nWhat works efficiently and reliably is this:\n\nAdd a field called \"random\" to each document and assign a random value to it, add an index for the random field and proceed as follows:\n\nLet's assume we have a collection of web links called \"links\" and we want a random link from it:\n\nlink = db.links.find().sort({random: 1}).limit(1)[0]\n\n\nTo ensure the same link won't pop up a second time, update its random field with a new random number:\n\ndb.links.update({random: Math.random()}, link)\n\n    ",
        "votes": -8,
        "comentarios": [
            {
                "decripcion": "why update the database when you can just select a different random key?",
                "fecha": { "$date" : "2011-04-08T12:39:47Z" },
                "usuario": "Jason S",
                "usuario_id": 2051
            },
            {
                "decripcion": "You may not have a list of the keys to select randomly from.",
                "fecha": { "$date" : "2011-08-21T04:42:50Z" },
                "usuario": "Mike",
                "usuario_id": 1225
            },
            {
                "decripcion": "So you have to sort the whole collection each time?  And what about the unlucky records that got large random numbers?  They will never be selected.",
                "fecha": { "$date" : "2012-01-11T18:09:07Z" },
                "usuario": "Fantius",
                "usuario_id": 2052
            },
            {
                "decripcion": "You have to do this because the other solutions, particularly the one suggested in the MongoDB book, don't work. If the first find fails, the second find always returns the item with the smallest random value. If you index random descendingly the first query always returns the item with the largest random number.",
                "fecha": { "$date" : "2012-01-17T12:38:11Z" },
                "usuario": "trainwreck",
                "usuario_id": 2053
            },
            {
                "decripcion": "Adding a field in each document? I think it's not advisable.",
                "fecha": { "$date" : "2016-07-16T17:48:07Z" },
                "usuario": "CS_noob",
                "usuario_id": 2054
            }
        ],
        "usuario": "trainwreck",
        "usuario_id": 2053
    },
    {
        "_id": 1174,
        "fecha": { "$date" : "2017-06-30T09:15:25Z" },
        "decripcion": "\n\n\nIn the simplest sense this just follows the basic form of \"dot notation\" as used by MongoDB. That will work regardless of which array member the inner array member is in, as long as it matches a value:\n\ndb.mycollection.find({\n    \"someArray.someNestedArray.name\": \"value\"\n})\n\n\nThat is fine for a \"single field\" value, for matching multiple-fields you would use $elemMatch:\n\ndb.mycollection.find({\n    \"someArray\": { \n        \"$elemMatch\": {\n            \"name\": \"name1\",\n            \"someNestedArray\": {\n                \"$elemMatch\": {\n                    \"name\": \"value\",\n                    \"otherField\": 1\n                }\n            }\n        }\n    }\n})\n\n\nThat matches the document which would contain something with a a field at that \"path\" matching the value. If you intended to \"match and filter\" the result so only the matched element was returned, this is not possible with the positional operator projection, as quoted:\n\n\n  Nested Arrays\n  \n  The positional $ operator cannot be used for queries which traverse more than one array, such as queries that traverse arrays nested within other arrays, because the replacement for the $ placeholder is a single value\n\n\nModern MongoDB\n\nWe can do this by applying $filter and $map here. The $map is really needed because the \"inner\" array can change as a result of the \"filtering\", and the \"outer\" array of course does not match the conditions when the \"inner\" was stripped of all elements. \n\nAgain following the example of actually having multiple properties to match within each array:\n\ndb.mycollection.aggregate([\n  { \"$match\": {\n    \"someArray\": {\n      \"$elemMatch\": {\n         \"name\": \"name1\",\n         \"someNestedArray\": {\n           \"$elemMatch\": {\n             \"name\": \"value\",\n             \"otherField\": 1\n           }\n         }\n       }\n    }\n  }},\n  { \"$addFields\": {\n    \"someArray\": {\n      \"$filter\": {\n        \"input\": {\n          \"$map\": {\n            \"input\": \"$someArray\",\n            \"as\": \"sa\",\n            \"in\": {\n              \"name\": \"$$sa.name\",\n              \"someNestedArray\": {\n                \"$filter\": {\n                  \"input\": \"$$sa.someNestedArray\",\n                  \"as\": \"sn\",\n                  \"cond\": {\n                    \"$and\": [\n                      { \"$eq\": [ \"$$sn.name\", \"value\" ] },\n                      { \"$eq\": [ \"$$sn.otherField\", 1 ] }\n                    ]\n                  }\n                }\n              }             \n            }\n          },\n        },\n        \"as\": \"sa\",\n        \"cond\": {\n          \"$and\": [\n            { \"$eq\": [ \"$$sa.name\", \"name1\" ] },\n            { \"$gt\": [ { \"$size\": \"$$sa.someNestedArray\" }, 0 ] }\n          ]\n        }\n      }\n    }\n  }}\n])\n\n\nTherefore on the \"outer\" array the $filter actually looks at the $size of the \"inner\" array after it was \"filtered\" itself, so you can reject those results when the whole inner array does in fact match noting.\n\nOlder MongoDB\n\nIn order to \"project\" only the matched element, you need the .aggregate() method:\n\ndb.mycollection.aggregate([\n    // Match possible documents\n    { \"$match\": {\n        \"someArray.someNestedArray.name\": \"value\"\n    }},\n\n    // Unwind each array\n    { \"$unwind\": \"$someArray\" },\n    { \"$unwind\": \"$someArray.someNestedArray\" },\n\n    // Filter just the matching elements\n    { \"$match\": {\n        \"someArray.someNestedArray.name\": \"value\"\n    }},\n\n    // Group to inner array\n    { \"$group\": {\n        \"_id\": { \n            \"_id\": \"$_id\", \n            \"name\": \"$someArray.name\"\n        },\n        \"someKey\": { \"$first\": \"$someKey\" },\n        \"someNestedArray\": { \"$push\": \"$someArray.someNestedArray\" }\n    }},\n\n    // Group to outer array\n    { \"$group\": {\n        \"_id\": \"$_id._id\",\n        \"someKey\": { \"$first\": \"$someKey\" },\n        \"someArray\": { \"$push\": {\n            \"name\": \"$_id.name\",\n            \"someNestedArray\": \"$someNestedArray\"\n        }}\n    }} \n])\n\n\nThat allows you to \"filter\" the matches in nested arrays for one or more results within the document.\n    ",
        "votes": 70,
        "comentarios": [
            {
                "decripcion": "Thanks, That is fine for a \"single field\" value, for matching multiple-fields you would use $elemMatch this line clarified me the exact use of elemMatch,",
                "fecha": { "$date" : "2017-10-10T11:26:03Z" },
                "usuario": "Sravan",
                "usuario_id": 2059
            },
            {
                "decripcion": "Your answer is a game changer for my project!",
                "fecha": { "$date" : "2021-06-12T16:54:22Z" },
                "usuario": "Luis Febro",
                "usuario_id": 2060
            }
        ],
        "usuario": "Neil Lunn",
        "usuario_id": 1750
    },
    {
        "_id": 1175,
        "fecha": { "$date" : "2019-03-18T12:19:49Z" },
        "decripcion": "\nYou can also try something like below: \n\ndb.collection.aggregate(\n    { $unwind: '$someArray' },\n    {\n        $project: {\n            'filteredValue': {\n                $filter: {\n                  input: \"$someArray.someNestedArray\",\n                  as: \"someObj\",\n                  cond: { $eq: [ '$$someObj.name', 'delete me' ] }\n                }\n            }\n        }\n    }\n)\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Jitendra",
        "usuario_id": 1906
    },
    {
        "_id": 1176,
        "fecha": { "$date" : "2020-11-12T14:21:18Z" },
        "decripcion": "\n                    \n            \n        \n            \n                    \n                        \n                    \n                \n                    \n                        Locked. There are disputes about this answer\u2019s content being resolved at this time. It is not currently accepting new interactions.\n                        \n                    \n                \n            \n        \n\n\n    \n\nYou can't parse [X]HTML with regex. Because HTML can't be parsed by regex. Regex is not a tool that can be used to correctly parse HTML. As I have answered in HTML-and-regex questions here so many times before, the use of regex will not allow you to consume HTML. Regular expressions are a tool that is insufficiently sophisticated to understand the constructs employed by HTML. HTML is not a regular language and hence cannot be parsed by regular expressions. Regex queries are not equipped to break down HTML into its meaningful parts. so many times but it is not getting to me. Even enhanced irregular regular expressions as used by Perl are not up to the task of parsing HTML. You will never make me crack. HTML is a language of sufficient complexity that it cannot be parsed by regular expressions. Even Jon Skeet cannot parse HTML using regular expressions. Every time you attempt to parse HTML with regular expressions, the unholy child weeps the blood of virgins, and Russian hackers pwn your webapp. Parsing HTML with regex summons tainted souls into the realm of the living. HTML and regex go together like love, marriage, and ritual infanticide. The <center> cannot hold it is too late. The force of regex and HTML together in the same conceptual space will destroy your mind like so much watery putty. If you parse HTML with regex you are giving in to Them and their blasphemous ways which doom us all to inhuman toil for the One whose Name cannot be expressed in the Basic Multilingual Plane, he comes. HTML-plus-regexp will liquify the n\u200berves of the sentient whilst you observe, your psyche withering in the onslaught of horror. Rege\u033f\u0314\u0309x-based HTML parsers are the cancer that is killing StackOverflow it is too late it is too late we cannot be saved the transgression of a chi\u0361ld ensures regex will consume all living tissue (except for HTML which it cannot, as previously prophesied) dear lord help us how can anyone survive this scourge using regex to parse HTML has doomed humanity to an eternity of dread torture and security holes using regex as a tool to process HTML establishes a breach between this world and the dread realm of c\u0352\u036ao\u035b\u036brrupt entities (like SGML entities, but more corrupt) a mere glimpse of the world of reg\u200bex parsers for HTML will ins\u200btantly transport a programmer's consciousness into a world of ceaseless screaming, he comes, the pestilent slithy regex-infection wil\u200bl devour your HT\u200bML parser, application and existence for all time like Visual Basic only worse he comes he comes do not fi\u200bght he com\u0321e\u0336s, \u0315h\u0335i\u200bs un\u0328ho\u035ely radian\u0341ce\u0341 destro\u0489ying all enli\u030d\u0344\u0302\u0344ghtenment, HTML tags lea\u0360ki\u0327n\u0358g fr\u0336o\u0328m \u0321yo\u200b\u035fur eye\u0362s\u0338 \u031bl\u0315ik\u034fe liq\u200buid pain, the song of re\u0338gular exp\u200bression parsing will exti\u200bnguish the voices of mor\u200btal man from the sp\u200bhere I can see it can you see \u0332\u035a\u0316\u0354\u0319i\u0302\u0341\u0329t\u0301\u030b\u0340\u0332\u034e\u0329\u0331\u0354 it is beautiful t\u200bhe final snuffing of the lie\u200bs of Man ALL IS LOS\u0301\u030f\u0344\u0356\u0329\u0347\u0317\u032aT ALL I\u200bS LOST the pon\u0337y he comes he c\u0336\u032eomes he comes the ich\u200bor permeates all MY FACE MY FACE \u1d52h god no NO NOO\u033cO\u200bO N\u0398 stop the an\u200b*\u0351\u033e\u033e\u0336\u200b\u0305\u036b\u034f\u0319\u0324g\u035b\u0346\u033e\u036b\u0311\u0346\u0347\u032bl\u030d\u036b\u0365\u0368\u0356\u0349\u0317\u0329\u0333\u031fe\u0305\u0320s \u034ea\u0327\u0348\u0356r\u033d\u033e\u0344\u0352\u0351e n\u200bot re\u0300\u0311\u0367\u030ca\u0368l\u0303\u0364\u0342\u033e\u0306\u0318\u031d\u0319 ZA\u0360\u0321\u034a\u035dLG\u038c IS\u036e\u0302\u0489\u032f\u0348\u0355\u0339\u0318\u0331 TO\u0345\u0347\u0339\u033a\u019d\u0334\u0233\u0333 TH\u0318E\u0344\u0309\u0356 \u0360P\u032f\u034d\u032dO\u031a\u200bN\u0310Y\u0321 H\u0368\u034a\u033d\u0305\u033e\u030e\u0321\u0338\u032a\u032fE\u033e\u035b\u036a\u0344\u0300\u0301\u0327\u0358\u032c\u0329 \u0367\u033e\u036c\u0327\u0336\u0328\u0331\u0339\u032d\u032fC\u036d\u030f\u0365\u036e\u035f\u0337\u0319\u0332\u031d\u0356O\u036e\u034f\u032e\u032a\u031d\u034dM\u034a\u0312\u031a\u036a\u0369\u036c\u031a\u035c\u0332\u0316E\u0311\u0369\u034c\u035d\u0334\u031f\u031f\u0359\u031eS\u036f\u033f\u0314\u0328\u0340\u0325\u0345\u032b\u034e\u032d\n\nHave you tried using an XML parser instead?\n\n\nModerator's Note\nThis post is locked to prevent inappropriate edits to its content. The post looks exactly as it is supposed to look - there are no problems with its content. Please do not flag it for our attention.\n\n    ",
        "votes": 4412,
        "comentarios": [
            {
                "decripcion": "Kobi: I think it's time for me to quit the post of Assistant Don't Parse HTML With Regex Officer. No matter how many times we say it, they won't stop coming every day... every hour even. It is a lost cause, which someone else can fight for a bit. So go on, parse HTML with regex, if you must. It's only broken code, not life and death.",
                "fecha": { "$date" : "2009-11-13T23:18:03Z" },
                "usuario": "bobince",
                "usuario_id": 2062
            },
            {
                "decripcion": "If you can't see this post, here's a screencapture of it in all its glory: imgur.com/gOPS2.png",
                "fecha": { "$date" : "2009-11-19T14:37:27Z" },
                "usuario": "Andrew Keeton",
                "usuario_id": 2063
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1177,
        "fecha": { "$date" : "2019-09-19T15:30:40Z" },
        "decripcion": "\nWhile arbitrary HTML with only a regex is impossible, it's sometimes appropriate to use them for parsing a limited, known set of HTML.  \n\nIf you have a small set of HTML pages that you want to scrape data from and then stuff into a database, regexes might work fine.  For example, I recently wanted to get the names, parties, and districts of Australian federal Representatives, which I got off of the Parliament's web site.  This was a limited, one-time job.  \n\nRegexes worked just fine for me, and were very fast to set up.\n    ",
        "votes": 3402,
        "comentarios": [
            {
                "decripcion": "Also, scraping fairly regularly formatted data from large documents is going to be WAY faster with judicious use of scan & regex than any generic parser. And if you are comfortable with coding regexes, way faster to code than coding xpaths. And almost certainly less fragile to changes in what you are scraping. So bleh.",
                "fecha": { "$date" : "2012-04-17T20:47:27Z" },
                "usuario": "Michael Johnston",
                "usuario_id": 2064
            },
            {
                "decripcion": "@MichaelJohnston \"Less fragile\"? Almost certainly not. Regexes care about text-formatting details than an XML parser can silently ignore. Switching between &foo; encodings and CDATA sections? Using an HTML minifier to remove all whitespace in your document that the browser doesn't render? An XML parser won't care, and neither will a well-written XPath statement. A regex-based \"parser\", on the other hand...",
                "fecha": { "$date" : "2012-07-11T16:03:24Z" },
                "usuario": "Charles Duffy",
                "usuario_id": 2065
            },
            {
                "decripcion": "@CharlesDuffy for an one time job it's ok, and for spaces we use \\s+",
                "fecha": { "$date" : "2012-07-12T13:50:01Z" },
                "usuario": "quantum",
                "usuario_id": 2066
            },
            {
                "decripcion": "@xiaomao indeed, if having to know all the gotchas and workarounds to get an 80% solution that fails the rest of the time \"works for you\", I can't stop you. Meanwhile, I'm over on my side of the fence using parsers that work on 100% of syntactically valid XML.",
                "fecha": { "$date" : "2012-07-12T16:07:28Z" },
                "usuario": "Charles Duffy",
                "usuario_id": 2065
            },
            {
                "decripcion": "I once had to pull some data off ~10k pages, all with the same HTML template. They were littered with HTML errors that caused parsers to choke, and all their styling was inline or with <font> etc.: no classes or IDs to help navigate the DOM. After fighting all day with the \"right\" approach, I finally switched to a regex solution and had it working in an hour.",
                "fecha": { "$date" : "2012-09-07T07:14:38Z" },
                "usuario": "Paul A Jungwirth",
                "usuario_id": 2067
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1178,
        "fecha": { "$date" : "2020-08-14T15:50:31Z" },
        "decripcion": "\nI think the flaw here is that HTML is a Chomsky Type 2 grammar (context free grammar) and a regular expression is a Chomsky Type 3 grammar (regular grammar). Since a Type 2 grammar is fundamentally more complex than a Type 3 grammar (see the Chomsky hierarchy), it is mathematically impossible to parse XML with a regular expression.\nBut many will try, and some will even claim success - but until others find the fault and totally mess you up.\n    ",
        "votes": 2163,
        "comentarios": [
            {
                "decripcion": "The OP is asking to parse a very limited subset of XHTML: start tags. What makes (X)HTML a CFG is its potential to have elements between the start and end tags of other elements (as in a grammar rule A -> s A e). (X)HTML does not have this property within a start tag: a start tag cannot contain other start tags. The subset that the OP is trying to parse is not a CFG.",
                "fecha": { "$date" : "2012-03-02T08:43:55Z" },
                "usuario": "LarsH",
                "usuario_id": 202
            },
            {
                "decripcion": "In CS theory, regular languages are a strict subset of context-free languages, but regular expression implementations in mainstream programming languages are more powerful.  As noulakaz.net/weblog/2007/03/18/\u2026 describes, so-called \"regular expressions\" can check for prime numbers in unary, which is certainly something that a regular expression from CS theory can't accomplish.",
                "fecha": { "$date" : "2012-03-19T23:50:52Z" },
                "usuario": "Adam Mihalcin",
                "usuario_id": 2068
            },
            {
                "decripcion": "@eyelidlessness: the same \"only if\" applies to all CFGs, does it not? I.e. if the (X)HTML input is not well-formed, not even a full-blown XML parser will work reliably. Maybe if you give examples of the \"(X)HTML syntax errors implemented in real world user agents\" you're referring to, I'll understand what you're getting at better.",
                "fecha": { "$date" : "2012-05-22T05:09:22Z" },
                "usuario": "LarsH",
                "usuario_id": 202
            },
            {
                "decripcion": "@AdamMihalcin is exactly right. Most extant regex engines are more powerful than Chomsky Type 3 grammars (eg non-greedy matching, backrefs). Some regex engines (such as Perl's) are Turing complete. It's true that even those are poor tools for parsing HTML, but this oft-cited argument is not the reason why.",
                "fecha": { "$date" : "2012-05-31T13:44:04Z" },
                "usuario": "dubiousjim",
                "usuario_id": 2069
            },
            {
                "decripcion": "This is the most \"full and short\" answer here. It leads people to learn basics of formal grammars and languages and hopefully some maths so they will not wast time on hopeless things like solving NP-tasks in polynomial time",
                "fecha": { "$date" : "2013-04-19T12:15:57Z" },
                "usuario": "mishmashru",
                "usuario_id": 2070
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1179,
        "fecha": { "$date" : "2018-08-30T16:52:54Z" },
        "decripcion": "\nDon't listen to these guys. You totally can parse context-free grammars with regex if you break the task into smaller pieces. You can generate the correct pattern with a script that does each of these in order: \n\n\nSolve the Halting Problem.\nSquare a circle.\nWork out the Traveling Salesman Problem in O(log n) or less. If it's any more than that, you'll run out of RAM and the engine will hang.\nThe pattern will be pretty big, so make sure you have an algorithm that losslessly compresses random data.\nAlmost there - just divide the whole thing by zero. Easy-peasy.\n\n\nI haven't quite finished the last part myself, but I know I'm getting close. It keeps throwing CthulhuRlyehWgahnaglFhtagnExceptions for some reason, so I'm going to port it to VB 6 and use On Error Resume Next. I'll update with the code once I investigate this strange door that just opened in the wall. Hmm.\n\nP.S. Pierre de Fermat also figured out how to do it, but the margin he was writing in wasn't big enough for the code.\n    ",
        "votes": 1408,
        "comentarios": [
            {
                "decripcion": "Divison by zero is a much easier problem than the others you mention. If you use intervals, rather than plain floating point arithmetic (which everyone should be but nobody is), you can happily divide something by [an interval containing] zero. The result is simply an interval containing plus and minus infinity.",
                "fecha": { "$date" : "2012-06-14T10:53:39Z" },
                "usuario": "rjmunro",
                "usuario_id": 2071
            },
            {
                "decripcion": "Fermat's small margin problem has been solved by soft margins in modern text-editing software.",
                "fecha": { "$date" : "2013-03-01T20:24:32Z" },
                "usuario": "kd4ttc",
                "usuario_id": 2072
            },
            {
                "decripcion": "Fermat's small margin problem has been solved by Randall Munroe by setting the fontsize to zero: xkcd.com/1381",
                "fecha": { "$date" : "2014-10-16T19:55:17Z" },
                "usuario": "heltonbiker",
                "usuario_id": 2073
            },
            {
                "decripcion": "FYI: Fermat's problem has actually been solved in 1995, and it only took mathematicians 358 years to do so.",
                "fecha": { "$date" : "2015-01-22T18:40:17Z" },
                "usuario": "jmiserez",
                "usuario_id": 2074
            },
            {
                "decripcion": "I was able to bypass that sticky divide-by-zero step by instead using Brownian ratchets yielded from cold fusion...though it only works when I remove the cosmological constant.",
                "fecha": { "$date" : "2016-03-09T18:52:43Z" },
                "usuario": "Tim Lehner",
                "usuario_id": 2075
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1180,
        "fecha": { "$date" : "2017-05-23T12:34:53Z" },
        "decripcion": "\nDisclaimer: use a parser if you have the option. That said...\n\nThis is the regex I use (!) to match HTML tags:\n\n<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+>\n\n\nIt may not be perfect, but I ran this code through a lot of HTML. Note that it even catches strange things like <a name=\"badgenerator\"\">, which show up on the web.\n\nI guess to make it not match self contained tags, you'd either want to use Kobi's negative look-behind:\n\n<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+(?<!/\\s*)>\n\n\nor just combine if and if not.\n\nTo downvoters: This is working code from an actual product. I doubt anyone reading this page will get the impression that it is socially acceptable to use regexes on HTML. \n\nCaveat: I should note that this regex still breaks down in the presence of CDATA blocks, comments, and script and style elements. Good news is, you can get rid of those using a regex...  \n    ",
        "votes": 1111,
        "comentarios": [
            {
                "decripcion": "I would go with something that works on sane things than weep about not being universally perfect :-)",
                "fecha": { "$date" : "2012-05-10T03:44:49Z" },
                "usuario": "prajeesh kumar",
                "usuario_id": 2076
            },
            {
                "decripcion": "so you do not actually solve the parsing problem with regexp only but as a part of the parser this may work. PS: working product doesn't mean good code. No offence, but this is how industrial programming works and gets their money",
                "fecha": { "$date" : "2013-04-19T12:18:30Z" },
                "usuario": "mishmashru",
                "usuario_id": 2070
            },
            {
                "decripcion": "Your regex starts fail on the very shortest possible, valid HTML: <!doctype html><title><</title>. Simple '<!doctype html><title><</title>'.match(/<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+>/g) returns [\"<!doctype html>\", \"<title>\", \"<</title>\"] while should [\"<title>\", \"</title>\"].",
                "fecha": { "$date" : "2014-05-01T16:48:11Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "if we're just trying to match & not match the examples given, /<.([^r>][^>]*)?>/g works :-) // javascript:  '<p> <a href=\"foo\"> <br /> <hr class=\"foo\" />'.match(/<.([^r>][^>]*)?>/g)",
                "fecha": { "$date" : "2014-05-22T16:14:26Z" },
                "usuario": "imma",
                "usuario_id": 2077
            },
            {
                "decripcion": "\"Is someone using CDATA inside HTML?\" - yes, I do. It takes less bytes if you show HTML source code in <pre> tags.",
                "fecha": { "$date" : "2015-10-14T10:56:16Z" },
                "usuario": "cweiske",
                "usuario_id": 2078
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1181,
        "fecha": { "$date" : "2020-08-14T06:32:03Z" },
        "decripcion": "\nThere are people that will tell you that the Earth is round (or perhaps that the Earth is an oblate spheroid if they want to use strange words). They are lying.\nThere are people that will tell you that Regular Expressions shouldn't be recursive. They are limiting you. They need to subjugate you, and they do it by keeping you in ignorance.\nYou can live in their reality or take the red pill.\nLike Lord Marshal (is he a relative of the Marshal .NET class?), I have seen the Underverse Stack Based Regex-Verse and returned with powers knowledge you can't imagine. Yes, I think there were an Old One or two protecting them, but they were watching football on the TV, so it wasn't difficult.\nI think the XML case is quite simple. The RegEx (in the .NET syntax), deflated and coded in base64 to make it easier to comprehend by your feeble mind, should be something like this:\n7L0HYBxJliUmL23Ke39K9UrX4HShCIBgEyTYkEAQ7MGIzeaS7B1pRyMpqyqBymVWZV1mFkDM7Z28\n995777333nvvvfe6O51OJ/ff/z9cZmQBbPbOStrJniGAqsgfP358Hz8itn6Po9/3eIue3+Px7/3F\n86enJ8+/fHn64ujx7/t7vFuUd/Dx65fHJ6dHW9/7fd/t7fy+73Ye0v+f0v+Pv//JnTvureM3b169\nOP7i9Ogyr5uiWt746u+BBqc/8dXx86PP7tzU9mfQ9tWrL18d3UGnW/z7nZ9htH/y9NXrsy9fvPjq\ni5/46ss3p4z+x3e8b452f9/x93a2HxIkH44PpgeFyPD6lMAEHUdbcn8ffTP9fdTrz/8rBPCe05Iv\np9WsWF788Obl9MXJl0/PXnwONLozY747+t7x9k9l2z/4vv4kqo1//993+/vf2kC5HtwNcxXH4aOf\nLRw2z9/v8WEz2LTZcpaV1TL/4c3h66ex2Xv95vjF0+PnX744PbrOm59ZVhso5UHYME/dfj768H7e\nYy5uQUydDAH9+/4eR11wHbqdfPnFF6cv3ogq/V23t++4z4620A13cSzd7O1s/77rpw+ePft916c7\nO/jj2bNnT7e/t/397//M9+ibA/7s6ZNnz76PP0/kT2rz/Ts/s/0NArvziYxVEZWxbm93xsrUfnlm\nrASN7Hf93u/97vvf+2Lx/e89L7+/FSXiz4Bkd/hF5mVq9Yik7fcncft9350QCu+efkr/P6BfntEv\nz+iX9c4eBrFz7wEwpB9P+d9n9MfuM3yzt7Nzss0/nuJfbra3e4BvZFR7z07pj3s7O7uWJM8eCkme\nnuCPp88MfW6kDeH7+26PSTX8vu+ePAAiO4LVp4zIPWC1t7O/8/+pMX3rzo2KhL7+8s23T1/RhP0e\nvyvm8HbsdmPXYDVhtpdnAzJ1k1jeufOtUAM8ffP06Zcnb36fl6dPXh2f/F6nRvruyHfMd9rgJp0Y\ngvsRx/6/ZUzfCtX4e5hTndGzp5jQo9e/z+s3p1/czAUMlts+P3tz+uo4tISd745uJxvb3/v4ZlWs\nmrjfd9SG/swGPD/6+nh+9MF4brTBRmh1Tl5+9eT52ckt5oR0xldPzp7GR8pfuXf5PWJv4nJIwvbH\nW3c+GY3vPvrs9zj8Xb/147/n7/b7/+52DD2gsSH8zGDvH9+i9/fu/PftTfTXYf5hB+9H7P1BeG52\nMTtu4S2cTAjDizevv3ry+vSNb8N+3+/1po2anj4/hZsGt3TY4GmjYbEKDJ62/pHB+3/LmL62wdsU\n1J18+eINzTJr3dMvXr75fX7m+MXvY9XxF2e/9+nTgPu2bgwh5U0f7u/74y9Pnh6/OX4PlA2UlwTn\nxenJG8L996VhbP3++PCrV68QkrjveITxr2TIt+lL+f3k22fPn/6I6f/fMqZvqXN/K4Xps6sazUGZ\nGeQlar49xEvajzI35VRevDl78/sc/b7f6jkG8Va/x52N4L9lBe/kZSh1hr9fPj19+ebbR4AifyuY\n12efv5CgGh9TroR6Pj2l748iYxYgN8Z7pr0HzRLg66FnRvcjUft/45i+pRP08vTV6TOe2N/9jv37\nR9P0/5YxbXQDeK5E9R12XdDA/4zop+/9Ht/65PtsDVlBBUqko986WsDoWqvbPD2gH/T01DAC1NVn\n3/uZ0feZ+T77fd/GVMkA4KjeMcg6RcvQLRl8HyPaWVStdv17PwHV0bOB9xUh7rfMp5Zu3icBJp25\nD6f0NhayHyfI3HXHY6YYCw7Pz17fEFhQKzS6ZWChrX+kUf7fMqavHViEPPKjCf1/y5hukcyPTvjP\nmHQCppRDN4nbVFPaT8+ekpV5/TP8g/79mVPo77PT1/LL7/MzL7548+XvdfritflFY00fxIsvSQPS\nmvctdYZpbt7vxKRfj3018OvC/hEf/79lTBvM3debWj+b8KO0wP+3OeM2aYHumuCAGonmCrxw9cVX\nX1C2d4P+uSU7eoBUMzI3/f9udjbYl/el04dI7s8fan8dWRjm6gFx+NrKeFP+WX0CxBdPT58df/X8\nDaWLX53+xFdnr06f/szv++NnX7x8fnb6NAhIwsbPkPS7iSUQAFETvP2Tx8+/Og0Xt/yBvDn9vd/c\netno8S+81QKXptq/ffzKZFZ+4e/743e8zxino+8RX37/k595h5/H28+y7fPv490hQdJ349E+txB3\nzPZ5J/jsR8bs/y1j2hh/2fkayOqEmYcej0cXUWMN7QrqBwjDrVZRfyQM3xjj/EgYvo4wfLTZrnVS\nebdKq0XSZJvzajKQDUv1/P3NwbEP7cN5+Odivv9/ysPfhHfkOP6b9Fl+91v7LD9aCvp/+Zi+7lLQ\nj0zwNzYFP+/Y6r1NcFeDbfBIo8rug3zS3/3WPumPlN3/y8f0I2X3cz4FP+/Y6htSdr2I42fEuSPX\n/ewpL4e9/n1evzn94hb+Plpw2+dnbyh79zx0CsPvbq0lb+UQ/h7xvqPq/Gc24PnR18fzVrp8I57d\nmehj7ebk5VdPnp+d3GJOSP189eTsaXyk/JV7l98j4SAZgRxtf7x155PR+O6jz36Pw9/1Wz/+e/5u\nv//vbsfQAxobws8M9v7xLXp/785/395ED4nO1wx5fsTeH4LnRva+eYY8rpZUBFb/j/jfm8XAvfEj\n4/b/ljF1F9B/jx5PhAkp1nu/+y3n+kdZp/93jWmjJ/M11TG++VEG6puZn593PPejoOyHMQU/79jq\nGwrKfpSB+tmcwZ93XPkjZffDmIKfd2z1DSm7bmCoPPmjBNT74XkrVf71I/Sf6wTU7XJA4RB+lIC6\nmW1+xN5GWw1/683C5rnj/m364cmr45Pf6/SN9H4Us4LISn355vjN2ZcvtDGT6fHvapJcMISmxc0K\nMAD4IyP6/5Yx/SwkP360FvD1VTH191mURr/HUY+2P3I9boPnz7Ju/pHrcWPnP3I9/r/L3sN0v52z\n0fEgNrgbL8/Evfh9fw/q5Xf93u/97vvf+2Lx/e89L7+/Fe3iZ37f34P5h178kTfx/5YxfUs8vY26\n7/d4/OWbb5++ogn7PX5XzOHtOP3GrsHmqobOVO/8Hh1Gk/TPl198QS6w+rLb23fcZ0fMaTfjsv29\n7Zul7me2v0FgRoYVURnf9nZEkDD+H2VDf8hjeq8xff1s6GbButNLacEtefHm9VdPXp++CRTw7/v9\nr6vW8b9eJ0+/PIHzs1HHdyKE/x9L4Y+s2f+PJPX/1dbsJn3wrY6wiqv85vjVm9Pnp+DgN8efM5va\nj794+eb36Xz3mAf5+58+f3r68s230dRvJcxKn/l//oh3f+7H9K2O0r05PXf85s2rH83f/1vGdAvd\nw+qBFqsoWvzspozD77EpXYeZ7yzdfxy0ec+l+8e/8FbR84+Wd78xbvn/qQQMz/J7L++GPB7N0MQa\n2vTMBwjDrVI0PxKGb4xxfiQMX0cYPuq/Fbx2C1sU8yEF+F34iNsx1xOGa9t6l/yX70uqmxu+qBGm\nAxlxWwVS11O97ULqlsFIUvUnT4/fHIuL//3f9/t9J39Y9m8W/Tuc296yUeX/b0PiHwUeP1801Y8C\nj/9vz9+PAo8f+Vq35Jb/n0rAz7Kv9aPA40fC8P+RMf3sC8PP08DjR1L3DXHoj6SuIz/CCghZNZb8\nfb/Hf/2+37tjvuBY9vu3jmRvxNeGgQAuaAF6Pwj8/+e66M8/7rwpRNj6uVwXZRl52k0n3FVl95Q+\n+fz0KSu73/dtkGDYdvZgSP5uskadrtViRKyal2IKAiQfiW+FI+tET/9/Txj9SFf8SFf8rOuKzagx\n+r/vD34mUADO1P4/AQAA//8=\n\nThe options to set is RegexOptions.ExplicitCapture. The capture group you are looking for is ELEMENTNAME. If the capture group ERROR is not empty then there was a parsing error and the Regex stopped.\nIf you have problems reconverting it to a human-readable regex, this should help:\nstatic string FromBase64(string str)\n{\n    byte[] byteArray = Convert.FromBase64String(str);\n\n    using (var msIn = new MemoryStream(byteArray))\n    using (var msOut = new MemoryStream()) {\n        using (var ds = new DeflateStream(msIn, CompressionMode.Decompress)) {\n            ds.CopyTo(msOut);\n        }\n\n        return Encoding.UTF8.GetString(msOut.ToArray());\n    }\n}\n\nIf you are unsure, no, I'm NOT kidding (but perhaps I'm lying). It WILL work. I've built tons of unit tests to test it, and I have even used (part of) the conformance tests. It's a tokenizer, not a full-blown parser, so it will only split the XML into its component tokens. It won't parse/integrate DTDs.\nOh... if you want the source code of the regex, with some auxiliary methods:\nregex to tokenize an xml or the full plain regex\n    ",
        "votes": 513,
        "comentarios": [
            {
                "decripcion": "Good Lord, it's massive. My biggest question is why? You realize that all modern languages have XML parsers, right? You can do all that in like 3 lines and be sure it'll work. Furthermore, do you also realize that pure regex is provably unable to do certain things? Unless you've created a hybrid regex/imperative code parser, but it doesn't look like you have. Can you compress random data as well?",
                "fecha": { "$date" : "2011-03-08T15:23:45Z" },
                "usuario": "Justin Morgan",
                "usuario_id": 2079
            },
            {
                "decripcion": "@Justin I don't need a reason. It could be done (and it wasn't illegal/immoral), so I have done it. There are no limitations to the mind except those we acknowledge (Napoleon Hill)... Modern languages can parse XML? Really? And I thought that THAT was illegal! :-)",
                "fecha": { "$date" : "2011-03-08T15:31:34Z" },
                "usuario": "xanatos",
                "usuario_id": 2080
            },
            {
                "decripcion": "Sir, I'm convinced. I'm going to use this code as part of the kernel for my perpetual-motion machine--can you believe those fools at the patent office keep rejecting my application? Well, I'll show them. I'll show them all!",
                "fecha": { "$date" : "2011-03-08T17:55:54Z" },
                "usuario": "Justin Morgan",
                "usuario_id": 2079
            },
            {
                "decripcion": "@Justin So an Xml Parser is by definition bug free, while a Regex isn't? Because if an Xml Parser isn't bug free by definition there could be an xml that make it crash and we are back to step 0. Let say this: both the Xml Parser and this Regex try to be able to parse all the \"legal\" XML. They CAN parse some \"illegal\" XML. Bugs could crash both of them. C# XmlReader is surely more tested than this Regex.",
                "fecha": { "$date" : "2011-03-09T15:08:36Z" },
                "usuario": "xanatos",
                "usuario_id": 2080
            },
            {
                "decripcion": "No, nothing is bug free: 1) All programs contain at least one bug. 2) All programs contain at least one line of unnecessary source code. 3) By #1 and #2 and using logical induction, it's a simple matter to prove that any program can be reduced to a single line of code with a bug. (from Learning Perl)",
                "fecha": { "$date" : "2012-02-16T00:53:34Z" },
                "usuario": "Scott Weaver",
                "usuario_id": 2081
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1182,
        "fecha": { "$date" : "2019-04-23T16:44:36Z" },
        "decripcion": "\nIn shell, you can parse HTML using sed:\n\n\nTuring.sed\nWrite HTML parser (homework)\n???\nProfit!\n\n\n\n\nRelated (why you shouldn't use regex match):\n\n\nIf You Like Regular Expressions So Much, Why Don't You Marry Them?\nRegular Expressions: Now You Have Two Problems\nHacking stackoverflow.com's HTML sanitizer\n\n    ",
        "votes": 305,
        "comentarios": [
            {
                "decripcion": "I\u2019m afraid you did not get the joke, @kenorb. Please, read the question and the accepted answer once more. This is not about HTML parsing tools in general, nor about HTML parsing shell tools, it\u2019s about parsing HTML via regexes.",
                "fecha": { "$date" : "2015-10-13T08:12:01Z" },
                "usuario": "Palec",
                "usuario_id": 581
            },
            {
                "decripcion": "No, @Abdul. It is completely, provably (in the mathematical sense) impossible.",
                "fecha": { "$date" : "2017-03-24T13:24:19Z" },
                "usuario": "Palec",
                "usuario_id": 581
            },
            {
                "decripcion": "Yes, that answer summarizes it well, @Abdul. Note that, however, regex implementations are not really regular expressions in the mathematical sense -- they have constructs that make them stronger, often Turing-complete (equivalent to Type 0 grammars). The argument breaks with this fact, but is still somewhat valid in the sense that regexes were never meant to be capable of doing such a job, though.",
                "fecha": { "$date" : "2017-03-24T14:24:35Z" },
                "usuario": "Palec",
                "usuario_id": 581
            },
            {
                "decripcion": "And by the way, the joke I referred to was the content of this answer before kenorb's (radical) edits, specifically revision 4, @Abdul.",
                "fecha": { "$date" : "2017-03-24T14:26:48Z" },
                "usuario": "Palec",
                "usuario_id": 581
            },
            {
                "decripcion": "The funny thing is that OP never asked to parse html using regex. He asked to match text (which happens to be HTML) using regex. Which is perfectly reasonable.",
                "fecha": { "$date" : "2018-03-29T15:29:49Z" },
                "usuario": "Paralife",
                "usuario_id": 2082
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1183,
        "fecha": { "$date" : "2020-02-23T04:43:47Z" },
        "decripcion": "\nI agree that the right tool to parse XML and especially HTML is a parser and not a regular expression engine. However, like others have pointed out, sometimes using a regex is quicker, easier, and gets the job done if you know the data format.\n\nMicrosoft actually has a section of Best Practices for Regular Expressions in the .NET Framework and specifically talks about Consider[ing] the Input Source.\n\nRegular Expressions do have limitations, but have you considered the following?\n\nThe .NET framework is unique when it comes to regular expressions in that it supports Balancing Group Definitions.\n\n\nSee Matching Balanced Constructs with .NET Regular Expressions\nSee .NET Regular Expressions: Regex and Balanced Matching\nSee Microsoft's docs on Balancing Group Definitions\n\n\nFor this reason, I believe you CAN parse XML using regular expressions. Note however, that it must be valid XML (browsers are very forgiving of HTML and allow bad XML syntax inside HTML). This is possible since the \"Balancing Group Definition\" will allow the regular expression engine to act as a PDA.\n\nQuote from article 1 cited above:\n\n\n  .NET Regular Expression Engine\n  \n  As described above properly balanced constructs cannot be described by\n  a regular expression. However, the .NET regular expression engine\n  provides a few constructs that allow balanced constructs to be\n  recognized. \n  \n  \n  (?<group>) - pushes the captured result on the capture stack with\n  the name group.\n  (?<-group>) - pops the top most capture with the name group off the\n  capture stack.\n  (?(group)yes|no) - matches the yes part if there exists a group\n  with the name group otherwise matches no part.\n  \n  \n  These constructs allow for a .NET regular expression to emulate a\n  restricted PDA by essentially allowing simple versions of the stack\n  operations: push, pop and empty. The simple operations are pretty much\n  equivalent to increment, decrement and compare to zero respectively.\n  This allows for the .NET regular expression engine to recognize a\n  subset of the context-free languages, in particular the ones that only\n  require a simple counter. This in turn allows for the non-traditional\n  .NET regular expressions to recognize individual properly balanced\n  constructs.\n\n\nConsider the following regular expression:\n\n(?=<ul\\s+id=\"matchMe\"\\s+type=\"square\"\\s*>)\n(?>\n   <!-- .*? -->                  |\n   <[^>]*/>                      |\n   (?<opentag><(?!/)[^>]*[^/]>)  |\n   (?<-opentag></[^>]*[^/]>)     |\n   [^<>]*\n)*\n(?(opentag)(?!))\n\n\nUse the flags:\n\n\nSingleline\nIgnorePatternWhitespace (not necessary if you collapse regex and remove all whitespace)\nIgnoreCase (not necessary)\n\n\nRegular Expression Explained (inline)\n\n(?=<ul\\s+id=\"matchMe\"\\s+type=\"square\"\\s*>) # match start with <ul id=\"matchMe\"...\n(?>                                        # atomic group / don't backtrack (faster)\n   <!-- .*? -->                 |          # match xml / html comment\n   <[^>]*/>                     |          # self closing tag\n   (?<opentag><(?!/)[^>]*[^/]>) |          # push opening xml tag\n   (?<-opentag></[^>]*[^/]>)    |          # pop closing xml tag\n   [^<>]*                                  # something between tags\n)*                                         # match as many xml tags as possible\n(?(opentag)(?!))                           # ensure no 'opentag' groups are on stack\n\n\nYou can try this at A Better .NET Regular Expression Tester.\n\nI used the sample source of:\n\n<html>\n<body>\n<div>\n   <br />\n   <ul id=\"matchMe\" type=\"square\">\n      <li>stuff...</li>\n      <li>more stuff</li>\n      <li>\n          <div>\n               <span>still more</span>\n               <ul>\n                    <li>Another &gt;ul&lt;, oh my!</li>\n                    <li>...</li>\n               </ul>\n          </div>\n      </li>\n   </ul>\n</div>\n</body>\n</html>\n\n\nThis found the match:\n\n   <ul id=\"matchMe\" type=\"square\">\n      <li>stuff...</li>\n      <li>more stuff</li>\n      <li>\n          <div>\n               <span>still more</span>\n               <ul>\n                    <li>Another &gt;ul&lt;, oh my!</li>\n                    <li>...</li>\n               </ul>\n          </div>\n      </li>\n   </ul>\n\n\nalthough it actually came out like this:\n\n<ul id=\"matchMe\" type=\"square\">           <li>stuff...</li>           <li>more stuff</li>           <li>               <div>                    <span>still more</span>                    <ul>                         <li>Another &gt;ul&lt;, oh my!</li>                         <li>...</li>                    </ul>               </div>           </li>        </ul>\n\n\nLastly, I really enjoyed Jeff Atwood's article:  Parsing Html The Cthulhu Way. Funny enough, it cites the answer to this question that currently has over 4k votes.\n    ",
        "votes": 283,
        "comentarios": [
            {
                "decripcion": "System.Text is not part of C#. It's part of .NET.",
                "fecha": { "$date" : "2012-02-02T19:07:53Z" },
                "usuario": "John Saunders",
                "usuario_id": 2083
            },
            {
                "decripcion": "In the first line of your regex ((?=<ul\\s*id=\"matchMe\"\\s*type=\"square\"\\s*>) # match start with <ul id=\"matchMe\"...), in between \"<ul\" and \"id\" should be \\s+, not \\s*, unless you want it to match <ulid=... ;)",
                "fecha": { "$date" : "2012-07-06T02:49:08Z" },
                "usuario": "C0deH4cker",
                "usuario_id": 2084
            },
            {
                "decripcion": "@C0deH4cker You are correct, the expression should have \\s+ instead of \\s*.",
                "fecha": { "$date" : "2012-07-06T22:33:05Z" },
                "usuario": "Sam",
                "usuario_id": 1553
            },
            {
                "decripcion": "Not that I really understand it, but I think your regex fails on <img src=\"images/pic.jpg\" />",
                "fecha": { "$date" : "2013-09-27T17:05:13Z" },
                "usuario": "Scheintod",
                "usuario_id": 2085
            },
            {
                "decripcion": "@Scheintod Thank you for the comment.  I updated the code.  The previous expression failed for self closing tags that had a / somewhere inside which failed for your <img src=\"images/pic.jpg\" /> html.",
                "fecha": { "$date" : "2013-09-27T19:00:25Z" },
                "usuario": "Sam",
                "usuario_id": 1553
            }
        ],
        "usuario": "Sam",
        "usuario_id": 1553
    },
    {
        "_id": 1184,
        "fecha": { "$date" : "2015-05-12T18:54:20Z" },
        "decripcion": "\nI suggest using QueryPath for parsing XML and HTML in PHP.  It's basically much the same syntax as jQuery, only it's on the server side.\n    ",
        "votes": 261,
        "comentarios": [
            {
                "decripcion": "@Kyle\u2014jQuery does not parse XML, it uses the client's built\u2013in parser (if there is one). Therefore you do not need jQuery to do it, but as little as two lines of plain old JavaScript. If there is no built\u2013in parser, jQuery will not help.",
                "fecha": { "$date" : "2013-10-31T06:25:27Z" },
                "usuario": "RobG",
                "usuario_id": 647
            },
            {
                "decripcion": "@RobG Actually jQuery uses the DOM, not the built-in parser.",
                "fecha": { "$date" : "2014-09-22T03:49:04Z" },
                "usuario": "Qix - MONICA WAS MISTREATED",
                "usuario_id": 2086
            },
            {
                "decripcion": "@Qix\u2014you'd better tell the authors of the documentation then: \"jQuery.parseXML uses the native parsing function of the browser\u2026\". Source: jQuery.parseXML()",
                "fecha": { "$date" : "2014-09-22T05:01:30Z" },
                "usuario": "RobG",
                "usuario_id": 647
            },
            {
                "decripcion": "Having come here from the meme question (meta.stackexchange.com/questions/19478/the-many-memes-of-meta/\u2026), I love that one of the answers is 'Use jQuery'",
                "fecha": { "$date" : "2016-04-01T21:09:45Z" },
                "usuario": "Jorn",
                "usuario_id": 2087
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1185,
        "fecha": { "$date" : "2010-01-27T12:54:35Z" },
        "decripcion": "\nWhile the answers that you can't parse HTML with regexes are correct, they don't apply here. The OP just wants to parse one HTML tag with regexes, and that is something that can be done with a regular expression.\n\nThe suggested regex is wrong, though:\n\n<([a-z]+) *[^/]*?>\n\n\nIf you add something to the regex, by backtracking it can be forced to match silly things like <a >>, [^/] is too permissive. Also note that <space>*[^/]* is redundant, because the [^/]* can also match spaces.\n\nMy suggestion would be\n\n<([a-z]+)[^>]*(?<!/)>\n\n\nWhere (?<! ... ) is (in Perl regexes) the negative look-behind. It reads \"a <, then a word, then anything that's not a >, the last of which may not be a /, followed by >\".\n\nNote that this allows things like <a/ > (just like the original regex), so if you want something more restrictive, you need to build a regex to match attribute pairs separated by spaces.\n    ",
        "votes": 227,
        "comentarios": [
            {
                "decripcion": "+1 for noting that the question is not about parsing full (X)HTML, it's about matching (X)HTML open tags.",
                "fecha": { "$date" : "2012-09-08T02:26:22Z" },
                "usuario": "LarsH",
                "usuario_id": 202
            },
            {
                "decripcion": "Something else most of the answers seem to ignore, is that an HTML parser can very well use regular expressions in its implementation for parts of HTML, and I would be surprised if most parsers didn't do this.",
                "fecha": { "$date" : "2015-03-26T19:15:04Z" },
                "usuario": "Thayne",
                "usuario_id": 2088
            },
            {
                "decripcion": "@Thayne Exactly. When parsing individual tags, a regular expression is the right tool for the job. It is quite ridiculous that one has to scroll halfway down the page to find a reasonable answer. The accepted answer is incorrect because it mixes up lexing and parsing.",
                "fecha": { "$date" : "2015-11-22T10:26:25Z" },
                "usuario": "kasperd",
                "usuario_id": 2089
            },
            {
                "decripcion": "The answer given here will fail when an attribute value contains a '>' or '/' character.",
                "fecha": { "$date" : "2016-04-21T08:14:04Z" },
                "usuario": "Martin L",
                "usuario_id": 2090
            },
            {
                "decripcion": "This will work incorrectly on HTML containing comments or CData sections.  It will also not work correctly if a quoted attribute contains a > character. I agree what OP suggest can be done with a regex, but the one presented here is far to simplistic.",
                "fecha": { "$date" : "2017-07-30T10:14:41Z" },
                "usuario": "JacquesB",
                "usuario_id": 2091
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1186,
        "fecha": { "$date" : "2009-11-25T21:12:04Z" },
        "decripcion": "\nTry:\n\n<([^\\s]+)(\\s[^>]*?)?(?<!/)>\n\n\nIt is similar to yours, but the last > must not be after a slash, and also accepts h1.\n    ",
        "votes": 186,
        "comentarios": [
            {
                "decripcion": "<a href=\"foo\" title=\"5>3\"> Oops </a>",
                "fecha": { "$date" : "2009-11-13T23:11:39Z" },
                "usuario": "Gareth",
                "usuario_id": 2092
            },
            {
                "decripcion": "> is valid in an attribute value. Indeed, in the \u2018canonical XML\u2019 serialisation you must not use &gt;. (Which isn't entirely relevant, except to emphasise that > in an attribute value is not at all an unusual thing.)",
                "fecha": { "$date" : "2009-11-14T00:15:33Z" },
                "usuario": "bobince",
                "usuario_id": 2062
            },
            {
                "decripcion": "@Kobi: what does the exlamation mark (the one you placed tpward the end) mean in a regexp?",
                "fecha": { "$date" : "2011-04-30T17:16:11Z" },
                "usuario": "Marco Demaio",
                "usuario_id": 2093
            },
            {
                "decripcion": "@bobince: are u sure? I don't understand anymore, so is this valid HTML too: <div title=\"this tag is a <div></div>\">hello</div>",
                "fecha": { "$date" : "2011-04-30T17:31:15Z" },
                "usuario": "Marco Demaio",
                "usuario_id": 2093
            },
            {
                "decripcion": "@MarcoDemaio - > does not have to be escaped in an attribute value, but < does. So this is would be valid HTML: <div title=\"this tag is a &lt;div>&lt;/div>\">hello</div>",
                "fecha": { "$date" : "2016-10-12T22:11:04Z" },
                "usuario": "Daniel Haley",
                "usuario_id": 2094
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1187,
        "fecha": { "$date" : "2013-10-05T04:52:53Z" },
        "decripcion": "\nSun Tzu, an ancient Chinese strategist, general, and philosopher, said:\n\n\n  It is said that if you know your enemies and know yourself, you can win a hundred battles without a single loss.\n  If you only know yourself, but not your opponent, you may win or may lose.\n  If you know neither yourself nor your enemy, you will always endanger yourself.\n\n\nIn this case your enemy is HTML and you are either yourself or regex.  You might even be Perl with irregular regex. Know HTML.  Know yourself.\n\nI have composed a haiku describing the nature of HTML.\n\nHTML has\ncomplexity exceeding\nregular language.\n\n\nI have also composed a haiku describing the nature of regex in Perl.\n\nThe regex you seek\nis defined within the phrase\n<([a-zA-Z]+)(?:[^>]*[^/]*)?>\n\n    ",
        "votes": 182,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1188,
        "fecha": { "$date" : "2009-11-15T14:44:04Z" },
        "decripcion": "\n<?php\n$selfClosing = explode(',', 'area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed');\n\n$html = '\n<p><a href=\"#\">foo</a></p>\n<hr/>\n<br/>\n<div>name</div>';\n\n$dom = new DOMDocument();\n$dom->loadHTML($html);\n$els = $dom->getElementsByTagName('*');\nforeach ( $els as $el ) {\n    $nodeName = strtolower($el->nodeName);\n    if ( !in_array( $nodeName, $selfClosing ) ) {\n        var_dump( $nodeName );\n    }\n}\n\n\nOutput:\n\nstring(4) \"html\"\nstring(4) \"body\"\nstring(1) \"p\"\nstring(1) \"a\"\nstring(3) \"div\"\n\n\nBasically just define the element node names that are self closing, load the whole html string into a DOM library, grab all elements, loop through and filter out ones which aren't self closing and operate on them.\n\nI'm sure you already know by now that you shouldn't use regex for this purpose.\n    ",
        "votes": 156,
        "comentarios": [
            {
                "decripcion": "If you're dealing with real XHTML then append getElementsByTagName with NS and specify the namespace.",
                "fecha": { "$date" : "2009-11-15T14:39:44Z" },
                "usuario": "meder omuraliev",
                "usuario_id": 2095
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1189,
        "fecha": { "$date" : "2009-11-16T23:15:03Z" },
        "decripcion": "\nI don't know your exact need for this, but if you are also using .NET, couldn't you use Html Agility Pack?\n\nExcerpt:\n\n\n  It is a .NET code library that allows\n  you to parse \"out of the web\" HTML\n  files. The parser is very tolerant\n  with \"real world\" malformed HTML.\n\n    ",
        "votes": 149,
        "comentarios": [
            {
                "decripcion": "CodePlex closed down (but this one is in the CodePlex archive). Perhaps update?",
                "fecha": { "$date" : "2020-08-14T15:47:34Z" },
                "usuario": "Peter Mortensen",
                "usuario_id": 246
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1190,
        "fecha": { "$date" : "2012-03-19T15:04:25Z" },
        "decripcion": "\nYou want the first > not preceded by a /.  Look here for details on how to do that.  It's referred to as negative lookbehind.\n\nHowever, a na\u00efve implementation of that will end up matching <bar/></foo> in this example document\n\n<foo><bar/></foo>\n\n\nCan you provide a little more information on the problem you're trying to solve?  Are you iterating through tags programatically?\n    ",
        "votes": 138,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1191,
        "fecha": { "$date" : "2014-05-16T14:43:57Z" },
        "decripcion": "\nThe W3C explains parsing in a pseudo regexp form:\nW3C Link  \n\nFollow the var links for QName, S, and Attribute to get a clearer picture.\nBased on that you can create a pretty good regexp to handle things like stripping tags.\n    ",
        "votes": 123,
        "comentarios": [
            {
                "decripcion": "That's not a psuedo regexp form, that's an EBNF form, as specified here: XML spec, appendix 6",
                "fecha": { "$date" : "2015-02-11T10:34:58Z" },
                "usuario": "Rob G",
                "usuario_id": 2096
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1192,
        "fecha": { "$date" : "2012-03-19T15:02:18Z" },
        "decripcion": "\nIf you need this for PHP:\n\nThe PHP DOM functions won't work properly unless it is properly formatted XML. No matter how much better their use is for the rest of mankind.\n\nsimplehtmldom is good, but I found it a bit buggy, and it is is quite memory heavy [Will crash on large pages.]\n\nI have never used querypath, so can't comment on its usefulness. \n\nAnother one to try is my DOMParser which is very light on resources and I've been using happily for a while. Simple to learn & powerful.\n\nFor Python and Java, similar links were posted.\n\nFor the downvoters - I only wrote my class when the XML parsers proved unable to withstand real use. Religious downvoting just prevents useful answers from being posted - keep things within perspective of the question, please.\n    ",
        "votes": 107,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1193,
        "fecha": { "$date" : "2017-10-18T07:33:46Z" },
        "decripcion": "\nHere's the solution:\n\n<?php\n// here's the pattern:\n$pattern = '/<(\\w+)(\\s+(\\w+)\\s*\\=\\s*(\\'|\")(.*?)\\\\4\\s*)*\\s*(\\/>|>)/';\n\n// a string to parse:\n$string = 'Hello, try clicking <a href=\"#paragraph\">here</a>\n    <br/>and check out.<hr />\n    <h2>title</h2>\n    <a name =\"paragraph\" rel= \"I\\'m an anchor\"></a>\n    Fine, <span title=\\'highlight the \"punch\"\\'>thanks<span>.\n    <div class = \"clear\"></div>\n    <br>';\n\n// let's get the occurrences:\npreg_match_all($pattern, $string, $matches, PREG_PATTERN_ORDER);\n\n// print the result:\nprint_r($matches[0]);\n?>\n\n\nTo test it deeply, I entered in the string auto-closing tags like:\n\n\n<hr />\n<br/>\n<br>\n\n\nI also entered tags with:\n\n\none attribute\nmore than one attribute\nattributes which value is bound either into single quotes or into double quotes\nattributes containing single quotes when the delimiter is a double quote and vice versa\n\"unpretty\" attributes with a space before the \"=\" symbol, after it and both before and after it.\n\n\nShould you find something which does not work in the proof of concept above, I am available in analyzing the code to improve my skills.\n\n<EDIT>\nI forgot that the question from the user was to avoid the parsing of self-closing tags.\nIn this case the pattern is simpler, turning into this:\n\n$pattern = '/<(\\w+)(\\s+(\\w+)\\s*\\=\\s*(\\'|\")(.*?)\\\\4\\s*)*\\s*>/';\n\n\nThe user @ridgerunner noticed that the pattern does not allow unquoted attributes or attributes with no value. In this case a fine tuning brings us the following pattern:\n\n$pattern = '/<(\\w+)(\\s+(\\w+)(\\s*\\=\\s*(\\'|\"|)(.*?)\\\\5\\s*)?)*\\s*>/';\n\n\n</EDIT>\n\nUnderstanding the pattern\n\nIf someone is interested in learning more about the pattern, I provide some line:\n\n\nthe first sub-expression (\\w+) matches the tag name\nthe second sub-expression contains the pattern of an attribute. It is composed by:\n\n\none or more whitespaces \\s+\nthe name of the attribute (\\w+)\nzero or more whitespaces \\s* (it is possible or not, leaving blanks here)\nthe \"=\" symbol\nagain, zero or more whitespaces\nthe delimiter of the attribute value, a single or double quote ('|\"). In the pattern, the single quote is escaped because it coincides with the PHP string delimiter. This sub-expression is captured with the parentheses so it can be referenced again to parse the closure of the attribute, that's why it is very important.\nthe value of the attribute, matched by almost anything: (.*?); in this specific syntax, using the greedy match (the question mark after the asterisk) the RegExp engine enables a \"look-ahead\"-like operator, which matches anything but what follows this sub-expression\nhere comes the fun: the \\4 part is a backreference operator, which refers to a sub-expression defined before in the pattern, in this case, I am referring to the fourth sub-expression, which is the first attribute delimiter found\nzero or more whitespaces \\s*\nthe attribute sub-expression ends here, with the specification of zero or more possible occurrences, given by the asterisk.\n\nThen, since a tag may end with a whitespace before the \">\" symbol, zero or more whitespaces are matched with the \\s* subpattern.\nThe tag to match may end with a simple \">\" symbol, or a possible XHTML closure, which makes use of the slash before it: (/>|>). The slash is, of course, escaped since it coincides with the regular expression delimiter.\n\n\nSmall tip: to better analyze this code it is necessary looking at the source code generated since I did not provide any HTML special characters escaping.\n    ",
        "votes": 97,
        "comentarios": [
            {
                "decripcion": "Does not match valid tags having attributes with no value, i.e. <option selected>. Also does not match valid tags with unquoted attribute values, i.e. <p id=10>.",
                "fecha": { "$date" : "2011-07-25T15:01:59Z" },
                "usuario": "ridgerunner",
                "usuario_id": 2097
            },
            {
                "decripcion": "@ridgerunner: Thanks very much for your comment. In that case the pattern must change a bit: $pattern = '/<(\\w+)(\\s+(\\w+)(\\s*\\=\\s*(\\'|\"|)(.*?)\\\\5\\s*)?)*\\s*>/'; I tested it and works in case of non-quoted attributes or attributes with no value.",
                "fecha": { "$date" : "2011-07-25T16:41:46Z" },
                "usuario": "yodabar",
                "usuario_id": 2098
            },
            {
                "decripcion": "How about a space before the tag name: < a href=\"http://wtf.org\" > I'm pretty sure it is legal, but you don't match it.",
                "fecha": { "$date" : "2013-10-05T04:58:49Z" },
                "usuario": "Floris",
                "usuario_id": 2099
            },
            {
                "decripcion": "NO sorry, whitespaces before a tagname are illegal. Beyond being \"pretty sure\" why don't you provide some evidences of your objection? Here are mine, w3.org/TR/xml11/#sec-starttags referred to XML 1.1, and you can find the same for HTML 4, 5 and XHTML, as a W3C validation would also warn if you make a test. As a lot of other blah-blah-poets around here, I did not still receive any intelligent argumentation, apart some hundred of minus to my answers, to demonstrate where my code fails according to the rules of contract specified in the question. I would only welcome them.",
                "fecha": { "$date" : "2013-10-06T18:03:45Z" },
                "usuario": "yodabar",
                "usuario_id": 2098
            },
            {
                "decripcion": "XML tags can contain colons, e.g. <namespace:name>, is that not so in HTML?",
                "fecha": { "$date" : "2020-07-17T21:54:59Z" },
                "usuario": "Qwertie",
                "usuario_id": 1123
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1194,
        "fecha": { "$date" : "2014-04-04T08:11:06Z" },
        "decripcion": "\nWhenever I need to quickly extract something from an HTML document, I use Tidy to convert it to XML and then use XPath or XSLT to get what I need.\nIn your case, something like this: \n\n//p/a[@href='foo']\n\n    ",
        "votes": 92,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1195,
        "fecha": { "$date" : "2009-11-16T18:34:50Z" },
        "decripcion": "\nI used a open source tool called HTMLParser before. It's designed to parse HTML in various ways and serves the purpose quite well. It can parse HTML as different treenode and you can easily use its API to get attributes out of the node. Check it out and see if this can help you.\n    ",
        "votes": 90,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1196,
        "fecha": { "$date" : "2020-10-28T23:11:43Z" },
        "decripcion": "\nI like to parse HTML with regular expressions. I don't attempt to parse idiot HTML that is deliberately broken. This code is my main parser (Perl edition):\n$_ = join \"\",<STDIN>; tr/\\n\\r \\t/ /s; s/</\\n</g; s/>/>\\n/g; s/\\n ?\\n/\\n/g;\ns/^ ?\\n//s; s/ $//s; print\n\nIt's called htmlsplit, splits the HTML into lines, with one tag or chunk of text on each line. The lines can then be processed further with other text tools and scripts, such as grep, sed, Perl, etc. I'm not even joking :) Enjoy.\nIt is simple enough to rejig my slurp-everything-first Perl script into a nice streaming thing, if you wish to process enormous web pages. But it's not really necessary.\nHTML Split\n\nSome better regular expressions:\n/(<.*?>|[^<]+)\\s*/g    # Get tags and text\n/(\\w+)=\"(.*?)\"/g       # Get attibutes\n\nThey are good for XML / XHTML.\nWith minor variations, it can cope with messy HTML... or convert the HTML -> XHTML first.\n\nThe best way to write regular expressions is in the Lex / Yacc style, not as opaque one-liners or commented multi-line monstrosities. I didn't do that here, yet; these ones barely need it.\n    ",
        "votes": 88,
        "comentarios": [
            {
                "decripcion": "\"I don't attempt to parse idiot HTML that is deliberately broken.\"  How does your code know the difference?",
                "fecha": { "$date" : "2011-07-26T20:38:07Z" },
                "usuario": "Kevin Panko",
                "usuario_id": 2100
            },
            {
                "decripcion": "(get attributes bug 1) /(\\w+)=\"(.*?)\"/ assumes double quotes. It will miss values in single quotes. In html version 4 and earlier unquoted value is allowed, if it is a simple word.",
                "fecha": { "$date" : "2016-09-11T08:23:51Z" },
                "usuario": "David Andersson",
                "usuario_id": 2101
            },
            {
                "decripcion": "(get attributes bug 2) /(\\w+)=\"(.*?)\"/ may falsely match text that looks like an attribute within an attribute, e.g. <img title=\"Nope down='up' for aussies\" src=\"...\" />. If applied globally, it will also match such things in ordinary text or in html comments.",
                "fecha": { "$date" : "2016-09-11T08:28:54Z" },
                "usuario": "David Andersson",
                "usuario_id": 2101
            },
            {
                "decripcion": "(get attributes bug 3) /(\\w+)=\"(.*?)\"/ Optional whitespace should be allowed around the equal sign.",
                "fecha": { "$date" : "2016-09-11T08:42:23Z" },
                "usuario": "David Andersson",
                "usuario_id": 2101
            },
            {
                "decripcion": "(html split bug 1) s/>/>\\n/g Since \">\" is allowed in data, this may split text lines and confuse subsequent processing.",
                "fecha": { "$date" : "2016-09-11T09:09:52Z" },
                "usuario": "David Andersson",
                "usuario_id": 2101
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1197,
        "fecha": { "$date" : "2021-08-24T08:31:02Z" },
        "decripcion": "\nHere is a PHP based parser (archived) that parses HTML using  some ungodly regex. As the author of this project, I can tell you it is possible to parse HTML with regex, but not efficient. If you need a server-side solution (as I did for my wp-Typography WordPress plugin), this works.\n    ",
        "votes": 74,
        "comentarios": [
            {
                "decripcion": "htmlawed is another PHP project that parses HTML to filter, convert, etc. Has some nice code if you can figure it out!",
                "fecha": { "$date" : "2011-05-12T19:22:03Z" },
                "usuario": "user594694",
                "usuario_id": 2102
            },
            {
                "decripcion": "No you can\u2019t parse HTML with regex. But for some subsets, it may work.",
                "fecha": { "$date" : "2014-12-05T17:07:49Z" },
                "usuario": "mirabilos",
                "usuario_id": 2103
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1198,
        "fecha": { "$date" : "2015-05-19T16:20:44Z" },
        "decripcion": "\nThere are some nice regexes for replacing HTML with BBCode here. For all you nay-sayers, note that he's not trying to fully parse HTML, just to sanitize it. He can probably afford to kill off tags that his simple \"parser\" can't understand.\n\nFor example:\n\n$store =~ s/http:/http:\\/\\//gi;\n$store =~ s/https:/https:\\/\\//gi;\n$baseurl = $store;\n\nif (!$query->param(\"ascii\")) {\n    $html =~ s/\\s\\s+/\\n/gi;\n    $html =~ s/<pre(.*?)>(.*?)<\\/pre>/\\[code]$2\\[\\/code]/sgmi;\n}\n\n$html =~ s/\\n//gi;\n$html =~ s/\\r\\r//gi;\n$html =~ s/$baseurl//gi;\n$html =~ s/<h[1-7](.*?)>(.*?)<\\/h[1-7]>/\\n\\[b]$2\\[\\/b]\\n/sgmi;\n$html =~ s/<p>/\\n\\n/gi;\n$html =~ s/<br(.*?)>/\\n/gi;\n$html =~ s/<textarea(.*?)>(.*?)<\\/textarea>/\\[code]$2\\[\\/code]/sgmi;\n$html =~ s/<b>(.*?)<\\/b>/\\[b]$1\\[\\/b]/gi;\n$html =~ s/<i>(.*?)<\\/i>/\\[i]$1\\[\\/i]/gi;\n$html =~ s/<u>(.*?)<\\/u>/\\[u]$1\\[\\/u]/gi;\n$html =~ s/<em>(.*?)<\\/em>/\\[i]$1\\[\\/i]/gi;\n$html =~ s/<strong>(.*?)<\\/strong>/\\[b]$1\\[\\/b]/gi;\n$html =~ s/<cite>(.*?)<\\/cite>/\\[i]$1\\[\\/i]/gi;\n$html =~ s/<font color=\"(.*?)\">(.*?)<\\/font>/\\[color=$1]$2\\[\\/color]/sgmi;\n$html =~ s/<font color=(.*?)>(.*?)<\\/font>/\\[color=$1]$2\\[\\/color]/sgmi;\n$html =~ s/<link(.*?)>//gi;\n$html =~ s/<li(.*?)>(.*?)<\\/li>/\\[\\*]$2/gi;\n$html =~ s/<ul(.*?)>/\\[list]/gi;\n$html =~ s/<\\/ul>/\\[\\/list]/gi;\n$html =~ s/<div>/\\n/gi;\n$html =~ s/<\\/div>/\\n/gi;\n$html =~ s/<td(.*?)>/ /gi;\n$html =~ s/<tr(.*?)>/\\n/gi;\n\n$html =~ s/<img(.*?)src=\"(.*?)\"(.*?)>/\\[img]$baseurl\\/$2\\[\\/img]/gi;\n$html =~ s/<a(.*?)href=\"(.*?)\"(.*?)>(.*?)<\\/a>/\\[url=$baseurl\\/$2]$4\\[\\/url]/gi;\n$html =~ s/\\[url=$baseurl\\/http:\\/\\/(.*?)](.*?)\\[\\/url]/\\[url=http:\\/\\/$1]$2\\[\\/url]/gi;\n$html =~ s/\\[img]$baseurl\\/http:\\/\\/(.*?)\\[\\/img]/\\[img]http:\\/\\/$1\\[\\/img]/gi;\n\n$html =~ s/<head>(.*?)<\\/head>//sgmi;\n$html =~ s/<object>(.*?)<\\/object>//sgmi;\n$html =~ s/<script(.*?)>(.*?)<\\/script>//sgmi;\n$html =~ s/<style(.*?)>(.*?)<\\/style>//sgmi;\n$html =~ s/<title>(.*?)<\\/title>//sgmi;\n$html =~ s/<!--(.*?)-->/\\n/sgmi;\n\n$html =~ s/\\/\\//\\//gi;\n$html =~ s/http:\\//http:\\/\\//gi;\n$html =~ s/https:\\//https:\\/\\//gi;\n\n$html =~ s/<(?:[^>'\"]*|(['\"]).*?\\1)*>//gsi;\n$html =~ s/\\r\\r//gi;\n$html =~ s/\\[img]\\//\\[img]/gi;\n$html =~ s/\\[url=\\//\\[url=/gi;\n\n    ",
        "votes": 70,
        "comentarios": [
            {
                "decripcion": "Don't do this. Please.",
                "fecha": { "$date" : "2015-09-03T02:12:42Z" },
                "usuario": "maletor",
                "usuario_id": 2104
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1199,
        "fecha": { "$date" : "2020-08-14T16:06:12Z" },
        "decripcion": "\nAbout the question of the regular expression methods to parse (x)HTML, the answer to all of the ones who spoke about some limits is: you have not been trained enough to rule the force of this powerful weapon, since nobody here spoke about recursion.\nA regular expression-agnostic colleague notified me this discussion, which is not certainly the first on the web about this old and hot topic.\nAfter reading some posts, the first thing I did was looking for the \"?R\" string in this thread. The second was to search about \"recursion\".\nNo, holy cow, no match found. Since nobody mentioned the main mechanism a parser is built onto, I was soon aware that nobody got the point.\nIf an (x)HTML parser needs recursion, a regular expression parser without recursion is not enough for the purpose. It's a simple construct.\nThe black art of regular expressions is hard to master, so maybe there are further possibilities we left out while trying and testing our personal solution to capture the whole web in one hand... Well, I am sure about it :)\nHere's the magic pattern:\n$pattern = \"/<([\\w]+)([^>]*?)(([\\s]*\\/>)|(>((([^<]*?|<\\!\\-\\-.*?\\-\\->)|(?R))*)<\\/\\\\1[\\s]*>))/s\";\n\nJust try it. It's written as a PHP string, so the \"s\" modifier makes classes include newlines.\nHere's a sample note on the PHP manual I wrote in January: Reference\n(Take care. In that note I wrongly used the \"m\" modifier; it should be erased, notwithstanding it is discarded by the regular expression engine, since no ^ or $ anchoring was used).\nNow, we could speak about the limits of this method from a more informed point of view:\n\naccording to the specific implementation of the regular expression engine, recursion may have a limit in the number of nested patterns parsed, but it depends on the language used\nalthough corrupted, (x)HTML does not drive into severe errors. It is not sanitized.\n\nAnyhow, it is only a regular expression pattern, but it discloses the possibility to develop of a lot of powerful implementations.\nI wrote this pattern to power the recursive descent parser of a template engine I built in my framework, and performances are really great, both in execution times or in memory usage (nothing to do with other template engines which use the same syntax).\n    ",
        "votes": 70,
        "comentarios": [
            {
                "decripcion": "I'll put this in the \"Regex which doesn't allow greater-than in attributes\" bin. Check it against <input value=\"is 5 > 3?\" />",
                "fecha": { "$date" : "2010-07-05T16:24:02Z" },
                "usuario": "Gareth",
                "usuario_id": 2092
            },
            {
                "decripcion": "If you put something like that in production code, you would likely be shot by the maintainer.  A jury would never convict him.",
                "fecha": { "$date" : "2010-07-05T16:33:01Z" },
                "usuario": "aehiilrs",
                "usuario_id": 2105
            },
            {
                "decripcion": "Regular expressions can't work because by definition they are not recursive. Adding a recursive operator to regular expressions basically makes a CFG only with poorer syntax. Why not use something designed to be recursive in the first place rather than violently insert recursion into something already overflowing with extraneous functionality?",
                "fecha": { "$date" : "2010-07-06T18:38:34Z" },
                "usuario": "Welbog",
                "usuario_id": 2106
            },
            {
                "decripcion": "My objection isn't one of functionality it is one of time invested. The problem with RegEx is that by the time you post the cutsey little one liners it appears that you did something more efficiently (\"See one line of code!\"). And of course no one mentions the half hour (or 3) that they spent with their cheat-sheet and (hopefully) testing every possible permutation of input. And once you get past all that when the maintainer goes to figure out or validate the code they can't just look at it and see that it is right. The have to dissect the expression and essentially retest it all over again...",
                "fecha": { "$date" : "2010-07-10T15:11:09Z" },
                "usuario": "Oorang",
                "usuario_id": 2107
            },
            {
                "decripcion": "... to know that it is good. And that will happen even with people who are good with regex. And honestly I suspect that overwhelming majority of people won't know it well. So you take one of the most notorious maintenance nightmares and combine it with recursion which is the other maintenance nightmare and I think to myself what I really need on my project is someone a little less clever. The goal is to write code that bad programmers can maintain without breaking the code base. I know it galls to code to the least common denominator. But hiring excellent talent is hard, and you often...",
                "fecha": { "$date" : "2010-07-10T15:17:22Z" },
                "usuario": "Oorang",
                "usuario_id": 2107
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1200,
        "fecha": { "$date" : "2020-10-28T23:09:21Z" },
        "decripcion": "\n<\\s*(\\w+)[^/>]*>\n\nThe parts explained:\n<: Starting character\n\\s*: It may have whitespaces before the tag name (ugly, but possible).\n(\\w+): tags can contain letters and numbers (h1). Well, \\w also matches '_', but it does not hurt I guess. If curious, use ([a-zA-Z0-9]+) instead.\n[^/>]*: Anything except > and / until closing >\n>: Closing >\nUNRELATED\nAnd to the fellows, who underestimate regular expressions, saying they are only as powerful as regular languages:\nanbanban which is not regular and not even context free, can be matched with ^(a+)b\\1b\\1$\nBackreferencing FTW!\n    ",
        "votes": 63,
        "comentarios": [
            {
                "decripcion": "@GlitchMr, that was his point. Modern regular expressions are not technically regular, nor is there any reason for them to be.",
                "fecha": { "$date" : "2013-02-02T15:45:29Z" },
                "usuario": "alanaktion",
                "usuario_id": 2108
            },
            {
                "decripcion": "@alanaktion: The \"modern\" regular expressions (read: with Perl extensions) cannot match within O(MN) (M being regular expression length, N being text length). Backreferences are one of causes of that. The implementation in awk doesn't have backreferences and matches everything within O(MN) time.",
                "fecha": { "$date" : "2013-02-14T16:52:45Z" },
                "usuario": "Konrad Borowski",
                "usuario_id": 2109
            },
            {
                "decripcion": "<a href=\"foo\" title=\"5>3\"> Oops </a> (quoting @Gareth - odd how people keep posting answers with this specific deficiency over and over. CDATA is kind of easy to overlook, but this is rather more basic)",
                "fecha": { "$date" : "2020-07-17T21:59:38Z" },
                "usuario": "Qwertie",
                "usuario_id": 1123
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1201,
        "fecha": { "$date" : "2010-02-04T16:22:00Z" },
        "decripcion": "\nAs many people have already pointed out, HTML is not a regular language which can make it very difficult to parse. My solution to this is to turn it into a regular language using a tidy program and then to use an XML parser to consume the results. There are a lot of good options for this. My program is written using Java with the jtidy library to turn the HTML into XML and then Jaxen to xpath into the result.\n    ",
        "votes": 61,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1202,
        "fecha": { "$date" : "2016-05-31T07:23:30Z" },
        "decripcion": "\nIf you're simply trying to find those tags (without ambitions of parsing) try this regular expression:\n\n/<[^/]*?>/g\n\n\nI wrote it in 30 seconds, and tested here:\nhttp://gskinner.com/RegExr/\n\nIt matches the types of tags you mentioned, while ignoring the types you said you wanted to ignore.\n    ",
        "votes": 55,
        "comentarios": [
            {
                "decripcion": "No, just \\> is what I meant; I never meant to edit the regular expression of my original post.",
                "fecha": { "$date" : "2016-05-29T06:38:04Z" },
                "usuario": "Lonnie Best",
                "usuario_id": 2110
            },
            {
                "decripcion": "FYI, you don't need to escape angle brackets.  Of course, it does no harm to escape them anyway, but look at the confusion you could have avoided. ;)",
                "fecha": { "$date" : "2016-05-29T07:47:04Z" },
                "usuario": "Alan Moore",
                "usuario_id": 2111
            },
            {
                "decripcion": "I sometimes escape unnecessarily when I'm unsure if something is special character or not. I've edited the answer; it works the same but more concise.",
                "fecha": { "$date" : "2016-05-31T07:23:11Z" },
                "usuario": "Lonnie Best",
                "usuario_id": 2110
            },
            {
                "decripcion": "Looking at this now, I don't know why I thought you meant \\/, since that would do the exact opposite of the requirements. Maybe I thought you were offering a negative filter pattern.",
                "fecha": { "$date" : "2016-06-01T19:14:20Z" },
                "usuario": "Justin Morgan",
                "usuario_id": 2079
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1203,
        "fecha": { "$date" : "2009-11-15T17:13:19Z" },
        "decripcion": "\nIt seems to me you're trying to match tags without a \"/\" at the end. Try this:\n\n<([a-zA-Z][a-zA-Z0-9]*)[^>]*(?<!/)>\n\n    ",
        "votes": 53,
        "comentarios": [
            {
                "decripcion": "This does not work. For the input '<x a=\"<b>\"/><y>' the matches are x and y, although x is terminated.",
                "fecha": { "$date" : "2011-05-04T16:33:18Z" },
                "usuario": "ceving",
                "usuario_id": 2112
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1204,
        "fecha": { "$date" : "2012-05-29T00:01:51Z" },
        "decripcion": "\nIt's true that when programming it's usually best to use dedicated parsers and APIs instead of regular expressions when dealing with HTML, especially if accuracy is paramount (e.g., if your processing might have security implications). However, I don\u2019t ascribe to a dogmatic view that XML-style markup should never be processed with regular expressions. There are cases when regular expressions are a great tool for the job, such as when making one-time edits in a text editor, fixing broken XML files, or dealing with file formats that look like but aren\u2019t quite XML. There are some issues to be aware of, but they're not insurmountable or even necessarily relevant.\n\nA simple regex like <([^>\"']|\"[^\"]*\"|'[^']*')*> is usually good enough, in cases such as those I just mentioned. It's a naive solution, all things considered, but it does correctly allow unencoded > symbols in attribute values. If you're looking for, e.g., a table tag, you could adapt it as </?table\\b([^>\"']|\"[^\"]*\"|'[^']*')*>.\n\nJust to give a sense of what a more \"advanced\" HTML regex would look like, the following does a fairly respectable job of emulating real-world browser behavior and the HTML5 parsing algorithm:\n\n</?([A-Za-z][^\\s>/]*)(?:=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s>]+)|[^>])*(?:>|$)\n\n\nThe following matches a fairly strict definition of XML tags (although it doesn't account for the full set of Unicode characters allowed in XML names):\n\n<(?:([_:A-Z][-.:\\w]*)(?:\\s+[_:A-Z][-.:\\w]*\\s*=\\s*(?:\"[^\"]*\"|'[^']*'))*\\s*/?|/([_:A-Z][-.:\\w]*)\\s*)>\n\n\nGranted, these don't account for surrounding context and a few edge cases, but even such things could be dealt with if you really wanted to (e.g., by searching between the matches of another regex).\n\nAt the end of the day, use the most appropriate tool for the job, even in the cases when that tool happens to be a regex.\n    ",
        "votes": 52,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1205,
        "fecha": { "$date" : "2010-02-09T03:59:27Z" },
        "decripcion": "\nAlthough it's not suitable and effective to use regular expressions for that purpose sometimes regular expressions provide quick solutions for simple match problems and in my view it's not that horrbile to use regular expressions for trivial works. \n\nThere is a definitive blog post about matching innermost HTML elements written by Steven Levithan.\n    ",
        "votes": 49,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1206,
        "fecha": { "$date" : "2021-07-29T21:11:47Z" },
        "decripcion": "\nThe Stack Overflow Regular Expressions FAQ\nSee also a lot of general hints and useful links at the regex tag details page.\n\nOnline tutorials\n\nRegexOne \u21aa\nRegular Expressions Info \u21aa\n\nQuantifiers\n\nZero-or-more: *:greedy, *?:reluctant, *+:possessive\nOne-or-more: +:greedy, +?:reluctant, ++:possessive\n?:optional (zero-or-one)\nMin/max ranges (all inclusive): {n,m}:between n & m, {n,}:n-or-more, {n}:exactly n\nDifferences between greedy, reluctant (a.k.a. \"lazy\", \"ungreedy\") and possessive quantifier:\n\nGreedy vs. Reluctant vs. Possessive Quantifiers\nIn-depth discussion on the differences between greedy versus non-greedy\nWhat's the difference between {n} and {n}?\nCan someone explain Possessive Quantifiers to me? php, perl, java, ruby\nEmulating possessive quantifiers .net\nNon-Stack Overflow references: From Oracle, regular-expressions.info\n\n\n\nCharacter Classes\n\nWhat is the difference between square brackets and parentheses?\n[...]: any one character, [^...]: negated/any character but\n[^] matches any one character including newlines javascript\n[\\w-[\\d]] / [a-z-[qz]]: set subtraction .net, xml-schema, xpath, JGSoft\n[\\w&&[^\\d]]: set intersection java, ruby 1.9+\n[[:alpha:]]:POSIX character classes\nWhy do [^\\\\D2], [^[^0-9]2], [^2[^0-9]] get different results in Java? java\nShorthand:\n\nDigit: \\d:digit, \\D:non-digit\nWord character (Letter, digit, underscore): \\w:word character, \\W:non-word character\nWhitespace: \\s:whitespace, \\S:non-whitespace\n\n\nUnicode categories (\\p{L}, \\P{L}, etc.)\n\nEscape Sequences\n\nHorizontal whitespace: \\h:space-or-tab, \\t:tab\nNewlines:\n\n\\r, \\n:carriage return and line feed\n\\R:generic newline php java-8\n\n\nNegated whitespace sequences: \\H:Non horizontal whitespace character, \\V:Non vertical whitespace character, \\N:Non line feed character pcre php5 java-8\nOther: \\v:vertical tab, \\e:the escape character\n\nAnchors\n\n^:start of line/input, \\b:word boundary, and \\B:non-word boundary, $:end of line/input\n\\A:start of input, \\Z:end of input php, perl, ruby\n\\z:the very end of input (\\Z in Python) .net, php, pcre, java, ruby, icu, swift, objective-c\n\\G:start of match php, perl, ruby\n\n(Also see \"Flavor-Specific Information \u2192 Java \u2192 The functions in Matcher\")\nGroups\n\n(...):capture group, (?:):non-capture group\n\nWhy is my repeating capturing group only capturing the last match?\n\n\n\\1:backreference and capture-group reference, $1:capture group reference\n\nWhat's the meaning of a number after a backslash in a regular expression?\n\\g<1>123:How to follow a numbered capture group, such as \\1, with a number?: python\n\n\nWhat does a subpattern (?i:regex) mean?\nWhat does the 'P' in (?P<group_name>regexp) mean?\n(?>):atomic group or independent group,  (?|):branch reset\n\nEquivalent of branch reset in .NET/C# .net\n\n\nNamed capture groups:\n\nGeneral named capturing group reference at regular-expressions.info\njava: (?<groupname>regex): Overview and naming rules (Non-Stack Overflow links)\nOther languages: (?P<groupname>regex) python, (?<groupname>regex) .net, (?<groupname>regex) perl, (?P<groupname>regex) and (?<groupname>regex) php\n\n\n\nLookarounds\n\nLookaheads: (?=...):positive, (?!...):negative\nLookbehinds: (?<=...):positive, (?<!...):negative\nLookbehind limits in:\n\nLookbehinds need to be constant-length php, perl, python, ruby\nLookarounds of limited length {0,n} java\nVariable length lookbehinds are allowed .net\n\n\nLookbehind alternatives:\n\nUsing \\K php, perl (Flavors that support \\K)\nAlternative regex module for Python python\n\nThe hacky way\nJavaScript negative lookbehind equivalents External link\n\n\n\n\n\nModifiers\n\n\n\n\nflag\nmodifier\nflavors\n\n\n\n\na\nASCII\npython\n\n\nc\ncurrent position\nperl\n\n\ne\nexpression\nphp perl\n\n\ng\nglobal\nmost\n\n\ni\ncase-insensitive\nmost\n\n\nm\nmultiline\nphp perl python javascript .net java\n\n\nm\n(non)multiline\nruby\n\n\no\nonce\nperl ruby\n\n\nS\nstudy\nphp\n\n\ns\nsingle line\nruby\n\n\nU\nungreedy\nphp r\n\n\nu\nunicode\nmost\n\n\nx\nwhitespace-extended\nmost\n\n\ny\nsticky \u21aa\njavascript\n\n\n\n\n\nHow to convert preg_replace e to preg_replace_callback?\nWhat are inline modifiers?\nWhat is '?-mix' in a Ruby Regular Expression\n\nOther:\n\n|:alternation (OR) operator, .:any character, [.]:literal dot character\nWhat special characters must be escaped?\nControl verbs (php and perl): (*PRUNE), (*SKIP), (*FAIL) and (*F)\n\nphp only: (*BSR_ANYCRLF)\n\n\nRecursion (php and perl): (?R), (?0) and (?1), (?-1), (?&groupname)\n\nCommon Tasks\n\nGet a string between two curly braces: {...}\nMatch (or replace) a pattern except in situations s1, s2, s3...\nHow do I find all YouTube video ids in a string using a regex?\nValidation:\n\nInternet: email addresses, URLs (host/port: regex and non-regex alternatives), passwords\nNumeric: a number, min-max ranges (such as 1-31), phone numbers, date\nParsing HTML with regex: See \"General Information > When not to use Regex\"\n\n\n\nAdvanced Regex-Fu\n\nStrings and numbers:\n\nRegular expression to match a line that doesn't contain a word\nHow does this PCRE pattern detect palindromes?\nMatch strings whose length is a fourth power\nHow does this regex find triangular numbers?\nHow to determine if a number is a prime with regex?\nHow to match the middle character in a string with regex?\n\n\nOther:\n\nHow can we match a^n b^n?\nMatch nested brackets\n\nUsing a recursive pattern php, perl\nUsing balancing groups .net\n\n\n\u201cVertical\u201d regex matching in an ASCII \u201cimage\u201d\nList of highly up-voted regex questions on Code Golf\nHow to make two quantifiers repeat the same number of times?\nAn impossible-to-match regular expression: (?!a)a\nMatch/delete/replace this except in contexts A, B and C\nMatch nested brackets with regex without using recursion or balancing groups?\n\n\n\nFlavor-Specific Information\n(Except for those marked with *, this section contains non-Stack Overflow links.)\n\nJava\n\nOfficial documentation: Pattern Javadoc \u21aa, Oracle's regular expressions tutorial \u21aa\nThe differences between functions in java.util.regex.Matcher:\n\nmatches()): The match must be anchored to both input-start and -end\nfind()): A match may be anywhere in the input string (substrings)\nlookingAt(): The match must be anchored to input-start only\n(For anchors in general, see the section \"Anchors\")\n\n\nThe only java.lang.String functions that accept regular expressions: matches(s), replaceAll(s,s), replaceFirst(s,s), split(s), split(s,i)\n*An (opinionated and) detailed discussion of the disadvantages of and missing features in java.util.regex\n\n\n.NET\n\nHow to read a .NET regex with look-ahead, look-behind, capturing groups and back-references mixed together?\n\n\nOfficial documentation:\n\nBoost regex engine: General syntax, Perl syntax (used by TextPad, Sublime Text, UltraEdit, ...???)\nJavaScript general info and RegExp object\n.NET  MySQL  Oracle  Perl5 version 18.2\nPHP: pattern syntax, preg_match\nPython: Regular expression operations, search vs match, how-to\nRust: crate regex, struct regex::Regex\nSplunk: regex terminology and syntax and regex command\nTcl: regex syntax, manpage, regexp command\nVisual Studio Find and Replace\n\n\n\nGeneral information\n(Links marked with * are non-Stack Overflow links.)\n\nOther general documentation resources: Learning Regular Expressions, *Regular-expressions.info, *Wikipedia entry, *RexEgg, Open-Directory Project\nDFA versus NFA\nGenerating Strings matching regex\nBooks: Jeffrey Friedl's Mastering Regular Expressions\nWhen to not use regular expressions:\n\nSome people, when confronted with a problem, think \"I know, I'll use regular expressions.\" Now they have two problems. (blog post written by Stack Overflow's founder)*\nDo not use regex to parse HTML:\n\nDon't.  Please, just don't\nWell, maybe...if you're really determined (other answers in this question are also good)\n\n\n\n\n\nExamples of regex that can cause regex engine to fail\n\nWhy does this regular expression kill the Java regex engine?\n\nTools: Testers and Explainers\n(This section contains non-Stack Overflow links.)\n\nOnline (* includes replacement tester, + includes split tester):\n\nDebuggex (Also has a repository of useful regexes) javascript, python, pcre\n*Regular Expressions 101 php, pcre, python, javascript\nRegex Pal, regular-expressions.info javascript\nRubular ruby  RegExr   Regex Hero dotnet\n*+ regexstorm.net .net\n*RegexPlanet: Java java, Go go, Haskell haskell, JavaScript javascript, .NET dotnet, Perl perl php PCRE php, Python python, Ruby ruby, XRegExp xregexp\nfreeformatter.com xregexp\n*+regex.larsolavtorvik.com php PCRE and POSIX, javascript\nRefiddle javascript ruby .net\n\n\nOffline:\n\nMicrosoft Windows: RegexBuddy (analysis), RegexMagic (creation), Expresso (analysis, creation, free)\n\n\n\n\n    ",
        "votes": 1063,
        "comentarios": [
            {
                "decripcion": "Related: the question for which an answer starts with \"You can't parse [X]HTML with regex.\".",
                "fecha": { "$date" : "2020-07-22T12:47:34Z" },
                "usuario": "Peter Mortensen",
                "usuario_id": 246
            },
            {
                "decripcion": "Perl has more ((?( for conditional, for example) but you can read the perl official documentation instead.",
                "fecha": { "$date" : "2021-01-29T07:50:36Z" },
                "usuario": "user202729",
                "usuario_id": 2113
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1207,
        "fecha": { "$date" : "2019-12-31T23:46:34Z" },
        "decripcion": "\nThe fully RFC 822 compliant regex is inefficient and obscure because of its length.  Fortunately, RFC 822 was superseded twice and the current specification for email addresses is RFC 5322.  RFC 5322 leads to a regex that can be understood if studied for a few minutes and is efficient enough for actual use.\n\nOne RFC 5322 compliant regex can be found at the top of the page at http://emailregex.com/ but uses the IP address pattern that is floating around the internet with a bug that allows 00 for any of the unsigned byte decimal values in a dot-delimited address, which is illegal.  The rest of it appears to be consistent with the RFC 5322 grammar and passes several tests using grep -Po, including cases domain names, IP addresses, bad ones, and account names with and without quotes.\n\nCorrecting the 00 bug in the IP pattern, we obtain a working and fairly fast regex.  (Scrape the rendered version, not the markdown, for actual code.)\n\n\n  (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\n\n\nor:\n\n(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\n\n\nHere is diagram of finite state machine for above regexp which is more clear than regexp itself\n\n\nThe more sophisticated patterns in Perl and PCRE (regex library used e.g. in PHP) can correctly parse RFC 5322 without a hitch. Python and C# can do that too, but they use a different syntax from those first two. However, if you are forced to use one of the many less powerful pattern-matching languages, then it\u2019s best to use a real parser.\n\nIt's also important to understand that validating it per the RFC tells you absolutely nothing about whether that address actually exists at the supplied domain, or whether the person entering the address is its true owner. People sign others up to mailing lists this way all the time. Fixing that requires a fancier kind of validation that involves sending that address a message that includes a confirmation token meant to be entered on the same web page as was the address. \n\nConfirmation tokens are the only way to know you got the address of the person entering it. This is why most mailing lists now use that mechanism to confirm sign-ups. After all, anybody can put down president@whitehouse.gov, and that will even parse as legal, but it isn't likely to be the person at the other end.\n\nFor PHP, you should not use the pattern given in Validate an E-Mail Address with PHP, the Right Way from which I quote:\n\n\n  There is some danger that common usage and widespread sloppy coding will establish a de facto standard for e-mail addresses that is more restrictive than the recorded formal standard.\n\n\nThat is no better than all the other non-RFC patterns. It isn\u2019t even smart enough to handle even RFC 822, let alone RFC 5322. This one, however, is.\n\nIf you want to get fancy and pedantic, implement a complete state engine. A regular expression can only act as a rudimentary filter. The problem with regular expressions is that telling someone that their perfectly valid e-mail address is invalid (a false positive) because your regular expression can't handle it is just rude and impolite from the user's perspective. A state engine for the purpose can both validate and even correct e-mail addresses that would otherwise be considered invalid as it disassembles the e-mail address according to each RFC. This allows for a potentially more pleasing experience, like\n\n\n  The specified e-mail address 'myemail@address,com' is invalid. Did you mean 'myemail@address.com'?\n\n\nSee also Validating Email Addresses, including the comments. Or Comparing E-mail Address Validating Regular Expressions.\n\n\n\nDebuggex Demo\n    ",
        "votes": 2823,
        "comentarios": [
            {
                "decripcion": "You said \"There is no good regular expression.\" Is this general or specific to e-mail address validation?",
                "fecha": { "$date" : "2008-10-14T14:33:33Z" },
                "usuario": "Tomalak",
                "usuario_id": 2115
            },
            {
                "decripcion": "@Tomalak: only for email addresses. As bortzmeyer said, the RFC is extremely complicated",
                "fecha": { "$date" : "2008-10-14T16:23:56Z" },
                "usuario": "Luk",
                "usuario_id": 2116
            },
            {
                "decripcion": "The linux journal article you mention is factually wrong in several respects. In particular Lovell clearly hasn't read the errata to RFC3696 and repeats some of the errors in the published version of the RFC.  More here: dominicsayers.com/isemail",
                "fecha": { "$date" : "2009-04-08T15:56:16Z" },
                "usuario": "Dominic Sayers",
                "usuario_id": 2117
            },
            {
                "decripcion": "Jeff Atwood has a lovely regex in this blog post to validate all valid email addresses: codinghorror.com/blog/2005/02/regex-use-vs-regex-abuse.html",
                "fecha": { "$date" : "2010-03-22T18:26:42Z" },
                "usuario": "CMircea",
                "usuario_id": 2118
            },
            {
                "decripcion": "RFC 822, section 6.2.4. specifically and explicitly allows capital letters, but this answer does not. w3.org/Protocols/rfc822/#z26 Perhaps the author of this answer intended for their regex to be applied insensitively. If so, that should be made explicit in the body of the answer.",
                "fecha": { "$date" : "2019-04-10T22:36:39Z" },
                "usuario": "Jared Beck",
                "usuario_id": 2119
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1208,
        "fecha": { "$date" : "2021-07-21T10:03:52Z" },
        "decripcion": "\nYou should not use regular expressions to validate email addresses.\nInstead, in C# use the MailAddress class, like this:\ntry {\n    address = new MailAddress(address).Address;\n} catch(FormatException) {\n    // address is invalid\n}\n\nThe MailAddress class uses a BNF parser to validate the address in full accordance with RFC822.\nIf you plan to use the MailAddress to validate the e-mail address, be aware that this approach accepts the display name part of the e-mail address as well, and that may not be exactly what you want to achieve. For example, it accepts these strings as valid e-mail addresses:\n\n\"user1@hotmail.com; user2@gmail.com\"\n\"user1@hotmail.com; user2@gmail.com; user3@company.com\"\n\"User Display Name user3@company.com\"\n\"user4 @company.com\"\n\nIn some of these cases, only the last part of the strings is parsed as the address; the rest before that is the display name. To get a plain e-mail address without any display name, you can check the normalized address against your original string.\nbool isValid = false;\n\ntry\n{\n    MailAddress address = new MailAddress(emailAddress);\n    isValid = (address.Address == emailAddress);\n    // or\n    // isValid = string.IsNullOrEmpty(address.DisplayName);\n}\ncatch (FormatException)\n{\n    // address is invalid\n}\n\nFurthermore, an address having a dot at the end, like user@company. is accepted by MailAddress as well.\nIf you really want to use a regex, here it is:\n(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t]\n)+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\n\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(\n?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \n\\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\0\n31]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\\n](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+\n(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:\n(?:\\r\\n)?[ \\t])*))*|(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z\n|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)\n?[ \\t])*)*\\<(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\\nr\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[\n \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)\n?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t]\n)*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[\n \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*\n)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t]\n)+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)\n*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+\n|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\n\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\n\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t\n]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031\n]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](\n?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?\n:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?\n:\\r\\n)?[ \\t])*))*\\>(?:(?:\\r\\n)?[ \\t])*)|(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?\n:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?\n[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)*:(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()<>@,;:\\\\\".\\[\\] \n\\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\n\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>\n\n@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"\n(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t]\n)*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\n\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?\n:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\n\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:[^()<>@,;:\\\\\".\\[\\] \\000-\n\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(\n?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)*\\<(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()<>@,;\n:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([\n^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\"\n.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\\n]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\\n[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\\nr\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \n\\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]\n|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()<>@,;:\\\\\".\\[\\] \\0\n00-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\\n.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,\n;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?\n:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*\n(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\n\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[\n^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]\n]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\>(?:(?:\\r\\n)?[ \\t])*)(?:,\\s*(\n?:(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\n\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(\n?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\n\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t\n])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t\n])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?\n:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\n\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:\n[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\\n]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)*\\<(?:(?:\\r\\n)\n?[ \\t])*(?:@(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"\n()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)\n?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>\n\n@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[\n \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,\n;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t]\n)*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\n\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?\n(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\n\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\n\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\n\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])\n*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])\n+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\\n.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z\n|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\>(?:(\n?:\\r\\n)?[ \\t])*))*)?;\\s*)\n    ",
        "votes": 809,
        "comentarios": [
            {
                "decripcion": "You'll find that the MailAddress class in .NET 4.0 is far better at validating email addresses than in previous versions.  I made some significant improvements to it.",
                "fecha": { "$date" : "2009-12-15T09:56:39Z" },
                "usuario": "Jeff Tucker",
                "usuario_id": 2120
            },
            {
                "decripcion": "I think it sort of... doesn't work... for simpler ids. a@b doesn't validate. ar@b.com matches only till ar@b , the .com is not matched. However, something like \"I am me\"@[10.10.10.10] does work! :)",
                "fecha": { "$date" : "2009-12-15T11:24:29Z" },
                "usuario": "Raze",
                "usuario_id": 2121
            },
            {
                "decripcion": "Be warned that these RFC compliant regex validators will let through a lot of email addresses that you probably wouldn't want to accept such as \"a<body/onload=alert('lol.com?'+document.cookies) @a.a>\" which is a valid email address in perl's Email::Valid (which uses that huge regex), and can be exploited for XSS rt.cpan.org/Public/Bug/Display.html?id=75650",
                "fecha": { "$date" : "2012-09-28T06:03:33Z" },
                "usuario": "Matthew Lock",
                "usuario_id": 2122
            },
            {
                "decripcion": "@MatthewLock: That is no worse than fake@not-a-real-domain.name.  You must not rely on email validation to prevent XSS.",
                "fecha": { "$date" : "2012-09-28T17:19:30Z" },
                "usuario": "SLaks",
                "usuario_id": 2123
            },
            {
                "decripcion": "@MatthewLock: No. You need to escape SQL queries (or, better yet, use parameters).  Sanitization is not a proper defense.",
                "fecha": { "$date" : "2016-03-02T14:49:38Z" },
                "usuario": "SLaks",
                "usuario_id": 2123
            }
        ],
        "usuario": "SLaks",
        "usuario_id": 2123
    },
    {
        "_id": 1209,
        "fecha": { "$date" : "2021-07-02T09:18:17Z" },
        "decripcion": "\nThis question is asked a lot, but I think you should step back and ask yourself why you want to validate email adresses syntactically? What is the benefit really?\n\nIt will not catch common typos.\nIt does not prevent people from entering invalid or made-up email addresses, or entering someone else's address for that matter.\n\nIf you want to validate that an email is correct, you have no choice than to send a confirmation email and have the user reply to that. In many cases you will have to send a confirmation mail anyway for security reasons or for ethical reasons (so you cannot e.g. sign someone up to a service against their will).\n    ",
        "votes": 577,
        "comentarios": [
            {
                "decripcion": "It might be worth checking that they entered something@something into the field in a client side validation just to catch simple mistakes - but in general you are right.",
                "fecha": { "$date" : "2009-08-25T16:25:38Z" },
                "usuario": "Martin Beckett",
                "usuario_id": 2124
            },
            {
                "decripcion": "@olavk: if someone enters a typo (eg: me@hotmail), they're obviously not going to get your confirmation email, and then where are they? They're not on your site any more and they're wondering why they couldn't sign up. Actually no they're not - they've completely forgotten about you. However, if you could just do a basic sanity check with a regex while they're still with you, then they can catch that error straight away and you've got a happy user.",
                "fecha": { "$date" : "2010-06-02T13:53:58Z" },
                "usuario": "nickf",
                "usuario_id": 554
            },
            {
                "decripcion": "@JacquesB: You make an excellent point. Just because it passes muster per the RFC doesn\u2019t mean it is really that user\u2019s address.  Otherwise all those president@whitehouse.gov addresses indicate a very netbusy commander-in-chief. :)",
                "fecha": { "$date" : "2010-11-07T20:09:44Z" },
                "usuario": "tchrist",
                "usuario_id": 2125
            },
            {
                "decripcion": "It doesn't have to be black or white. If the e-mail looks wrong, let the user know that. If the user still wants to proceed, let him. Don't force the user to conform to your regex, rather, use regex as a tool to help the user know that there might be a mistake.",
                "fecha": { "$date" : "2014-02-18T02:56:49Z" },
                "usuario": "ninjaneer",
                "usuario_id": 2126
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1210,
        "fecha": { "$date" : "2020-05-06T22:26:34Z" },
        "decripcion": "\nIt all depends on how accurate you want to be.  For my purposes, where I'm just trying to keep out things like bob @ aol.com (spaces in emails) or steve (no domain at all) or mary@aolcom (no period before .com), I use\n\n/^\\S+@\\S+\\.\\S+$/\n\n\nSure, it will match things that aren't valid email addresses, but it's a matter of getting common simple errors.\n\nThere are any number of changes that can be made to that regex (and some are in the comments for this answer), but it's simple, and easy to understand, and is a fine first attempt.\n    ",
        "votes": 442,
        "comentarios": [
            {
                "decripcion": "It does not match foobar@dk which is a valid and working email address (although probably most mail servers won't accept it or will add something.com.)",
                "fecha": { "$date" : "2008-10-14T19:30:13Z" },
                "usuario": "bortzmeyer",
                "usuario_id": 2127
            },
            {
                "decripcion": "@Richard:  . is included in \\S.",
                "fecha": { "$date" : "2009-12-17T18:48:17Z" },
                "usuario": "David Thornley",
                "usuario_id": 2128
            },
            {
                "decripcion": "JJJ: Yes, it will match a lot of crap.  It will match &$*#$(@$0(%))$#.)&*)(*$, too.  For me, I'm more concerned with catching the odd fumble-finger typo like mary@aolcom than I am complete garbage.  YMMV.",
                "fecha": { "$date" : "2012-10-16T16:03:16Z" },
                "usuario": "Andy Lester",
                "usuario_id": 2129
            },
            {
                "decripcion": "Just to control for @ signs: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/ jsfiddle.net/b9chris/mXB96",
                "fecha": { "$date" : "2014-08-04T21:32:18Z" },
                "usuario": "Chris Moschini",
                "usuario_id": 487
            },
            {
                "decripcion": "And another common typo: two consecutive dots in domain name or a comma instead of a dot. ^[^\\s@]+@([^\\s@.,]+\\.)+[^\\s@.,]{2,}$",
                "fecha": { "$date" : "2015-09-24T09:12:51Z" },
                "usuario": "Piskvor left the building",
                "usuario_id": 2130
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1211,
        "fecha": { "$date" : "2012-03-17T22:28:16Z" },
        "decripcion": "\nIt depends on what you mean by best:\nIf you're talking about catching every valid email address use the following:\n\n(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t]\n)+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\n\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(\n?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \n\\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\0\n31]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\\n](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+\n(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:\n(?:\\r\\n)?[ \\t])*))*|(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z\n|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)\n?[ \\t])*)*\\<(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\\nr\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[\n \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)\n?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t]\n)*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[\n \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*\n)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t]\n)+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)\n*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+\n|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\n\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\n\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t\n]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031\n]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](\n?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?\n:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?\n:\\r\\n)?[ \\t])*))*\\>(?:(?:\\r\\n)?[ \\t])*)|(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?\n:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?\n[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)*:(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()<>@,;:\\\\\".\\[\\] \n\\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\n\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>\n@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"\n(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t]\n)*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\n\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?\n:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\n\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:[^()<>@,;:\\\\\".\\[\\] \\000-\n\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(\n?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)*\\<(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()<>@,;\n:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([\n^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\"\n.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\\n]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\\n[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\\nr\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \n\\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]\n|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()<>@,;:\\\\\".\\[\\] \\0\n00-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\\n.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,\n;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?\n:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*\n(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\n\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[\n^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]\n]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\>(?:(?:\\r\\n)?[ \\t])*)(?:,\\s*(\n?:(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\n\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(\n?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\n\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t\n])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t\n])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?\n:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\n\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:\n[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\\n]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)*\\<(?:(?:\\r\\n)\n?[ \\t])*(?:@(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"\n()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)\n?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>\n@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[\n \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,\n;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t]\n)*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\n\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?\n(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\n\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\n\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\n\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])\n*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])\n+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\\n.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z\n|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\>(?:(\n?:\\r\\n)?[ \\t])*))*)?;\\s*)\n\n\n(http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html)\nIf you're looking for something simpler but that will catch most valid email addresses try something like: \n\n\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n\n\nEDIT:\nFrom the link:\n\n\n  This regular expression will only validate addresses that have had any comments stripped and replaced with whitespace (this is done by the module).\n\n    ",
        "votes": 356,
        "comentarios": [
            {
                "decripcion": "Can you give me an example of some email address that wrongly passes through the second one, but is caught by the longer regex?",
                "fecha": { "$date" : "2010-05-15T18:32:09Z" },
                "usuario": "Lazer",
                "usuario_id": 2131
            },
            {
                "decripcion": "Much though I did once love it, that\u2019s an RFC 822 validator, not an RFC 5322 one.",
                "fecha": { "$date" : "2010-11-07T20:17:30Z" },
                "usuario": "tchrist",
                "usuario_id": 2125
            },
            {
                "decripcion": "@Lazer in..valid@example.com would be a simple example.  You aren't allowed to have two consecutive unquoted dots in the local-part.",
                "fecha": { "$date" : "2011-12-06T18:04:17Z" },
                "usuario": "Randal Schwartz",
                "usuario_id": 2132
            },
            {
                "decripcion": "@Mikhail perl but you shouldn't actually use it.",
                "fecha": { "$date" : "2013-01-08T18:48:10Z" },
                "usuario": "Good Person",
                "usuario_id": 2133
            },
            {
                "decripcion": "@RSC that is a FQDN which is fine",
                "fecha": { "$date" : "2014-05-28T23:16:50Z" },
                "usuario": "Good Person",
                "usuario_id": 2133
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1212,
        "fecha": { "$date" : "2013-09-24T15:52:21Z" },
        "decripcion": "\nPer the W3C HTML5 spec:\n\n^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\n\n\nContext:\n\n\n  A valid e-mail address is a string that matches the ABNF production [\u2026].\n  \n  Note: This requirement is a willful violation of RFC 5322, which defines a syntax for e-mail addresses that is simultaneously too strict (before the \u201c@\u201d character), too vague (after the \u201c@\u201d character), and too lax (allowing comments, whitespace characters, and quoted strings in manners unfamiliar to most users) to be of practical use here.\n  \n  The following JavaScript- and Perl-compatible regular expression is an implementation of the above definition.\n  \n  /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n\n  \n  \n\n    ",
        "votes": 294,
        "comentarios": [
            {
                "decripcion": "This is interesting. It's a violation of RFC, but a willful one and it makes sesne. Real world example: gmail ignores dots in the part before @, so if your email is test@gmail.com you can send emails to test.@gmail.com or test....@gmail.com, both of those addresses are invalid according to RFC, but valid in real world.",
                "fecha": { "$date" : "2013-01-16T05:04:10Z" },
                "usuario": "valentinas",
                "usuario_id": 2134
            },
            {
                "decripcion": "I think last part should be '+' instead of '*': ^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)+$",
                "fecha": { "$date" : "2013-01-21T12:12:01Z" },
                "usuario": "mmmmmm",
                "usuario_id": 2135
            },
            {
                "decripcion": "@mmmmmm john.doe@localhost is valid. For sure, in a real world application (i.e. a community), I'd like your suggest to replace * by +",
                "fecha": { "$date" : "2013-02-01T10:03:08Z" },
                "usuario": "rabudde",
                "usuario_id": 2136
            },
            {
                "decripcion": "@valentinas Actually, the RFC does not preclude these local parts, but they have to be quoted. \"test....\"@gmail.com is perfectly valid according to the RFC and semantically equivalent to test....@gmail.com.",
                "fecha": { "$date" : "2014-11-17T09:01:08Z" },
                "usuario": "Rinke",
                "usuario_id": 2137
            },
            {
                "decripcion": "I get an error while trying to send email using python through my company's relay if I try to send to an address with a .@ or ..@. Actually that is also the case with a _@. I rather remove those before sending than trusting that the recipient will do it.",
                "fecha": { "$date" : "2016-02-11T11:31:14Z" },
                "usuario": "ndvo",
                "usuario_id": 2138
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1213,
        "fecha": { "$date" : "2014-09-03T13:35:34Z" },
        "decripcion": "\n[UPDATED] I've collated everything I know about email address validation here: http://isemail.info, which now not only validates but also diagnoses problems with email addresses. I agree with many of the comments here that validation is only part of the answer; see my essay at http://isemail.info/about.\n\nis_email() remains, as far as I know, the only validator that will tell you definitively whether a given string is a valid email address or not. I've upload a new version at http://isemail.info/\n\nI collated test cases from Cal Henderson, Dave Child, Phil Haack, Doug Lovell, RFC5322 and RFC 3696. 275 test addresses in all. I ran all these tests against all the free validators I could find.\n\nI'll try to keep this page up-to-date as people enhance their validators. Thanks to Cal, Michael, Dave, Paul and Phil for their help and co-operation in compiling these tests and constructive criticism of my own validator.\n\nPeople should be aware of the errata against RFC 3696 in particular. Three of the canonical examples are in fact invalid addresses. And the maximum length of an address is 254 or 256 characters, not 320.\n    ",
        "votes": 292,
        "comentarios": [
            {
                "decripcion": "This validator also seems correct. [...time passes...] Hm, looks like it is just RFC 5322, not 3693 or errata thereto.",
                "fecha": { "$date" : "2010-11-07T20:11:46Z" },
                "usuario": "tchrist",
                "usuario_id": 2125
            },
            {
                "decripcion": "Very nice.  Here we not only get a nice essay, we get a validation tester as well as a library to download.  Nice answer!",
                "fecha": { "$date" : "2013-04-09T20:49:29Z" },
                "usuario": "bgmCoder",
                "usuario_id": 1166
            },
            {
                "decripcion": "Your validator doesn't support punycode (RFC 3492). name@\u00f6\u00e4\u00fc.at can be a valid address. (it translates to name@xn--4ca9at.at)",
                "fecha": { "$date" : "2015-03-25T07:28:30Z" },
                "usuario": "Josef says Reinstate Monica",
                "usuario_id": 2139
            },
            {
                "decripcion": "Hi @Josef. You should try to validate name@xn--4ca9at.at since this code is about validation, not interpretation. If you'd like to add a punycode translator then I'm happy to accept a pull request at github.com/dominicsayers/isemail",
                "fecha": { "$date" : "2015-04-27T18:19:17Z" },
                "usuario": "Dominic Sayers",
                "usuario_id": 2117
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1214,
        "fecha": { "$date" : "2013-07-30T02:21:37Z" },
        "decripcion": "\nIt\u2019s easy in Perl 5.10 or newer:\n\n/(?(DEFINE)\n   (?<address>         (?&mailbox) | (?&group))\n   (?<mailbox>         (?&name_addr) | (?&addr_spec))\n   (?<name_addr>       (?&display_name)? (?&angle_addr))\n   (?<angle_addr>      (?&CFWS)? < (?&addr_spec) > (?&CFWS)?)\n   (?<group>           (?&display_name) : (?:(?&mailbox_list) | (?&CFWS))? ;\n                                          (?&CFWS)?)\n   (?<display_name>    (?&phrase))\n   (?<mailbox_list>    (?&mailbox) (?: , (?&mailbox))*)\n\n   (?<addr_spec>       (?&local_part) \\@ (?&domain))\n   (?<local_part>      (?&dot_atom) | (?&quoted_string))\n   (?<domain>          (?&dot_atom) | (?&domain_literal))\n   (?<domain_literal>  (?&CFWS)? \\[ (?: (?&FWS)? (?&dcontent))* (?&FWS)?\n                                 \\] (?&CFWS)?)\n   (?<dcontent>        (?&dtext) | (?&quoted_pair))\n   (?<dtext>           (?&NO_WS_CTL) | [\\x21-\\x5a\\x5e-\\x7e])\n\n   (?<atext>           (?&ALPHA) | (?&DIGIT) | [!#\\$%&'*+-/=?^_`{|}~])\n   (?<atom>            (?&CFWS)? (?&atext)+ (?&CFWS)?)\n   (?<dot_atom>        (?&CFWS)? (?&dot_atom_text) (?&CFWS)?)\n   (?<dot_atom_text>   (?&atext)+ (?: \\. (?&atext)+)*)\n\n   (?<text>            [\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])\n   (?<quoted_pair>     \\\\ (?&text))\n\n   (?<qtext>           (?&NO_WS_CTL) | [\\x21\\x23-\\x5b\\x5d-\\x7e])\n   (?<qcontent>        (?&qtext) | (?&quoted_pair))\n   (?<quoted_string>   (?&CFWS)? (?&DQUOTE) (?:(?&FWS)? (?&qcontent))*\n                        (?&FWS)? (?&DQUOTE) (?&CFWS)?)\n\n   (?<word>            (?&atom) | (?&quoted_string))\n   (?<phrase>          (?&word)+)\n\n   # Folding white space\n   (?<FWS>             (?: (?&WSP)* (?&CRLF))? (?&WSP)+)\n   (?<ctext>           (?&NO_WS_CTL) | [\\x21-\\x27\\x2a-\\x5b\\x5d-\\x7e])\n   (?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment))\n   (?<comment>         \\( (?: (?&FWS)? (?&ccontent))* (?&FWS)? \\) )\n   (?<CFWS>            (?: (?&FWS)? (?&comment))*\n                       (?: (?:(?&FWS)? (?&comment)) | (?&FWS)))\n\n   # No whitespace control\n   (?<NO_WS_CTL>       [\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f])\n\n   (?<ALPHA>           [A-Za-z])\n   (?<DIGIT>           [0-9])\n   (?<CRLF>            \\x0d \\x0a)\n   (?<DQUOTE>          \")\n   (?<WSP>             [\\x20\\x09])\n )\n\n (?&address)/x\n\n    ",
        "votes": 203,
        "comentarios": [
            {
                "decripcion": "Would love to see this in Python",
                "fecha": { "$date" : "2011-12-15T16:36:13Z" },
                "usuario": "tdc",
                "usuario_id": 2140
            },
            {
                "decripcion": "I think that only a subset of the addrspec part is really relevant to the question. Accepting more than that and forwarding it though some other part of the system that is not ready to accept full RFC5822 addresses is like shooting is your own foot.",
                "fecha": { "$date" : "2011-12-17T13:53:40Z" },
                "usuario": "dolmen",
                "usuario_id": 2141
            },
            {
                "decripcion": "Great (+1) but technically it's not a regex of course... (which would be impossible since the grammar is not regular).",
                "fecha": { "$date" : "2013-01-03T21:41:16Z" },
                "usuario": "Rinke",
                "usuario_id": 2137
            },
            {
                "decripcion": "regexes stopped being regular some time ago. It is a valid Perl 'regex' though!",
                "fecha": { "$date" : "2014-03-10T15:00:42Z" },
                "usuario": "rjh",
                "usuario_id": 2142
            },
            {
                "decripcion": "I set up a test for this regex on IDEone: ideone.com/2XFecH However, it doesn't fair \"perfectly.\"  Would anyone care to chime in?  Am I missing something?",
                "fecha": { "$date" : "2014-07-30T17:56:07Z" },
                "usuario": "Mike",
                "usuario_id": 1225
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1215,
        "fecha": { "$date" : "2014-10-27T23:32:59Z" },
        "decripcion": "\nI use\n\n^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n\n\nWhich is the one used in ASP.NET by the RegularExpressionValidator.\n    ",
        "votes": 172,
        "comentarios": [
            {
                "decripcion": "Boo! My (ill-advised) address of !@mydomain.net is rejected.",
                "fecha": { "$date" : "2011-01-19T21:35:17Z" },
                "usuario": "Phrogz",
                "usuario_id": 2143
            },
            {
                "decripcion": "According to this page data.iana.org/TLD/tlds-alpha-by-domain.txt there is no domains with just a single character in top level e.g. \"something.c\", \"something.a\", here is version that support at least 2 characters: \"something.pl\", \"something.us\": ^\\\\w+([-+.']\\\\w+)*@\\\\w+([-.]\\\\w+)*\\\\.\\\\w{2,}([-.]\\\\w+)*$",
                "fecha": { "$date" : "2015-11-19T12:53:37Z" },
                "usuario": "Tomasz Szulc",
                "usuario_id": 2144
            },
            {
                "decripcion": "@Wayne Whitty. You have hit upon the primary issue of whether to cater for the vast majority of addresses, or ALL, including ones that nobody would use, except to test email validation.",
                "fecha": { "$date" : "2015-11-28T03:13:13Z" },
                "usuario": "Patanjali",
                "usuario_id": 2145
            },
            {
                "decripcion": "We want explanation about this :) . People come here to see Why it is the way it is. Please consider Regex explanation too! Not everyone is advanced enough to know what you wrote there without explanation. Thanks",
                "fecha": { "$date" : "2015-12-06T10:47:46Z" },
                "usuario": "Pratik",
                "usuario_id": 2146
            },
            {
                "decripcion": "this fails on simon-@hotmail.com which is in fact valid (a customer of ours had a similar address)`",
                "fecha": { "$date" : "2017-02-10T00:43:31Z" },
                "usuario": "Simon_Weaver",
                "usuario_id": 2147
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1216,
        "fecha": { "$date" : "2021-07-21T09:50:16Z" },
        "decripcion": "\nI don't know about best, but this one is at least correct, as long as the addresses have their comments stripped and replaced with white space.\nSeriously. You should use an already-written library for validating emails. The best way is probably to just send a verification e-mail to that address.\n    ",
        "votes": 145,
        "comentarios": [
            {
                "decripcion": "As far as I know, some libraries are wrong, too. I vaguely remember that PHP PEAR had such a bug.",
                "fecha": { "$date" : "2008-10-14T14:34:24Z" },
                "usuario": "bortzmeyer",
                "usuario_id": 2127
            },
            {
                "decripcion": "That page also has a disclaimer at the bottom about a couple of things from the spec. that the regexp does not support.",
                "fecha": { "$date" : "2008-10-14T14:37:40Z" },
                "usuario": "Chris Vest",
                "usuario_id": 2148
            },
            {
                "decripcion": "That\u2019s an RFC 822 spec, not an RFC 5322 spec.",
                "fecha": { "$date" : "2010-11-07T20:12:48Z" },
                "usuario": "tchrist",
                "usuario_id": 2125
            },
            {
                "decripcion": "Ultimately, he's right in that the only way to truly validate an email address is to send an email to it and await a reply.",
                "fecha": { "$date" : "2011-10-26T19:43:24Z" },
                "usuario": "Blazemonger",
                "usuario_id": 2149
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1217,
        "fecha": { "$date" : "2021-07-21T09:44:37Z" },
        "decripcion": "\nQuick answer\nUse the following regex for input validation:\n([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)+\nAddresses matched by this regex:\n\nhave a local part (i.e. the part before the @-sign) that is strictly compliant with RFC 5321/5322,\nhave a domain part (i.e. the part after the @-sign) that is a host name with at least two labels, each of which is at most 63 characters long.\n\nThe second constraint is a restriction on RFC 5321/5322.\nElaborate answer\nUsing a regular expression that recognizes email addresses could be useful in various situations: for example to scan for email addresses in a document, to validate user input, or as an integrity constraint on a data repository.\nIt should however be noted that if you want to find out if the address actually refers to an existing mailbox, there's no substitute for sending a message to the address. If you only want to check if an address is grammatically correct then you could use a regular expression, but note that \"\"@[] is a grammatically correct email address that certainly doesn't refer to an existing mailbox.\nThe syntax of email addresses has been defined in various RFCs, most notably RFC 822 and RFC 5322. RFC 822 should be seen as the \"original\" standard and RFC 5322 as the latest standard. The syntax defined in RFC 822 is the most lenient and subsequent standards have restricted the syntax further and further, where newer systems or services should recognize obsolete syntax, but never produce it.\nIn this answer I\u2019ll take \u201cemail address\u201d to mean addr-spec as defined in the RFCs (i.e. jdoe@example.org, but not \"John Doe\"<jdoe@example.org>, nor some-group:jdoe@example.org,mrx@exampel.org;).\nThere's one problem with translating the RFC syntaxes into regexes: the syntaxes are not regular! This is because they allow for optional comments in email addresses that can be infinitely nested, while infinite nesting can't be described by a regular expression. To scan for or validate addresses containing comments you need a parser or more powerful expressions. (Note that languages like Perl have constructs to describe context free grammars in a regex-like way.) In this answer I'll disregard comments and only consider proper regular expressions.\nThe RFCs define syntaxes for email messages, not for email addresses as such. Addresses may appear in various header fields and this is where they are primarily defined. When they appear in header fields addresses may contain (between lexical tokens) whitespace, comments and even linebreaks. Semantically this has no significance however. By removing this whitespace, etc. from an address you get a semantically equivalent canonical representation. Thus, the canonical representation of first. last (comment) @   [3.5.7.9] is first.last@[3.5.7.9].\nDifferent syntaxes should be used for different purposes. If you want to scan for email addresses in a (possibly very old) document it may be a good idea to use the syntax as defined in RFC 822. On the other hand, if you want to validate user input you may want to use the syntax as defined in RFC 5322, probably only accepting canonical representations. You should decide which syntax applies to your specific case.\nI use POSIX \"extended\" regular expressions in this answer, assuming an ASCII compatible character set.\nRFC 822\nI arrived at the following regular expression. I invite everyone to try and break it. If you find any false positives or false negatives, please post them in a comment and I'll try to fix the expression as soon as possible.\n([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*\")(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*\"))*@([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*])(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*]))*\nI believe it's fully compliant with RFC 822 including the errata. It only recognizes email addresses in their canonical form. For a regex that recognizes (folding) whitespace see the derivation below.\nThe derivation shows how I arrived at the expression. I list all the relevant grammar rules from the RFC exactly as they appear, followed by the corresponding regex. Where an erratum has been published I give a separate expression for the corrected grammar rule (marked \"erratum\") and use the updated version as a subexpression in subsequent regular expressions.\nAs stated in paragraph 3.1.4. of RFC 822 optional linear white space may be inserted between lexical tokens. Where applicable I've expanded the expressions to accommodate this rule and marked the result with \"opt-lwsp\".\nCHAR        =  <any ASCII character>\n            =~ .\n\nCTL         =  <any ASCII control character and DEL>\n            =~ [\\x00-\\x1F\\x7F]\n\nCR          =  <ASCII CR, carriage return>\n            =~ \\r\n\nLF          =  <ASCII LF, linefeed>\n            =~ \\n\n\nSPACE       =  <ASCII SP, space>\n            =~  \n\nHTAB        =  <ASCII HT, horizontal-tab>\n            =~ \\t\n\n<\">         =  <ASCII quote mark>\n            =~ \"\n\nCRLF        =  CR LF\n            =~ \\r\\n\n\nLWSP-char   =  SPACE / HTAB\n            =~ [ \\t]\n\nlinear-white-space =  1*([CRLF] LWSP-char)\n                   =~ ((\\r\\n)?[ \\t])+\n\nspecials    =  \"(\" / \")\" / \"<\" / \">\" / \"@\" /  \",\" / \";\" / \":\" / \"\\\" / <\"> /  \".\" / \"[\" / \"]\"\n            =~ [][()<>@,;:\\\\\".]\n\nquoted-pair =  \"\\\" CHAR\n            =~ \\\\.\n\nqtext       =  <any CHAR excepting <\">, \"\\\" & CR, and including linear-white-space>\n            =~ [^\"\\\\\\r]|((\\r\\n)?[ \\t])+\n\ndtext       =  <any CHAR excluding \"[\", \"]\", \"\\\" & CR, & including linear-white-space>\n            =~ [^][\\\\\\r]|((\\r\\n)?[ \\t])+\n\nquoted-string  =  <\"> *(qtext|quoted-pair) <\">\n               =~ \"([^\"\\\\\\r]|((\\r\\n)?[ \\t])|\\\\.)*\"\n(erratum)      =~ \"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\"\n\ndomain-literal =  \"[\" *(dtext|quoted-pair) \"]\"\n               =~ \\[([^][\\\\\\r]|((\\r\\n)?[ \\t])|\\\\.)*]\n(erratum)      =~ \\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]\n\natom        =  1*<any CHAR except specials, SPACE and CTLs>\n            =~ [^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+\n\nword        =  atom / quoted-string\n            =~ [^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\"\n\ndomain-ref  =  atom\n\nsub-domain  =  domain-ref / domain-literal\n            =~ [^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]\n\nlocal-part  =  word *(\".\" word)\n            =~ ([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\")(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\"))*\n(opt-lwsp)  =~ ([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\")(((\\r\\n)?[ \\t])*\\.((\\r\\n)?[ \\t])*([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\"))*\n\ndomain      =  sub-domain *(\".\" sub-domain)\n            =~ ([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n(opt-lwsp)  =~ ([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(((\\r\\n)?[ \\t])*\\.((\\r\\n)?[ \\t])*([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n\naddr-spec   =  local-part \"@\" domain\n            =~ ([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\")(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\"))*@([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n(opt-lwsp)  =~ ([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\")((\\r\\n)?[ \\t])*(\\.((\\r\\n)?[ \\t])*([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*\")((\\r\\n)?[ \\t])*)*@((\\r\\n)?[ \\t])*([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(((\\r\\n)?[ \\t])*\\.((\\r\\n)?[ \\t])*([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n(canonical) =~ ([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*\")(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*\"))*@([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*])(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*]))*\n\nRFC 5322\nI arrived at the following regular expression. I invite everyone to try and break it. If you find any false positives or false negatives, please post them in a comment and I'll try to fix the expression as soon as possible.\n([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\\[[\\t -Z^-~]*])\nI believe it's fully compliant with RFC 5322 including the errata. It only recognizes email addresses in their canonical form. For a regex that recognizes (folding) whitespace see the derivation below.\nThe derivation shows how I arrived at the expression. I list all the relevant grammar rules from the RFC exactly as they appear, followed by the corresponding regex. For rules that include semantically irrelevant (folding) whitespace, I give a separate regex marked \"(normalized)\" that doesn't accept this whitespace.\nI ignored all the \"obs-\" rules from the RFC. This means that the regexes only match email addresses that are strictly RFC 5322 compliant. If you have to match \"old\" addresses (as the looser grammar including the \"obs-\" rules does), you can use one of the RFC 822 regexes from the previous paragraph.\nVCHAR           =   %x21-7E\n                =~  [!-~]\n\nALPHA           =   %x41-5A / %x61-7A\n                =~  [A-Za-z]\n\nDIGIT           =   %x30-39\n                =~  [0-9]\n\nHTAB            =   %x09\n                =~  \\t\n\nCR              =   %x0D\n                =~  \\r\n\nLF              =   %x0A\n                =~  \\n\n\nSP              =   %x20\n                =~  \n\nDQUOTE          =   %x22\n                =~  \"\n\nCRLF            =   CR LF\n                =~  \\r\\n\n\nWSP             =   SP / HTAB\n                =~  [\\t ]\n\nquoted-pair     =   \"\\\" (VCHAR / WSP)\n                =~  \\\\[\\t -~]\n\nFWS             =   ([*WSP CRLF] 1*WSP)\n                =~  ([\\t ]*\\r\\n)?[\\t ]+\n\nctext           =   %d33-39 / %d42-91 / %d93-126\n                =~  []!-'*-[^-~]\n\n(\"comment\" is left out in the regex)\nccontent        =   ctext / quoted-pair / comment\n                =~  []!-'*-[^-~]|(\\\\[\\t -~])\n\n(not regular)\ncomment         =   \"(\" *([FWS] ccontent) [FWS] \")\"\n\n(is equivalent to FWS when leaving out comments)\nCFWS            =   (1*([FWS] comment) [FWS]) / FWS\n                =~  ([\\t ]*\\r\\n)?[\\t ]+\n\natext           =   ALPHA / DIGIT / \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \"/\" / \"=\" / \"?\" / \"^\" / \"_\" / \"`\" / \"{\" / \"|\" / \"}\" / \"~\"\n                =~  [-!#-'*+/-9=?A-Z^-~]\n\ndot-atom-text   =   1*atext *(\".\" 1*atext)\n                =~  [-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*\n\ndot-atom        =   [CFWS] dot-atom-text [CFWS]\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?[-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  [-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*\n\nqtext           =   %d33 / %d35-91 / %d93-126\n                =~  []!#-[^-~]\n\nqcontent        =   qtext / quoted-pair\n                =~  []!#-[^-~]|(\\\\[\\t -~])\n\n(erratum)\nquoted-string   =   [CFWS] DQUOTE ((1*([FWS] qcontent) [FWS]) / FWS) DQUOTE [CFWS]\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?\"(((([\\t ]*\\r\\n)?[\\t ]+)?([]!#-[^-~]|(\\\\[\\t -~])))+(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?)\"(([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  \"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\"\n\ndtext           =   %d33-90 / %d94-126\n                =~  [!-Z^-~]\n\ndomain-literal  =   [CFWS] \"[\" *([FWS] dtext) [FWS] \"]\" [CFWS]\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?\\[((([\\t ]*\\r\\n)?[\\t ]+)?[!-Z^-~])*(([\\t ]*\\r\\n)?[\\t ]+)?](([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  \\[[\\t -Z^-~]*]\n\nlocal-part      =   dot-atom / quoted-string\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?[-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?\"(((([\\t ]*\\r\\n)?[\\t ]+)?([]!#-[^-~]|(\\\\[\\t -~])))+(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?)\"(([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  [-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\"\n\ndomain          =   dot-atom / domain-literal\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?[-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?\\[((([\\t ]*\\r\\n)?[\\t ]+)?[!-Z^-~])*(([\\t ]*\\r\\n)?[\\t ]+)?](([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  [-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\\[[\\t -Z^-~]*]\n\naddr-spec       =   local-part \"@\" domain\n                =~  ((([\\t ]*\\r\\n)?[\\t ]+)?[-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?\"(((([\\t ]*\\r\\n)?[\\t ]+)?([]!#-[^-~]|(\\\\[\\t -~])))+(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?)\"(([\\t ]*\\r\\n)?[\\t ]+)?)@((([\\t ]*\\r\\n)?[\\t ]+)?[-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?\\[((([\\t ]*\\r\\n)?[\\t ]+)?[!-Z^-~])*(([\\t ]*\\r\\n)?[\\t ]+)?](([\\t ]*\\r\\n)?[\\t ]+)?)\n(normalized)    =~  ([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\\[[\\t -Z^-~]*])\n\nNote that some sources (notably W3C) claim that RFC 5322 is too strict on the local part (i.e. the part before the @-sign). This is because \"..\", \"a..b\" and \"a.\" are not valid dot-atoms, while they may be used as mailbox names. The RFC, however, does allow for local parts like these, except that they have to be quoted. So instead of a..b@example.net you should write \"a..b\"@example.net, which is semantically equivalent.\nFurther restrictions\nSMTP (as defined in RFC 5321) further restricts the set of valid email addresses (or actually: mailbox names). It seems reasonable to impose this stricter grammar, so that the matched email address can actually be used to send an email.\nRFC 5321 basically leaves alone the \"local\" part (i.e. the part before the @-sign), but is stricter on the domain part (i.e. the part after the @-sign). It allows only host names in place of dot-atoms and address literals in place of domain literals.\nThe grammar presented in RFC 5321 is too lenient when it comes to both host names and IP addresses. I took the liberty of \"correcting\" the rules in question, using this draft and RFC 1034 as guidelines. Here's the resulting regex.\n([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@([0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)*|\\[((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)|(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+)])\nNote that depending on the use case you may not want to allow for a \"General-address-literal\" in your regex. Also note that I used a negative lookahead (?!IPv6:) in the final regex to prevent the \"General-address-literal\" part to match malformed IPv6 addresses. Some regex processors don't support negative lookahead. Remove the substring |(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+ from the regex if you want to take the whole \"General-address-literal\" part out.\nHere's the derivation:\nLet-dig         =   ALPHA / DIGIT\n                =~  [0-9A-Za-z]\n\nLdh-str         =   *( ALPHA / DIGIT / \"-\" ) Let-dig\n                =~  [0-9A-Za-z-]*[0-9A-Za-z]\n\n(regex is updated to make sure sub-domains are max. 63 charactes long - RFC 1034 section 3.5)\nsub-domain      =   Let-dig [Ldh-str]\n                =~  [0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?\n\nDomain          =   sub-domain *(\".\" sub-domain)\n                =~  [0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)*\n\nSnum            =   1*3DIGIT\n                =~  [0-9]{1,3}\n\n(suggested replacement for \"Snum\")\nip4-octet       =   DIGIT / %x31-39 DIGIT / \"1\" 2DIGIT / \"2\" %x30-34 DIGIT / \"25\" %x30-35\n                =~  25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9]\n\nIPv4-address-literal    =   Snum 3(\".\"  Snum)\n                        =~  [0-9]{1,3}(\\.[0-9]{1,3}){3}\n\n(suggested replacement for \"IPv4-address-literal\")\nip4-address     =   ip4-octet 3(\".\" ip4-octet)\n                =~  (25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}\n\n(suggested replacement for \"IPv6-hex\")\nip6-h16         =   \"0\" / ( (%x49-57 / %x65-70 /%x97-102) 0*3(%x48-57 / %x65-70 /%x97-102) )\n                =~  0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}\n\n(not from RFC)\nls32            =   ip6-h16 \":\" ip6-h16 / ip4-address\n                =~  (0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}\n\n(suggested replacement of \"IPv6-addr\")\nip6-address     =                                      6(ip6-h16 \":\") ls32\n                    /                             \"::\" 5(ip6-h16 \":\") ls32\n                    / [                 ip6-h16 ] \"::\" 4(ip6-h16 \":\") ls32\n                    / [ *1(ip6-h16 \":\") ip6-h16 ] \"::\" 3(ip6-h16 \":\") ls32\n                    / [ *2(ip6-h16 \":\") ip6-h16 ] \"::\" 2(ip6-h16 \":\") ls32\n                    / [ *3(ip6-h16 \":\") ip6-h16 ] \"::\"   ip6-h16 \":\"  ls32\n                    / [ *4(ip6-h16 \":\") ip6-h16 ] \"::\"                ls32\n                    / [ *5(ip6-h16 \":\") ip6-h16 ] \"::\"   ip6-h16\n                    / [ *6(ip6-h16 \":\") ip6-h16 ] \"::\"\n                =~  (((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::\n\nIPv6-address-literal    =   \"IPv6:\" ip6-address\n                        =~  IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)\n\nStandardized-tag        =   Ldh-str\n                        =~  [0-9A-Za-z-]*[0-9A-Za-z]\n\ndcontent        =   %d33-90 / %d94-126\n                =~  [!-Z^-~]\n\nGeneral-address-literal =   Standardized-tag \":\" 1*dcontent\n                        =~  [0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+\n\naddress-literal =   \"[\" ( IPv4-address-literal / IPv6-address-literal / General-address-literal ) \"]\"\n                =~  \\[((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)|(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+)]\n\nMailbox         =   Local-part \"@\" ( Domain / address-literal )\n                =~  ([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@([0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)*|\\[((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)|(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+)])\n\nUser input validation\nA common use case is user input validation, for example on an html form. In that case it's usually reasonable to preclude address-literals and to require at least two labels in the hostname. Taking the improved RFC 5321 regex from the previous section as a basis, the resulting expression would be:\n([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)+\nI do not recommend restricting the local part further, e.g. by precluding quoted strings, since we don't know what kind of mailbox names some hosts allow (like \"a..b\"@example.net or even \"a b\"@example.net).\nI also do not recommend explicitly validating against a list of literal top-level domains or even imposing length-constraints (remember how \".museum\" invalidated [a-z]{2,4}), but if you must:\n([-!#-'*+/-9=?A-Z^-~]+(\\.[-!#-'*+/-9=?A-Z^-~]+)*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@([0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?\\.)*(net|org|com|info|etc...)\nMake sure to keep your regex up-to-date if you decide to go down the path of explicit top-level domain validation.\nFurther considerations\nWhen only accepting host names in the domain part (after the @-sign), the regexes above accept only labels with at most 63 characters, as they should. However, they don't enforce the fact that the entire host name must be at most 253 characters long (including the dots). Although this constraint is strictly speaking still regular, it's not feasible to make a regex that incorporates this rule.\nAnother consideration, especially when using the regexes for input validation, is feedback to the user. If a user enters an incorrect address, it would be nice to give a little more feedback than a simple \"syntactically incorrect address\". With \"vanilla\" regexes this is not possible.\nThese two considerations could be addressed by parsing the address. The extra length constraint on host names could in some cases also be addressed by using an extra regex that checks it, and matching the address against both expressions.\nNone of the regexes in this answer are optimized for performance. If performance is an issue, you should see if (and how) the regex of your choice can be optimized.\n    ",
        "votes": 116,
        "comentarios": [
            {
                "decripcion": "RFC 6532 updates 5322 to allow and include full, clean UTF-8. Additional details here.",
                "fecha": { "$date" : "2015-06-26T17:30:37Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "According to wikipedia seems that the local part, when dotted, has a limitation of 64 chars per part, and also the RFC 5322 refers to the dotted local part to be interpretted with the restrictions of the domains. For example arbitrary-long-email-address-should-be-invalid-arbitrary-long-email-address-should-be-invalid.and-the-second-group-also-should-not-be-so-long-and-the-second-group-also-should-not-be-so-long@example.com should not validate. I suggest changing the \"+\" signs in the first group (name before the optional dot) and in the second group (name after the following dots) to {1,64}",
                "fecha": { "$date" : "2017-05-22T00:35:07Z" },
                "usuario": "Xavi Montero",
                "usuario_id": 2150
            },
            {
                "decripcion": "As the comments are limited in size, here is the resulting regex I plan to use, which is the one at the beginning of this answer, plus limitting the size in the local part, plus adding a back-slash prior to the \"/\" symbol as required by PHP and also in regex101.com: In PHP I use: $emailRegex = '/^([-!#-\\'*+\\/-9=?A-Z^-~]{1,64}(\\.[-!#-\\'*+\\/-9=?A-Z^-~]{1,64})*|\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\")@[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)+$/';",
                "fecha": { "$date" : "2017-05-22T00:39:04Z" },
                "usuario": "Xavi Montero",
                "usuario_id": 2150
            },
            {
                "decripcion": "CAUTION: For some reason, StackOverflow adds hidden characters when copying from the rendered markdown. Copy it into the regex101.com and you'll see black dots there. You have to remove them and correct the string... Maybe if integrated in the answer, there they are correctly copiable. Sorry for the inconvenience. I don't want to add a new answer as this one is the proper one. Also I don't want to directly edit unless the community thinks this should be integrated into it.",
                "fecha": { "$date" : "2017-05-22T00:48:11Z" },
                "usuario": "Xavi Montero",
                "usuario_id": 2150
            },
            {
                "decripcion": "@XaviMontero Thaks for contributing Xavi! Do you have a reference to the RFC stating the 64 character limit on local part labels? If so, I would gladly adjust the answer.",
                "fecha": { "$date" : "2017-05-22T11:21:26Z" },
                "usuario": "Rinke",
                "usuario_id": 2137
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1218,
        "fecha": { "$date" : "2020-06-16T14:57:45Z" },
        "decripcion": "\nThe email addresses I want to validate are going to be used by an ASP.NET web application using the System.Net.Mail namespace to send emails to a list of people.\n\nSo, rather than using some very complex regular expression, I just try to create a MailAddress instance from the address. The MailAddress constructor will throw an exception if the address is not formed properly. This way, I know I can at least get the email out of the door. Of course this is server-side validation, but at a minimum you need that anyway.\n\nprotected void emailValidator_ServerValidate(object source, ServerValidateEventArgs args)\n{\n    try\n    {\n        var a = new MailAddress(txtEmail.Text);\n    }\n    catch (Exception ex)\n    {\n        args.IsValid = false;\n        emailValidator.ErrorMessage = \"email: \" + ex.Message;\n    }\n}\n\n    ",
        "votes": 112,
        "comentarios": [
            {
                "decripcion": "A good point. Even if this server validation rejects some valid address then it is not a problem since you will not be able to send to this address using this particular server technology anyway. Or you can try doing the same things using any third party emailing library you use instead of the default tools.",
                "fecha": { "$date" : "2009-06-16T10:59:40Z" },
                "usuario": "User",
                "usuario_id": 1743
            },
            {
                "decripcion": "I really like how this leverages .Net framework code - no sense in reinventing the wheel. This is excellent. Simple, clean, and assures you can actually send the email. Great work.",
                "fecha": { "$date" : "2010-08-15T19:43:15Z" },
                "usuario": "Cory House",
                "usuario_id": 2151
            },
            {
                "decripcion": "... yes and for the those interested in how it validates have a look at the code in Reflector - there's quite a bit of it - and it ain't a regular expression!",
                "fecha": { "$date" : "2010-09-17T08:07:19Z" },
                "usuario": "Tom Carter",
                "usuario_id": 2152
            },
            {
                "decripcion": "Just a note: the MailAddress class doesn't match RFC5322, if you just want to use it for validation (and not sending as well, in which case it's a moot point as mentioned above). See: stackoverflow.com/questions/6023589/\u2026",
                "fecha": { "$date" : "2011-05-31T05:06:50Z" },
                "usuario": "porges",
                "usuario_id": 2153
            },
            {
                "decripcion": "Just a minor issue: if you want to make your server side validator code more reusable (either in this case or generally), I suggest to use args.Value instead of referencing the field like txtEmail.Text hard-coded. The latter one will bound your validator to the single control instance, that may be OK, as long you have a single e-mail field, but not recommended otherwise.",
                "fecha": { "$date" : "2019-08-21T11:23:37Z" },
                "usuario": "pholpar",
                "usuario_id": 2154
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1219,
        "fecha": { "$date" : "2021-07-21T09:40:49Z" },
        "decripcion": "\nThere are plenty examples of this out on the Internet (and I think even one that fully validates the RFC - but it's tens/hundreds of lines long if memory serves).\nPeople tend to get carried away validating this sort of thing. Why not just check it has an @ and at least one . and meets some simple minimum length? It's trivial to enter a fake email and still match any valid regex anyway. I would guess that false positives are better than false negatives.\n    ",
        "votes": 75,
        "comentarios": [
            {
                "decripcion": "Yes, but which RFC? :) This [RFC\u20105322\u2013validator ](stackoverflow.com/questions/201323/\u2026) is only around forty lines long.",
                "fecha": { "$date" : "2010-11-07T20:20:56Z" },
                "usuario": "tchrist",
                "usuario_id": 2125
            },
            {
                "decripcion": "A . is not required. A TLD can have email addresses, or there could be an IPv6 address",
                "fecha": { "$date" : "2011-02-15T12:58:40Z" },
                "usuario": "Sijmen Mulder",
                "usuario_id": 2155
            },
            {
                "decripcion": "RFCs are not the end of the story: ICANN does not allow 'dotless' domains any more: icann.org/news/announcement-2013-08-30-en",
                "fecha": { "$date" : "2014-09-09T16:28:50Z" },
                "usuario": "Synchro",
                "usuario_id": 2156
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1220,
        "fecha": { "$date" : "2008-10-14T16:19:04Z" },
        "decripcion": "\nWhile deciding which characters are allowed, please remember your apostrophed and hyphenated friends. I have no control over the fact that my company generates my email address using my name from the HR system. That includes the apostrophe in my last name. I can't tell you how many times I have been blocked from interacting with a website by the fact that my email address is \"invalid\". \n    ",
        "votes": 65,
        "comentarios": [
            {
                "decripcion": "This is a super common problem in programs that make unwarranted assumptions about what is and is not allowed in a person\u2019s name. One should make no such assumptions, just accept any character that relevant RFC(s) say one must.",
                "fecha": { "$date" : "2010-11-07T20:22:36Z" },
                "usuario": "tchrist",
                "usuario_id": 2125
            },
            {
                "decripcion": "Yes. I am particularly infuriated against programmers rejecting capital letters in e-mail addresses! Silly and/or lazy.",
                "fecha": { "$date" : "2012-10-29T15:26:14Z" },
                "usuario": "PhiLho",
                "usuario_id": 2157
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1221,
        "fecha": { "$date" : "2021-07-21T09:36:32Z" },
        "decripcion": "\nThis regex is from Perl's Email::Valid library. I believe it to be the most accurate, and it matches all 822. And, it is based on the regular expression in the O'Reilly book:\n\nRegular expression built using Jeffrey Friedl's example in\nMastering Regular Expressions (http://www.ora.com/catalog/regexp/).\n\n$RFC822PAT = <<'EOF';\n[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\\nxff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xf\nf\\n\\015()]*)*\\)[\\040\\t]*)*(?:(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\x\nff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\"[^\\\\\\x80-\\xff\\n\\015\n\"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015\"]*)*\")[\\040\\t]*(?:\\([^\\\\\\x80-\\\nxff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80\n-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*\n)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\n\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\\nx80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x8\n0-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\"[^\\\\\\x80-\\xff\\n\n\\015\"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015\"]*)*\")[\\040\\t]*(?:\\([^\\\\\\x\n80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\n\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\n\\t]*)*)*@[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([\n^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\n\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\\nx80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\n\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()\n]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\\nx80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\04\n0\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\\nn\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\\n015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?!\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\\n]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\\nx80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\01\n5()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*|(?:[^(\\040)<>@,;:\".\n\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]\n)|\"[^\\\\\\x80-\\xff\\n\\015\"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015\"]*)*\")[^\n()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]*(?:(?:\\([^\\\\\\x80-\\xff\\n\\0\n15()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][\n^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)|\"[^\\\\\\x80-\\xff\\\nn\\015\"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015\"]*)*\")[^()<>@,;:\".\\\\\\[\\]\\\nx80-\\xff\\000-\\010\\012-\\037]*)*<[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?\n:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\n\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:@[\\040\\t]*\n(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015\n()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()\n]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\0\n40)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\\n[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\\nxff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*\n)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80\n-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x\n80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t\n]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\n\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])\n*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x\n80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80\n-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*(?:,[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015(\n)]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\n\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*@[\\040\\t\n]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\0\n15()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015\n()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\n\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\n\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80\n-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()\n]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x\n80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\n\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\n\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\n\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff\n])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\n\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x\n80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*)*:[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015\n()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\n\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)?(?:[^\n(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\n\\037\\x80-\\xff])|\"[^\\\\\\x80-\\xff\\n\\015\"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\\nn\\015\"]*)*\")[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\n\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))\n[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\n\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\x\nff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(\n?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\\n000-\\037\\x80-\\xff])|\"[^\\\\\\x80-\\xff\\n\\015\"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\\nxff\\n\\015\"]*)*\")[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\x\nff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)\n*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*@[\\040\\t]*(?:\\([^\\\\\\x80-\\x\nff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\n\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)\n*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\\n]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\]\n)[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\n\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\x\nff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(\n?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80\n-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<\n>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x8\n0-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\n\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]\n*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)\n*\\)[\\040\\t]*)*)*>)\nEOF\n\n    ",
        "votes": 62,
        "comentarios": [
            {
                "decripcion": "O_O you would also need to be a regex master to understand what it is doing",
                "fecha": { "$date" : "2013-01-30T22:20:42Z" },
                "usuario": "Chris McGrath",
                "usuario_id": 2158
            },
            {
                "decripcion": "This regular expression matches parts of the MIME syntax like folding whitespace and comments; and it also allows control characters that are not permitted to be used.",
                "fecha": { "$date" : "2020-09-13T01:14:35Z" },
                "usuario": "awwright",
                "usuario_id": 2159
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1222,
        "fecha": { "$date" : "2021-07-21T09:35:35Z" },
        "decripcion": "\nAs you're writing in PHP I'd advice you to use the PHP build-in validation for emails.\nfilter_var($value, FILTER_VALIDATE_EMAIL)\n\nIf you're running a PHP version lower than 5.3.6, please be aware of this issue: Bug #53091: Crashes when I try to filter a text of > 2264 characters\nIf you want more information how this built-in validation works, see here: Does PHP's filter_var FILTER_VALIDATE_EMAIL actually work?\n    ",
        "votes": 46,
        "comentarios": [
            {
                "decripcion": "gets a vote up, exactly what I was going to say. Doesn't handle IDN's but converting to puny code beforehand solves this. PHP>=5.3 has idn_to_ascii() for this. One of the best and easiest ways for validating an email.",
                "fecha": { "$date" : "2012-01-25T23:00:08Z" },
                "usuario": "Taylor",
                "usuario_id": 2160
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1223,
        "fecha": { "$date" : "2021-07-21T09:24:51Z" },
        "decripcion": "\nCal Henderson (Flickr) wrote an article called Parsing Email Addresses in PHP and shows how to do proper RFC (2)822-compliant email address parsing.\nYou can also get the source code in PHP, Python, and Ruby which is Creative Commons licensed.\n    ",
        "votes": 43,
        "comentarios": [
            {
                "decripcion": "it told me that a@b was valid",
                "fecha": { "$date" : "2014-04-16T11:44:37Z" },
                "usuario": "dsdsdsdsd",
                "usuario_id": 2161
            },
            {
                "decripcion": "@dsdsdsdsd Because a@b is valid... in this case b is the top-level domain.",
                "fecha": { "$date" : "2015-07-31T21:19:05Z" },
                "usuario": "rink.attendant.6",
                "usuario_id": 2162
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1224,
        "fecha": { "$date" : "2008-10-14T14:23:11Z" },
        "decripcion": "\nI never bother creating with my own regular expression, because chances are that someone else has already come up with a better version.  I always use regexlib to find one to my liking.\n    ",
        "votes": 42,
        "comentarios": [
            {
                "decripcion": "This was flagged for length and content, but it's still a good contribution with 41 votes and should not be deleted.",
                "fecha": { "$date" : "2018-10-28T14:43:30Z" },
                "usuario": "Will",
                "usuario_id": 2163
            },
            {
                "decripcion": "Nice site, however it's a bit weird that their built-in email spam protection partially hides some patterns. Especially those related to email matching. :D",
                "fecha": { "$date" : "2021-07-09T00:07:04Z" },
                "usuario": "Tim Wi\u00dfmann",
                "usuario_id": 2164
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1225,
        "fecha": { "$date" : "2013-03-07T19:57:59Z" },
        "decripcion": "\nOne simple regular expression which would at least not reject any valid email address would be checking for something, followed by an @ sign and then something followed by a period and at least 2 somethings. It won't reject anything, but after reviewing the spec I can't find any email that would be valid and rejected.\n\nemail =~ /.+@[^@]+\\.[^@]{2,}$/\n    ",
        "votes": 39,
        "comentarios": [
            {
                "decripcion": "This is what I was looking for.  Not very restrictive, but makes sure there is only 1 @ (as we're parsing a list and want to make sure there are no missing commas).  FYI, you can have an @ on the left if it's in quotes: Valid_email_addresses, but it's pretty fringe.",
                "fecha": { "$date" : "2011-11-11T06:16:58Z" },
                "usuario": "Josh",
                "usuario_id": 2165
            },
            {
                "decripcion": "After using it, realized it didn't work exactly.  /^[^@]+@[^@]+\\.[^@]{2}[^@]*$/  actually checks for 1 @ sign.  Your regex will let multiple through because of the .* at the end.",
                "fecha": { "$date" : "2011-11-11T06:31:46Z" },
                "usuario": "Josh",
                "usuario_id": 2165
            },
            {
                "decripcion": "Right. I'm not trying to reject all invalid, just keep from rejecting a valid email address.",
                "fecha": { "$date" : "2011-11-14T17:48:12Z" },
                "usuario": "spig",
                "usuario_id": 2166
            },
            {
                "decripcion": "It would be far better to use this: /^[^@]+@[^@]+\\.[^@]{2,4}$/ making sure that it ends with 2 to 4 non @ characters. As @Josh pointed out it now allows an extra @ in the end. But you can also change that as well to: /^[^@]+@[^@]+\\.[^a-z-A-Z]{2,4}$/ since all top level domains are a-Z characters. you can replace the 4 with 5 or more allowing top level domain names to be longer in the future as well.",
                "fecha": { "$date" : "2013-01-14T10:51:39Z" },
                "usuario": "FLY",
                "usuario_id": 2167
            },
            {
                "decripcion": "@FLY, ka@foo. returns correct. Is it supposed to, by the standards?",
                "fecha": { "$date" : "2015-11-22T01:31:32Z" },
                "usuario": "SexyBeast",
                "usuario_id": 2168
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1226,
        "fecha": { "$date" : "2021-07-21T09:19:53Z" },
        "decripcion": "\nThere is not one which is really usable. I discuss some issues in my answer to Is there a PHP library for email address validation?, it is discussed also in Is regular expression recognition of an email address hard?.\nIn short, don't expect a single, usable regex to do a proper job. And the best regex will validate the syntax, not the validity of an e-mail (jhohn@example.com is correct, but it will probably bounce...).\n    ",
        "votes": 37,
        "comentarios": [
            {
                "decripcion": "Correct me if I\u2019m wrong, but I believe that PHP uses PCRE patterns.  If so, you should be able to craft something similar to Abigail\u2019s RFC 5322 pattern.",
                "fecha": { "$date" : "2010-11-07T20:24:21Z" },
                "usuario": "tchrist",
                "usuario_id": 2125
            },
            {
                "decripcion": "@tchrist: not sure if PCRE has caught up to this syntax (which I discover). If so, not sure if PHP's PCRE has caught up to this version of PCRE... Well, if I understand correctly this syntax, you can as well use a PEG parser, much clearer and complete than a regex anyway.",
                "fecha": { "$date" : "2010-11-10T14:51:36Z" },
                "usuario": "PhiLho",
                "usuario_id": 2157
            },
            {
                "decripcion": "PCRE has caught up to it, but perhaps PHP has not caught up with PCRE. \u2639",
                "fecha": { "$date" : "2010-11-10T15:09:37Z" },
                "usuario": "tchrist",
                "usuario_id": 2125
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1227,
        "fecha": { "$date" : "2009-05-23T18:22:34Z" },
        "decripcion": "\nYou could use the one employed by the jQuery Validation plugin:\n\n/^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i\n\n    ",
        "votes": 29,
        "comentarios": [
            {
                "decripcion": "this seems to be doing a good job. It allowed: a-b'c_d.e@f-g.h but was able to catch the inappropriate variations, such as a-b'c_d.@f-g.h and a-b'c_d.e@f-.h",
                "fecha": { "$date" : "2014-04-16T11:52:20Z" },
                "usuario": "dsdsdsdsd",
                "usuario_id": 2161
            },
            {
                "decripcion": "Do you have some reference for it?",
                "fecha": { "$date" : "2021-09-01T07:18:22Z" },
                "usuario": "norok2",
                "usuario_id": 2169
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1228,
        "fecha": { "$date" : "2010-05-28T22:03:55Z" },
        "decripcion": "\nFor the most comprehensive evaluation of the best regular expression for validating an email address please see this link; \"Comparing E-mail Address Validating Regular Expressions\"\n\nHere is the current top expression for reference purposes:\n\n/^([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i\n\n    ",
        "votes": 26,
        "comentarios": [
            {
                "decripcion": "spoon16: That link isn\u2019t really correct. Its statement that there can be no perfect pattern for validating email addresses is patently fault. You can, but you have to make sure that you follow the RFC right down to the letter. And you have to pick the right RFC, too.",
                "fecha": { "$date" : "2010-11-07T20:27:25Z" },
                "usuario": "tchrist",
                "usuario_id": 2125
            },
            {
                "decripcion": "The \"best\" right now does not work with java regex - even after properly escaping and converting the string.",
                "fecha": { "$date" : "2012-04-17T20:57:49Z" },
                "usuario": "Eric Chen",
                "usuario_id": 2170
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1229,
        "fecha": { "$date" : "2009-12-18T23:40:35Z" },
        "decripcion": "\nNot to mention that non-Latin (Chinese, Arabic, Greek, Hebrew, Cyrillic and so on) domain names are to be allowed in the near future. Everyone has to change the email regex used, because those characters are surely not to be covered by [a-z]/i nor \\w. They will all fail.\n\nAfter all, the best way to validate the email address is still to actually send an email to the address in question to validate the address. If the email address is part of user authentication (register/login/etc), then you can perfectly combine it with the user activation system. I.e. send an email with a link with an unique activation key to the specified email address and only allow login when the user has activated the newly created account using the link in the email.\n\nIf the purpose of the regex is just to quickly inform the user in the UI that the specified email address doesn't look like in the right format, best is still to check if it matches basically the following regex:\n\n^([^.@]+)(\\.[^.@]+)*@([^.@]+\\.)+([^.@]+)$\n\n\nSimple as that. Why on earth would you care about the characters used in the name and domain? It's the client's responsibility to enter a valid email address, not the server's. Even when the client enters a syntactically valid email address like aa@bb.cc, this does not guarantee that it's a legit email address. No one regex can cover that.\n    ",
        "votes": 25,
        "comentarios": [
            {
                "decripcion": "I agree the sending an authentication message is usually the best way for this kind of stuff, syntactically correct and valid are not the same. I get frustrated when I get made to type my email address twice for \"Confirmation\" as if I can't look at what I typed. I only copy the first one to the second anyway, it seems to be becoming used more and more.",
                "fecha": { "$date" : "2010-02-02T15:05:00Z" },
                "usuario": "PeteT",
                "usuario_id": 2171
            },
            {
                "decripcion": "agree! but this regex i don't think is valid because it allow spaces after the @. eg. test@test.ca com net is consider a valid email by using the above regex where as it should be returning invalid.",
                "fecha": { "$date" : "2017-11-08T17:54:34Z" },
                "usuario": "CB4",
                "usuario_id": 2172
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1230,
        "fecha": { "$date" : "2018-03-21T12:53:10Z" },
        "decripcion": "\nThe HTML5 spec suggests a simple regex for validating email addresses:\n\n/^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n\n\nThis intentionally doesn't comply with RFC 5322.\n\n\n  Note: This requirement is a willful violation of RFC 5322, which defines a syntax for e-mail addresses that is simultaneously too strict (before the @ character), too vague (after the @ character), and too lax (allowing comments, whitespace characters, and quoted strings in manners unfamiliar to most users) to be of practical use here.\n\n\nThe total length could also be limited to 254 characters, per RFC 3696  errata 1690.\n    ",
        "votes": 21,
        "comentarios": [
            {
                "decripcion": "Best answer!  Here's a link to the w3 recommendation: w3.org/TR/html5/forms.html#valid-e-mail-address   This regex is adopted by many browsers.",
                "fecha": { "$date" : "2017-11-06T22:13:40Z" },
                "usuario": "Ryan Taylor",
                "usuario_id": 2173
            },
            {
                "decripcion": "This is SO not the best answer! This pattern matches this wholly invalid address: invalid@emailaddress. I would urge caution and much testing before you use it!",
                "fecha": { "$date" : "2018-03-21T11:47:58Z" },
                "usuario": "Sheridan",
                "usuario_id": 2174
            },
            {
                "decripcion": "@Sheridan, if you think there is an issue with the HTML5 spec you can raise an issue here: github.com/w3c/html/issues",
                "fecha": { "$date" : "2018-03-21T12:56:24Z" },
                "usuario": "Luna",
                "usuario_id": 2175
            },
            {
                "decripcion": "This doesn't add much over stackoverflow.com/a/8829363 and would IMHO be better as an edit of or comment on that.",
                "fecha": { "$date" : "2018-04-29T21:50:04Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "example@localhost is valid, but for a real world application you may want to enforce a domain extension, all you need to do is change the final * to a + to achieve this (changing that part of the pattern from 0+ to 1+)",
                "fecha": { "$date" : "2018-05-16T09:05:41Z" },
                "usuario": "Mitch Satchwell",
                "usuario_id": 2176
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1231,
        "fecha": { "$date" : "2021-07-21T09:06:57Z" },
        "decripcion": "\nFor a vivid demonstration, the following monster is pretty good, but it still does not correctly recognize all syntactically valid email addresses: it recognizes nested comments up to four levels deep.\nThis is a job for a parser, but even if an address is syntactically valid, it still may not be deliverable. Sometimes you have to resort to the hillbilly method of \"Hey, y'all, watch ee-us!\"\n// derivative of work with the following copyright and license:\n// Copyright (c) 2004 Casey West.  All rights reserved.\n// This module is free software; you can redistribute it and/or\n// modify it under the same terms as Perl itself.\n\n// see http://search.cpan.org/~cwest/Email-Address-1.80/\n\nprivate static string gibberish = @\"\n(?-xism:(?:(?-xism:(?-xism:(?-xism:(?-xism:(?-xism:(?-xism:\\\ns*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\n\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))\n|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+\n|\\s+)*[^\\x00-\\x1F\\x7F()<>\\[\\]:;@\\,.<DQ>\\s]+(?-xism:(?-xism:\\\ns*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\n\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))\n|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+\n|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(\n?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?\n:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x\n0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*<DQ>(?-xism:(?-xism:[\n^\\\\<DQ>])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])))+<DQ>(?-xism:(?-xi\nsm:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xis\nm:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\\n]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\\ns*)+|\\s+)*))+)?(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?\n-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\n\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[\n^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*<(?-xism:(?-xi\nsm:(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^(\n)\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(\n?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))\n|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()<\n>\\[\\]:;@\\,.<DQ>\\s]+(?:\\.[^\\x00-\\x1F\\x7F()<>\\[\\]:;@\\,.<DQ>\\s]\n+)*)(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))\n|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:\n(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s\n*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?\n:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x\n0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xi\nsm:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*\n<DQ>(?-xism:(?-xism:[^\\\\<DQ>])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]\n)))+<DQ>(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\\n]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-x\nism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+\n)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*))\\@(?-xism:(?-xism:(?-xism:(\n?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?\n-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^\n()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s\n*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()<>\\[\\]:;@\\,.<DQ>\\s]+(\n?:\\.[^\\x00-\\x1F\\x7F()<>\\[\\]:;@\\,.<DQ>\\s]+)*)(?-xism:(?-xism:\n\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[\n^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+)\n)|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)\n+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:\n(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((\n?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\\nx0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*\\[(?:\\s*(?-xism:(?-x\nism:[^\\[\\]\\\\])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])))+)*\\s*\\](?-xi\nsm:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\n\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(\n?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+\n)*\\s*\\)\\s*)+|\\s+)*)))>(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-\nxism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\\ns*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\n\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*))|(?-xism:(?-x\nism:(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^\n()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*\n(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])\n)|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()\n<>\\[\\]:;@\\,.<DQ>\\s]+(?:\\.[^\\x00-\\x1F\\x7F()<>\\[\\]:;@\\,.<DQ>\\s\n]+)*)(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+)\n)|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism\n:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\\ns*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((\n?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\\nx0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-x\nism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)\n*<DQ>(?-xism:(?-xism:[^\\\\<DQ>])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D\n])))+<DQ>(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\n\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-\nxism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)\n+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*))\\@(?-xism:(?-xism:(?-xism:\n(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(\n?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[\n^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\\ns*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()<>\\[\\]:;@\\,.<DQ>\\s]+\n(?:\\.[^\\x00-\\x1F\\x7F()<>\\[\\]:;@\\,.<DQ>\\s]+)*)(?-xism:(?-xism\n:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:\n[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+\n))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*\n)+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism\n:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\(\n(?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\n\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*\\[(?:\\s*(?-xism:(?-\nxism:[^\\[\\]\\\\])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])))+)*\\s*\\](?-x\nism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism\n:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:\n(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))\n+)*\\s*\\)\\s*)+|\\s+)*))))(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?\n>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\n\\s*(?-xism:(?-xism:(?>[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0\nD]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)*)\"\n  .Replace(\"<DQ>\", \"\\\"\")\n  .Replace(\"\\t\", \"\")\n  .Replace(\" \", \"\")\n  .Replace(\"\\r\", \"\")\n  .Replace(\"\\n\", \"\");\n\nprivate static Regex mailbox =\n  new Regex(gibberish, RegexOptions.ExplicitCapture);\n\n    ",
        "votes": 16,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1232,
        "fecha": { "$date" : "2021-07-21T09:03:28Z" },
        "decripcion": "\nAccording to the official standard, RFC 2822, a valid email regex is:\n(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\n\nIf you want to use it in Java, it's really very easy:\nimport java.util.regex.*;\n\nclass regexSample \n{\n   public static void main(String args[]) \n   {\n      //Input the string for validation\n      String email = \"xyz@hotmail.com\";\n\n      //Set the email pattern string\n      Pattern p = Pattern.compile(\" (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"\n              +\"(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21\\\\x23-\\\\x5b\\\\x5d-\\\\x7f]|\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])*\\\")\"\n                     + \"@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21-\\\\x5a\\\\x53-\\\\x7f]|\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])+)\\\\]\");\n\n      //Match the given string with the pattern\n      Matcher m = p.matcher(email);\n\n      //Check whether match is found \n      boolean matchFound = m.matches();\n\n      if (matchFound)\n        System.out.println(\"Valid Email Id.\");\n      else\n        System.out.println(\"Invalid Email Id.\");\n   }\n}\n\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "Your regex does not include first uppercase letter for example Leonardo.davinci@gmail.com which could be annoying for some users. Use this one instead: (?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\]) ",
                "fecha": { "$date" : "2019-07-17T15:07:57Z" },
                "usuario": "Kebab Krabby",
                "usuario_id": 2177
            },
            {
                "decripcion": "@KebabKrabby Thanks, please edit the answer, I'll accept the change.",
                "fecha": { "$date" : "2019-07-31T07:55:23Z" },
                "usuario": "AZ_",
                "usuario_id": 1638
            },
            {
                "decripcion": "If i add that change to your answer it wont be RFC 2822 anymore so i dont know if thats correct.",
                "fecha": { "$date" : "2019-07-31T22:06:39Z" },
                "usuario": "Kebab Krabby",
                "usuario_id": 2177
            },
            {
                "decripcion": "@KebabKrabby: I guess we would need to apply the pattern with case insensitivity somewhere in the matching options, not change the Regex itself.",
                "fecha": { "$date" : "2020-09-25T11:46:25Z" },
                "usuario": "Thomas Weller",
                "usuario_id": 2178
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1233,
        "fecha": { "$date" : "2011-07-20T03:37:42Z" },
        "decripcion": "\nHere's the PHP I use. I've choosen this solution in the spirit of \"false positives are better than false negatives\" as declared by another commenter here AND with regards to keeping your response time up and server load down ... there's really no need to waste server resources with a regular expression when this will weed out most simple user error. You can always follow this up by sending a test email if you want.\n\nfunction validateEmail($email) {\n  return (bool) stripos($email,'@');\n}\n\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "a) The \"waste server resources\" is infinitesimal, but if you are so inclined, you could do it client side with JS b) What is you need to send a registration mail and the user enters me@forgotthedotcom ? Your \"solution\" fails and you lose a user.",
                "fecha": { "$date" : "2012-04-03T09:40:23Z" },
                "usuario": "johnjohn",
                "usuario_id": 2179
            },
            {
                "decripcion": "a) Relying on a JS validation that would fail when JavaScript is disabled doesn't sound like the best idea either (just btw)",
                "fecha": { "$date" : "2013-12-06T15:39:10Z" },
                "usuario": "auco",
                "usuario_id": 2180
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1234,
        "fecha": { "$date" : "2012-12-19T12:17:26Z" },
        "decripcion": "\nRFC 5322 standard:\n\nAllows dot-atom local-part, quoted-string local-part, obsolete (mixed dot-atom and quoted-string) local-part, domain name domain, (IPv4, IPv6, and IPv4-mapped IPv6 address) domain literal domain, and (nested) CFWS.\n\n'/^(?!(?>(?1)\"?(?>\\\\\\[ -~]|[^\"])\"?(?1)){255,})(?!(?>(?1)\"?(?>\\\\\\[ -~]|[^\"])\"?(?1)){65,}@)((?>(?>(?>((?>(?>(?>\\x0D\\x0A)?[\\t ])+|(?>[\\t ]*\\x0D\\x0A)?[\\t ]+)?)(\\((?>(?2)(?>[\\x01-\\x08\\x0B\\x0C\\x0E-\\'*-\\[\\]-\\x7F]|\\\\\\[\\x00-\\x7F]|(?3)))*(?2)\\)))+(?2))|(?2))?)([!#-\\'*+\\/-9=?^-~-]+|\"(?>(?2)(?>[\\x01-\\x08\\x0B\\x0C\\x0E-!#-\\[\\]-\\x7F]|\\\\\\[\\x00-\\x7F]))*(?2)\")(?>(?1)\\.(?1)(?4))*(?1)@(?!(?1)[a-z0-9-]{64,})(?1)(?>([a-z0-9](?>[a-z0-9-]*[a-z0-9])?)(?>(?1)\\.(?!(?1)[a-z0-9-]{64,})(?1)(?5)){0,126}|\\[(?:(?>IPv6:(?>([a-f0-9]{1,4})(?>:(?6)){7}|(?!(?:.*[a-f0-9][:\\]]){8,})((?6)(?>:(?6)){0,6})?::(?7)?))|(?>(?>IPv6:(?>(?6)(?>:(?6)){5}:|(?!(?:.*[a-f0-9]:){6,})(?8)?::(?>((?6)(?>:(?6)){0,4}):)?))?(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(?>\\.(?9)){3}))\\])(?1)$/isD'\n\n\nRFC 5321 standard:\n\nAllows dot-atom local-part, quoted-string local-part, domain name domain, and (IPv4, IPv6, and IPv4-mapped IPv6 address) domain literal domain.\n\n'/^(?!(?>\"?(?>\\\\\\[ -~]|[^\"])\"?){255,})(?!\"?(?>\\\\\\[ -~]|[^\"]){65,}\"?@)(?>([!#-\\'*+\\/-9=?^-~-]+)(?>\\.(?1))*|\"(?>[ !#-\\[\\]-~]|\\\\\\[ -~])*\")@(?!.*[^.]{64,})(?>([a-z0-9](?>[a-z0-9-]*[a-z0-9])?)(?>\\.(?2)){0,126}|\\[(?:(?>IPv6:(?>([a-f0-9]{1,4})(?>:(?3)){7}|(?!(?:.*[a-f0-9][:\\]]){8,})((?3)(?>:(?3)){0,6})?::(?4)?))|(?>(?>IPv6:(?>(?3)(?>:(?3)){5}:|(?!(?:.*[a-f0-9]:){6,})(?5)?::(?>((?3)(?>:(?3)){0,4}):)?))?(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(?>\\.(?6)){3}))\\])$/iD'\n\n\nBasic:\n\nAllows dot-atom local-part and domain name domain (requiring at least two domain name labels with the TLD limited to 2-6 alphabetic characters).\n\n\"/^(?!.{255,})(?!.{65,}@)([!#-'*+\\/-9=?^-~-]+)(?>\\.(?1))*@(?!.*[^.]{64,})(?>[a-z0-9](?>[a-z0-9-]*[a-z0-9])?\\.){1,126}[a-z]{2,6}$/iD\"\n\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "What the devil language is that in?? I see a /D flag, and you\u2019ve quoted it with single quotes yet also used slashes to delimit the pattern?  It\u2019s not Perl, and it can\u2019t be PCRE. Is it therefore PHP? I believe those are the only three that allow recursion like (?1).",
                "fecha": { "$date" : "2010-11-07T20:32:57Z" },
                "usuario": "tchrist",
                "usuario_id": 2125
            },
            {
                "decripcion": "It's in PHP, which uses PCRE. The slashes are used only to delimit special characters like parentheses, square brackets, and of course slashes and single quotes. The /D flag, if you didn't know, is to prevent a newline being added to the end of the string, which would be allowed otherwise.",
                "fecha": { "$date" : "2011-02-19T18:24:16Z" },
                "usuario": "MichaelRushton",
                "usuario_id": 2181
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1235,
        "fecha": { "$date" : "2008-11-06T04:48:18Z" },
        "decripcion": "\nStrange that you \"cannot\" allow 4 characters TLDs.  You are banning people from .info and .name, and the length limitation stop .travel and .museum, but yes, they are less common than 2 characters TLDs and 3 characters TLDs.\n\nYou should allow uppercase alphabets too.  Email systems will normalize the local part and domain part.\n\nFor your regex of domain part, domain name cannot starts with '-' and cannot ends with '-'. Dash can only stays in between.\n\nIf you used the PEAR library, check out their mail function (forgot the exact name/library).  You can validate email address by calling one function, and it validates the email address according to definition in RFC822.\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "@Joseph Yee: Isn\u2019t RFC 822 a bit dated?",
                "fecha": { "$date" : "2010-11-07T20:27:53Z" },
                "usuario": "tchrist",
                "usuario_id": 2125
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1236,
        "fecha": { "$date" : "2021-07-21T08:50:21Z" },
        "decripcion": "\nIf you are fine with accepting empty values (which is not an invalid email) and are running PHP 5.2+, I would suggest:\nstatic public function checkEmail($email, $ignore_empty = false) {\n    if($ignore_empty && (is_null($email) || $email == ''))\n            return true;\n    return filter_var($email, FILTER_VALIDATE_EMAIL);\n}\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1237,
        "fecha": { "$date" : "2021-08-25T09:49:52Z" },
        "decripcion": "\nThe most important part is the concepts. Once you understand how the building blocks work, differences in syntax amount to little more than mild dialects. A layer on top of your regular expression engine's syntax is the syntax of the programming language you're using. Languages such as Perl remove most of this complication, but you'll have to keep in mind other considerations if you're using regular expressions in a C program.\nIf you think of regular expressions as building blocks that you can mix and match as you please, it helps you learn how to write and debug your own patterns but also how to understand patterns written by others.\nStart simple\nConceptually, the simplest regular expressions are literal characters. The pattern N matches the character 'N'.\nRegular expressions next to each other match sequences. For example, the pattern Nick matches the sequence 'N' followed by 'i' followed by 'c' followed by 'k'.\nIf you've ever used grep on Unix\u2014even if only to search for ordinary looking strings\u2014you've already been using regular expressions! (The re in grep refers to regular expressions.)\nOrder from the menu\nAdding just a little complexity, you can match either 'Nick' or 'nick' with the pattern [Nn]ick. The part in square brackets is a character class, which means it matches exactly one of the enclosed characters. You can also use ranges in character classes, so [a-c] matches either 'a' or 'b' or 'c'.\nThe pattern . is special: rather than matching a literal dot only, it matches any character\u2020. It's the same conceptually as the really big character class [-.?+%$A-Za-z0-9...].\nThink of character classes as menus: pick just one.\nHelpful shortcuts\nUsing . can save you lots of typing, and there are other shortcuts for common patterns. Say you want to match a digit: one way to write that is [0-9]. Digits are a frequent match target, so you could instead use the shortcut \\d. Others are \\s (whitespace) and \\w (word characters: alphanumerics or underscore).\nThe uppercased variants are their complements, so \\S matches any non-whitespace character, for example.\nOnce is not enough\nFrom there, you can repeat parts of your pattern with quantifiers. For example, the pattern ab?c matches 'abc' or 'ac' because the ? quantifier makes the subpattern it modifies optional. Other quantifiers are\n\n* (zero or more times)\n+ (one or more times)\n{n} (exactly n times)\n{n,} (at least n times)\n{n,m} (at least n times but no more than m times)\n\nPutting some of these blocks together, the pattern [Nn]*ick matches all of\n\nick\nNick\nnick\nNnick\nnNick\nnnick\n(and so on)\n\nThe first match demonstrates an important lesson: * always succeeds! Any pattern can match zero times.\nA few other useful examples:\n\n[0-9]+ (and its equivalent \\d+) matches any non-negative integer\n\\d{4}-\\d{2}-\\d{2} matches dates formatted like 2019-01-01\n\nGrouping\nA quantifier modifies the pattern to its immediate left. You might expect 0abc+0 to match '0abc0', '0abcabc0', and so forth, but the pattern immediately to the left of the plus quantifier is c. This means 0abc+0 matches '0abc0', '0abcc0', '0abccc0', and so on.\nTo match one or more sequences of 'abc' with zeros on the ends, use 0(abc)+0. The parentheses denote a subpattern that can be quantified as a unit. It's also common for regular expression engines to save or \"capture\" the portion of the input text that matches a parenthesized group. Extracting bits this way is much more flexible and less error-prone than counting indices and substr.\nAlternation\nEarlier, we saw one way to match either 'Nick' or 'nick'. Another is with alternation as in Nick|nick. Remember that alternation includes everything to its left and everything to its right. Use grouping parentheses to limit the scope of |, e.g., (Nick|nick).\nFor another example, you could equivalently write [a-c] as a|b|c, but this is likely to be suboptimal because many implementations assume alternatives will have lengths greater than 1.\nEscaping\nAlthough some characters match themselves, others have special meanings. The pattern \\d+ doesn't match backslash followed by lowercase D followed by a plus sign: to get that, we'd use \\\\d\\+. A backslash removes the special meaning from the following character.\nGreediness\nRegular expression quantifiers are greedy. This means they match as much text as they possibly can while allowing the entire pattern to match successfully.\nFor example, say the input is\n\n\"Hello,\" she said, \"How are you?\"\n\nYou might expect \".+\" to match only 'Hello,' and will then be surprised when you see that it matched from 'Hello' all the way through 'you?'.\nTo switch from greedy to what you might think of as cautious, add an extra ? to the quantifier. Now you understand how \\((.+?)\\), the example from your question works. It matches the sequence of a literal left-parenthesis, followed by one or more characters, and terminated by a right-parenthesis.\nIf your input is '(123) (456)', then the first capture will be '123'. Non-greedy quantifiers want to allow the rest of the pattern to start matching as soon as possible.\n(As to your confusion, I don't know of any regular-expression dialect where ((.+?)) would do the same thing. I suspect something got lost in transmission somewhere along the way.)\nAnchors\nUse the special pattern ^ to match only at the beginning of your input and $ to match only at the end. Making \"bookends\" with your patterns where you say, \"I know what's at the front and back, but give me everything between\" is a useful technique.\nSay you want to match comments of the form\n\n-- This is a comment --\n\nyou'd write ^--\\s+(.+)\\s+--$.\nBuild your own\nRegular expressions are recursive, so now that you understand these basic rules, you can combine them however you like.\nTools for writing and debugging regexes:\n\nRegExr (for JavaScript)\nPerl: YAPE: Regex Explain\nRegex Coach (engine backed by CL-PPCRE)\nRegexPal (for JavaScript)\nRegular Expressions Online Tester\nRegex Buddy\nRegex 101 (for PCRE, JavaScript, Python, Golang)\nI Hate Regex\nVisual RegExp\nExpresso (for .NET)\nRubular (for Ruby)\nRegular Expression Library (Predefined Regexes for common scenarios)\nTxt2RE\nRegex Tester (for JavaScript)\nRegex Storm (for .NET)\nDebuggex (visual regex tester and helper)\n\nBooks\n\nMastering Regular Expressions, the 2nd Edition, and the 3rd edition.\nRegular Expressions Cheat Sheet\nRegex Cookbook\nTeach Yourself Regular Expressions\n\nFree resources\n\nRegexOne - Learn with simple, interactive exercises.\nRegular Expressions - Everything you should know (PDF Series)\nRegex Syntax Summary\nHow Regexes Work\n\nFootnote\n\u2020: The statement above that . matches any character is a simplification for pedagogical purposes that is not strictly true. Dot matches any character except newline, \"\\n\", but in practice you rarely expect a pattern such as .+ to cross a newline boundary. Perl regexes have a /s switch and Java Pattern.DOTALL, for example, to make . match any character at all. For languages that don't have such a feature, you can use something like [\\s\\S] to match \"any whitespace or any non-whitespace\", in other words anything.\n    ",
        "votes": 815,
        "comentarios": [
            {
                "decripcion": "You can also use trial and error method and than following online regex tester and debugger can be a huge help:  regex101.com",
                "fecha": { "$date" : "2015-09-09T10:25:21Z" },
                "usuario": "Juraj.Lorinc",
                "usuario_id": 2186
            },
            {
                "decripcion": "It would be worth mentioning that, despite being a similar pattern, a{,m} isn't a thing, at least in Javascript, Perl, and Python.",
                "fecha": { "$date" : "2016-03-31T12:12:19Z" },
                "usuario": "Nic",
                "usuario_id": 502
            },
            {
                "decripcion": "It would be very worth to mention that there are different kind of regular expression engines with all have different feature set's and syntactic rules.",
                "fecha": { "$date" : "2016-11-14T18:14:30Z" },
                "usuario": "hek2mgl",
                "usuario_id": 2187
            },
            {
                "decripcion": "hackr.io/tutorials/learn-regular-expressions-regex is a great place to find best online regex tutorials. All the tutorials here are submitted and recommended (upvoted like SO) by the programming community.",
                "fecha": { "$date" : "2017-08-16T07:14:04Z" },
                "usuario": "Saurabh Hooda",
                "usuario_id": 2188
            },
            {
                "decripcion": "This can be helpful for quick reference: Quick-Start: Regex Cheat Sheet",
                "fecha": { "$date" : "2019-07-01T07:21:04Z" },
                "usuario": "Lod",
                "usuario_id": 2189
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1238,
        "fecha": { "$date" : "2016-12-15T09:27:19Z" },
        "decripcion": "\nMake .* non-greedy by adding '?' after it:\n\nProject name:\\s+(.*?)\\s+J[0-9]{7}:\n\n    ",
        "votes": 152,
        "comentarios": [],
        "usuario": "jj33",
        "usuario_id": 2190
    },
    {
        "_id": 1239,
        "fecha": { "$date" : "2018-08-13T18:11:24Z" },
        "decripcion": "\nUsing non-greedy quantifiers here is probably the best solution, also because it is more efficient than the greedy alternative: Greedy matches generally go as far as they can (here, until the end of the text!) and then trace back character after character to try and match the part coming afterwards.\n\nHowever, consider using a negative character class instead:\n\nProject name:\\s+(\\S*)\\s+J[0-9]{7}:\n\n\n\\S means \u201ceverything except a whitespace and this is exactly what you want.\n    ",
        "votes": 15,
        "comentarios": [
            {
                "decripcion": "When possible to implement, a greedy negative (or positive) character class will usually perform notably better than a lazy quantifier. Laziness requires the engine to forward-track character by character, checking the pattern that follows each time until it matches; a greedy character class can mindlessly repeat just the desired characters, which can be a lot quicker. So, you might consider making a stronger case for a negative character class, seeing as this is the greedy-vs-lazy canonical.",
                "fecha": { "$date" : "2018-10-30T09:26:16Z" },
                "usuario": "CertainPerformance",
                "usuario_id": 635
            }
        ],
        "usuario": "Konrad Rudolph",
        "usuario_id": 2191
    },
    {
        "_id": 1240,
        "fecha": { "$date" : "2017-01-02T16:36:48Z" },
        "decripcion": "\nWell, \".*\" is a greedy selector. You make it non-greedy by using \".*?\" When using the latter construct, the regex engine will, at every step it matches text into the \".\" attempt to match whatever make come after the \".*?\". This means that if for instance nothing comes after the \".*?\", then it matches nothing. \n\nHere's what I used. s contains your original string. This code is .NET specific, but most flavors of regex will have something similar.\n\nstring m = Regex.Match(s, @\"Project name: (?<name>.*?) J\\d+\").Groups[\"name\"].Value;\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Svend",
        "usuario_id": 2192
    },
    {
        "_id": 1241,
        "fecha": { "$date" : "2008-08-22T14:22:55Z" },
        "decripcion": "\nI would also recommend you experiment with regular expressions using \"Expresso\" - it's a utility a great (and free) utility for regex editing and testing.\n\nOne of its upsides is that its UI exposes a lot of regex functionality that people unexprienced with regex might not be familiar with, in a way that it would be easy for them to learn these new concepts.\n\nFor example, when building your regex using the UI, and choosing \"*\", you have the ability to check the checkbox \"As few as possible\" and see the resulting regex, as well as test its behavior, even if you were unfamiliar with non-greedy expressions before.\n\nAvailable for download at their site:\nhttp://www.ultrapico.com/Expresso.htm\n\nExpress download:\nhttp://www.ultrapico.com/ExpressoDownload.htm\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "There are a few great websites out there already. I'd rather visit a bookmark than have another program on my computer.",
                "fecha": { "$date" : "2018-11-18T04:08:14Z" },
                "usuario": "Mattwmaster58",
                "usuario_id": 2193
            }
        ],
        "usuario": "Hershi",
        "usuario_id": 2194
    },
    {
        "_id": 1242,
        "fecha": { "$date" : "2018-07-16T10:44:30Z" },
        "decripcion": "\n(Project name:\\s+[A-Z]:(?:\\\\w+)+.[a-zA-Z]+\\s+J[0-9]{7})(?=:)\n\nThis will work for you.\n\nAdding (?:\\\\w+)+.[a-zA-Z]+ will be more restrictive instead of .*\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "Shailendra",
        "usuario_id": 2195
    },
    {
        "_id": 1243,
        "fecha": { "$date" : "2021-07-16T22:56:41Z" },
        "decripcion": "\nUsing regular expressions is probably the best way. You can see a bunch of tests here (taken from chromium)\nfunction validateEmail(email) {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n}\n\nHere's the example of regular expresion that accepts unicode:\nconst re = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\nBut keep in mind that one should not rely only upon JavaScript validation. JavaScript can easily be disabled. This should be validated on the server side as well.\nHere's an example of the above in action:\n\n\nfunction validateEmail(email) {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n}\n\nfunction validate() {\n  const $result = $(\"#result\");\n  const email = $(\"#email\").val();\n  $result.text(\"\");\n\n  if (validateEmail(email)) {\n    $result.text(email + \" is valid :)\");\n    $result.css(\"color\", \"green\");\n  } else {\n    $result.text(email + \" is not valid :(\");\n    $result.css(\"color\", \"red\");\n  }\n  return false;\n}\n\n$(\"#email\").on(\"input\", validate);\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\n\n<label for=email>Enter an email address:</label>\n<input id=\"email\">\n<h2 id=\"result\"></h2>\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 5816,
        "comentarios": [
            {
                "decripcion": "This regex eliminates valid, in-use emails.  Do not use.  Google for \"RFC822\" or \"RFC2822\" to get a proper regex.",
                "fecha": { "$date" : "2010-09-08T02:34:23Z" },
                "usuario": "Randal Schwartz",
                "usuario_id": 2132
            },
            {
                "decripcion": "This doesn't even accept the examples in RFC 822. Some simple cases it doesn't match a\\@b@c.com, a(b)@c.com. See the RFC for more. Here's a regex that won't reject any valid addresses [^@]+@[^@]+\\.[^@]+ and protects against common errors.",
                "fecha": { "$date" : "2012-10-26T06:32:11Z" },
                "usuario": "Vroo",
                "usuario_id": 2198
            },
            {
                "decripcion": "You cannot validate email addresses, period. The only one who can validate an email address is the provider of the email address. For example, this answer says these email addresses: %2@gmail.com, \"%2\"@gmail.com, \"a..b\"@gmail.com, \"a_b\"@gmail.com, _@gmail.com, 1@gmail.com , 1_example@something.gmail.com are all valid, but Gmail will never allow any of these email addresses. You should do this by accepting the email address and sending an email message to that email address, with a code/link the user must visit to confirm validity.",
                "fecha": { "$date" : "2014-02-01T08:49:15Z" },
                "usuario": "Kevin Fegan",
                "usuario_id": 2199
            },
            {
                "decripcion": "@KevinFegan let's be realistic: you would not be using JavaScript to confirm whether an e-mail is authentic. I see this validation as perfectly reasonable when a user signs up. You probably do not want to bother sending verification e-mails to addresses that cannot possibly exist. Some might also have outbound e-mail limits, making it north worth it to send e-mails to email@localhost, i don't have an email or any other funny user inputs.",
                "fecha": { "$date" : "2021-07-16T23:02:29Z" },
                "usuario": "undefined",
                "usuario_id": 2200
            },
            {
                "decripcion": "gautam+@Gmail.com - showing is valid which should not",
                "fecha": { "$date" : "2021-08-06T06:33:05Z" },
                "usuario": "Gautam Parmar",
                "usuario_id": 2201
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1244,
        "fecha": { "$date" : "2021-07-29T15:50:44Z" },
        "decripcion": "\nI've slightly modified Jaymon's answer for people who want really simple validation in the form of:\nanystring@anystring.anystring\n\nThe regular expression:\n/\\S+@\\S+\\.\\S+/\n\nTo prevent matching multiple @ signs:\n/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n\nExample JavaScript function:\n\n\nfunction validateEmail(email) \n    {\n        var re = /\\S+@\\S+\\.\\S+/;\n        return re.test(email);\n    }\n    \nconsole.log(validateEmail('anystring@anystring.anystring'));\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 1063,
        "comentarios": [
            {
                "decripcion": "You can implement something 20x as long that might cause problems for a few users and might not be valid in the future, or you can grab ImmortalFirefly's version to make sure they at least put in the effort to make it look real. Depending on your application it may be more likely to come across  someone will get mad because you don't accept their unconventional email, rather than someone who causes problems by entering email addresses that don't really exist (which they can do anyways by entering a 100% valid RFC2822 email address but using an unregistered username or domain). Upvoted!",
                "fecha": { "$date" : "2012-07-30T18:20:04Z" },
                "usuario": "user83358",
                "usuario_id": 2202
            },
            {
                "decripcion": "@ImmortalFirefly, the regex you provided will actually match name@again@example.com. Try pasting your line into a JavaScript console. I believe your intention was to match only the entire text, which would require the beginning of text '^' and end of text '$' operators. The one I'm using is /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test('name@again@example.com')",
                "fecha": { "$date" : "2012-08-09T14:58:13Z" },
                "usuario": "OregonTrail",
                "usuario_id": 2203
            },
            {
                "decripcion": "The second regexp does not require a top-level domain, i.e. it accepts user@domain. But AFAIK this is actually a valid e-mail address, although uncommon. The first regexp requires a TLD, so it doesn't cover these types of addresses.",
                "fecha": { "$date" : "2021-07-15T13:00:42Z" },
                "usuario": "waldgeist",
                "usuario_id": 2204
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1245,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nJust for completeness, here you have another RFC 2822 compliant regex\n\nThe official standard is known as RFC 2822. It describes the syntax that valid email addresses must adhere to. You can (but you shouldn't \u2014 read on) implement it with this regular expression:\n(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\n(...) We get a more practical implementation of RFC 2822 if we omit the syntax using double quotes and square brackets. It will still match 99.99% of all email addresses in actual use today.\n[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\nA further change you could make is to allow any two-letter country code top level domain, and only specific generic top level domains. This regex filters dummy email addresses like asdf@adsf.adsf. You will need to update it as new top-level domains are added.\n[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+(?:[A-Z]{2}|com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|museum)\\b\nSo even when following official standards, there are still trade-offs to be made. Don't blindly copy regular expressions from online libraries or discussion forums. Always test them on your own data and with your own applications.\n\nEmphasis mine\n    ",
        "votes": 847,
        "comentarios": [
            {
                "decripcion": "NB: \"In actual use today\" may have been valid when the code was written, back in 200x. The code will likely remain in use beyond that specific year. (If I had a dime for every \"meh, no one will ever use a 4+-letter TLD except those specific ones\" I had to fix, I could corner the world's copper and nickel market ;))",
                "fecha": { "$date" : "2012-06-13T15:51:34Z" },
                "usuario": "Piskvor left the building",
                "usuario_id": 2130
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1246,
        "fecha": { "$date" : "2018-11-28T10:31:58Z" },
        "decripcion": "\nWow, there are lots of complexity here. If all you want to do is just catch the most obvious syntax errors, I would do something like this:\n\n^\\S+@\\S+$\n\n\nIt usually catches the most obvious errors that the user makes and assures that the form is mostly right, which is what JavaScript validation is all about.\n    ",
        "votes": 434,
        "comentarios": [
            {
                "decripcion": "+1 as sending email and seeing what happens is the only real sure way to validate an email address , theres no need to do more than a simple regex match.",
                "fecha": { "$date" : "2012-07-19T07:14:33Z" },
                "usuario": "kommradHomer",
                "usuario_id": 2205
            },
            {
                "decripcion": "But it won't accept \"Mohit Atray\"@gmail.com because it contains space character. Maybe we should just use /^\\S.*@\\S+$/ regex.",
                "fecha": { "$date" : "2021-07-08T19:57:10Z" },
                "usuario": "Mohit Atray",
                "usuario_id": 2206
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1247,
        "fecha": { "$date" : "2009-05-02T17:18:29Z" },
        "decripcion": "\nThere's something you have to understand the second you decide to use a regular expression to validate emails: It's probably not a good idea. Once you have come to terms with that, there are many implementations out there that can get you halfway there, this article sums them up nicely.\n\nIn short, however, the only way to be absolutely, positively sure that what the user entered is in fact an email is to actually send an email and see what happens. Other than that it's all just guesses.\n    ",
        "votes": 349,
        "comentarios": [
            {
                "decripcion": "@kommradHomer -- a \"regex invalid\" address is almost always valid, because whatever regex you use to validate an email address is almost certainly wrong and will exclude valid email addresses. An email address is name_part@domain_part and practically anything, including an @, is valid in the name_part; The address foo@bar@machine.subdomain.example.museum is legal, although it must be escaped as foo\\@bar@machine..... Once the email reaches the domain e.g. 'example.com' that domain can route the mail \"locally\" so \"strange\" usernames and hostnames can exist.",
                "fecha": { "$date" : "2013-03-07T01:40:17Z" },
                "usuario": "Stephen P",
                "usuario_id": 681
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1248,
        "fecha": { "$date" : "2020-12-03T21:01:11Z" },
        "decripcion": "\nHTML5 itself has email validation. If your browser supports HTML5 then you can use the following code.\n<form><input type=\"email\" placeholder=\"me@example.com\" required>\n    <input type=\"submit\">\n</form>\n\njsFiddle link\nFrom the HTML5 spec:\n\nA valid e-mail address is a string that matches the email production of the following ABNF, the character set for which is Unicode.\nemail   = 1*( atext / \".\" ) \"@\" label *( \".\" label )\nlabel   = let-dig [ [ ldh-str ] let-dig ]  ; limited to a length of 63 characters by RFC 1034 section 3.5\natext   = < as defined in RFC 5322 section 3.2.3 >\nlet-dig = < as defined in RFC 1034 section 3.5 >\nldh-str = < as defined in RFC 1034 section 3.5 >\n\nThis requirement is a willful violation of RFC 5322, which defines a syntax for e-mail addresses that is simultaneously too strict (before the \"@\" character), too vague (after the \"@\" character), and too lax (allowing comments, whitespace characters, and quoted strings in manners unfamiliar to most users) to be of practical use here.\nThe following JavaScript- and Perl-compatible regular expression is an implementation of the above definition.\n/^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n\n\n    ",
        "votes": 245,
        "comentarios": [
            {
                "decripcion": "this is good, but the problem with this is that it must be inside a form tag and submitted by a submit input, which not everyone has the luxury of doing. Also, you can't really style the error message.",
                "fecha": { "$date" : "2011-11-12T00:08:32Z" },
                "usuario": "Jason",
                "usuario_id": 2207
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1249,
        "fecha": { "$date" : "2015-09-21T01:52:30Z" },
        "decripcion": "\nI have found this to be the best solution:\n\n/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n\n\nIt allows the following formats:\n\n1.  prettyandsimple@example.com\n2.  very.common@example.com\n3.  disposable.style.email.with+symbol@example.com\n4.  other.email-with-dash@example.com\n9.  #!$%&'*+-/=?^_`{}|~@example.org\n6.  \"()[]:,;@\\\\\\\"!#$%&'*+-/=?^_`{}| ~.a\"@example.org\n7.  \" \"@example.org (space between the quotes)\n8.  \u00fc\u00f1\u00ee\u00e7\u00f8\u00f0\u00e9@example.com (Unicode characters in local part)\n9.  \u00fc\u00f1\u00ee\u00e7\u00f8\u00f0\u00e9@\u00fc\u00f1\u00ee\u00e7\u00f8\u00f0\u00e9.com (Unicode characters in domain part)\n10. Pel\u00e9@example.com (Latin)\n11. \u03b4\u03bf\u03ba\u03b9\u03bc\u03ae@\u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1.\u03b4\u03bf\u03ba\u03b9\u03bc\u03ae (Greek)\n12. \u6211\u8cb7@\u5c4b\u4f01.\u9999\u6e2f (Chinese)\n13. \u7532\u6590@\u9ed2\u5ddd.\u65e5\u672c (Japanese)\n14. \u0447\u0435\u0431\u0443\u0440\u0430\u0448\u043a\u0430@\u044f\u0449\u0438\u043a-\u0441-\u0430\u043f\u0435\u043b\u044c\u0441\u0438\u043d\u0430\u043c\u0438.\u0440\u0444 (Cyrillic)\n\n\nIt's clearly versatile and allows the all-important international characters, while still enforcing the basic anything@anything.anything format. It will block spaces which are technically allowed by RFC, but they are so rare that I'm happy to do this.\n    ",
        "votes": 173,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1250,
        "fecha": { "$date" : "2018-07-25T07:07:40Z" },
        "decripcion": "\nIn modern browsers you can build on top of @Sushil's answer with pure JavaScript and the DOM:\n\nfunction validateEmail(value) {\n  var input = document.createElement('input');\n\n  input.type = 'email';\n  input.required = true;\n  input.value = value;\n\n  return typeof input.checkValidity === 'function' ? input.checkValidity() : /\\S+@\\S+\\.\\S+/.test(value);\n}\n\n\nI've put together an example in the fiddle http://jsfiddle.net/boldewyn/2b6d5/. Combined with feature detection and the bare-bones validation from Squirtle's Answer, it frees you from the regular expression massacre and does not bork on old browsers.\n    ",
        "votes": 108,
        "comentarios": [
            {
                "decripcion": "This should be the accepted answer by a long shot. Let browser vendors with on staff regex gurus maintain massively complicated regexes for email addresses. Your average frontend dev building a form for collecting email does not often have time to master verbose regex. Yes you have to rely on the regex the vendor provides, but if you need something more complex, do it on the server and or send an actual email and check the response",
                "fecha": { "$date" : "2021-07-16T11:04:36Z" },
                "usuario": "Matt",
                "usuario_id": 1159
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1251,
        "fecha": { "$date" : "2015-02-25T15:18:50Z" },
        "decripcion": "\nThis is the correct RFC822 version.\n\nfunction checkEmail(emailAddress) {\n  var sQtext = '[^\\\\x0d\\\\x22\\\\x5c\\\\x80-\\\\xff]';\n  var sDtext = '[^\\\\x0d\\\\x5b-\\\\x5d\\\\x80-\\\\xff]';\n  var sAtom = '[^\\\\x00-\\\\x20\\\\x22\\\\x28\\\\x29\\\\x2c\\\\x2e\\\\x3a-\\\\x3c\\\\x3e\\\\x40\\\\x5b-\\\\x5d\\\\x7f-\\\\xff]+';\n  var sQuotedPair = '\\\\x5c[\\\\x00-\\\\x7f]';\n  var sDomainLiteral = '\\\\x5b(' + sDtext + '|' + sQuotedPair + ')*\\\\x5d';\n  var sQuotedString = '\\\\x22(' + sQtext + '|' + sQuotedPair + ')*\\\\x22';\n  var sDomain_ref = sAtom;\n  var sSubDomain = '(' + sDomain_ref + '|' + sDomainLiteral + ')';\n  var sWord = '(' + sAtom + '|' + sQuotedString + ')';\n  var sDomain = sSubDomain + '(\\\\x2e' + sSubDomain + ')*';\n  var sLocalPart = sWord + '(\\\\x2e' + sWord + ')*';\n  var sAddrSpec = sLocalPart + '\\\\x40' + sDomain; // complete RFC822 email address spec\n  var sValidEmail = '^' + sAddrSpec + '$'; // as whole string\n\n  var reValidEmail = new RegExp(sValidEmail);\n\n  return reValidEmail.test(emailAddress);\n}\n\n    ",
        "votes": 75,
        "comentarios": [
            {
                "decripcion": "IDN addresses are not validated (info@\u00fcp\u00f6\u00fc.com)",
                "fecha": { "$date" : "2014-08-17T17:38:38Z" },
                "usuario": "D.A.H",
                "usuario_id": 2208
            },
            {
                "decripcion": "'a@a' returns valid: jsfiddle.net/pmiranda/guoyh4dv",
                "fecha": { "$date" : "2021-02-02T18:18:54Z" },
                "usuario": "pmiranda",
                "usuario_id": 2209
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1252,
        "fecha": { "$date" : "2013-08-24T20:45:54Z" },
        "decripcion": "\nJavaScript can match a regular expression:\n\nemailAddress.match( / some_regex /);\n\n\nHere's an RFC22 regular expression for emails:\n\n^((?>[a-zA-Z\\d!#$%&'*+\\-/=?^_`{|}~]+\\x20*|\"((?=[\\x01-\\x7f])[^\"\\\\]|\\\\[\\x01-\\x7f])*\n\"\\x20*)*(?<angle><))?((?!\\.)(?>\\.?[a-zA-Z\\d!#$%&'*+\\-/=?^_`{|}~]+)+|\"((?=[\\x01-\\x\n7f])[^\"\\\\]|\\\\[\\x01-\\x7f])*\")@(((?!-)[a-zA-Z\\d\\-]+(?<!-)\\.)+[a-zA-Z]{2,}|\\[(((?(?<\n!\\[)\\.)(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)){4}|[a-zA-Z\\d\\-]*[a-zA-Z\\d]:((?=[\\x01-\\x7f])\n[^\\\\\\[\\]]|\\\\[\\x01-\\x7f])+)\\])(?(angle)>)$\n\n    ",
        "votes": 72,
        "comentarios": [
            {
                "decripcion": "@Kato: It uses some incompatible extensions, including (?> to stop backtracking and (?<angle><)\u2026(?(angle)>) to avoid providing a lengthy |.",
                "fecha": { "$date" : "2014-03-09T20:05:57Z" },
                "usuario": "Ry-\u2666",
                "usuario_id": 2210
            },
            {
                "decripcion": "The match method returns an array, the test method, which returns a boolean, would be better for this situation.",
                "fecha": { "$date" : "2020-11-07T20:43:27Z" },
                "usuario": "iPzard",
                "usuario_id": 2211
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1253,
        "fecha": { "$date" : "2018-10-31T09:15:21Z" },
        "decripcion": "\nCorrect validation of email address in compliance with the RFCs is not something that can be achieved with a one-liner regular expression. An article with the best solution I've found in PHP is What is a valid email address?. Obviously, it has been ported to Java. I think the function is too complex to be ported and used in JavaScript. JavaScript/node.js port: https://www.npmjs.com/package/email-addresses.\n\nA good practice is to validate your data on the client, but double-check the validation on the server. With this in mind, you can simply check whether a string looks like a valid email address on the client and perform the strict check on the server.\n\nHere's the JavaScript function I use to check if a string looks like a valid mail address:\n\nfunction looksLikeMail(str) {\n    var lastAtPos = str.lastIndexOf('@');\n    var lastDotPos = str.lastIndexOf('.');\n    return (lastAtPos < lastDotPos && lastAtPos > 0 && str.indexOf('@@') == -1 && lastDotPos > 2 && (str.length - lastDotPos) > 2);\n}\n\n\nExplanation:\n\n\nlastAtPos < lastDotPos: Last @ should be before last . since @ cannot be part of server name (as far as I know).\nlastAtPos > 0: There should be something (the email username) before the last @.\nstr.indexOf('@@') == -1: There should be no @@ in the address. Even if @ appears as the last character in email username, it has to be quoted so \" would be between that @ and the last @ in the address.\nlastDotPos > 2: There should be at least three characters before the last dot, for example a@b.com.\n(str.length - lastDotPos) > 2: There should be enough characters after the last dot to form a two-character domain. I'm not sure if the brackets are necessary.\n\n    ",
        "votes": 71,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1254,
        "fecha": { "$date" : "2020-09-20T22:06:14Z" },
        "decripcion": "\nAll email addresses contain an 'at' (i.e. @) symbol. Test that necessary condition:\nemail.indexOf(\"@\") > 0\n\nDon't bother with anything more complicated. Even if you could perfectly determine whether an email is RFC-syntactically valid, that wouldn't tell you whether it belongs to the person who supplied it. That's what really matters.\nTo test that, send a validation message.\n    ",
        "votes": 67,
        "comentarios": [
            {
                "decripcion": "what if there will be more than one '@' symbol? other restricted symbols? This validation cannot be trusted...",
                "fecha": { "$date" : "2015-04-26T10:14:10Z" },
                "usuario": "iwazovsky",
                "usuario_id": 2212
            },
            {
                "decripcion": "is a@b valid email ?",
                "fecha": { "$date" : "2020-12-20T10:17:24Z" },
                "usuario": "Aravin",
                "usuario_id": 2213
            },
            {
                "decripcion": "Its better than most, yes you could have more than one @ with this, but that could also be a valid email like \"@\"@mydomain.jskd or elldffs(this is @ comment)@mydomain.kjfdij. Both are syntactically valid emails",
                "fecha": { "$date" : "2021-02-16T18:37:11Z" },
                "usuario": "David M\u00e5rtensson",
                "usuario_id": 2214
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1255,
        "fecha": { "$date" : "2009-05-02T17:19:46Z" },
        "decripcion": "\nThis was stolen from http://codesnippets.joyent.com/posts/show/1917\n\nemail = $('email');\nfilter = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\nif (filter.test(email.value)) {\n  // Yay! valid\n  return true;\n}\nelse\n  {return false;}\n\n    ",
        "votes": 62,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1256,
        "fecha": { "$date" : "2021-06-11T08:42:42Z" },
        "decripcion": "\nDo this:\n^([a-zA-Z0-9!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?)$\n\nIt's based on RFC 2822\nTest it at https://regex101.com/r/857lzc/1\nOften when storing email addresses in the database I make them lowercase and, in practice, regexs can usually be marked case insensitive. In those cases this is slightly shorter:\n[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\n\nHere's an example of it being used in JavaScript (with the case insensitive flag i at the end).\nvar emailCheck=/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;\nconsole.log( emailCheck.test('some.body@domain.co.uk') );\n\nNote:\nTechnically some emails can include quotes in the section before the @ symbol with escape characters inside the quotes (so your email user can be obnoxious and contain stuff like @ and \"...\" as long as it's written in quotes). NOBODY DOES THIS EVER! It's obsolete. But, it IS included in the true RFC 2822 standard and omitted here.\nNote 2:\nThe beginning of an email (before the @ sign) can be case sensitive (via the spec). However, anyone with a case-sensitive email is probably used to having issues, and, in practice, case insensitive is a safe assumption. More info: Are email addresses case sensitive?\nMore info: http://www.regular-expressions.info/email.html\n    ",
        "votes": 61,
        "comentarios": [
            {
                "decripcion": "gautam+@Gmail.com - showing is valid which should not",
                "fecha": { "$date" : "2021-08-06T06:33:00Z" },
                "usuario": "Gautam Parmar",
                "usuario_id": 2201
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1257,
        "fecha": { "$date" : "2016-11-13T10:21:15Z" },
        "decripcion": "\nI'm really looking forward to solve this problem.\nSo I modified email validation regular expression above \n\n\nOriginal\n/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\nModified\n/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+[^<>()\\.,;:\\s@\\\"]{2,})$/\n\n\nto pass the examples in Wikipedia Email Address.\n\nAnd you can see the result in here.\n\n\n    ",
        "votes": 46,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1258,
        "fecha": { "$date" : "2014-03-14T16:30:43Z" },
        "decripcion": "\nSimply check out if the entered email address is valid or not using HTML.\n\n<input type=\"email\"/>\n\n\nThere isn't any need to write a function for validation.\n    ",
        "votes": 26,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1259,
        "fecha": { "$date" : "2015-03-09T17:24:19Z" },
        "decripcion": "\nYou should not use regular expressions to validate an input string to check if it's an email. It's too complicated and would not cover all the cases.\n\nNow since you can only cover 90% of the cases, write something like:\n\nfunction isPossiblyValidEmail(txt) {\n   return txt.length > 5 && txt.indexOf('@')>0;\n}\n\n\nYou can refine it. For instance, 'aaa@' is valid. But overall you get the gist. And don't get carried away... A simple 90% solution is better than 100% solution that does not work. \n\nThe world needs simpler code...\n    ",
        "votes": 26,
        "comentarios": [
            {
                "decripcion": "This allows the entry of so many invalid email addresses it is useless advice.",
                "fecha": { "$date" : "2012-01-06T23:07:44Z" },
                "usuario": "cazlab",
                "usuario_id": 2215
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1260,
        "fecha": { "$date" : "2018-04-15T10:15:03Z" },
        "decripcion": "\nIt's hard to get an email validator 100% correct. The only real way to get it correct would be to send a test email to the account. That said, there are a few basic checks that can help make sure that you're getting something reasonable.\n\nSome things to improve:\n\nInstead of new RegExp, just try writing the regexp out like this:\n\nif (reg.test(/@/))\n\n\nSecond, check to make sure that a period comes after the @ sign, and make sure that there are characters between the @s and periods. \n    ",
        "votes": 20,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1261,
        "fecha": { "$date" : "2018-04-15T10:22:32Z" },
        "decripcion": "\nThis is how node-validator does it:\n\n/^(?:[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+\\.)*[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/\n\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1262,
        "fecha": { "$date" : "2018-07-02T01:47:08Z" },
        "decripcion": "\nA solution that does not check the existence of the TLD is incomplete.\n\nAlmost all answers to this questions suggest using Regex to validate emails addresses. I think Regex is only good for a rudimentary validation. It seems that the checking validation of email addresses is actually two separate problems:\n\n1- Validation of email format: Making sure if the email complies with the format and pattern of emails in RFC 5322 and if the TLD actually exists. A list of all valid TLDs can be found here.\n\nFor example, although the address example@example.ccc will pass the regex, it is not a valid email, because ccc is not a top-level domain by IANA.\n\n2- Making sure the email actually exists: For doing this, the only option is to send the users an email.\n    ",
        "votes": 15,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1263,
        "fecha": { "$date" : "2018-04-15T10:23:17Z" },
        "decripcion": "\nUse this code inside your validator function:\n\nvar emailID = document.forms[\"formName\"][\"form element id\"].value;\natpos = emailID.indexOf(\"@\");\ndotpos = emailID.lastIndexOf(\".\");\nif (atpos < 1 || ( dotpos - atpos < 2 ))\n{\n    alert(\"Please enter correct email ID\")\n    return false;\n}\n\n\nElse you can use jQuery. Inside rules define:\n\neMailId: {\n    required: true,\n    email: true\n}\n\n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1264,
        "fecha": { "$date" : "2018-08-07T14:08:39Z" },
        "decripcion": "\nRegex update 2018! try this\n\nlet val = 'email@domain.com';\nif(/^[a-z0-9][a-z0-9-_\\.]+@([a-z]|[a-z0-9]?[a-z0-9-]+[a-z0-9])\\.[a-z0-9]{2,10}(?:\\.[a-z]{2,10})?$/.test(val)) {\n   console.log('passed');\n}\n\n\ntypscript version complete\n\n//\nexport const emailValid = (val:string):boolean => /^[a-z0-9][a-z0-9-_\\.]+@([a-z]|[a-z0-9]?[a-z0-9-]+[a-z0-9])\\.[a-z0-9]{2,10}(?:\\.[a-z]{2,10})?$/.test(val);\n\n\nmore info https://git.io/vhEfc\n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1265,
        "fecha": { "$date" : "2016-06-01T05:12:03Z" },
        "decripcion": "\nIn contrast to squirtle, here is a complex solution, but it does a mighty fine job of validating emails properly:\n\nfunction isEmail(email) { \n    return /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i.test(email);\n} \n\n\nUse like so:\n\nif (isEmail('youremail@yourdomain.com')){ console.log('This is email is valid'); }\n\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1266,
        "fecha": { "$date" : "2019-07-05T11:09:22Z" },
        "decripcion": "\nRegex for validating email address\n\n[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])+\n\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1267,
        "fecha": { "$date" : "2010-05-28T22:05:45Z" },
        "decripcion": "\nHere is a very good discussion about using regular expressions to validate email addresses; \"Comparing E-mail Address Validating Regular Expressions\"\n\nHere is the current top expression, that is JavaScript compatible, for reference purposes:\n\n/^[-a-z0-9~!$%^&*_=+}{\\'?]+(\\.[-a-z0-9~!$%^&*_=+}{\\'?]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$/i\n\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "Extremely outdated now.",
                "fecha": { "$date" : "2021-09-03T19:02:16Z" },
                "usuario": "Slbox",
                "usuario_id": 2216
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1268,
        "fecha": { "$date" : "2010-10-01T09:37:31Z" },
        "decripcion": "\nApparently, that's it:\n\n/^([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i\n\n\nTaken from http://fightingforalostcause.net/misc/2006/compare-email-regex.php on Oct 1 '10.\n\nBut, of course, that's ignoring internationalization.\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1269,
        "fecha": { "$date" : "2014-03-14T16:29:29Z" },
        "decripcion": "\nMy knowledge of regular expressions is not that good. That's why I check the general syntax with a simple regular expression first and check more specific options with other functions afterwards. This may not be not the best technical solution, but this way I'm way more flexible and faster.\n\nThe most common errors I've come across are spaces (especially at the beginning and end) and occasionally a double dot.\n\nfunction check_email(val){\n    if(!val.match(/\\S+@\\S+\\.\\S+/)){ // Jaymon's / Squirtle's solution\n        // Do something\n        return false;\n    }\n    if( val.indexOf(' ')!=-1 || val.indexOf('..')!=-1){\n        // Do something\n        return false;\n    }\n    return true;\n}\n\ncheck_email('check@thiscom'); // Returns false\ncheck_email('check@this..com'); // Returns false\ncheck_email(' check@this.com'); // Returns false\ncheck_email('check@this.com'); // Returns true\n\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1270,
        "fecha": { "$date" : "2017-06-21T09:10:18Z" },
        "decripcion": "\nWikipedia standard mail syntax :\n\nhttps://en.wikipedia.org/wiki/Email_address#Examples\nhttps://fr.wikipedia.org/wiki/Adresse_%C3%A9lectronique#Syntaxe_exacte\n\nfunction validMail(mail)\n{\n    return /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+([^<>()\\.,;:\\s@\\\"]{2,}|[\\d\\.]+))$/.test(mail);\n}\n\n// VALID MAILS\n\nvalidMail('Abc@example.com') // Return true\nvalidMail('Abc@example.com.') // Return true\nvalidMail('Abc@10.42.0.1') // Return true\nvalidMail('user@localserver') // Return true\nvalidMail('Abc.123@example.com') // Return true\nvalidMail('user+mailbox/department=shipping@example.com') // Return true\nvalidMail('\"very.(),:;<>[]\\\".VERY.\\\"very@\\\\ \\\"very\\\".unusual\"@strange.example.com') // Return true\nvalidMail('!#$%&\\'*+-/=?^_`.{|}~@example.com') // Return true\nvalidMail('\"()<>[]:,;@\\\\\\\"!#$%&\\'-/=?^_`{}| ~.a\"@example.org') // Return true\nvalidMail('\"Abc@def\"@example.com') // Return true\nvalidMail('\"Fred Bloggs\"@example.com') // Return true\nvalidMail('\"Joe.\\\\Blow\"@example.com') // Return true\nvalidMail('Lo\u00efc.Accentu\u00e9@voil\u00e0.fr') // Return true\nvalidMail('\" \"@example.org') // Return true\nvalidMail('user@[IPv6:2001:DB8::1]') // Return true\n\n// INVALID MAILS\n\nvalidMail('Abc.example.com') // Return false\nvalidMail('A@b@c@example.com') // Return false\nvalidMail('a\"b(c)d,e:f;g<h>i[j\\k]l@example.com') // Return false\nvalidMail('just\"not\"right@example.com') // Return false\nvalidMail('this is\"not\\allowed@example.com') // Return false\nvalidMail('this\\ still\\\"not\\\\allowed@example.com') // Return false\nvalidMail('john..doe@example.com') // Return false\nvalidMail('john.doe@example..com') // Return false\n\n\nShow this test : https://regex101.com/r/LHJ9gU/1\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1271,
        "fecha": { "$date" : "2018-08-02T23:15:08Z" },
        "decripcion": "\nI was looking for a Regex in JS that passes all Email Address test cases:\n\n\nemail@example.com Valid email\nfirstname.lastname@example.com  Email contains dot in the address field\nemail@subdomain.example.com Email contains dot with subdomain\nfirstname+lastname@example.com   Plus sign is considered valid character\nemail@192.0.2.123 Domain is valid IP address\nemail@[192.0.2.123] Square bracket around IP address is considered valid\n\u201cemail\u201d@example.com Quotes around email is considered valid\n1234567890@example.com Digits in address are valid\nemail@domain-one.example Dash in domain name is valid\n_______@example.com Underscore in the address field is valid\nemail@example.name .name is valid Top Level Domain name\nemail@example.co.jp Dot in Top Level Domain name also considered valid (using co.jp as example here)\nfirstname-lastname@example.com Dash in address field is valid\n\n\nHere we go :\n\nhttp://regexr.com/3f07j\n\nOR regex:\n\nRegex = /(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@[*[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+]*/\n\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1272,
        "fecha": { "$date" : "2021-08-11T11:55:55Z" },
        "decripcion": "\n\n\nvar testresults\n\nfunction checkemail() {\n  var str = document.validation.emailcheck.value\n  var filter = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i\n  if (filter.test(str))\n    testresults = true\n  else {\n    alert(\"Please input a valid email address!\")\n    testresults = false\n  }\n  return (testresults)\n}\n\nfunction checkbae() {\n  if (document.layers || document.getElementById || document.all)\n    return checkemail()\n  else\n    return true\n}\n<form name=\"validation\" onSubmit=\"return checkbae()\">\n  Please input a valid email address:<br />\n\n  <input type=\"text\" size=18 name=\"emailcheck\">\n  <input type=\"submit\" value=\"Submit\">\n</form>\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1273,
        "fecha": { "$date" : "2016-03-10T10:47:57Z" },
        "decripcion": "\nBetter option... just strip all non-digit characters on input (except 'x' and leading '+' signs), taking care because of the British tendency to write numbers in the non-standard form +44 (0) ... when asked to use the international prefix (in that specific case, you should discard the (0) entirely).\n\nThen, you end up with values like:\n\n 12345678901\n 12345678901x1234\n 345678901x1234\n 12344678901\n 12345678901\n 12345678901\n 12345678901\n +4112345678\n +441234567890\n\n\nThen when you display, reformat to your hearts content. e.g.\n\n  1 (234) 567-8901\n  1 (234) 567-8901 x1234\n\n    ",
        "votes": 537,
        "comentarios": [
            {
                "decripcion": "The formatting code is going to be a waste of time if the numbers are allowed to come from outside the US.",
                "fecha": { "$date" : "2009-07-21T12:13:05Z" },
                "usuario": "Daniel Earwicker",
                "usuario_id": 2218
            },
            {
                "decripcion": "This is good and all, but it doesn't validate what was entered was actually a phone number. For example, what if the user doesn't enter the requisite 10 digits? This should be combined with good regex validation.",
                "fecha": { "$date" : "2010-07-29T13:40:41Z" },
                "usuario": "Hugh Jeffner",
                "usuario_id": 2219
            },
            {
                "decripcion": "Considering the question was about validation - this is a really really bad answer.",
                "fecha": { "$date" : "2012-03-30T17:12:12Z" },
                "usuario": "PlexQ",
                "usuario_id": 2220
            },
            {
                "decripcion": "@PlexQ I disagree.  The original problem is trying to handle phone number validation because it was trying to handle all the possible formatting options.  Rather than try to solve all that, take the input and \"pre-strip\" it of all formatting fluff until you have just the \"number\". Doing this solves 2 problems - testing the result is now easy and you can now ensure that values rendered back out for display can all be formatted consistently.  The first comment on this answer about the \"Complicator's Gloves\" is a good read... sometimes the answer to a problem is to approach it differently.",
                "fecha": { "$date" : "2012-03-30T20:19:04Z" },
                "usuario": "scunliffe",
                "usuario_id": 2221
            },
            {
                "decripcion": "How the hell is this such a highly voted answer? This doesn't validate anything. What's worse is all the other phone number validation questions reference this one...",
                "fecha": { "$date" : "2014-06-19T18:37:14Z" },
                "usuario": "jlars62",
                "usuario_id": 2222
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1274,
        "fecha": { "$date" : "2010-09-01T22:06:55Z" },
        "decripcion": "\nIt turns out that there's something of a spec for this, at least for North America, called the NANP. \n\nYou need to specify exactly what you want. What are legal delimiters? Spaces, dashes, and periods? No delimiter allowed? Can one mix delimiters (e.g., +0.111-222.3333)? How are extensions (e.g., 111-222-3333 x 44444) going to be handled? What about special numbers, like 911? Is the area code going to be optional or required? \n\nHere's a regex for a 7 or 10 digit number, with extensions allowed, delimiters are spaces, dashes, or periods:\n\n^(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(\\d+))?$\n\n    ",
        "votes": 319,
        "comentarios": [
            {
                "decripcion": "here it is without the extension section (I make my users enter ext in a separate field): ^(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})$",
                "fecha": { "$date" : "2010-05-04T04:37:59Z" },
                "usuario": "aarona",
                "usuario_id": 2223
            },
            {
                "decripcion": "Here is a version that only matches 10 digit phone numbers (not 7 digit like 843-1212):  /(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})/",
                "fecha": { "$date" : "2010-09-07T19:32:24Z" },
                "usuario": "Brian Armstrong",
                "usuario_id": 2224
            },
            {
                "decripcion": "10 digit accepts () around area code, and dosen't allow preceeding 1 as country code (?:(?:(\\s*\\(?([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\)?\\s*(?:[.-]\\s*)?)([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})",
                "fecha": { "$date" : "2011-01-09T05:09:58Z" },
                "usuario": "Brooke.",
                "usuario_id": 2225
            },
            {
                "decripcion": "@StevenSoroka I have had Jeffrey Friedl's book beside me on my desk for the past two years, as regular expressions are a major part of my work. It takes a good while to really understand regular expressions. Sometimes, the readers of this site are simply looking for an existing soltuion, rather than writing their own, especially in domains with lots of corner cases, such as phone number representations.",
                "fecha": { "$date" : "2013-03-28T21:06:21Z" },
                "usuario": "Justin R.",
                "usuario_id": 2226
            },
            {
                "decripcion": "@fatcat1111 I understand that, but majority of the responses here are \"me too\" type of one-off regular expressions that likely don't fit any of your corner cases. These then end up on all the websites I'm trying to use and I can't enter my zip code or phone number or email address because someone used a half-baked regular-expression (eg: + is a valid character in email addresses).  The best responses on this page point users to libraries, not to napkin-scrawled regexes.",
                "fecha": { "$date" : "2013-04-05T21:49:56Z" },
                "usuario": "Steven Soroka",
                "usuario_id": 2227
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1275,
        "fecha": { "$date" : "2019-12-18T00:04:29Z" },
        "decripcion": "\n.*\n\n\nIf the users want to give you their phone numbers, then trust them to get it right.  If they do not want to give it to you then forcing them to enter a valid number will either send them to a competitor's site or make them enter a random string that fits your regex.  I might even be tempted to look up the number of a premium rate horoscope hotline and enter that instead.\n\nI would also consider any of the following as valid entries on a web site:\n\n\"123 456 7890 until 6pm, then 098 765 4321\"  \n\"123 456 7890 or try my mobile on 098 765 4321\"  \n\"ex-directory - mind your own business\"\n\n    ",
        "votes": 316,
        "comentarios": [
            {
                "decripcion": "I agree with the sentiment here, but sometimes it's nice to perform validation when the phone number is actually going to be used for something important in the interest of the user. Best example here is credit card authorization for a purchase. If the phone number is wrong, the auth might fail.",
                "fecha": { "$date" : "2010-11-10T18:21:24Z" },
                "usuario": "Pointy",
                "usuario_id": 744
            },
            {
                "decripcion": "If the user doesn't want to enter his phone number you can just allow the field to be optional, but is it to much to ask the user to enter a valid phone number if they are going to enter one?",
                "fecha": { "$date" : "2010-12-06T19:41:50Z" },
                "usuario": "Joel McBeth",
                "usuario_id": 2228
            },
            {
                "decripcion": "Also a role of validation is simply to remind people to add area codes etc that they might not otherwise remember to add, but which cannot possibly be guessed after the fact.",
                "fecha": { "$date" : "2011-02-23T00:09:39Z" },
                "usuario": "Ben McIntyre",
                "usuario_id": 2229
            },
            {
                "decripcion": "@Pointy But regex validation won't help you. The one and the only way to actually validate if the phone number is correct is to actually send a message to it (in case of mobile) AND make sure the user confirms using some kind of verification code. This is what you do when the number correctness is important. Everything else is just for user's convenience to protect against some (but not all) typos and does not validate anything.",
                "fecha": { "$date" : "2012-11-16T06:40:19Z" },
                "usuario": "Alex B",
                "usuario_id": 2230
            },
            {
                "decripcion": "Cool. My phone number is 1' OR 1=1 -- PWNED. See xkcd.com/327  and owasp.org/index.php/Testing_for_SQL_Injection_(OWASP-DV-005)",
                "fecha": { "$date" : "2013-09-19T08:31:24Z" },
                "usuario": "Aaron Newton",
                "usuario_id": 2231
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1276,
        "fecha": { "$date" : "2019-02-18T18:36:57Z" },
        "decripcion": "\nI would also suggest looking at the \"libphonenumber\" Google Library. I know it is not regex but it does exactly what you want. \n\nFor example, it will recognize that:\n\n15555555555\n\n\nis a possible number but not a valid number. It also supports countries outside the US. \n\nHighlights of functionality:\n\n\nParsing/formatting/validating phone numbers for all countries/regions of the world.\ngetNumberType - gets the type of the number based on the number itself; able to distinguish Fixed-line, Mobile, Toll-free, Premium Rate, Shared Cost, VoIP and Personal Numbers (whenever feasible).\nisNumberMatch - gets a confidence level on whether two numbers could be the same.\ngetExampleNumber/getExampleNumberByType - provides valid example numbers for all countries/regions, with the option of specifying which type of example phone number is needed.\nisPossibleNumber - quickly guessing whether a number is a possible phonenumber by using only the length information, much faster than a full validation.\nisValidNumber - full validation of a phone number for a region using length and prefix information.\nAsYouTypeFormatter - formats phone numbers on-the-fly when users enter each digit.\nfindNumbers - finds numbers in text input.\nPhoneNumberOfflineGeocoder - provides geographical information related to a phone number. \n\n\nExamples\n\nThe biggest problem with phone number validation is it is very culturally dependant.\n\n\nAmerica\n\n\n(408) 974\u20132042 is a valid US number\n(999) 974\u20132042 is not a valid US number\n\nAustralia\n\n\n0404 999 999 is a valid Australian number\n(02) 9999 9999 is also a valid Australian number\n(09) 9999 9999 is not a valid Australian number\n\n\n\nA regular expression is fine for checking the format of a phone number, but it's not really going to be able to check the validity of a phone number.\n\nI would suggest skipping a simple regular expression to test your phone number against, and using a library such as Google's libphonenumber (link to GitHub project).\n\nIntroducing libphonenumber!\n\nUsing one of your more complex examples, 1-234-567-8901 x1234, you get the following data out of libphonenumber (link to online demo):\n\nValidation Results\n\nResult from isPossibleNumber()  true\nResult from isValidNumber()     true\n\nFormatting Results:\n\nE164 format                    +12345678901\nOriginal format                (234) 567-8901 ext. 123\nNational format                (234) 567-8901 ext. 123\nInternational format           +1 234-567-8901 ext. 123\nOut-of-country format from US  1 (234) 567-8901 ext. 123\nOut-of-country format from CH  00 1 234-567-8901 ext. 123\n\n\nSo not only do you learn if the phone number is valid (which it is), but you also get consistent phone number formatting in your locale.\n\nAs a bonus, libphonenumber has a number of datasets to check the validity of phone numbers, as well, so checking a number such as +61299999999 (the international version of (02) 9999 9999) returns as a valid number with formatting:\n\nValidation Results\n\nResult from isPossibleNumber()  true\nResult from isValidNumber()     true\n\nFormatting Results\n\nE164 format                    +61299999999\nOriginal format                61 2 9999 9999\nNational format                (02) 9999 9999\nInternational format           +61 2 9999 9999\nOut-of-country format from US  011 61 2 9999 9999\nOut-of-country format from CH  00 61 2 9999 9999\n\n\nlibphonenumber also gives you many additional benefits, such as grabbing the location that the phone number is detected as being, and also getting the time zone information from the phone number:\n\nPhoneNumberOfflineGeocoder Results\nLocation        Australia\n\nPhoneNumberToTimeZonesMapper Results\nTime zone(s)    [Australia/Sydney]\n\n\nBut the invalid Australian phone number ((09) 9999 9999) returns that it is not a valid phone number.\n\nValidation Results\n\nResult from isPossibleNumber()  true\nResult from isValidNumber()     false\n\n\nGoogle's version has code for Java and Javascript, but people have also implemented libraries for other languages that use the Google i18n phone number dataset:\n\n\nPHP: https://github.com/giggsey/libphonenumber-for-php\nPython: https://github.com/daviddrysdale/python-phonenumbers\nRuby: https://github.com/sstephenson/global_phone\nC#: https://github.com/twcclegg/libphonenumber-csharp\nObjective-C: https://github.com/iziz/libPhoneNumber-iOS\nJavaScript: https://github.com/ruimarinho/google-libphonenumber\nElixir: https://github.com/socialpaymentsbv/ex_phone_number\n\n\nUnless you are certain that you are always going to be accepting numbers from one locale, and they are always going to be in one format, I would heavily suggest not writing your own code for this, and using libphonenumber for validating and displaying phone numbers.\n    ",
        "votes": 185,
        "comentarios": [
            {
                "decripcion": "Noting that there is now also Go port at: github.com/ttacon/libphonenumber",
                "fecha": { "$date" : "2016-09-12T18:59:40Z" },
                "usuario": "michaelhanson",
                "usuario_id": 2232
            },
            {
                "decripcion": "When checking if it's a possible number don't you need to specify a country code? I'm using the PHP version and if I enter a British number like (replace 0's with real numbers) 07700000000 I get Missing or invalid default region. error. But if I specify the country code it will pass.",
                "fecha": { "$date" : "2016-11-28T23:22:54Z" },
                "usuario": "BugHunterUK",
                "usuario_id": 2233
            },
            {
                "decripcion": "@BugHunterUK (and anyone who comes across this question and wonders the same) when parsing a number, you can specify the expected region, and the library will look for non-international numbers in that region. If you don't specify, it will reject anything not in a valid international format.",
                "fecha": { "$date" : "2018-03-22T16:56:31Z" },
                "usuario": "IMSoP",
                "usuario_id": 2234
            },
            {
                "decripcion": "Consider github.com/nyaruka/phonenumbers as it has become the \"official\" Go package recommended by Google rather than libphonenumber.",
                "fecha": { "$date" : "2019-05-06T14:59:53Z" },
                "usuario": "DeeZone",
                "usuario_id": 2235
            },
            {
                "decripcion": "I can confirm what @BugHunterUK says. Took time to get there, but the result is exactly as expected - local numbers accepted in any format plus all fully specified international formats.",
                "fecha": { "$date" : "2020-07-09T07:43:15Z" },
                "usuario": "dimplex",
                "usuario_id": 2236
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1277,
        "fecha": { "$date" : "2017-09-22T10:05:59Z" },
        "decripcion": "\n/^(?:(?:\\(?(?:00|\\+)([1-4]\\d\\d|[1-9]\\d?)\\)?)?[\\-\\.\\ \\\\\\/]?)?((?:\\(?\\d{1,}\\)?[\\-\\.\\ \\\\\\/]?){0,})(?:[\\-\\.\\ \\\\\\/]?(?:#|ext\\.?|extension|x)[\\-\\.\\ \\\\\\/]?(\\d+))?$/i\n\nThis matches:\n\n - (+351) 282 43 50 50\n - 90191919908\n - 555-8909\n - 001 6867684\n - 001 6867684x1\n - 1 (234) 567-8901\n - 1-234-567-8901 x1234\n - 1-234-567-8901 ext1234\n - 1-234 567.89/01 ext.1234\n - 1(234)5678901x1234\n - (123)8575973\n - (0055)(123)8575973\n\n\nOn $n, it saves:\n\n\nCountry indicator\nPhone number\nExtension\n\n\nYou can test it on https://www.regexpal.com/?fam=99127\n    ",
        "votes": 83,
        "comentarios": [
            {
                "decripcion": "This was the most comprehensive regex I've seen. It's easy to get around until you remove ^ and $ or else I'm able to get around it using [111] [111] [1111] or 111--111--1111 and the like. (sorry, deleted my last comment)",
                "fecha": { "$date" : "2014-03-07T20:10:01Z" },
                "usuario": "bafromca",
                "usuario_id": 2237
            },
            {
                "decripcion": "Can you please re-phrase? I can't understand this: \"It's easy to get arround until you remove ^ and $ or else I'm able to get around it using [111] [111] [1111]\". Does it mean that it validates '[111] [111] [1111]' when you take the ^ and the $?",
                "fecha": { "$date" : "2014-03-07T20:13:03Z" },
                "usuario": "Ismael Miguel",
                "usuario_id": 2238
            },
            {
                "decripcion": "I got around your regex using [111] [111] [1111] and 111--111--1111 until I removed ^ and $ from the regex.",
                "fecha": { "$date" : "2014-03-07T20:15:51Z" },
                "usuario": "bafromca",
                "usuario_id": 2237
            },
            {
                "decripcion": "^^^This is a great example of why comment threads should NOT go to chat.  I am very interested in how this conversation turned out and need to know if this ReGex is sturdy enough to use in my app.  Unfortunately, the chat conversation is now gone.",
                "fecha": { "$date" : "2014-07-18T16:53:17Z" },
                "usuario": "Matt Cashatt",
                "usuario_id": 2239
            },
            {
                "decripcion": "To be honest, i didnt went to chat. After asking multiple times for explainations, i was left with no info. You can always try it yourself with all kind of numbers you find online, in multiple formats. One thing i tried with this one is to use multiple phone numbers, but it doesnt work that well if they have spaces around. And i have to find a solution to count the amount of digits and enforce a specific amount.",
                "fecha": { "$date" : "2014-07-19T18:09:47Z" },
                "usuario": "Ismael Miguel",
                "usuario_id": 2238
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1278,
        "fecha": { "$date" : "2008-09-23T22:24:04Z" },
        "decripcion": "\nAlthough the answer to strip all whitespace is neat, it doesn't really solve the problem that's posed, which is to find a regex.  Take, for instance, my test script that downloads a web page and extracts all phone numbers using the regex.  Since you'd need a regex anyway, you might as well have the regex do all the work.  I came up with this:\n\n1?\\W*([2-9][0-8][0-9])\\W*([2-9][0-9]{2})\\W*([0-9]{4})(\\se?x?t?(\\d*))?\n\n\nHere's a perl script to test it.  When you match, $1 contains the area code, $2 and $3 contain the phone number, and $5 contains the extension.  My test script downloads a file from the internet and prints all the phone numbers in it.\n\n#!/usr/bin/perl\n\nmy $us_phone_regex =\n        '1?\\W*([2-9][0-8][0-9])\\W*([2-9][0-9]{2})\\W*([0-9]{4})(\\se?x?t?(\\d*))?';\n\n\nmy @tests =\n(\n\"1-234-567-8901\",\n\"1-234-567-8901 x1234\",\n\"1-234-567-8901 ext1234\",\n\"1 (234) 567-8901\",\n\"1.234.567.8901\",\n\"1/234/567/8901\",\n\"12345678901\",\n\"not a phone number\"\n);\n\nforeach my $num (@tests)\n{\n        if( $num =~ m/$us_phone_regex/ )\n        {\n                print \"match [$1-$2-$3]\\n\" if not defined $4;\n                print \"match [$1-$2-$3 $5]\\n\" if defined $4;\n        }\n        else\n        {\n                print \"no match [$num]\\n\";\n        }\n}\n\n#\n# Extract all phone numbers from an arbitrary file.\n#\nmy $external_filename =\n        'http://web.textfiles.com/ezines/PHREAKSANDGEEKS/PnG-spring05.txt';\nmy @external_file = `curl $external_filename`;\nforeach my $line (@external_file)\n{\n        if( $line =~ m/$us_phone_regex/ )\n        {\n                print \"match $1 $2 $3\\n\";\n        }\n}\n\n\nEdit:\n\nYou can change \\W* to \\s*\\W?\\s* in the regex to tighten it up a bit.  I wasn't thinking of the regex in terms of, say, validating user input on a form when I wrote it, but this change makes it possible to use the regex for that purpose.\n\n'1?\\s*\\W?\\s*([2-9][0-8][0-9])\\s*\\W?\\s*([2-9][0-9]{2})\\s*\\W?\\s*([0-9]{4})(\\se?x?t?(\\d*))?';\n\n    ",
        "votes": 63,
        "comentarios": [
            {
                "decripcion": "FYI the regex also matches: (4570457-6789 which would be a pretty common typo.  The match groups get skewed too: rubular.com/r/TaTP0mHL5c",
                "fecha": { "$date" : "2013-02-20T19:16:52Z" },
                "usuario": "SooDesuNe",
                "usuario_id": 2240
            },
            {
                "decripcion": "@SooDesuNe Prepending (^|[^\\d\\n]) (with multiline flag on) avoids the general problem, by ensuring it's not immediately preceded by something numeric.",
                "fecha": { "$date" : "2017-03-23T19:32:40Z" },
                "usuario": "btown",
                "usuario_id": 2241
            },
            {
                "decripcion": "Note that this is North America-centric -- it misses \"44 7911 123456\"",
                "fecha": { "$date" : "2020-03-25T16:40:33Z" },
                "usuario": "Ben Wheeler",
                "usuario_id": 2242
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1279,
        "fecha": { "$date" : "2020-07-17T13:36:26Z" },
        "decripcion": "\nI answered this question on another SO question before deciding to also include my answer as an answer on this thread, because no one was addressing how to require/not require items, just handing out regexs:\nRegex working wrong, matching unexpected things\nFrom my post on that site, I've created a quick guide to assist anyone with making their own regex for their own desired phone number format, which I will caveat (like I did on the other site) that if you are too restrictive, you may not get the desired results, and there is no \"one size fits all\" solution to accepting all possible phone numbers in the world - only what you decide to accept as your format of choice.  Use at your own risk.\nQuick cheat sheet\n\nStart the expression:  /^\nIf you want to require a space, use:  [\\s] or \\s\nIf you want to require parenthesis, use:  [(] and [)] .  Using \\( and \\) is ugly and can make things confusing.\nIf you want anything to be optional, put a ? after it\nIf you want a hyphen, just type - or [-] . If you do not put it first or last in a series of other characters, though, you may need to escape it:  \\-\nIf you want to accept different choices in a slot, put brackets around the options: [-.\\s] will require a hyphen, period, or space.  A question mark after the last bracket will make all of those optional for that slot.\n\\d{3} :  Requires a 3-digit number:  000-999.  Shorthand for\n[0-9][0-9][0-9].\n[2-9] :  Requires a digit 2-9 for that slot.\n(\\+|1\\s)? : Accept a \"plus\" or a 1 and a space (pipe character, |, is \"or\"), and make it optional.  The \"plus\" sign must be escaped.\nIf you want specific numbers to match a slot, enter them: [246] will require a 2, 4, or 6.  (?:77|78) or [77|78] will require 77 or 78.\n$/ : End the expression\n\n    ",
        "votes": 51,
        "comentarios": [
            {
                "decripcion": "This is very useful, but I doubt and looking for a {min,max} expression. Can you help?",
                "fecha": { "$date" : "2015-01-07T08:02:16Z" },
                "usuario": "Ataboy Josef",
                "usuario_id": 2243
            },
            {
                "decripcion": "If it is a single digit we're talking about (and you can make it match according to that), see the [2-9] block I put there.  That means your min is 2, and your max is 9.  Adjust accordingly.",
                "fecha": { "$date" : "2015-01-07T21:00:40Z" },
                "usuario": "vapcguy",
                "usuario_id": 1065
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1280,
        "fecha": { "$date" : "2015-07-29T22:53:45Z" },
        "decripcion": "\nI wrote simpliest (although i didn't need dot in it). \n\n^([0-9\\(\\)\\/\\+ \\-]*)$\n\nAs mentioned below, it checks only for characters, not its structure/order\n    ",
        "votes": 34,
        "comentarios": [
            {
                "decripcion": "this validates tons of numbers that are technically invalid. like, \"-- +()()())())))\".  Learn to read regular expressions so you can understand what you're doing.",
                "fecha": { "$date" : "2013-03-28T14:47:26Z" },
                "usuario": "Steven Soroka",
                "usuario_id": 2227
            },
            {
                "decripcion": "@StevenSoroka technically it may allow lot of invalid cases, but when we think about just helping the user out to avoid common mistakes with the simplest possible solution, this is the way to go :)",
                "fecha": { "$date" : "2013-08-23T18:44:48Z" },
                "usuario": "happyhardik",
                "usuario_id": 2244
            },
            {
                "decripcion": "this also matching white space, empty line",
                "fecha": { "$date" : "2013-09-16T08:13:53Z" },
                "usuario": "Wasim A.",
                "usuario_id": 2245
            },
            {
                "decripcion": "@HappyHardik. Indeed. Simple and powerful, for basic validation let the user type more than one dot, dash, bracket or plus.",
                "fecha": { "$date" : "2014-02-04T12:18:08Z" },
                "usuario": "dijipiji",
                "usuario_id": 2246
            },
            {
                "decripcion": "Just used it and it's wrong in many aspects. For example, a UK phone number may begin with +44, or a phone nuber may have (0) inside it. But this is not valid according to your regular expression. I would recommend @Ismael Miguel's answer. It works just fine and I would recommend you to revise your answer.",
                "fecha": { "$date" : "2015-07-29T10:44:34Z" },
                "usuario": "Stelios Voskos",
                "usuario_id": 2247
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1281,
        "fecha": { "$date" : "2015-08-03T04:38:07Z" },
        "decripcion": "\nNote that stripping () characters does not work for a style of writing UK numbers that is common: +44 (0) 1234 567890 which means dial either the international number:\n+441234567890\nor in the UK dial 01234567890\n    ",
        "votes": 23,
        "comentarios": [
            {
                "decripcion": "See also International notation of UK numbers",
                "fecha": { "$date" : "2020-08-17T16:43:02Z" },
                "usuario": "arekolek",
                "usuario_id": 2248
            },
            {
                "decripcion": "did you solve it ?",
                "fecha": { "$date" : "2021-03-03T12:13:27Z" },
                "usuario": "Sultan Ali",
                "usuario_id": 2249
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1282,
        "fecha": { "$date" : "2012-10-18T19:33:53Z" },
        "decripcion": "\nIf you just want to verify you don't have random garbage in the field (i.e., from form spammers) this regex should do nicely:\n\n^[0-9+\\(\\)#\\.\\s\\/ext-]+$\n\n\nNote that it doesn't have any special rules for how many digits, or what numbers are valid in those digits, it just verifies that only digits, parenthesis, dashes, plus, space, pound,  asterisk, period, comma, or the letters e, x, t are present.\n\nIt should be compatible with international numbers and localization formats. Do you foresee any need to allow square, curly, or angled brackets for some regions? (currently they aren't included).\n\nIf you want to maintain per digit rules (such as in US Area Codes and Prefixes (exchange codes) must fall in the range of 200-999) well, good luck to you. Maintaining a complex rule-set which could be outdated at any point in the future by any country in the world does not sound fun.\n\nAnd while stripping all/most non-numeric characters may work well on the server side (especially if you are planning on passing these values to a dialer), you may not want to thrash the user's input during validation, particularly if you want them to make corrections in another field.\n    ",
        "votes": 22,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1283,
        "fecha": { "$date" : "2008-09-23T20:19:52Z" },
        "decripcion": "\nHave you had a look over at RegExLib?\n\nEntering US phone number brought back quite a list of possibilities.\n    ",
        "votes": 15,
        "comentarios": [
            {
                "decripcion": "This looks like a great way to integrate obscure bugs into your code.",
                "fecha": { "$date" : "2016-10-26T09:25:52Z" },
                "usuario": "Tom Lord",
                "usuario_id": 2250
            },
            {
                "decripcion": "Link-only answers should be avoided because they may break in the future and render the post useless.  Static solutions are always necessary to sustain the value of an answer.  If you wanted to recommend a hyperlink, add it as a comment under the question.",
                "fecha": { "$date" : "2020-07-31T20:24:43Z" },
                "usuario": "mickmackusa",
                "usuario_id": 2251
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1284,
        "fecha": { "$date" : "2015-04-30T15:29:43Z" },
        "decripcion": "\nMy attempt at an unrestrictive regex:\n\n/^[+#*\\(\\)\\[\\]]*([0-9][ ext+-pw#*\\(\\)\\[\\]]*){6,45}$/\n\n\nAccepts:\n\n+(01) 123 (456) 789 ext555\n123456\n*44 123-456-789 [321]\n123456\n123456789012345678901234567890123456789012345\n*****++[](][((( 123456tteexxttppww\n\n\nRejects:\n\nmob 07777 777777\n1234 567 890 after 5pm\njohn smith\n(empty)\n1234567890123456789012345678901234567890123456\n911\n\n\nIt is up to you to sanitize it for display. After validating it could be a number though.\n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1285,
        "fecha": { "$date" : "2015-04-23T22:24:05Z" },
        "decripcion": "\nHere's a wonderful pattern that most closely matched the validation that I needed to achieve. I'm not the original author, but I think it's well worth sharing as I found this problem to be very complex and without a concise or widely useful answer.\n\nThe following regex will catch widely used number and character combinations in a variety of global phone number formats:\n\n/^\\s*(?:\\+?(\\d{1,3}))?([-. (]*(\\d{3})[-. )]*)?((\\d{3})[-. ]*(\\d{2,4})(?:[-.x ]*(\\d+))?)\\s*$/gm\n\nPositive:\n+42 555.123.4567\n+1-(800)-123-4567\n+7 555 1234567\n+7(926)1234567\n(926) 1234567\n+79261234567\n926 1234567\n9261234567\n1234567\n123-4567\n123-89-01\n495 1234567\n469 123 45 67\n89261234567\n8 (926) 1234567\n926.123.4567\n415-555-1234\n650-555-2345\n(416)555-3456\n202 555 4567\n4035555678\n1 416 555 9292\n\nNegative:\n926 3 4\n8 800 600-APPLE\n\nOriginal source: http://www.regexr.com/38pvb\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "This has some limited support for extensions. It matches \"616-555-1234 x567\" but not \"616-555-1234 ext. 567\".",
                "fecha": { "$date" : "2016-06-23T21:01:28Z" },
                "usuario": "Jon Schneider",
                "usuario_id": 2252
            },
            {
                "decripcion": "False positive for e.g.\"-------((((((55555555\" or \"99999999999999999999999\"",
                "fecha": { "$date" : "2017-11-23T11:46:40Z" },
                "usuario": "mikep",
                "usuario_id": 2253
            },
            {
                "decripcion": "It does not validate Nitherland macdonalds number +31 76 596 4192 (I was just testing for random numbers)",
                "fecha": { "$date" : "2018-12-09T15:28:42Z" },
                "usuario": "BIOHAZARD",
                "usuario_id": 2254
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1286,
        "fecha": { "$date" : "2015-09-11T22:02:49Z" },
        "decripcion": "\nI found this to work quite well:\n\n^\\(*\\+*[1-9]{0,3}\\)*-*[1-9]{0,3}[-. /]*\\(*[2-9]\\d{2}\\)*[-. /]*\\d{3}[-. /]*\\d{4} *e*x*t*\\.* *\\d{0,4}$\n\n\nIt works for these number formats:\n\n1-234-567-8901\n1-234-567-8901 x1234\n1-234-567-8901 ext1234\n1 (234) 567-8901\n1.234.567.8901\n1/234/567/8901\n12345678901\n1-234-567-8901 ext. 1234\n(+351) 282 433 5050\n\n\nMake sure to use global AND multiline flags to make sure.\n\nLink:  http://www.regexr.com/3bp4b\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1287,
        "fecha": { "$date" : "2008-09-23T20:14:20Z" },
        "decripcion": "\nHere's my best try so far. It handles the formats above but I'm sure I'm missing some other possible formats.\n\n^\\d?(?:(?:[\\+]?(?:[\\d]{1,3}(?:[ ]+|[\\-.])))?[(]?(?:[\\d]{3})[\\-/)]?(?:[ ]+)?)?(?:[a-zA-Z2-9][a-zA-Z0-9 \\-.]{6,})(?:(?:[ ]+|[xX]|(i:ext[\\.]?)){1,2}(?:[\\d]{1,5}))?$\n\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "Worked like a charm! Thanks for sharing",
                "fecha": { "$date" : "2021-01-29T14:55:20Z" },
                "usuario": "KdPisda",
                "usuario_id": 2255
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1288,
        "fecha": { "$date" : "2012-10-18T19:36:58Z" },
        "decripcion": "\nIf you're talking about form validation, the regexp to validate correct meaning as well as correct data is going to be extremely complex because of varying country and provider standards. It will also be hard to keep up to date.\n\nI interpret the question as looking for a broadly valid pattern, which may not be internally consistent - for example having a valid set of numbers, but not validating that the trunk-line, exchange, etc. to the valid pattern for the country code prefix.\n\nNorth America is straightforward, and for international I prefer to use an 'idiomatic' pattern which covers the ways in which people specify and remember their numbers:\n\n^((((\\(\\d{3}\\))|(\\d{3}-))\\d{3}-\\d{4})|(\\+?\\d{2}((-| )\\d{1,8}){1,5}))(( x| ext)\\d{1,5}){0,1}$\n\n\nThe North American pattern makes sure that if one parenthesis is included both are.  The international accounts for an optional initial '+' and country code.  After that, you're in the idiom.  Valid matches would be:\n\n\n(xxx)xxx-xxxx\n(xxx)-xxx-xxxx\n(xxx)xxx-xxxx x123\n12 1234 123 1 x1111\n12 12 12 12 12\n12 1 1234 123456 x12345\n+12 1234 1234\n+12 12 12 1234\n+12 1234 5678\n+12 12345678\n\n\nThis may be biased as my experience is limited to North America, Europe and a small bit of Asia.\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "I've been trying to implement the above in my javascript validation script but I keep getting an invalid quantifier error. Any ideas on what I'm doing wrong?",
                "fecha": { "$date" : "2010-10-17T20:07:48Z" },
                "usuario": "Jannis",
                "usuario_id": 2256
            },
            {
                "decripcion": "I'd add the trivial case where the phone is specified without symbols but maybe spaces and country code, in Europe is typical for local and mobile numbers: 676412342, 676 46 32 12, 676 463 212",
                "fecha": { "$date" : "2015-04-19T23:12:04Z" },
                "usuario": "rupps",
                "usuario_id": 2257
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1289,
        "fecha": { "$date" : "2011-04-14T20:56:45Z" },
        "decripcion": "\nMy gut feeling is reinforced by the amount of replies to this topic - that there is a virtually infinite number of solutions to this problem, none of which are going to be elegant.\n\nHonestly, I would recommend you don't try to validate phone numbers. Even if you could write a big, hairy validator that would allow all the different legitimate formats, it would end up allowing pretty much anything even remotely resembling a phone number in the first place.\n\nIn my opinion, the most elegant solution is to validate a minimum length, nothing more.\n    ",
        "votes": 10,
        "comentarios": [
            {
                "decripcion": "After trying a number of these and going through the existing data and feedback from users i would tend to agree...",
                "fecha": { "$date" : "2014-01-17T15:12:34Z" },
                "usuario": "Christopher King",
                "usuario_id": 2258
            },
            {
                "decripcion": "Sometimes you need to do validation though. If I'm sending out confirmation codes I can't just send a code to any random garbage a spammer has input in the field. I want to make sure the number is probably a phone number before wasting resources messaging it.",
                "fecha": { "$date" : "2020-04-24T10:29:48Z" },
                "usuario": "zfj3ub94rf576hc4eegm",
                "usuario_id": 2259
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1290,
        "fecha": { "$date" : "2012-10-18T19:35:59Z" },
        "decripcion": "\nThis is a simple Regular Expression pattern for Philippine Mobile Phone Numbers:\n\n((\\+[0-9]{2})|0)[.\\- ]?9[0-9]{2}[.\\- ]?[0-9]{3}[.\\- ]?[0-9]{4}\n\n\nor\n\n((\\+63)|0)[.\\- ]?9[0-9]{2}[.\\- ]?[0-9]{3}[.\\- ]?[0-9]{4}\n\n\nwill match these: \n\n+63.917.123.4567  \n+63-917-123-4567  \n+63 917 123 4567  \n+639171234567  \n09171234567  \n\n\nThe first one will match ANY two digit country code, while the second one will match the Philippine country code exclusively.\n\nTest it here: http://refiddle.com/1ox\n    ",
        "votes": 10,
        "comentarios": [
            {
                "decripcion": "Thanks. How about landline numbers with area code such as 028231234? I'm wondering if area codes are only 2-3 digit numbers and are they always preceded by 0?",
                "fecha": { "$date" : "2014-02-26T05:41:02Z" },
                "usuario": "stormwild",
                "usuario_id": 2260
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1291,
        "fecha": { "$date" : "2017-05-23T11:47:36Z" },
        "decripcion": "\nYou'll have a hard time dealing with international numbers with a single/simple regex, see this post on the difficulties of international (and even north american) phone numbers.\n\nYou'll want to parse the first few digits to determine what the country code is, then act differently based on the country.\n\nBeyond that - the list you gave does not include another common US format - leaving off the initial 1.  Most cell phones in the US don't require it, and it'll start to baffle the younger generation unless they've dialed internationally.\n\nYou've correctly identified that it's a tricky problem...\n\n-Adam\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "Not an offered solution. IT IS POSSIBLE. Just because it's tricky or complex doesn't mean you should just throw your arms up.",
                "fecha": { "$date" : "2017-03-29T16:14:40Z" },
                "usuario": "Eric Hodonsky",
                "usuario_id": 2261
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1292,
        "fecha": { "$date" : "2014-07-08T18:28:53Z" },
        "decripcion": "\nAfter reading through these answers, it looks like there wasn't a straightforward regular expression that can parse through a bunch of text and pull out phone numbers in any format (including international with and without the plus sign).\n\nHere's what I used for a client project recently, where we had to convert all phone numbers in any format to tel: links.\n\nSo far, it's been working with everything they've thrown at it, but if errors come up, I'll update this answer.\n\nRegex:\n\n/(\\+*\\d{1,})*([ |\\(])*(\\d{3})[^\\d]*(\\d{3})[^\\d]*(\\d{4})/\n\nPHP function to replace all phone numbers with tel: links (in case anyone is curious):\n\nfunction phoneToTel($number) {\n    $return = preg_replace('/(\\+*\\d{1,})*([ |\\(])*(\\d{3})[^\\d]*(\\d{3})[^\\d]*(\\d{4})/', '<a href=\"tel:$1$3$4$5\">$1 ($3) $4-$5</a>', $number); // includes international\n    return $return;\n}\n\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "This regular expression matched +1 1234562222222222222222222222.",
                "fecha": { "$date" : "2015-10-13T18:39:41Z" },
                "usuario": "Varda Elent\u00e1ri",
                "usuario_id": 2262
            },
            {
                "decripcion": "why not just return?",
                "fecha": { "$date" : "2017-03-08T21:21:43Z" },
                "usuario": "thexande",
                "usuario_id": 2263
            },
            {
                "decripcion": "False positive for \"999999999999999999999999999999999999999\"",
                "fecha": { "$date" : "2020-03-25T16:26:01Z" },
                "usuario": "Ben Wheeler",
                "usuario_id": 2242
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1293,
        "fecha": { "$date" : "2008-09-23T21:02:04Z" },
        "decripcion": "\nI believe the Number::Phone::US and Regexp::Common  (particularly the source of Regexp::Common::URI::RFC2806) Perl modules could help.\n\nThe question should probably be specified in a bit more detail to explain the purpose of validating the numbers.  For instance, 911 is a valid number in the US, but 911x isn't for any value of x.  That's so that the phone company can calculate when you are done dialing.  There are several variations on this issue.  But your regex doesn't check the area code portion, so that doesn't seem to be a concern.\n\nLike validating email addresses, even if you have a valid result you can't know if it's assigned to someone until you try it.\n\nIf you are trying to validate user input, why not normalize the result and be done with it?  If the user puts in a number you can't recognize as a valid number, either save it as inputted or strip out undailable characters.  The Number::Phone::Normalize Perl module could be a source of inspiration.\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "I'm going to go out on a limb here and say that allowing 911 as a phone number is probably a bad idea in almost all applications of this regex. Good catch though.",
                "fecha": { "$date" : "2012-07-10T20:29:35Z" },
                "usuario": "Nicholas Flynt",
                "usuario_id": 2264
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1294,
        "fecha": { "$date" : "2008-09-23T20:41:56Z" },
        "decripcion": "\nI work for a market research company and we have to filter these types of input alllll the time. You're complicating it too much. Just strip the non-alphanumeric chars, and see if there's an extension.\n\nFor further analysis you can subscribe to one of many providers that will give you access to a database of valid numbers as well as tell you if they're landlines or mobiles, disconnected, etc. It costs money.\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "Validation? 123%$)*%()$*()#456*()*$#(*(#$@8908 would match your proposed solution.",
                "fecha": { "$date" : "2012-03-30T17:17:46Z" },
                "usuario": "PlexQ",
                "usuario_id": 2220
            },
            {
                "decripcion": "@PlexQ 555-123-1234, 07777777777, 90210, 01/01/1901 - users are inventive in ramming garbage through validation. Better to not tic off the ones who genuinely do have some odd data by using overly restrictive validation and telling them they're wrong.",
                "fecha": { "$date" : "2012-04-29T03:19:44Z" },
                "usuario": "ReactiveRaven",
                "usuario_id": 2265
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1295,
        "fecha": { "$date" : "2009-07-21T12:03:56Z" },
        "decripcion": "\nDo a replace on formatting characters, then check the remaining for phone validity.  In PHP, \n\n $replace = array( ' ', '-', '/', '(', ')', ',', '.' ); //etc; as needed\n preg_match( '/1?[0-9]{10}((ext|x)[0-9]{1,4})?/i', str_replace( $replace, '', $phone_num );\n\n\nBreaking a complex regexp like this can be just as effective, but much more simple.\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1296,
        "fecha": { "$date" : "2011-03-01T13:37:04Z" },
        "decripcion": "\nI found this to be something interesting. I have not tested it but it looks as if it would work\n\n<?php\n/*\nstring validate_telephone_number (string $number, array $formats)\n*/\n\nfunction validate_telephone_number($number, $formats)\n{\n$format = trim(ereg_replace(\"[0-9]\", \"#\", $number));\n\nreturn (in_array($format, $formats)) ? true : false;\n}\n\n/* Usage Examples */\n\n// List of possible formats: You can add new formats or modify the existing ones\n\n$formats = array('###-###-####', '####-###-###',\n                 '(###) ###-###', '####-####-####',\n                 '##-###-####-####', '####-####', '###-###-###',\n                 '#####-###-###', '##########');\n\n$number = '08008-555-555';\n\nif(validate_telephone_number($number, $formats))\n{\necho $number.' is a valid phone number.';\n}\n\necho \"<br />\";\n\n$number = '123-555-555';\n\nif(validate_telephone_number($number, $formats))\n{\necho $number.' is a valid phone number.';\n}\n\necho \"<br />\";\n\n$number = '1800-1234-5678';\n\nif(validate_telephone_number($number, $formats))\n{\necho $number.' is a valid phone number.';\n}\n\necho \"<br />\";\n\n$number = '(800) 555-123';\n\nif(validate_telephone_number($number, $formats))\n{\necho $number.' is a valid phone number.';\n}\n\necho \"<br />\";\n\n$number = '1234567890';\n\nif(validate_telephone_number($number, $formats))\n{\necho $number.' is a valid phone number.';\n}\n?>\n\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "Your message seems to indicate that you didn't write this code.  Would you mind citing a source, please?",
                "fecha": { "$date" : "2013-09-30T03:33:34Z" },
                "usuario": "Alastair Irvine",
                "usuario_id": 2266
            },
            {
                "decripcion": "bitrepository.com/how-to-validate-a-telephone-number.html looks to be the source.",
                "fecha": { "$date" : "2016-01-12T15:40:02Z" },
                "usuario": "James Paterson",
                "usuario_id": 2267
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1297,
        "fecha": { "$date" : "2011-08-11T05:10:29Z" },
        "decripcion": "\nYou would probably be better off using a Masked Input for this.  That way users can ONLY enter numbers and you can format however you see fit.  I'm not sure if this is for a web application, but if it is there is a very click jQuery plugin that offers some options for doing this.  \n\nhttp://digitalbush.com/projects/masked-input-plugin/\n\nThey even go over how to mask phone number inputs in their tutorial.\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1298,
        "fecha": { "$date" : "2012-05-13T19:47:55Z" },
        "decripcion": "\nHere's one that works well in JavaScript. It's in a string because that's what the Dojo widget was expecting.\n\nIt matches a 10 digit North America NANP number with optional extension. Spaces, dashes and periods are accepted delimiters.\n\n\"^(\\\\(?\\\\d\\\\d\\\\d\\\\)?)( |-|\\\\.)?\\\\d\\\\d\\\\d( |-|\\\\.)?\\\\d{4,4}(( |-|\\\\.)?[ext\\\\.]+ ?\\\\d+)?$\"\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1299,
        "fecha": { "$date" : "2012-10-18T19:38:01Z" },
        "decripcion": "\nI was struggling with the same issue, trying to make my application future proof, but these guys got me going in the right direction. I'm not actually checking the number itself to see if it works or not, I'm just trying to make sure that a series of numbers was entered that may or may not have an extension.\n\nWorst case scenario if the user had to pull an unformatted number from the XML file, they would still just type the numbers into the phone's numberpad 012345678x5, no real reason to keep it pretty. That kind of RegEx would come out something like this for me:\n\n\\d+ ?\\w{0,9} ?\\d+\n\n\n\n01234467 extension 123456\n01234567x123456\n01234567890\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1300,
        "fecha": { "$date" : "2008-09-23T22:59:20Z" },
        "decripcion": "\nMy inclination is to agree that stripping non-digits and just accepting what's there is best. Maybe to ensure at least a couple digits are present, although that does prohibit something like an alphabetic phone number \"ASK-JAKE\" for example.\n\nA couple simple perl expressions might be:\n\n@f = /(\\d+)/g;\ntr/0-9//dc;\n\n\nUse the first one to keep the digit groups together, which may give formatting clues. Use the second one to trivially toss all non-digits.\n\nIs it a worry that there may need to be a pause and then more keys entered? Or something like 555-1212 (wait for the beep) 123?\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1301,
        "fecha": { "$date" : "2011-02-28T23:16:18Z" },
        "decripcion": "\n    pattern=\"^[\\d|\\+|\\(]+[\\)|\\d|\\s|-]*[\\d]$\" \n    validateat=\"onsubmit\"\n\n\nMust end with a digit, can begin with ( or + or a digit, and may contain + - ( or )\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1302,
        "fecha": { "$date" : "2015-04-30T15:38:51Z" },
        "decripcion": "\nFor anyone interested in doing something similar with Irish mobile phone numbers, here's a straightforward way of accomplishing it: \n\nhttp://ilovenicii.com/?p=87\n\nPHP\n\n\n\n<?php\n$pattern = \"/^(083|086|085|086|087)\\d{7}$/\";\n$phone = \"087343266\";\n\nif (preg_match($pattern,$phone)) echo \"Match\";\nelse echo \"Not match\";\n\n\nThere is also a JQuery solution on that link.\n\nEDIT:\n\njQuery solution:\n\n    $(function(){\n    //original field values\n    var field_values = {\n            //id        :  value\n            'url'       : 'url',\n            'yourname'  : 'yourname',\n            'email'     : 'email',\n            'phone'     : 'phone'\n    };\n\n        var url =$(\"input#url\").val();\n        var yourname =$(\"input#yourname\").val();\n        var email =$(\"input#email\").val();\n        var phone =$(\"input#phone\").val();\n\n\n    //inputfocus\n    $('input#url').inputfocus({ value: field_values['url'] });\n    $('input#yourname').inputfocus({ value: field_values['yourname'] });\n    $('input#email').inputfocus({ value: field_values['email'] }); \n    $('input#phone').inputfocus({ value: field_values['phone'] });\n\n\n\n    //reset progress bar\n    $('#progress').css('width','0');\n    $('#progress_text').html('0% Complete');\n\n    //first_step\n    $('form').submit(function(){ return false; });\n    $('#submit_first').click(function(){\n        //remove classes\n        $('#first_step input').removeClass('error').removeClass('valid');\n\n        //ckeck if inputs aren't empty\n        var fields = $('#first_step input[type=text]');\n        var error = 0;\n        fields.each(function(){\n            var value = $(this).val();\n            if( value.length<12 || value==field_values[$(this).attr('id')] ) {\n                $(this).addClass('error');\n                $(this).effect(\"shake\", { times:3 }, 50);\n\n                error++;\n            } else {\n                $(this).addClass('valid');\n            }\n        });        \n\n        if(!error) {\n            if( $('#password').val() != $('#cpassword').val() ) {\n                    $('#first_step input[type=password]').each(function(){\n                        $(this).removeClass('valid').addClass('error');\n                        $(this).effect(\"shake\", { times:3 }, 50);\n                    });\n\n                    return false;\n            } else {   \n                //update progress bar\n                $('#progress_text').html('33% Complete');\n                $('#progress').css('width','113px');\n\n                //slide steps\n                $('#first_step').slideUp();\n                $('#second_step').slideDown();     \n            }               \n        } else return false;\n    });\n\n    //second section\n    $('#submit_second').click(function(){\n        //remove classes\n        $('#second_step input').removeClass('error').removeClass('valid');\n\n        var emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;  \n        var fields = $('#second_step input[type=text]');\n        var error = 0;\n        fields.each(function(){\n            var value = $(this).val();\n            if( value.length<1 || value==field_values[$(this).attr('id')] || ( $(this).attr('id')=='email' && !emailPattern.test(value) ) ) {\n                $(this).addClass('error');\n                $(this).effect(\"shake\", { times:3 }, 50);\n\n                error++;\n            } else {\n                $(this).addClass('valid');\n            }\n\n\n        function validatePhone(phone) {\n        var a = document.getElementById(phone).value;\n        var filter = /^[0-9-+]+$/;\n            if (filter.test(a)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n\n        $('#phone').blur(function(e) {\n            if (validatePhone('txtPhone')) {\n                $('#spnPhoneStatus').html('Valid');\n                $('#spnPhoneStatus').css('color', 'green');\n            }\n            else {\n                $('#spnPhoneStatus').html('Invalid');\n            $('#spnPhoneStatus').css('color', 'red');\n            }\n        });\n\n     });\n\n        if(!error) {\n                //update progress bar\n                $('#progress_text').html('66% Complete');\n                $('#progress').css('width','226px');\n\n                //slide steps\n                $('#second_step').slideUp();\n                $('#fourth_step').slideDown();     \n        } else return false;\n\n    });\n\n\n    $('#submit_second').click(function(){\n        //update progress bar\n        $('#progress_text').html('100% Complete');\n        $('#progress').css('width','339px');\n\n        //prepare the fourth step\n        var fields = new Array(\n            $('#url').val(),\n            $('#yourname').val(),\n            $('#email').val(),\n            $('#phone').val()\n\n        );\n        var tr = $('#fourth_step tr');\n        tr.each(function(){\n            //alert( fields[$(this).index()] )\n            $(this).children('td:nth-child(2)').html(fields[$(this).index()]);\n        });\n\n        //slide steps\n        $('#third_step').slideUp();\n        $('#fourth_step').slideDown();            \n    });\n\n\n    $('#submit_fourth').click(function(){\n\n        url =$(\"input#url\").val();\n        yourname =$(\"input#yourname\").val();\n        email =$(\"input#email\").val();\n        phone =$(\"input#phone\").val();\n\n        //send information to server\n        var dataString = 'url='+ url + '&yourname=' + yourname + '&email=' + email + '&phone=' + phone;  \n\n\n\n        alert (dataString);//return false;  \n            $.ajax({  \n                type: \"POST\",  \n                url: \"http://clients.socialnetworkingsolutions.com/infobox/contact/\",  \n                data: \"url=\"+url+\"&yourname=\"+yourname+\"&email=\"+email+'&phone=' + phone,\n                cache: false,\n                success: function(data) {  \n                    console.log(\"form submitted\");\n                    alert(\"success\");\n                }\n                });  \n        return false;\n\n   });\n\n\n    //back button\n    $('.back').click(function(){\n        var container = $(this).parent('div'),\n        previous  = container.prev();\n\n        switch(previous.attr('id')) {\n            case 'first_step' : $('#progress_text').html('0% Complete');\n                  $('#progress').css('width','0px');\n                       break;\n            case 'second_step': $('#progress_text').html('33% Complete');\n                  $('#progress').css('width','113px');\n                       break;\n\n            case 'third_step' : $('#progress_text').html('66% Complete');\n                  $('#progress').css('width','226px');\n                       break;\n\n        default: break;\n    }\n\n    $(container).slideUp();\n    $(previous).slideDown();\n});\n\n\n});\n\n\nSource.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1303,
        "fecha": { "$date" : "2017-05-08T20:35:49Z" },
        "decripcion": "\nThe notion that regex doesn't support inverse matching is not entirely true. You can mimic this behavior by using negative look-arounds:\n\n^((?!hede).)*$\n\n\nThe regex above will match any string, or line without a line break, not containing the (sub)string 'hede'. As mentioned, this is not something regex is \"good\" at (or should do), but still, it is possible. \n\nAnd if you need to match line break chars as well, use the DOT-ALL modifier (the trailing s in the following pattern):\n\n/^((?!hede).)*$/s\n\n\nor use it inline:\n\n/(?s)^((?!hede).)*$/\n\n\n(where the /.../ are the regex delimiters, i.e., not part of the pattern)\n\nIf the DOT-ALL modifier is not available, you can mimic the same behavior with the character class [\\s\\S]:\n\n/^((?!hede)[\\s\\S])*$/\n\n\nExplanation\n\nA string is just a list of n characters. Before, and after each character, there's an empty string. So a list of n characters will have n+1 empty strings. Consider the string \"ABhedeCD\":\n\n    \u250c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2510\nS = \u2502e1\u2502 A \u2502e2\u2502 B \u2502e3\u2502 h \u2502e4\u2502 e \u2502e5\u2502 d \u2502e6\u2502 e \u2502e7\u2502 C \u2502e8\u2502 D \u2502e9\u2502\n    \u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2518\n\nindex    0      1      2      3      4      5      6      7\n\n\nwhere the e's are the empty strings. The regex (?!hede). looks ahead to see if there's no substring \"hede\" to be seen, and if that is the case (so something else is seen), then the . (dot) will match any character except a line break. Look-arounds are also called zero-width-assertions because they don't consume any characters. They only assert/validate something. \n\nSo, in my example, every empty string is first validated to see if there's no \"hede\" up ahead, before a character is consumed by the . (dot). The regex (?!hede). will do that only once, so it is wrapped in a group, and repeated zero or more times: ((?!hede).)*. Finally, the start- and end-of-input are anchored to make sure the entire input is consumed: ^((?!hede).)*$\n\nAs you can see, the input \"ABhedeCD\" will fail because on e3, the regex (?!hede) fails (there is \"hede\" up ahead!).\n    ",
        "votes": 6553,
        "comentarios": [
            {
                "decripcion": "I would not go so far as to say that this is something regex is bad at. The convenience of this solution is pretty obvious and the performance hit compared to a programmatic search is often going to be unimportant.",
                "fecha": { "$date" : "2016-03-03T16:09:36Z" },
                "usuario": "Archimaredes",
                "usuario_id": 2269
            },
            {
                "decripcion": "Strictly speaking negative loook-ahead makes you regular expression not-regular.",
                "fecha": { "$date" : "2016-11-18T15:03:19Z" },
                "usuario": "Peter K",
                "usuario_id": 2270
            },
            {
                "decripcion": "@PeterK, sure, but this is SO, not MathOverflow or CS-Stackexchange. People asking a question here are generally looking for a practical answer. Most libraries or tools (like grep, which the OP mentions) with regex-support all have features that mke them non-regular in a theoretical sense.",
                "fecha": { "$date" : "2016-11-18T15:08:29Z" },
                "usuario": "Bart Kiers",
                "usuario_id": 2271
            },
            {
                "decripcion": "@Bart Kiers, no offense to you answer, just this abuse of terminology irritates me a bit. The really confusing part here is that regular expressions in the strict sense can very much do what OP wants, but the common language to write them does not allow it, which leads to (mathematically ugly) workarounds like look-aheads. Please see this answer below and my comment there for (theoretically aligned) proper way of doing it. Needless to say it works faster on large inputs.",
                "fecha": { "$date" : "2016-11-18T15:33:07Z" },
                "usuario": "Peter K",
                "usuario_id": 2270
            },
            {
                "decripcion": "In case you ever wondered how to do this in vim: ^\\(\\(hede\\)\\@!.\\)*$",
                "fecha": { "$date" : "2016-11-24T11:58:11Z" },
                "usuario": "baldrs",
                "usuario_id": 2272
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1304,
        "fecha": { "$date" : "2013-08-27T16:58:47Z" },
        "decripcion": "\nNote that the solution to does not start with \u201chede\u201d:\n\n^(?!hede).*$\n\n\nis generally much more efficient than the solution to does not contain \u201chede\u201d:\n\n^((?!hede).)*$\n\n\nThe former checks for \u201chede\u201d only at the input string\u2019s first position, rather than at every position.\n    ",
        "votes": 817,
        "comentarios": [
            {
                "decripcion": "Thanks, I used it to validate that the string dosn't contain squence of digits  ^((?!\\d{5,}).)*",
                "fecha": { "$date" : "2015-05-10T10:42:31Z" },
                "usuario": "Samih A",
                "usuario_id": 2273
            },
            {
                "decripcion": "Hello! I can't compose does not end with \"hede\" regex. Can you help with it?",
                "fecha": { "$date" : "2015-10-18T21:33:02Z" },
                "usuario": "Aleks Ya",
                "usuario_id": 2274
            },
            {
                "decripcion": "@AleksYa: just use the \"contain\" version, and include the end anchor into the search string: change the string to \"not match\" from \"hede\" to \"hede$\"",
                "fecha": { "$date" : "2016-05-04T10:42:45Z" },
                "usuario": "Nyerguds",
                "usuario_id": 2275
            },
            {
                "decripcion": "@AleksYa: the does not end version could be done using negative lookbehind as: (.*)(?<!hede)$. @Nyerguds' version would work as well but completely misses the point on performance the answer mentions.",
                "fecha": { "$date" : "2017-09-14T16:53:33Z" },
                "usuario": "thisismydesign",
                "usuario_id": 2276
            },
            {
                "decripcion": "Why are so many answers saying ^((?!hede).)*$ ? Is it not more efficient to use ^(?!.*hede).*$ ? It does the same thing but in fewer steps",
                "fecha": { "$date" : "2019-01-15T10:53:41Z" },
                "usuario": "JackPRead",
                "usuario_id": 2277
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1305,
        "fecha": { "$date" : "2009-01-02T07:41:22Z" },
        "decripcion": "\nIf you're just using it for grep, you can use grep -v hede to get all lines which do not contain hede.\n\nETA Oh, rereading the question, grep -v is probably what you meant by \"tools options\".\n    ",
        "votes": 224,
        "comentarios": [
            {
                "decripcion": "Tip: for progressively filtering out what you don't want: grep -v \"hede\" | grep -v \"hihi\" | ...etc.",
                "fecha": { "$date" : "2014-05-05T22:08:19Z" },
                "usuario": "Olivier Lalonde",
                "usuario_id": 2278
            },
            {
                "decripcion": "Or using only one process grep -v -e hede -e hihi -e ...",
                "fecha": { "$date" : "2015-04-26T05:42:15Z" },
                "usuario": "Olaf Dietsche",
                "usuario_id": 2279
            },
            {
                "decripcion": "Or just grep -v \"hede\\|hihi\" :)",
                "fecha": { "$date" : "2016-12-09T15:29:17Z" },
                "usuario": "Putnik",
                "usuario_id": 2280
            },
            {
                "decripcion": "If you have many patterns that you want to filter out, put them in a file and use grep -vf pattern_file file",
                "fecha": { "$date" : "2018-03-11T18:35:45Z" },
                "usuario": "codeforester",
                "usuario_id": 2281
            },
            {
                "decripcion": "Or simply egrep or  grep -Ev \"hede|hihi|etc\" to avoid the awkward escaping.",
                "fecha": { "$date" : "2018-06-03T10:54:02Z" },
                "usuario": "Amit Naidu",
                "usuario_id": 2282
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1306,
        "fecha": { "$date" : "2017-12-06T11:23:51Z" },
        "decripcion": "\nAnswer:\n\n^((?!hede).)*$\n\n\nExplanation:\n\n^the beginning of the string,\n( group and capture to \\1 (0 or more times (matching the most amount possible)),\n(?! look ahead to see if there is not,  \n\nhede your string,  \n\n) end of look-ahead, \n. any character except \\n,\n)* end of \\1   (Note: because you are using a quantifier on this capture, only the LAST repetition of the captured pattern will be stored in \\1)\n$ before an optional \\n, and the end of the string\n    ",
        "votes": 187,
        "comentarios": [
            {
                "decripcion": "awesome that worked for me in sublime text 2 using multiple words '^((?!DSAU_PW8882WEB2|DSAU_PW8884WEB2|DSAU_PW8884WEB).)*$'",
                "fecha": { "$date" : "2015-08-11T02:07:31Z" },
                "usuario": "Damodar Bashyal",
                "usuario_id": 2283
            },
            {
                "decripcion": "@DamodarBashyal I know I'm pretty late here, but you could totally remove the second term there and you would get the exact same results",
                "fecha": { "$date" : "2017-06-12T16:19:18Z" },
                "usuario": "forresthopkinsa",
                "usuario_id": 2284
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1307,
        "fecha": { "$date" : "2011-09-02T15:53:15Z" },
        "decripcion": "\nThe given answers are perfectly fine, just an academic point:\n\nRegular Expressions in the meaning of theoretical computer sciences ARE NOT ABLE do it like this. For them it had to look something like this:\n\n^([^h].*$)|(h([^e].*$|$))|(he([^h].*$|$))|(heh([^e].*$|$))|(hehe.+$) \n\n\nThis only does a FULL match. Doing it for sub-matches would even be more awkward.\n    ",
        "votes": 108,
        "comentarios": [
            {
                "decripcion": "Important to note this only uses basic POSIX.2 regular expressions and thus whilst terse is more portable for when PCRE is not available.",
                "fecha": { "$date" : "2014-02-19T17:25:48Z" },
                "usuario": "Steve-o",
                "usuario_id": 2285
            },
            {
                "decripcion": "I agree. Many if not most regular expressions are not regular languages and could not be recognized by a finite automata.",
                "fecha": { "$date" : "2014-03-22T21:36:09Z" },
                "usuario": "ThomasMcLeod",
                "usuario_id": 2286
            },
            {
                "decripcion": "@ThomasMcLeod, Hades32: Is it within the realms of any possible regular language to be able to say \u2018not\u2019 and \u2018and\u2019 as well as the \u2018or\u2019 of an expression such as \u2018(hede|Hihi)\u2019? (This maybe a question for CS.)",
                "fecha": { "$date" : "2014-06-13T16:54:33Z" },
                "usuario": "James Haigh",
                "usuario_id": 2287
            },
            {
                "decripcion": "@JohnAllen: ME!!! \u2026Well, not the actual regex but the academic reference, which also relates closely to computational complexity; PCREs fundamentally can not guarantee the same efficiency as POSIX regular expressions.",
                "fecha": { "$date" : "2014-06-13T17:04:37Z" },
                "usuario": "James Haigh",
                "usuario_id": 2287
            },
            {
                "decripcion": "Sorry -this answer just doesn't work, it will match hhehe and even match hehe partially (the second half)",
                "fecha": { "$date" : "2014-08-13T12:57:05Z" },
                "usuario": "Falco",
                "usuario_id": 2288
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1308,
        "fecha": { "$date" : "2018-11-07T21:51:32Z" },
        "decripcion": "\nIf you want the regex test to only fail if the entire string matches, the following will work:\n\n^(?!hede$).*\n\n\ne.g. -- If you want to allow all values except \"foo\" (i.e. \"foofoo\", \"barfoo\", and \"foobar\" will pass, but \"foo\" will fail), use: ^(?!foo$).*\n\nOf course, if you're checking for exact equality, a better general solution in this case is to check for string equality, i.e. \n\nmyStr !== 'foo'\n\n\nYou could even put the negation outside the test if you need any regex features (here, case insensitivity and range matching):\n\n!/^[a-f]oo$/i.test(myStr)\n\n\nThe regex solution at the top of this answer may be helpful, however, in situations where a positive regex test is required (perhaps by an API).\n    ",
        "votes": 71,
        "comentarios": [
            {
                "decripcion": "what about trailing whitespaces? Eg, if I want test to fail with string \" hede    \"?",
                "fecha": { "$date" : "2017-05-12T09:45:27Z" },
                "usuario": "eagor",
                "usuario_id": 2289
            },
            {
                "decripcion": "@eagor the \\s directive matches a single whitespace character",
                "fecha": { "$date" : "2017-05-12T21:07:42Z" },
                "usuario": "Roy Tinker",
                "usuario_id": 2290
            },
            {
                "decripcion": "thanks, but I didn't manage to update the regex to make this work.",
                "fecha": { "$date" : "2017-05-13T19:22:41Z" },
                "usuario": "eagor",
                "usuario_id": 2289
            },
            {
                "decripcion": "@eagor: ^(?!\\s*hede\\s*$).*",
                "fecha": { "$date" : "2017-05-15T17:33:04Z" },
                "usuario": "Roy Tinker",
                "usuario_id": 2290
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1309,
        "fecha": { "$date" : "2018-01-08T23:58:21Z" },
        "decripcion": "\nFWIW, since regular languages (aka rational languages) are closed under complementation, it's always possible to find a regular expression (aka rational expression) that negates another expression. But not many tools implement this.\n\nVcsn supports this operator (which it denotes {c}, postfix).\n\nYou first define the type of your expressions: labels are letter (lal_char) to pick from a to z for instance (defining the alphabet when working with complementation is, of course, very important), and the \"value\" computed for each word is just a Boolean: true the word is accepted, false, rejected.\n\nIn Python:\n\nIn [5]: import vcsn\n        c = vcsn.context('lal_char(a-z), b')\n        c\nOut[5]: {a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z} \u2192 \ud835\udd39\n\n\nthen you enter your expression:\n\nIn [6]: e = c.expression('(hede){c}'); e\nOut[6]: (hede)^c\n\n\nconvert this expression to an automaton:\n\nIn [7]: a = e.automaton(); a\n\n\n\n\nfinally, convert this automaton back to a simple expression.\n\nIn [8]: print(a.expression())\n        \\e+h(\\e+e(\\e+d))+([^h]+h([^e]+e([^d]+d([^e]+e[^]))))[^]*\n\n\nwhere + is usually denoted |, \\e denotes the empty word, and [^] is usually written . (any character).  So, with a bit of rewriting ()|h(ed?)?|([^h]|h([^e]|e([^d]|d([^e]|e.)))).*.\n\nYou can see this example here, and try Vcsn online there.\n    ",
        "votes": 62,
        "comentarios": [
            {
                "decripcion": "True, but ugly, and only doable for small character sets. You don't want to do this with Unicode strings :-)",
                "fecha": { "$date" : "2015-11-08T23:43:24Z" },
                "usuario": "reinierpost",
                "usuario_id": 2291
            },
            {
                "decripcion": "There are more tools that allow it, one of the most impressive being Ragel. There it would be written as (any* - ('hehe' any*)) for start-aligned match or (any* -- ('hehe' any*)) for unaligned.",
                "fecha": { "$date" : "2016-11-18T15:09:05Z" },
                "usuario": "Peter K",
                "usuario_id": 2270
            },
            {
                "decripcion": "@reinierpost: why is it ugly and what's the problem with unicode? I can't agree on both. (I have no experience with vcsn, but have with DFA).",
                "fecha": { "$date" : "2016-11-18T15:39:42Z" },
                "usuario": "Peter K",
                "usuario_id": 2270
            },
            {
                "decripcion": "@PedroGimeno When you anchored, you made sure to put this regex in parens first?  Otherwise the precedences between anchors and | won't play nicely.  '^(()|h(ed?)?|([^h]|h([^e]|e([^d]|d([^e]|e.)))).*)$'.",
                "fecha": { "$date" : "2016-12-08T09:03:41Z" },
                "usuario": "akim",
                "usuario_id": 2292
            },
            {
                "decripcion": "I think it's worth remarking that this method is for matching lines that are not the word 'hede', rather than lines than don't contain the word 'hede' which is what the OP asked for. See my answer for the latter.",
                "fecha": { "$date" : "2019-01-29T00:05:37Z" },
                "usuario": "Pedro Gimeno",
                "usuario_id": 2293
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1310,
        "fecha": { "$date" : "2009-01-02T08:03:06Z" },
        "decripcion": "\nHere's a good explanation of why it's not easy to negate an arbitrary regex. I have to agree with the other answers, though: if this is anything other than a hypothetical question, then a regex is not the right choice here.\n    ",
        "votes": 59,
        "comentarios": [
            {
                "decripcion": "Some tools, and specifically mysqldumpslow, only offer this way to filter data, so in such a case, finding a regex to do this is the best solution apart from rewriting the tool (various patches for this have not been included by MySQL AB / Sun / Oracle.",
                "fecha": { "$date" : "2012-08-07T12:21:12Z" },
                "usuario": "FGM",
                "usuario_id": 2294
            },
            {
                "decripcion": "Exactly analagous to my situation. Velocity template engine uses regular expressions to decide when to apply a transformation (escape html) and I want it to always work EXCEPT in one situation.",
                "fecha": { "$date" : "2013-10-18T14:43:00Z" },
                "usuario": "Henno Vermeulen",
                "usuario_id": 2295
            },
            {
                "decripcion": "What alternative is there? Ive never encountered anything that could do precise string matching besides regex. If OP is using a programming language, there may be other tools available, but if he/she is using not writing code, there probably isnt any other choice.",
                "fecha": { "$date" : "2016-10-20T18:32:10Z" },
                "usuario": "kingfrito_5005",
                "usuario_id": 2296
            },
            {
                "decripcion": "One of many non-hypothetical scenarios where a regex is the best available choice: I'm in an IDE (Android Studio) that shows log output, and the only filtering tools provided are: plain strings, and regex. Trying to do this with plain strings would be a complete fail.",
                "fecha": { "$date" : "2016-12-05T16:11:39Z" },
                "usuario": "LarsH",
                "usuario_id": 202
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1311,
        "fecha": { "$date" : "2014-07-14T18:21:55Z" },
        "decripcion": "\nWith negative lookahead, regular expression can match something not contains specific pattern. This is answered and explained by Bart Kiers. Great explanation!\n\nHowever, with Bart Kiers' answer, the lookahead part will test 1 to 4 characters ahead while matching any single character. We can avoid this and let the lookahead part check out the whole text, ensure there is no 'hede', and then the normal part (.*) can eat the whole text all at one time.\n\nHere is the improved regex:\n\n/^(?!.*?hede).*$/\n\n\nNote the (*?) lazy quantifier in the negative lookahead part is optional, you can use (*) greedy quantifier instead, depending on your data: if 'hede' does present and in the beginning half of the text, the lazy quantifier can be faster; otherwise, the greedy quantifier be faster. However if 'hede' does not present, both would be equal slow.\n\nHere is the demo code.\n\nFor more information about lookahead, please check out the great article: Mastering Lookahead and Lookbehind.\n\nAlso, please check out RegexGen.js, a JavaScript Regular Expression Generator that helps to construct complex regular expressions. With RegexGen.js, you can construct the regex in a more readable way:\n\nvar _ = regexGen;\n\nvar regex = _(\n    _.startOfLine(),             \n    _.anything().notContains(       // match anything that not contains:\n        _.anything().lazy(), 'hede' //   zero or more chars that followed by 'hede',\n                                    //   i.e., anything contains 'hede'\n    ), \n    _.endOfLine()\n);\n\n    ",
        "votes": 54,
        "comentarios": [
            {
                "decripcion": "so to simply check if given string does not contain str1 and str2: ^(?!.*(str1|str2)).*$",
                "fecha": { "$date" : "2017-03-01T07:20:19Z" },
                "usuario": "S.Serpooshan",
                "usuario_id": 2297
            },
            {
                "decripcion": "Yes, or you can use lazy quantifier: ^(?!.*?(?:str1|str2)).*$, depending on your data. Added the ?: since we don't need to capture it.",
                "fecha": { "$date" : "2017-03-02T09:59:57Z" },
                "usuario": "amobiz",
                "usuario_id": 2298
            },
            {
                "decripcion": "This is by far the best answer by a factor of 10xms. If you added your jsfiddle code and results onto the answer people might notice it. I wonder why the lazy version is faster than the greedy version when there is no hede. Shouldn't they take the same amount of time?",
                "fecha": { "$date" : "2017-07-23T09:06:13Z" },
                "usuario": "user5389726598465",
                "usuario_id": 2299
            },
            {
                "decripcion": "Yes, they take the same amount of time since they both tests the whole text.",
                "fecha": { "$date" : "2017-08-03T03:50:51Z" },
                "usuario": "amobiz",
                "usuario_id": 2298
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1312,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nBenchmarks\nI decided to evaluate some of the presented Options and compare their performance, as well as use some new Features.\nBenchmarking on .NET Regex Engine: http://regexhero.net/tester/\nBenchmark Text:\nThe first 7 lines should not match, since they contain the searched Expression, while the lower 7 lines should match!\nRegex Hero is a real-time online Silverlight Regular Expression Tester.\nXRegex Hero is a real-time online Silverlight Regular Expression Tester.\nRegex HeroRegex HeroRegex HeroRegex HeroRegex Hero is a real-time online Silverlight Regular Expression Tester.\nRegex Her Regex Her Regex Her Regex Her Regex Her Regex Her Regex Hero is a real-time online Silverlight Regular Expression Tester.\nRegex Her is a real-time online Silverlight Regular Expression Tester.Regex Hero\negex Hero egex Hero egex Hero egex Hero egex Hero egex Hero Regex Hero is a real-time online Silverlight Regular Expression Tester.\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRegex Hero is a real-time online Silverlight Regular Expression Tester.\n\nRegex Her\negex Hero\negex Hero is a real-time online Silverlight Regular Expression Tester.\nRegex Her is a real-time online Silverlight Regular Expression Tester.\nRegex Her Regex Her Regex Her Regex Her Regex Her Regex Her is a real-time online Silverlight Regular Expression Tester.\nNobody is a real-time online Silverlight Regular Expression Tester.\nRegex Her o egex Hero Regex  Hero Reg ex Hero is a real-time online Silverlight Regular Expression Tester.\n\nResults:\nResults are Iterations per second as the median of 3 runs - Bigger Number = Better\n01: ^((?!Regex Hero).)*$                    3.914   // Accepted Answer\n02: ^(?:(?!Regex Hero).)*$                  5.034   // With Non-Capturing group\n03: ^(?>[^R]+|R(?!egex Hero))*$             6.137   // Lookahead only on the right first letter\n04: ^(?>(?:.*?Regex Hero)?)^.*$             7.426   // Match the word and check if you're still at linestart\n05: ^(?(?=.*?Regex Hero)(?#fail)|.*)$       7.371   // Logic Branch: Find Regex Hero? match nothing, else anything\n\nP1: ^(?(?=.*?Regex Hero)(*FAIL)|(*ACCEPT))  ?????   // Logic Branch in Perl - Quick FAIL\nP2: .*?Regex Hero(*COMMIT)(*FAIL)|(*ACCEPT) ?????   // Direct COMMIT & FAIL in Perl\n\nSince .NET doesn't support action Verbs (*FAIL, etc.) I couldn't test the solutions P1 and P2.\nSummary:\nI tried to test most proposed solutions, some Optimizations are possible for certain words.\nFor Example if the First two letters of the search string are not the Same, answer 03 can be expanded to\n^(?>[^R]+|R+(?!egex Hero))*$ resulting in a small performance gain.\nBut the overall most readable and performance-wise fastest solution seems to be 05 using a conditional statement\nor 04 with the possesive quantifier. I think the Perl solutions should be even faster and more easily readable.\n    ",
        "votes": 46,
        "comentarios": [
            {
                "decripcion": "You should time ^(?!.*hede) too. /// Also, it's probably better to rank the expressions for the matching corpus and the non-matching corpus separately because it's usually a case that most line match or most lines don't.",
                "fecha": { "$date" : "2016-08-23T00:07:23Z" },
                "usuario": "ikegami",
                "usuario_id": 2300
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1313,
        "fecha": { "$date" : "2011-03-17T20:19:12Z" },
        "decripcion": "\nNot regex, but I've found it logical and useful to use serial greps with pipe to eliminate noise.\n\neg.  search an apache config file without all the comments-\n\ngrep -v '\\#' /opt/lampp/etc/httpd.conf      # this gives all the non-comment lines\n\n\nand\n\ngrep -v '\\#' /opt/lampp/etc/httpd.conf |  grep -i dir\n\n\nThe logic of serial grep's is (not a comment) and (matches dir)\n    ",
        "votes": 34,
        "comentarios": [
            {
                "decripcion": "I think he is asking for the regex version of the grep -v",
                "fecha": { "$date" : "2011-07-12T15:27:15Z" },
                "usuario": "Angel.King.47",
                "usuario_id": 2301
            },
            {
                "decripcion": "This is dangerous. Also misses lines like good_stuff #comment_stuff",
                "fecha": { "$date" : "2013-03-01T19:54:47Z" },
                "usuario": "Xavi Montero",
                "usuario_id": 2150
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1314,
        "fecha": { "$date" : "2018-06-04T10:00:13Z" },
        "decripcion": "\nwith this, you avoid to test a lookahead on each positions:\n\n/^(?:[^h]+|h++(?!ede))*+$/\n\n\nequivalent to (for .net):\n\n^(?>(?:[^h]+|h+(?!ede))*)$\n\n\nOld answer:\n\n/^(?>[^h]+|h+(?!ede))*$/\n\n    ",
        "votes": 31,
        "comentarios": [
            {
                "decripcion": "Good point; I'm surprised nobody mentioned this approach before.  However, that particular regex is prone to catastrophic backtracking when applied to text that doesn't match.  Here's how I would do it: /^[^h]*(?:h+(?!ede)[^h]*)*$/",
                "fecha": { "$date" : "2013-04-14T05:26:42Z" },
                "usuario": "Alan Moore",
                "usuario_id": 2111
            },
            {
                "decripcion": "...or you can just make all the quantifiers possessive.  ;)",
                "fecha": { "$date" : "2013-04-15T15:17:58Z" },
                "usuario": "Alan Moore",
                "usuario_id": 2111
            },
            {
                "decripcion": "@Alan Moore - I'm surprised too. I saw your comment (and best regex in the pile) here only after posting this same pattern in an answer below.",
                "fecha": { "$date" : "2013-12-20T03:08:40Z" },
                "usuario": "ridgerunner",
                "usuario_id": 2097
            },
            {
                "decripcion": "@ridgerunner, doesn't have to be the best tho. I've seen benchmarks where the top answer performs better. (I was surprised about that tho.)",
                "fecha": { "$date" : "2014-02-20T13:10:10Z" },
                "usuario": "Qtax",
                "usuario_id": 2302
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1315,
        "fecha": { "$date" : "2016-08-23T00:10:10Z" },
        "decripcion": "\nAforementioned (?:(?!hede).)* is great because it can be anchored.\n\n^(?:(?!hede).)*$               # A line without hede\n\nfoo(?:(?!hede).)*bar           # foo followed by bar, without hede between them\n\n\nBut the following would suffice in this case:\n\n^(?!.*hede)                    # A line without hede\n\n\nThis simplification is ready to have \"AND\" clauses added:\n\n^(?!.*hede)(?=.*foo)(?=.*bar)   # A line with foo and bar, but without hede\n^(?!.*hede)(?=.*foo).*bar       # Same\n\n    ",
        "votes": 28,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1316,
        "fecha": { "$date" : "2013-12-20T03:03:57Z" },
        "decripcion": "\nHere's how I'd do it:\n\n^[^h]*(h(?!ede)[^h]*)*$\n\n\nAccurate and more efficient than the other answers. It implements Friedl's \"unrolling-the-loop\" efficiency technique and requires much less backtracking.\n    ",
        "votes": 22,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1317,
        "fecha": { "$date" : "2018-12-08T20:18:06Z" },
        "decripcion": "\nAn, in my opinon, more readable variant of the top answer: \n\n^(?!.*hede)\n\n\nBasically, \"match at the beginning of the line if and only if it does not have 'hede' in it\" - so the requirement translated almost directly into regex.\n\nOf course, it's possible to have multiple failure requirements:\n\n^(?!.*(hede|hodo|hada))\n\n\nDetails: The ^ anchor ensures the regex engine doesn't retry the match at every location in the string, which would match every string.\n\nThe ^ anchor in the beginning is meant to represent the beginning of the line. The grep tool matches each line one at a time, in contexts where you're working with a multiline string, you can use the \"m\" flag:\n\n/^(?!.*hede)/m # JavaScript syntax\n\n\nor\n\n(?m)^(?!.*hede) # Inline flag\n\n    ",
        "votes": 21,
        "comentarios": [
            {
                "decripcion": "Excellent example with multiple negation.",
                "fecha": { "$date" : "2019-07-11T16:50:52Z" },
                "usuario": "Peter Parada",
                "usuario_id": 2303
            },
            {
                "decripcion": "One difference from top answer is that this does not match anything, and that matches the whole line if without \"hede\"",
                "fecha": { "$date" : "2019-08-20T19:33:04Z" },
                "usuario": "Bernardo Dal Corno",
                "usuario_id": 2304
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1318,
        "fecha": { "$date" : "2014-04-03T16:17:20Z" },
        "decripcion": "\nIf you want to match a character to negate a word similar to negate character class:\n\nFor example, a string:\n\n<?\n$str=\"aaa        bbb4      aaa     bbb7\";\n?>\n\n\nDo not use:\n\n<?\npreg_match('/aaa[^bbb]+?bbb7/s', $str, $matches);\n?>\n\n\nUse:\n\n<?\npreg_match('/aaa(?:(?!bbb).)+?bbb7/s', $str, $matches);\n?>\n\n\nNotice \"(?!bbb).\" is neither lookbehind nor lookahead, it's lookcurrent, for example:\n\n\"(?=abc)abcde\", \"(?!abc)abcde\"\n\n    ",
        "votes": 19,
        "comentarios": [
            {
                "decripcion": "There is no \"lookcurrent\" in perl regexp's. This is truly a negative lookahead (prefix (?!). Positive lookahead's prefix would be (?= while the corresponding lookbehind prefixes would be (?<! and (?<= respectively. A lookahead means that you read the next characters (hence \u201cahead\u201d) without consuming them. A lookbehind means that you check characters that have already been consumed.",
                "fecha": { "$date" : "2012-05-21T16:35:40Z" },
                "usuario": "Didier L",
                "usuario_id": 2305
            },
            {
                "decripcion": "Not sure how (?!abc)abcde makes any sense at all.",
                "fecha": { "$date" : "2021-02-05T10:18:20Z" },
                "usuario": "Scratte",
                "usuario_id": 2306
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1319,
        "fecha": { "$date" : "2020-10-01T15:59:57Z" },
        "decripcion": "\nSince no one else has given a direct answer to the question that was asked, I'll do it.\nThe answer is that with POSIX grep, it's impossible to literally satisfy this request:\ngrep \"<Regex for 'doesn't contain hede'>\" input\n\nThe reason is that POSIX grep is only required to work with Basic Regular Expressions, which are simply not powerful enough for accomplishing that task (they are not capable of parsing all regular languages, because of lack of alternation).\nHowever, GNU grep implements extensions that allow it. In particular, \\| is the alternation operator in GNU's implementation of BREs. If your regular expression engine supports alternation, parentheses and the Kleene star, and is able to anchor to the beginning and end of the string, that's all you need for this approach. Note however that negative sets [^ ... ] are very convenient in addition to those, because otherwise, you need to replace them with an expression of the form (a|b|c| ... ) that lists every character that is not in the set, which is extremely tedious and overly long, even more so if the whole character set is Unicode.\nThanks to formal language theory, we get to see how such an expression looks like. With GNU grep, the answer would be something like:\ngrep \"^\\([^h]\\|h\\(h\\|eh\\|edh\\)*\\([^eh]\\|e[^dh]\\|ed[^eh]\\)\\)*\\(\\|h\\(h\\|eh\\|edh\\)*\\(\\|e\\|ed\\)\\)$\" input\n\n(found with Grail and some further optimizations made by hand).\nYou can also use a tool that implements Extended Regular Expressions, like egrep, to get rid of the backslashes:\negrep \"^([^h]|h(h|eh|edh)*([^eh]|e[^dh]|ed[^eh]))*(|h(h|eh|edh)*(|e|ed))$\" input\n\nHere's a script to test it (note it generates a file testinput.txt in the current directory). Several of the expressions presented fail this test.\n#!/bin/bash\nREGEX=\"^\\([^h]\\|h\\(h\\|eh\\|edh\\)*\\([^eh]\\|e[^dh]\\|ed[^eh]\\)\\)*\\(\\|h\\(h\\|eh\\|edh\\)*\\(\\|e\\|ed\\)\\)$\"\n\n# First four lines as in OP's testcase.\ncat > testinput.txt <<EOF\nhoho\nhihi\nhaha\nhede\n\nh\nhe\nah\nhead\nahead\nahed\naheda\nahede\nhhede\nhehede\nhedhede\nhehehehehehedehehe\nhedecidedthat\nEOF\ndiff -s -u <(grep -v hede testinput.txt) <(grep \"$REGEX\" testinput.txt)\n\nIn my system it prints:\nFiles /dev/fd/63 and /dev/fd/62 are identical\n\nas expected.\nFor those interested in the details, the technique employed is to convert the regular expression that matches the word into a finite automaton, then invert the automaton by changing every acceptance state to non-acceptance and vice versa, and then converting the resulting FA back to a regular expression.\nAs everyone has noted, if your regular expression engine supports negative lookahead, the regular expression is much simpler. For example, with GNU grep:\ngrep -P '^((?!hede).)*$' input\n\nHowever, this approach has the disadvantage that it requires a backtracking regular expression engine. This makes it unsuitable in installations that are using secure regular expression engines like RE2, which is one reason to prefer the generated approach in some circumstances.\nUsing Kendall Hopkins' excellent FormalTheory library, written in PHP, which provides a functionality similar to Grail, and a simplifier written by myself, I've been able to write an online generator of negative regular expressions given an input phrase (only alphanumeric and space characters currently supported): http://www.formauri.es/personal/pgimeno/misc/non-match-regex/\nFor hede it outputs:\n^([^h]|h(h|e(h|dh))*([^eh]|e([^dh]|d[^eh])))*(h(h|e(h|dh))*(ed?)?)?$\n\nwhich is equivalent to the above.\n    ",
        "votes": 19,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1320,
        "fecha": { "$date" : "2013-04-26T22:46:03Z" },
        "decripcion": "\nThe OP did not specify or Tag the post to indicate the context (programming language, editor, tool) the Regex will be used within.  \n\nFor me, I sometimes need to do this while editing a file using Textpad.  \n\nTextpad supports some Regex, but does not support lookahead or lookbehind, so it takes a few steps.  \n\nIf I am looking to retain all lines that Do NOT contain the string hede, I would do it like this:\n\n\n  1. Search/replace the entire file to add a unique \"Tag\" to the beginning of each line containing any text.\n\n\n\n\n    Search string:^(.)  \n    Replace string:<@#-unique-#@>\\1  \n    Replace-all  \n\n\n\n  2. Delete all lines that contain the string hede (replacement string is empty):  \n\n\n\n\n    Search string:<@#-unique-#@>.*hede.*\\n  \n    Replace string:<nothing>  \n    Replace-all  \n\n\n\n\n\n  3. At this point, all remaining lines Do NOT contain the string hede. Remove the unique \"Tag\" from all lines (replacement string is empty):  \n\n\n\n\n    Search string:<@#-unique-#@>\n    Replace string:<nothing>  \n    Replace-all  \n\n\nNow you have the original text with all lines containing the string hede removed.\n\n\n\n\nIf I am looking to Do Something Else to only lines that Do NOT contain the string hede, I would do it like this:\n\n\n  1. Search/replace the entire file to add a unique \"Tag\" to the beginning of each line containing any text.\n\n\n\n\n    Search string:^(.)  \n    Replace string:<@#-unique-#@>\\1  \n    Replace-all  \n\n\n\n  2. For all lines that contain the string hede, remove the unique \"Tag\":  \n\n\n\n\n    Search string:<@#-unique-#@>(.*hede)\n    Replace string:\\1  \n    Replace-all  \n\n\n\n\n\n  3. At this point, all lines that begin with the unique \"Tag\", Do NOT contain the string hede. I can now do my Something Else to only those lines.\n\n\n\n\n\n  4. When I am done, I remove the unique \"Tag\" from all lines (replacement string is empty):  \n\n\n\n\n    Search string:<@#-unique-#@>\n    Replace string:<nothing>  \n    Replace-all  \n\n    ",
        "votes": 14,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1321,
        "fecha": { "$date" : "2020-07-15T10:42:28Z" },
        "decripcion": "\nAnother option is that to add a positive look-ahead and check if hede is anywhere in the input line, then we would negate that, with an expression similar to:\n^(?!(?=.*\\bhede\\b)).*$\n\nwith word boundaries.\n\nThe expression is explained on the top right panel of regex101.com, if you wish to explore/simplify/modify it, and in this link, you can watch how it would match against some sample inputs, if you like.\n\nRegEx Circuit\njex.im visualizes regular expressions:\n\n    ",
        "votes": 14,
        "comentarios": [
            {
                "decripcion": "I don't understand how the \"inner\" positive lookahead is useful.",
                "fecha": { "$date" : "2021-02-05T11:15:35Z" },
                "usuario": "Scratte",
                "usuario_id": 2306
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1322,
        "fecha": { "$date" : "2017-03-23T13:42:32Z" },
        "decripcion": "\nSince the introduction of ruby-2.4.1, we can use the new Absent Operator in Ruby\u2019s Regular Expressions\n\nfrom the official doc\n\n(?~abc) matches: \"\", \"ab\", \"aab\", \"cccc\", etc.\nIt doesn't match: \"abc\", \"aabc\", \"ccccabc\", etc.\n\n\nThus, in your case ^(?~hede)$ does the job for you\n\n2.4.1 :016 > [\"hoho\", \"hihi\", \"haha\", \"hede\"].select{|s| /^(?~hede)$/.match(s)}\n => [\"hoho\", \"hihi\", \"haha\"]\n\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1323,
        "fecha": { "$date" : "2014-10-09T07:51:42Z" },
        "decripcion": "\nThrough PCRE verb (*SKIP)(*F)\n\n^hede$(*SKIP)(*F)|^.*$\n\n\nThis would completely skips the line which contains the exact string hede and matches all the remaining lines.\n\nDEMO\n\nExecution of the parts:\n\nLet us consider the above regex by splitting it into two parts.\n\n\nPart before the | symbol. Part shouldn't be matched. \n\n^hede$(*SKIP)(*F)\n\nPart after the | symbol. Part should be matched. \n\n^.*$\n\n\n\nPART 1 \n\nRegex engine will start its execution from the first part.\n\n^hede$(*SKIP)(*F)\n\n\nExplanation:\n\n\n^ Asserts that we are at the start.\nhede Matches the string hede\n$ Asserts that we are at the line end.\n\n\nSo the line which contains the string hede would be matched. Once the regex engine sees the following (*SKIP)(*F) (Note: You could write (*F) as (*FAIL)) verb, it skips and make the match to fail. | called alteration or logical OR operator added next to the PCRE verb which inturn matches all the boundaries exists between each and every character on all the lines except the line contains the exact string hede. See the demo here. That is, it tries to match the characters from the remaining string. Now the regex in the second part would be executed.\n\nPART 2\n\n^.*$\n\n\nExplanation:\n\n\n^  Asserts that we are at the start. ie, it matches all the line starts except the one in the hede line. See the demo here.\n.* In the Multiline mode, . would match any character except newline or carriage return characters. And * would repeat the previous character zero or more times. So .* would match the whole line. See the demo here.\n\nHey why you added .* instead of .+ ?\n\nBecause .* would match a blank line but .+ won't match a blank. We want to match all the lines except hede , there may be a possibility of blank lines also in the input . so you must use .* instead of .+ . .+ would repeat the previous character one or more times. See .* matches a blank line here.\n$ End of the line anchor is not necessary here.\n\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1324,
        "fecha": { "$date" : "2016-09-13T13:55:32Z" },
        "decripcion": "\nIt may be more maintainable to two regexes in your code, one to do the first match, and then if it matches run the second regex to check for outlier cases you wish to block for example ^.*(hede).* then have appropriate logic in your code.\n\nOK, I admit this is not really an answer to the posted question posted and it may also use slightly more processing than a single regex. But for developers who came here looking for a fast emergency fix for an outlier case then this solution should not be overlooked.\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1325,
        "fecha": { "$date" : "2014-06-25T01:23:45Z" },
        "decripcion": "\nThe TXR Language supports regex negation.\n\n$ txr -c '@(repeat)\n@{nothede /~hede/}\n@(do (put-line nothede))\n@(end)'  Input\n\n\nA more complicated example: match all lines that start with a and end with z, but do not contain the substring hede:\n\n$ txr -c '@(repeat)\n@{nothede /a.*z&~.*hede.*/}\n@(do (put-line nothede))\n@(end)' -\naz         <- echoed\naz\nabcz       <- echoed\nabcz\nabhederz   <- not echoed; contains hede\nahedez     <- not echoed; contains hede\nace        <- not echoed; does not end in z\nahedz      <- echoed\nahedz\n\n\nRegex negation is not particularly useful on its own but when you also have intersection, things get interesting, since you have a full set of boolean set operations: you can express \"the set which matches this, except for things which match that\".\n    ",
        "votes": 7,
        "comentarios": [
            {
                "decripcion": "Note that it is also the solution for ElasticSearch Lucene based regex.",
                "fecha": { "$date" : "2018-02-19T07:30:27Z" },
                "usuario": "Wiktor Stribi\u017cew",
                "usuario_id": 2307
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1326,
        "fecha": { "$date" : "2017-03-11T01:42:05Z" },
        "decripcion": "\nThe below function will help you get your desired output\n\n<?PHP\n      function removePrepositions($text){\n\n            $propositions=array('/\\bfor\\b/i','/\\bthe\\b/i'); \n\n            if( count($propositions) > 0 ) {\n                foreach($propositions as $exceptionPhrase) {\n                    $text = preg_replace($exceptionPhrase, '', trim($text));\n\n                }\n            $retval = trim($text);\n\n            }\n        return $retval;\n    }\n\n\n?>\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1327,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nI wanted to add another example for if you are trying to match an entire line that contains string X, but does not also contain string Y.\nFor example, let's say we want to check if our URL / string contains \"tasty-treats\", so long as it does not also contain \"chocolate\" anywhere.\nThis regex pattern would work (works in JavaScript too)\n^(?=.*?tasty-treats)((?!chocolate).)*$\n\n(global, multiline flags in example)\nInteractive Example: https://regexr.com/53gv4\nMatches\n(These urls contain \"tasty-treats\" and also do not contain \"chocolate\")\n\nexample.com/tasty-treats/strawberry-ice-cream\nexample.com/desserts/tasty-treats/banana-pudding\nexample.com/tasty-treats-overview\n\nDoes Not Match\n(These urls contain \"chocolate\" somewhere - so they won't match even though they contain \"tasty-treats\")\n\nexample.com/tasty-treats/chocolate-cake\nexample.com/home-cooking/oven-roasted-chicken\nexample.com/tasty-treats/banana-chocolate-fudge\nexample.com/desserts/chocolate/tasty-treats\nexample.com/chocolate/tasty-treats/desserts\n\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "This was very helpful, thank you.",
                "fecha": { "$date" : "2021-05-07T18:29:20Z" },
                "usuario": "Mani5556",
                "usuario_id": 2308
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1328,
        "fecha": { "$date" : "2020-06-10T22:17:11Z" },
        "decripcion": "\n^((?!hede).)*$ is an elegant solution, except since it consumes characters you won't be able to combine it with other criteria. For instance, say you wanted to check for the non-presence of \"hede\" and the presence of \"haha.\" This solution would work because it won't consume characters:\n\n^(?!.*\\bhede\\b)(?=.*\\bhaha\\b) \n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1329,
        "fecha": { "$date" : "2020-06-15T11:02:11Z" },
        "decripcion": "\nAs long as you are dealing with lines, simply mark the negative matches and target the rest.\n\nIn fact, I use this trick with sed because ^((?!hede).)*$ looks not supported by it.\n\nFor the desired output\n\n\nMark the negative match: (e.g. lines with hede), using a character not included in the whole text at all. An emoji could probably be a good choice for this purpose.\n\ns/(.*hede)/\ud83d\udd12\\1/g\n\nTarget the rest (the unmarked strings: e.g. lines without hede). Suppose you want to keep only the target and delete the rest (as you want):\n\ns/^\ud83d\udd12.*//g\n\n\n\nFor a better understanding\n\nSuppose you want to delete the target:\n\n\nMark the negative match: (e.g. lines with hede), using a character not included in the whole text at all. An emoji could probably be a good choice for this purpose.\n\ns/(.*hede)/\ud83d\udd12\\1/g\n\nTarget the rest (the unmarked strings: e.g. lines without hede). Suppose you want to delete the target:\n\ns/^[^\ud83d\udd12].*//g\n\nRemove the mark:\n\ns/\ud83d\udd12//g\n\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1330,
        "fecha": { "$date" : "2017-10-11T10:12:31Z" },
        "decripcion": "\nHow to use PCRE's backtracking control verbs to match a line not containing a word\n\nHere's a method that I haven't seen used before:\n\n/.*hede(*COMMIT)^|/\n\n\nHow it works\n\nFirst, it tries to find \"hede\" somewhere in the line. If successful, at this point, (*COMMIT) tells the engine to, not only not backtrack in the event of a failure, but also not to attempt any further matching in that case. Then, we try to match something that cannot possibly match (in this case, ^).\n\nIf a line does not contain \"hede\" then the second alternative, an empty subpattern, successfully matches the subject string.\n\nThis method is no more efficient than a negative lookahead, but I figured I'd just throw it on here in case someone finds it nifty and finds a use for it for other, more interesting applications.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1331,
        "fecha": { "$date" : "2016-09-13T14:06:10Z" },
        "decripcion": "\nA simpler solution is to use the not operator !\n\nYour if statement will need to match \"contains\" and not match \"excludes\".  \n\nvar contains = /abc/;\nvar excludes =/hede/;\n\nif(string.match(contains) && !(string.match(excludes))){  //proceed...\n\n\nI believe the designers of RegEx anticipated the use of not operators.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1332,
        "fecha": { "$date" : "2018-04-25T18:15:32Z" },
        "decripcion": "\nMaybe you'll find this on Google while trying to write a regex that is able to match segments of a line (as opposed to entire lines) which do not contain a substring. Tooke me a while to figure out, so I'll share:\n\nGiven a string: \n\n<span class=\"good\">bar</span><span class=\"bad\">foo</span><span class=\"ugly\">baz</span>\n\n\nI want to match <span> tags which do not contain the substring \"bad\".\n\n/<span(?:(?!bad).)*?> will match <span class=\\\"good\\\"> and <span class=\\\"ugly\\\">.\n\nNotice that there are two sets (layers) of parentheses:\n\n\nThe innermost one is for the negative lookahead (it is not a capture group)\nThe outermost was interpreted by Ruby as capture group but we don't want it to be a capture group, so I added ?: at it's beginning and it is no longer interpreted as a capture group.\n\n\nDemo in Ruby:\n\ns = '<span class=\"good\">bar</span><span class=\"bad\">foo</span><span class=\"ugly\">baz</span>'\ns.scan(/<span(?:(?!bad).)*?>/)\n# => [\"<span class=\\\"good\\\">\", \"<span class=\\\"ugly\\\">\"]\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1333,
        "fecha": { "$date" : "2020-06-01T17:43:33Z" },
        "decripcion": "\nLet me try to explain this with an example.\n\nConsider the following text:\n\nhttp://stackoverflow.com/\nhttps://stackoverflow.com/questions/tagged/regex\n\n\nNow, if I apply the regex below over it...\n\n(https?|ftp)://([^/\\r\\n]+)(/[^\\r\\n]*)?\n\n\n... I would get the following result:\n\nMatch \"http://stackoverflow.com/\"\n     Group 1: \"http\"\n     Group 2: \"stackoverflow.com\"\n     Group 3: \"/\"\n\nMatch \"https://stackoverflow.com/questions/tagged/regex\"\n     Group 1: \"https\"\n     Group 2: \"stackoverflow.com\"\n     Group 3: \"/questions/tagged/regex\"\n\n\nBut I don't care about the protocol -- I just want the host and path of the URL. So, I change the regex to include the non-capturing group (?:).\n\n(?:https?|ftp)://([^/\\r\\n]+)(/[^\\r\\n]*)?\n\n\nNow, my result looks like this:\n\nMatch \"http://stackoverflow.com/\"\n     Group 1: \"stackoverflow.com\"\n     Group 2: \"/\"\n\nMatch \"https://stackoverflow.com/questions/tagged/regex\"\n     Group 1: \"stackoverflow.com\"\n     Group 2: \"/questions/tagged/regex\"\n\n\nSee? The first group has not been captured. The parser uses it to match the text, but ignores it later, in the final result.\n\n\n\nEDIT:\n\nAs requested, let me try to explain groups too.\n\nWell, groups serve many purposes. They can help you to extract exact information from a bigger match (which can also be named), they let you rematch a previous matched group, and can be used for substitutions. Let's try some examples, shall we?\n\nImagine you have some kind of XML or HTML (be aware that regex may not be the best tool for the job, but it is nice as an example). You want to parse the tags, so you could do something like this (I have added spaces to make it easier to understand):\n\n   \\<(?<TAG>.+?)\\> [^<]*? \\</\\k<TAG>\\>\nor\n   \\<(.+?)\\> [^<]*? \\</\\1\\>\n\n\nThe first regex has a named group (TAG), while the second one uses a common group. Both regexes do the same thing: they use the value from the first group (the name of the tag) to match the closing tag. The difference is that the first one uses the name to match the value, and the second one uses the group index (which starts at 1).\n\nLet's try some substitutions now. Consider the following text:\n\nLorem ipsum dolor sit amet consectetuer feugiat fames malesuada pretium egestas.\n\n\nNow, let's use this dumb regex over it:\n\n\\b(\\S)(\\S)(\\S)(\\S*)\\b\n\n\nThis regex matches words with at least 3 characters, and uses groups to separate the first three letters. The result is this:\n\nMatch \"Lorem\"\n     Group 1: \"L\"\n     Group 2: \"o\"\n     Group 3: \"r\"\n     Group 4: \"em\"\nMatch \"ipsum\"\n     Group 1: \"i\"\n     Group 2: \"p\"\n     Group 3: \"s\"\n     Group 4: \"um\"\n...\n\nMatch \"consectetuer\"\n     Group 1: \"c\"\n     Group 2: \"o\"\n     Group 3: \"n\"\n     Group 4: \"sectetuer\"\n...\n\n\nSo, if we apply the substitution string:\n\n$1_$3$2_$4\n\n\n... over it, we are trying to use the first group, add an underscore, use the third group, then the second group, add another underscore, and then the fourth group. The resulting string would be like the one below.\n\nL_ro_em i_sp_um d_lo_or s_ti_ a_em_t c_no_sectetuer f_ue_giat f_ma_es m_la_esuada p_er_tium e_eg_stas.\n\n\nYou can use named groups for substitutions too, using ${name}.\n\nTo play around with regexes, I recommend http://regex101.com/, which offers a good amount of details on how the regex works; it also offers a few regex engines to choose from.\n    ",
        "votes": 2640,
        "comentarios": [
            {
                "decripcion": "@ajsie: Traditional (capturing) groups are most useful if you're performing a replacement operation on the results.  Here's an example where I'm grabbing comma-separated last & first names and then reversing their order (thanks to named groups)... regexhero.net/tester/?id=16892996-64d4-4f10-860a-24f28dad7e30",
                "fecha": { "$date" : "2010-08-19T15:43:39Z" },
                "usuario": "Steve Wortham",
                "usuario_id": 2312
            },
            {
                "decripcion": "Might also point out that non-capturing groups are uniquely useful when using regex as split delimiters: \"Alice and Bob\"-split\"\\s+(?:and|or)\\s+\"",
                "fecha": { "$date" : "2014-05-07T18:06:49Z" },
                "usuario": "Yevgeniy",
                "usuario_id": 2313
            },
            {
                "decripcion": "It would be interesting to have the difference between non-capturing groups (?:), and lookahead and lookbehind assertions (?=, ?!) explained. I just started learning about regular expressions, but from what I understand, non-capturing groups are used for matching and \"return\" what they match, but that \"return value\" is not \"stored\" for back-referencing. Lookahead and lookbehind assertions on the other hand are not only not \"stored\", they are also not part of a match, they just assert that something would match, but their \"match\" value is ignored, if I'm not mistaken... (Am I roughly right?)",
                "fecha": { "$date" : "2014-05-11T20:40:27Z" },
                "usuario": "Christian",
                "usuario_id": 2314
            },
            {
                "decripcion": "[] is a set;  [123] matches any char inside the set once;  [^123] matches anything NOT inside the set once; [^/\\r\\n]+ matches one or more chars that are different from /, \\r, \\n.",
                "fecha": { "$date" : "2014-06-05T20:18:52Z" },
                "usuario": "Ricardo Nolde",
                "usuario_id": 2315
            },
            {
                "decripcion": "Very good explanation, thanks. Just a small callout. In the first result snippet in the answer, group 1 should be \"https\" not \"http.\"",
                "fecha": { "$date" : "2018-08-15T03:18:46Z" },
                "usuario": "rudyg123",
                "usuario_id": 2316
            }
        ],
        "usuario": "Ricardo Nolde",
        "usuario_id": 2315
    },
    {
        "_id": 1334,
        "fecha": { "$date" : "2010-08-18T13:30:43Z" },
        "decripcion": "\nYou can use capturing groups to organize and parse an expression.  A non-capturing group has the first benefit, but doesn't have the overhead of the second.  You can still say a non-capturing group is optional, for example.\n\nSay you want to match numeric text, but some numbers could be written as 1st, 2nd, 3rd, 4th,...  If you want to capture the numeric part, but not the (optional) suffix you can use a non-capturing group.\n\n([0-9]+)(?:st|nd|rd|th)?\n\n\nThat will match numbers in the form 1, 2, 3... or in the form 1st, 2nd, 3rd,... but it will only capture the numeric part.\n    ",
        "votes": 213,
        "comentarios": [
            {
                "decripcion": "Without non-capturing group, I could do: ([0-9]+)(st|nd|rd|th)?? With \\1 I have the number, no ?: needed. BTW what is the ? at the end?",
                "fecha": { "$date" : "2021-03-17T07:43:01Z" },
                "usuario": "Timo",
                "usuario_id": 2317
            }
        ],
        "usuario": "Bill the Lizard",
        "usuario_id": 2318
    },
    {
        "_id": 1335,
        "fecha": { "$date" : "2010-08-18T13:27:31Z" },
        "decripcion": "\n?: is used when you want to group an expression, but you do not want to save it as a matched/captured portion of the string.\n\nAn example would be something to match an IP address:\n\n/(?:\\d{1,3}\\.){3}\\d{1,3}/\n\n\nNote that I don't care about saving the first 3 octets, but the (?:...) grouping allows me to shorten the regex without incurring the overhead of capturing and storing a match. \n    ",
        "votes": 124,
        "comentarios": [
            {
                "decripcion": "For inexperienced readers: This would match an IP address, but also invalid IP addresses. An expression to validate an IP address would be much more complex. So, don't use this to validate an IP address.",
                "fecha": { "$date" : "2020-08-27T19:23:27Z" },
                "usuario": "Francisco Zarabozo",
                "usuario_id": 2319
            }
        ],
        "usuario": "RC.",
        "usuario_id": 2320
    },
    {
        "_id": 1336,
        "fecha": { "$date" : "2010-08-18T13:23:33Z" },
        "decripcion": "\nIt makes the group non-capturing, which means that the substring matched by that group will not be included in the list of captures. An example in ruby to illustrate the difference:\n\n\"abc\".match(/(.)(.)./).captures #=> [\"a\",\"b\"]\n\"abc\".match(/(?:.)(.)./).captures #=> [\"b\"]\n\n    ",
        "votes": 43,
        "comentarios": [
            {
                "decripcion": "Why can't we just use \"abc\".match(/.(.)./).captures here ?",
                "fecha": { "$date" : "2019-08-05T09:21:29Z" },
                "usuario": "PRASANNA SARAF",
                "usuario_id": 2321
            },
            {
                "decripcion": "@PRASANNASARAF You can, of course. The point of the code was to show that (?:) does not produce a capture, not to demonstrate a useful example of (?:). (?:) is useful when you want to group a sub-expression (say when you want to apply quantifiers to a non-atomic sub-expression or if you want to restrict the scope of a |), but you don't want to capture anything.",
                "fecha": { "$date" : "2019-08-06T12:38:00Z" },
                "usuario": "sepp2k",
                "usuario_id": 85
            }
        ],
        "usuario": "sepp2k",
        "usuario_id": 85
    },
    {
        "_id": 1337,
        "fecha": { "$date" : "2019-12-31T16:25:49Z" },
        "decripcion": "\nHISTORICAL MOTIVATION:\n\nThe existence of non-capturing groups can be explained with the use of parenthesis.\n\nConsider the expressions (a|b)c and a|bc, due to priority of concatenation over |, these expressions represent two different languages ({ac, bc} and {a, bc} respectively).\n\nHowever, the parenthesis are also used as a matching group (as explained by the other answers...).\n\nWhen you want to have parenthesis but not capture the sub-expression you use NON-CAPTURING GROUPS. In the example, (?:a|b)c\n    ",
        "votes": 43,
        "comentarios": [
            {
                "decripcion": "I was wondering why. As I think the \"why\" is vital to memorizing this information.",
                "fecha": { "$date" : "2018-08-04T23:59:40Z" },
                "usuario": "twitchdotcom slash KANJICODER",
                "usuario_id": 2322
            }
        ],
        "usuario": "user2369060",
        "usuario_id": 2323
    },
    {
        "_id": 1338,
        "fecha": { "$date" : "2019-12-31T16:23:14Z" },
        "decripcion": "\nLet me try this with an example:\n\nRegex Code: (?:animal)(?:=)(\\w+)(,)\\1\\2\n\nSearch String:\n\nLine 1 - animal=cat,dog,cat,tiger,dog\n\nLine 2 - animal=cat,cat,dog,dog,tiger\n\nLine 3 - animal=dog,dog,cat,cat,tiger\n\n(?:animal) --> Non-Captured Group 1\n\n(?:=)--> Non-Captured Group 2\n\n(\\w+)--> Captured Group 1\n\n(,)--> Captured Group 2\n\n\\1 --> result of captured group 1 i.e In Line 1 is cat, In Line 2 is cat, In Line 3 is dog.\n\n\\2 --> result of captured group 2 i.e comma (,)\n\nSo in this code by giving \\1 and \\2 we recall or repeat the result of captured group 1 and 2 respectively later in the code.\n\nAs per the order of code (?:animal) should be group 1 and (?:=) should be group 2 and continues..\n\nbut by giving the ?: we make the match-group non captured (which do not count off in matched group, so the grouping number starts from the first captured group and not the non captured), so that the repetition of the result of match-group (?:animal) can't be called later in code.\n\nHope this explains the use of non capturing group.\n\n\n    ",
        "votes": 37,
        "comentarios": [
            {
                "decripcion": "Excellent explanation.  Very instructive !!",
                "fecha": { "$date" : "2021-04-10T00:19:52Z" },
                "usuario": "Rich Lysakowski PhD",
                "usuario_id": 2324
            }
        ],
        "usuario": "shekhar gehlot",
        "usuario_id": 2325
    },
    {
        "_id": 1339,
        "fecha": { "$date" : "2010-08-18T13:33:03Z" },
        "decripcion": "\nGroups that capture you can use later on in the regex to match OR you can use them in the replacement part of the regex.  Making a non-capturing group simply exempts that group from being used for either of these reasons.  \n\nNon-capturing groups are great if you are trying to capture many different things and there are some groups you don't want to capture. \n\nThats pretty much the reason they exist.  While you are learning about groups, learn about Atomic Groups, they do a lot!  There is also lookaround groups but they are a little more complex and not used so much.\n\nExample of using later on in the regex (backreference):\n\n<([A-Z][A-Z0-9]*)\\b[^>]*>.*?</\\1>  [ Finds an xml tag (without ns support) ]\n\n([A-Z][A-Z0-9]*) is a capturing group (in this case it is the tagname)\n\nLater on in the regex is \\1 which means it will only match the same text that was in the first group (the ([A-Z][A-Z0-9]*) group) (in this case it is matching the end tag).\n    ",
        "votes": 18,
        "comentarios": [
            {
                "decripcion": "could you give a simple example of how it will be used later to match OR?",
                "fecha": { "$date" : "2010-08-18T13:27:02Z" },
                "usuario": "never_had_a_name",
                "usuario_id": 2326
            },
            {
                "decripcion": "i mean you can use to to match later or you can use it in the replacement.  The or in that sentence was just to show you there are two uses for a capturing group",
                "fecha": { "$date" : "2010-08-18T13:33:57Z" },
                "usuario": "Bob Fincheimer",
                "usuario_id": 2327
            }
        ],
        "usuario": "Bob Fincheimer",
        "usuario_id": 2327
    },
    {
        "_id": 1340,
        "fecha": { "$date" : "2018-05-11T05:27:03Z" },
        "decripcion": "\ntl;dr non-capturing groups, as the name suggests are the parts of the regex that you do not want to be included in the match and ?: is a way to define a group as being non-capturing.\n\nLet's say you have an email address example@example.com. The following regex will create two groups, the id part and @example.com part. (\\p{Alpha}*[a-z])(@example.com). For simplicity's sake, we are extracting the whole domain name including the @ character.\n\nNow let's say, you only need the id part of the address. What you want to do is to grab the first group of the match result, surrounded by () in the regex and the way to do this is to use the non-capturing group syntax, i.e. ?:. So the regex (\\p{Alpha}*[a-z])(?:@example.com) will return just the id part of the email.\n    ",
        "votes": 16,
        "comentarios": [
            {
                "decripcion": "I was struggling to understand all those answers here until I scrolled down to yours!",
                "fecha": { "$date" : "2020-10-22T10:17:40Z" },
                "usuario": "metablaster",
                "usuario_id": 2328
            }
        ],
        "usuario": "Aaron S",
        "usuario_id": 2329
    },
    {
        "_id": 1341,
        "fecha": { "$date" : "2018-01-02T01:04:00Z" },
        "decripcion": "\nI cannot comment on the top answers to say this: I would like to add an explicit point which is only implied in the top answers:\n\nThe non-capturing group (?...) \ndoes not remove any characters from the original full match, it only reorganises the regex visually to the programmer. \n\nTo access a specific part of the regex without defined extraneous characters you would always need to use .group(<index>)\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "You have provided the most important hint that was missing in the rest of the answers. I tried all the examples in them and using the choicest of expletives, as I did not get the desired result. Only your posting showed me where I went wrong.",
                "fecha": { "$date" : "2018-07-12T07:04:25Z" },
                "usuario": "Seshadri R",
                "usuario_id": 2330
            },
            {
                "decripcion": "Glad to hear it!",
                "fecha": { "$date" : "2018-07-12T12:04:57Z" },
                "usuario": "Scott Anderson",
                "usuario_id": 2331
            }
        ],
        "usuario": "Scott Anderson",
        "usuario_id": 2331
    },
    {
        "_id": 1342,
        "fecha": { "$date" : "2016-03-01T10:00:36Z" },
        "decripcion": "\nWell I am a JavaScript developer and will try to explain its significance pertaining to JavaScript.\n\nConsider a scenario where you want to match cat is animal\nwhen you would like match cat and animal and both should have a is in between them.\n\n // this will ignore \"is\" as that's is what we want\n\"cat is animal\".match(/(cat)(?: is )(animal)/) ;\nresult [\"cat is animal\", \"cat\", \"animal\"]\n\n // using lookahead pattern it will match only \"cat\" we can\n // use lookahead but the problem is we can not give anything\n // at the back of lookahead pattern\n\"cat is animal\".match(/cat(?= is animal)/) ;\nresult [\"cat\"]\n\n //so I gave another grouping parenthesis for animal\n // in lookahead pattern to match animal as well\n\"cat is animal\".match(/(cat)(?= is (animal))/) ;\nresult [\"cat\", \"cat\", \"animal\"]\n\n // we got extra cat in above example so removing another grouping\n\"cat is animal\".match(/cat(?= is (animal))/) ;\nresult [\"cat\", \"animal\"]\n\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "Gaurav",
        "usuario_id": 2332
    },
    {
        "_id": 1343,
        "fecha": { "$date" : "2014-03-08T17:33:15Z" },
        "decripcion": "\nIn complex regular expressions you may have the situation arise where you wish to use a large number of groups some of which are there for repetition matching and some of which are there to provide back references. By default the text matching each group is loaded into the backreference array. Where we have lots of groups and only need to be able to reference some of them from the backreference array we can override this default behaviour to tell the regular expression that certain groups are there only for repetition handling and do not need to be captured and stored in the backreference array.\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "Jack Peng",
        "usuario_id": 2333
    },
    {
        "_id": 1344,
        "fecha": { "$date" : "2017-07-15T03:34:42Z" },
        "decripcion": "\nOne interesting thing that I came across is the fact that you can have a capturing group inside a non-capturing group. Have a look at below regex for matching web urls:\n\nvar parse_url_regex = /^(?:([A-Za-z]+):)(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/;\n\n\nInput url string:\n\nvar url = \"http://www.ora.com:80/goodparts?q#fragment\";\n\n\nThe first group in my regex (?:([A-Za-z]+):) is a non-capturing group which matches the protocol scheme and colon : character i.e. http: but when I was running below code, I was seeing the 1st index of the returned array was containing the string http when I was thinking that http and colon : both will not get reported as they are inside a non-capturing group.\n\nconsole.debug(parse_url_regex.exec(url));\n\n\n\n\nI thought if the first group (?:([A-Za-z]+):) is a non-capturing group then why it is returning http string in the output array.\n\nSo if you notice that there is a nested group ([A-Za-z]+) inside the non-capturing group. That nested group ([A-Za-z]+) is a capturing group (not having ?: at the beginning) in itself inside a non-capturing group (?:([A-Za-z]+):). That's why the text http still gets captured but the colon : character which is inside the non-capturing group but outside the capturing group doesn't get reported in the output array.\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "RBT",
        "usuario_id": 2334
    },
    {
        "_id": 1345,
        "fecha": { "$date" : "2019-01-07T08:08:48Z" },
        "decripcion": "\nIts extremely simple, We can understand with simple date example, suppose if the date is mentioned as 1st January 2019 or 2nd May 2019 or any other date and we simply want to convert it to dd/mm/yyyy format we would not need the month's name which is January or February for that matter, so in order to capture the numeric part, but not the (optional) suffix you can use a non-capturing group.\n\nso the regular expression would be,\n\n([0-9]+)(?:January|February)?\n\n\nIts as simple as that.\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Naved Ahmad",
        "usuario_id": 2335
    },
    {
        "_id": 1346,
        "fecha": { "$date" : "2019-12-31T16:24:49Z" },
        "decripcion": "\nI think I would give you the answer. Don't use capture variables without checking that the match succeeded.\n\nThe capture variables, $1, etc, are not valid unless the match succeeded, and they're not cleared, either.\n\n#!/usr/bin/perl  \nuse warnings;\nuse strict;   \n$_ = \"bronto saurus burger\";\nif (/(?:bronto)? saurus (steak|burger)/)\n{\n    print \"Fred wants a  $1\";\n}\nelse\n{\n    print \"Fred dont wants a $1 $2\";\n}\n\n\nIn the above example, to avoid capturing bronto in $1, (?:) is used.\n\nIf the pattern is matched , then $1 is captured as next grouped pattern.\n\nSo, the output will be as below:\n\nFred wants a burger\n\n\nIt is Useful if you don't want the matches to be saved.\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Harini",
        "usuario_id": 2336
    },
    {
        "_id": 1347,
        "fecha": { "$date" : "2018-05-07T03:50:43Z" },
        "decripcion": "\nOpen your Google Chrome devTools and then Console tab: and type this:\n\n\"Peace\".match(/(\\w)(\\w)(\\w)/)\n\n\nRun it and you will see:\n\n[\"Pea\", \"P\", \"e\", \"a\", index: 0, input: \"Peace\", groups: undefined]\n\n\nThe JavaScript RegExp engine capture three groups, the items with indexes 1,2,3. Now  use non-capturing mark to see the result.\n\n\"Peace\".match(/(?:\\w)(\\w)(\\w)/)\n\n\nThe result is:\n\n[\"Pea\", \"e\", \"a\", index: 0, input: \"Peace\", groups: undefined]\n\n\nThis is obvious what is non capturing group.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "AmerllicA",
        "usuario_id": 2337
    },
    {
        "_id": 1348,
        "fecha": { "$date" : "2021-07-08T00:41:04Z" },
        "decripcion": "\nA Simple Answer\nUse them to ensure one of several possibilities occur here (?:one|two) or an optional phrase camp(?:site)? or in general, anywhere you want to reference a group/phrase/section without needing to refer to it specifically.\nThey keep your captured group(s) count to a minimum.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Cyberwip",
        "usuario_id": 2338
    },
    {
        "_id": 1349,
        "fecha": { "$date" : "2021-04-24T10:43:08Z" },
        "decripcion": "\n(?: ... ) acts as a group ( ... ) but doesn't capture the matched data. It's really much more efficient than a standard capture group. It is use when you want to group something but don't need to reuse it later. @Toto\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1350,
        "fecha": { "$date" : "2019-05-28T16:08:10Z" },
        "decripcion": "\nWhich characters you must and which you mustn't escape indeed depends on the regex flavor you're working with.\n\nFor PCRE, and most other so-called Perl-compatible flavors, escape these outside character classes:\n\n.^$*+?()[{\\|\n\n\nand these inside character classes:\n\n^-]\\\n\n\nFor POSIX extended regexes (ERE), escape these outside character classes (same as PCRE):\n\n.^$*+?()[{\\|\n\n\nEscaping any other characters is an error with POSIX ERE.\n\nInside character classes, the backslash is a literal character in POSIX regular expressions.  You cannot use it to escape anything.  You have to use \"clever placement\" if you want to include character class metacharacters as literals.  Put the ^ anywhere except at the start, the ] at the start, and the - at the start or the end of the character class to match these literally, e.g.:\n\n[]^-]\n\n\nIn POSIX basic regular expressions (BRE), these are metacharacters that you need to escape to suppress their meaning:\n\n.^$*[\\\n\n\nEscaping parentheses and curly brackets in BREs gives them the special meaning their unescaped versions have in EREs.  Some implementations (e.g. GNU) also give special meaning to other characters when escaped, such as \\? and +.  Escaping a character other than .^$*(){} is normally an error with BREs.\n\nInside character classes, BREs follow the same rule as EREs.\n\nIf all this makes your head spin, grab a copy of RegexBuddy.  On the Create tab, click Insert Token, and then Literal.  RegexBuddy will add escapes as needed.\n    ",
        "votes": 398,
        "comentarios": [
            {
                "decripcion": "It seems to me you forgot the \"/\", which also needs to be escaped outside a class.",
                "fecha": { "$date" : "2015-01-14T08:23:29Z" },
                "usuario": "jackthehipster",
                "usuario_id": 2339
            },
            {
                "decripcion": "/ is not a metacharacter in any of the regular expression flavors I mentioned, so the regular expression syntax does not require escaping it.  When a regular expression is quoted as a literal in a programming language, then the string or regex formatting rules of that language may require / or \" or ' to be escaped, and may even require `\\` to be doubly escaped.",
                "fecha": { "$date" : "2015-02-06T23:39:05Z" },
                "usuario": "Jan Goyvaerts",
                "usuario_id": 2340
            },
            {
                "decripcion": "what about colon, \":\"? Shall it be escaped inside character classes as well as outside? en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions says \"PCRE has consistent escaping rules: any non-alpha-numeric character may be escaped to mean its literal value [...]\"",
                "fecha": { "$date" : "2015-05-22T14:05:50Z" },
                "usuario": "nicolallias",
                "usuario_id": 2341
            },
            {
                "decripcion": "MAY be escaped is not the same as SHOULD be escaped.  The PCRE syntax never requires a literal colon to be escaped, so escaping literal colons only makes your regex harder to read.",
                "fecha": { "$date" : "2015-06-09T07:52:00Z" },
                "usuario": "Jan Goyvaerts",
                "usuario_id": 2340
            },
            {
                "decripcion": "For non-POSIX ERE (the one I use most often because it's what's implemented by Tcl) escaping other things don't generate errors.",
                "fecha": { "$date" : "2015-08-21T04:47:49Z" },
                "usuario": "slebetman",
                "usuario_id": 2342
            }
        ],
        "usuario": "Jan Goyvaerts",
        "usuario_id": 2340
    },
    {
        "_id": 1351,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nModern RegEx Flavors (PCRE)\nIncludes C, C++, Delphi, EditPad, Java, JavaScript, Perl, PHP (preg), PostgreSQL, PowerGREP, PowerShell, Python, REALbasic, Real Studio, Ruby, TCL, VB.Net, VBScript, wxWidgets, XML Schema, Xojo, XRegExp.PCRE compatibility may vary\n\u00a0\u00a0\u00a0\u00a0Anywhere: . ^ $ * + - ? ( ) [ ] { } \\ |\n\nLegacy RegEx Flavors (BRE/ERE)\nIncludes awk, ed, egrep, emacs, GNUlib, grep, PHP (ereg), MySQL, Oracle, R, sed.PCRE support may be enabled in later versions or by using extensions\nERE/awk/egrep/emacs\n\u00a0\u00a0\u00a0\u00a0Outside a character class: . ^ $ * + ? ( ) [ { } \\ |\n\u00a0\u00a0\u00a0\u00a0Inside a character class: ^ - [ ]\nBRE/ed/grep/sed\n\u00a0\u00a0\u00a0\u00a0Outside a character class: . ^ $ * [ \\\n\u00a0\u00a0\u00a0\u00a0Inside a character class: ^ - [ ]\n\u00a0\u00a0\u00a0\u00a0For literals, don't escape: + ? ( ) { } |\n\u00a0\u00a0\u00a0\u00a0For standard regex behavior, escape: \\+ \\? \\( \\) \\{ \\} \\|\n\nNotes\n\nIf unsure about a specific character, it can be escaped like \\xFF\nAlphanumeric characters cannot be escaped with a backslash\nArbitrary symbols can be escaped with a backslash in PCRE, but not BRE/ERE (they must only be escaped when required). For PCRE ] - only need escaping within a character class, but I kept them in a single list for simplicity\nQuoted expression strings must also have the surrounding quote characters escaped, and often with backslashes doubled-up (like \"(\\\")(/)(\\\\.)\" versus /(\")(\\/)(\\.)/ in JavaScript)\nAside from escapes, different regex implementations may support different modifiers, character classes, anchors, quantifiers, and other features. For more details, check out regular-expressions.info, or use regex101.com to test your expressions live\n\n    ",
        "votes": 67,
        "comentarios": [
            {
                "decripcion": "There are many errors in your answer, including but not limited to:  None of your \"modern\" flavors require - or ] to be escaped outside character classes.  POSIX (BRE/ERE) doesn't have an escape character inside character classes.  The regex flavor in Delphi's RTL is actually based on PCRE.  Python, Ruby, and XML have their own flavors that are closer to PCRE than to the POSIX flavors.",
                "fecha": { "$date" : "2017-02-23T08:05:50Z" },
                "usuario": "Jan Goyvaerts",
                "usuario_id": 2340
            },
            {
                "decripcion": "@JanGoyvaerts Thanks for the correction. The flavors you mentioned are indeed closer to PCRE. As for the escapes, I kept them that way for simplicity; it's easier to remember just to escape everywhere than a few exceptions. Power users will know what's up, if they want to avoid a few backslashes. Anyway, I updated my answer with a few clarifications that hopefully address some of this stuff.",
                "fecha": { "$date" : "2017-03-07T03:15:58Z" },
                "usuario": "Beejor",
                "usuario_id": 2343
            }
        ],
        "usuario": "Beejor",
        "usuario_id": 2343
    },
    {
        "_id": 1352,
        "fecha": { "$date" : "2008-12-29T23:42:45Z" },
        "decripcion": "\nUnfortunately there really isn't a set set of escape codes since it varies based on the language you are using.\n\nHowever, keeping a page like the Regular Expression Tools Page or this Regular Expression Cheatsheet can go a long way to help you quickly filter things out.\n    ",
        "votes": 23,
        "comentarios": [
            {
                "decripcion": "The Addedbytes cheat sheet is grossly oversimplified, and has some glaring errors.  For example, it says \\< and \\> are word boundaries, which is true only (AFAIK) in the Boost regex library.  But elsewhere it says < and > are metacharacters and must be escaped (to \\< and \\>) to match them literally, which not true in any flavor",
                "fecha": { "$date" : "2017-03-07T05:00:26Z" },
                "usuario": "Alan Moore",
                "usuario_id": 2111
            }
        ],
        "usuario": "Dillie-O",
        "usuario_id": 2344
    },
    {
        "_id": 1353,
        "fecha": { "$date" : "2008-12-30T00:05:08Z" },
        "decripcion": "\nPOSIX recognizes multiple variations on regular expressions - basic regular expressions (BRE) and extended regular expressions (ERE).  And even then, there are quirks because of the historical implementations of the utilities standardized by POSIX.\n\nThere isn't a simple rule for when to use which notation, or even which notation a given command uses.\n\nCheck out Jeff Friedl's Mastering Regular Expressions book.\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Jonathan Leffler",
        "usuario_id": 2345
    },
    {
        "_id": 1354,
        "fecha": { "$date" : "2008-12-29T23:44:33Z" },
        "decripcion": "\nUnfortunately, the meaning of things like ( and \\( are swapped between Emacs style regular expressions and most other styles.  So if you try to escape these you may be doing the opposite of what you want.\n\nSo you really have to know what style you are trying to quote.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Darron",
        "usuario_id": 2346
    },
    {
        "_id": 1355,
        "fecha": { "$date" : "2008-12-29T23:37:02Z" },
        "decripcion": "\nReally, there isn't.  there are about a half-zillion different regex syntaxes; they seem to come down to Perl, EMACS/GNU, and AT&T in general, but I'm always getting surprised too.\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Charlie Martin",
        "usuario_id": 2347
    },
    {
        "_id": 1356,
        "fecha": { "$date" : "2017-06-20T22:51:10Z" },
        "decripcion": "\nSometimes simple escaping is not possible with the characters you've listed. For example, using a backslash to escape a bracket isn't going to work in the left hand side of a substitution string in sed, namely\n\nsed -e 's/foo\\(bar/something_else/'\n\n\nI tend to just use a simple character class definition instead, so the above expression becomes\n\nsed -e 's/foo[(]bar/something_else/'\n\n\nwhich I find works for most regexp implementations.\n\nBTW Character classes are pretty vanilla regexp components so they tend to work in most situations where you need escaped characters in regexps.\n\nEdit: After the comment below, just thought I'd mention the fact that you also have to consider the difference between finite state automata and non-finite state automata when looking at the behaviour of regexp evaluation.\n\nYou might like to look at \"the shiny ball book\" aka Effective Perl (sanitised Amazon link), specifically the chapter on regular expressions, to get a feel for then difference in regexp engine evaluation types.\n\nNot all the world's a PCRE!\n\nAnyway, regexp's are so clunky compared to SNOBOL!  Now that was an interesting programming course! Along with the one on Simula.\n\nAh the joys of studying at UNSW in the late '70's! (-:\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "'sed' is a command for which plain '(' is not special but '\\(' is special; in contrast, PCRE reverses the sense, so '(' is special, but '\\(' is not.  This is exactly what the OP is asking about.",
                "fecha": { "$date" : "2008-12-30T08:43:36Z" },
                "usuario": "Jonathan Leffler",
                "usuario_id": 2345
            },
            {
                "decripcion": "sed is a *nix utility that uses one of the most primitive sets of regexp evaluation. PCRE doesn't enter in to the situation I describes as it involves a different class of (in)finite automata with the way it evaluates regexps. I think my suggestion for the minimum set of regexp syntax still holds.",
                "fecha": { "$date" : "2008-12-31T01:32:40Z" },
                "usuario": "Rob Wells",
                "usuario_id": 2348
            },
            {
                "decripcion": "On a POSIX-compliant system, sed uses POSIX BRE, which I cover in my answer.  The GNU version on modern Linux system uses POSIX BRE with a few extensions.",
                "fecha": { "$date" : "2008-12-31T07:30:02Z" },
                "usuario": "Jan Goyvaerts",
                "usuario_id": 2340
            }
        ],
        "usuario": "Rob Wells",
        "usuario_id": 2348
    },
    {
        "_id": 1357,
        "fecha": { "$date" : "2019-06-19T14:55:35Z" },
        "decripcion": "\nhttps://perldoc.perl.org/perlre.html#Quoting-metacharacters and https://perldoc.perl.org/functions/quotemeta.html\n\nIn the official documentation, such characters are called metacharacters. Example of quoting:\n\nmy $regex = quotemeta($string)\ns/$regex/something/\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "MUY Belgium",
        "usuario_id": 2349
    },
    {
        "_id": 1358,
        "fecha": { "$date" : "2013-10-03T08:33:51Z" },
        "decripcion": "\nFor PHP, \"it is always safe to precede a non-alphanumeric with \"\\\" to specify that it stands for itself.\" - http://php.net/manual/en/regexp.reference.escape.php.\n\nExcept if it's a \" or '.  :/\n\nTo escape regex pattern variables (or partial variables) in PHP use preg_quote()\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "zylstra",
        "usuario_id": 2350
    },
    {
        "_id": 1359,
        "fecha": { "$date" : "2019-05-05T14:45:45Z" },
        "decripcion": "\nTo know when and what to escape without attempts is necessary to understand precisely the chain of contexts the string pass through. You will specify the string from the farthest side to its final destination which is the memory handled by the regexp parsing code.\n\nBe aware how the string in memory is processed: if can be a plain string inside the code, or a string entered to the command line, but a could be either an interactive command line or a command line stated inside a shell script file, or inside a variable in memory mentioned by the code, or an (string)argument through further evaluation, or a string containing code generated dynamically with any sort of encapsulation...\n\nEach of this context assigned some characters with special functionality.\n\nWhen you want to pass the character literally without using its special function (local to the context), than that's the case you have to escape it, for the next context... which might need some other escape characters which might additionally need to be escaped in the preceding context(s).\nFurthermore there can be things like character encoding (the most insidious is utf-8 because it look like ASCII for common characters, but might be optionally interpreted even by the terminal depending on its settings so it might behave differently, then the encoding attribute of HTML/XML, it's necessary to understand the process precisely right.\n\nE.g. A regexp in the command line starting with perl -npe, needs to be transferred to a set of exec system calls connecting as pipe the file handles, each of this exec system calls just has a list of arguments that were separated by (non escaped)spaces, and possibly pipes(|) and redirection (> N> N>&M), parenthesis, interactive expansion of * and ?, $(()) ... (all this are special characters used by the *sh which might appear to interfere with the character of the regular expression in the next context, but they are evaluated in order: before the command line. The command line is read by a program as bash/sh/csh/tcsh/zsh, essentially inside double quote or single quote the escape is simpler but it is not necessary to quote a string in the command line because mostly the space has to be prefixed with backslash and the quote are not necessary leaving available the expand functionality for characters * and ?, but this parse as different context as within quote. Then when the command line is evaluated the regexp obtained in memory (not as written in the command line) receives the same treatment as it would be in a source file.\nFor regexp there is character-set context within square brackets [ ], perl regular expression can be quoted by a large set of non alfa-numeric characters (E.g. m// or m:/better/for/path: ...).\n\nYou have more details about characters in other answer, which are very specific to the final regexp context. As I noted you mention that you find the regexp escape with attempts, that's probably because different context has different set of character that confused your memory of attempts (often backslash is the character used in those different context to escape a literal character instead of its function).\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Marco Munari",
        "usuario_id": 2351
    },
    {
        "_id": 1360,
        "fecha": { "$date" : "2019-09-12T19:32:40Z" },
        "decripcion": "\nFor Ionic (Typescript) you have to double slash in order to scape the characters.\nFor example (this is to match some special characters):\n\n\"^(?=.*[\\\\]\\\\[!\u00a1\\'=\u00aa\u00ba\\\\-\\\\_\u00e7@#$%^&*(),;\\\\.?\\\":{}|<>\\+\\\\/])\"\n\n\nPay attention to this ] [ - _ . / characters. They have to be double slashed. If you don't do that, you are going to have a type error in your code.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Alejandro del R\u00edo",
        "usuario_id": 2352
    },
    {
        "_id": 1361,
        "fecha": { "$date" : "2020-08-20T12:23:38Z" },
        "decripcion": "\nMaybe an old thread, but this code might be useful to visitors who want to create without regex\ndef listToString(s):  \n    \n    # initialize an empty string \n    str1 = \"\" \n    \n    # return string   \n    return (str1.join(s))\n\n\nr = \"Hello! How are you? *Smiling_Face* *Heart* erwer\"\nr1 = list(r)\ni = 0\nr2 = list()\nstart = True\n\nfor string in r1:\n    if string == \"*\":\n        if(start):\n            start = False\n        else:\n            start = True\n    else:\n        if(start):\n            r2.append(string)\n        else:\n            print(\"skipped\" + string)\n            \n \nprint(listToString(r2))\n\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "Create what?\u200b",
                "fecha": { "$date" : "2020-10-26T20:58:22Z" },
                "usuario": "TheMaster",
                "usuario_id": 2353
            }
        ],
        "usuario": "uday kiran",
        "usuario_id": 2354
    },
    {
        "_id": 1362,
        "fecha": { "$date" : "2020-12-07T14:32:45Z" },
        "decripcion": "\nRegular expressions are used for Pattern Matching.\nTo use in Excel follow these steps:\nStep 1: Add VBA reference to \"Microsoft VBScript Regular Expressions 5.5\"\n\nSelect \"Developer\" tab (I don't have this tab what do I do?)\nSelect \"Visual Basic\" icon from 'Code' ribbon section\nIn \"Microsoft Visual Basic for Applications\" window select \"Tools\" from the top menu.\nSelect \"References\"\nCheck the box next to \"Microsoft VBScript Regular Expressions 5.5\" to include in your workbook.\nClick \"OK\"\n\nStep 2: Define your pattern\nBasic definitions:\n-  Range.\n\nE.g. a-z matches an lower case letters from a to z\nE.g. 0-5 matches any number from 0 to 5\n\n[] Match exactly one of the objects inside these brackets.\n\nE.g. [a] matches the letter a\nE.g. [abc] matches a single letter which can be a, b or c\nE.g. [a-z] matches any single lower case letter of the alphabet.\n\n() Groups different matches for return purposes.  See examples below.\n{} Multiplier for repeated copies of pattern defined before it.\n\nE.g. [a]{2} matches two consecutive lower case letter a: aa\nE.g. [a]{1,3} matches at least one and up to three lower case letter a, aa, aaa\n\n+  Match at least one, or more, of the pattern defined before it.\n\nE.g. a+ will match consecutive a's a, aa, aaa, and so on\n\n?  Match zero or one of the pattern defined before it.\n\nE.g. Pattern may or may not be present but can only be matched one time.\nE.g. [a-z]? matches empty string or any single lower case letter.\n\n*  Match zero or more of the pattern defined before it.\n\nE.g. Wildcard for pattern that may or may not be present.\nE.g. [a-z]* matches empty string or string of lower case letters.\n\n.  Matches any character except newline \\n\n\nE.g. a. Matches a two character string starting with a and ending with anything except \\n\n\n|  OR operator\n\nE.g. a|b means either a or b can be matched.\nE.g. red|white|orange matches exactly one of the colors.\n\n^  NOT operator\n\nE.g. [^0-9] character can not contain a number\nE.g. [^aA] character can not be lower case a or upper case A\n\n\\  Escapes special character that follows (overrides above behavior)\n\nE.g. \\., \\\\, \\(, \\?, \\$, \\^\n\n\nAnchoring Patterns:\n^  Match must occur at start of string\n\nE.g. ^a First character must be lower case letter a\nE.g. ^[0-9] First character must be a number.\n\n$  Match must occur at end of string\n\nE.g. a$ Last character must be lower case letter a\n\n\nPrecedence table:\nOrder  Name                Representation\n1      Parentheses         ( )\n2      Multipliers         ? + * {m,n} {m, n}?\n3      Sequence & Anchors  abc ^ $\n4      Alternation         |\n\n\nPredefined Character Abbreviations:\nabr    same as       meaning\n\\d     [0-9]         Any single digit\n\\D     [^0-9]        Any single character that's not a digit\n\\w     [a-zA-Z0-9_]  Any word character\n\\W     [^a-zA-Z0-9_] Any non-word character\n\\s     [ \\r\\t\\n\\f]   Any space character\n\\S     [^ \\r\\t\\n\\f]  Any non-space character\n\\n     [\\n]          New line\n\n\nExample 1: Run as macro\nThe following example macro looks at the value in cell A1 to see if the first 1 or 2 characters are digits.  If so, they are removed and the rest of the string is displayed.  If not, then a box appears telling you that no match is found.  Cell A1 values of 12abc will return abc, value of 1abc will return abc, value of abc123 will return \"Not Matched\" because the digits were not at the start of the string.\nPrivate Sub simpleRegex()\n    Dim strPattern As String: strPattern = \"^[0-9]{1,2}\"\n    Dim strReplace As String: strReplace = \"\"\n    Dim regEx As New RegExp\n    Dim strInput As String\n    Dim Myrange As Range\n    \n    Set Myrange = ActiveSheet.Range(\"A1\")\n    \n    If strPattern <> \"\" Then\n        strInput = Myrange.Value\n        \n        With regEx\n            .Global = True\n            .MultiLine = True\n            .IgnoreCase = False\n            .Pattern = strPattern\n        End With\n        \n        If regEx.Test(strInput) Then\n            MsgBox (regEx.Replace(strInput, strReplace))\n        Else\n            MsgBox (\"Not matched\")\n        End If\n    End If\nEnd Sub\n\n\nExample 2: Run as an in-cell function\nThis example is the same as example 1 but is setup to run as an in-cell function. To use, change the code to this:\nFunction simpleCellRegex(Myrange As Range) As String\n    Dim regEx As New RegExp\n    Dim strPattern As String\n    Dim strInput As String\n    Dim strReplace As String\n    Dim strOutput As String\n    \n    \n    strPattern = \"^[0-9]{1,3}\"\n    \n    If strPattern <> \"\" Then\n        strInput = Myrange.Value\n        strReplace = \"\"\n        \n        With regEx\n            .Global = True\n            .MultiLine = True\n            .IgnoreCase = False\n            .Pattern = strPattern\n        End With\n        \n        If regEx.test(strInput) Then\n            simpleCellRegex = regEx.Replace(strInput, strReplace)\n        Else\n            simpleCellRegex = \"Not matched\"\n        End If\n    End If\nEnd Function\n\nPlace your strings (\"12abc\") in cell A1.  Enter this formula =simpleCellRegex(A1) in cell B1 and the result will be \"abc\".\n\n\nExample 3: Loop Through Range\nThis example is the same as example 1 but loops through a range of cells.\nPrivate Sub simpleRegex()\n    Dim strPattern As String: strPattern = \"^[0-9]{1,2}\"\n    Dim strReplace As String: strReplace = \"\"\n    Dim regEx As New RegExp\n    Dim strInput As String\n    Dim Myrange As Range\n    \n    Set Myrange = ActiveSheet.Range(\"A1:A5\")\n    \n    For Each cell In Myrange\n        If strPattern <> \"\" Then\n            strInput = cell.Value\n            \n            With regEx\n                .Global = True\n                .MultiLine = True\n                .IgnoreCase = False\n                .Pattern = strPattern\n            End With\n            \n            If regEx.Test(strInput) Then\n                MsgBox (regEx.Replace(strInput, strReplace))\n            Else\n                MsgBox (\"Not matched\")\n            End If\n        End If\n    Next\nEnd Sub\n\n\nExample 4: Splitting apart different patterns\nThis example loops through a range (A1, A2 & A3) and looks for a string starting with three digits followed by a single alpha character and then 4 numeric digits.  The output splits apart the pattern matches into adjacent cells by using the ().  $1 represents the first pattern matched within the first set of ().\nPrivate Sub splitUpRegexPattern()\n    Dim regEx As New RegExp\n    Dim strPattern As String\n    Dim strInput As String\n    Dim Myrange As Range\n    \n    Set Myrange = ActiveSheet.Range(\"A1:A3\")\n    \n    For Each C In Myrange\n        strPattern = \"(^[0-9]{3})([a-zA-Z])([0-9]{4})\"\n        \n        If strPattern <> \"\" Then\n            strInput = C.Value\n            \n            With regEx\n                .Global = True\n                .MultiLine = True\n                .IgnoreCase = False\n                .Pattern = strPattern\n            End With\n            \n            If regEx.test(strInput) Then\n                C.Offset(0, 1) = regEx.Replace(strInput, \"$1\")\n                C.Offset(0, 2) = regEx.Replace(strInput, \"$2\")\n                C.Offset(0, 3) = regEx.Replace(strInput, \"$3\")\n            Else\n                C.Offset(0, 1) = \"(Not matched)\"\n            End If\n        End If\n    Next\nEnd Sub\n\nResults:\n\n\nAdditional Pattern Examples\nString   Regex Pattern                  Explanation\na1aaa    [a-zA-Z][0-9][a-zA-Z]{3}       Single alpha, single digit, three alpha characters\na1aaa    [a-zA-Z]?[0-9][a-zA-Z]{3}      May or may not have preceding alpha character\na1aaa    [a-zA-Z][0-9][a-zA-Z]{0,3}     Single alpha, single digit, 0 to 3 alpha characters\na1aaa    [a-zA-Z][0-9][a-zA-Z]*         Single alpha, single digit, followed by any number of alpha characters\n\n</i8>    \\<\\/[a-zA-Z][0-9]\\>            Exact non-word character except any single alpha followed by any single digit\n\n    ",
        "votes": 1055,
        "comentarios": [
            {
                "decripcion": "You should not forget to Set regEx = Nothing. You will get Out Of Memory exceptions, when that Sub is executed frequently enought.",
                "fecha": { "$date" : "2015-03-13T10:28:07Z" },
                "usuario": "Kiril",
                "usuario_id": 2359
            },
            {
                "decripcion": "I adapted example 4 with SubMatches for treating more complex regex, basically I don't use replace when splitting, if anyone is interested: stackoverflow.com/questions/30218413/\u2026",
                "fecha": { "$date" : "2015-05-13T14:58:34Z" },
                "usuario": "Armfoot",
                "usuario_id": 2360
            },
            {
                "decripcion": "Late binding line: Set regEx = CreateObject(\"VBScript.RegExp\")",
                "fecha": { "$date" : "2015-12-05T11:23:33Z" },
                "usuario": "ZygD",
                "usuario_id": 2361
            },
            {
                "decripcion": "Okay, I'm pretty sure it's because the code is in ThisWorkbook.  Try moving the code to a separate Module.",
                "fecha": { "$date" : "2019-05-09T04:00:16Z" },
                "usuario": "Automate This",
                "usuario_id": 2362
            },
            {
                "decripcion": "@PortlandRunner in the \"project explorer\" (?) this excel file lacked a \"Modules\" subfolder, although another file showed one. Right-clicked the file and chose 'insert module', then double-clicked \"Module 1\" and pasted the code. Saved. Back to workbook and keyed in the function again - it worked. Might be noteworthy in the answer, for the sake of the inexperienced like me? Thanks for the help.",
                "fecha": { "$date" : "2019-05-10T05:52:01Z" },
                "usuario": "youcantryreachingme",
                "usuario_id": 2363
            }
        ],
        "usuario": "Automate This",
        "usuario_id": 2362
    },
    {
        "_id": 1363,
        "fecha": { "$date" : "2015-09-28T15:17:43Z" },
        "decripcion": "\nTo make use of regular expressions directly in Excel formulas the following UDF (user defined function) can be of help. It more or less directly exposes regular expression functionality as an excel function.\n\nHow it works\n\nIt takes 2-3 parameters.\n\n\nA text to use the regular expression on.\nA regular expression.\nA format string specifying how the result should look. It can contain $0, $1, $2, and so on. $0 is the entire match, $1 and up correspond to the respective match groups in the regular expression. Defaults to $0.\n\n\nSome examples\n\nExtracting an email address:\n\n=regex(\"Peter Gordon: some@email.com, 47\", \"\\w+@\\w+\\.\\w+\")\n=regex(\"Peter Gordon: some@email.com, 47\", \"\\w+@\\w+\\.\\w+\", \"$0\")\n\n\nResults in: some@email.com\n\nExtracting several substrings:\n\n=regex(\"Peter Gordon: some@email.com, 47\", \"^(.+): (.+), (\\d+)$\", \"E-Mail: $2, Name: $1\")\n\n\nResults in: E-Mail: some@email.com, Name: Peter Gordon\n\nTo take apart a combined string in a single cell into its components in multiple cells:\n\n=regex(\"Peter Gordon: some@email.com, 47\", \"^(.+): (.+), (\\d+)$\", \"$\" & 1)\n=regex(\"Peter Gordon: some@email.com, 47\", \"^(.+): (.+), (\\d+)$\", \"$\" & 2)\n\n\nResults in: Peter Gordon some@email.com ...\n\nHow to use\n\nTo use this UDF do the following (roughly based on this Microsoft page. They have some good additional info there!):\n\n\nIn Excel in a Macro enabled file ('.xlsm') push ALT+F11 to open the Microsoft Visual Basic for Applications Editor.\nAdd VBA reference to the Regular Expressions library (shamelessly copied from Portland Runners++ answer):\n\n\nClick on Tools -> References (please excuse the german screenshot)\n\nFind Microsoft VBScript Regular Expressions 5.5 in the list and tick the checkbox next to it.\nClick OK.\n\nClick on Insert Module. If you give your module a different name make sure the Module does not have the same name as the UDF below (e.g. naming the Module Regex and the function regex causes #NAME! errors).\n\n\nIn the big text window in the middle insert the following:\n\nFunction regex(strInput As String, matchPattern As String, Optional ByVal outputPattern As String = \"$0\") As Variant\n    Dim inputRegexObj As New VBScript_RegExp_55.RegExp, outputRegexObj As New VBScript_RegExp_55.RegExp, outReplaceRegexObj As New VBScript_RegExp_55.RegExp\n    Dim inputMatches As Object, replaceMatches As Object, replaceMatch As Object\n    Dim replaceNumber As Integer\n\n    With inputRegexObj\n        .Global = True\n        .MultiLine = True\n        .IgnoreCase = False\n        .Pattern = matchPattern\n    End With\n    With outputRegexObj\n        .Global = True\n        .MultiLine = True\n        .IgnoreCase = False\n        .Pattern = \"\\$(\\d+)\"\n    End With\n    With outReplaceRegexObj\n        .Global = True\n        .MultiLine = True\n        .IgnoreCase = False\n    End With\n\n    Set inputMatches = inputRegexObj.Execute(strInput)\n    If inputMatches.Count = 0 Then\n        regex = False\n    Else\n        Set replaceMatches = outputRegexObj.Execute(outputPattern)\n        For Each replaceMatch In replaceMatches\n            replaceNumber = replaceMatch.SubMatches(0)\n            outReplaceRegexObj.Pattern = \"\\$\" & replaceNumber\n\n            If replaceNumber = 0 Then\n                outputPattern = outReplaceRegexObj.Replace(outputPattern, inputMatches(0).Value)\n            Else\n                If replaceNumber > inputMatches(0).SubMatches.Count Then\n                    'regex = \"A to high $ tag found. Largest allowed is $\" & inputMatches(0).SubMatches.Count & \".\"\n                    regex = CVErr(xlErrValue)\n                    Exit Function\n                Else\n                    outputPattern = outReplaceRegexObj.Replace(outputPattern, inputMatches(0).SubMatches(replaceNumber - 1))\n                End If\n            End If\n        Next\n        regex = outputPattern\n    End If\nEnd Function\n\nSave and close the Microsoft Visual Basic for Applications Editor window.\n\n    ",
        "votes": 219,
        "comentarios": [
            {
                "decripcion": "This answer combined with the steps here to create an Add-In, has been very helpful. Thank you. Make sure you don't give your module and function the same name!",
                "fecha": { "$date" : "2015-02-24T19:03:36Z" },
                "usuario": "Chris Hunt",
                "usuario_id": 2364
            },
            {
                "decripcion": "Just reiterating the comment above from Chris Hunt. Don't call your Module 'Regex' as well. Thought I was going mad for a while as the function wouldn't work due to a #NAME error",
                "fecha": { "$date" : "2015-09-28T14:57:13Z" },
                "usuario": "Chris",
                "usuario_id": 2365
            },
            {
                "decripcion": "Well, I'm gone nuts as I tried everything (including changing modules/names) and still getting the #NAME error >_>  i.imgur.com/UUQ6eCi.png",
                "fecha": { "$date" : "2016-08-15T20:46:26Z" },
                "usuario": "Enissay",
                "usuario_id": 2366
            },
            {
                "decripcion": "@Enissay: Try creating a minimal Function foo() As Variant \\n foo=\"Hello World\" \\n End Function UDF to see if that works. If yes, work your way up to the full thing above, if no something basic is broken (macros disabled?).",
                "fecha": { "$date" : "2016-08-16T07:27:39Z" },
                "usuario": "Patrick B\u00f6ker",
                "usuario_id": 2367
            },
            {
                "decripcion": "@Vijay: same at the github.com/malcolmp/excel-regular-expressions",
                "fecha": { "$date" : "2020-04-28T18:30:26Z" },
                "usuario": "Vadim",
                "usuario_id": 2368
            }
        ],
        "usuario": "Patrick B\u00f6ker",
        "usuario_id": 2367
    },
    {
        "_id": 1364,
        "fecha": { "$date" : "2017-05-23T12:26:38Z" },
        "decripcion": "\nExpanding on patszim's answer for those in a rush.\n\n\nOpen Excel workbook.\nAlt+F11 to open VBA/Macros window.\nAdd reference to regex under Tools then References\n\nand selecting Microsoft VBScript Regular Expression 5.5\n\nInsert a new module (code needs to reside in the module otherwise it doesn't work).\n\nIn the newly inserted module,\n\nadd the following code:  \n\nFunction RegxFunc(strInput As String, regexPattern As String) As String\n    Dim regEx As New RegExp\n    With regEx\n        .Global = True\n        .MultiLine = True\n        .IgnoreCase = False\n        .pattern = regexPattern\n    End With\n\n    If regEx.Test(strInput) Then\n        Set matches = regEx.Execute(strInput)\n        RegxFunc = matches(0).Value\n    Else\n        RegxFunc = \"not matched\"\n    End If\nEnd Function\n\nThe regex pattern is placed in one of the cells and absolute referencing is used on it.\n\nFunction will be tied to workbook that its created in.\nIf there's a need for it to be used in different workbooks, store the function in Personal.XLSB\n\n    ",
        "votes": 81,
        "comentarios": [
            {
                "decripcion": "Thanks for mentioning it needs to be in Personal.xlsb to be available in all Excel documents you work on.  Most (?) other answers don't make that clear.  Personal.XLSB would go in the  folder (might need to create the folder) C:\\Users\\user name\\AppData\\Local\\Microsoft\\Excel\\XLStart folder",
                "fecha": { "$date" : "2019-06-07T14:29:28Z" },
                "usuario": "Mark Stewart",
                "usuario_id": 2369
            },
            {
                "decripcion": "I chose this approach. However, there is a problem for me with Office 365. I noticed, if I open the xlsm file the other day, formulas with RegxFunc turn #NAME. Actually, to workaround this, I need to recreate the file. Any suggestions?",
                "fecha": { "$date" : "2021-03-18T11:47:37Z" },
                "usuario": "HoRn",
                "usuario_id": 2370
            },
            {
                "decripcion": "@HoRn #Name? You might want to try this so answer, stackoverflow.com/a/18841575/1699071. It states that the function name and module name were the same. The fix was to rename either the module name or the function name. Other posts on the same page also might help.",
                "fecha": { "$date" : "2021-03-18T15:38:47Z" },
                "usuario": "SAm",
                "usuario_id": 2371
            },
            {
                "decripcion": "I gave up on trying to get personal.xlsb working. Instead I put this function in my clipboard buffer's permanent collection (arsclip) and will just create a new module whenever I need it.  It's laughable how difficult this is for a function that should, by 2021, be native to Excel.  PS: Right in the middle of this, Stack asked me to pay for pasting.  Y'all, it's April 2. ^april\\x20?0?1$' fails today. Ya got me.",
                "fecha": { "$date" : "2021-04-02T22:14:08Z" },
                "usuario": "wistlo",
                "usuario_id": 2372
            },
            {
                "decripcion": "For some people from Non-English countries this may be interesting: You have to use a semicolon \";\" instead of a comma \",\" in RegxFunc(B5,$C$2)",
                "fecha": { "$date" : "2021-04-30T09:16:02Z" },
                "usuario": "devbf",
                "usuario_id": 2373
            }
        ],
        "usuario": "SAm",
        "usuario_id": 2371
    },
    {
        "_id": 1365,
        "fecha": { "$date" : "2018-06-09T16:10:59Z" },
        "decripcion": "\nHere is my attempt:\n\nFunction RegParse(ByVal pattern As String, ByVal html As String)\n    Dim regex   As RegExp\n    Set regex = New RegExp\n\n    With regex\n        .IgnoreCase = True  'ignoring cases while regex engine performs the search.\n        .pattern = pattern  'declaring regex pattern.\n        .Global = False     'restricting regex to find only first match.\n\n        If .Test(html) Then         'Testing if the pattern matches or not\n            mStr = .Execute(html)(0)        '.Execute(html)(0) will provide the String which matches with Regex\n            RegParse = .Replace(mStr, \"$1\") '.Replace function will replace the String with whatever is in the first set of braces - $1.\n        Else\n            RegParse = \"#N/A\"\n        End If\n\n    End With\nEnd Function\n\n    ",
        "votes": 29,
        "comentarios": [],
        "usuario": "Vikas Gautam",
        "usuario_id": 2374
    },
    {
        "_id": 1366,
        "fecha": { "$date" : "2019-11-26T20:20:20Z" },
        "decripcion": "\nThis isn't a direct answer but may provide a more efficient alternative for your consideration. Which is that Google Sheets has several built in Regex Functions these can be very convenient and help circumvent some of the technical procedures in Excel. Obviously there are some advantages to using Excel on your PC but for the large majority of users Google Sheets will offer an identical experience and may offer some benefits in portability and sharing of documents.  \n\nThey offer\n\nREGEXEXTRACT: Extracts matching substrings according to a regular expression.\n\nREGEXREPLACE: Replaces part of a text string with a different text string using regular expressions.\n\nSUBSTITUTE: Replaces existing text with new text in a string.\n\nREPLACE: Replaces part of a text string with a different text string.\n\nYou can type these directly into a cell like so and will produce whatever you'd like\n\n=REGEXMATCH(A2, \"[0-9]+\")\n\n\nThey also work quite well in combinations with other functions such as IF statements like so:\n\n=IF(REGEXMATCH(E8,\"MiB\"),REGEXEXTRACT(E8,\"\\d*\\.\\d*|\\d*\")/1000,IF(REGEXMATCH(E8,\"GiB\"),REGEXEXTRACT(E8,\"\\d*\\.\\d*|\\d*\"),\"\")\n\n\n\n\nHopefully this provides a simple workaround for users who feel taunted by the VBS component of Excel.  \n    ",
        "votes": 14,
        "comentarios": [
            {
                "decripcion": "Thanks for sharing Alex.  This is useful for those looking for Google version.  You might consider writing & answering another question specific to Google Sheets Regex as it has it's own nomenclature and would be very useful to others.  Regardless, you have my upvote!",
                "fecha": { "$date" : "2019-11-27T00:08:03Z" },
                "usuario": "Automate This",
                "usuario_id": 2362
            },
            {
                "decripcion": "Can you create a module that supports google syntax exactly in excel?",
                "fecha": { "$date" : "2020-07-02T10:39:45Z" },
                "usuario": "Vijay",
                "usuario_id": 2375
            }
        ],
        "usuario": "Alex Roseland",
        "usuario_id": 2376
    },
    {
        "_id": 1367,
        "fecha": { "$date" : "2018-06-09T16:10:14Z" },
        "decripcion": "\nI needed to use this as a cell function (like SUM or VLOOKUP) and found that it was easy to:\n\n\nMake sure you are in a Macro Enabled Excel File (save as xlsm).\nOpen developer tools Alt + F11\nAdd Microsoft VBScript Regular Expressions 5.5 as in other answers\nCreate the following function either in workbook or in its own module:\n\nFunction REGPLACE(myRange As Range, matchPattern As String, outputPattern As String) As Variant\n    Dim regex As New VBScript_RegExp_55.RegExp\n    Dim strInput As String\n\n    strInput = myRange.Value\n\n    With regex\n        .Global = True\n        .MultiLine = True\n        .IgnoreCase = False\n        .Pattern = matchPattern\n    End With\n\n    REGPLACE = regex.Replace(strInput, outputPattern)\n\nEnd Function\n\nThen you can use in cell with =REGPLACE(B1, \"(\\w) (\\d+)\", \"$1$2\") (ex: \"A 243\" to \"A243\")\n\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "This naming of outputPattern threw me off. It's the replacement value.",
                "fecha": { "$date" : "2017-06-01T17:47:51Z" },
                "usuario": "Thor",
                "usuario_id": 2377
            },
            {
                "decripcion": "Yes. I suppose I left it named pattern so it was clear it wasn't just string substitution and you could use regex matching groups like $1 $2 etc.",
                "fecha": { "$date" : "2017-06-01T17:50:44Z" },
                "usuario": "DeezCashews",
                "usuario_id": 2378
            }
        ],
        "usuario": "DeezCashews",
        "usuario_id": 2378
    },
    {
        "_id": 1368,
        "fecha": { "$date" : "2020-05-06T09:47:03Z" },
        "decripcion": "\nTo add to the valuable content, I would like to create this reminder on why sometimes RegEx within VBA is not ideal. Not all expressions are supported, but instead may throw an Error 5017 and may leave the author guessing (which I am a victim of myself).\n\nWhilst we can find some sources on what is supported, it would be helpfull to know which metacharacters etc. are not supported. A more in-depth explaination can be found here. Mentioned in this source:\n\n\n  \"Although \"VBScript\u2019s regular expression ... version 5.5 implements quite a few essential regex features that were missing in previous versions of VBScript. ... JavaScript and VBScript implement Perl-style regular expressions. However, they lack quite a number of advanced features available in Perl and other modern regular expression flavors:\"\n\n\n\n\nSo, not supported are:\n\n\nStart of String ancor \\A, alternatively use the ^ caret to match postion before 1st char in string\nEnd of String ancor \\Z, alternatively use the $ dollar sign to match postion after last char in string\nPositive LookBehind, e.g.: (?<=a)b (whilst postive LookAhead is supported)\nNegative LookBehind, e.g.: (?<!a)b (whilst negative LookAhead is supported)\nAtomic Grouping\nPossessive Quantifiers\nUnicode e.g.: \\{uFFFF}\nNamed Capturing Groups. Alternatively use Numbered Capturing Groups\nInline modifiers, e.g.: /i (case sensitivity) or /g (global) etc. Set these through the RegExp object properties > RegExp.Global = True and RegExp.IgnoreCase = True if available.\nConditionals\nRegular Expression Comments. Add these with regular ' comments in script \n\n\n\n\nI already hit a wall more than once using regular expressions within VBA. Usually with LookBehind but sometimes I even forget the modifiers. I have not experienced all these above mentioned backdrops myself but thought I would try to be extensive referring to some more in-depth information. Feel free to comment/correct/add. Big shout out to regular-expressions.info for a wealth of information.\n\nP.S. You have mentioned regular VBA methods and functions, and I can confirm they (at least to myself) have been helpful in their own ways where RegEx would fail.\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "Much needed addition +",
                "fecha": { "$date" : "2021-05-24T01:29:52Z" },
                "usuario": "QHarr",
                "usuario_id": 2379
            }
        ],
        "usuario": "JvdV",
        "usuario_id": 2380
    },
    {
        "_id": 1369,
        "fecha": { "$date" : "2018-06-09T16:09:43Z" },
        "decripcion": "\nHere is a  regex_subst() function. Examples:\n\n=regex_subst(\"watermellon\", \"[aeiou]\", \"\")\n---> wtrmlln\n=regex_subst(\"watermellon\", \"[^aeiou]\", \"\")\n---> aeeo\n\n\nHere is the simplified code (simpler for me, anyway).  I couldn't figure out how to build a suitable output pattern using the above to work like my examples:\n\nFunction regex_subst( _\n     strInput As String _\n   , matchPattern As String _\n   , Optional ByVal replacePattern As String = \"\" _\n) As Variant\n    Dim inputRegexObj As New VBScript_RegExp_55.RegExp\n\n    With inputRegexObj\n        .Global = True\n        .MultiLine = True\n        .IgnoreCase = False\n        .Pattern = matchPattern\n    End With\n\n    regex_subst = inputRegexObj.Replace(strInput, replacePattern)\nEnd Function\n\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "jgreve",
        "usuario_id": 2381
    },
    {
        "_id": 1370,
        "fecha": { "$date" : "2020-10-20T01:41:31Z" },
        "decripcion": "\nI don't want to have to enable a reference library as I need my scripts to be portable. The Dim foo As New VBScript_RegExp_55.RegExp line caused User Defined Type Not Defined errors, but I found a solution that worked for me.\nUpdate RE comments w/ @chrisneilsen :\nI was under the impression that enabling a reference library was tied to the local computers settings, but it is in fact, tied directly to the workbook. So, you can enable a reference library, share a macro enabled workbook and the end user wouldn't have to enable the library as well. Caveat: The advantage to Late Binding is that the developer does not have to worry about the wrong version of an object library being installed on the user's computer. This likely would not be an issue w/ the VBScript_RegExp_55.RegExp library, but I'm not sold that the \"performance\" benifit is worth it for me at this time, as we are talking imperceptible milliseconds in my code. I felt this deserved an update to help others understand. If you enable the reference library, you can use \"early bind\", but if you don't, as far as I can tell, the code will work fine, but you need to \"late bind\" and loose on some performance/debugging features.\nSource: https://peltiertech.com/Excel/EarlyLateBinding.html\nWhat you'll want to do is put an example string in cell A1, then test your strPattern. Once that's working adjust then rng as desired.\nPublic Sub RegExSearch()\n'https://stackoverflow.com/questions/22542834/how-to-use-regular-expressions-regex-in-microsoft-excel-both-in-cell-and-loops\n'https://wellsr.com/vba/2018/excel/vba-regex-regular-expressions-guide/\n'https://www.vitoshacademy.com/vba-regex-in-excel/\n    Dim regexp As Object\n    'Dim regex As New VBScript_RegExp_55.regexp 'Caused \"User Defined Type Not Defined\" Error\n    Dim rng As Range, rcell As Range\n    Dim strInput As String, strPattern As String\n    \n    Set regexp = CreateObject(\"vbscript.regexp\")\n    Set rng = ActiveSheet.Range(\"A1:A1\")\n        \n    strPattern = \"([a-z]{2})([0-9]{8})\"\n    'Search for 2 Letters then 8 Digits Eg: XY12345678 = Matched\n\n    With regexp\n        .Global = False\n        .MultiLine = False\n        .ignoreCase = True\n        .Pattern = strPattern\n    End With\n\n    For Each rcell In rng.Cells\n\n        If strPattern <> \"\" Then\n            strInput = rcell.Value\n\n            If regexp.test(strInput) Then\n                MsgBox rcell & \" Matched in Cell \" & rcell.Address\n            Else\n                MsgBox \"No Matches!\"\n            End If\n        End If\n    Next\nEnd Sub\n\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "I don't want to have to enable a reference library as I need my scripts to be portable - the VBScript_RegExp_55 library is pretty much ubiquitous so carries very low risk of not being on a particular target machine.  And anyway, switching from Early Bound to Late Bound doesn't solve the portability problem (the code will still error, only at run time rather than compile time)",
                "fecha": { "$date" : "2020-02-21T01:36:31Z" },
                "usuario": "chris neilsen",
                "usuario_id": 2382
            },
            {
                "decripcion": "Sure, but the RegEx code won't be usable.  If the RegEx stuff is part of a larger library workbook, I  guess having it not throw a compile error therefore allowing other parts to be used could be considered useful",
                "fecha": { "$date" : "2020-02-21T03:08:50Z" },
                "usuario": "chris neilsen",
                "usuario_id": 2382
            },
            {
                "decripcion": "My point was if the code doesn't work early bound (with the required reference in place) then it won't work late bound either.  As to the portability point, that has merit where there may be different versions of the same library on different PCs.  Hardly an issue here, Regex library hasn't changed in over a decade, and isn't likely to change anytime soon.  Anyway, what do you mean by \"changes to default setup\"?  A library reference is part of the Workbook, not the PC setup.",
                "fecha": { "$date" : "2020-09-17T02:16:37Z" },
                "usuario": "chris neilsen",
                "usuario_id": 2382
            },
            {
                "decripcion": "I run almost exclusively macros against the ActiveWorkbook via xlam add-ins and from what I understand, enabling a reference library was tied to the local PC MS Office settings. If, this is somehow tied to the xlam that can be shared without users having to do anything on thier end, then perhaps I am mistaken. I understand better now you are saying that Early vs Late has different error handling, but I'm not concerned with that.",
                "fecha": { "$date" : "2020-09-17T02:19:23Z" },
                "usuario": "FreeSoftwareServers",
                "usuario_id": 2383
            },
            {
                "decripcion": "Which library did you have that experience with?",
                "fecha": { "$date" : "2020-09-17T02:32:49Z" },
                "usuario": "chris neilsen",
                "usuario_id": 2382
            }
        ],
        "usuario": "FreeSoftwareServers",
        "usuario_id": 2383
    },
    {
        "_id": 1371,
        "fecha": { "$date" : "2017-12-09T16:16:27Z" },
        "decripcion": "\nEntire HTML parsing is not possible with regular expressions, since it depends on matching the opening and the closing tag which is not possible with regexps.\n\nRegular expressions can only match regular languages but HTML is a context-free language and not a regular language (As @StefanPochmann pointed out, regular languages are also context-free, so context-free doesn't necessarily mean not regular). The only thing you can do with regexps on HTML is heuristics but that will not work on every condition. It should be possible to present a HTML file that will be matched wrongly by any regular expression.\n    ",
        "votes": 224,
        "comentarios": [
            {
                "decripcion": "Best answer so far. If it can only match regular grammars then we would need an infinitely large regexp to parse a context-free grammar like HTML. I love when these things have clear theoretical answers.",
                "fecha": { "$date" : "2009-02-26T14:48:00Z" },
                "usuario": "ntownsend",
                "usuario_id": 2387
            },
            {
                "decripcion": "I assumed we were discussing Perl-type regexes where they aren't actually regular expressions.",
                "fecha": { "$date" : "2009-02-26T16:12:27Z" },
                "usuario": "Hank Gay",
                "usuario_id": 2388
            },
            {
                "decripcion": "Actually, .Net regular expressions can match opening with closing tags, to some extent, using balancing groups and a carefully crafted expression. Containing all of that in a regexp is still crazy of course, it would look like the great code Chtulhu and would probably summon the real one as well. And in the end it still won't work for all cases. They say that if you write a regular expression that can correctly parse any HTML the universe will collapse onto itself.",
                "fecha": { "$date" : "2010-09-16T19:55:07Z" },
                "usuario": "Alex Paven",
                "usuario_id": 2389
            },
            {
                "decripcion": "Some regex libs can do recursive regular expressions (effectively making them non-regular expressions :)",
                "fecha": { "$date" : "2011-08-05T22:38:47Z" },
                "usuario": "Ondra \u017di\u017eka",
                "usuario_id": 663
            },
            {
                "decripcion": "-1 This answer draws the right conclusion (\"It's a bad idea to parse HTML with Regex\") from wrong arguments (\"Because HTML isn't a regular language\"). The thing that most people nowadays mean when they say \"regex\" (PCRE) is well capable not only of parsing context-free grammars (that's trivial actually), but also of context-sensitive grammars (see stackoverflow.com/questions/7434272/\u2026).",
                "fecha": { "$date" : "2011-09-17T22:14:36Z" },
                "usuario": "NikiC",
                "usuario_id": 2390
            }
        ],
        "usuario": "Johannes Weiss",
        "usuario_id": 2391
    },
    {
        "_id": 1372,
        "fecha": { "$date" : "2017-05-23T12:26:15Z" },
        "decripcion": "\nFor quick\u00b4n\u00b4dirty regexp will do fine.  But the fundamental thing to know is that it is impossible to construct a regexp that will correctly parse HTML.\n\nThe reason is that regexps can\u2019t handle arbitarly nested expressions.  See Can regular expressions be used to match nested patterns?\n    ",
        "votes": 37,
        "comentarios": [
            {
                "decripcion": "Some regex libs can do recursive regular expressions (effectively making them non-regular expressions :)",
                "fecha": { "$date" : "2011-08-05T22:40:07Z" },
                "usuario": "Ondra \u017di\u017eka",
                "usuario_id": 663
            }
        ],
        "usuario": "kmkaplan",
        "usuario_id": 2392
    },
    {
        "_id": 1373,
        "fecha": { "$date" : "2013-09-10T17:07:31Z" },
        "decripcion": "\n(From http://htmlparsing.com/regexes)\n\nSay you've got a file of HTML where you're trying to extract URLs from\n<img> tags.\n\n<img src=\"http://example.com/whatever.jpg\">\n\n\nSo you write a regex like this in Perl:\n\nif ( $html =~ /<img src=\"(.+)\"/ ) {\n    $url = $1;\n}\n\n\nIn this case, $url will indeed contain\nhttp://example.com/whatever.jpg.  But what happens when\nyou start getting HTML like this:\n\n<img src='http://example.com/whatever.jpg'>\n\n\nor\n\n<img src=http://example.com/whatever.jpg>\n\n\nor\n\n<img border=0 src=\"http://example.com/whatever.jpg\">\n\n\nor\n\n<img\n    src=\"http://example.com/whatever.jpg\">\n\n\nor you start getting false positives from\n\n<!-- // commented out\n<img src=\"http://example.com/outdated.png\">\n-->\n\n\nIt looks so simple, and it might be simple for a single, unchanging file, but for anything that you're going to be doing on arbitrary HTML data, regexes are just a recipe for future heartache.\n    ",
        "votes": 29,
        "comentarios": [
            {
                "decripcion": "This looks to be the real answer - while it's probably possible to parse arbitrary HTML with regex since todays regexes are more than just a finite automata, in order to parse arbitrary html and not just a concrete page you have to reimplement a HTML parser in regexp and regexes surely become 1000 times unreadable.",
                "fecha": { "$date" : "2015-08-06T13:25:15Z" },
                "usuario": "Smit Johnth",
                "usuario_id": 2393
            },
            {
                "decripcion": "Hey Andy, I took the time to come up with an expression that supports your mentioned cases. stackoverflow.com/a/40095824/1204332 Let me know what you think! :)",
                "fecha": { "$date" : "2016-10-17T21:22:06Z" },
                "usuario": "Ivan Chaer",
                "usuario_id": 2394
            },
            {
                "decripcion": "The reasoning in this answer is way outdated, and applies even less today than it did originally (which I think it didn't). (Quoting OP: \"if you're just doing something simple, quick, or dirty...\".)",
                "fecha": { "$date" : "2017-03-15T22:03:25Z" },
                "usuario": "Sz.",
                "usuario_id": 2395
            }
        ],
        "usuario": "Andy Lester",
        "usuario_id": 2129
    },
    {
        "_id": 1374,
        "fecha": { "$date" : "2009-02-26T14:29:02Z" },
        "decripcion": "\nTwo quick reasons:\n\n\nwriting a regex that can stand up to malicious input is hard; way harder than using a prebuilt tool\nwriting a regex that can work with the ridiculous markup that you will inevitably be stuck with is hard; way harder than using a prebuilt tool\n\n\nRegarding the suitability of regexes for parsing in general: they aren't suitable. Have you ever seen the sorts of regexes you would need to parse most languages?\n    ",
        "votes": 16,
        "comentarios": [
            {
                "decripcion": "Wow? A downvote after 2+ years? In case anyone was wondering, I didn't say \"Because it's theoretically impossible\" because the question clearly asked about \"quick-and-dirty\", not \"correct\". The OP clearly already read answers that covered the theoretically impossible territory and still wasn't satisfied.",
                "fecha": { "$date" : "2011-07-19T19:30:02Z" },
                "usuario": "Hank Gay",
                "usuario_id": 2388
            },
            {
                "decripcion": "Have an upvote after 5+ years. :) As for why you might have received the downvote, I'm not qualified to say, but personally, I would have liked to see some examples, or explanation rather than the closing rhetorical question.",
                "fecha": { "$date" : "2014-08-22T01:01:47Z" },
                "usuario": "Adam Jensen",
                "usuario_id": 2396
            },
            {
                "decripcion": "Essentially all quick-and-dirty html parsing that is done in shipping products or internal tools ends up being a gaping security hole, or a bug waiting to happen. It must be discouraged with gusto. If one can use a regex, one can use a proper html parser.",
                "fecha": { "$date" : "2015-07-27T20:18:51Z" },
                "usuario": "Kuba hasn't forgotten Monica",
                "usuario_id": 2397
            }
        ],
        "usuario": "Hank Gay",
        "usuario_id": 2388
    },
    {
        "_id": 1375,
        "fecha": { "$date" : "2009-02-26T14:34:11Z" },
        "decripcion": "\nAs far as parsing goes, regular expressions can be useful in the \"lexical analysis\" (lexer) stage, where the input is broken down into tokens. It's less useful in the actual \"build a parse tree\" stage.\n\nFor an HTML parser, I'd expect it to only accept well-formed HTML and that requires capabilities outside what a regular expression can do (they cannot \"count\" and make sure that a given number of opening elements are balanced by the same number of closing elements).\n    ",
        "votes": 16,
        "comentarios": [],
        "usuario": "Vatine",
        "usuario_id": 173
    },
    {
        "_id": 1376,
        "fecha": { "$date" : "2009-02-26T14:29:35Z" },
        "decripcion": "\nBecause there are many ways to \"screw up\" HTML that browsers will treat in a rather liberal way but it would take quite some effort to reproduce the browser's liberal behaviour to cover all cases with regular expressions, so your regex will inevitably fail on some special cases, and that would possibly introduce serious security gaps in your system.\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "Very true, the majority of HTML out there seems to be horrible.  I don't understand how a failing regular expression can introduce serious security gaps. Can you give an example?",
                "fecha": { "$date" : "2009-02-26T14:36:25Z" },
                "usuario": "ntownsend",
                "usuario_id": 2387
            },
            {
                "decripcion": "ntownsend: For instance, you think you have stripped all the script tags from the HTML but your regex fails cover a special case (that, let's say, only works on IE6): boom, you have an XSS vulerability!",
                "fecha": { "$date" : "2009-02-26T14:39:07Z" },
                "usuario": "Tamas Czinege",
                "usuario_id": 2398
            },
            {
                "decripcion": "This was a strictly hypothetical example since most real world examples are too complicated to fit into these comments but you could find a few by quick googling on the subject.",
                "fecha": { "$date" : "2009-02-26T14:40:48Z" },
                "usuario": "Tamas Czinege",
                "usuario_id": 2398
            },
            {
                "decripcion": "+1 for mentioning the security angle.  When you're interfacing with the entire internet you can't afford to write hacky \"works most of the time\" code.",
                "fecha": { "$date" : "2009-02-26T15:14:27Z" },
                "usuario": "j_random_hacker",
                "usuario_id": 2399
            }
        ],
        "usuario": "Tamas Czinege",
        "usuario_id": 2398
    },
    {
        "_id": 1377,
        "fecha": { "$date" : "2013-09-10T21:09:31Z" },
        "decripcion": "\nThe problem is that most users who ask a question that has to do with HTML and regex do this because they can't find an own regex that works. Then one has to think whether everything would be easier when using a DOM or SAX parser or something similar. They are optimized and constructed for the purpose of working with XML-like document structures.\n\nSure, there are problems that can be solved easily with regular expressions. But the emphasis lies on easily. \n\nIf you just want to find all URLs that look like http://.../ you're fine with regexps. But if you want to find all URLs that are in a a-Element that has the class 'mylink' you probably better use a appropriate parser.\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "okoman",
        "usuario_id": 2400
    },
    {
        "_id": 1378,
        "fecha": { "$date" : "2009-02-26T14:35:50Z" },
        "decripcion": "\nRegular expressions were not designed to handle a nested tag structure, and it is at best complicated (at worst, impossible) to handle all the possible edge cases you get with real HTML.\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Peter Boughton",
        "usuario_id": 2401
    },
    {
        "_id": 1379,
        "fecha": { "$date" : "2009-02-26T14:45:39Z" },
        "decripcion": "\nI believe that the answer lies in computation theory. For a language to be parsed using regex it must be by definition \"regular\" (link). HTML is not a regular language as it does not meet a number of criteria for a regular language (much to do with the many levels of nesting inherent in html code). If you are interested in the theory of computation I would recommend this book.\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "I've actually read that book. It just didn't occur to me that HTML is a context-free language.",
                "fecha": { "$date" : "2009-02-26T15:10:33Z" },
                "usuario": "ntownsend",
                "usuario_id": 2387
            }
        ],
        "usuario": "taggers",
        "usuario_id": 2402
    },
    {
        "_id": 1380,
        "fecha": { "$date" : "2019-12-17T05:32:40Z" },
        "decripcion": "\nHTML/XML is divided into markup and content. \nRegex is only useful doing a lexical tag parse.\nI guess you could deduce the content.\nIt would be a good choice for a SAX parser.\nTags and content could be delivered to a user\ndefined function where nesting/closure of elements\ncan be kept track of.  \n\nAs far as just parsing the tags, it can be done with\nregex and used to strip tags from a document.\n\nOver years of testing, I've found the secret to the\nway browsers parse tags, both well and ill formed.  \n\nThe normal elements are parsed with this form:\n\nThe core of these tags use this regex\n\n (?:\n      \" [\\S\\s]*? \" \n   |  ' [\\S\\s]*? ' \n   |  [^>]? \n )+\n\n\nYou'll notice this [^>]? as one of the alternations.\nThis will match unbalanced quotes from ill-formed tags.  \n\nIt is also, the single most root of all evil to regular expressions.\nThe way it's used will trigger a bump-along to satisfy it's greedy, must-match\nquantified container.  \n\nIf used passively, there is never a problem\nBut, if you force something to match by interspersing it with\na wanted attribute/value pair, and don't provide adequate protection\nfrom backtracking, it's an out of control nightmare.\n\nThis is the general form for just plain old tags.\nNotice the  [\\w:] representing the tag name?\nIn reality, the legal characters representing the tag name\nare an incredible list of Unicode characters.  \n\n <     \n (?:\n      [\\w:]+ \n      \\s+ \n      (?:\n           \" [\\S\\s]*? \" \n        |  ' [\\S\\s]*? ' \n        |  [^>]? \n      )+\n      \\s* /?\n )\n >\n\n\n\n\nMoving on, we also see that you just can't search for a specific tag\nwithout parsing ALL tags.\nI mean you could, but it would have to use a combination of\nverbs like (*SKIP)(*FAIL) but still all tags have to be parsed.\n\nThe reason is that tag syntax may be hidden inside other tags, etc.\n\nSo, to passively parse all tags, a regex is needed like the one below.\nThis particular one matches invisible content as well.\n\nAs new HTML or xml or any other develop new constructs, just add it as\none of the alternations. \n\n\n\nWeb page note - I've never seen a web page (or xhtml/xml) that this\nhad trouble with. If you find one, let me know.  \n\nPerformance note - It's quick. This is the fastest tag parser I've seen\n(there may be faster, who knows).\nI have several specific versions.  It is also excellent as scraper\n(if you're the hands-on type).\n\n\n\nComplete raw regex  \n\n<(?:(?:(?:(script|style|object|embed|applet|noframes|noscript|noembed)(?:\\s+(?>\"[\\S\\s]*?\"|'[\\S\\s]*?'|(?:(?!/>)[^>])?)+)?\\s*>)[\\S\\s]*?</\\1\\s*(?=>))|(?:/?[\\w:]+\\s*/?)|(?:[\\w:]+\\s+(?:\"[\\S\\s]*?\"|'[\\S\\s]*?'|[^>]?)+\\s*/?)|\\?[\\S\\s]*?\\?|(?:!(?:(?:DOCTYPE[\\S\\s]*?)|(?:\\[CDATA\\[[\\S\\s]*?\\]\\])|(?:--[\\S\\s]*?--)|(?:ATTLIST[\\S\\s]*?)|(?:ENTITY[\\S\\s]*?)|(?:ELEMENT[\\S\\s]*?))))>  \n\nFormatted look  \n\n <\n (?:\n      (?:\n           (?:\n                # Invisible content; end tag req'd\n                (                             # (1 start)\n                     script\n                  |  style\n                  |  object\n                  |  embed\n                  |  applet\n                  |  noframes\n                  |  noscript\n                  |  noembed \n                )                             # (1 end)\n                (?:\n                     \\s+ \n                     (?>\n                          \" [\\S\\s]*? \"\n                       |  ' [\\S\\s]*? '\n                       |  (?:\n                               (?! /> )\n                               [^>] \n                          )?\n                     )+\n                )?\n                \\s* >\n           )\n\n           [\\S\\s]*? </ \\1 \\s* \n           (?= > )\n      )\n\n   |  (?: /? [\\w:]+ \\s* /? )\n   |  (?:\n           [\\w:]+ \n           \\s+ \n           (?:\n                \" [\\S\\s]*? \" \n             |  ' [\\S\\s]*? ' \n             |  [^>]? \n           )+\n           \\s* /?\n      )\n   |  \\? [\\S\\s]*? \\?\n   |  (?:\n           !\n           (?:\n                (?: DOCTYPE [\\S\\s]*? )\n             |  (?: \\[CDATA\\[ [\\S\\s]*? \\]\\] )\n             |  (?: -- [\\S\\s]*? -- )\n             |  (?: ATTLIST [\\S\\s]*? )\n             |  (?: ENTITY [\\S\\s]*? )\n             |  (?: ELEMENT [\\S\\s]*? )\n           )\n      )\n )\n >\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1381,
        "fecha": { "$date" : "2017-03-11T02:46:13Z" },
        "decripcion": "\nThis expression retrieves attributes from HTML elements. It supports:\n\n\nunquoted / quoted attributes,\nsingle / double quotes,\nescaped quotes inside attributes,\nspaces around equals signs,\nany number of attributes,\ncheck only for attributes inside tags,\nescape comments, and\nmanage different quotes within an attribute value.\n\n\n(?:\\<\\!\\-\\-(?:(?!\\-\\-\\>)\\r\\n?|\\n|.)*?-\\-\\>)|(?:<(\\S+)\\s+(?=.*>)|(?<=[=\\s])\\G)(?:((?:(?!\\s|=).)*)\\s*?=\\s*?[\\\"']?((?:(?<=\\\")(?:(?<=\\\\)\\\"|[^\\\"])*|(?<=')(?:(?<=\\\\)'|[^'])*)|(?:(?!\\\"|')(?:(?!\\/>|>|\\s).)+))[\\\"']?\\s*)\n\nCheck it out. It works better with the \"gisx\" flags, as in the demo.\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "That's very interesting. Not readable, probably hard to debug but still : Impressive work!",
                "fecha": { "$date" : "2016-12-15T08:54:39Z" },
                "usuario": "Eric Duminil",
                "usuario_id": 2403
            },
            {
                "decripcion": "This still vaguely assumes that the HTML is well-formed,. Without context matching, this will match apparent URLs in contexts where you typically don't want to match them, like in a piece of JavaScript code inside a <script> tag.",
                "fecha": { "$date" : "2019-04-02T09:28:23Z" },
                "usuario": "tripleee",
                "usuario_id": 57
            }
        ],
        "usuario": "Ivan Chaer",
        "usuario_id": 2394
    },
    {
        "_id": 1382,
        "fecha": { "$date" : "2009-02-26T15:26:20Z" },
        "decripcion": "\n\"It depends\" though. It's true that regexes don't and can't parse HTML with true accuracy, for all the reasons given here. If, however, the consequences of getting it wrong (such as not handling nested tags) are minor, and if regexes are super-convenient in your environment (such as when you're hacking Perl), go ahead.\n\nSuppose you're, oh, maybe parsing web pages that link to your site--perhaps you found them with a Google link search--and you want a quick way to get a general idea of the context surround your link. You're trying to run a little report that might alert you to link spam, something like that.\n\nIn that case, misparsing some of the documents isn't going to be a big deal. Nobody but you will see the mistakes, and if you're very lucky there will be few enough that you can follow up individually.\n\nI guess I'm saying it's a tradeoff. Sometimes implementing or using a correct parser--as easy as that may be--might not be worth the trouble if accuracy isn't critical.\n\nJust be careful with your assumptions. I can think of a few ways the regexp shortcut can backfire if you're trying to parse something that will be shown in public, for example.\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "catfood",
        "usuario_id": 2404
    },
    {
        "_id": 1383,
        "fecha": { "$date" : "2011-04-29T06:45:17Z" },
        "decripcion": "\nThere are definitely cases where using a regular expression to parse some information from HTML is the correct way to go - it depends a lot on the specific situation.\n\nThe consensus above is that in general it is a bad idea. However if the HTML structure is known (and unlikely to change) then it is still a valid approach.\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Jason",
        "usuario_id": 2207
    },
    {
        "_id": 1384,
        "fecha": { "$date" : "2013-09-10T21:01:51Z" },
        "decripcion": "\nKeep in mind that while HTML itself isn't regular, portions of a page you are looking at might be regular.\n\nFor example, it is an error for <form> tags to be nested; if the web page is working correctly, then using a regular expression to grab a <form> would be completely reasonable.\n\nI recently did some web scraping using only Selenium and regular expressions.  I got away with it because the data I wanted was put in a <form>, and put in a simple table format (so I could even count on <table>, <tr> and <td> to be non-nested--which is actually highly unusual).  In some degree, regular expressions were even almost necessary, because some of the structure I needed to access was delimited by comments.  (Beautiful Soup can give you comments, but it would have been difficult to grab <!-- BEGIN --> and <!-- END --> blocks using Beautiful Soup.)\n\nIf I had to worry about nested tables, however, my approach simply would not have worked!  I would have had to fall back on Beautiful Soup.  Even then, however, sometimes you can use a regular expression to grab the chunk you need, and then drill down from there.\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "alpheus",
        "usuario_id": 2405
    },
    {
        "_id": 1385,
        "fecha": { "$date" : "2013-09-10T21:05:45Z" },
        "decripcion": "\nActually, HTML parsing with regex is perfectly possible in PHP. You just have to parse the whole string backwards using strrpos to find < and repeat the regex from there using ungreedy specifiers each time to get over nested tags. Not fancy and terribly slow on large things, but I used it for my own personal template editor for my website. I wasn't actually parsing HTML, but a few custom tags I made for querying database entries to display tables of data (my <#if()> tag could highlight special entries this way). I wasn't prepared to go for an XML parser on just a couple of self created tags (with very non-XML data within them) here and there.\n\nSo, even though this question is considerably dead, it still shows up in a Google search. I read it and thought \"challenge accepted\" and finished fixing my simple code without having to replace everything. Decided to offer a different opinion to anyone searching for a similar reason. Also the last answer was posted 4 hours ago so this is still a hot topic.\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "-1 for suggesting a TERRIBLE idea. Did you consider whitespace between the tag and the closing angle bracket? (E.g., <tag >) Did you consider commented-out closing tags? (E.g., <tag> <!-- </tag> -->) Did you consider CDATA? Did you consider inconsistent-case tags? (E.g., <Tag> </tAG>) Did you consider this as well?",
                "fecha": { "$date" : "2014-07-10T04:23:59Z" },
                "usuario": "rmunn",
                "usuario_id": 2406
            },
            {
                "decripcion": "In the particular case of your few custom tags, yes, regular expressions work well. So it's not that your use of them was a mistake in your particular case. That's not HTML, though, and saying \"HTML parsing with regex is perfectly possible in PHP\" is just flat-out false, and a TERRIBLE idea. The inconsistencies of real HTML (and there are way more than the few I listed) are why you should never parse real HTML with regular expressions. See, well, all the other answers to this question, as well as the one I linked to in my other comment above.",
                "fecha": { "$date" : "2014-07-10T04:40:48Z" },
                "usuario": "rmunn",
                "usuario_id": 2406
            },
            {
                "decripcion": "PHP is a turing-complete language, so it's not flat-out false at all. Everything computationally possible is possible, including parsing HTML. Spaces in tags were NEVER a problem and I've since adapted it to list tag elements in-order. My use automatically corrected tags with inconsistent casing, stripped commented stuff at the very first stage and after some later additions all sorts of tags can be easily added (though it's case-sensitive, by my own choice). And I'm pretty sure CDATA is actually an XML element, not a HTML one.",
                "fecha": { "$date" : "2014-07-11T14:49:02Z" },
                "usuario": "Deji",
                "usuario_id": 2407
            },
            {
                "decripcion": "My old method (that I described here) was pretty inefficient and I've recently started a re-write of a lot of the content editors. When it comes to doing these things, possibility isn't the issue; the best way is always the main concern. The real answer is \"there's no EASY way to do it in PHP\". NO ONE says there's no way to do it in PHP or that it's a terrible idea, but that it's impossible with regex, which I've honestly never tried, but the one major flaw in my answer is I assumed the question was referring to regex within the context of PHP, which is not necessarily the case.",
                "fecha": { "$date" : "2014-07-11T14:52:37Z" },
                "usuario": "Deji",
                "usuario_id": 2407
            }
        ],
        "usuario": "Deji",
        "usuario_id": 2407
    },
    {
        "_id": 1386,
        "fecha": { "$date" : "2016-12-28T21:48:55Z" },
        "decripcion": "\nI tried my hand at a regex for this too. It's mostly useful for finding chunks of content paired with the next HTML tag, and it doesn't look for matching close tags, but it will pick up close tags. Roll a stack in your own language to check those. \n\nUse with 'sx' options.  'g' too if you're feeling lucky:\n\n(?P<content>.*?)                # Content up to next tag\n(?P<markup>                     # Entire tag\n  <!\\[CDATA\\[(?P<cdata>.+?)]]>| # <![CDATA[ ... ]]>\n  <!--(?P<comment>.+?)-->|      # <!-- Comment -->\n  </\\s*(?P<close_tag>\\w+)\\s*>|  # </tag>\n  <(?P<tag>\\w+)                 # <tag ...\n    (?P<attributes>\n      (?P<attribute>\\s+\n# <snip>: Use this part to get the attributes out of 'attributes' group.\n        (?P<attribute_name>\\w+)\n        (?:\\s*=\\s*\n          (?P<attribute_value>\n            [\\w:/.\\-]+|         # Unquoted\n            (?=(?P<_v>          # Quoted\n              (?P<_q>['\\\"]).*?(?<!\\\\)(?P=_q)))\n            (?P=_v)\n          ))?\n# </snip>\n      )*\n    )\\s*\n  (?P<is_self_closing>/?)   # Self-closing indicator\n  >)                        # End of tag\n\n\nThis one is designed for Python (it might work for other languages, haven't tried it, it uses positive lookaheads, negative lookbehinds, and named backreferences).  Supports:\n\n\nOpen Tag - <div ...>\nClose Tag - </div>\nComment - <!-- ... -->\nCDATA - <![CDATA[ ... ]]>\nSelf-Closing Tag - <div .../>\nOptional Attribute Values - <input checked>\nUnquoted / Quoted Attribute Values - <div style='...'>\nSingle / Double Quotes - <div style=\"...\">\nEscaped Quotes - <a title='John\\'s Story'>\n(this isn't really valid HTML, but I'm a nice guy)\nSpaces Around Equals Signs - <a href = '...'>\nNamed Captures For Interesting Bits\n\n\nIt's also pretty good about not triggering on malformed tags, like when you forget a < or >.\n\nIf your regex flavor supports repeated named captures then you're golden, but Python re doesn't (I know regex does, but I need to use vanilla Python). Here's what you get:\n\n\ncontent - All of the content up to the next tag. You could leave this out.\nmarkup - The entire tag with everything in it.\ncomment - If it's a comment, the comment contents.\ncdata - If it's a <![CDATA[...]]>, the CDATA contents.\nclose_tag - If it's a close tag (</div>), the tag name.\ntag - If it's an open tag (<div>), the tag name.\nattributes - All attributes inside the tag. Use this to get all attributes if you don't get repeated groups.\nattribute - Repeated, each attribute.\nattribute_name - Repeated, each attribute name.\nattribute_value - Repeated, each attribute value. This includes the quotes if it was quoted.\nis_self_closing - This is / if it's a self-closing tag, otherwise nothing.\n_q and _v - Ignore these; they're used internally for backreferences.\n\n\nIf your regex engine doesn't support repeated named captures, there's a section called out that you can use to get each attribute. Just run that regex on the attributes group to get each attribute, attribute_name and attribute_value out of it.\n\nDemo here: https://regex101.com/r/mH8jSu/11\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Hounshell",
        "usuario_id": 2408
    },
    {
        "_id": 1387,
        "fecha": { "$date" : "2009-02-26T14:33:51Z" },
        "decripcion": "\nRegular expressions are not powerful enough for such a language like HTML. Sure, there are some examples where you can use regular expressions. But in general it is not appropriate for parsing.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Gumbo",
        "usuario_id": 2409
    },
    {
        "_id": 1388,
        "fecha": { "$date" : "2015-11-22T15:03:21Z" },
        "decripcion": "\nYou, know...there's a lot of mentality of you CAN'T do it and I think that everyone on both sides of the fence are right and wrong.  You CAN do it, but it takes a little more processing than just running one regex against it.  Take this (I wrote this inside of an hour) as an example.  It assumes the HTML is completely valid, but depending on what language you're using to apply the aforementioned regex, you could do some fixing of the HTML to make sure that it will succeed.  For example, removing closing tags that are not supposed to be there: </img> for example.  Then, add the closing single HTML forward slash to elements that are missing them, etc.\n\nI'd use this in the context of writing a library that would allow me to perform HTML element retrieval akin to that of JavaScript's [x].getElementsByTagName(), for example.  I'd just splice up the functionality I wrote in the DEFINE section of the regex and use it for stepping inside of a tree of elements, one at time.\n\nSo, will this be the final 100% answer for validating HTML?  No.  But it's a start and with a little more work, it can be done.  However, trying to do it inside of one regex execution is not practical, nor efficient.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Erutan409",
        "usuario_id": 2410
    },
    {
        "_id": 1389,
        "fecha": { "$date" : "2019-04-12T16:53:12Z" },
        "decripcion": "\nI wrote my URL (actually IRI, internationalized) pattern to comply with RFC 3987 (http://www.faqs.org/rfcs/rfc3987.html). These are in PCRE syntax.\n\nFor absolute IRIs (internationalized):\n\n/^[a-z](?:[-a-z0-9\\+\\.])*:(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+\\.[-a-z0-9\\._~!\\$&'\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@])|[\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?$/i\n\n\nTo also allow relative IRIs:\n\n/^(?:[a-z](?:[-a-z0-9\\+\\.])*:(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+\\.[-a-z0-9\\._~!\\$&'\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@])|[\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?|(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+\\.[-a-z0-9\\._~!\\$&'\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=@])+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@])|[\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?)$/i\n\n\nHow they were compiled (in PHP):\n\n<?php\n\n/* Regex convenience functions (character class, non-capturing group) */\nfunction cc($str, $suffix = '', $negate = false) {\n    return '[' . ($negate ? '^' : '') . $str . ']' . $suffix;\n}\nfunction ncg($str, $suffix = '') {\n    return '(?:' . $str . ')' . $suffix;\n}\n\n/* Preserved from RFC3986 */\n\n$ALPHA = 'a-z';\n$DIGIT = '0-9';\n$HEXDIG = $DIGIT . 'a-f';\n\n$sub_delims = '!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;=';\n$gen_delims = ':\\\\/\\\\?\\\\#\\\\[\\\\]@';\n$reserved = $gen_delims . $sub_delims;\n$unreserved = '-' . $ALPHA . $DIGIT . '\\\\._~';\n\n$pct_encoded = '%' . cc($HEXDIG) . cc($HEXDIG);\n\n$dec_octet = ncg(implode('|', array(\n    cc($DIGIT),\n    cc('1-9') . cc($DIGIT),\n    '1' . cc($DIGIT) . cc($DIGIT),\n    '2' . cc('0-4') . cc($DIGIT),\n    '25' . cc('0-5')\n)));\n\n$IPv4address = $dec_octet . ncg('\\\\.' . $dec_octet, '{3}');\n\n$h16 = cc($HEXDIG, '{1,4}');\n$ls32 = ncg($h16 . ':' . $h16 . '|' . $IPv4address);\n\n$IPv6address = ncg(implode('|', array(\n    ncg($h16 . ':', '{6}') . $ls32,\n    '::' . ncg($h16 . ':', '{5}') . $ls32,\n    ncg($h16, '?') . '::' . ncg($h16 . ':', '{4}') . $ls32,\n    ncg($h16 . ':' . $h16, '?') . '::' . ncg($h16 . ':', '{3}') . $ls32,\n    ncg(ncg($h16 . ':', '{0,2}') . $h16, '?') . '::' . ncg($h16 . ':', '{2}') . $ls32,\n    ncg(ncg($h16 . ':', '{0,3}') . $h16, '?') . '::' . $h16 . ':' . $ls32,\n    ncg(ncg($h16 . ':', '{0,4}') . $h16, '?') . '::' . $ls32,\n    ncg(ncg($h16 . ':', '{0,5}') . $h16, '?') . '::' . $h16,\n    ncg(ncg($h16 . ':', '{0,6}') . $h16, '?') . '::',\n)));\n\n$IPvFuture = 'v' . cc($HEXDIG, '+') . cc($unreserved . $sub_delims . ':', '+');\n\n$IP_literal = '\\\\[' . ncg(implode('|', array($IPv6address, $IPvFuture))) . '\\\\]';\n\n$port = cc($DIGIT, '*');\n\n$scheme = cc($ALPHA) . ncg(cc('-' . $ALPHA . $DIGIT . '\\\\+\\\\.'), '*');\n\n/* New or changed in RFC3987 */\n\n$iprivate = '\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}';\n\n$ucschar = '\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}' .\n    '\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}' .\n    '\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}' .\n    '\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}' .\n    '\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}' .\n    '\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}';\n\n$iunreserved = '-' . $ALPHA . $DIGIT . '\\\\._~' . $ucschar;\n\n$ipchar = ncg($pct_encoded . '|' . cc($iunreserved . $sub_delims . ':@'));\n\n$ifragment = ncg($ipchar . '|' . cc('\\\\/\\\\?'), '*');\n\n$iquery = ncg($ipchar . '|' . cc($iprivate . '\\\\/\\\\?'), '*');\n\n$isegment_nz_nc = ncg($pct_encoded . '|' . cc($iunreserved . $sub_delims . '@'), '+');\n$isegment_nz = ncg($ipchar, '+');\n$isegment = ncg($ipchar, '*');\n\n$ipath_empty = '(?!' . $ipchar . ')';\n$ipath_rootless = ncg($isegment_nz) . ncg('\\\\/' . $isegment, '*');\n$ipath_noscheme = ncg($isegment_nz_nc) . ncg('\\\\/' . $isegment, '*');\n$ipath_absolute = '\\\\/' . ncg($ipath_rootless, '?'); // Spec says isegment-nz *( \"/\" isegment )\n$ipath_abempty = ncg('\\\\/' . $isegment, '*');\n\n$ipath = ncg(implode('|', array(\n    $ipath_abempty,\n    $ipath_absolute,\n    $ipath_noscheme,\n    $ipath_rootless,\n    $ipath_empty\n))) . ')';\n\n$ireg_name = ncg($pct_encoded . '|' . cc($iunreserved . $sub_delims . '@'), '*');\n\n$ihost = ncg(implode('|', array($IP_literal, $IPv4address, $ireg_name)));\n$iuserinfo = ncg($pct_encoded . '|' . cc($iunreserved . $sub_delims . ':'), '*');\n$iauthority = ncg($iuserinfo . '@', '?') . $ihost . ncg(':' . $port, '?');\n\n$irelative_part = ncg(implode('|', array(\n    '\\\\/\\\\/' . $iauthority . $ipath_abempty . '',\n    '' . $ipath_absolute . '',\n    '' . $ipath_noscheme . '',\n    '' . $ipath_empty . ''\n)));\n\n$irelative_ref = $irelative_part . ncg('\\\\?' . $iquery, '?') . ncg('\\\\#' . $ifragment, '?');\n\n$ihier_part = ncg(implode('|', array(\n    '\\\\/\\\\/' . $iauthority . $ipath_abempty . '',\n    '' . $ipath_absolute . '',\n    '' . $ipath_rootless . '',\n    '' . $ipath_empty . ''\n)));\n\n$absolute_IRI = $scheme . ':' . $ihier_part . ncg('\\\\?' . $iquery, '?');\n\n$IRI = $scheme . ':' . $ihier_part . ncg('\\\\?' . $iquery, '?') . ncg('\\\\#' . $ifragment, '?');\n\n$IRI_reference = ncg($IRI . '|' . $irelative_ref);\n\n\nEdit 7 March 2011: Because of the way PHP handles backslashes in quoted strings, these are unusable by default. You'll need to double-escape backslashes except where the backslash has a special meaning in regex. You can do that this way:\n\n$escape_backslash = '/(?<!\\\\)\\\\(?![\\[\\]\\\\\\^\\$\\.\\|\\*\\+\\(\\)QEnrtaefvdwsDWSbAZzB1-9GX]|x\\{[0-9a-f]{1,4}\\}|\\c[A-Z]|)/';\n$absolute_IRI = preg_replace($escape_backslash, '\\\\\\\\', $absolute_IRI);\n$IRI = preg_replace($escape_backslash, '\\\\\\\\', $IRI);\n$IRI_reference = preg_replace($escape_backslash, '\\\\\\\\', $IRI_reference);\n\n    ",
        "votes": 434,
        "comentarios": [
            {
                "decripcion": "If you think that's bad, you should see the one for e-mail: ex-parrot.com/~pdw/Mail-RFC822-Address.html",
                "fecha": { "$date" : "2010-01-06T19:27:02Z" },
                "usuario": "Peter Di Cecco",
                "usuario_id": 2415
            },
            {
                "decripcion": "@Gumbo, it's allowed in the spec and used in URI implementations for HTTP applications. It's discouraged (for obvious reasons) but perfectly valid and should be anticipated. Most (if not all?) browsers sometimes translate HTTP authentication into the URL for subsequent access.",
                "fecha": { "$date" : "2010-07-08T15:05:10Z" },
                "usuario": "eyelidlessness",
                "usuario_id": 2416
            },
            {
                "decripcion": "@Devin, in a function in what language? I compiled it in PHP, but it can be used in other languages. Should I write a function in all of those languages? Alternately, it would be pretty simple for you to do the same in a language of your choosing.",
                "fecha": { "$date" : "2011-10-17T00:26:44Z" },
                "usuario": "eyelidlessness",
                "usuario_id": 2416
            },
            {
                "decripcion": "@joshcomley replace \\x{ABCD} to \\uABCD, if you write it in JS",
                "fecha": { "$date" : "2012-02-13T01:51:57Z" },
                "usuario": "bruha",
                "usuario_id": 2417
            },
            {
                "decripcion": "Yes, http://com is a valid URL. http://localhost is, why wouldn't other words be? You are correct that the u modifier is necessary in PHP. I want to be clear that while I generated these with PHP, they are not meant to be PHP-specific.",
                "fecha": { "$date" : "2013-11-22T17:18:49Z" },
                "usuario": "eyelidlessness",
                "usuario_id": 2416
            }
        ],
        "usuario": "eyelidlessness",
        "usuario_id": 2416
    },
    {
        "_id": 1390,
        "fecha": { "$date" : "2018-12-06T18:45:21Z" },
        "decripcion": "\nI've just written up a blog post for a great solution for recognizing URLs in most used formats such as:\n\n\nwww.google.com\nhttp://www.google.com\nmailto:somebody@google.com\nsomebody@google.com\nwww.url-with-querystring.com/?url=has-querystring\n\n\nThe regular expression used is:\n\n/((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)/\n\n    ",
        "votes": 164,
        "comentarios": [
            {
                "decripcion": "That one also works, but it's missing support for the port number (useful in debugging). Modified would be /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+(:[0-9]+)?|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)/",
                "fecha": { "$date" : "2013-03-15T08:58:21Z" },
                "usuario": "Jaime Cham",
                "usuario_id": 2418
            },
            {
                "decripcion": "This Regex doesn't handle links with parenthesis in them: e.g. msdn.microsoft.com/en-us/library/ms563775(v=office.14).aspx",
                "fecha": { "$date" : "2013-07-10T09:28:39Z" },
                "usuario": "RobH",
                "usuario_id": 2419
            },
            {
                "decripcion": "Shouldn't the dot be escaped after www?",
                "fecha": { "$date" : "2013-08-08T17:04:38Z" },
                "usuario": "Anthony",
                "usuario_id": 2420
            },
            {
                "decripcion": "Got another match mate: width:210px; and margin:3px",
                "fecha": { "$date" : "2014-02-07T15:29:51Z" },
                "usuario": "Cas Bloem",
                "usuario_id": 2421
            },
            {
                "decripcion": "Doesn't match \"example.com\"...?",
                "fecha": { "$date" : "2015-06-27T18:07:30Z" },
                "usuario": "Gustav",
                "usuario_id": 2422
            }
        ],
        "usuario": "Matthew O'Riordan",
        "usuario_id": 2423
    },
    {
        "_id": 1391,
        "fecha": { "$date" : "2017-05-23T12:34:50Z" },
        "decripcion": "\nWhat platform? If using .NET, use System.Uri.TryCreate, not a regex.\n\nFor example:\n\nstatic bool IsValidUrl(string urlString)\n{\n    Uri uri;\n    return Uri.TryCreate(urlString, UriKind.Absolute, out uri)\n        && (uri.Scheme == Uri.UriSchemeHttp\n         || uri.Scheme == Uri.UriSchemeHttps\n         || uri.Scheme == Uri.UriSchemeFtp\n         || uri.Scheme == Uri.UriSchemeMailto\n            /*...*/);\n}\n\n// In test fixture...\n\n[Test]\nvoid IsValidUrl_Test()\n{\n    Assert.True(IsValidUrl(\"http://www.example.com\"));\n    Assert.False(IsValidUrl(\"javascript:alert('xss')\"));\n    Assert.False(IsValidUrl(\"\"));\n    Assert.False(IsValidUrl(null));\n}\n\n\n(Thanks to @Yoshi for the tip about javascript:)\n    ",
        "votes": 83,
        "comentarios": [
            {
                "decripcion": "Uri.TryCreate() returns true if it's valid",
                "fecha": { "$date" : "2009-04-01T09:03:52Z" },
                "usuario": "Duncan Smart",
                "usuario_id": 2424
            },
            {
                "decripcion": "A HUGE warning to anyone who uses this technique: System.Uri correctly accepts javascript: alert('blah').  You need to do further validation on Uri.Scheme to confirm the http/https/ftp protocol is being used, otherwise if such a URL is inserted into your ASP.NET pages' HTML as a link, your users are vulnerable to XSS attacks.",
                "fecha": { "$date" : "2011-08-10T05:25:50Z" },
                "usuario": "Yoshi",
                "usuario_id": 2425
            },
            {
                "decripcion": "Notably, Uri.TryCreate returns true for empty strings as well. It appears that TryCreate isn't very effective...",
                "fecha": { "$date" : "2012-05-09T14:26:20Z" },
                "usuario": "Steven Evers",
                "usuario_id": 2426
            },
            {
                "decripcion": "what if I need a regex to do server/client-side in an ASP.NET MVC app? How would this help me on the client?",
                "fecha": { "$date" : "2013-05-30T15:56:04Z" },
                "usuario": "Andrei R\u00eenea",
                "usuario_id": 2427
            },
            {
                "decripcion": "For .Net, use Uri.IsWellFormedUriString()",
                "fecha": { "$date" : "2015-08-23T18:12:48Z" },
                "usuario": "mheyman",
                "usuario_id": 2428
            }
        ],
        "usuario": "Duncan Smart",
        "usuario_id": 2424
    },
    {
        "_id": 1392,
        "fecha": { "$date" : "2017-09-12T19:08:25Z" },
        "decripcion": "\nHere's what RegexBuddy uses.\n\n(\\b(https?|ftp|file)://)?[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]\n\n\nIt matches these below (inside the ** ** marks):  \n\n**http://www.regexbuddy.com**  \n**http://www.regexbuddy.com/**  \n**http://www.regexbuddy.com/index.html**  \n**http://www.regexbuddy.com/index.html?source=library**  \n\n\nYou can download RegexBuddy at http://www.regexbuddy.com/download.html. \n    ",
        "votes": 62,
        "comentarios": [
            {
                "decripcion": "What about gopher?  Poor, forgotten gopher.",
                "fecha": { "$date" : "2008-10-02T18:00:19Z" },
                "usuario": "toohool",
                "usuario_id": 2429
            },
            {
                "decripcion": "Your regex doesn't match any url I can come up with - including those you've included. I paste your regex into rubular.com and it says \"Forward slashes must be escaped.\" Is there a typo or can you clarify by getting it to work at rubular.com?",
                "fecha": { "$date" : "2010-11-13T07:18:13Z" },
                "usuario": "PandaWood",
                "usuario_id": 2430
            },
            {
                "decripcion": "@PandaWood that's because you need to format for Ruby.  What is Ruby's escape character?",
                "fecha": { "$date" : "2010-11-15T14:39:38Z" },
                "usuario": "Keng",
                "usuario_id": 2431
            },
            {
                "decripcion": "As a JavaScript RegExp literal: /\\b(https?|ftp|file):\\/\\/[\\-A-Za-z0-9+&@#\\/%?=~_|!:,.;]*[\\-A-Za-z0-9+&@#\\/%=~_|]/",
                "fecha": { "$date" : "2013-01-16T00:16:25Z" },
                "usuario": "jpillora",
                "usuario_id": 2432
            },
            {
                "decripcion": "This matches nearly everything... useless",
                "fecha": { "$date" : "2018-09-17T10:42:52Z" },
                "usuario": "Teejay",
                "usuario_id": 2433
            }
        ],
        "usuario": "Keng",
        "usuario_id": 2431
    },
    {
        "_id": 1393,
        "fecha": { "$date" : "2013-07-23T18:01:23Z" },
        "decripcion": "\nWith regard to eyelidness' answer post that reads \"This is based on my reading of the URI specification.\": Thanks Eyelidness, yours is the perfect solution I sought, as it is based on the URI spec! Superb work. :)\n\nI had to make two amendments. The first to get the regexp to match IP address URLs correctly in PHP (v5.2.10) with the preg_match() function.\n\nI had to add one more set of parenthesis to the line above \"IP Address\" around the pipes:\n\n)|((\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])\\.){3}(?#\n\n\nNot sure why.\n\nI have also reduced the top level domain minimum length from 3 to 2 letters to support .co.uk and similar.\n\nFinal code:\n\n/^(https?|ftp):\\/\\/(?#                                      protocol\n)(([a-z0-9$_\\.\\+!\\*\\'\\(\\),;\\?&=-]|%[0-9a-f]{2})+(?#         username\n)(:([a-z0-9$_\\.\\+!\\*\\'\\(\\),;\\?&=-]|%[0-9a-f]{2})+)?(?#      password\n)@)?(?#                                                     auth requires @\n)((([a-z0-9]\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\.)*(?#             domain segments AND\n)[a-z][a-z0-9-]*[a-z0-9](?#                                 top level domain  OR\n)|((\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])\\.){3}(?#\n    )(\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])(?#             IP address\n))(:\\d+)?(?#                                                port\n))(((\\/+([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&=-]|%[0-9a-f]{2})*)*(?# path\n)(\\?([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&=-]|%[0-9a-f]{2})*)(?#      query string\n)?)?)?(?#                                                   path and query string optional\n)(#([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&=-]|%[0-9a-f]{2})*)?(?#      fragment\n)$/i\n\n\nThis modified version was not checked against the URI specification so I can't vouch for it's compliance, it was altered to handle URLs on local network environments and two digit TLDs as well as other kinds of Web URL, and to work better in the PHP setup I use.\n\nAs PHP code:\n\ndefine('URL_FORMAT', \n'/^(https?):\\/\\/'.                                         // protocol\n'(([a-z0-9$_\\.\\+!\\*\\'\\(\\),;\\?&=-]|%[0-9a-f]{2})+'.         // username\n'(:([a-z0-9$_\\.\\+!\\*\\'\\(\\),;\\?&=-]|%[0-9a-f]{2})+)?'.      // password\n'@)?(?#'.                                                  // auth requires @\n')((([a-z0-9]\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\.)*'.                      // domain segments AND\n'[a-z][a-z0-9-]*[a-z0-9]'.                                 // top level domain  OR\n'|((\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])\\.){3}'.\n'(\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])'.                 // IP address\n')(:\\d+)?'.                                                // port\n')(((\\/+([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&=-]|%[0-9a-f]{2})*)*'. // path\n'(\\?([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&=-]|%[0-9a-f]{2})*)'.      // query string\n'?)?)?'.                                                   // path and query string optional\n'(#([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&=-]|%[0-9a-f]{2})*)?'.      // fragment\n'$/i');\n\n\nHere is a test program in PHP which validates a variety of URLs using the regex:\n\n<?php\n\ndefine('URL_FORMAT',\n'/^(https?):\\/\\/'.                                         // protocol\n'(([a-z0-9$_\\.\\+!\\*\\'\\(\\),;\\?&=-]|%[0-9a-f]{2})+'.         // username\n'(:([a-z0-9$_\\.\\+!\\*\\'\\(\\),;\\?&=-]|%[0-9a-f]{2})+)?'.      // password\n'@)?(?#'.                                                  // auth requires @\n')((([a-z0-9]\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\.)*'.                      // domain segments AND\n'[a-z][a-z0-9-]*[a-z0-9]'.                                 // top level domain  OR\n'|((\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])\\.){3}'.\n'(\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])'.                 // IP address\n')(:\\d+)?'.                                                // port\n')(((\\/+([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&=-]|%[0-9a-f]{2})*)*'. // path\n'(\\?([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&=-]|%[0-9a-f]{2})*)'.      // query string\n'?)?)?'.                                                   // path and query string optional\n'(#([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&=-]|%[0-9a-f]{2})*)?'.      // fragment\n'$/i');\n\n/**\n * Verify the syntax of the given URL. \n * \n * @access public\n * @param $url The URL to verify.\n * @return boolean\n */\nfunction is_valid_url($url) {\n  if (str_starts_with(strtolower($url), 'http://localhost')) {\n    return true;\n  }\n  return preg_match(URL_FORMAT, $url);\n}\n\n\n/**\n * String starts with something\n * \n * This function will return true only if input string starts with\n * niddle\n * \n * @param string $string Input string\n * @param string $niddle Needle string\n * @return boolean\n */\nfunction str_starts_with($string, $niddle) {\n      return substr($string, 0, strlen($niddle)) == $niddle;\n}\n\n\n/**\n * Test a URL for validity and count results.\n * @param url url\n * @param expected expected result (true or false)\n */\n\n$numtests = 0;\n$passed = 0;\n\nfunction test_url($url, $expected) {\n  global $numtests, $passed;\n  $numtests++;\n  $valid = is_valid_url($url);\n  echo \"URL Valid?: \" . ($valid?\"yes\":\"no\") . \" for URL: $url. Expected: \".($expected?\"yes\":\"no\").\". \";\n  if($valid == $expected) {\n    echo \"PASS\\n\"; $passed++;\n  } else {\n    echo \"FAIL\\n\";\n  }\n}\n\necho \"URL Tests:\\n\\n\";\n\ntest_url(\"http://localserver/projects/public/assets/javascript/widgets/UserBoxMenu/widget.css\", true);\ntest_url(\"http://www.google.com\", true);\ntest_url(\"http://www.google.co.uk/projects/my%20folder/test.php\", true);\ntest_url(\"https://myserver.localdomain\", true);\ntest_url(\"http://192.168.1.120/projects/index.php\", true);\ntest_url(\"http://192.168.1.1/projects/index.php\", true);\ntest_url(\"http://projectpier-server.localdomain/projects/public/assets/javascript/widgets/UserBoxMenu/widget.css\", true);\ntest_url(\"https://2.4.168.19/project-pier?c=test&a=b\", true);\ntest_url(\"https://localhost/a/b/c/test.php?c=controller&arg1=20&arg2=20\", true);\ntest_url(\"http://user:password@localhost/a/b/c/test.php?c=controller&arg1=20&arg2=20\", true);\n\necho \"\\n$passed out of $numtests tests passed.\\n\\n\";\n\n?>\n\n\nThanks again to eyelidness for the regex!\n    ",
        "votes": 49,
        "comentarios": [
            {
                "decripcion": "eyelidness' answer didn't work for me, but this one did. Thanks!",
                "fecha": { "$date" : "2012-03-27T20:22:26Z" },
                "usuario": "Josh",
                "usuario_id": 2165
            },
            {
                "decripcion": "this one works in JavaScript, but I was not able to get the one eyelidness provided to work in JS, even after replacing \\x with \\u to escape unicode characters",
                "fecha": { "$date" : "2012-08-10T19:47:56Z" },
                "usuario": "jimmym715",
                "usuario_id": 2434
            },
            {
                "decripcion": "Sho Kuwamoto's comment: \"I ended up using the regex by user244966, which to me is the perfect blend of readable but thorough. However, there is one MAJOR issue in the regex.... His/her regex fails on domains that contain one character pieces, such as t.co The fix is to replace this line ')((([a-z0-9][a-z0-9-]*[a-z0-9]\\.)*'. with ')((([a-z0-9]\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\.)*'..\" I've made the relevant edit based on this comment.",
                "fecha": { "$date" : "2012-10-24T12:15:40Z" },
                "usuario": "Peter O.",
                "usuario_id": 2435
            },
            {
                "decripcion": "Works beautifully! Anyway I just allowed myself to add support for paths with the tilde character (~), by adding it into the line corresponding to path.",
                "fecha": { "$date" : "2013-03-01T21:32:32Z" },
                "usuario": "Leo supports Monica Cellio",
                "usuario_id": 2436
            },
            {
                "decripcion": "/^(https?|ftp): (protocol) Why do you disallow protocols like data, file, svn, dc++, magnet, skype or any other supported by a browser having the corresponding plugin or a server?",
                "fecha": { "$date" : "2015-11-11T01:19:03Z" },
                "usuario": "Aleksey F.",
                "usuario_id": 2437
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1394,
        "fecha": { "$date" : "2015-07-30T04:43:24Z" },
        "decripcion": "\nMathias Bynens has a great article on the best comparison of a lot of regular expressions: In search of the perfect URL validation regex\n\nThe best one posted is a little long, but it matches just about anything you can throw at it.\n\nJavaScript version\n\n/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i\n\n\nPHP version\n\n_^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\x{00a1}-\\x{ffff}0-9]-*)*[a-z\\x{00a1}-\\x{ffff}0-9]+)(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}0-9]-*)*[a-z\\x{00a1}-\\x{ffff}0-9]+)*(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$_iuS\n\n    ",
        "votes": 49,
        "comentarios": [
            {
                "decripcion": "For preg_match use with PHP use   %^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@|\\d{1,3}(?:\\.\\d{1,3}){3}|(?:(?:[a-z\\d\\x{00a1}-\\x{ffff}]+-?)*[a-z\\d\\x{00a1}-\\x{ffff}]+)(?:\\.(?:[a-z\\d\\x{00a1}-\\x{ffff}]+-?)*[a-z\\d\\x{00a1}-\\x{ffff}]+)*(?:\\.[a-z\\x{00a1}-\\x{ffff}]{2,6}))(?::\\d+)?(?:[^\\s]*)?$%iu",
                "fecha": { "$date" : "2016-10-05T13:59:03Z" },
                "usuario": "Toby Beresford",
                "usuario_id": 2438
            },
            {
                "decripcion": "On that page, I prefer stephenhay's solution, because it's 38 chars instead of 502!",
                "fecha": { "$date" : "2017-04-29T01:16:18Z" },
                "usuario": "Venryx",
                "usuario_id": 2439
            },
            {
                "decripcion": "Also doesn't allow for IP addresses",
                "fecha": { "$date" : "2019-01-23T15:15:09Z" },
                "usuario": "Matt Fletcher",
                "usuario_id": 2440
            },
            {
                "decripcion": "give valid (slash slash) : //www.2test.com/",
                "fecha": { "$date" : "2019-02-12T16:55:42Z" },
                "usuario": "stackdave",
                "usuario_id": 2441
            },
            {
                "decripcion": "I tested some JavaScript regular expression URL testers. The above Kril/nhahtdh tester came out the best, with no false negatives and only one false positive, namely foo.bar.. Interestingly, the Diego Perini original has the same error. Test results posted at pagenotes.com/url%20tester.htm",
                "fecha": { "$date" : "2021-02-21T19:09:14Z" },
                "usuario": "Page Notes",
                "usuario_id": 2442
            }
        ],
        "usuario": "Kiril",
        "usuario_id": 2359
    },
    {
        "_id": 1395,
        "fecha": { "$date" : "2017-08-16T20:02:22Z" },
        "decripcion": "\nThe post Getting parts of a URL (Regex) discusses parsing a URL to identify its various components. If you want to check if a URL is well-formed, it should be sufficient for your needs.\n\nIf you need to check if it's actually valid, you'll eventually have to try to access whatever's on the other end.\n\nIn general, though, you'd probably be better off using a function that's supplied to you by your framework or another library. Many platforms include functions that parse URLs. For example, there's Python's urlparse module, and in .NET you could use the System.Uri class's constructor as a means of validating the URL.\n    ",
        "votes": 36,
        "comentarios": [],
        "usuario": "Blair Conrad",
        "usuario_id": 218
    },
    {
        "_id": 1396,
        "fecha": { "$date" : "2013-09-10T16:51:55Z" },
        "decripcion": "\nThis might not be a job for regexes, but for existing tools in your language of choice.  You probably want to use existing code that has already been written, tested, and debugged.\n\nIn PHP, use the parse_url function.\n\nPerl: URI module.\n\nRuby: URI module.\n\n.NET: 'Uri' class\n\nRegexes are not a magic wand you wave at every problem that happens to involve strings.\n    ",
        "votes": 26,
        "comentarios": [
            {
                "decripcion": "Your last sentence very much reminds me of Law of the instrument/Maslow's hammer: \"If all you have is a hammer, everything looks like a nail.\"",
                "fecha": { "$date" : "2014-09-17T19:57:16Z" },
                "usuario": "DavidRR",
                "usuario_id": 1155
            },
            {
                "decripcion": "Regexes are, however, beautiful for extracting URLs from a body of plaintext.  If you suspect the entirety of a string is a URL, then I'd 100% agree with you and mention that Java's equivalent is java.net.URL.",
                "fecha": { "$date" : "2017-04-17T22:59:27Z" },
                "usuario": "ndm13",
                "usuario_id": 2443
            },
            {
                "decripcion": "The docs for parse_url in PHP state: This function is not meant to validate the given URL, it only breaks it up into the above listed parts.",
                "fecha": { "$date" : "2018-09-18T07:58:55Z" },
                "usuario": "Doug Amos",
                "usuario_id": 2444
            }
        ],
        "usuario": "Andy Lester",
        "usuario_id": 2129
    },
    {
        "_id": 1397,
        "fecha": { "$date" : "2016-01-26T00:49:08Z" },
        "decripcion": "\nThis will match all URLs\n\n\nwith or without http/https   \nwith or without www\n\n\n...including sub-domains and those new top-level domain name extensions such as \n  .museum, \n  .academy, \n  .foundation\n  etc. which can have up to 63 characters (not just .com, .net, .info etc.)\n\n(([\\w]+:)?//)?(([\\d\\w]|%[a-fA-f\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,63}(:[\\d]+)?(/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?\n\n\nBecause today maximum length of the available top-level domain name extension is 13 characters such as .international, you can change the number 63 in expression to 13 to prevent someone misusing it.\n\nas javascript\n\n\n\nvar urlreg=/(([\\w]+:)?\\/\\/)?(([\\d\\w]|%[a-fA-f\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,63}(:[\\d]+)?(\\/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?/;\n\n$('textarea').on('input',function(){\n  var url = $(this).val();\n  $(this).toggleClass('invalid', urlreg.test(url) == false)\n});\n\n$('textarea').trigger('input');\ntextarea{color:green;}\n.invalid{color:red;}\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\n<textarea>http://www.google.com</textarea>\n<textarea>http//www.google.com</textarea>\n<textarea>googlecom</textarea>\n<textarea>https://www.google.com</textarea>\n Run code snippetHide resultsExpand snippet\n\n\n\nWikipedia Article: List of all internet top-level domains\n    ",
        "votes": 21,
        "comentarios": [
            {
                "decripcion": "Could anyone please convert this for use in Javascript?",
                "fecha": { "$date" : "2014-07-14T07:34:53Z" },
                "usuario": "user1063287",
                "usuario_id": 1695
            },
            {
                "decripcion": "Finally!! Can someone mark this as an answer? Or at lease upvote it. I thing though, i don't think it matches single letter domains, i.e. t.co. How would you adjust it to handle these case?",
                "fecha": { "$date" : "2015-03-20T19:03:10Z" },
                "usuario": "Alkasai",
                "usuario_id": 2445
            },
            {
                "decripcion": "it seems to allow http// without :",
                "fecha": { "$date" : "2016-01-26T00:49:46Z" },
                "usuario": "AwokeKnowing",
                "usuario_id": 2446
            },
            {
                "decripcion": "matches telephone numbers and email addresses have a look at regexr.com/3eosr copy pasted your regex, just escaped all slashes",
                "fecha": { "$date" : "2016-11-28T21:28:02Z" },
                "usuario": "Can Rau",
                "usuario_id": 2447
            },
            {
                "decripcion": "It fails for htt://www.google.com",
                "fecha": { "$date" : "2021-07-19T07:09:49Z" },
                "usuario": "Shwetabh Shekhar",
                "usuario_id": 2448
            }
        ],
        "usuario": "Besnik Kastrati",
        "usuario_id": 2449
    },
    {
        "_id": 1398,
        "fecha": { "$date" : "2018-08-27T05:51:28Z" },
        "decripcion": "\nNon-validating URI-reference Parser\n\nFor reference purposes, here's the IETF Spec: (TXT | HTML). In particular, Appendix B. Parsing a URI Reference with a Regular Expression demonstrates how to parse a valid regex. This is described as,\n\n\n  for an example of a non-validating URI-reference parser that will take any given string and extract the URI components.\n\n\nHere's the regex they provide:\n\n ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n\n\nAs someone else said, it's probably best to leave this to a lib/framework you're already using.\n    ",
        "votes": 19,
        "comentarios": [
            {
                "decripcion": "Completely useless. Can someone show me a string which this regex does not match? (Both \"#?#?#\" or \"<<<>>>\" match. What kind of URIs are those?)",
                "fecha": { "$date" : "2013-04-13T19:39:44Z" },
                "usuario": "Alex D",
                "usuario_id": 2450
            },
            {
                "decripcion": "@AlexD Don't complain to me. That's the official specification for a URI. Take it up with the IETF if you don't like it.",
                "fecha": { "$date" : "2013-07-18T14:07:51Z" },
                "usuario": "Hank Gay",
                "usuario_id": 2388
            },
            {
                "decripcion": "@AlexD I think those might be considered relative references. See RFC 3986, section 4.2.",
                "fecha": { "$date" : "2013-12-13T10:12:10Z" },
                "usuario": "andyg0808",
                "usuario_id": 2451
            },
            {
                "decripcion": "@andyg0808, you may be right, but the fact remains that this regex matches virtually any string under the sun.",
                "fecha": { "$date" : "2013-12-13T18:34:48Z" },
                "usuario": "Alex D",
                "usuario_id": 2450
            },
            {
                "decripcion": "This is not a good answer because it's not validating, as per the question. It's parsing. Those are two different functions. If you give this regex trash, it tries to parse it. If the URL isn't valid, the parsing isn't guaranteed to work.",
                "fecha": { "$date" : "2018-08-27T05:47:47Z" },
                "usuario": "Evan Carroll",
                "usuario_id": 2452
            }
        ],
        "usuario": "Hank Gay",
        "usuario_id": 2388
    },
    {
        "_id": 1399,
        "fecha": { "$date" : "2017-05-06T05:05:03Z" },
        "decripcion": "\nThe best regular expression for URL for me would be:\n\n\"(([\\w]+:)?//)?(([\\d\\w]|%[a-fA-F\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,4}(:[\\d]+)?(/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?\"\n\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "this seems to be limited w/r/t number of domains it'll accept?",
                "fecha": { "$date" : "2014-02-02T22:25:42Z" },
                "usuario": "rektide",
                "usuario_id": 2453
            },
            {
                "decripcion": "Thanks! Here's the escaped version that worked for me on iOS: (([\\\\w]+:)?//)?(([\\\\d\\\\w]|%[a-fA-f\\\\d]{2,2})+(:([\\\\d\\\\w]|%[a-fA-f\\\\d]{2,2})+)?@)?([\\\\d\\\\w][-\\\\d\\\\w]{0,253}[\\\\d\\\\w]\\\\.)+[\\\\w]{2,4}(:[\\\\d]+)?(/([-+_~.\\\\d\\\\w]|%[a-fA-f\\\\d]{2,2})*)*(\\\\?(&?([-+_~.\\\\d\\\\w]|%[a-fA-f\\\\d]{2,2})=?)*)?(#([-+_~.\\\\d\\\\w]|%[a-fA-f\\\\d]{2,2})*)?",
                "fecha": { "$date" : "2014-02-03T23:19:30Z" },
                "usuario": "James Kuang",
                "usuario_id": 2454
            },
            {
                "decripcion": "This regex only matches suffixes up to 4 characters long and fails on IP addresses (v4 and v6), localhost, and domain names with foreign characters.  I would recommend editing your inclusion size ranges and replacing \\w with \\p{L} at a minimum.",
                "fecha": { "$date" : "2017-05-05T20:25:13Z" },
                "usuario": "ndm13",
                "usuario_id": 2443
            },
            {
                "decripcion": "Note that this RegEx doesn't capture URLs that have subdomains of one letter only, like \"m.sitename.com\". In order to fix that, I had to change ([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+ into ([\\d\\w][-\\d\\w]{0,253}[\\d\\w]?\\.)+ (add a question mark near the end of it)",
                "fecha": { "$date" : "2017-08-31T03:59:00Z" },
                "usuario": "Yoav Feuerstein",
                "usuario_id": 2455
            }
        ],
        "usuario": "S.p",
        "usuario_id": 2456
    },
    {
        "_id": 1400,
        "fecha": { "$date" : "2012-10-25T12:57:33Z" },
        "decripcion": "\n        function validateURL(textval) {\n            var urlregex = new RegExp(\n            \"^(http|https|ftp)\\://([a-zA-Z0-9\\.\\-]+(\\:[a-zA-Z0-9\\.&amp;%\\$\\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\\-]+\\.)*[a-zA-Z0-9\\-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\\:[0-9]+)*(/($|[a-zA-Z0-9\\.\\,\\?\\'\\\\\\+&amp;%\\$#\\=~_\\-]+))*$\");\n            return urlregex.test(textval);\n        }\n\n\nMatches \nhttp://site.com/dir/file.php?var=moo | ftp://user:pass@site.com:21/file/dir\n\nNon-Matches \nsite.com | http://site.com/dir//\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "Note that this regex will match if we have [empty space] in the url. Example: http://www.goo gle.com will match.",
                "fecha": { "$date" : "2014-01-15T03:44:10Z" },
                "usuario": "Ifch0o1",
                "usuario_id": 2457
            },
            {
                "decripcion": "use parse_url() before calling this function",
                "fecha": { "$date" : "2014-03-22T12:00:03Z" },
                "usuario": "LifeInstructor",
                "usuario_id": 2458
            },
            {
                "decripcion": "Dont forget to escape the \"/\"'s and \"?\", its good practice and should make it cross compatible (from what i know (which isn't much on this matter :) ))",
                "fecha": { "$date" : "2014-03-25T10:14:56Z" },
                "usuario": "Steve P",
                "usuario_id": 2459
            }
        ],
        "usuario": "LifeInstructor",
        "usuario_id": 2458
    },
    {
        "_id": 1401,
        "fecha": { "$date" : "2019-05-09T09:54:24Z" },
        "decripcion": "\nHere is a good rule that covers all possible cases: ports, params and etc\n\n/(https?:\\/\\/(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9])(:?\\d*)\\/?([a-z_\\/0-9\\-#.]*)\\??([a-z_\\/0-9\\-#=&]*)/g\n\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "This is exactly what I wanted.",
                "fecha": { "$date" : "2021-06-21T06:12:30Z" },
                "usuario": "Atul Bhatt",
                "usuario_id": 2460
            }
        ],
        "usuario": "Dmytro Huz",
        "usuario_id": 2461
    },
    {
        "_id": 1402,
        "fecha": { "$date" : "2013-06-19T07:53:23Z" },
        "decripcion": "\nI was not able to find the regex I was looking for so I modified a regex to fullfill my requirements, and apparently it seems to work fine now. My requirements were:\n\n\nMatch URLs w/o protocol (www.gooogle.com)\nMatch URLs with query parameters and path (http://subdomain.web-site.com/cgi-bin/perl.cgi?key1=value1&key2=value2e)\nDon't match URLs where there are not acceptable characters (e.g. \"'\u00a3), for instance: (www.google.com/somthing\"/somethingmore)\n\n\nHere what I came up with, any suggestion is appreciated:\n\n@Test\n    public void testWebsiteUrl(){\n        String regularExpression = \"((http|ftp|https):\\\\/\\\\/)?[\\\\w\\\\-_]+(\\\\.[\\\\w\\\\-_]+)+([\\\\w\\\\-\\\\.,@?^=%&amp;:/~\\\\+#]*[\\\\w\\\\-\\\\@?^=%&amp;/~\\\\+#])?\";\n\n        assertTrue(\"www.google.com\".matches(regularExpression));\n        assertTrue(\"www.google.co.uk\".matches(regularExpression));\n        assertTrue(\"http://www.google.com\".matches(regularExpression));\n        assertTrue(\"http://www.google.co.uk\".matches(regularExpression));\n        assertTrue(\"https://www.google.com\".matches(regularExpression));\n        assertTrue(\"https://www.google.co.uk\".matches(regularExpression));\n        assertTrue(\"google.com\".matches(regularExpression));\n        assertTrue(\"google.co.uk\".matches(regularExpression));\n        assertTrue(\"google.mu\".matches(regularExpression));\n        assertTrue(\"mes.intnet.mu\".matches(regularExpression));\n        assertTrue(\"cse.uom.ac.mu\".matches(regularExpression));\n\n        assertTrue(\"http://www.google.com/path\".matches(regularExpression));\n        assertTrue(\"http://subdomain.web-site.com/cgi-bin/perl.cgi?key1=value1&key2=value2e\".matches(regularExpression));\n        assertTrue(\"http://www.google.com/?queryparam=123\".matches(regularExpression));\n        assertTrue(\"http://www.google.com/path?queryparam=123\".matches(regularExpression));\n\n        assertFalse(\"www..dr.google\".matches(regularExpression));\n\n        assertFalse(\"www:google.com\".matches(regularExpression));\n\n        assertFalse(\"https://www@.google.com\".matches(regularExpression));\n\n        assertFalse(\"https://www.google.com\\\"\".matches(regularExpression));\n        assertFalse(\"https://www.google.com'\".matches(regularExpression));\n\n        assertFalse(\"http://www.google.com/path'\".matches(regularExpression));\n        assertFalse(\"http://subdomain.web-site.com/cgi-bin/perl.cgi?key1=value1&key2=value2e'\".matches(regularExpression));\n        assertFalse(\"http://www.google.com/?queryparam=123'\".matches(regularExpression));\n        assertFalse(\"http://www.google.com/path?queryparam=12'3\".matches(regularExpression));\n\n    }\n\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "+1, love when people add test cases; it is so easy to eyeball rather than trying to decipher the regex on the fly.",
                "fecha": { "$date" : "2019-10-11T15:07:20Z" },
                "usuario": "Dawid O",
                "usuario_id": 2462
            },
            {
                "decripcion": "This matches http/stackoverflow.com/, h77ps://stackoverflow.com/, and //stackoverflow.com/.",
                "fecha": { "$date" : "2021-07-29T03:53:53Z" },
                "usuario": "TiberiumFusion",
                "usuario_id": 2463
            },
            {
                "decripcion": "nice catch, it need improvements",
                "fecha": { "$date" : "2021-08-13T08:08:47Z" },
                "usuario": "thermz",
                "usuario_id": 2464
            }
        ],
        "usuario": "thermz",
        "usuario_id": 2464
    },
    {
        "_id": 1403,
        "fecha": { "$date" : "2012-10-25T12:58:38Z" },
        "decripcion": "\nfunction validateURL(textval) {\n            var urlregex = new RegExp(\n            \"^(http|https|ftp)\\://[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\\-\\._\\?\\,\\'/\\\\\\+&amp;%\\$#\\=~])*$\");\n            return urlregex.test(textval);\n        }\n\n\nMatches \nhttp://www.asdah.com/~joe | ftp://ftp.asdah.co.uk:2828/asdah%20asdah.gif | https://asdah.gov/asdh-ah.as\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "LifeInstructor",
        "usuario_id": 2458
    },
    {
        "_id": 1404,
        "fecha": { "$date" : "2016-01-14T20:59:57Z" },
        "decripcion": "\nIf you really search for the ultimate match, you probably find it on \"A Good Url Regular Expression?\".\n\nBut a regex that really matches all possible domains and allows anything that is allowed according to RFCs is horribly long and unreadable, trust me ;-)\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "Mecki",
        "usuario_id": 874
    },
    {
        "_id": 1405,
        "fecha": { "$date" : "2019-04-02T06:41:18Z" },
        "decripcion": "\n^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\n\n\nlive demo: https://regex101.com/r/HUNasA/2\n\nI have tested various expressions to match my requirements. \n\nAs a user I can hit browser search bar with following strings:\n\nvalid urls\n\n\nhttps://www.google.com\nhttp://www.google.com\nhttp://google.com/\nhttps://google.com/\nwww.google.com\ngoogle.com\nhttps://www.google.com.ua\nhttp://www.google.com.ua\nhttp://google.com.ua\nhttps://google.com.ua/\nwww.google.com.ua\ngoogle.com.ua\nhttps://mail.google.com\nhttp://mail.google.com\nmail.google.com\n\n\ninvalid urls\n\n\nhttp://google\nhttps://google.c\ngoogle\ngoogle.\n.google\n.google.com\ngoole.c\n...\n\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "Test this URL: Google.com URL should be case insensitive",
                "fecha": { "$date" : "2020-06-08T04:59:06Z" },
                "usuario": "MD. NASHID KAMAL",
                "usuario_id": 2465
            },
            {
                "decripcion": "In the end of the URL put space and then symbols/letters again it will be considered it will be calculated as part of URL",
                "fecha": { "$date" : "2020-10-21T14:10:04Z" },
                "usuario": "developer learn999",
                "usuario_id": 2466
            },
            {
                "decripcion": "Shortened and corrected /^(http(s)?:\\/\\/)?(www.)?([a-zA-Z0-9])+([\\-\\.]{1}[a-zA-Z0-9]+)*\\.[a-zA-Z]{2,5}(:[0-9]{1,5})?(\\/[^\\s]*)?$/gm  regex101.com/r/KR2b6n/1",
                "fecha": { "$date" : "2021-02-23T13:31:05Z" },
                "usuario": "Ani Naslyan",
                "usuario_id": 2467
            },
            {
                "decripcion": "The corrected version by @AniNaslyan works well for me if I replace the ^ and ? bookends with \\b",
                "fecha": { "$date" : "2021-06-24T23:46:15Z" },
                "usuario": "andy.holmes",
                "usuario_id": 2468
            },
            {
                "decripcion": "What about localhost?",
                "fecha": { "$date" : "2021-08-26T21:35:04Z" },
                "usuario": "Joseph Lust",
                "usuario_id": 2469
            }
        ],
        "usuario": "Nodarii",
        "usuario_id": 2470
    },
    {
        "_id": 1406,
        "fecha": { "$date" : "2020-11-18T06:36:37Z" },
        "decripcion": "\nI wrote a little groovy version that you can run\nit matches the following URLs (which is good enough for me)\npublic static void main(args) {\n    String url = \"go to http://www.m.abut.ly/abc its awesome\"\n    url = url.replaceAll(/https?:\\/\\/w{0,3}\\w*?\\.(\\w*?\\.)?\\w{2,3}\\S*|www\\.(\\w*?\\.)?\\w*?\\.\\w{2,3}\\S*|(\\w*?\\.)?\\w*?\\.\\w{2,3}[\\/\\?]\\S*/ , { it ->\n        \"woof${it}woof\"\n    })\n    println url \n}\n\nhttp://google.com\nhttp://google.com/help.php\nhttp://google.com/help.php?a=5\n\nhttp://www.google.com\nhttp://www.google.com/help.php\nhttp://www.google.com?a=5\n\ngoogle.com?a=5\ngoogle.com/help.php\ngoogle.com/help.php?a=5\n\nhttp://www.m.google.com/help.php?a=5 (and all its permutations)\nwww.m.google.com/help.php?a=5 (and all its permutations)\nm.google.com/help.php?a=5 (and all its permutations)\n\nThe important thing for any URLs that don't start with http or www is that they must include a / or ?\nI bet this can be tweaked a little more but it does the job pretty nice for being so short and compact... because you can pretty much split it in 3:\nfind anything that starts with http:\nhttps?:\\/\\/w{0,3}\\w*?\\.\\w{2,3}\\S*\n\nfind anything that starts with www:\nwww\\.\\w*?\\.\\w{2,3}\\S*\n\nor find anything that must have a text then a dot then at least 2 letters and then a ? or /:\n\\w*?\\.\\w{2,3}[\\/\\?]\\S*\n\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "This has no support for - in URL.",
                "fecha": { "$date" : "2015-07-30T05:36:49Z" },
                "usuario": "nhahtdh",
                "usuario_id": 2471
            }
        ],
        "usuario": "Christopher Rivera",
        "usuario_id": 2472
    },
    {
        "_id": 1407,
        "fecha": { "$date" : "2011-04-24T03:24:04Z" },
        "decripcion": "\nI've been working on an in-depth article discussing URI validation using regular expressions. It is based on RFC3986.  \n\nRegular Expression URI Validation\n\nAlthough the article is not yet complete, I have come up with a PHP function which does a pretty good job of validating HTTP and FTP URLs. Here is the current version:\n\n\n\n// function url_valid($url) { Rev:20110423_2000\n//\n// Return associative array of valid URI components, or FALSE if $url is not\n// RFC-3986 compliant. If the passed URL begins with: \"www.\" or \"ftp.\", then\n// \"http://\" or \"ftp://\" is prepended and the corrected full-url is stored in\n// the return array with a key name \"url\". This value should be used by the caller.\n//\n// Return value: FALSE if $url is not valid, otherwise array of URI components:\n// e.g.\n// Given: \"http://www.jmrware.com:80/articles?height=10&width=75#fragone\"\n// Array(\n//    [scheme] => http\n//    [authority] => www.jmrware.com:80\n//    [userinfo] =>\n//    [host] => www.jmrware.com\n//    [IP_literal] =>\n//    [IPV6address] =>\n//    [ls32] =>\n//    [IPvFuture] =>\n//    [IPv4address] =>\n//    [regname] => www.jmrware.com\n//    [port] => 80\n//    [path_abempty] => /articles\n//    [query] => height=10&width=75\n//    [fragment] => fragone\n//    [url] => http://www.jmrware.com:80/articles?height=10&width=75#fragone\n// )\nfunction url_valid($url) {\n    if (strpos($url, 'www.') === 0) $url = 'http://'. $url;\n    if (strpos($url, 'ftp.') === 0) $url = 'ftp://'. $url;\n    if (!preg_match('/# Valid absolute URI having a non-empty, valid DNS host.\n        ^\n        (?P<scheme>[A-Za-z][A-Za-z0-9+\\-.]*):\\/\\/\n        (?P<authority>\n          (?:(?P<userinfo>(?:[A-Za-z0-9\\-._~!$&\\'()*+,;=:]|%[0-9A-Fa-f]{2})*)@)?\n          (?P<host>\n            (?P<IP_literal>\n              \\[\n              (?:\n                (?P<IPV6address>\n                  (?:                                                (?:[0-9A-Fa-f]{1,4}:){6}\n                  |                                                ::(?:[0-9A-Fa-f]{1,4}:){5}\n                  | (?:                          [0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}\n                  | (?:(?:[0-9A-Fa-f]{1,4}:){0,1}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}\n                  | (?:(?:[0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}\n                  | (?:(?:[0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})?::   [0-9A-Fa-f]{1,4}:\n                  | (?:(?:[0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})?::\n                  )\n                  (?P<ls32>[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}\n                  | (?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}\n                       (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\n                  )\n                |   (?:(?:[0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})?::   [0-9A-Fa-f]{1,4}\n                |   (?:(?:[0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})?::\n                )\n              | (?P<IPvFuture>[Vv][0-9A-Fa-f]+\\.[A-Za-z0-9\\-._~!$&\\'()*+,;=:]+)\n              )\n              \\]\n            )\n          | (?P<IPv4address>(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}\n                               (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\n          | (?P<regname>(?:[A-Za-z0-9\\-._~!$&\\'()*+,;=]|%[0-9A-Fa-f]{2})+)\n          )\n          (?::(?P<port>[0-9]*))?\n        )\n        (?P<path_abempty>(?:\\/(?:[A-Za-z0-9\\-._~!$&\\'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)\n        (?:\\?(?P<query>       (?:[A-Za-z0-9\\-._~!$&\\'()*+,;=:@\\\\/?]|%[0-9A-Fa-f]{2})*))?\n        (?:\\#(?P<fragment>    (?:[A-Za-z0-9\\-._~!$&\\'()*+,;=:@\\\\/?]|%[0-9A-Fa-f]{2})*))?\n        $\n        /mx', $url, $m)) return FALSE;\n    switch ($m['scheme']) {\n    case 'https':\n    case 'http':\n        if ($m['userinfo']) return FALSE; // HTTP scheme does not allow userinfo.\n        break;\n    case 'ftps':\n    case 'ftp':\n        break;\n    default:\n        return FALSE;   // Unrecognized URI scheme. Default to FALSE.\n    }\n    // Validate host name conforms to DNS \"dot-separated-parts\".\n    if ($m['regname']) { // If host regname specified, check for DNS conformance.\n        if (!preg_match('/# HTTP DNS host name.\n            ^                      # Anchor to beginning of string.\n            (?!.{256})             # Overall host length is less than 256 chars.\n            (?:                    # Group dot separated host part alternatives.\n              [A-Za-z0-9]\\.        # Either a single alphanum followed by dot\n            |                      # or... part has more than one char (63 chars max).\n              [A-Za-z0-9]          # Part first char is alphanum (no dash).\n              [A-Za-z0-9\\-]{0,61}  # Internal chars are alphanum plus dash.\n              [A-Za-z0-9]          # Part last char is alphanum (no dash).\n              \\.                   # Each part followed by literal dot.\n            )*                     # Zero or more parts before top level domain.\n            (?:                    # Explicitly specify top level domains.\n              com|edu|gov|int|mil|net|org|biz|\n              info|name|pro|aero|coop|museum|\n              asia|cat|jobs|mobi|tel|travel|\n              [A-Za-z]{2})         # Country codes are exactly two alpha chars.\n              \\.?                  # Top level domain can end in a dot.\n            $                      # Anchor to end of string.\n            /ix', $m['host'])) return FALSE;\n    }\n    $m['url'] = $url;\n    for ($i = 0; isset($m[$i]); ++$i) unset($m[$i]);\n    return $m; // return TRUE == array of useful named $matches plus the valid $url.\n}\n\n\nThis function utilizes two regexes; one to match a subset of valid generic URIs (absolute ones having a non-empty host), and a second to validate the DNS \"dot-separated-parts\" host name. Although this function currently validates only HTTP and FTP schemes, it is structured such that it can be easily extended to handle other schemes.\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "I'm curious why you chose to follow URI RFC3986 rather than IRI RFC3987.",
                "fecha": { "$date" : "2012-11-09T18:21:23Z" },
                "usuario": "eyelidlessness",
                "usuario_id": 2416
            },
            {
                "decripcion": "@eyelidlessness - Good question. I'm not really well versed with IRIs. Thanks for pointing out that RFC. I see that according to RFC3987: \"...in the HTTP protocol [RFC2616], the Request URI is defined as a URI, which means that direct use of IRIs is not allowed in HTTP requests.\"  So an IRI is actually encoded as a URI before being sent via HTTP. So for the time being, there will always be a need for URI validation. Maybe I'll tackle IRI validation at a later date. Thanks for the comment!",
                "fecha": { "$date" : "2012-11-09T23:57:06Z" },
                "usuario": "ridgerunner",
                "usuario_id": 2097
            },
            {
                "decripcion": "@ridgerunner, the reference to 2616 is outdated. IRIs are sent as IRIs, with all of the characters that IRIs allow and URIs don't. I appreciate the effort to create a \"human readable\" pattern (and I've worked on one myself but haven't had the opportunity to test sufficiently) but in 2012 and going into 2013 it's unacceptable to limit addresses to western characters while non-western characters are in fact in wide use in paths, fragments and even domains.",
                "fecha": { "$date" : "2012-11-10T08:42:31Z" },
                "usuario": "eyelidlessness",
                "usuario_id": 2416
            },
            {
                "decripcion": "@eyelidlessness - I guess I need to take a closer look into this. Thanks for the heads up.",
                "fecha": { "$date" : "2012-11-10T15:52:42Z" },
                "usuario": "ridgerunner",
                "usuario_id": 2097
            },
            {
                "decripcion": "@ridgerunner, cheers! And I apologize if I came off as rude, I shouldn't comment after drinking! I do applaud the effort to make a human-readable pattern, and you have my upvote.",
                "fecha": { "$date" : "2012-11-10T17:17:39Z" },
                "usuario": "eyelidlessness",
                "usuario_id": 2416
            }
        ],
        "usuario": "ridgerunner",
        "usuario_id": 2097
    },
    {
        "_id": 1408,
        "fecha": { "$date" : "2014-08-28T00:55:01Z" },
        "decripcion": "\nI use this regex:\n\n((https?:)?//)?(([\\d\\w]|%[a-fA-f\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,63}(:[\\d]+)?(/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?\n\n\nTo support both:\n\nhttp://stackoverflow.com\nhttps://stackoverflow.com\n\n\nAnd:    \n\n//stackoverflow.com\n\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "I had to update your regex. The third '?' was allowing all sorts of text to be selected. After removing it only 'http', 'https', or '//' were selected.  I modified this so it works on relative URLs to '/'. And escaped the forward slashes.  ((https?:)?(\\/?\\/))(([\\d\\w]|%[a-fA-f\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,63}(:[\\d]+)?(/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?",
                "fecha": { "$date" : "2014-08-28T12:52:37Z" },
                "usuario": "Markus",
                "usuario_id": 2473
            },
            {
                "decripcion": "Updated the capturing groups so they can be more useful:  ((?:https?:)?(?:\\/?\\/))((?:[\\d\\w]|%[a-fA-f\\d]{2,2})+(?::(?:[\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?((?:[\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,63})(:[\\d]+)?(\\/(?:[-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(?:&?(?:[-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#(?:[-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?",
                "fecha": { "$date" : "2018-01-05T17:08:36Z" },
                "usuario": "panec",
                "usuario_id": 2474
            }
        ],
        "usuario": "Mikael Engver",
        "usuario_id": 2475
    },
    {
        "_id": 1409,
        "fecha": { "$date" : "2015-02-15T14:49:19Z" },
        "decripcion": "\nHere's a ready-to-go Java version from the Android source code.  This is the best one I've found.\n\npublic static final Matcher WEB  = Pattern.compile(new StringBuilder()                 \n.append(\"((?:(http|https|Http|Https|rtsp|Rtsp):\")                      \n.append(\"\\\\/\\\\/(?:(?:[a-zA-Z0-9\\\\$\\\\-\\\\_\\\\.\\\\+\\\\!\\\\*\\\\'\\\\(\\\\)\")                         \n.append(\"\\\\,\\\\;\\\\?\\\\&\\\\=]|(?:\\\\%[a-fA-F0-9]{2})){1,64}(?:\\\\:(?:[a-zA-Z0-9\\\\$\\\\-\\\\_\")                         \n.append(\"\\\\.\\\\+\\\\!\\\\*\\\\'\\\\(\\\\)\\\\,\\\\;\\\\?\\\\&\\\\=]|(?:\\\\%[a-fA-F0-9]{2})){1,25})?\\\\@)?)?\")                         \n.append(\"((?:(?:[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,64}\\\\.)+\")   // named host                            \n.append(\"(?:\")   // plus top level domain                         \n.append(\"(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])\")                         \n.append(\"|(?:biz|b[abdefghijmnorstvwyz])\")                         \n.append(\"|(?:cat|com|coop|c[acdfghiklmnoruvxyz])\")                         \n.append(\"|d[ejkmoz]\")                         \n.append(\"|(?:edu|e[cegrstu])\")                         \n.append(\"|f[ijkmor]\")                         \n.append(\"|(?:gov|g[abdefghilmnpqrstuwy])\")                         \n.append(\"|h[kmnrtu]\")                         \n.append(\"|(?:info|int|i[delmnoqrst])\")                         \n.append(\"|(?:jobs|j[emop])\")                         \n.append(\"|k[eghimnrwyz]\")                         \n.append(\"|l[abcikrstuvy]\")                         \n.append(\"|(?:mil|mobi|museum|m[acdghklmnopqrstuvwxyz])\")                         \n.append(\"|(?:name|net|n[acefgilopruz])\")                         \n.append(\"|(?:org|om)\")                         \n.append(\"|(?:pro|p[aefghklmnrstwy])\")                         \n.append(\"|qa\")                         \n.append(\"|r[eouw]\")                         \n.append(\"|s[abcdeghijklmnortuvyz]\")                         \n.append(\"|(?:tel|travel|t[cdfghjklmnoprtvwz])\")                         \n.append(\"|u[agkmsyz]\")                         \n.append(\"|v[aceginu]\")                         \n.append(\"|w[fs]\")                         \n.append(\"|y[etu]\")                         \n.append(\"|z[amw]))\")                         \n.append(\"|(?:(?:25[0-5]|2[0-4]\") // or ip address                                                 \n.append(\"[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\\\.(?:25[0-5]|2[0-4][0-9]\")                             \n.append(\"|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\\\.(?:25[0-5]|2[0-4][0-9]|[0-1]\")                         \n.append(\"[0-9]{2}|[1-9][0-9]|[1-9]|0)\\\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}\")                         \n.append(\"|[1-9][0-9]|[0-9])))\")                         \n.append(\"(?:\\\\:\\\\d{1,5})?)\") // plus option port number                             \n.append(\"(\\\\/(?:(?:[a-zA-Z0-9\\\\;\\\\/\\\\?\\\\:\\\\@\\\\&\\\\=\\\\#\\\\~\")  // plus option query params                         \n.append(\"\\\\-\\\\.\\\\+\\\\!\\\\*\\\\'\\\\(\\\\)\\\\,\\\\_])|(?:\\\\%[a-fA-F0-9]{2}))*)?\")                         \n.append(\"(?:\\\\b|$)\").toString()                 \n).matcher(\"\");\n\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "This don't work with \"New gTLDs\", check en.wikipedia.org/wiki/List_of_Internet_top-level_domains & newgtlds.icann.org/en/program-status/delegated-strings. Hardcoding list of TLD is bad practice... Some public suffix lists are available, they include recent variant of TLD: publicsuffix.org  (used in Firefox, Chrome, IE)",
                "fecha": { "$date" : "2017-02-28T02:17:31Z" },
                "usuario": "osgx",
                "usuario_id": 2476
            },
            {
                "decripcion": "My first thought at seeing this: there's no kill like overkill.  They literally took all ccTLDs and built a regex to match them specifically.  Cuts down on false positives, I suppose, but a terrible way to handle the situation.",
                "fecha": { "$date" : "2017-04-17T23:18:43Z" },
                "usuario": "ndm13",
                "usuario_id": 2443
            }
        ],
        "usuario": "kash",
        "usuario_id": 2477
    },
    {
        "_id": 1410,
        "fecha": { "$date" : "2013-05-07T18:14:33Z" },
        "decripcion": "\nFor Python, this is the actual URL validating regex used in Django 1.5.1:\n\nimport re\nregex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|'  # ...or ipv4\n        r'\\[?[A-F0-9]*:[A-F0-9:]+\\]?)'  # ...or ipv6\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n\nThis does both ipv4 and ipv6 addresses as well as ports and GET parameters.\n\nFound in the code here, Line 44.\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Ewan",
        "usuario_id": 2478
    },
    {
        "_id": 1411,
        "fecha": { "$date" : "2014-01-17T17:38:34Z" },
        "decripcion": "\nThis one works for me very well. (https?|ftp)://(www\\d?|[a-zA-Z0-9]+)?\\.[a-zA-Z0-9-]+(\\:|\\.)([a-zA-Z0-9.]+|(\\d+)?)([/?:].*)?\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Shantonu",
        "usuario_id": 2479
    },
    {
        "_id": 1412,
        "fecha": { "$date" : "2018-01-23T20:25:59Z" },
        "decripcion": "\nI hope it's helpful for you...\n\n^(http|https):\\/\\/+[\\www\\d]+\\.[\\w]+(\\/[\\w\\d]+)?\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Divya-Systematix",
        "usuario_id": 2480
    },
    {
        "_id": 1413,
        "fecha": { "$date" : "2018-12-10T18:31:57Z" },
        "decripcion": "\nHere is a regex I made which extracts the different parts from an URL:\n\n^((?:https?|ftp):\\/\\/?)?([^:/\\s.]+\\.[^:/\\s]|localhost)(:\\d+)?((?:\\/\\w+)*\\/)?([\\w\\-.]+[^#?\\s]+)?([^#]+)?(#[\\w-]+)?$\n\n((?:https?|ftp):\\/\\/?)?(group 1): extracts the protocol\n([^:/\\s.]+\\.[^:/\\s]|localhost)(group 2): extracts the hostname\n(:\\d+)?(group 3): extracts the port number\n((?:\\/\\w+)*\\/)?([\\w\\-.]+[^#?\\s]+)?(groups 4 & 5): extracts the path part\n([^#]+)?(group 6): extracts the query part\n(#[\\w-]+)?(group 7): extracts the hash part\n\nFor every part of the regex listed above, you can remove the ending ? to force it (or add one to make it facultative). You can also remove the ^ at the beginning and $ at the end of the regex so it won't need to match the whole string.\n\nSee it on regex101.\n\nNote: this regex is not 100% safe and may accept some strings which are not necessarily valid URLs but it does indeed validate some criterias. Its main goal was to extract the different parts of an URL not to validate it.\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "Thanks. The group approach to these answers is best. Here's hoping for updates following the direction of this article linked on the next page, and a revision of the \"not 100% safe\". A quantification like 99.9% is enough for most readers. :P",
                "fecha": { "$date" : "2019-04-10T09:22:36Z" },
                "usuario": "Laurie Stearn",
                "usuario_id": 2481
            }
        ],
        "usuario": "Elie G.",
        "usuario_id": 2482
    },
    {
        "_id": 1414,
        "fecha": { "$date" : "2014-12-09T12:59:00Z" },
        "decripcion": "\nFor convenience here's a one-liner regexp for URL's that will also match localhost where you're more likely to have ports than .com or similar.\n\n(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}(\\.[a-z]{2,6}|:[0-9]{3,4})\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "miphe",
        "usuario_id": 2483
    },
    {
        "_id": 1415,
        "fecha": { "$date" : "2015-10-16T14:11:27Z" },
        "decripcion": "\nI found the following Regex for URLs, tested successfully with 500+ URLs:\n\n/\\b(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)*(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?\\b/gi\n\nI know it looks ugly, but the good thing is that it works. :)\n\nExplanation and demo with 581 random URLs on regex101.\n\nSource: In search of the perfect URL validation regex\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "Your regex is doing the work in 155'000 steps. Here is another regex that is evaluating all the 580 URLS your provided in 19'000 steps regex101 link: /(https?):\\/\\/([\\w-]+(\\.[\\\\w-]+)*\\.([a-z]+))(([\\w.,@?^=%&amp;:\\/~+#()!-]*)([\\w@?^=%&amp;\\/~+#()!-]))?/gi",
                "fecha": { "$date" : "2015-11-10T04:42:15Z" },
                "usuario": "Jonathan Maim",
                "usuario_id": 2484
            }
        ],
        "usuario": "Rahul Desai",
        "usuario_id": 2485
    },
    {
        "_id": 1416,
        "fecha": { "$date" : "2016-10-07T01:56:06Z" },
        "decripcion": "\nTo Match a URL there are various option and it depend on you requirement.\nbelow are few.\n\n_(^|[\\s.:;?\\-\\]<\\(])(https?://[-\\w;/?:@&=+$\\|\\_.!~*\\|'()\\[\\]%#,\u263a]+[\\w/#](\\(\\))?)(?=$|[\\s',\\|\\(\\).:;?\\-\\[\\]>\\)])_i\n\n#\\b(([\\w-]+://?|www[.])[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|/)))#iS\n\n\nAnd there is a link which gives you more than 10 different variations of validation for URL.\n\nhttps://mathiasbynens.be/demo/url-regex\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "maxspan",
        "usuario_id": 2486
    },
    {
        "_id": 1417,
        "fecha": { "$date" : "2012-12-06T08:32:52Z" },
        "decripcion": "\nI tried to formulate my version of url. My requirement was to capture instances in a String where possible url can be cse.uom.ac.mu - noting that it is not preceded by http nor www\n\nString regularExpression = \"((((ht{2}ps?://)?)((w{3}\\\\.)?))?)[^.&&[a-zA-Z0-9]][a-zA-Z0-9.-]+[^.&&[a-zA-Z0-9]](\\\\.[a-zA-Z]{2,3})\";\n\nassertTrue(\"www.google.com\".matches(regularExpression));\nassertTrue(\"www.google.co.uk\".matches(regularExpression));\nassertTrue(\"http://www.google.com\".matches(regularExpression));\nassertTrue(\"http://www.google.co.uk\".matches(regularExpression));\nassertTrue(\"https://www.google.com\".matches(regularExpression));\nassertTrue(\"https://www.google.co.uk\".matches(regularExpression));\nassertTrue(\"google.com\".matches(regularExpression));\nassertTrue(\"google.co.uk\".matches(regularExpression));\nassertTrue(\"google.mu\".matches(regularExpression));\nassertTrue(\"mes.intnet.mu\".matches(regularExpression));\nassertTrue(\"cse.uom.ac.mu\".matches(regularExpression));\n\n//cannot contain 2 '.' after www\nassertFalse(\"www..dr.google\".matches(regularExpression));\n\n//cannot contain 2 '.' just before com\nassertFalse(\"www.dr.google..com\".matches(regularExpression));\n\n// to test case where url www must be followed with a '.'\nassertFalse(\"www:google.com\".matches(regularExpression));\n\n// to test case where url www must be followed with a '.'\n//assertFalse(\"http://wwwe.google.com\".matches(regularExpression));\n\n// to test case where www must be preceded with a '.'\nassertFalse(\"https://www@.google.com\".matches(regularExpression));\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "you really use ht{2}ps? rather then https?",
                "fecha": { "$date" : "2013-01-28T16:25:43Z" },
                "usuario": "Roee Gavirel",
                "usuario_id": 2487
            },
            {
                "decripcion": "It should give the same result, but yeah you are right. But I was on an experimental phase of regular expression and wanted to try all its syntax. Thanks for pointing this out.",
                "fecha": { "$date" : "2013-02-22T18:59:31Z" },
                "usuario": "Ashish",
                "usuario_id": 649
            },
            {
                "decripcion": "Can you please help me providing a regex like this one that match query parameters and other path too? like \"www.awebsite.com/path?param=value\"",
                "fecha": { "$date" : "2013-06-18T17:17:12Z" },
                "usuario": "thermz",
                "usuario_id": 2464
            }
        ],
        "usuario": "Ashish",
        "usuario_id": 649
    },
    {
        "_id": 1418,
        "fecha": { "$date" : "2013-06-19T00:48:36Z" },
        "decripcion": "\nwhats wrong with plain and simple FILTER_VALIDATE_URL ?\n\n $url = \"http://www.example.com\";\n\nif(!filter_var($url, FILTER_VALIDATE_URL))\n  {\n  echo \"URL is not valid\";\n  }\nelse\n  {\n  echo \"URL is valid\";\n  }\n\n\nI know its not the question exactly but it did the job for me when I needed to validate urls so thought it might be useful to others who come across this post looking for the same thing\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "This question is looking for a regexp but you suggest using some filter constant. Do you know how does it searches for links internally?",
                "fecha": { "$date" : "2013-06-19T07:45:03Z" },
                "usuario": "Kuitsi",
                "usuario_id": 2488
            },
            {
                "decripcion": "The question is: \"What is the best regular expression to check if a string is a valid URL?\" sometimes the problem is not to check a String that is supposed to be an URL, sometimes you have a text and you need to read all the URLs in that text, and using REGEX is the only way. Furthermore the OP asks for a solution without specifing a particular language, your solution can be applied only in a specific platform.",
                "fecha": { "$date" : "2013-06-19T07:49:09Z" },
                "usuario": "thermz",
                "usuario_id": 2464
            }
        ],
        "usuario": "jojojohn",
        "usuario_id": 2489
    },
    {
        "_id": 1419,
        "fecha": { "$date" : "2021-06-07T08:17:05Z" },
        "decripcion": "\nThe function linked in another answer is insufficient. It fails to escape ^ or $ (start and end of string), or -, which in a character group is used for ranges.\nUse this function:\nfunction escapeRegex(string) {\n    return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nWhile it may seem unnecessary at first glance, escaping - (as well as ^) makes the function suitable for escaping characters to be inserted into a character class as well as the body of the regex.\nEscaping / makes the function suitable for escaping characters to be used in a JavaScript regex literal for later evaluation.\nAs there is no downside to escaping either of them, it makes sense to escape to cover wider use cases.\nAnd yes, it is a disappointing failing that this is not part of standard JavaScript.\n    ",
        "votes": 665,
        "comentarios": [
            {
                "decripcion": "actually, we don't need to escape / at all",
                "fecha": { "$date" : "2013-02-14T20:53:00Z" },
                "usuario": "thorn0",
                "usuario_id": 2494
            },
            {
                "decripcion": "@Paul: Perl quotemeta (\\Q), Python re.escape, PHP preg_quote, Ruby Regexp.quote...",
                "fecha": { "$date" : "2013-10-03T10:24:12Z" },
                "usuario": "bobince",
                "usuario_id": 2062
            },
            {
                "decripcion": "If you are going to use this function in a loop, it's probably best to make the RegExp object it's own variable var e = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g; and then your function is return s.replace(e, '\\\\$&'); This way you only instantiate the RegExp once.",
                "fecha": { "$date" : "2013-10-17T21:14:39Z" },
                "usuario": "styfle",
                "usuario_id": 2495
            },
            {
                "decripcion": "bobince cares not for eslint's opinion",
                "fecha": { "$date" : "2017-09-15T22:57:33Z" },
                "usuario": "bobince",
                "usuario_id": 2062
            },
            {
                "decripcion": "But maybe you want to escape characters to put them inside a character range. IMO better to harmlessly overescape than to underescape and cause problems in niche cases. FWIW personally I'd rather see the characters explicitly here; we're not playing code golf.",
                "fecha": { "$date" : "2017-10-12T20:54:22Z" },
                "usuario": "bobince",
                "usuario_id": 2062
            }
        ],
        "usuario": "bobince",
        "usuario_id": 2062
    },
    {
        "_id": 1420,
        "fecha": { "$date" : "2020-10-27T03:48:21Z" },
        "decripcion": "\nFor anyone using Lodash, since v3.0.0 a _.escapeRegExp function is built-in:\n_.escapeRegExp('[lodash](https://lodash.com/)');\n// \u2192 '\\[lodash\\]\\(https:\\/\\/lodash\\.com\\/\\)'\n\nAnd, in the event that you don't want to require the full Lodash library, you may require just that function!\n    ",
        "votes": 140,
        "comentarios": [
            {
                "decripcion": "there's even an npm package of just this! npmjs.com/package/lodash.escaperegexp",
                "fecha": { "$date" : "2015-11-01T07:34:02Z" },
                "usuario": "Ted Pennings",
                "usuario_id": 2496
            },
            {
                "decripcion": "This imports loads of code that really doesn't need to be there for such a simple thing. Use bobince's answer... works for me and its so many less bytes to load than the lodash version!",
                "fecha": { "$date" : "2017-08-31T13:20:51Z" },
                "usuario": "Rob Evans",
                "usuario_id": 2497
            },
            {
                "decripcion": "@RobEvans my answer starts with \"For anyone using lodash\", and I even mention that you can require only the escapeRegExp function.",
                "fecha": { "$date" : "2017-08-31T13:24:57Z" },
                "usuario": "gustavohenke",
                "usuario_id": 2498
            },
            {
                "decripcion": "@gustavohenke Sorry I should have been slightly more clear, I included the module linked to in your \"just that function\" and that is what I was commenting on. If you take a look it's quite a lot of code for what should effectively be a single function with a single regexp in it. Agree if you are already using lodash then it makes sense to use it, but otherwise use the other answer. Sorry for the unclear comment.",
                "fecha": { "$date" : "2017-08-31T18:03:05Z" },
                "usuario": "Rob Evans",
                "usuario_id": 2497
            },
            {
                "decripcion": "@maddob I cannot see that \\x3 you mentioned: my escaped strings are looking good, just what I expect",
                "fecha": { "$date" : "2018-05-31T15:10:59Z" },
                "usuario": "Federico Fissore",
                "usuario_id": 2499
            }
        ],
        "usuario": "gustavohenke",
        "usuario_id": 2498
    },
    {
        "_id": 1421,
        "fecha": { "$date" : "2015-09-06T07:35:38Z" },
        "decripcion": "\nMost of the expressions here solve single specific use cases.\n\nThat's okay, but I prefer an \"always works\" approach.\n\nfunction regExpEscape(literal_string) {\n    return literal_string.replace(/[-[\\]{}()*+!<=:?.\\/\\\\^$|#\\s,]/g, '\\\\$&');\n}\n\n\nThis will \"fully escape\" a literal string for any of the following uses in regular expressions:\n\n\nInsertion in a regular expression. E.g. new RegExp(regExpEscape(str))\nInsertion in a character class. E.g. new RegExp('[' + regExpEscape(str) + ']')\nInsertion in integer count specifier. E.g. new RegExp('x{1,' + regExpEscape(str) + '}')\nExecution in non-JavaScript regular expression engines.\n\n\nSpecial Characters Covered:\n\n\n-: Creates a character range in a character class.\n[ / ]: Starts / ends a character class.\n{ / }: Starts / ends a numeration specifier.\n( / ): Starts / ends a group.\n* / + / ?: Specifies repetition type.\n.: Matches any character.\n\\: Escapes characters, and starts entities.\n^: Specifies start of matching zone, and negates matching in a character class.\n$: Specifies end of matching zone.\n|: Specifies alternation.\n#: Specifies comment in free spacing mode.\n\\s: Ignored in free spacing mode.\n,: Separates values in numeration specifier.\n/: Starts or ends expression.\n:: Completes special group types, and part of Perl-style character classes.\n!: Negates zero-width group.\n< / =: Part of zero-width group specifications.\n\n\nNotes:\n\n\n/ is not strictly necessary in any flavor of regular expression. However, it protects in case someone (shudder) does eval(\"/\" + pattern + \"/\");.\n, ensures that if the string is meant to be an integer in the numerical specifier, it will properly cause a RegExp compiling error instead of silently compiling wrong.\n#, and \\s do not need to be escaped in JavaScript, but do in many other flavors. They are escaped here in case the regular expression will later be passed to another program.\n\n\n\n\nIf you also need to future-proof the regular expression against potential additions to the JavaScript regex engine capabilities, I recommend using the more paranoid:\n\nfunction regExpEscapeFuture(literal_string) {\n    return literal_string.replace(/[^A-Za-z0-9_]/g, '\\\\$&');\n}\n\n\nThis function escapes every character except those explicitly guaranteed not be used for syntax in future regular expression flavors.\n\n\n\nFor the truly sanitation-keen, consider this edge case:\n\nvar s = '';\nnew RegExp('(choice1|choice2|' + regExpEscape(s) + ')');\n\n\nThis should compile fine in JavaScript, but will not in some other flavors. If intending to pass to another flavor, the null case of s === '' should be independently checked, like so:\n\nvar s = '';\nnew RegExp('(choice1|choice2' + (s ? '|' + regExpEscape(s) : '') + ')');\n\n    ",
        "votes": 47,
        "comentarios": [
            {
                "decripcion": "The / doesn't need to be escaped in the [...] character class.",
                "fecha": { "$date" : "2017-07-04T11:32:19Z" },
                "usuario": "Dan Dascalescu",
                "usuario_id": 1895
            },
            {
                "decripcion": "Most of these doesn't need to be escaped. \"Creates a character range in a character class\"  - you are never in a character class inside of the string. \"Specifies comment in free spacing mode, Ignored in free spacing mode\" - not supported in javascript. \"Separates values in numeration specifier\" - you are never in numerarion specifier inside of the string. Also you can't write arbitrary text inside of nameration specification. \"Starts or ends expression\" - no need to escape. Eval is not a case, as it would require much more escaping. [will be continued in the next comment]",
                "fecha": { "$date" : "2017-09-22T14:01:18Z" },
                "usuario": "Qwertiy",
                "usuario_id": 2500
            },
            {
                "decripcion": "\"Completes special group types, and part of Perl-style character classes\" - seems not available in javascript. \"Negates zero-width group, Part of zero-width group specifications\" - you never have groups inside of the string.",
                "fecha": { "$date" : "2017-09-22T14:01:22Z" },
                "usuario": "Qwertiy",
                "usuario_id": 2500
            },
            {
                "decripcion": "@Qwertiy The reason for these extra escapes is to eliminate edge cases which could cause problems in certain use cases. For instance, the user of this function may want to insert the escaped regex string into another regex as part of a group, or even for use in another language besides Javascript. The function does not make assumptions like \"I will never be part of a character class\", because it's meant to be general. For a more YAGNI approach, see any of the other answers here.",
                "fecha": { "$date" : "2017-09-22T20:14:05Z" },
                "usuario": "Pi Marillion",
                "usuario_id": 2501
            },
            {
                "decripcion": "Very good. Why is _ not escaped though? What ensures it probably won't become regex syntax later?",
                "fecha": { "$date" : "2017-10-29T11:43:40Z" },
                "usuario": "madprops",
                "usuario_id": 2502
            }
        ],
        "usuario": "Pi Marillion",
        "usuario_id": 2501
    },
    {
        "_id": 1422,
        "fecha": { "$date" : "2019-04-19T07:34:16Z" },
        "decripcion": "\nMozilla Developer Network's Guide to Regular Expressions provides this escaping function:\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n    ",
        "votes": 37,
        "comentarios": [
            {
                "decripcion": "@DanDascalescu You're right. The MDN page has been updated and = is no longer included.",
                "fecha": { "$date" : "2014-08-07T16:31:01Z" },
                "usuario": "quietmint",
                "usuario_id": 2503
            }
        ],
        "usuario": "quietmint",
        "usuario_id": 2503
    },
    {
        "_id": 1423,
        "fecha": { "$date" : "2020-10-13T16:13:25Z" },
        "decripcion": "\nIn jQuery UI's autocomplete widget (version 1.9.1) they use a slightly different regular expression (line 6753), here's the regular expression combined with bobince's approach.\nRegExp.escape = function( value ) {\n     return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n\n    ",
        "votes": 22,
        "comentarios": [
            {
                "decripcion": "The only difference is that they escape , (which is not a metacharacter), and # and whitespace which only matter in free-spacing mode (which is not supported by JavaScript). However, they do get it right not to escape the the forward slash.",
                "fecha": { "$date" : "2013-07-08T10:22:12Z" },
                "usuario": "Martin Ender",
                "usuario_id": 2504
            },
            {
                "decripcion": "If you want to reuse jquery UI's implementation rather than paste the code locally, go with $.ui.autocomplete.escapeRegex(myString).",
                "fecha": { "$date" : "2013-08-19T18:37:27Z" },
                "usuario": "Scott Stafford",
                "usuario_id": 1394
            },
            {
                "decripcion": "lodash has this too, _. escapeRegExp  and npmjs.com/package/lodash.escaperegexp",
                "fecha": { "$date" : "2015-11-01T07:35:12Z" },
                "usuario": "Ted Pennings",
                "usuario_id": 2496
            },
            {
                "decripcion": "v1.12 the same, ok!",
                "fecha": { "$date" : "2017-03-07T03:27:06Z" },
                "usuario": "Peter Krauss",
                "usuario_id": 639
            }
        ],
        "usuario": "Pierluc SS",
        "usuario_id": 2505
    },
    {
        "_id": 1424,
        "fecha": { "$date" : "2017-08-07T15:39:06Z" },
        "decripcion": "\nNothing should prevent you from just escaping every non-alphanumeric character:\n\nusersString.replace(/(?=\\W)/g, '\\\\');\n\n\nYou lose a certain degree of readability when doing re.toString() but you win a great deal of simplicity (and security).\n\nAccording to ECMA-262, on the one hand, regular expression \"syntax characters\" are always non-alphanumeric, such that the result is secure, and special escape sequences (\\d, \\w, \\n) are always alphanumeric such that no false control escapes will be produced.\n    ",
        "votes": 14,
        "comentarios": [
            {
                "decripcion": "Simple and effective. I like this much better than the accepted answer. For (really) old browsers, .replace(/[^\\w]/g, '\\\\$&') would work in the same way.",
                "fecha": { "$date" : "2017-08-10T07:20:08Z" },
                "usuario": "Tomas Langkaas",
                "usuario_id": 2506
            },
            {
                "decripcion": "This fails in Unicode mode. For example, new RegExp('\ud83c\udf4e'.replace(/(?=\\W)/g, '\\\\'), 'u') throws exception because \\W matches each code unit of a surrogate pair separately, resulting in invalid escape codes.",
                "fecha": { "$date" : "2018-02-02T10:29:06Z" },
                "usuario": "Alexey Lebedev",
                "usuario_id": 2507
            },
            {
                "decripcion": "alternative: .replace(/\\W/g, \"\\\\$&\");",
                "fecha": { "$date" : "2018-03-21T14:34:39Z" },
                "usuario": "Miguel Pynto",
                "usuario_id": 2508
            },
            {
                "decripcion": "@AlexeyLebedev Hes the answer been fixed to handle Unicode mode? Or is there a solution elsewhere which does, while maintaining this simplicity?",
                "fecha": { "$date" : "2020-04-26T21:07:19Z" },
                "usuario": "johny why",
                "usuario_id": 2509
            }
        ],
        "usuario": "filip",
        "usuario_id": 2510
    },
    {
        "_id": 1425,
        "fecha": { "$date" : "2020-10-27T03:49:49Z" },
        "decripcion": "\nThere is an ES7 proposal for RegExp.escape at https://github.com/benjamingr/RexExp.escape/, with a polyfill available at https://github.com/ljharb/regexp.escape.\n    ",
        "votes": 14,
        "comentarios": [
            {
                "decripcion": "Looks like this didn't make it into ES7. It also looks like it was rejected in favor of looking for a template tag.",
                "fecha": { "$date" : "2017-04-29T07:30:28Z" },
                "usuario": "John",
                "usuario_id": 474
            },
            {
                "decripcion": "@John yeah this looks like the case, at which point the entire concept has been abandoned for at least 5 years. I've added an example here, as it probably should have been implemented and TC39 still hasn't implemented their 'tag' based solution. This seems more in-line with getting what you expect, although I could also see it as a String.prototype method. At some point they should reconsider and implement this, even if they get around to parameterized regex. Most other languages impl escape though, even if they have parameterized queries, so we'll see.",
                "fecha": { "$date" : "2020-09-07T16:00:57Z" },
                "usuario": "Drewry Pope",
                "usuario_id": 2511
            },
            {
                "decripcion": "I have added code examples based on this proposal. Thank you for adding this answer that led me to the proposal. I attempted to edit this answer to add exact examples, but this was rejected by the mods. Here is the answer with code examples: [ stackoverflow.com/a/63838890/5979634 ]",
                "fecha": { "$date" : "2020-09-13T10:11:28Z" },
                "usuario": "Drewry Pope",
                "usuario_id": 2511
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1426,
        "fecha": { "$date" : "2013-09-04T17:23:49Z" },
        "decripcion": "\nThis is a shorter version.\n\nRegExp.escape = function(s) {\n    return s.replace(/[$-\\/?[-^{|}]/g, '\\\\$&');\n}\n\n\nThis includes the non-meta characters of %, &, ', and ,, but the JavaScript RegExp specification allows this.\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "I wouldn't use this \"shorter\" version, since the character ranges hide the list of characters, which makes it harder to verify the correctness at first glance.",
                "fecha": { "$date" : "2014-11-27T03:03:52Z" },
                "usuario": "nhahtdh",
                "usuario_id": 2471
            },
            {
                "decripcion": "@nhahtdh I probably wouldn't either, but it is posted here for information.",
                "fecha": { "$date" : "2014-11-27T12:15:02Z" },
                "usuario": "kzh",
                "usuario_id": 2512
            },
            {
                "decripcion": "@kzh: posting \"for information\" helps less than posting for understanding. Would you not agree that my answer is clearer?",
                "fecha": { "$date" : "2014-11-27T21:14:09Z" },
                "usuario": "Dan Dascalescu",
                "usuario_id": 1895
            },
            {
                "decripcion": "At least, . is missed. And (). Or not? [-^ is strange. I don't remember what is there.",
                "fecha": { "$date" : "2017-09-22T20:35:42Z" },
                "usuario": "Qwertiy",
                "usuario_id": 2500
            },
            {
                "decripcion": "Those are in the specified range.",
                "fecha": { "$date" : "2017-09-22T21:15:33Z" },
                "usuario": "kzh",
                "usuario_id": 2512
            }
        ],
        "usuario": "kzh",
        "usuario_id": 2512
    },
    {
        "_id": 1427,
        "fecha": { "$date" : "2017-07-05T17:58:19Z" },
        "decripcion": "\nXRegExp has an escape function:\n\nXRegExp.escape('Escaped? <.>');\n// -> 'Escaped\\?\\ <\\.>'\n\n\nMore on: http://xregexp.com/api/#escape\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Antoine Duss\u00e9aux",
        "usuario_id": 2513
    },
    {
        "_id": 1428,
        "fecha": { "$date" : "2018-06-28T16:08:06Z" },
        "decripcion": "\nescapeRegExp = function(str) {\n  if (str == null) return '';\n  return String(str).replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n};\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Ravi Gadhia",
        "usuario_id": 2514
    },
    {
        "_id": 1429,
        "fecha": { "$date" : "2019-08-18T03:56:04Z" },
        "decripcion": "\nAnother (much safer) approach is to escape all the characters (and not just a few special ones that we currently know) using the unicode escape format \\u{code}:\n\nfunction escapeRegExp(text) {\n    return Array.from(text)\n           .map(char => `\\\\u{${char.charCodeAt(0).toString(16)}}`)\n           .join('');\n}\n\nconsole.log(escapeRegExp('a.b')); // '\\u{61}\\u{2e}\\u{62}'\n\n\nPlease note that you need to pass the u flag for this method to work:\n\nvar expression = new RegExp(escapeRegExp(usersString), 'u');\n\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "Much safer! And ready future Regex implementations!",
                "fecha": { "$date" : "2020-07-27T18:00:17Z" },
                "usuario": "Wendell Pereira",
                "usuario_id": 2515
            }
        ],
        "usuario": "soheilpro",
        "usuario_id": 2516
    },
    {
        "_id": 1430,
        "fecha": { "$date" : "2020-09-13T10:07:23Z" },
        "decripcion": "\nThere is an ES7 proposal for RegExp.escape at https://github.com/benjamingr/RexExp.escape/, with a polyfill available at https://github.com/ljharb/regexp.escape.\nAn example based on the rejected ES proposal, includes checks if the property already exists, in the case that TC39 backtracks on their decision.\n\nCode:\nif (!Object.prototype.hasOwnProperty.call(RegExp, 'escape')) {\n  RegExp.escape = function(string) {\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n    // https://github.com/benjamingr/RegExp.escape/issues/37\n    return string.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n  };\n}\n\nCode Minified:\nObject.prototype.hasOwnProperty.call(RegExp,\"escape\")||(RegExp.escape=function(e){return e.replace(/[.*+\\-?^${}()|[\\]\\\\]/g,\"\\\\$&\")});\n\n\n// ...\nvar assert = require('assert');\n \nvar str = 'hello. how are you?';\nvar regex = new RegExp(RegExp.escape(str), 'g');\nassert.equal(String(regex), '/hello\\. how are you\\?/g');\n\n\nThere is also an npm module at:\nhttps://www.npmjs.com/package/regexp.escape\n\nOne can install this and use it as so:\n\nnpm install regexp.escape\n\nor\nyarn add regexp.escape\n\n\nvar escape = require('regexp.escape');\nvar assert = require('assert');\n \nvar str = 'hello. how are you?';\nvar regex = new RegExp(escape(str), 'g');\nassert.equal(String(regex), '/hello\\. how are you\\?/g');\n\nIn the GitHub && NPM page are descriptions of how to use the shim/polyfill for this option, as well. That logic is based on return RegExp.escape || implementation;, where implementation contains the regexp used above.\n\nThe NPM module is an extra dependency, but it also make it easier for an external contributor to identify logical parts added to the code. \u00af\\(\u30c4)/\u00af\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "This answer begins identically to [ stackoverflow.com/a/30852428/5979634 ], I had hoped to edit their answer to include this information, but a simpler version of this was considered too different from the original answer. I figured I offered actual code examples within the website, but I'm not gonna argue. Instead, I've offered this as a new, expanded answer, seeing as it is too different from the one other answer like this.",
                "fecha": { "$date" : "2020-09-13T10:09:26Z" },
                "usuario": "Drewry Pope",
                "usuario_id": 2511
            }
        ],
        "usuario": "Drewry Pope",
        "usuario_id": 2511
    },
    {
        "_id": 1431,
        "fecha": { "$date" : "2020-10-27T03:52:55Z" },
        "decripcion": "\nRather than only escaping characters which will cause issues in your regular expression (e.g.: a blacklist), consider using a whitelist instead. This way each character is considered tainted unless it matches.\nFor this example, assume the following expression:\nRegExp.escape('be || ! be');\n\nThis whitelists letters, number and spaces:\nRegExp.escape = function (string) {\n    return string.replace(/([^\\w\\d\\s])/gi, '\\\\$1');\n}\n\nReturns:\n\"be \\|\\| \\! be\"\n\nThis may escape characters which do not need to be escaped, but this doesn't hinder your expression (maybe some minor time penalties - but it's worth it for safety).\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "His is this different than @filip's answer? stackoverflow.com/a/40562456/209942",
                "fecha": { "$date" : "2020-04-26T21:11:49Z" },
                "usuario": "johny why",
                "usuario_id": 2509
            }
        ],
        "usuario": "bashaus",
        "usuario_id": 2517
    },
    {
        "_id": 1432,
        "fecha": { "$date" : "2014-11-28T01:32:55Z" },
        "decripcion": "\nThe functions in the other answers are overkill for escaping entire regular expressions (they may be useful for escaping parts of regular expressions that will later be concatenated into bigger regexps).\n\nIf you escape an entire regexp and are done with it, quoting the metacharacters that are either standalone (., ?, +, *, ^, $, |, \\) or start something ((, [, {) is all you need:\n\nString.prototype.regexEscape = function regexEscape() {\n  return this.replace(/[.?+*^$|({[\\\\]/g, '\\\\$&');\n};\n\n\nAnd yes, it's disappointing that JavaScript doesn't have a function like this built-in.\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "Let's say you escape the user input (text)next and insert it in: (?: + input + ). Your method will give the resulting string (?:\\(text)next) which fails to compile. Note that this is quite a reasonable insertion, not some crazy one like re\\ + input + re (in this case, the programmer can be blamed for doing something stupid)",
                "fecha": { "$date" : "2014-11-27T02:58:01Z" },
                "usuario": "nhahtdh",
                "usuario_id": 2471
            },
            {
                "decripcion": "@nhahtdh: my answer specifically mentioned escaping entire regular expressions and \"being done\" with them, not parts (or future parts) of regexps. Kindly undo the downvote?",
                "fecha": { "$date" : "2014-11-27T21:08:55Z" },
                "usuario": "Dan Dascalescu",
                "usuario_id": 1895
            },
            {
                "decripcion": "It's rarely the case that you would escape the entire expression - there are string operation, which are much faster compared to regex if you want to work with literal string.",
                "fecha": { "$date" : "2014-11-28T01:24:05Z" },
                "usuario": "nhahtdh",
                "usuario_id": 2471
            },
            {
                "decripcion": "Please address the part about closing )",
                "fecha": { "$date" : "2014-11-28T04:22:59Z" },
                "usuario": "nhahtdh",
                "usuario_id": 2471
            },
            {
                "decripcion": "It would be right to escape closing braces too, even if they are allowed by some dialect. As I remember, that's an extension, not a rule.",
                "fecha": { "$date" : "2017-09-22T20:34:36Z" },
                "usuario": "Qwertiy",
                "usuario_id": 2500
            }
        ],
        "usuario": "Dan Dascalescu",
        "usuario_id": 1895
    },
    {
        "_id": 1433,
        "fecha": { "$date" : "2020-10-27T03:54:07Z" },
        "decripcion": "\nThere has only ever been and ever will be 12 meta characters that need to be escaped\nto be considered a literal.\nIt doesn't matter what is done with the escaped string, inserted into a balanced regex wrapper or appended. It doesn't matter.\nDo a string replace using this\nvar escaped_string = oldstring.replace(/[\\\\^$.|?*+()[{]/g, '\\\\$&');\n\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "what about ]?",
                "fecha": { "$date" : "2019-10-05T23:36:12Z" },
                "usuario": "Thomasleveil",
                "usuario_id": 2518
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1434,
        "fecha": { "$date" : "2008-10-01T18:52:27Z" },
        "decripcion": "\nTry this:  \n\n((.|\\n)*)<FooBar>\n\n\nIt basically says \"any character or a newline\" repeated zero or more times.\n    ",
        "votes": 475,
        "comentarios": [
            {
                "decripcion": "This is dependent on the language and/or tool you are using.  Please let us know what you are using, eg Perl, PHP, CF, C#, sed, awk, etc.",
                "fecha": { "$date" : "2008-10-01T18:57:49Z" },
                "usuario": "Ben Doom",
                "usuario_id": 2521
            },
            {
                "decripcion": "Depending on your line endings you might need ((.|\\n|\\r)*)<FooBar>",
                "fecha": { "$date" : "2012-03-09T17:27:53Z" },
                "usuario": "Potherca",
                "usuario_id": 2522
            },
            {
                "decripcion": "He said he is using Eclipse. This is correct solution in my opinion. I have same problem and this solved it.",
                "fecha": { "$date" : "2012-04-18T08:14:45Z" },
                "usuario": "Danubian Sailor",
                "usuario_id": 2523
            },
            {
                "decripcion": "Right - the question is about eclipse and so are the tags. But the accepted solution is a PHP solution. Yours should be the accepted solution...",
                "fecha": { "$date" : "2012-06-13T12:04:41Z" },
                "usuario": "acme",
                "usuario_id": 2524
            },
            {
                "decripcion": "This is the worst regex for matching multiple line input. Please never use it unless you are using ElasticSearch. Use [\\s\\S]* or (?s).*.",
                "fecha": { "$date" : "2016-07-18T11:05:55Z" },
                "usuario": "Wiktor Stribi\u017cew",
                "usuario_id": 2307
            }
        ],
        "usuario": "levik",
        "usuario_id": 2525
    },
    {
        "_id": 1435,
        "fecha": { "$date" : "2008-10-01T18:52:18Z" },
        "decripcion": "\nIt depends on the language, but there should be a modifier that you can add to the regex pattern. In PHP it is:\n\n/(.*)<FooBar>/s\n\n\nThe s at the end causes the dot to match all characters including newlines.\n    ",
        "votes": 281,
        "comentarios": [
            {
                "decripcion": "and what if i wanted just a new line and not all characters ?",
                "fecha": { "$date" : "2011-04-11T12:02:23Z" },
                "usuario": "Grace",
                "usuario_id": 2526
            },
            {
                "decripcion": "@Grace: use \\n to match a newline",
                "fecha": { "$date" : "2011-04-11T21:05:54Z" },
                "usuario": "Paige Ruten",
                "usuario_id": 2527
            },
            {
                "decripcion": "The s flag is (now?) invalid, at least in Chrome/V8. Instead use /([\\s\\S]*)<FooBar>/ character class (match space and non-space] instead of the period matcher. See other answers for more info.",
                "fecha": { "$date" : "2013-05-09T15:37:53Z" },
                "usuario": "Allen",
                "usuario_id": 2528
            },
            {
                "decripcion": "@Allen - JavaScript doesn't support the s modifier. Instead, do [^]* for the same effect.",
                "fecha": { "$date" : "2015-07-12T22:26:26Z" },
                "usuario": "Derek \u6715\u6703\u529f\u592b",
                "usuario_id": 2529
            },
            {
                "decripcion": "In Ruby, use the m modifier",
                "fecha": { "$date" : "2015-07-15T22:57:17Z" },
                "usuario": "Ryan Buckley",
                "usuario_id": 2530
            }
        ],
        "usuario": "Paige Ruten",
        "usuario_id": 2527
    },
    {
        "_id": 1436,
        "fecha": { "$date" : "2020-02-05T10:46:01Z" },
        "decripcion": "\nThe question is, can . pattern match any character? The answer varies from engine to engine. The main difference is whether the pattern is used by a POSIX or non-POSIX regex library.\n\nSpecial note about lua-patterns: they are not considered regular expressions, but . matches any char there, same as POSIX based engines.\n\nAnother note on matlab and octave: the . matches any char by default (demo): str = \"abcde\\n     fghij<Foobar>\"; expression = '(.*)<Foobar>*'; [tokens,matches] = regexp(str,expression,'tokens','match'); (tokens contain a abcde\\n     fghij item).\n\nAlso, in all of boost's regex grammars the dot matches line breaks by default. Boost's ECMAScript grammar allows you to turn this off with regex_constants::no_mod_m (source).\n\nAs for oracle (it is POSIX based), use n option (demo): select regexp_substr('abcde' || chr(10) ||'     fghij<Foobar>', '(.*)<Foobar>', 1, 1, 'n', 1) as results from dual\n\nPOSIX-based engines:\n\nA mere . already matches line breaks, no need to use any modifiers, see bash (demo).\n\nThe tcl (demo), postgresql (demo), r (TRE, base R default engine with no perl=TRUE, for base R with perl=TRUE or for stringr/stringi patterns, use the (?s) inline modifier) (demo) also treat . the same way.  \n\nHowever, most POSIX based tools process input line by line. Hence, . does not match the line breaks just because they are not in scope. Here are some examples how to override this:\n\n\nsed - There are multiple workarounds, the most precise but not very safe is sed 'H;1h;$!d;x; s/\\(.*\\)><Foobar>/\\1/' (H;1h;$!d;x; slurps the file into memory). If whole lines must be included, sed '/start_pattern/,/end_pattern/d' file (removing from start will end with matched lines included) or sed '/start_pattern/,/end_pattern/{{//!d;};}' file (with matching lines excluded) can be considered.\nperl - perl -0pe 's/(.*)<FooBar>/$1/gs' <<< \"$str\" (-0 slurps the whole file into memory, -p prints the file after applying the script given by -e). Note that using -000pe will slurp the file and activate 'paragraph mode' where Perl uses consecutive newlines (\\n\\n) as the record separator.\ngnu-grep - grep -Poz '(?si)abc\\K.*?(?=<Foobar>)' file. Here, z enables file slurping, (?s) enables the DOTALL mode for the . pattern, (?i) enables case insensitive mode, \\K omits the text matched so far, *? is a lazy quantifier, (?=<Foobar>) matches the location before <Foobar>.\npcregrep - pcregrep -Mi \"(?si)abc\\K.*?(?=<Foobar>)\" file (M enables file slurping here). Note pcregrep is a good solution for Mac OS grep users.\n\n\nSee demos.\n\nNon-POSIX-based engines:\n\n\nphp - Use s modifier PCRE_DOTALL modifier: preg_match('~(.*)<Foobar>~s', $s, $m) (demo)\nc# - Use RegexOptions.Singleline flag (demo):  - var result = Regex.Match(s, @\"(.*)<Foobar>\", RegexOptions.Singleline).Groups[1].Value;- var result = Regex.Match(s, @\"(?s)(.*)<Foobar>\").Groups[1].Value;\npowershell - Use (?s) inline option: $s = \"abcde`nfghij<FooBar>\"; $s -match \"(?s)(.*)<Foobar>\"; $matches[1]\nperl - Use s modifier (or (?s) inline version at the start) (demo): /(.*)<FooBar>/s\npython - Use re.DOTALL (or re.S) flags or (?s) inline modifier (demo): m = re.search(r\"(.*)<FooBar>\", s, flags=re.S) (and then if m:, print(m.group(1)))\njava - Use Pattern.DOTALL modifier (or inline (?s) flag) (demo): Pattern.compile(\"(.*)<FooBar>\", Pattern.DOTALL)\ngroovy - Use (?s) in-pattern modifier (demo): regex = /(?s)(.*)<FooBar>/\nscala - Use (?s) modifier (demo): \"(?s)(.*)<Foobar>\".r.findAllIn(\"abcde\\n    fghij<Foobar>\").matchData foreach { m => println(m.group(1)) }\njavascript - Use [^] or workarounds [\\d\\D] / [\\w\\W] / [\\s\\S] (demo): s.match(/([\\s\\S]*)<FooBar>/)[1]\nc++ (std::regex) Use [\\s\\S] or the JS workarounds (demo): regex rex(R\"(([\\s\\S]*)<FooBar>)\");\nvba vbscript - Use the same approach as in JavaScript, ([\\s\\S]*)<Foobar>.  (NOTE: The MultiLine property of the\nRegExp object is sometimes erroneously thought to be the option to allow . match across line breaks, while, in fact, it only changes the ^ and $ behavior to match start/end of lines rather than strings, same as in JS regex)\nbehavior.)\nruby - Use /m MULTILINE modifier (demo): s[/(.*)<Foobar>/m, 1]\nrtrebase-r - Base R PCRE regexps - use (?s): regmatches(x, regexec(\"(?s)(.*)<FooBar>\",x, perl=TRUE))[[1]][2] (demo)\nricustringrstringi - in stringr/stringi regex funtions that are powered with ICU regex engine, also use (?s): stringr::str_match(x, \"(?s)(.*)<FooBar>\")[,2] (demo)\ngo - Use the inline modifier (?s) at the start (demo): re: = regexp.MustCompile(`(?s)(.*)<FooBar>`)\nswift - Use dotMatchesLineSeparators or (easier) pass the (?s) inline modifier to the pattern: let rx = \"(?s)(.*)<Foobar>\"\nobjective-c - Same as Swift, (?s) works the easiest, but here is how the option can be used: NSRegularExpression* regex = [NSRegularExpression regularExpressionWithPattern:pattern \noptions:NSRegularExpressionDotMatchesLineSeparators error:&regexError];\nre2, google-apps-script - Use (?s) modifier (demo): \"(?s)(.*)<Foobar>\" (in Google Spreadsheets, =REGEXEXTRACT(A2,\"(?s)(.*)<Foobar>\"))\n\n\nNOTES ON (?s):\n\nIn most non-POSIX engines, (?s) inline modifier (or embedded flag option) can be used to enforce . to match line breaks.\n\nIf placed at the start of the pattern, (?s) changes the bahavior of all . in  the pattern. If the (?s) is placed somewhere after the beginning, only those . will be affected that are located to the right of it unless this is a pattern passed to Python re. In Python re, regardless of the (?s) location, the whole pattern . are affected. The (?s) effect is stopped using (?-s). A modified group can be used to only affect a specified range of a regex pattern (e.g. Delim1(?s:.*?)\\nDelim2.* will make the first .*? match across newlines and the second .* will only match the rest of the line).\n\nPOSIX note:\n\nIn non-POSIX regex engines, to match any char, [\\s\\S] / [\\d\\D] / [\\w\\W] constructs can be used.\n\nIn POSIX, [\\s\\S] is not matching any char (as in JavaScript or any non-POSIX engine) because regex escape sequences are not supported inside bracket expressions. [\\s\\S] is parsed as bracket expressions that match a single char, \\ or s or S.\n    ",
        "votes": 136,
        "comentarios": [
            {
                "decripcion": "You should link to this excellent overview from your profile page or something (+1).",
                "fecha": { "$date" : "2017-10-15T20:15:24Z" },
                "usuario": "Jan",
                "usuario_id": 2531
            },
            {
                "decripcion": "You may want to add this to the boost item:  In the regex_constants namespace, flag_type_'s :  perl = ECMAScript = JavaScript = JScript = ::boost::regbase::normal = 0 which defaults to Perl. Programmers will set a base flag definition #define MOD regex_constants::perl | boost::regex::no_mod_s | boost::regex::no_mod_m for thier regex flags to reflect that. And the arbitor is always the inline modifiers. Where (?-sm)(?s).* resets.",
                "fecha": { "$date" : "2018-04-26T21:30:09Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "Can you also add for bash please?",
                "fecha": { "$date" : "2018-12-19T02:12:47Z" },
                "usuario": "Pasupathi Rajamanickam",
                "usuario_id": 711
            },
            {
                "decripcion": "@PasupathiRajamanickam Bash uses a POSIX regex engine, the . matches any char there (including line breaks). See this online Bash demo.",
                "fecha": { "$date" : "2018-12-19T07:33:26Z" },
                "usuario": "Wiktor Stribi\u017cew",
                "usuario_id": 2307
            },
            {
                "decripcion": "you are a legend",
                "fecha": { "$date" : "2020-04-27T06:13:52Z" },
                "usuario": "Sebasti\u00e1n Espinosa",
                "usuario_id": 2532
            }
        ],
        "usuario": "Wiktor Stribi\u017cew",
        "usuario_id": 2307
    },
    {
        "_id": 1437,
        "fecha": { "$date" : "2011-11-25T13:16:55Z" },
        "decripcion": "\nIf you're using Eclipse search, you can enable the \"DOTALL\" option to make '.' match any character including line delimiters: just add \"(?s)\" at the beginning of your search string. Example: \n\n(?s).*<FooBar>\n\n    ",
        "votes": 72,
        "comentarios": [
            {
                "decripcion": "Not anywhere, only in regex flavors supporting inline modifiers, and certainly not in Ruby where (?s) => (?m)",
                "fecha": { "$date" : "2016-07-18T11:06:56Z" },
                "usuario": "Wiktor Stribi\u017cew",
                "usuario_id": 2307
            },
            {
                "decripcion": "Anything for bash?",
                "fecha": { "$date" : "2018-12-19T02:12:05Z" },
                "usuario": "Pasupathi Rajamanickam",
                "usuario_id": 711
            }
        ],
        "usuario": "Paulo Merson",
        "usuario_id": 2533
    },
    {
        "_id": 1438,
        "fecha": { "$date" : "2020-01-25T14:03:16Z" },
        "decripcion": "\nIn many regex dialects, /[\\S\\s]*<Foobar>/ will do just what you want. Source\n    ",
        "votes": 40,
        "comentarios": [
            {
                "decripcion": "From that link: \"JavaScript and VBScript do not have an option to make the dot match line break characters. In those languages, you can use a character class such as [\\s\\S] to match any character.\"  Instead of the . use [\\s\\S] (match spaces and non-spaces) instead.",
                "fecha": { "$date" : "2013-05-09T15:34:57Z" },
                "usuario": "Allen",
                "usuario_id": 2528
            }
        ],
        "usuario": "Abbas Shahzadeh",
        "usuario_id": 2534
    },
    {
        "_id": 1439,
        "fecha": { "$date" : "2012-07-19T17:59:45Z" },
        "decripcion": "\n([\\s\\S]*)<FooBar>\n\nThe dot matches all except newlines (\\r\\n). So use \\s\\S, which will match ALL characters. \n    ",
        "votes": 39,
        "comentarios": [
            {
                "decripcion": "This solve the problem if you are using the Objective-C [text rangeOfString:regEx options:NSRegularExpressionSearch]. Thanks!",
                "fecha": { "$date" : "2012-08-24T22:29:41Z" },
                "usuario": "J. Costa",
                "usuario_id": 2535
            },
            {
                "decripcion": "This works in intelliJ's find&replace regex, thanks.",
                "fecha": { "$date" : "2015-09-16T22:14:46Z" },
                "usuario": "barclay",
                "usuario_id": 2536
            },
            {
                "decripcion": "This works. But it needs to be the first occurrence of <FooBar>",
                "fecha": { "$date" : "2017-09-26T14:16:23Z" },
                "usuario": "Ozkan",
                "usuario_id": 2537
            }
        ],
        "usuario": "samwize",
        "usuario_id": 2538
    },
    {
        "_id": 1440,
        "fecha": { "$date" : "2017-08-31T07:54:09Z" },
        "decripcion": "\nIn Ruby ruby you can use the 'm' option (multiline):\n\n/YOUR_REGEXP/m\n\n\nSee the Regexp documentation on ruby-doc.org for more information. \n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1441,
        "fecha": { "$date" : "2018-08-06T07:48:29Z" },
        "decripcion": "\nwe can also use\n\n(.*?\\n)*?\n\n\nto match everything including newline without greedy\n\nThis will make the new line optional\n\n(.*?|\\n)*?\n\n    ",
        "votes": 14,
        "comentarios": [
            {
                "decripcion": "Never use (.*?|\\n)*? unless you want to end up with a catastrophic backtracking.",
                "fecha": { "$date" : "2020-07-08T20:39:24Z" },
                "usuario": "Wiktor Stribi\u017cew",
                "usuario_id": 2307
            }
        ],
        "usuario": "Nambi_0915",
        "usuario_id": 2539
    },
    {
        "_id": 1442,
        "fecha": { "$date" : "2009-04-25T21:09:27Z" },
        "decripcion": "\n\".\" normally doesn't match line-breaks. Most regex engines allows you to add the S-flag (also called DOTALL and SINGLELINE) to make \".\" also match newlines.\nIf that fails, you could do something like [\\S\\s].\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "Markus Jarderot",
        "usuario_id": 394
    },
    {
        "_id": 1443,
        "fecha": { "$date" : "2013-01-03T11:52:40Z" },
        "decripcion": "\nFor Eclipse worked following expression:\n\n\n  Foo\n  \n  jadajada Bar\"\n\n\nRegular-Expression: \n\nFoo[\\S\\s]{1,10}.*Bar*\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "Gordon",
        "usuario_id": 2540
    },
    {
        "_id": 1444,
        "fecha": { "$date" : "2008-10-01T18:54:07Z" },
        "decripcion": "\n/(.*)<FooBar>/s\n\n\nthe s causes Dot (.) to match carriage returns\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "Seems like this is invalid (Chrome): text.match(/a/s)    SyntaxError: Invalid flags supplied to RegExp constructor 's'",
                "fecha": { "$date" : "2013-05-09T15:31:11Z" },
                "usuario": "Allen",
                "usuario_id": 2528
            },
            {
                "decripcion": "Because it is unsupported in JavaScript RegEx engines. The s flags exists in PCRE, the most complete engine (available in Perl and PHP). PCRE has 10 flags (and a lot of other features) while JavaScript has only 3 flags (gmi).",
                "fecha": { "$date" : "2016-04-20T18:51:07Z" },
                "usuario": "Morgan Touverey Quilling",
                "usuario_id": 2541
            }
        ],
        "usuario": "Bill",
        "usuario_id": 2542
    },
    {
        "_id": 1445,
        "fecha": { "$date" : "2008-10-02T03:31:26Z" },
        "decripcion": "\nNote that (.|\\n)* can be less efficient than (for example) [\\s\\S]* (if your language's regexes support such escapes) and than finding how to specify the modifier that makes . also match newlines.  Or you can go with POSIXy alternatives like [[:space:][:^space:]]*.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "tye",
        "usuario_id": 2543
    },
    {
        "_id": 1446,
        "fecha": { "$date" : "2018-05-25T19:01:48Z" },
        "decripcion": "\nIn java based regular expression you can use [\\s\\S]\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "Shouldn't those be backslashes?",
                "fecha": { "$date" : "2013-10-19T06:48:54Z" },
                "usuario": "Paul Draper",
                "usuario_id": 2544
            },
            {
                "decripcion": "They go at the end of the Regular Expression, not within in.  Example: /blah/s",
                "fecha": { "$date" : "2013-12-21T20:12:24Z" },
                "usuario": "RandomInsano",
                "usuario_id": 2545
            },
            {
                "decripcion": "I guess you mean JavaScript, not Java? Since you can just add the s flag to the pattern in Java and JavaScript doesn't have the s flag.",
                "fecha": { "$date" : "2018-09-25T17:47:28Z" },
                "usuario": "3limin4t0r",
                "usuario_id": 633
            }
        ],
        "usuario": "Kamahire",
        "usuario_id": 2546
    },
    {
        "_id": 1447,
        "fecha": { "$date" : "2010-04-13T00:42:03Z" },
        "decripcion": "\nUse RegexOptions.Singleline, it changes the meaning of . to include newlines\n\nRegex.Replace(content, searchText, replaceText, RegexOptions.Singleline);\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "shmall",
        "usuario_id": 2547
    },
    {
        "_id": 1448,
        "fecha": { "$date" : "2008-10-01T18:52:56Z" },
        "decripcion": "\ngenerally . doesn't match newlines, so try ((.|\\n)*)<foobar>\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "No, don't do that. If you need to match anything including line separators, use the DOTALL (a.k.a. /s or SingleLine) modifier.  Not only does the (.|\\n) hack make the regex less efficient, it's not even correct. At the very least, it should match \\r (carriage return) as well as \\n (linefeed).  There are other line separator characters, too, albeit rarely used.  But if you use the DOTALL flag, you don't have to worry about them.",
                "fecha": { "$date" : "2009-04-26T03:17:04Z" },
                "usuario": "Alan Moore",
                "usuario_id": 2111
            },
            {
                "decripcion": "\\R is the platform-independent match for newlines in Eclipse.",
                "fecha": { "$date" : "2009-11-30T11:13:50Z" },
                "usuario": "opyate",
                "usuario_id": 2548
            },
            {
                "decripcion": "@opyate You should post this as an answer as this little gem is incredibly useful.",
                "fecha": { "$date" : "2012-10-15T21:29:05Z" },
                "usuario": "jeckhart",
                "usuario_id": 2549
            },
            {
                "decripcion": "You could try this instead. It won't match the inner brackets and also consider the optional\\r.: ((?:.|\\r?\\n)*)<foobar>",
                "fecha": { "$date" : "2016-11-29T09:52:21Z" },
                "usuario": "ssc-hrep3",
                "usuario_id": 2550
            }
        ],
        "usuario": "tloach",
        "usuario_id": 2551
    },
    {
        "_id": 1449,
        "fecha": { "$date" : "2012-04-04T11:00:26Z" },
        "decripcion": "\nSolution:\n\nUse pattern modifier sU will get the desired matching in PHP.\n\nexample:\n\npreg_match('/(.*)/sU',$content,$match);\n\n\nSource:\n\nhttp://dreamluverz.com/developers-tools/regex-match-all-including-new-line\nhttp://php.net/manual/en/reference.pcre.pattern.modifiers.php\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Sian Lerk Lau",
        "usuario_id": 2552
    },
    {
        "_id": 1450,
        "fecha": { "$date" : "2008-10-01T18:54:46Z" },
        "decripcion": "\nIn the context of use within languages, regular expressions act on strings, not lines. So you should be able to use the regex normally, assuming that the input string has multiple lines.\n\nIn this case, the given regex will match the entire string, since \"<FooBar>\" is present. Depending on the specifics of the regex implementation, the $1 value (obtained from the \"(.*)\") will either be \"fghij\" or \"abcde\\nfghij\". As others have said, some implementations allow you to control whether the \".\" will match the newline, giving you the choice.\n\nLine-based regular expression use is usually for command line things like egrep.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "nsayer",
        "usuario_id": 2553
    },
    {
        "_id": 1451,
        "fecha": { "$date" : "2009-03-26T14:57:08Z" },
        "decripcion": "\nI had the same problem and solved it in probably not the best way but it works.  I replaced all line breaks before I did my real match:\n\nmystring= Regex.Replace(mystring, \"\\r\\n\", \"\")\n\n\nI am manipulating HTML so line breaks don't really matter to me in this case. \n\nI tried all of the suggestions above with no luck, I am using .Net 3.5 FYI\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "I am using .NET too and (\\s|\\S) seems to do the trick for me!",
                "fecha": { "$date" : "2018-05-18T07:26:25Z" },
                "usuario": "Vamshi Krishna",
                "usuario_id": 2554
            },
            {
                "decripcion": "@VamshiKrishna In .NET, use (?s) to make . match any chars. Do not use (\\s|\\S) that will slow down performance.",
                "fecha": { "$date" : "2018-09-14T20:35:54Z" },
                "usuario": "Wiktor Stribi\u017cew",
                "usuario_id": 2307
            }
        ],
        "usuario": "Slee",
        "usuario_id": 2555
    },
    {
        "_id": 1452,
        "fecha": { "$date" : "2019-02-27T12:50:43Z" },
        "decripcion": "\nIn Javascript you can use [^]* to search for zero to infinite characters, including line breaks.\n\n\n\n$(\"#find_and_replace\").click(function() {\n  var text = $(\"#textarea\").val();\n  search_term = new RegExp(\"[^]*<Foobar>\", \"gi\");;\n  replace_term = \"Replacement term\";\n  var new_text = text.replace(search_term, replace_term);\n  $(\"#textarea\").val(new_text);\n});\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n<button id=\"find_and_replace\">Find and replace</button>\n<br>\n<textarea ID=\"textarea\">abcde\nfghij&lt;Foobar&gt;</textarea>\n Run code snippetHide resultsExpand snippet\n\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Paul Chris Jones",
        "usuario_id": 2556
    },
    {
        "_id": 1453,
        "fecha": { "$date" : "2020-08-28T16:21:39Z" },
        "decripcion": "\nTry: .*\\n*.*<FooBar> assuming you are also allowing blank newlines. As you are allowing any character including nothing before <FooBar>.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "hafiz031",
        "usuario_id": 2557
    },
    {
        "_id": 1454,
        "fecha": { "$date" : "2011-01-18T09:31:21Z" },
        "decripcion": "\nI wanted to match a particular if block in java\n\n   ...\n   ...\n   if(isTrue){\n       doAction();\n\n   }\n...\n...\n}\n\n\nIf I use the regExp \n\nif \\(isTrue(.|\\n)*}\n\n\nit included the closing brace for the method block so I used\n\nif \\(!isTrue([^}.]|\\n)*}\n\n\nto exclude the closing brace from the wildcard match.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Spangen",
        "usuario_id": 2558
    },
    {
        "_id": 1455,
        "fecha": { "$date" : "2012-10-26T08:49:45Z" },
        "decripcion": "\nOften we have to modify a substring with a few  keywords spread across lines preceding the substring. Consider an xml element:\n\n<TASK>\n  <UID>21</UID>\n  <Name>Architectural design</Name>\n  <PercentComplete>81</PercentComplete>\n</TASK>\n\n\nSuppose we want to modify the 81, to some other value, say 40.  First identify .UID.21..UID., then skip all characters including \\n till .PercentCompleted.. The regular expression pattern and the replace specification are:\n\nString hw = new String(\"<TASK>\\n  <UID>21</UID>\\n  <Name>Architectural design</Name>\\n  <PercentComplete>81</PercentComplete>\\n</TASK>\");\nString pattern = new String (\"(<UID>21</UID>)((.|\\n)*?)(<PercentComplete>)(\\\\d+)(</PercentComplete>)\");\nString replaceSpec = new String (\"$1$2$440$6\");\n//note that the group (<PercentComplete>) is $4 and the group ((.|\\n)*?) is $2.\n\nString  iw = hw.replaceFirst(pattern, replaceSpec);\nSystem.out.println(iw);\n\n<TASK>\n  <UID>21</UID>\n  <Name>Architectural design</Name>\n  <PercentComplete>40</PercentComplete>\n</TASK>\n\n\nThe subgroup (.|\\n) is probably the missing group $3. If we make it non-capturing by (?:.|\\n) then the $3 is  (<PercentComplete>). So the pattern and replaceSpec can also  be:\n\npattern = new String(\"(<UID>21</UID>)((?:.|\\n)*?)(<PercentComplete>)(\\\\d+)(</PercentComplete>)\");\nreplaceSpec = new String(\"$1$2$340$5\")\n\n\nand the replacement works correctly as before.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "user1348737",
        "usuario_id": 2559
    },
    {
        "_id": 1456,
        "fecha": { "$date" : "2019-07-05T14:18:05Z" },
        "decripcion": "\nTypically searching for three consecutive lines in Powershell it would look like:\n\n$file = get-content file.txt -raw\n\n$pattern = 'lineone\\r\\nlinetwo\\r\\nlinethree\\r\\n'     # \"windows\" text\n$pattern = 'lineone\\nlinetwo\\nlinethree\\n'           # \"unix\" text\n$pattern = 'lineone\\r?\\nlinetwo\\r?\\nlinethree\\r?\\n'  # both\n\n$file -match $pattern\n\n# output\nTrue\n\n\nBizarrely, this would be unix text at the prompt, but windows text in a file:\n\n$pattern = 'lineone\nlinetwo\nlinethree\n'\n\n\nHere's a way to print out the line endings:\n\n'lineone\nlinetwo\nlinethree\n' -replace \"`r\",'\\r' -replace \"`n\",'\\n'\n\n# output\nlineone\\nlinetwo\\nlinethree\\n\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "js2010",
        "usuario_id": 2560
    },
    {
        "_id": 1457,
        "fecha": { "$date" : "2019-10-06T19:41:28Z" },
        "decripcion": "\nOption 1\n\nOne way would be to use the s flag (just like the accepted answer):\n\n/(.*)<FooBar>/s\n\n\nDemo 1\n\nOption 2\n\nA second way would be to use the m (multiline) flag and any of the following patterns:\n\n/([\\s\\S]*)<FooBar>/m\n\n\nor \n\n/([\\d\\D]*)<FooBar>/m\n\n\nor \n\n/([\\w\\W]*)<FooBar>/m\n\n\nDemo 2\n\nRegEx Circuit\n\njex.im visualizes regular expressions: \n\n\n    ",
        "votes": -1,
        "comentarios": [],
        "usuario": "Emma",
        "usuario_id": 367
    },
    {
        "_id": 1458,
        "fecha": { "$date" : "2016-09-27T03:24:21Z" },
        "decripcion": "\nYou need to add the path of your pip installation to your PATH system variable. By default, pip is installed to C:\\Python34\\Scripts\\pip (pip now comes bundled with new versions of python), so the path \"C:\\Python34\\Scripts\" needs to be added to your PATH variable.\n\nTo check if it is already in your PATH variable, type echo %PATH% at the CMD prompt\n\nTo add the path of your pip installation to your PATH variable, you can use the Control Panel or the setx command. For example:\n\nsetx PATH \"%PATH%;C:\\Python34\\Scripts\"\n\n\n\n\nNote:\nAccording to the official documentation, \"[v]ariables set with setx variables are available in future command windows only, not in the current command window\". In particular, you will need to start a new cmd.exe instance after entering the above command in order to utilize the new environment variable. \n\nThanks to Scott Bartell for pointing this out.\n    ",
        "votes": 644,
        "comentarios": [
            {
                "decripcion": "@fr1tz, the command did not work when being added from the cmd utility. I had to add it manually from system settings>advanced>environment variables. I am using Windows 8 64bit. Thanks!",
                "fecha": { "$date" : "2015-01-04T17:19:34Z" },
                "usuario": "Mohammed",
                "usuario_id": 2562
            },
            {
                "decripcion": "After this, you need to install any package from that Directory i.e. C:\\Python34\\Scripts (For example) pip install openpyxl",
                "fecha": { "$date" : "2016-03-13T14:59:52Z" },
                "usuario": "Fahad Naeem",
                "usuario_id": 2563
            },
            {
                "decripcion": "Note: you'll likely need to close and reopen your CMD prompt after you run the setx command.",
                "fecha": { "$date" : "2016-05-21T22:07:11Z" },
                "usuario": "Scott Bartell",
                "usuario_id": 2564
            },
            {
                "decripcion": "For python 3.5 installed on Windows 10, the path is: C:\\Users\\<username>\\AppData\\Local\\Programs\\Python\\Python35",
                "fecha": { "$date" : "2017-03-05T05:48:04Z" },
                "usuario": "derek",
                "usuario_id": 2565
            },
            {
                "decripcion": "By default, pip is installed to -- by who's default?",
                "fecha": { "$date" : "2018-04-24T18:04:35Z" },
                "usuario": "Alex Gordon",
                "usuario_id": 2566
            }
        ],
        "usuario": "fr1tz",
        "usuario_id": 2567
    },
    {
        "_id": 1459,
        "fecha": { "$date" : "2020-07-11T23:28:33Z" },
        "decripcion": "\nFor Windows, when you install a package, you type:\npython -m pip install [packagename]\n\n    ",
        "votes": 212,
        "comentarios": [
            {
                "decripcion": "I think these are the docs for the command -m: docs.python.org/2/using/cmdline.html?highlight=m#cmdoption-m",
                "fecha": { "$date" : "2019-02-09T15:02:49Z" },
                "usuario": "Marian07",
                "usuario_id": 2568
            },
            {
                "decripcion": "'python' is not recognized. I have it installed on my windows 10",
                "fecha": { "$date" : "2019-03-27T13:12:09Z" },
                "usuario": "vsync",
                "usuario_id": 2569
            },
            {
                "decripcion": "@vsync Try 'py' instead of 'python'",
                "fecha": { "$date" : "2019-04-15T22:44:50Z" },
                "usuario": "Vepir",
                "usuario_id": 2570
            },
            {
                "decripcion": "This particular solution is great for Virtual Environments :)",
                "fecha": { "$date" : "2020-10-08T23:10:27Z" },
                "usuario": "Pedro Mois\u00e9s Camacho Ure\u00f1a",
                "usuario_id": 2571
            },
            {
                "decripcion": "@Marian07 Your suggestion seem to be the only one that's working. I have tried some of the other suggestion about uninstalling pipenv because the virtual environments conflicting, not working. Thank you!",
                "fecha": { "$date" : "2021-04-20T15:28:32Z" },
                "usuario": "Chen Lizi",
                "usuario_id": 2572
            }
        ],
        "usuario": "Yijing Shi",
        "usuario_id": 2573
    },
    {
        "_id": 1460,
        "fecha": { "$date" : "2021-05-27T19:34:57Z" },
        "decripcion": "\nAs of now, version 3.7.3 I had a little bit of an issue with getting the right system variable.\nTry this:\n\nType start %appdata% in cmd.\n\nAfter that file explorer should pop up in ../AppData/Roaming.\n\n\nGo back one directory and navigate to Local/Programs/Python/Python37-32/Scripts.\n\nNOTE: The version number may be different so if you copy and paste the above file path it could not work.\nAfter you do this you now have the correct location of your downloaded Python. Copy your file path by selecting the whole directory in the address bar.\n\nOnce you do that click the start icon and navigate to the Control Panel \u2192 System and Security \u2192 System. Then click \"Advanced System Settings\" on the left side of the panel.\nOnce there, click Environment Variables on the bottom right and there will be two boxes, an upper and a lower box. In the upper box: Click on the 'Path' Variable and click Edit located on the right. Click New and paste your directory Path. It should look something like this:\n\nClick OK three times, open a new window of cmd and type: pip. See if it works.\n    ",
        "votes": 95,
        "comentarios": [
            {
                "decripcion": "best answer and perfect explaining!",
                "fecha": { "$date" : "2020-03-15T19:50:34Z" },
                "usuario": "do\u011fukan",
                "usuario_id": 2574
            }
        ],
        "usuario": "Thomas",
        "usuario_id": 2018
    },
    {
        "_id": 1461,
        "fecha": { "$date" : "2020-06-27T16:44:25Z" },
        "decripcion": "\nFor me the command:\nset PATH=%PATH%;C:\\Python34\\Scripts\n\nworked immediately (try after echo %PATH% and you will see that your path has the value C:\\Python34\\Scripts).\nThanks to: Adding a directory to the PATH environment variable in Windows\n    ",
        "votes": 73,
        "comentarios": [
            {
                "decripcion": "This seems to work just as long as you don't close the cmd, setx will do it permanently",
                "fecha": { "$date" : "2015-08-04T02:22:59Z" },
                "usuario": "Eduardo Hern\u00e1ndez",
                "usuario_id": 2575
            },
            {
                "decripcion": "I really don't see how this deserved a seperate answer a year after the selected one.",
                "fecha": { "$date" : "2016-01-08T00:02:32Z" },
                "usuario": "fr1tz",
                "usuario_id": 2567
            },
            {
                "decripcion": "@fr1tz this answer worked for me but not the previous one",
                "fecha": { "$date" : "2016-04-06T10:07:38Z" },
                "usuario": "gma992",
                "usuario_id": 2576
            }
        ],
        "usuario": "zygimantus",
        "usuario_id": 2577
    },
    {
        "_id": 1462,
        "fecha": { "$date" : "2018-09-14T12:55:30Z" },
        "decripcion": "\nAlternate way.\n\nIf you don't want to add the PATH as the previous well written answers pointed out, \n\nbut you want to execute pip as your command then you can do that with py -m as prefix.\n\nGiven that you have to do it again and again.\n\neg.\n\npy -m <command>\n\n\nas in\n\npy -m pip install --upgrade pip setuptools\n\n\nAlso make sure to have pip and py installed\n\n\n    ",
        "votes": 35,
        "comentarios": [
            {
                "decripcion": "While following this advise, I discover that my python installation had a \"(1)\" at the end of the .exe file name. After deleting the extra characters, python began wirking as expected",
                "fecha": { "$date" : "2018-10-07T16:54:24Z" },
                "usuario": "Buffalo",
                "usuario_id": 2578
            },
            {
                "decripcion": "I think these are the docs for the command -m: docs.python.org/2/using/cmdline.html?highlight=m#cmdoption-m",
                "fecha": { "$date" : "2019-02-09T15:05:35Z" },
                "usuario": "Marian07",
                "usuario_id": 2568
            }
        ],
        "usuario": "faruk13",
        "usuario_id": 2579
    },
    {
        "_id": 1463,
        "fecha": { "$date" : "2020-07-12T00:22:33Z" },
        "decripcion": "\nThe only way that worked on my Windows\u00a010 machine was as follows:\npy -3 -m pip install xxxxx\n\n    ",
        "votes": 27,
        "comentarios": [],
        "usuario": "HassanSh__3571619",
        "usuario_id": 2580
    },
    {
        "_id": 1464,
        "fecha": { "$date" : "2020-06-27T17:03:57Z" },
        "decripcion": "\nAlso, the long method - it was a last resort after trying all previous answers:\nC:\\python27\\scripts\\pip.exe install [package].whl\n\nThis after cd in directory where the wheel is located.\n    ",
        "votes": 23,
        "comentarios": [],
        "usuario": "Colin Miles",
        "usuario_id": 2581
    },
    {
        "_id": 1465,
        "fecha": { "$date" : "2017-07-24T05:21:47Z" },
        "decripcion": "\nAs per Python 3.6 Documentation \n\n\n  It is possible that pip does not get installed by default. One\n  potential fix is:\n\n\npython -m ensurepip --default-pip\n\n    ",
        "votes": 13,
        "comentarios": [
            {
                "decripcion": "This command will solve the issue on windows",
                "fecha": { "$date" : "2021-02-04T12:45:30Z" },
                "usuario": "Muhammad Usman",
                "usuario_id": 2582
            },
            {
                "decripcion": "I used this command but now if I install any package in base or my virtual environment, it automatically installs it in both. even if i create a environment, by doing pip list, it shows all the packages installed in base. How can I undo it.",
                "fecha": { "$date" : "2021-02-08T12:27:16Z" },
                "usuario": "Muhammad Usman",
                "usuario_id": 2582
            }
        ],
        "usuario": "Jeferson Andrade",
        "usuario_id": 2583
    },
    {
        "_id": 1466,
        "fecha": { "$date" : "2017-09-22T07:49:20Z" },
        "decripcion": "\nGo to control Panel >> Uninstall or change Program and double click on Python XXX to modify install. Make sure PIP component is checked and install.\n\n\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "Manjoo",
        "usuario_id": 2584
    },
    {
        "_id": 1467,
        "fecha": { "$date" : "2018-09-24T17:20:59Z" },
        "decripcion": "\nControl Panel -> add/remove programs -> Python -> Modify -> optional Features (you can click everything) then press next -> Check \"Add python to environment variables\" -> Install\n\n\n\nAnd that should solve your path issues, so jump to command prompt and you can use pip now.\n    ",
        "votes": 10,
        "comentarios": [
            {
                "decripcion": "this worked for me on windows 10 laptop with latest OS, i was using CMDER as my emulator",
                "fecha": { "$date" : "2019-01-05T16:17:04Z" },
                "usuario": "Akin Hwan",
                "usuario_id": 2585
            }
        ],
        "usuario": "Gus",
        "usuario_id": 2586
    },
    {
        "_id": 1468,
        "fecha": { "$date" : "2020-06-27T16:57:05Z" },
        "decripcion": "\nI was having the same problem just now.\nAfter adding the proper folder (C:\\Python33\\Scripts) to the path, I still could not get pip to run. All it took was running\npip.exe install -package- instead of\npip install -package-.\n    ",
        "votes": 10,
        "comentarios": [
            {
                "decripcion": "This worked for me, thanks. I have windows 10, 64 bit, 4 apps (problem probably partly comes from this fact) anaconda3 2020.11, python 3.7.0, python 3.9.1, python launcher.",
                "fecha": { "$date" : "2021-04-26T23:49:43Z" },
                "usuario": "ctde",
                "usuario_id": 2587
            }
        ],
        "usuario": "Josh",
        "usuario_id": 2165
    },
    {
        "_id": 1469,
        "fecha": { "$date" : "2020-06-27T17:05:15Z" },
        "decripcion": "\nTry going to Windows PowerShell or cmd prompt and typing:\npython -m pip install openpyxl\n\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "natty",
        "usuario_id": 2588
    },
    {
        "_id": 1470,
        "fecha": { "$date" : "2020-06-27T16:57:53Z" },
        "decripcion": "\nUse\nset Path = `%PATH%;C:\\Python34\\;C:\\Python27\\Scripts`\n\nSource\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "sajad",
        "usuario_id": 2589
    },
    {
        "_id": 1471,
        "fecha": { "$date" : "2020-07-11T23:32:40Z" },
        "decripcion": "\nIn latest version Python\u00a03.6.2 and above, is available in\n\nC:\\Program Files (x86)\\Python36-32\\Scripts\n\nYou can add the path to our environment variable path as below\n\nMake sure you close your command prompt or Git after setting up your path. Also should you open your command prompt in administrator mode. This is example for Windows\u00a010.\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "Karthikeyan VK",
        "usuario_id": 2590
    },
    {
        "_id": 1472,
        "fecha": { "$date" : "2020-07-11T23:39:58Z" },
        "decripcion": "\nOr if you are using PyCharm (2017-03-03) like me, just change directory in terminal and install:\ncd C:\\Users\\{user}\\PycharmProjects\\test\\venv\\Scripts\npip install ..\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Frager.",
        "usuario_id": 2591
    },
    {
        "_id": 1473,
        "fecha": { "$date" : "2019-10-15T15:16:41Z" },
        "decripcion": "\nMost frequently it is: \n\nin cmd.exe write\n\npython -m pip install --user [name of your module here without brackets]\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Kokokoko",
        "usuario_id": 2592
    },
    {
        "_id": 1474,
        "fecha": { "$date" : "2020-06-27T16:51:42Z" },
        "decripcion": "\nEven I'm new to this, but pip install django worked for me.\nThe path should be set as where the script folder of the Python installation is, i.e.C:\\Python34\\Scripts.\nI suppose it's because Django is a framework which is based on Python, and that's why this directory structure has to be maintained while installing.\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "It is better to set pip in environment variables. Your method would make it restricted.",
                "fecha": { "$date" : "2015-07-16T13:39:00Z" },
                "usuario": "GobSmack",
                "usuario_id": 2593
            }
        ],
        "usuario": "Sumit Nautiyal",
        "usuario_id": 2594
    },
    {
        "_id": 1475,
        "fecha": { "$date" : "2020-07-11T23:33:22Z" },
        "decripcion": "\nI have just installed Python\u00a03.6.2.\nI got the path as\n\nC:\\Users\\USERNAME\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "sanjeev shetty",
        "usuario_id": 2595
    },
    {
        "_id": 1476,
        "fecha": { "$date" : "2020-07-11T23:35:05Z" },
        "decripcion": "\nIn Windows, open cmd and find the location of PYTHON_HOME using  where python. Now add this location to your environment variable PATH using:\nset PATH=%PATH%;<PYTHON_HOME>\\Scripts\n\nOr refer to this.\n\nIn Linux, open a terminal and find the location of PYTHON_HOME using which python. Now add the PYTHON_HOME/Scripts to the PATH variable using:\nPATH=$PATH:<PYTHON_HOME>\\Scripts\nexport PATH\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Ani Menon",
        "usuario_id": 2596
    },
    {
        "_id": 1477,
        "fecha": { "$date" : "2020-07-11T23:36:12Z" },
        "decripcion": "\nYou can try pip3. Something like:\npip3 install pandas\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Ankit Chakraborty",
        "usuario_id": 2597
    },
    {
        "_id": 1478,
        "fecha": { "$date" : "2021-01-31T13:49:20Z" },
        "decripcion": "\nNone of these actually worked for me, but running\npython -m pip install -U pip\n\nand then adding the specified directory to the PATH as suggested got it working\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Christopher Turnbull",
        "usuario_id": 2598
    },
    {
        "_id": 1479,
        "fecha": { "$date" : "2020-06-27T16:56:39Z" },
        "decripcion": "\nI think from Python 2.7.9 and higher pip comes pre installed and it will be in your scripts folder.\nSo you have to add the \"scripts\" folder to the path. Mine is installed in C:\\Python27\\Scripts. Check yours to see what your path is so that you can alter the below accordingly. Then go to PowerShell, paste the below code in PowerShell and hit Enter key. After that, reboot and your issue will be resolved.\n[Environment]::SetEnvironmentVariable(\"Path\", \"$env:Path;C:\\Python27\\Scripts\", \"User\")\n\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "The OP is using Python 3.X, not 2.X.",
                "fecha": { "$date" : "2015-06-22T13:53:41Z" },
                "usuario": "Richard Erickson",
                "usuario_id": 2599
            }
        ],
        "usuario": "poodytang",
        "usuario_id": 2600
    },
    {
        "_id": 1480,
        "fecha": { "$date" : "2020-07-12T00:11:30Z" },
        "decripcion": "\nIn a Windows environment, just execute the below commands in a DOS shell.\n\npath=%path%;D:\\Program Files\\python3.6.4\\Scripts;\n(new path=current path;path of the Python script folder)\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Baiju Chandran",
        "usuario_id": 2601
    },
    {
        "_id": 1481,
        "fecha": { "$date" : "2020-07-12T00:18:13Z" },
        "decripcion": "\nI was facing the same issue. Run Windows PowerShell as Administrator. It resolved my issue.\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Kamran",
        "usuario_id": 2602
    },
    {
        "_id": 1482,
        "fecha": { "$date" : "2020-07-12T00:21:13Z" },
        "decripcion": "\nFor Mac, run the below command in a terminal window:\necho  export \"PATH=$HOME/Library/Python/2.7/bin:$PATH\"\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Lijo",
        "usuario_id": 2603
    },
    {
        "_id": 1483,
        "fecha": { "$date" : "2021-05-13T10:29:11Z" },
        "decripcion": "\nIn your Python folder path in Terminal, just type\n  py -m pip\n\nin order to check the current version of your pip.\nYou will also see a list of commands, you can use...\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "MKR",
        "usuario_id": 2604
    },
    {
        "_id": 1484,
        "fecha": { "$date" : "2017-05-09T12:44:51Z" },
        "decripcion": "\nI had this same issue. You just need to go to your \n\n\n  C:\\Python27\\Scripts\n\n\nand add it to environment variables. After path setting just run pip.exe file on C:\\Python27\\Scripts and then try pip in cmd. But if nothing happens try running all pip applications like pip2.7 and pip2.exe. And pip will work like a charm.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "shivam gupta",
        "usuario_id": 2605
    },
    {
        "_id": 1485,
        "fecha": { "$date" : "2019-02-08T22:41:11Z" },
        "decripcion": "\nSmall clarification: in \"Windows 7 64 bit PC\", after adding ...Python34\\Scripts to the path variable, pip install pygame didn't work for me.\n\nSo I checked the \"...Python34\\Scripts\" folder, it didn't have pip, but it had pip3 and pip3.4. So I ran pip3.4 install pygame .... .whl. It worked.\n\n(Further open a command window in the same folder where you have the downloaded pygame...whl file.)\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "kosa",
        "usuario_id": 2606
    },
    {
        "_id": 1486,
        "fecha": { "$date" : "2019-11-25T20:06:23Z" },
        "decripcion": "\nWhen installing SQL 2019 Python, there are known issues for PIP which require a fix (step 7) \nhttps://docs.microsoft.com/en-us/sql/advanced-analytics/known-issues-for-sql-server-machine-learning-services?view=sql-server-ver15\n\npip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.\n\nWorkaround\nCopy the following files:\n\nlibssl-1_1-x64.dll\nlibcrypto-1_1-x64.dll\n\nfrom the folder \nC:\\Program Files\\Microsoft SQL Server\\MSSSQL15.MSSQLSERVER\\PYTHON_SERVICES\\Library\\bin\nto the folder \nC:\\Program Files\\Microsoft SQL Server\\MSSSQL15.MSSQLSERVER\\PYTHON_SERVICES\\DLLs\n\nThen open a new DOS command shell prompt.\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Jamie",
        "usuario_id": 2607
    },
    {
        "_id": 1487,
        "fecha": { "$date" : "2020-06-27T17:06:14Z" },
        "decripcion": "\nI continued to receive this error after correcting my PATH.\nIf your codebase requires that you have an earlier version of Python (2.7 in my case), it may have been a version prior to the existence of pip.\nIt's not very canonical, but installing a more recent version worked for me. (I used 2.7.13.)\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Womble",
        "usuario_id": 2608
    },
    {
        "_id": 1488,
        "fecha": { "$date" : "2020-09-15T00:14:40Z" },
        "decripcion": "\nThe NoReverseMatch error is saying that Django cannot find a matching url pattern for the url you've provided in any of your installed app's urls.\n\nThe NoReverseMatch exception is raised by django.core.urlresolvers when a matching URL in your URLconf cannot be identified based on the parameters supplied.\n\nTo start debugging it, you need to start by disecting the error message given to you.\n\nNoReverseMatch at /my_url/\nThis is the url that is currently being rendered, it is this url that your application is currently trying to access but it contains a url that cannot be matched\n\nReverse for 'my_url_name'\nThis is the name of the url that it cannot find\n\nwith arguments '()' and\nThese are the non-keyword arguments its providing to the url\n\nkeyword arguments '{}' not found.\nThese are the keyword arguments its providing to the url\n\nn pattern(s) tried: []\nThese are the patterns that it was able to find in your urls.py files that it tried to match against\n\n\nStart by locating the code in your source relevant to the url that is currently being rendered - the url, the view, and any templates involved. In most cases, this will be the part of the code you're currently developing.\nOnce you've done this, read through the code in the order that django would be following until you reach the line of code that is trying to construct a url for your my_url_name. Again, this is probably in a place you've recently changed.\nNow that you've discovered where the error is occuring, use the other parts of the error message to work out the issue.\nThe url name\n\nAre there any typos?\nHave you provided the url you're trying to access the given name?\nIf you have set app_name in the app's urls.py (e.g. app_name = 'my_app') or if you included the app with a namespace (e.g. include('myapp.urls', namespace='myapp'), then you need to include the namespace when reversing, e.g. {% url 'myapp:my_url_name' %} or reverse('myapp:my_url_name').\n\nArguments and Keyword Arguments\nThe arguments and keyword arguments are used to match against any capture groups that are present within the given url which can be identified by the surrounding () brackets in the url pattern.\nAssuming the url you're matching requires additional arguments, take a look in the error message and first take a look if the value for the given arguments look to be correct.\nIf they aren't correct:\n\nThe value is missing or an empty string\nThis generally means that the value you're passing in doesn't contain the value you expect it to be. Take a look where you assign the value for it, set breakpoints, and you'll need to figure out why this value doesn't get passed through correctly.\n\nThe keyword argument has a typo\nCorrect this either in the url pattern, or in the url you're constructing.\n\n\nIf they are correct:\n\nDebug the regex\nYou can use a website such as regexr to quickly test whether your pattern matches the url you think you're creating, Copy the url pattern into the regex field at the top, and then use the text area to include any urls that you think it should match against.\nCommon Mistakes:\n\nMatching against the . wild card character or any other regex characters\nRemember to escape the specific characters with a \\ prefix\n\nOnly matching against lower/upper case characters\nTry using either a-Z or \\w instead of a-z or A-Z\n\n\n\nCheck that pattern you're matching is included within the patterns tried\nIf it isn't here then its possible that you have forgotten to include your app within the INSTALLED_APPS setting (or the ordering of the apps within INSTALLED_APPS may need looking at)\n\n\nDjango Version\nIn Django 1.10, the ability to reverse a url by its python path was removed. The named path should be used instead.\n\nIf you're still unable to track down the problem, then feel free to ask a new question that includes what you've tried, what you've researched (You can link to this question), and then include the relevant code to the issue - the url that you're matching, any relevant url patterns, the part of the error message that shows what django tried to match, and possibly the INSTALLED_APPS setting if applicable.\n    ",
        "votes": 284,
        "comentarios": [
            {
                "decripcion": "Finally we have a canonical answer that we can provide as the dup target",
                "fecha": { "$date" : "2016-07-15T07:26:49Z" },
                "usuario": "e4c5",
                "usuario_id": 2611
            },
            {
                "decripcion": "can you please elaborate on named path in django 1.10?",
                "fecha": { "$date" : "2018-04-27T11:46:41Z" },
                "usuario": "sage poudel",
                "usuario_id": 2612
            },
            {
                "decripcion": "Yes, set app_name in the app's urls.py (e.g. app_name = 'my_app')  is the point",
                "fecha": { "$date" : "2019-03-20T03:32:11Z" },
                "usuario": "C.K.",
                "usuario_id": 2613
            },
            {
                "decripcion": "I find this live regex tester more helpful: regex101.com",
                "fecha": { "$date" : "2019-10-07T12:21:35Z" },
                "usuario": "obotezat",
                "usuario_id": 2614
            },
            {
                "decripcion": "Thank you for this superb tutorial on NoReverseMatch! I was able to sort out my issue.",
                "fecha": { "$date" : "2020-07-05T13:21:42Z" },
                "usuario": "newmachines_xyz",
                "usuario_id": 2615
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1489,
        "fecha": { "$date" : "2021-08-17T19:09:49Z" },
        "decripcion": "\nThe arguments part is typically an object from your models. Remember to add it to your context in the view. Otherwise a reference to the object in the template will be empty and therefore not match a url with an object_id.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "rob70",
        "usuario_id": 2616
    },
    {
        "_id": 1490,
        "fecha": { "$date" : "2019-03-28T10:42:47Z" },
        "decripcion": "\nAnd make sure your route in the list of routes:\n\n./manage.py show_urls | grep path_or_name\n\n\nhttps://github.com/django-extensions/django-extensions\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "\ufe631 show_urls is not a a Django feature, this will not answer the question.",
                "fecha": { "$date" : "2019-03-27T22:39:35Z" },
                "usuario": "Urda",
                "usuario_id": 2617
            }
        ],
        "usuario": "Daniil Mashkin",
        "usuario_id": 2618
    },
    {
        "_id": 1491,
        "fecha": { "$date" : "2021-01-30T22:48:56Z" },
        "decripcion": "\nIt may be that it's not loading the template you expect. I added a new class that inherited from UpdateView - I thought it would automatically pick the template from what I named my class, but it actually loaded it based on the model property on the class, which resulted in another (wrong) template being loaded. Once I explicitly set template_name for the new class, it worked fine.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "ArtOfWarfare",
        "usuario_id": 1578
    },
    {
        "_id": 1492,
        "fecha": { "$date" : "2009-01-12T08:00:46Z" },
        "decripcion": "\nConcatenating the querysets into a list is the simplest approach. If the database will be hit for all querysets anyway (e.g. because the result needs to be sorted), this won't add further cost.\n\nfrom itertools import chain\nresult_list = list(chain(page_list, article_list, post_list))\n\n\nUsing itertools.chain is faster than looping each list and appending elements one by one, since itertools is implemented in C. It also consumes less memory than converting each queryset into a list before concatenating.\n\nNow it's possible to sort the resulting list e.g. by date (as requested in hasen j's comment to another answer). The sorted() function conveniently accepts a generator and returns a list:\n\nresult_list = sorted(\n    chain(page_list, article_list, post_list),\n    key=lambda instance: instance.date_created)\n\n\nIf you're using Python 2.4 or later, you can use attrgetter instead of a lambda. I remember reading about it being faster, but I didn't see a noticeable speed difference for a million item list.\n\nfrom operator import attrgetter\nresult_list = sorted(\n    chain(page_list, article_list, post_list),\n    key=attrgetter('date_created'))\n\n    ",
        "votes": 1142,
        "comentarios": [
            {
                "decripcion": "If merging querysets from the same table to perform an OR query, and have duplicated rows you can eliminate them with the groupby function:  from itertools import groupby unique_results = [rows.next() for (key, rows) in groupby(result_list, key=lambda obj: obj.id)]",
                "fecha": { "$date" : "2011-09-18T22:21:52Z" },
                "usuario": "Josh Russo",
                "usuario_id": 2620
            },
            {
                "decripcion": "Ok, so nm about the groupby function in this context. With the the Q function you should be able to perform any OR query you need: https://docs.djangoproject.com/en/1.3/topics/db/queries/#complex-lookups-with-q-objects",
                "fecha": { "$date" : "2011-09-18T22:41:41Z" },
                "usuario": "Josh Russo",
                "usuario_id": 2620
            },
            {
                "decripcion": "@apelliciari Chain uses significantly less memory than list.extend, because it doesn't need to load both lists fully into memory.",
                "fecha": { "$date" : "2015-04-15T17:17:21Z" },
                "usuario": "Dan Gayle",
                "usuario_id": 2621
            },
            {
                "decripcion": "@AWrightIV Here's the new version of that link: docs.djangoproject.com/en/1.8/topics/db/queries/\u2026",
                "fecha": { "$date" : "2015-09-12T16:27:43Z" },
                "usuario": "Josh Russo",
                "usuario_id": 2620
            },
            {
                "decripcion": "trying this approacg but have 'list' object has no attribute 'complex_filter'",
                "fecha": { "$date" : "2016-10-05T10:30:17Z" },
                "usuario": "grillazz",
                "usuario_id": 2622
            }
        ],
        "usuario": "akaihola",
        "usuario_id": 2623
    },
    {
        "_id": 1493,
        "fecha": { "$date" : "2019-06-20T13:37:58Z" },
        "decripcion": "\nTry this:\n\nmatches = pages | articles | posts\n\n\nIt retains all the functions of the querysets which is nice if you want to order_by or similar.\n\nPlease note: this doesn't work on querysets from two different models.\n    ",
        "votes": 522,
        "comentarios": [
            {
                "decripcion": "Doesn't work on sliced querysets, though. Or am I missing something?",
                "fecha": { "$date" : "2014-04-20T22:30:09Z" },
                "usuario": "sthzg",
                "usuario_id": 2624
            },
            {
                "decripcion": "I used to join the querysets using \"|\" but not always works fine. It's better to use \"Q\": docs.djangoproject.com/en/dev/topics/db/queries/\u2026",
                "fecha": { "$date" : "2014-09-12T08:59:22Z" },
                "usuario": "Ignacio P\u00e9rez",
                "usuario_id": 2625
            },
            {
                "decripcion": "Here | is the set union operator, not bitwise OR.",
                "fecha": { "$date" : "2015-03-26T18:53:42Z" },
                "usuario": "e100",
                "usuario_id": 2626
            },
            {
                "decripcion": "@e100 no, it's not the set union operator.  django overloads the bitwise OR operator: github.com/django/django/blob/master/django/db/models/\u2026",
                "fecha": { "$date" : "2016-08-24T15:31:30Z" },
                "usuario": "shangxiao",
                "usuario_id": 2627
            },
            {
                "decripcion": "Note that this solution does not preserve ordering, so a set {x,y,x} and a set {a,b,c} may end up {a,b,c,x,y,z} regardless of whether you use s1 | s2 or s2 | s1 and that makes | somewhat useless in many cases.",
                "fecha": { "$date" : "2017-10-25T01:07:10Z" },
                "usuario": "Mike 'Pomax' Kamermans",
                "usuario_id": 2628
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1494,
        "fecha": { "$date" : "2021-05-11T22:34:22Z" },
        "decripcion": "\nRelated, for mixing querysets from the same model, or for similar fields from a few models, starting with Django 1.11 a QuerySet.union() method is also available:\n\nunion()\nunion(*other_qs, all=False)\n\nNew in Django 1.11. Uses SQL\u2019s UNION operator to combine the results of two or more QuerySets. For example:\n>>> qs1.union(qs2, qs3)\n\nThe UNION operator selects only distinct values by default. To allow duplicate values, use the all=True\nargument.\nunion(), intersection(), and difference() return model instances of\nthe type of the first QuerySet even if the arguments are QuerySets of\nother models. Passing different models works as long as the SELECT\nlist is the same in all QuerySets (at least the types, the names don\u2019t\nmatter as long as the types in the same order).\nIn addition, only LIMIT, OFFSET, and ORDER BY (i.e. slicing and\norder_by()) are allowed on the resulting QuerySet. Further, databases\nplace restrictions on what operations are allowed in the combined\nqueries. For example, most databases don\u2019t allow LIMIT or OFFSET in\nthe combined queries.\n\n    ",
        "votes": 147,
        "comentarios": [
            {
                "decripcion": "This is a better solution for my problem set that needs to have unique values.",
                "fecha": { "$date" : "2017-09-07T13:03:55Z" },
                "usuario": "Burning Crystals",
                "usuario_id": 2629
            },
            {
                "decripcion": "Where do you import union from though? Does it have to come from one of the X number of querysets?",
                "fecha": { "$date" : "2019-11-19T16:04:22Z" },
                "usuario": "Jack",
                "usuario_id": 2630
            },
            {
                "decripcion": "Yes, it is a method of queryset.",
                "fecha": { "$date" : "2019-11-19T16:13:17Z" },
                "usuario": "Udi",
                "usuario_id": 2631
            },
            {
                "decripcion": "I think it removes search filters",
                "fecha": { "$date" : "2019-11-28T23:03:12Z" },
                "usuario": "Pierre Cordier",
                "usuario_id": 2632
            },
            {
                "decripcion": "Keep in mind you won't be able to filter() this queryset anymore after using union(). filter() will just fail silently. At least in Django 2.2",
                "fecha": { "$date" : "2019-12-03T17:07:56Z" },
                "usuario": "Qback",
                "usuario_id": 2633
            }
        ],
        "usuario": "Udi",
        "usuario_id": 2631
    },
    {
        "_id": 1495,
        "fecha": { "$date" : "2009-01-14T12:57:22Z" },
        "decripcion": "\nYou can use the QuerySetChain class below. When using it with Django's paginator, it should only hit the database with COUNT(*) queries for all querysets and SELECT() queries only for those querysets whose records are displayed on the current page.\n\nNote that you need to specify template_name= if using a QuerySetChain with generic views, even if the chained querysets all use the same model.\n\nfrom itertools import islice, chain\n\nclass QuerySetChain(object):\n    \"\"\"\n    Chains multiple subquerysets (possibly of different models) and behaves as\n    one queryset.  Supports minimal methods needed for use with\n    django.core.paginator.\n    \"\"\"\n\n    def __init__(self, *subquerysets):\n        self.querysets = subquerysets\n\n    def count(self):\n        \"\"\"\n        Performs a .count() for all subquerysets and returns the number of\n        records as an integer.\n        \"\"\"\n        return sum(qs.count() for qs in self.querysets)\n\n    def _clone(self):\n        \"Returns a clone of this queryset chain\"\n        return self.__class__(*self.querysets)\n\n    def _all(self):\n        \"Iterates records in all subquerysets\"\n        return chain(*self.querysets)\n\n    def __getitem__(self, ndx):\n        \"\"\"\n        Retrieves an item or slice from the chained set of results from all\n        subquerysets.\n        \"\"\"\n        if type(ndx) is slice:\n            return list(islice(self._all(), ndx.start, ndx.stop, ndx.step or 1))\n        else:\n            return islice(self._all(), ndx, ndx+1).next()\n\n\nIn your example, the usage would be:\n\npages = Page.objects.filter(Q(title__icontains=cleaned_search_term) |\n                            Q(body__icontains=cleaned_search_term))\narticles = Article.objects.filter(Q(title__icontains=cleaned_search_term) |\n                                  Q(body__icontains=cleaned_search_term) |\n                                  Q(tags__icontains=cleaned_search_term))\nposts = Post.objects.filter(Q(title__icontains=cleaned_search_term) |\n                            Q(body__icontains=cleaned_search_term) | \n                            Q(tags__icontains=cleaned_search_term))\nmatches = QuerySetChain(pages, articles, posts)\n\n\nThen use matches with the paginator like you used result_list in your example.\n\nThe itertools module was introduced in Python 2.3, so it should be available in all Python versions Django runs on.\n    ",
        "votes": 79,
        "comentarios": [
            {
                "decripcion": "Nice approach, but one problem I see here is that the query sets are appended \"head-to-tail\". What if each queryset is ordered by date and one needs the combined-set to also be ordered by date?",
                "fecha": { "$date" : "2009-01-11T10:02:52Z" },
                "usuario": "hasen",
                "usuario_id": 2634
            },
            {
                "decripcion": "This certaintly looks promising, great, I'll have to try that, but i dont have time today. I'll get back to you if it solves my problem. Great work.",
                "fecha": { "$date" : "2009-01-11T11:04:54Z" },
                "usuario": "espenhogbakk",
                "usuario_id": 2635
            },
            {
                "decripcion": "Ok, I had to try today, but it didnt work, first it complained that it didnt have to _clone attribute so i added that one, just copied the _all and that worked, but it seems that the paginator has some problem with this queryset. I get this paginator error: \"len() of unsized object\"",
                "fecha": { "$date" : "2009-01-11T12:48:26Z" },
                "usuario": "espenhogbakk",
                "usuario_id": 2635
            },
            {
                "decripcion": "@Espen Python library: pdb, logging. External: IPython, ipdb, django-logging, django-debug-toolbar, django-command-extensions, werkzeug. Use print statements in code or use the logging module. Above all, learn to introspect in the shell. Google for blog posts about debugging Django. Glad to help!",
                "fecha": { "$date" : "2009-01-14T21:19:12Z" },
                "usuario": "akaihola",
                "usuario_id": 2623
            },
            {
                "decripcion": "@patrick see djangosnippets.org/snippets/1103 and djangosnippets.org/snippets/1933 \u2013 epecially the latter is a very comprehensive solution",
                "fecha": { "$date" : "2011-04-10T11:16:24Z" },
                "usuario": "akaihola",
                "usuario_id": 2623
            }
        ],
        "usuario": "akaihola",
        "usuario_id": 2623
    },
    {
        "_id": 1496,
        "fecha": { "$date" : "2012-11-26T21:42:21Z" },
        "decripcion": "\nIn case you want to chain a lot of querysets, try this:\n\nfrom itertools import chain\nresult = list(chain(*docs))\n\n\nwhere: docs is a list of querysets\n    ",
        "votes": 34,
        "comentarios": [],
        "usuario": "vutran",
        "usuario_id": 2636
    },
    {
        "_id": 1497,
        "fecha": { "$date" : "2009-01-10T22:43:25Z" },
        "decripcion": "\nThe big downside of your current approach is its inefficiency with large search result sets, as you have to pull down the entire result set from the database each time, even though you only intend to display one page of results.\n\nIn order to only pull down the objects you actually need from the database, you have to use pagination on a QuerySet, not a list.  If you do this, Django actually slices the QuerySet before the query is executed, so the SQL query will use OFFSET and LIMIT to only get the records you will actually display.  But you can't do this unless you can cram your search into a single query somehow.\n\nGiven that all three of your models have title and body fields, why not use model inheritance?  Just have all three models inherit from a common ancestor that has title and body, and perform the search as a single query on the ancestor model.\n    ",
        "votes": 27,
        "comentarios": [],
        "usuario": "Carl Meyer",
        "usuario_id": 2637
    },
    {
        "_id": 1498,
        "fecha": { "$date" : "2019-04-07T16:35:54Z" },
        "decripcion": "\nThis can be achieved by two ways either.\n\n1st way to do this\n\nUse union operator for queryset | to take union of two queryset. If both queryset belongs to same model / single model than it is possible to combine querysets by using union operator.\n\nFor an instance\n\npagelist1 = Page.objects.filter(\n    Q(title__icontains=cleaned_search_term) | \n    Q(body__icontains=cleaned_search_term))\npagelist2 = Page.objects.filter(\n    Q(title__icontains=cleaned_search_term) | \n    Q(body__icontains=cleaned_search_term))\ncombined_list = pagelist1 | pagelist2 # this would take union of two querysets\n\n\n2nd way to do this\n\nOne other way to achieve combine operation between two queryset is to use itertools chain function.\n\nfrom itertools import chain\ncombined_results = list(chain(pagelist1, pagelist2))\n\n    ",
        "votes": 23,
        "comentarios": [
            {
                "decripcion": "Instead of itertools.chain (which runs each query separately), functools.reduce(operator.or_, [pagelist1, pagelist2]) can be used to programmatically apply your first approach. This results in a single query.",
                "fecha": { "$date" : "2021-08-19T17:18:06Z" },
                "usuario": "Cornflex",
                "usuario_id": 2638
            }
        ],
        "usuario": "Devang Padhiyar",
        "usuario_id": 2639
    },
    {
        "_id": 1499,
        "fecha": { "$date" : "2013-12-23T12:42:00Z" },
        "decripcion": "\nDATE_FIELD_MAPPING = {\n    Model1: 'date',\n    Model2: 'pubdate',\n}\n\ndef my_key_func(obj):\n    return getattr(obj, DATE_FIELD_MAPPING[type(obj)])\n\nAnd then sorted(chain(Model1.objects.all(), Model2.objects.all()), key=my_key_func)\n\n\nQuoted from https://groups.google.com/forum/#!topic/django-users/6wUNuJa4jVw. See Alex Gaynor \n    ",
        "votes": 16,
        "comentarios": [],
        "usuario": "ray6080",
        "usuario_id": 2640
    },
    {
        "_id": 1500,
        "fecha": { "$date" : "2021-05-11T22:38:15Z" },
        "decripcion": "\nYou can use Union:\nqs = qs1.union(qs2, qs3)\n\nBut if you want to apply order_by on the foreign models of the combined queryset... then you need to Select them beforehand this way... otherwise it won't work.\nExample\nqs = qs1.union(qs2.select_related(\"foreignModel\"), qs3.select_related(\"foreignModel\"))\nqs.order_by(\"foreignModel__prop1\")\n\nwhere prop1 is a property in the foreign model.\n    ",
        "votes": 13,
        "comentarios": [],
        "usuario": "Vignesh Sk",
        "usuario_id": 2641
    },
    {
        "_id": 1501,
        "fecha": { "$date" : "2018-07-23T17:48:27Z" },
        "decripcion": "\nRequirements:\nDjango==2.0.2, django-querysetsequence==0.8\n\nIn case you want to combine querysets and still come out with a QuerySet, you might want to check out django-queryset-sequence.\n\nBut one note about it. It only takes two querysets as it's argument. But with python reduce you can always apply it to multiple querysets.\n\nfrom functools import reduce\nfrom queryset_sequence import QuerySetSequence\n\ncombined_queryset = reduce(QuerySetSequence, list_of_queryset)\n\n\nAnd that's it. Below is a situation I ran into and how I employed list comprehension, reduce and django-queryset-sequence\n\nfrom functools import reduce\nfrom django.shortcuts import render    \nfrom queryset_sequence import QuerySetSequence\n\nclass People(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    mentor = models.ForeignKey('self', null=True, on_delete=models.SET_NULL, related_name='my_mentees')\n\nclass Book(models.Model):\n    name = models.CharField(max_length=20)\n    owner = models.ForeignKey(Student, on_delete=models.CASCADE)\n\n# as a mentor, I want to see all the books owned by all my mentees in one view.\ndef mentee_books(request):\n    template = \"my_mentee_books.html\"\n    mentor = People.objects.get(user=request.user)\n    my_mentees = mentor.my_mentees.all() # returns QuerySet of all my mentees\n    mentee_books = reduce(QuerySetSequence, [each.book_set.all() for each in my_mentees])\n\n    return render(request, template, {'mentee_books' : mentee_books})\n\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "Does Book.objects.filter(owner__mentor=mentor) not do the same thing? I'm not sure this is a valid use-case. I think a Book might need to have multiple owners before you needed to start doing anything like this.",
                "fecha": { "$date" : "2018-03-06T09:50:48Z" },
                "usuario": "Will S",
                "usuario_id": 2642
            },
            {
                "decripcion": "Yeah it does the same thing. I tried it. Anyway, perhaps this could be useful in some other situation. Thanks for pointing that out. You don't exactly start out knowing all the shortcuts as a beginner. Sometimes you gotta travel the load winding road to appreciate the crow's fly",
                "fecha": { "$date" : "2018-04-25T17:06:58Z" },
                "usuario": "chidimo",
                "usuario_id": 2643
            }
        ],
        "usuario": "chidimo",
        "usuario_id": 2643
    },
    {
        "_id": 1502,
        "fecha": { "$date" : "2021-05-11T22:31:42Z" },
        "decripcion": "\nHere's an idea... just pull down one full page of results from each of the three and then throw out the 20 least useful ones... this eliminates the large querysets and that way you only sacrifice a little performance instead of a lot.\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Jiaaro",
        "usuario_id": 2644
    },
    {
        "_id": 1503,
        "fecha": { "$date" : "2021-05-11T22:35:33Z" },
        "decripcion": "\nThis will do the work without using any other libraries:\nresult_list = page_list | article_list | post_list\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Satyam Faujdar",
        "usuario_id": 2645
    },
    {
        "_id": 1504,
        "fecha": { "$date" : "2021-05-11T22:39:59Z" },
        "decripcion": "\nThe best option is to use the Django built-in methods:\n# Union method\nresult_list = page_list.union(article_list, post_list)\n\nThat will return the union of all the objects in those querysets.\nIf you want to get just the objects that are in the three querysets, you will love the built-in method of querysets, intersection.\n# intersection method\nresult_list = page_list.intersection(article_list, post_list)\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Daniel Diaz",
        "usuario_id": 2646
    },
    {
        "_id": 1505,
        "fecha": { "$date" : "2019-02-01T09:41:54Z" },
        "decripcion": "\nThis recursive function concatenates array of querysets into one queryset. \n\ndef merge_query(ar):\n    if len(ar) ==0:\n        return [ar]\n    while len(ar)>1:\n        tmp=ar[0] | ar[1]\n        ar[0]=tmp\n        ar.pop(1)\n        return ar\n\n    ",
        "votes": -2,
        "comentarios": [
            {
                "decripcion": "I am literally lost.",
                "fecha": { "$date" : "2019-05-09T11:54:48Z" },
                "usuario": "lycuid",
                "usuario_id": 2647
            },
            {
                "decripcion": "we combining query result it cannot be use at run-time and that really bad idea to do that. because sometime it's add duplication over result.",
                "fecha": { "$date" : "2020-02-03T12:04:55Z" },
                "usuario": "Devang Hingu",
                "usuario_id": 2648
            },
            {
                "decripcion": "Too much complex , and the recursion results in a resources burn in the server.",
                "fecha": { "$date" : "2021-03-30T19:15:16Z" },
                "usuario": "Daniel Diaz",
                "usuario_id": 2646
            }
        ],
        "usuario": "Petr Dvo\u0159\u00e1\u010dek",
        "usuario_id": 2649
    },
    {
        "_id": 1506,
        "fecha": { "$date" : "2020-06-20T09:12:55Z" },
        "decripcion": "\nThe least painful and indeed Django-recommended way of doing this is through a OneToOneField(User) property.\n\nExtending the existing User model\n\u2026\nIf you wish to store information related to User, you can use a one-to-one relationship to a model containing the fields for additional information. This one-to-one model is often called a profile model, as it might store non-auth related information about a site user.\n\nThat said, extending django.contrib.auth.models.User and supplanting it also works...\n\nSubstituting a custom User model\nSome kinds of projects may have authentication requirements for which Django\u2019s built-in User model is not always appropriate. For instance, on some sites it makes more sense to use an email address as your identification token instead of a username.\n[Ed: Two warnings and a notification follow, mentioning that this is pretty drastic.]\n\nI would definitely stay away from changing the actual User class in your Django source tree and/or copying and altering the auth module.\n    ",
        "votes": 280,
        "comentarios": [
            {
                "decripcion": "FYI the new (1.0+) recommended method is OneToOneField(User) docs.djangoproject.com/en/dev/topics/auth/\u2026",
                "fecha": { "$date" : "2010-11-18T01:39:16Z" },
                "usuario": "Dave Forgac",
                "usuario_id": 2653
            },
            {
                "decripcion": "Shawn Rider of PBS gave some really good reasons why you should not extend django.contrib.auth.models.User. Use OneToOneField(User) instead.",
                "fecha": { "$date" : "2011-01-14T18:38:58Z" },
                "usuario": "pydanny",
                "usuario_id": 2654
            },
            {
                "decripcion": "user = models.ForeignKey(User, unique=True) is this the same as user = models.OneToOneField(User) ? I would think the end effect is the same? But maybe the implementation in the backend is different.",
                "fecha": { "$date" : "2011-04-23T06:04:41Z" },
                "usuario": "Sam Stoelinga",
                "usuario_id": 2655
            },
            {
                "decripcion": "Can anyone link to Shawn Riders argument/reasoning for that?",
                "fecha": { "$date" : "2012-03-28T23:00:39Z" },
                "usuario": "Jeremy Blanchard",
                "usuario_id": 2656
            },
            {
                "decripcion": "Here is some additional info about extending user models as of the django 1.7 docs",
                "fecha": { "$date" : "2014-11-20T22:17:02Z" },
                "usuario": "Derek Adair",
                "usuario_id": 2657
            }
        ],
        "usuario": "Ryan Duffield",
        "usuario_id": 2658
    },
    {
        "_id": 1507,
        "fecha": { "$date" : "2016-12-14T11:49:34Z" },
        "decripcion": "\nNote: this answer is deprecated. see other answers if you are using Django 1.7 or later.\n\nThis is how I do it.\n\n#in models.py\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\n\nclass UserProfile(models.Model):  \n    user = models.OneToOneField(User)  \n    #other fields here\n\n    def __str__(self):  \n          return \"%s's profile\" % self.user  \n\ndef create_user_profile(sender, instance, created, **kwargs):  \n    if created:  \n       profile, created = UserProfile.objects.get_or_create(user=instance)  \n\npost_save.connect(create_user_profile, sender=User) \n\n#in settings.py\nAUTH_PROFILE_MODULE = 'YOURAPP.UserProfile'\n\n\nThis will create a userprofile each time a user is saved if it is created. \nYou can then use\n\n  user.get_profile().whatever\n\n\nHere is some more info from the docs\n\nhttp://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users\n\nUpdate: Please note that AUTH_PROFILE_MODULE is deprecated since v1.5: https://docs.djangoproject.com/en/1.5/ref/settings/#auth-profile-module\n    ",
        "votes": 235,
        "comentarios": [
            {
                "decripcion": "Thanks for the clear example, note that def create_user.... is not part of the UserProfile class and should be aligned left.",
                "fecha": { "$date" : "2010-04-02T09:31:20Z" },
                "usuario": "PhoebeB",
                "usuario_id": 2659
            },
            {
                "decripcion": "With this solution should other models ForeignKey to User or UserProfile?",
                "fecha": { "$date" : "2010-05-11T06:52:42Z" },
                "usuario": "andrewrk",
                "usuario_id": 328
            },
            {
                "decripcion": "Other models should use user = models.ForeignKey( User ), and retrieve the profile object via user.get_profile().  Remember to from django.contrib.admin.models import User.",
                "fecha": { "$date" : "2010-08-12T20:01:52Z" },
                "usuario": "Craig Trader",
                "usuario_id": 2660
            },
            {
                "decripcion": "By using this method, I need to separate when I retrieve usual information (name, password) and custom one or is there a way to do it at once ? Same for the creation a new user ?",
                "fecha": { "$date" : "2010-12-02T20:29:22Z" },
                "usuario": "Martin Trigaux",
                "usuario_id": 2661
            },
            {
                "decripcion": "This answer & comments has become outdated e.g. AUTH_PROFILE_MODULE is deprecated, User",
                "fecha": { "$date" : "2014-04-03T06:36:24Z" },
                "usuario": "user",
                "usuario_id": 2662
            }
        ],
        "usuario": "Raisins",
        "usuario_id": 2663
    },
    {
        "_id": 1508,
        "fecha": { "$date" : "2014-06-24T15:41:18Z" },
        "decripcion": "\nWell, some time passed since 2008 and it's time for some fresh answer. Since Django 1.5 you will be able to create custom User class. Actually, at the time I'm writing this, it's already merged into master, so you can try it out.\n\nThere's some information about it in docs or if you want to dig deeper into it, in this commit.\n\nAll you have to do is add AUTH_USER_MODEL to settings with path to custom user class, which extends either AbstractBaseUser (more customizable version) or AbstractUser (more or less old User class you can extend).\n\nFor people that are lazy to click, here's code example (taken from docs):\n\nfrom django.db import models\nfrom django.contrib.auth.models import (\n    BaseUserManager, AbstractBaseUser\n)\n\n\nclass MyUserManager(BaseUserManager):\n    def create_user(self, email, date_of_birth, password=None):\n        \"\"\"\n        Creates and saves a User with the given email, date of\n        birth and password.\n        \"\"\"\n        if not email:\n            raise ValueError('Users must have an email address')\n\n        user = self.model(\n            email=MyUserManager.normalize_email(email),\n            date_of_birth=date_of_birth,\n        )\n\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, username, date_of_birth, password):\n        \"\"\"\n        Creates and saves a superuser with the given email, date of\n        birth and password.\n        \"\"\"\n        u = self.create_user(username,\n                        password=password,\n                        date_of_birth=date_of_birth\n                    )\n        u.is_admin = True\n        u.save(using=self._db)\n        return u\n\n\nclass MyUser(AbstractBaseUser):\n    email = models.EmailField(\n                        verbose_name='email address',\n                        max_length=255,\n                        unique=True,\n                    )\n    date_of_birth = models.DateField()\n    is_active = models.BooleanField(default=True)\n    is_admin = models.BooleanField(default=False)\n\n    objects = MyUserManager()\n\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['date_of_birth']\n\n    def get_full_name(self):\n        # The user is identified by their email address\n        return self.email\n\n    def get_short_name(self):\n        # The user is identified by their email address\n        return self.email\n\n    def __unicode__(self):\n        return self.email\n\n    def has_perm(self, perm, obj=None):\n        \"Does the user have a specific permission?\"\n        # Simplest possible answer: Yes, always\n        return True\n\n    def has_module_perms(self, app_label):\n        \"Does the user have permissions to view the app `app_label`?\"\n        # Simplest possible answer: Yes, always\n        return True\n\n    @property\n    def is_staff(self):\n        \"Is the user a member of staff?\"\n        # Simplest possible answer: All admins are staff\n        return self.is_admin\n\n    ",
        "votes": 214,
        "comentarios": [
            {
                "decripcion": "The create_user function doesn't seem to store the username, how so?!",
                "fecha": { "$date" : "2013-04-08T21:18:22Z" },
                "usuario": "Orca",
                "usuario_id": 2664
            },
            {
                "decripcion": "Because in this example, email is the username.",
                "fecha": { "$date" : "2013-04-09T06:14:07Z" },
                "usuario": "Ondrej Slint\u00e1k",
                "usuario_id": 2665
            },
            {
                "decripcion": "You need to add unique=True to the email field to let USERNAME_FIELD accept it",
                "fecha": { "$date" : "2014-06-24T14:28:56Z" },
                "usuario": "Richard de Wit",
                "usuario_id": 2666
            },
            {
                "decripcion": "Hi, I was trying to create custom user as you said but couldn't able to login using email of custom user email. would you not mind to say why?",
                "fecha": { "$date" : "2014-07-10T07:18:08Z" },
                "usuario": "Lionel",
                "usuario_id": 2667
            },
            {
                "decripcion": "get the following error when we run syncd which lead to create super user:   TypeError: create_superuser() got an unexpected keyword argument 'email'",
                "fecha": { "$date" : "2015-05-06T05:30:18Z" },
                "usuario": "user3048148",
                "usuario_id": 2668
            }
        ],
        "usuario": "Ondrej Slint\u00e1k",
        "usuario_id": 2665
    },
    {
        "_id": 1509,
        "fecha": { "$date" : "2013-04-20T21:56:43Z" },
        "decripcion": "\nSince Django 1.5 you may easily extend the user model and keep a single table on the database.\n\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nclass UserProfile(AbstractUser):\n    age = models.PositiveIntegerField(_(\"age\"))\n\n\nYou must also configure it as current user class in your settings file\n\n# supposing you put it in apps/profiles/models.py\nAUTH_USER_MODEL = \"profiles.UserProfile\"\n\n\nIf you want to add a lot of users' preferences the OneToOneField option may be a better choice thought.\n\nA note for people developing third party libraries: if you need to access the user class remember that people can change it. Use the official helper to get the right class\n\nfrom django.contrib.auth import get_user_model\n\nUser = get_user_model()\n\n    ",
        "votes": 55,
        "comentarios": [
            {
                "decripcion": "If you plan on using django_social_auth, I recommend using a OneToOne relationship. DON'T use this method or it will mess up your migrations.",
                "fecha": { "$date" : "2014-01-11T02:30:52Z" },
                "usuario": "Nimo",
                "usuario_id": 2669
            },
            {
                "decripcion": "@Nimo : Could you elaborate or cite a reference",
                "fecha": { "$date" : "2014-04-03T08:53:57Z" },
                "usuario": "user",
                "usuario_id": 2662
            },
            {
                "decripcion": "@buffer, it was a long while back, but I think I tried combining the django_social_auth plugin and defining the AUTH_USER_MODEL to the social auth user. Then, when I ran manage.py migrate it messed up my app. When instead I used the social auth user model as a OneToOne relationship s described here: stackoverflow.com/q/10638293/977116",
                "fecha": { "$date" : "2014-04-03T16:59:12Z" },
                "usuario": "Nimo",
                "usuario_id": 2669
            },
            {
                "decripcion": "Probably has to do with Changing this setting after you have tables created is not supported by makemigrations and will result in you having to manually write a set of migrations to fix your schema Source : docs.djangoproject.com/en/dev/topics/auth/customizing/\u2026",
                "fecha": { "$date" : "2014-04-04T05:35:44Z" },
                "usuario": "user",
                "usuario_id": 2662
            }
        ],
        "usuario": "Riccardo Galli",
        "usuario_id": 2670
    },
    {
        "_id": 1510,
        "fecha": { "$date" : "2010-05-17T13:52:24Z" },
        "decripcion": "\nThere is an official recommendation on storing additional information about users.\nThe Django Book also discusses this problem in section Profiles.\n    ",
        "votes": 44,
        "comentarios": [
            {
                "decripcion": "On this page docs.djangoproject.com/en/dev/topics/auth/customizing got to the extending model section",
                "fecha": { "$date" : "2021-03-24T05:28:30Z" },
                "usuario": "user3829269",
                "usuario_id": 2671
            }
        ],
        "usuario": "Dmitry Mukhin",
        "usuario_id": 2672
    },
    {
        "_id": 1511,
        "fecha": { "$date" : "2009-04-01T13:01:09Z" },
        "decripcion": "\nThe below one is another approach to extend an User.\nI feel it is more clear,easy,readable  then above two approaches.\n\nhttp://scottbarnham.com/blog/2008/08/21/extending-the-django-user-model-with-inheritance/\n\nUsing above approach:\n\n\nyou don't need to use\nuser.get_profile().newattribute to access the additional information\nrelated to the user\nyou can just directly access\nadditional new attributes via \nuser.newattribute\n\n    ",
        "votes": 23,
        "comentarios": [
            {
                "decripcion": "I like Scott's approach much better, based on the inheritance of the User object rather than directly off the model.   Can anyone say if this approach is not wise?",
                "fecha": { "$date" : "2010-03-23T14:55:49Z" },
                "usuario": "BozoJoe",
                "usuario_id": 2673
            },
            {
                "decripcion": "@BozoJoe - I just ran into this issue importing dump data, which appears to be a consequence of using this method: stackoverflow.com/questions/8840068/\u2026",
                "fecha": { "$date" : "2012-03-26T23:27:55Z" },
                "usuario": "Ben Regenspan",
                "usuario_id": 2674
            }
        ],
        "usuario": "Rama Vadakattu",
        "usuario_id": 2675
    },
    {
        "_id": 1512,
        "fecha": { "$date" : "2019-11-26T09:48:52Z" },
        "decripcion": "\nYou can Simply extend user profile by creating a new entry each time when a user is created by using Django post save signals\n\nmodels.py\n\nfrom django.db.models.signals import *\nfrom __future__ import unicode_literals\n\nclass UserProfile(models.Model):\n\n    user_name = models.OneToOneField(User, related_name='profile')\n    city = models.CharField(max_length=100, null=True)\n\n    def __unicode__(self):  # __str__\n        return unicode(self.user_name)\n\ndef create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        userProfile.objects.create(user_name=instance)\n\npost_save.connect(create_user_profile, sender=User)\n\n\nThis will automatically create an employee instance when a new user is created.\n\nIf you wish to extend user model and want to add further information while creating a user you can use django-betterforms (http://django-betterforms.readthedocs.io/en/latest/multiform.html). This will create a user add form with all fields defined in the UserProfile model.\n\nmodels.py\n\nfrom django.db.models.signals import *\nfrom __future__ import unicode_literals\n\nclass UserProfile(models.Model):\n\n    user_name = models.OneToOneField(User)\n    city = models.CharField(max_length=100)\n\n    def __unicode__(self):  # __str__\n        return unicode(self.user_name)\n\n\nforms.py\n\nfrom django import forms\nfrom django.forms import ModelForm\nfrom betterforms.multiform import MultiModelForm\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .models import *\n\nclass ProfileForm(ModelForm):\n\n    class Meta:\n        model = Employee\n        exclude = ('user_name',)\n\n\nclass addUserMultiForm(MultiModelForm):\n    form_classes = {\n        'user':UserCreationForm,\n        'profile':ProfileForm,\n    }\n\n\nviews.py\n\nfrom django.shortcuts import redirect\nfrom .models import *\nfrom .forms import *\nfrom django.views.generic import CreateView\n\nclass AddUser(CreateView):\n    form_class = AddUserMultiForm\n    template_name = \"add-user.html\"\n    success_url = '/your-url-after-user-created'\n\n    def form_valid(self, form):\n        user = form['user'].save()\n        profile = form['profile'].save(commit=False)\n        profile.user_name = User.objects.get(username= user.username)\n        profile.save()\n        return redirect(self.success_url)\n\n\naddUser.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n    </head>\n    <body>\n        <form action=\".\" method=\"post\">\n            {% csrf_token %}\n            {{ form }}     \n            <button type=\"submit\">Add</button>\n        </form>\n     </body>\n</html>\n\n\nurls.py\n\nfrom django.conf.urls import url, include\nfrom appName.views import *\nurlpatterns = [\n    url(r'^add-user/$', AddUser.as_view(), name='add-user'),\n]\n\n    ",
        "votes": 17,
        "comentarios": [
            {
                "decripcion": "Hi and thanks for this answer. I am still struggling to understand how to link it all together in urls.py..any hints?",
                "fecha": { "$date" : "2016-10-04T12:20:13Z" },
                "usuario": "sal",
                "usuario_id": 2676
            },
            {
                "decripcion": "@sal Added urls example you can check now",
                "fecha": { "$date" : "2016-10-04T15:44:56Z" },
                "usuario": "Atul Yadav",
                "usuario_id": 2677
            },
            {
                "decripcion": "Thanks!!. It helps me a lot. Good example",
                "fecha": { "$date" : "2017-05-02T10:01:11Z" },
                "usuario": "Sunny Chaudhari",
                "usuario_id": 2678
            },
            {
                "decripcion": "@AtulYadav .. what is the version of Django that you used ?",
                "fecha": { "$date" : "2017-12-30T15:48:08Z" },
                "usuario": "Rido",
                "usuario_id": 2679
            }
        ],
        "usuario": "Atul Yadav",
        "usuario_id": 2677
    },
    {
        "_id": 1513,
        "fecha": { "$date" : "2021-03-13T11:45:54Z" },
        "decripcion": "\nExtending Django User Model (UserProfile) like a Pro\nI've found this very useful: link\nAn extract:\nfrom django.contrib.auth.models import User\n\nclass Employee(models.Model):\n    user = models.OneToOneField(User)\n    department = models.CharField(max_length=100)\n\n>>> u = User.objects.get(username='fsmith')\n>>> freds_department = u.employee.department\n\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "Done. I don't uderstand why a -1. Better an edit than a downvote in this case.",
                "fecha": { "$date" : "2016-04-13T14:39:35Z" },
                "usuario": "Massimo Variolo",
                "usuario_id": 2680
            }
        ],
        "usuario": "Massimo Variolo",
        "usuario_id": 2680
    },
    {
        "_id": 1514,
        "fecha": { "$date" : "2021-08-11T21:03:04Z" },
        "decripcion": "\nIt's very easy in Django version 3.0+.\nIn models.py\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractUser\n\nclass CustomUser(AbstractUser):\n    extra_field=models.CharField(max_length=40)\n\nIn settings.py\nFirst, register your new app and then below AUTH_PASSWORD_VALIDATORS\nadd\nAUTH_USER_MODEL ='users.CustomUser'\n\nFinally, register your model in the admin, run makemigrations and migrate, and it will be completed successfully.\nOfficial doc: https://docs.djangoproject.com/en/3.2/topics/auth/customizing/#substituting-a-custom-user-model\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Alphonse Prakash",
        "usuario_id": 2681
    },
    {
        "_id": 1515,
        "fecha": { "$date" : "2013-03-12T10:10:13Z" },
        "decripcion": "\nNew in Django 1.5, now you can create your own Custom User Model (which seems to be good thing to do in above case). Refer to 'Customizing authentication in Django'\n\nProbably the coolest new feature on 1.5 release.\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "Yes, indeed. But beware that one should avoid this unless necessary. Implementing your own for the reason in this question is perfectly valid though in case you're comfortable with the consequences documented. For simply adding fields a relationship with the regular User model is recommended.",
                "fecha": { "$date" : "2013-03-28T15:59:14Z" },
                "usuario": "gertvdijk",
                "usuario_id": 2682
            }
        ],
        "usuario": "chhantyal",
        "usuario_id": 2683
    },
    {
        "_id": 1516,
        "fecha": { "$date" : "2018-07-25T05:00:38Z" },
        "decripcion": "\nThis is what i do and it's in my opinion simplest way to do this. define an object manager for your new customized model then define your model.\n\nfrom django.db import models\nfrom django.contrib.auth.models import PermissionsMixin, AbstractBaseUser, BaseUserManager\n\nclass User_manager(BaseUserManager):\n    def create_user(self, username, email, gender, nickname, password):\n        email = self.normalize_email(email)\n        user = self.model(username=username, email=email, gender=gender, nickname=nickname)\n        user.set_password(password)\n        user.save(using=self.db)\n        return user\n\n    def create_superuser(self, username, email, gender, password, nickname=None):\n        user = self.create_user(username=username, email=email, gender=gender, nickname=nickname, password=password)\n        user.is_superuser = True\n        user.is_staff = True\n        user.save()\n        return user\n\n\n\n  class User(PermissionsMixin, AbstractBaseUser):\n    username = models.CharField(max_length=32, unique=True, )\n    email = models.EmailField(max_length=32)\n    gender_choices = [(\"M\", \"Male\"), (\"F\", \"Female\"), (\"O\", \"Others\")]\n    gender = models.CharField(choices=gender_choices, default=\"M\", max_length=1)\n    nickname = models.CharField(max_length=32, blank=True, null=True)\n\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    REQUIRED_FIELDS = [\"email\", \"gender\"]\n    USERNAME_FIELD = \"username\"\n    objects = User_manager()\n\n    def __str__(self):\n        return self.username\n\n\nDont forget to add this line of code in your settings.py:\n\nAUTH_USER_MODEL = 'YourApp.User'\n\n\nThis is what i do and it always works.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Milad Khodabandehloo",
        "usuario_id": 2684
    },
    {
        "_id": 1517,
        "fecha": { "$date" : "2020-02-22T18:36:13Z" },
        "decripcion": "\nSimple and effective approach is\nmodels.py\n\nfrom django.contrib.auth.models import User\nclass CustomUser(User):\n     profile_pic = models.ImageField(upload_to='...')\n     other_field = models.CharField()\n\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "I would never use this solution. BUT as pure and really simplest solution this is the best and most correct for pure django way.",
                "fecha": { "$date" : "2021-02-26T13:45:01Z" },
                "usuario": "ilyas Jumadurdyew",
                "usuario_id": 2685
            }
        ],
        "usuario": "NeerajSahani",
        "usuario_id": 2686
    },
    {
        "_id": 1518,
        "fecha": { "$date" : "2020-10-12T06:08:14Z" },
        "decripcion": "\nIt's too late, but my answer is for those who search for a solution with a recent version of Django.\nmodels.py:\nfrom django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\n\n\nclass Profile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    extra_Field_1 = models.CharField(max_length=25, blank=True)\n    extra_Field_2 = models.CharField(max_length=25, blank=True)\n\n\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        Profile.objects.create(user=instance)\n\n@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    instance.profile.save()\n\nyou can use it in templates like this:\n<h2>{{ user.get_full_name }}</h2>\n<ul>\n  <li>Username: {{ user.username }}</li>\n  <li>Location: {{ user.profile.extra_Field_1 }}</li>\n  <li>Birth Date: {{ user.profile.extra_Field_2 }}</li>\n</ul>\n\nand in views.py like this:\ndef update_profile(request, user_id):\n    user = User.objects.get(pk=user_id)\n    user.profile.extra_Field_1 = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit...'\n    user.save()\n\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "I become an AttributeError: 'User' object has no attribute 'profile' error when save_user_profile signal (instance.profile.save()) is fired. How did you solve this?",
                "fecha": { "$date" : "2021-01-12T10:00:56Z" },
                "usuario": "fbzyx",
                "usuario_id": 2687
            },
            {
                "decripcion": "@fbzyx have you imported the profile model?",
                "fecha": { "$date" : "2021-01-13T12:41:31Z" },
                "usuario": "Shahriar.M",
                "usuario_id": 2688
            }
        ],
        "usuario": "Shahriar.M",
        "usuario_id": 2688
    },
    {
        "_id": 1519,
        "fecha": { "$date" : "2019-11-18T19:18:46Z" },
        "decripcion": "\nCurrently as of Django 2.2, the recommended way when starting a new project is to create a custom user model that inherits from AbstractUser, then point AUTH_USER_MODEL to the model.\n\nSource: https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#using-a-custom-user-model-when-starting-a-project\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "David Torrey",
        "usuario_id": 2689
    },
    {
        "_id": 1520,
        "fecha": { "$date" : "2021-01-31T06:56:58Z" },
        "decripcion": "\nTry this:\nCreate a model called Profile and reference the user with a OneToOneField and provide an option of related_name.\nmodels.py\nfrom django.db import models\nfrom django.contrib.auth.models import *\nfrom django.dispatch import receiver\nfrom django.db.models.signals import post_save\n\nclass Profile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='user_profile')\n\n    def __str__(self):\n        return self.user.username\n\n@receiver(post_save, sender=User)\ndef create_profile(sender, instance, created, **kwargs):\n    try:\n        if created:\n            Profile.objects.create(user=instance).save()\n    except Exception as err:\n        print('Error creating user profile!')\n\nNow to directly access the profile using a User object you can use the related_name.\nviews.py\nfrom django.http import HttpResponse\n\ndef home(request):\n    profile = f'profile of {request.user.user_profile}'\n    return HttpResponse(profile)\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Ajay Lingayat",
        "usuario_id": 2690
    },
    {
        "_id": 1521,
        "fecha": { "$date" : "2017-05-23T12:26:10Z" },
        "decripcion": "\nThis is a part of security, you cannot do that. If you want to allow credentials then your Access-Control-Allow-Origin must not use *. You will have to specify the exact protocol + domain + port. For reference see these questions :\n\n\nAccess-Control-Allow-Origin wildcard subdomains, ports and protocols\nCross Origin Resource Sharing with Credentials\n\n\nBesides * is too permissive and would defeat use of credentials. So set http://localhost:3000 or http://localhost:8000 as the allow origin header.\n    ",
        "votes": 301,
        "comentarios": [
            {
                "decripcion": "But what if there's more than one domain?",
                "fecha": { "$date" : "2014-10-08T00:57:05Z" },
                "usuario": "aroth",
                "usuario_id": 1611
            },
            {
                "decripcion": "@aroth You can give a list of domains. Related question: stackoverflow.com/questions/1653308/\u2026",
                "fecha": { "$date" : "2014-10-08T07:19:28Z" },
                "usuario": "user568109",
                "usuario_id": 1005
            },
            {
                "decripcion": "@user568109 Could you explain \"Besides * is too permissive and would defeat use of credentials.\"?",
                "fecha": { "$date" : "2016-06-24T14:13:47Z" },
                "usuario": "Hugo Wood",
                "usuario_id": 2695
            },
            {
                "decripcion": "What is the \"exact domain\" if the request comes from mobile device, like it can happen with Cordova?",
                "fecha": { "$date" : "2016-07-02T12:36:22Z" },
                "usuario": "Christian",
                "usuario_id": 2314
            },
            {
                "decripcion": "@Christian kinda old, but if anyone still curious, this problem happens only for applications running on browsers, because this error is thrown by the browser for security reasons. Other clients such as a mobile app, postman or any other backend code using http client to make a request won't have this problem, so you don't have to worry about the origin and the exact domain.",
                "fecha": { "$date" : "2019-04-10T05:19:40Z" },
                "usuario": "Alisson",
                "usuario_id": 2696
            }
        ],
        "usuario": "user568109",
        "usuario_id": 1005
    },
    {
        "_id": 1522,
        "fecha": { "$date" : "2017-09-18T02:43:40Z" },
        "decripcion": "\nIf you are using CORS middleware and you want to send withCredential boolean true, you can configure CORS like this:\n\nvar cors = require('cors');    \napp.use(cors({credentials: true, origin: 'http://localhost:3000'}));\n\n    ",
        "votes": 56,
        "comentarios": [],
        "usuario": "Hamid",
        "usuario_id": 1541
    },
    {
        "_id": 1523,
        "fecha": { "$date" : "2020-10-23T16:47:20Z" },
        "decripcion": "\nExpanding on @Renaud idea, cors now provides a very easy way of doing this:\nFrom cors official documentation found here:\n\"\norigin: Configures the Access-Control-Allow-Origin CORS header.\nPossible values:\nBoolean - set origin to true to reflect the request origin, as defined by req.header('Origin'), or set it to false to disable CORS.\n\"\nHence we simply do the following:\nconst app = express();\nconst corsConfig = {\n    credentials: true,\n    origin: true,\n};\napp.use(cors(corsConfig));\n\nLastly I think it is worth mentioning that there are use cases where we would want to allow cross origin requests from anyone; for example, when building a public REST API.\nNOTE:\nI would have liked to leave this as a comment on his answer, but unfortunately I don't have the reputation points.\n    ",
        "votes": 22,
        "comentarios": [
            {
                "decripcion": "I like this answer! especially about the fact that there are use cases where you want to allow all origins (many answers here seem to assume that it is always a bad practice).",
                "fecha": { "$date" : "2021-05-19T17:28:49Z" },
                "usuario": "Quentin C",
                "usuario_id": 2697
            }
        ],
        "usuario": "Christoph Hansen",
        "usuario_id": 2698
    },
    {
        "_id": 1524,
        "fecha": { "$date" : "2013-11-02T15:22:58Z" },
        "decripcion": "\nIf you are using express you can use the cors package to allow CORS like so instead of writing your middleware;\n\nvar express = require('express')\n, cors = require('cors')\n, app = express();\n\napp.use(cors());\n\napp.get(function(req,res){ \n  res.send('hello');\n});\n\n    ",
        "votes": 19,
        "comentarios": [
            {
                "decripcion": "Ah, now that's more convenient, however, the result's the same :(  BTW, I'm using app.use(cors({credentials: true}));",
                "fecha": { "$date" : "2013-11-02T15:34:39Z" },
                "usuario": "ixaxaar",
                "usuario_id": 2699
            },
            {
                "decripcion": "You might want to look into this Django CORS middleware that is tested.",
                "fecha": { "$date" : "2013-11-02T16:18:54Z" },
                "usuario": "Bulkan",
                "usuario_id": 2700
            },
            {
                "decripcion": "So you have two Django middlewares ? I would only use django-cors-header app. Make sure you add localhost to CORS_ORIGIN_WHITELIST setting and set CORS_ALLOW_CREDENTIALS to True",
                "fecha": { "$date" : "2013-11-02T16:26:33Z" },
                "usuario": "Bulkan",
                "usuario_id": 2700
            },
            {
                "decripcion": "Yeah man, tried that before to no avail, had CORS_ORIGIN_ALLOW_ALL = True, CORS_ORIGIN_WHITELIST = (         'localhost' ) and CORS_ALLOW_CREDENTIALS = True  I get these headers: Access-Control-Allow-Credentials: true Access-Control-Allow-Origin: http://localhost:3000/ Access-Control-Allow-Methods: POST,GET,OPTIONS,PUT,DELETE Content-Type: application/json",
                "fecha": { "$date" : "2013-11-02T16:36:22Z" },
                "usuario": "ixaxaar",
                "usuario_id": 2699
            },
            {
                "decripcion": "After reading this documentation: github.com/expressjs/corsuse   i using this config:  app.use(cors({credentials: true, origin: 'localhost:3001'}));  is working for me.",
                "fecha": { "$date" : "2016-02-05T08:38:41Z" },
                "usuario": "allel",
                "usuario_id": 2701
            }
        ],
        "usuario": "Bulkan",
        "usuario_id": 2700
    },
    {
        "_id": 1525,
        "fecha": { "$date" : "2017-12-24T11:38:46Z" },
        "decripcion": "\ntry it:\n\nconst cors = require('cors')\n\nconst corsOptions = {\n    origin: 'http://localhost:4200',\n    credentials: true,\n\n}\napp.use(cors(corsOptions));\n\n    ",
        "votes": 18,
        "comentarios": [
            {
                "decripcion": "This actually worked for me.",
                "fecha": { "$date" : "2021-01-28T23:02:23Z" },
                "usuario": "Brandon Austin",
                "usuario_id": 2702
            }
        ],
        "usuario": "Iron shield",
        "usuario_id": 2703
    },
    {
        "_id": 1526,
        "fecha": { "$date" : "2019-05-17T15:22:49Z" },
        "decripcion": "\nIf you want to allow all origins and keep credentials true, this worked for me:\n\napp.use(cors({\n  origin: function(origin, callback){\n    return callback(null, true);\n  },\n  optionsSuccessStatus: 200,\n  credentials: true\n}));\n\n    ",
        "votes": 13,
        "comentarios": [
            {
                "decripcion": "@TSlegaitis Haha yeah that's why it works for all origins but keeps credentials.  I wouldn't recommend it for security but it does work.",
                "fecha": { "$date" : "2020-02-15T16:28:38Z" },
                "usuario": "Squirrl",
                "usuario_id": 1751
            }
        ],
        "usuario": "Squirrl",
        "usuario_id": 1751
    },
    {
        "_id": 1527,
        "fecha": { "$date" : "2019-08-26T09:57:27Z" },
        "decripcion": "\nThis works for me in development but I can't advise that in production, it's just a different way of getting the job done that hasn't been mentioned yet but probably not the best. Anyway here goes:\n\nYou can get the origin from the request, then use that in the response header. Here's how it looks in express:\n\napp.use(function(req, res, next) {\n  res.header('Access-Control-Allow-Origin', req.header('origin') );\n  next();\n});\n\n\nI don't know what that would look like with your python setup but that should be easy to translate.\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "Mozilla Dev Docs expand on the idea of changing the allowed origin to the one from the request. It is suggested to add a 'Vary: Origin' HTTP response header and whitelist allowed domains.",
                "fecha": { "$date" : "2020-06-10T16:04:09Z" },
                "usuario": "Ramzis",
                "usuario_id": 2704
            }
        ],
        "usuario": "Renaud",
        "usuario_id": 2705
    },
    {
        "_id": 1528,
        "fecha": { "$date" : "2020-04-12T17:53:05Z" },
        "decripcion": "\n(Edit) The previously recomended add-on is not available any longer, you may try this other one\n\n\n\nFor development purposes in Chrome, installing\nthis add on will get rid of that specific error:\n\nAccess to XMLHttpRequest at 'http://192.168.1.42:8080/sockjs-node/info?t=1546163388687' \nfrom origin 'http://localhost:8080' has been blocked by CORS policy: The value of the \n'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' \nwhen the request's credentials mode is 'include'. The credentials mode of requests \ninitiated by the XMLHttpRequest is controlled by the withCredentials attribute.\n\n\nAfter installing, make sure you add your url pattern to the Intercepted URLs by clicking on the AddOn's (CORS, green or red) icon and filling the appropriate textbox. An example URL pattern to add here that will work with http://localhost:8080 would be: *://*\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "I got it just after installing it, any ideas?",
                "fecha": { "$date" : "2019-06-05T07:26:37Z" },
                "usuario": "Jalil",
                "usuario_id": 2706
            },
            {
                "decripcion": "It worked for me. Warning if you have other similar add-ons you have to uninstall it before try this one.",
                "fecha": { "$date" : "2019-09-13T12:55:42Z" },
                "usuario": "FilippoG",
                "usuario_id": 2707
            },
            {
                "decripcion": "please fix the broken link",
                "fecha": { "$date" : "2020-04-08T23:19:31Z" },
                "usuario": "Luk Aron",
                "usuario_id": 2708
            },
            {
                "decripcion": "Seems like the original add on was removed, I added a new recommendation as an (Edit) at the top",
                "fecha": { "$date" : "2020-04-12T17:54:04Z" },
                "usuario": "eriel marimon",
                "usuario_id": 2709
            }
        ],
        "usuario": "eriel marimon",
        "usuario_id": 2709
    },
    {
        "_id": 1529,
        "fecha": { "$date" : "2020-06-30T12:49:45Z" },
        "decripcion": "\nHad this problem with angular, using an auth interceptor to edit the header, before the request gets executed. We used an api-token for authentification, so i had credentials enabled. now, it seems it is not neccessary/allowed anymore\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    req = req.clone({\n      //withCredentials: true, //not needed anymore\n      setHeaders: {\n        'Content-Type' : 'application/json',\n        'API-TOKEN' : 'xxx'\n      },\n    });\n    \n    return next.handle(req);\n  }\n\nBesides that, there is no side effects right now.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "connectedMind",
        "usuario_id": 2710
    },
    {
        "_id": 1530,
        "fecha": { "$date" : "2021-09-09T11:24:39Z" },
        "decripcion": "\nNote: This solution is for testing purposes only, it should not be taken as a final solution.\nA quick and simple workaround is for you to disable CORS by including the parameter below in the browser shortcut properties:\n--disable-web-security --user-data-dir=\"[c:]\"\nExemple:\n\nGood luck!\n    ",
        "votes": -3,
        "comentarios": [],
        "usuario": "Bruno Garcia",
        "usuario_id": 2711
    },
    {
        "_id": 1531,
        "fecha": { "$date" : "2017-05-23T12:02:58Z" },
        "decripcion": "\nPhew, Django documentation really does not have good example about this. I spent over 2 hours to dig up all the pieces to understand how this works. With that knowledge I implemented a project that makes possible to upload files and show them as list. To download  source for the project, visit https://github.com/axelpale/minimal-django-file-upload-example or clone it:\n\n> git clone https://github.com/axelpale/minimal-django-file-upload-example.git\n\n\nUpdate 2013-01-30: The source at GitHub has also implementation for Django 1.4 in addition to 1.3. Even though there is few changes the following tutorial is also useful for 1.4.\n\nUpdate 2013-05-10: Implementation for Django 1.5 at GitHub. Minor changes in redirection in urls.py and usage of url template tag in list.html. Thanks to hubert3 for the effort.\n\nUpdate 2013-12-07: Django 1.6 supported at GitHub. One import changed in myapp/urls.py. Thanks goes to Arthedian.\n\nUpdate 2015-03-17: Django 1.7 supported at GitHub, thanks to aronysidoro.\n\nUpdate 2015-09-04: Django 1.8 supported at GitHub, thanks to nerogit.\n\nUpdate 2016-07-03: Django 1.9 supported at GitHub, thanks to daavve and nerogit\n\nProject tree\n\nA basic Django 1.3 project with single app and media/ directory for uploads. \n\nminimal-django-file-upload-example/\n    src/\n        myproject/\n            database/\n                sqlite.db\n            media/\n            myapp/\n                templates/\n                    myapp/\n                        list.html\n                forms.py\n                models.py\n                urls.py\n                views.py\n            __init__.py\n            manage.py\n            settings.py\n            urls.py\n\n\n1. Settings: myproject/settings.py\n\nTo upload and serve files, you need to specify where Django stores uploaded files and from what URL Django serves them. MEDIA_ROOT and MEDIA_URL are in settings.py by default but they are empty. See the first lines in Django Managing Files for details. Remember also set the database and add myapp to INSTALLED_APPS\n\n...\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(__file__))\n...\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'database.sqlite3'),\n        'USER': '',\n        'PASSWORD': '',\n        'HOST': '',\n        'PORT': '',\n    }\n}\n...\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n...\nINSTALLED_APPS = (\n    ...\n    'myapp',\n)\n\n\n2. Model: myproject/myapp/models.py\n\nNext you need a model with a FileField. This particular field stores files e.g. to media/documents/2011/12/24/ based on current date and MEDIA_ROOT. See FileField reference.\n\n# -*- coding: utf-8 -*-\nfrom django.db import models\n\nclass Document(models.Model):\n    docfile = models.FileField(upload_to='documents/%Y/%m/%d')\n\n\n3. Form: myproject/myapp/forms.py\n\nTo handle upload nicely, you need a form. This form has only one field but that is enough. See Form FileField reference for details.\n\n# -*- coding: utf-8 -*-\nfrom django import forms\n\nclass DocumentForm(forms.Form):\n    docfile = forms.FileField(\n        label='Select a file',\n        help_text='max. 42 megabytes'\n    )\n\n\n4. View: myproject/myapp/views.py\n\nA view where all the magic happens. Pay attention how request.FILES are handled. For me, it was really hard to spot the fact that request.FILES['docfile'] can be saved to models.FileField just like that. The model's save() handles the storing of the file to the filesystem automatically.\n\n# -*- coding: utf-8 -*-\nfrom django.shortcuts import render_to_response\nfrom django.template import RequestContext\nfrom django.http import HttpResponseRedirect\nfrom django.core.urlresolvers import reverse\n\nfrom myproject.myapp.models import Document\nfrom myproject.myapp.forms import DocumentForm\n\ndef list(request):\n    # Handle file upload\n    if request.method == 'POST':\n        form = DocumentForm(request.POST, request.FILES)\n        if form.is_valid():\n            newdoc = Document(docfile = request.FILES['docfile'])\n            newdoc.save()\n\n            # Redirect to the document list after POST\n            return HttpResponseRedirect(reverse('myapp.views.list'))\n    else:\n        form = DocumentForm() # A empty, unbound form\n\n    # Load documents for the list page\n    documents = Document.objects.all()\n\n    # Render list page with the documents and the form\n    return render_to_response(\n        'myapp/list.html',\n        {'documents': documents, 'form': form},\n        context_instance=RequestContext(request)\n    )\n\n\n5. Project URLs: myproject/urls.py\n\nDjango does not serve MEDIA_ROOT by default. That would be dangerous in production environment. But in development stage, we could cut short. Pay attention to the last line. That line enables Django to serve files from MEDIA_URL. This works only in developement stage.\n\nSee django.conf.urls.static.static reference for details. See also this discussion about serving media files.\n\n# -*- coding: utf-8 -*-\nfrom django.conf.urls import patterns, include, url\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = patterns('',\n    (r'^', include('myapp.urls')),\n) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n\n\n6. App URLs: myproject/myapp/urls.py\n\nTo make the view accessible, you must specify urls for it. Nothing special here.\n\n# -*- coding: utf-8 -*-\nfrom django.conf.urls import patterns, url\n\nurlpatterns = patterns('myapp.views',\n    url(r'^list/$', 'list', name='list'),\n)\n\n\n7. Template: myproject/myapp/templates/myapp/list.html\n\nThe last part: template for the list and the upload form below it. The form must have enctype-attribute set to \"multipart/form-data\" and method set to \"post\" to make upload to Django possible. See File Uploads documentation for details.\n\nThe FileField has many attributes that can be used in templates. E.g. {{ document.docfile.url }} and {{ document.docfile.name }} as in the template. See more about these in Using files in models article and The File object documentation.\n\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Minimal Django File Upload Example</title>   \n    </head>\n    <body>\n    <!-- List of uploaded documents -->\n    {% if documents %}\n        <ul>\n        {% for document in documents %}\n            <li><a href=\"{{ document.docfile.url }}\">{{ document.docfile.name }}</a></li>\n        {% endfor %}\n        </ul>\n    {% else %}\n        <p>No documents.</p>\n    {% endif %}\n\n        <!-- Upload form. Note enctype attribute! -->\n        <form action=\"{% url 'list' %}\" method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            <p>{{ form.non_field_errors }}</p>\n            <p>{{ form.docfile.label_tag }} {{ form.docfile.help_text }}</p>\n            <p>\n                {{ form.docfile.errors }}\n                {{ form.docfile }}\n            </p>\n            <p><input type=\"submit\" value=\"Upload\" /></p>\n        </form>\n    </body>\n</html> \n\n\n8. Initialize\n\nJust run syncdb and runserver.\n\n> cd myproject\n> python manage.py syncdb\n> python manage.py runserver\n\n\nResults\n\nFinally, everything is ready. On default Django developement environment the list of uploaded documents can be seen at localhost:8000/list/. Today the files are uploaded to /path/to/myproject/media/documents/2011/12/17/ and can be opened from the list.\n\nI hope this answer will help someone as much as it would have helped me.\n    ",
        "votes": 1326,
        "comentarios": [
            {
                "decripcion": "Found the location in django docs that shows file uploads.  The example in this answer is excellent, but the info in the django docs will be kept up to date with new releases.  docs.djangoproject.com/en/dev/topics/http/file-uploads",
                "fecha": { "$date" : "2012-11-29T08:20:41Z" },
                "usuario": "TaiwanGrapefruitTea",
                "usuario_id": 2715
            },
            {
                "decripcion": "The example doesn't work for Django \"1.5\". In the HTML {% url list %} becomes {% url \"list\" %}.",
                "fecha": { "$date" : "2013-06-13T09:52:47Z" },
                "usuario": "Matthieu Riegler",
                "usuario_id": 2716
            },
            {
                "decripcion": "Thank you very much . It really works for me. However, for the upcoming viewers, you should check the code in gitHub for the best compatibility with new versions of Python and Django. For example, the the views.py, render_to_response() should be replaced with render(request,...,) to avoid the CSRF error. Cheers.",
                "fecha": { "$date" : "2016-07-28T22:22:26Z" },
                "usuario": "Huy Than",
                "usuario_id": 2717
            },
            {
                "decripcion": "it is possible doing this without FORMS?",
                "fecha": { "$date" : "2016-09-08T07:13:47Z" },
                "usuario": "Roel",
                "usuario_id": 2718
            },
            {
                "decripcion": "Can the file be .zip, or other compressed files?",
                "fecha": { "$date" : "2017-11-27T08:34:06Z" },
                "usuario": "qg_java_17137",
                "usuario_id": 2719
            }
        ],
        "usuario": "Akseli Pal\u00e9n",
        "usuario_id": 2720
    },
    {
        "_id": 1532,
        "fecha": { "$date" : "2011-05-03T15:25:48Z" },
        "decripcion": "\nGenerally speaking when you are trying to 'just get a working example' it is best to 'just start writing code'. There is no code here to help you with, so it makes answering the question a lot more work for us.\n\nIf you want to grab a file, you need something like this in an html file somewhere:\n\n<form method=\"post\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"myfile\" />\n    <input type=\"submit\" name=\"submit\" value=\"Upload\" />\n</form>\n\n\nThat will give you the browse button, an upload button to start the action (submit the form) and note the enctype so Django knows to give you request.FILES\n\nIn a view somewhere you can access the file with\n\ndef myview(request):\n    request.FILES['myfile'] # this is my file\n\n\nThere is a huge amount of information in the file upload docs\n\nI recommend you read the page thoroughly and just start writing code - then come back with examples and stack traces when it doesn't work.\n    ",
        "votes": 84,
        "comentarios": [
            {
                "decripcion": "Thanks Henry. Actually I've read the docs and have written some code but since the docs has some gaps (for example \"from somewhere import handle_uploaded_file\") and my code was flawed, thought that it would be much better if I could start from a working example.",
                "fecha": { "$date" : "2011-05-03T15:32:10Z" },
                "usuario": "qliq",
                "usuario_id": 2721
            },
            {
                "decripcion": "Agree with qliq. A simple working example is the most efficient way to get newbies going, not docs",
                "fecha": { "$date" : "2012-10-29T07:42:21Z" },
                "usuario": "Philip007",
                "usuario_id": 2722
            },
            {
                "decripcion": "The enctype=\"multipart/form-data\" what I needed to make this work, thanks!",
                "fecha": { "$date" : "2013-01-09T20:25:13Z" },
                "usuario": "john-charles",
                "usuario_id": 2723
            },
            {
                "decripcion": "Just don't miss the  {% csrf_token %} within the form tags.",
                "fecha": { "$date" : "2015-11-15T22:28:59Z" },
                "usuario": "jonincanada",
                "usuario_id": 2724
            },
            {
                "decripcion": "it is possible doing this WITHOUT FORMS FROM FORMS.PY?",
                "fecha": { "$date" : "2016-09-08T05:26:39Z" },
                "usuario": "Roel",
                "usuario_id": 2718
            }
        ],
        "usuario": "Henry",
        "usuario_id": 2725
    },
    {
        "_id": 1533,
        "fecha": { "$date" : "2020-04-20T17:02:29Z" },
        "decripcion": "\nDemo\n\nSee the github repo, works with Django 3\n\nA minimal Django file upload example\n\n1. Create a django project\n\nRun startproject::\n\n$ django-admin.py startproject sample\n\n\nnow a folder(sample) is created.\n\n2. create an app\n\nCreate an app::\n\n$ cd sample\n$ python manage.py startapp uploader\n\n\nNow a folder(uploader) with these files are created::\n\nuploader/\n  __init__.py\n  admin.py\n  app.py\n  models.py\n  tests.py\n  views.py\n  migrations/\n    __init__.py\n\n\n3. Update settings.py\n\nOn sample/settings.py add 'uploader' to INSTALLED_APPS and add MEDIA_ROOT and MEDIA_URL, ie::\n\nINSTALLED_APPS = [\n    'uploader',\n    ...<other apps>...      \n]\n\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n\n\n4. Update urls.py\n\nin sample/urls.py add::\n\n...<other imports>...\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom uploader import views as uploader_views\n\nurlpatterns = [\n    ...<other url patterns>...\n    path('', uploader_views.UploadView.as_view(), name='fileupload'),\n]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n\n\n5. Update models.py\n\nupdate uploader/models.py::\n\nfrom django.db import models\nclass Upload(models.Model):\n    upload_file = models.FileField()    \n    upload_date = models.DateTimeField(auto_now_add =True)\n\n\n6. Update views.py\n\nupdate uploader/views.py::\n\nfrom django.views.generic.edit import CreateView\nfrom django.urls import reverse_lazy\nfrom .models import Upload\nclass UploadView(CreateView):\n    model = Upload\n    fields = ['upload_file', ]\n    success_url = reverse_lazy('fileupload')\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['documents'] = Upload.objects.all()\n        return context\n\n\n7. create templates\n\nCreate a folder sample/uploader/templates/uploader\n\nCreate a file upload_form.html ie sample/uploader/templates/uploader/upload_form.html::\n\n<div style=\"padding:40px;margin:40px;border:1px solid #ccc\">\n    <h1>Django File Upload</h1>\n    <form method=\"post\" enctype=\"multipart/form-data\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button type=\"submit\">Submit</button>\n    </form><hr>\n    <ul>\n    {% for document in documents %}\n        <li>\n            <a href=\"{{ document.upload_file.url }}\">{{ document.upload_file.name }}</a>\n            <small>({{ document.upload_file.size|filesizeformat }}) - {{document.upload_date}}</small>\n        </li>\n    {% endfor %}\n    </ul>\n</div>\n\n\n8. Syncronize database\n\nSyncronize database and runserver::\n\n$ python manage.py makemigrations\n$ python manage.py migrate\n$ python manage.py runserver\n\n\nvisit http://localhost:8000/\n    ",
        "votes": 83,
        "comentarios": [
            {
                "decripcion": "perfect except for the last line - should be localhost.com:8000/upload>  This worked for django 1.6 and Python 3.3.",
                "fecha": { "$date" : "2014-06-10T15:02:17Z" },
                "usuario": "Steve",
                "usuario_id": 291
            },
            {
                "decripcion": "+1 for reusable django app design pattern",
                "fecha": { "$date" : "2014-06-17T15:22:23Z" },
                "usuario": "Marcel",
                "usuario_id": 2726
            },
            {
                "decripcion": "Akseli used a FileField while suhail used an ImageField, could someone please explain the choices?",
                "fecha": { "$date" : "2015-11-15T20:06:29Z" },
                "usuario": "davidtgq",
                "usuario_id": 2727
            },
            {
                "decripcion": "@dtgq I updated the answer to use with FileField.  ImageField must for image only upload.   the update will work with Django 1.11.",
                "fecha": { "$date" : "2017-08-11T16:11:02Z" },
                "usuario": "suhailvs",
                "usuario_id": 2728
            },
            {
                "decripcion": "tested on Django 2.0 and worked perfectly",
                "fecha": { "$date" : "2018-04-01T21:41:26Z" },
                "usuario": "diek",
                "usuario_id": 2729
            }
        ],
        "usuario": "suhailvs",
        "usuario_id": 2728
    },
    {
        "_id": 1534,
        "fecha": { "$date" : "2013-04-07T20:28:08Z" },
        "decripcion": "\nI must say I find the documentation at django confusing.\nAlso for the simplest example why are forms being mentioned?\nThe example I got to work in the views.py is :-\n\nfor key, file in request.FILES.items():\n    path = file.name\n    dest = open(path, 'w')\n    if file.multiple_chunks:\n        for c in file.chunks():\n            dest.write(c)\n    else:\n        dest.write(file.read())\n    dest.close()\n\n\nThe html file looks like the code below, though this example only uploads one file and the code to save the files handles many :-\n\n<form action=\"/upload_file/\" method=\"post\" enctype=\"multipart/form-data\">{% csrf_token %}\n<label for=\"file\">Filename:</label>\n<input type=\"file\" name=\"file\" id=\"file\" />\n<br />\n<input type=\"submit\" name=\"submit\" value=\"Submit\" />\n</form>\n\n\nThese examples are not my code, they have been optained from two other examples I found.\nI am a relative beginner to django so it is very likely I am missing some key point.\n    ",
        "votes": 32,
        "comentarios": [
            {
                "decripcion": "+1 for not using a FileField and a model.Form. For beginners (and for trivial tasks), manual processing of uploaded files like shown above is less confusing.",
                "fecha": { "$date" : "2017-08-25T18:42:31Z" },
                "usuario": "AneesAhmed777",
                "usuario_id": 2730
            },
            {
                "decripcion": "dest = open(path, 'wb') when file write with bytes",
                "fecha": { "$date" : "2020-03-09T19:29:40Z" },
                "usuario": "Bipul Roy",
                "usuario_id": 2731
            }
        ],
        "usuario": "jimscafe",
        "usuario_id": 2732
    },
    {
        "_id": 1535,
        "fecha": { "$date" : "2014-11-10T02:16:55Z" },
        "decripcion": "\nI also had the similar requirement. Most of the examples on net are asking to create models and create forms which I did not wanna use. Here is my final code.\n\nif request.method == 'POST':\n    file1 = request.FILES['file']\n    contentOfFile = file1.read()\n    if file1:\n        return render(request, 'blogapp/Statistics.html', {'file': file1, 'contentOfFile': contentOfFile})\n\n\nAnd in HTML to upload I wrote:\n\n{% block content %}\n    <h1>File content</h1>\n    <form action=\"{% url 'blogapp:uploadComplete'%}\" method=\"post\" enctype=\"multipart/form-data\">\n         {% csrf_token %}\n        <input id=\"uploadbutton\" type=\"file\" value=\"Browse\" name=\"file\" accept=\"text/csv\" />\n        <input type=\"submit\" value=\"Upload\" />\n    </form>\n    {% endblock %}\n\n\nFollowing is the HTML which displays content of file:\n\n{% block content %}\n    <h3>File uploaded successfully</h3>\n    {{file.name}}\n    </br>content = {{contentOfFile}}\n{% endblock %}\n\n    ",
        "votes": 24,
        "comentarios": [
            {
                "decripcion": "good because sometimes one just wants to use the contents of the file not save the upload...",
                "fecha": { "$date" : "2016-12-21T00:37:35Z" },
                "usuario": "JWL",
                "usuario_id": 2733
            }
        ],
        "usuario": "chetan pawar",
        "usuario_id": 2734
    },
    {
        "_id": 1536,
        "fecha": { "$date" : "2017-05-23T11:47:29Z" },
        "decripcion": "\nExtending on Henry's example:\n\nimport tempfile\nimport shutil\n\nFILE_UPLOAD_DIR = '/home/imran/uploads'\n\ndef handle_uploaded_file(source):\n    fd, filepath = tempfile.mkstemp(prefix=source.name, dir=FILE_UPLOAD_DIR)\n    with open(filepath, 'wb') as dest:\n        shutil.copyfileobj(source, dest)\n    return filepath\n\n\nYou can call this handle_uploaded_file function from your view with the uploaded file object. This will save the file with a unique name (prefixed with filename of the original uploaded file) in filesystem and return the full path of saved file. You can save the path in database, and do something with the file later.\n    ",
        "votes": 17,
        "comentarios": [
            {
                "decripcion": "Imran, I tried your code on my view but got this error: 'WSGIRequest' object has no attribute 'name'.",
                "fecha": { "$date" : "2011-05-03T16:14:41Z" },
                "usuario": "qliq",
                "usuario_id": 2721
            },
            {
                "decripcion": "Pass the uploaded file object (request.FILES['myfile']) to handle_uploaded_file, not the request itself.",
                "fecha": { "$date" : "2011-05-03T16:23:30Z" },
                "usuario": "Imran",
                "usuario_id": 2735
            },
            {
                "decripcion": "Could I save it directly to the database ? stackoverflow.com/questions/24705246/\u2026",
                "fecha": { "$date" : "2014-07-12T13:41:03Z" },
                "usuario": "AlexandruC",
                "usuario_id": 2736
            },
            {
                "decripcion": "By using prefix=source.name it added extra characters at the end of file, messing up with file extension. E.g. upload.csv got changed to upload.csv5334. Changing it to suffix=source.name fixed it for me.",
                "fecha": { "$date" : "2016-08-15T07:46:13Z" },
                "usuario": "Tahreem Iqbal",
                "usuario_id": 2737
            }
        ],
        "usuario": "Imran",
        "usuario_id": 2735
    },
    {
        "_id": 1537,
        "fecha": { "$date" : "2017-01-25T04:40:16Z" },
        "decripcion": "\nHere it may helps you:\n create a file field in your models.py\n\nFor uploading the file(in your admin.py):\n\ndef save_model(self, request, obj, form, change):\n    url = \"http://img.youtube.com/vi/%s/hqdefault.jpg\" %(obj.video)\n    url = str(url)\n\n    if url:\n        temp_img = NamedTemporaryFile(delete=True)\n        temp_img.write(urllib2.urlopen(url).read())\n        temp_img.flush()\n        filename_img = urlparse(url).path.split('/')[-1]\n        obj.image.save(filename_img,File(temp_img)\n\n\nand use that field in your template also.\n    ",
        "votes": 13,
        "comentarios": [
            {
                "decripcion": "This is useful, when you have to manually temper with files you want to save. If so, you may also need this section: docs.djangoproject.com/en/dev/topics/files/#the-file-object",
                "fecha": { "$date" : "2014-07-17T22:25:32Z" },
                "usuario": "kecske",
                "usuario_id": 2738
            },
            {
                "decripcion": "this is very useful, and it works. I have a question: how does django that the view is associated to the upload_form.html file? I don't see anything joining them...",
                "fecha": { "$date" : "2020-08-20T20:48:03Z" },
                "usuario": "Escachator",
                "usuario_id": 2739
            },
            {
                "decripcion": "got it... explained here: docs.djangoproject.com/en/3.1/ref/class-based-views/\u2026",
                "fecha": { "$date" : "2020-08-20T20:55:04Z" },
                "usuario": "Escachator",
                "usuario_id": 2739
            }
        ],
        "usuario": "Vijesh Venugopal",
        "usuario_id": 2740
    },
    {
        "_id": 1538,
        "fecha": { "$date" : "2015-11-30T13:02:20Z" },
        "decripcion": "\nYou can refer to server examples in Fine Uploader, which has django version.\nhttps://github.com/FineUploader/server-examples/tree/master/python/django-fine-uploader\n\nIt's very elegant and most important of all, it provides featured js lib. Template is not included in server-examples, but you can find demo on its website.\nFine Uploader: http://fineuploader.com/demos.html\n\ndjango-fine-uploader\n\nviews.py\n\nUploadView dispatches post and delete request to respective handlers. \n\nclass UploadView(View):\n\n    @csrf_exempt\n    def dispatch(self, *args, **kwargs):\n        return super(UploadView, self).dispatch(*args, **kwargs)\n\n    def post(self, request, *args, **kwargs):\n        \"\"\"A POST request. Validate the form and then handle the upload\n        based ont the POSTed data. Does not handle extra parameters yet.\n        \"\"\"\n        form = UploadFileForm(request.POST, request.FILES)\n        if form.is_valid():\n            handle_upload(request.FILES['qqfile'], form.cleaned_data)\n            return make_response(content=json.dumps({ 'success': True }))\n        else:\n            return make_response(status=400,\n                content=json.dumps({\n                    'success': False,\n                    'error': '%s' % repr(form.errors)\n                }))\n\n    def delete(self, request, *args, **kwargs):\n        \"\"\"A DELETE request. If found, deletes a file with the corresponding\n        UUID from the server's filesystem.\n        \"\"\"\n        qquuid = kwargs.get('qquuid', '')\n        if qquuid:\n            try:\n                handle_deleted_file(qquuid)\n                return make_response(content=json.dumps({ 'success': True }))\n            except Exception, e:\n                return make_response(status=400,\n                    content=json.dumps({\n                        'success': False,\n                        'error': '%s' % repr(e)\n                    }))\n        return make_response(status=404,\n            content=json.dumps({\n                'success': False,\n                'error': 'File not present'\n            }))\n\n\nforms.py\n\nclass UploadFileForm(forms.Form):\n\n    \"\"\" This form represents a basic request from Fine Uploader.\n    The required fields will **always** be sent, the other fields are optional\n    based on your setup.\n    Edit this if you want to add custom parameters in the body of the POST\n    request.\n    \"\"\"\n    qqfile = forms.FileField()\n    qquuid = forms.CharField()\n    qqfilename = forms.CharField()\n    qqpartindex = forms.IntegerField(required=False)\n    qqchunksize = forms.IntegerField(required=False)\n    qqpartbyteoffset = forms.IntegerField(required=False)\n    qqtotalfilesize = forms.IntegerField(required=False)\n    qqtotalparts = forms.IntegerField(required=False)\n\n    ",
        "votes": 11,
        "comentarios": [],
        "usuario": "Jiawei Dai",
        "usuario_id": 2741
    },
    {
        "_id": 1539,
        "fecha": { "$date" : "2014-09-08T11:14:21Z" },
        "decripcion": "\nNot sure if there any disadvantages to this approach but even more minimal, in views.py:\n\nentry = form.save()\n\n# save uploaded file\nif request.FILES['myfile']:\n    entry.myfile.save(request.FILES['myfile']._name, request.FILES['myfile'], True)\n\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "PhoebeB",
        "usuario_id": 2659
    },
    {
        "_id": 1540,
        "fecha": { "$date" : "2014-05-14T06:58:03Z" },
        "decripcion": "\nI faced the similar problem, and solved by django admin site.\n\n# models\nclass Document(models.Model):\n    docfile = models.FileField(upload_to='documents/Temp/%Y/%m/%d')\n\n    def doc_name(self):\n        return self.docfile.name.split('/')[-1] # only the name, not full path\n\n# admin\nfrom myapp.models import Document\nclass DocumentAdmin(admin.ModelAdmin):\n    list_display = ('doc_name',)\nadmin.site.register(Document, DocumentAdmin)\n\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "[enter link description here][1]   [enter link description here][2]     [1]: youtu.be/0tNZB3dyopY   [2]: youtu.be/klhMYMc3PlY",
                "fecha": { "$date" : "2019-12-12T14:12:52Z" },
                "usuario": "uda123",
                "usuario_id": 2742
            }
        ],
        "usuario": "hlpmee",
        "usuario_id": 2743
    },
    {
        "_id": 1541,
        "fecha": { "$date" : "2019-08-05T06:15:32Z" },
        "decripcion": "\nOne solution that I have employed is to do this:\n\n1) Create a custom management command, e.g. \n\npython manage.py my_cool_command\n\n\n2) Use cron (on Linux) or at (on Windows) to run my command at the required times.\n\nThis is a simple solution that doesn't require installing a heavy AMQP stack. However there are nice advantages to using something like Celery, mentioned in the other answers. In particular, with Celery it is nice to not have to spread your application logic out into crontab files. However the cron solution works quite nicely for a small to medium sized application and where you don't want a lot of external dependencies.\n\nEDIT:\n\nIn later version of windows the at command is deprecated for Windows 8, Server 2012 and above. You can use schtasks.exe for same use.\n\n**** UPDATE ****\nThis the new link of django doc for writing the custom management command\n    ",
        "votes": 388,
        "comentarios": [
            {
                "decripcion": "Is this a way to do this without external services but using an only running django framework process?",
                "fecha": { "$date" : "2011-10-14T13:57:45Z" },
                "usuario": "sergzach",
                "usuario_id": 476
            },
            {
                "decripcion": "@Brian_Neal django_cron application.",
                "fecha": { "$date" : "2011-12-04T22:13:01Z" },
                "usuario": "sergzach",
                "usuario_id": 476
            },
            {
                "decripcion": "Please help me understand how will I run a management command in a virtual environment using cron on the last day of every month.",
                "fecha": { "$date" : "2012-03-29T23:17:27Z" },
                "usuario": "mmrs151",
                "usuario_id": 2744
            },
            {
                "decripcion": "@sergzach I followed up on this comment and it turns out there are two packages with this name. The django-cron on Google Code and the django-cron on Github. They are slightly different but both interesting. Both allow you to define crons in a 'Djangonic' way. The first one is a bit older and aims to work without an external task (i.e. the cron). The second one on the other hand requires you to set a cron to run python manage.py runcrons which then runs all crons you have defined and registered.",
                "fecha": { "$date" : "2012-10-18T14:18:16Z" },
                "usuario": "driftcatcher",
                "usuario_id": 2745
            },
            {
                "decripcion": "@sergzach I am assuming you are referring to the first one, \"django-cron on Google Code\". You are right about that one. This is actually why I opt for the second one, \"django-cron on GitHub\", because it makes it so you have a simple crontab setup/management - only one crontab, referring to the management command - but since you are using a separate cron process you avoid this synchronization issue (as far as I can tell).",
                "fecha": { "$date" : "2012-10-18T15:26:58Z" },
                "usuario": "driftcatcher",
                "usuario_id": 2745
            }
        ],
        "usuario": "Brian Neal",
        "usuario_id": 2746
    },
    {
        "_id": 1542,
        "fecha": { "$date" : "2017-02-06T00:58:01Z" },
        "decripcion": "\nCelery is a distributed task queue, built on AMQP (RabbitMQ). It also handles periodic tasks in a cron-like fashion (see periodic tasks). Depending on your app, it might be worth a gander.\n\nCelery is pretty easy to set up with django (docs), and periodic tasks will actually skip missed tasks in case of a downtime. Celery also has built-in retry mechanisms, in case a task fails.\n    ",
        "votes": 162,
        "comentarios": [],
        "usuario": "dln",
        "usuario_id": 2747
    },
    {
        "_id": 1543,
        "fecha": { "$date" : "2020-01-26T10:54:51Z" },
        "decripcion": "\nWe've open-sourced what I think is a structured app. that Brian's solution above alludes too. We would love any / all feedback!\n\nhttps://github.com/tivix/django-cron\n\nIt comes with one management command:\n\n./manage.py runcrons\n\n\nThat does the job. Each cron is modeled as a class (so its all OO) and each cron runs at a different frequency and we make sure the same cron type doesn't run in parallel (in case crons themselves take longer time to run than their frequency!)\n    ",
        "votes": 54,
        "comentarios": [
            {
                "decripcion": "@chachra Sorry, I know this might be a dumb question, but will this work on windows through at or it was design specifically to work with cron?",
                "fecha": { "$date" : "2015-10-05T20:27:20Z" },
                "usuario": "Bruno Finger",
                "usuario_id": 2748
            },
            {
                "decripcion": "@BrunoFinger It uses python classes, so it's basically just python, no platform specific command needed.",
                "fecha": { "$date" : "2021-08-16T08:08:12Z" },
                "usuario": "Hagai Wild",
                "usuario_id": 2749
            }
        ],
        "usuario": "chachra",
        "usuario_id": 2750
    },
    {
        "_id": 1544,
        "fecha": { "$date" : "2016-09-11T00:04:44Z" },
        "decripcion": "\nIf you're using a standard POSIX OS, you use cron.\n\nIf you're using Windows, you use at.\n\nWrite a Django management command to \n\n\nFigure out what platform they're on.\nEither execute the appropriate \"AT\" command for your users, or update the crontab for your users.\n\n    ",
        "votes": 38,
        "comentarios": [
            {
                "decripcion": "I'd like to have it rolled-up into my django app if possible.",
                "fecha": { "$date" : "2009-02-21T20:20:32Z" },
                "usuario": "TM.",
                "usuario_id": 2751
            },
            {
                "decripcion": "@TM: What does \"rolled-up into my django app\" mean?   Please clarify your question.",
                "fecha": { "$date" : "2009-02-21T20:29:53Z" },
                "usuario": "S.Lott",
                "usuario_id": 416
            },
            {
                "decripcion": "I'd like people to be able to easily deploy this app without having to set up cron jobs themselves.",
                "fecha": { "$date" : "2009-02-21T20:55:07Z" },
                "usuario": "TM.",
                "usuario_id": 2751
            },
            {
                "decripcion": "You can always wrap the cron interface into your app.",
                "fecha": { "$date" : "2009-02-22T12:41:54Z" },
                "usuario": "monkut",
                "usuario_id": 2752
            },
            {
                "decripcion": "BSD, Mac, and any Unix-like OS have cron.",
                "fecha": { "$date" : "2016-09-03T16:26:33Z" },
                "usuario": "DylanYoung",
                "usuario_id": 2753
            }
        ],
        "usuario": "S.Lott",
        "usuario_id": 416
    },
    {
        "_id": 1545,
        "fecha": { "$date" : "2017-10-03T13:31:40Z" },
        "decripcion": "\nInteresting new pluggable Django app: django-chronograph\n\nYou only have to add one cron entry which acts as a timer, and you have a very nice Django admin interface into the scripts to run.\n    ",
        "votes": 23,
        "comentarios": [
            {
                "decripcion": "django-chronograph is unmaintained. It's fork is doing much better: github.com/chrisspen/django-chroniker",
                "fecha": { "$date" : "2019-04-12T13:30:24Z" },
                "usuario": "Menda",
                "usuario_id": 2754
            }
        ],
        "usuario": "Van Gale",
        "usuario_id": 2755
    },
    {
        "_id": 1546,
        "fecha": { "$date" : "2009-02-21T20:29:47Z" },
        "decripcion": "\nLook at Django Poor Man's Cron which is a Django app that makes use of spambots, search engine indexing robots and alike to run scheduled tasks in approximately regular intervals\n\nSee: http://code.google.com/p/django-poormanscron/\n    ",
        "votes": 16,
        "comentarios": [
            {
                "decripcion": "This also assumes that your Django app is accessible from the web, which would not be the case for deployments on LANs and VPNs.",
                "fecha": { "$date" : "2017-03-14T19:02:40Z" },
                "usuario": "TimH - Codidact",
                "usuario_id": 2756
            }
        ],
        "usuario": "user41767",
        "usuario_id": 2757
    },
    {
        "_id": 1547,
        "fecha": { "$date" : "2020-01-08T17:29:06Z" },
        "decripcion": "\nI had exactly the same requirement a while ago, and ended up solving it using APScheduler (User Guide)\n\nIt makes scheduling jobs super simple, and keeps it independent for from request-based execution of some code. Following is a simple example.\n\nfrom apscheduler.schedulers.background import BackgroundScheduler\n\nscheduler = BackgroundScheduler()\njob = None\n\ndef tick():\n    print('One tick!')\\\n\ndef start_job():\n    global job\n    job = scheduler.add_job(tick, 'interval', seconds=3600)\n    try:\n        scheduler.start()\n    except:\n        pass\n\n\nHope this helps somebody!\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "How do you include this in the Django app? Are you creating the scheduler in the wsgi.py? Or is this running as a completely separate process?",
                "fecha": { "$date" : "2020-08-13T01:15:30Z" },
                "usuario": "tbrlpld",
                "usuario_id": 2758
            },
            {
                "decripcion": "hey @PhoenixDev, how do i utilize this in a django project structure? where do i put this scheduler? would appreciate any sugestion.",
                "fecha": { "$date" : "2021-08-09T09:55:10Z" },
                "usuario": "P S Solanki",
                "usuario_id": 2759
            }
        ],
        "usuario": "PhoenixDev",
        "usuario_id": 2760
    },
    {
        "_id": 1548,
        "fecha": { "$date" : "2011-12-26T00:23:52Z" },
        "decripcion": "\nBrian Neal's suggestion of running management commands via cron works well, but if you're looking for something a little more robust (yet not as elaborate as Celery) I'd look into a library like Kronos:\n\n# app/cron.py\n\nimport kronos\n\n@kronos.register('0 * * * *')\ndef task():\n    pass\n\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "Johannes Gorset",
        "usuario_id": 2761
    },
    {
        "_id": 1549,
        "fecha": { "$date" : "2015-04-05T23:17:57Z" },
        "decripcion": "\nRabbitMQ and Celery have more features and task handling capabilities than Cron. If task failure isn't an issue, and you think you will handle broken tasks in the next call, then Cron is sufficient.\n\nCelery & AMQP will let you handle the broken task, and it will get executed again by another worker (Celery workers listen for the next task to work on), until the task's max_retries attribute is reached. You can even invoke tasks on failure, like logging the failure, or sending an email to the admin once the max_retries has been reached.\n\nAnd you can distribute Celery and AMQP servers when you need to scale your application.\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "Ravi Kumar",
        "usuario_id": 2762
    },
    {
        "_id": 1550,
        "fecha": { "$date" : "2019-09-19T22:10:39Z" },
        "decripcion": "\nDjango APScheduler for Scheduler Jobs. Advanced Python Scheduler (APScheduler) is a Python library that lets you schedule your Python code to be executed later, either just once or periodically. You can add new jobs or remove old ones on the fly as you please.\n\nnote: I'm the author of this library\n\nInstall APScheduler\n\npip install apscheduler\n\n\nView file function to call\n\nfile name: scheduler_jobs.py\n\ndef FirstCronTest():\n    print(\"\")\n    print(\"I am executed..!\")\n\n\nConfiguring the scheduler\n\nmake execute.py file and add the below codes\n\nfrom apscheduler.schedulers.background import BackgroundScheduler\nscheduler = BackgroundScheduler()\n\n\nYour written functions Here, the scheduler functions are written in scheduler_jobs\n\nimport scheduler_jobs \n\nscheduler.add_job(scheduler_jobs.FirstCronTest, 'interval', seconds=10)\nscheduler.start()\n\n\nLink the File for Execution\n\nNow, add the below line in the bottom of Url file\n\nimport execute\n\n\n\nYou can check the full code by executing\n[Click here] \nhttps://github.com/devchandansh/django-apscheduler\n\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "Chandan Sharma",
        "usuario_id": 2763
    },
    {
        "_id": 1551,
        "fecha": { "$date" : "2013-09-05T15:08:39Z" },
        "decripcion": "\nI personally use cron, but the Jobs Scheduling parts of django-extensions looks interesting.\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "Still depends on cron for triggering, just adds another abstraction layer in between.  Not sure it's worth it, personally.",
                "fecha": { "$date" : "2009-02-23T02:05:33Z" },
                "usuario": "Carl Meyer",
                "usuario_id": 2637
            },
            {
                "decripcion": "I agree, and after thinking about it I don't want request middleware slowing down my site (ala poormanscron above) when cron can do the job better anyway.",
                "fecha": { "$date" : "2009-02-23T05:31:30Z" },
                "usuario": "Van Gale",
                "usuario_id": 2755
            }
        ],
        "usuario": "Van Gale",
        "usuario_id": 2755
    },
    {
        "_id": 1552,
        "fecha": { "$date" : "2016-07-19T20:49:43Z" },
        "decripcion": "\nAlthough not part of Django, Airflow is a more recent project (as of 2016) that is useful for task management.\n\nAirflow is a workflow automation and scheduling system that can be used to author and manage data pipelines. A web-based UI provides the developer with a range of options for managing and viewing these pipelines.\n\nAirflow is written in Python and is built using Flask.\n\nAirflow was created by Maxime Beauchemin at Airbnb and open sourced in the spring of 2015.  It joined the Apache Software Foundation\u2019s incubation program in the winter of 2016.  Here is the Git project page and some addition background information.\n    ",
        "votes": 7,
        "comentarios": [],
        "usuario": "Alexander",
        "usuario_id": 9
    },
    {
        "_id": 1553,
        "fecha": { "$date" : "2010-01-07T23:26:10Z" },
        "decripcion": "\nPut the following at the top of your cron.py file:\n\n#!/usr/bin/python\nimport os, sys\nsys.path.append('/path/to/') # the parent directory of the project\nsys.path.append('/path/to/project') # these lines only needed if not on path\nos.environ['DJANGO_SETTINGS_MODULE'] = 'myproj.settings'\n\n# imports and code below\n\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Matt McCormick",
        "usuario_id": 2764
    },
    {
        "_id": 1554,
        "fecha": { "$date" : "2012-01-25T21:15:07Z" },
        "decripcion": "\nI just thought about this rather simple solution:\n\n\nDefine a view function do_work(req, param) like you would with any other view, with URL mapping, return a HttpResponse and so on.\nSet up a cron job with your timing preferences (or using AT or Scheduled Tasks in Windows) which runs curl http://localhost/your/mapped/url?param=value.\n\n\nYou can add parameters but just adding parameters to the URL.\n\nTell me what you guys think.\n\n[Update] I'm now using runjob command from django-extensions instead of curl.\n\nMy cron looks something like this:\n\n@hourly python /path/to/project/manage.py runjobs hourly\n\n\n... and so on for daily, monthly, etc'. You can also set it up to run a specific job.\n\nI find it more managable and a cleaner. Doesn't require mapping a URL to a view. Just define your job class and crontab and you're set.\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "only problem am sensing is un-necessarily adding load to the app and bandwidth just to run a background job that would better be launched \"internally\" and independent of the serving app. But other than that, this is a clever n more generic django-cron because it can even be invoked by agents external to the app's server!",
                "fecha": { "$date" : "2012-01-25T17:51:15Z" },
                "usuario": "JWL",
                "usuario_id": 2733
            },
            {
                "decripcion": "You are right, that's why I moved to using jobs from django-command-extensions. See my update to my answer.",
                "fecha": { "$date" : "2012-01-25T21:16:00Z" },
                "usuario": "Michael",
                "usuario_id": 303
            }
        ],
        "usuario": "Michael",
        "usuario_id": 303
    },
    {
        "_id": 1555,
        "fecha": { "$date" : "2011-05-17T03:09:13Z" },
        "decripcion": "\nafter the part of code,I can write anything just like my views.py :)\n\n#######################################\nimport os,sys\nsys.path.append('/home/administrator/development/store')\nos.environ['DJANGO_SETTINGS_MODULE']='store.settings'\nfrom django.core.management impor setup_environ\nfrom store import settings\nsetup_environ(settings)\n#######################################\n\n\nfrom\nhttp://www.cotellese.net/2007/09/27/running-external-scripts-against-django-models/\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "xiaohei",
        "usuario_id": 2765
    },
    {
        "_id": 1556,
        "fecha": { "$date" : "2018-08-04T05:50:24Z" },
        "decripcion": "\nYou should definitely check out django-q!\nIt requires no additional configuration and has quite possibly everything needed to handle any production issues on commercial projects.\n\nIt's actively developed and integrates very well with django, django ORM, mongo, redis. Here is my configuration:\n\n# django-q\n# -------------------------------------------------------------------------\n# See: http://django-q.readthedocs.io/en/latest/configure.html\nQ_CLUSTER = {\n    # Match recommended settings from docs.\n    'name': 'DjangoORM',\n    'workers': 4,\n    'queue_limit': 50,\n    'bulk': 10,\n    'orm': 'default',\n\n# Custom Settings\n# ---------------\n# Limit the amount of successful tasks saved to Django.\n'save_limit': 10000,\n\n# See https://github.com/Koed00/django-q/issues/110.\n'catch_up': False,\n\n# Number of seconds a worker can spend on a task before it's terminated.\n'timeout': 60 * 5,\n\n# Number of seconds a broker will wait for a cluster to finish a task before presenting it again. This needs to be\n# longer than `timeout`, otherwise the same task will be processed multiple times.\n'retry': 60 * 6,\n\n# Whether to force all async() calls to be run with sync=True (making them synchronous).\n'sync': False,\n\n# Redirect worker exceptions directly to Sentry error reporter.\n'error_reporter': {\n    'sentry': RAVEN_CONFIG,\n},\n}\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "saran3h",
        "usuario_id": 2766
    },
    {
        "_id": 1557,
        "fecha": { "$date" : "2017-11-11T16:38:15Z" },
        "decripcion": "\nA more modern solution (compared to Celery) is Django Q:\nhttps://django-q.readthedocs.io/en/latest/index.html\n\nIt has great documentation and is easy to grok. Windows support is lacking, because Windows does not support process forking. But it works fine if you create your dev environment using the Windows for Linux Subsystem. \n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "It seems you can still use it in a single-cluster mode on Windows",
                "fecha": { "$date" : "2018-09-04T15:02:35Z" },
                "usuario": "Yushin Washio",
                "usuario_id": 2767
            }
        ],
        "usuario": "devdrc",
        "usuario_id": 2768
    },
    {
        "_id": 1558,
        "fecha": { "$date" : "2011-09-02T18:41:33Z" },
        "decripcion": "\nI had something similar with your problem today.\n\nI didn't wanted to have it handled by the server trhough cron (and most of the libs were just cron helpers in the end).\n\nSo i've created a scheduling module and attached it to the init .\n\nIt's not the best approach, but it helps me to have all the code in a single place and with its execution related to the main app.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Fabricio Buzeto",
        "usuario_id": 2769
    },
    {
        "_id": 1559,
        "fecha": { "$date" : "2014-03-26T01:04:36Z" },
        "decripcion": "\nYes, the method above is so great. And I tried some of them. At last, I found a method like this:\n\n    from threading import Timer\n\n    def sync():\n\n        do something...\n\n        sync_timer = Timer(self.interval, sync, ())\n        sync_timer.start()\n\n\nJust like Recursive.\n\nOk, I hope this method can meet your requirement. :)\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "Will stop if your 'something' ever fails, so make sure you handle all exceptions within it. Even then, the web server might kill your thread at some point, might it not?",
                "fecha": { "$date" : "2014-11-14T16:53:57Z" },
                "usuario": "Lutz Prechelt",
                "usuario_id": 164
            }
        ],
        "usuario": "Ni Xiaoni",
        "usuario_id": 2770
    },
    {
        "_id": 1560,
        "fecha": { "$date" : "2015-08-31T22:23:38Z" },
        "decripcion": "\nI use celery to create my periodical tasks. First you need to install it as follows:\n\npip install django-celery\n\n\nDon't forget to register django-celery in your settings and then you could do something like this:\n\nfrom celery import task\nfrom celery.decorators import periodic_task\nfrom celery.task.schedules import crontab\nfrom celery.utils.log import get_task_logger\n@periodic_task(run_every=crontab(minute=\"0\", hour=\"23\"))\ndef do_every_midnight():\n #your code\n\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "I notice that this advice is out of date and you can integrate celery directly.  See pypi.python.org/pypi/django-celery for details.",
                "fecha": { "$date" : "2015-08-31T22:25:46Z" },
                "usuario": "Peter Brittain",
                "usuario_id": 2771
            },
            {
                "decripcion": "Celery docs say that this was a change in v3.1.  I've not tried it myself yet.",
                "fecha": { "$date" : "2015-09-01T16:02:26Z" },
                "usuario": "Peter Brittain",
                "usuario_id": 2771
            }
        ],
        "usuario": "David Felipe Camargo Polo",
        "usuario_id": 2772
    },
    {
        "_id": 1561,
        "fecha": { "$date" : "2017-01-11T19:34:28Z" },
        "decripcion": "\nI am not sure will this be useful for anyone, since I had to provide other users of the system to schedule the jobs, without giving them access to the actual server(windows) Task Scheduler, I created this reusable app.\n\nPlease note users have access to one shared folder on server where they can create required command/task/.bat file. This task then can be scheduled using this app.\n\nApp name is Django_Windows_Scheduler\n\nScreenShot:\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "just10minutes",
        "usuario_id": 2773
    },
    {
        "_id": 1562,
        "fecha": { "$date" : "2021-06-25T08:33:11Z" },
        "decripcion": "\nAnother option is simple-scheduler. It runs in the background hence can be easily integrated with any app. See examples here.\nExample for flask:\nif __name__ == \"__main__\":\n    try:\n        scheduled_jobs.run()\n        application.run(host='0.0.0.0', port=5000)\n    except Exception as e:\n        # log them\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Tanveer",
        "usuario_id": 2774
    },
    {
        "_id": 1563,
        "fecha": { "$date" : "2018-05-21T23:53:52Z" },
        "decripcion": "\nIf you want something more reliable than Celery, try TaskHawk which is built on top of AWS SQS/SNS.\n\nRefer: http://taskhawk.readthedocs.io\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Sri",
        "usuario_id": 2775
    },
    {
        "_id": 1564,
        "fecha": { "$date" : "2019-01-25T12:13:05Z" },
        "decripcion": "\nFor simple dockerized projects, I could not really see any existing answer fit.\n\nSo I wrote a very barebones solution without the need of external libraries or triggers, which runs on its own. No external os-cron needed, should work in every environment.\n\nIt works by adding a middleware: middleware.py  \n\nimport threading\n\ndef should_run(name, seconds_interval):\n    from application.models import CronJob\n    from django.utils.timezone import now\n\n    try:\n        c = CronJob.objects.get(name=name)\n    except CronJob.DoesNotExist:\n        CronJob(name=name, last_ran=now()).save()\n        return True\n\n    if (now() - c.last_ran).total_seconds() >= seconds_interval:\n        c.last_ran = now()\n        c.save()\n        return True\n\n    return False\n\n\nclass CronTask:\n    def __init__(self, name, seconds_interval, function):\n        self.name = name\n        self.seconds_interval = seconds_interval\n        self.function = function\n\n\ndef cron_worker(*_):\n    if not should_run(\"main\", 60):\n        return\n\n    # customize this part:\n    from application.models import Event\n    tasks = [\n        CronTask(\"events\", 60 * 30, Event.clean_stale_objects),\n        # ...\n    ]\n\n    for task in tasks:\n        if should_run(task.name, task.seconds_interval):\n            task.function()\n\n\ndef cron_middleware(get_response):\n\n    def middleware(request):\n        response = get_response(request)\n        threading.Thread(target=cron_worker).start()\n        return response\n\n    return middleware\n\n\nmodels/cron.py:\n\nfrom django.db import models\n\n\nclass CronJob(models.Model):\n    name = models.CharField(max_length=10, primary_key=True)\n    last_ran = models.DateTimeField()\n\n\nsettings.py:\n\nMIDDLEWARE = [\n    ...\n    'application.middleware.cron_middleware',\n    ...\n]\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "yspreen",
        "usuario_id": 2776
    },
    {
        "_id": 1565,
        "fecha": { "$date" : "2019-02-20T10:21:02Z" },
        "decripcion": "\nSimple way is to write a custom shell command see Django Documentation and execute it using a cronjob on linux. However i would highly recommend using a message broker like RabbitMQ coupled with celery. Maybe you can have a look at\nthis Tutorial\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Hamfri",
        "usuario_id": 2777
    },
    {
        "_id": 1566,
        "fecha": { "$date" : "2016-01-04T05:26:32Z" },
        "decripcion": "\nIf you use the $.ajax function, you can simply add the csrf token in the data body:\n\n$.ajax({\n    data: {\n        somedata: 'somedata',\n        moredata: 'moredata',\n        csrfmiddlewaretoken: '{{ csrf_token }}'\n    },\n\n    ",
        "votes": 191,
        "comentarios": [
            {
                "decripcion": "when I use the marked answer it works for me, but if I use your solution here it doesn't. But your solution should work though, I dont understand why it doesn't. Is there anything else that needs to be done in Django 1.4?",
                "fecha": { "$date" : "2012-05-26T23:15:22Z" },
                "usuario": "Houman",
                "usuario_id": 2781
            },
            {
                "decripcion": "Thanks! so simple. Still works on django 1.8 and jquery 2.1.3",
                "fecha": { "$date" : "2015-04-21T19:15:07Z" },
                "usuario": "Alejandro Veintimilla",
                "usuario_id": 2782
            },
            {
                "decripcion": "This solution requires the javascript to be embedded in the template isn it?",
                "fecha": { "$date" : "2015-05-27T06:28:48Z" },
                "usuario": "Mox",
                "usuario_id": 2783
            },
            {
                "decripcion": "@Mox: Put this in html, but above your Js file where is an ajax function  <script type=\"text/javascript\">     window.CSRF_TOKEN = \"{{ csrf_token }}\"; </script> ",
                "fecha": { "$date" : "2015-07-28T14:45:52Z" },
                "usuario": "HereHere",
                "usuario_id": 2784
            },
            {
                "decripcion": "Thank You bro. This is the most simple and clean solution. Worked like a charm even on Django 3.",
                "fecha": { "$date" : "2020-09-02T10:53:41Z" },
                "usuario": "Smit Patel",
                "usuario_id": 2785
            }
        ],
        "usuario": "Bryan",
        "usuario_id": 2786
    },
    {
        "_id": 1567,
        "fecha": { "$date" : "2019-04-14T22:52:11Z" },
        "decripcion": "\nReal solution\n\nOk, I managed to trace the problem down. It lies in the Javascript (as I suggested below) code.\n\nWhat you need is this:\n\n$.ajaxSetup({ \n     beforeSend: function(xhr, settings) {\n         function getCookie(name) {\n             var cookieValue = null;\n             if (document.cookie && document.cookie != '') {\n                 var cookies = document.cookie.split(';');\n                 for (var i = 0; i < cookies.length; i++) {\n                     var cookie = jQuery.trim(cookies[i]);\n                     // Does this cookie string begin with the name we want?\n                     if (cookie.substring(0, name.length + 1) == (name + '=')) {\n                         cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                         break;\n                     }\n                 }\n             }\n             return cookieValue;\n         }\n         if (!(/^http:.*/.test(settings.url) || /^https:.*/.test(settings.url))) {\n             // Only send the token to relative URLs i.e. locally.\n             xhr.setRequestHeader(\"X-CSRFToken\", getCookie('csrftoken'));\n         }\n     } \n});\n\n\ninstead of the code posted in the official docs:\nhttps://docs.djangoproject.com/en/2.2/ref/csrf/\n\nThe working code, comes from this Django entry: http://www.djangoproject.com/weblog/2011/feb/08/security/\n\nSo the general solution is: \"use ajaxSetup handler instead of ajaxSend handler\". I don't know why it works. But it works for me :)\n\nPrevious post (without answer)\n\nI'm experiencing the same problem actually.\n\nIt occurs after updating to Django 1.2.5 - there were no errors with AJAX POST requests in Django 1.2.4 (AJAX wasn't protected in any way, but it worked just fine).\n\nJust like OP, I have tried the JavaScript snippet posted in Django documentation. I'm using jQuery 1.5. I'm also using the \"django.middleware.csrf.CsrfViewMiddleware\" middleware.\n\nI tried to follow the the middleware code and I know that it fails on this:\n\nrequest_csrf_token = request.META.get('HTTP_X_CSRFTOKEN', '')\n\n\nand then\n\nif request_csrf_token != csrf_token:\n    return self._reject(request, REASON_BAD_TOKEN)\n\n\nthis \"if\" is true, because \"request_csrf_token\" is empty.\n\nBasically it means that the header is NOT set. So is there anything wrong with this JS line:\n\nxhr.setRequestHeader(\"X-CSRFToken\", getCookie('csrftoken'));\n\n\n?\n\nI hope that provided details will help us in resolving the issue :)\n    ",
        "votes": 187,
        "comentarios": [
            {
                "decripcion": "This Worked! I put in the .ajaxSetup function as you pasted it above and I'm now able to post without a 403 error.  Thank you for sharing the solution, Jakub. Good find. :)",
                "fecha": { "$date" : "2011-02-26T04:38:14Z" },
                "usuario": "firebush",
                "usuario_id": 2787
            },
            {
                "decripcion": "Using ajaxSetup rather than ajaxSend runs counter to the jQuery docs: api.jquery.com/jQuery.ajaxSetup",
                "fecha": { "$date" : "2011-05-09T14:07:14Z" },
                "usuario": "Mark Lavin",
                "usuario_id": 2788
            },
            {
                "decripcion": "using 1.3, the official django documentation entry worked for me.",
                "fecha": { "$date" : "2011-08-15T14:22:57Z" },
                "usuario": "monkut",
                "usuario_id": 2752
            },
            {
                "decripcion": "I tried but this doesn't seem to work for me, I am using jQuery v1.7.2, my question is stackoverflow.com/questions/11812694/\u2026",
                "fecha": { "$date" : "2012-08-04T23:56:03Z" },
                "usuario": "daydreamer",
                "usuario_id": 2789
            },
            {
                "decripcion": "I have to add annotation @ensure_csrf_cookie to my view function to force set csrf cookie when the page is requested from mobile devices.",
                "fecha": { "$date" : "2014-01-22T07:12:12Z" },
                "usuario": "Kane",
                "usuario_id": 2790
            }
        ],
        "usuario": "Jakub Goc\u0142awski",
        "usuario_id": 2791
    },
    {
        "_id": 1568,
        "fecha": { "$date" : "2013-04-17T17:34:30Z" },
        "decripcion": "\nAdd this line to your jQuery code:\n\n$.ajaxSetup({\n  data: {csrfmiddlewaretoken: '{{ csrf_token }}' },\n});\n\n\nand done.\n    ",
        "votes": 78,
        "comentarios": [
            {
                "decripcion": "I tried this, except my form has a file upload. My backend is django and still get error 400 CSRF Failed: CSRF token missing or incorrect.",
                "fecha": { "$date" : "2018-10-12T04:35:18Z" },
                "usuario": "Hussain",
                "usuario_id": 2792
            },
            {
                "decripcion": "@Hussain try adding {% csrf_token %} somewhere in the html template even if there's no form tags.  Without it, for me at least, the 403 error occurs.  See: stackoverflow.com/a/65757544/7076615 for more info, and also I recommend using X-editable with Django, it's quite nice and in that thread is a complete example.",
                "fecha": { "$date" : "2021-01-17T05:12:56Z" },
                "usuario": "SmokenSieEinBitteChebaHitBits",
                "usuario_id": 2793
            }
        ],
        "usuario": "Kambiz",
        "usuario_id": 2794
    },
    {
        "_id": 1569,
        "fecha": { "$date" : "2014-11-25T13:27:27Z" },
        "decripcion": "\nThe {% csrf_token %} put in html templates inside <form></form> \n\ntranslates to something like:\n\n<input type='hidden' name='csrfmiddlewaretoken' value='Sdgrw2HfynbFgPcZ5sjaoAI5zsMZ4wZR' />\n\n\nso why not just grep it in your JS like this:\n\ntoken = $(\"#change_password-form\").find('input[name=csrfmiddlewaretoken]').val()\n\n\nand then pass it e.g doing some POST, like:\n\n$.post( \"/panel/change_password/\", {foo: bar, csrfmiddlewaretoken: token}, function(data){\n    console.log(data);\n});\n\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "andilabs",
        "usuario_id": 2795
    },
    {
        "_id": 1570,
        "fecha": { "$date" : "2011-02-27T02:18:52Z" },
        "decripcion": "\nThe issue is because django is expecting the value from the cookie to be passed back as part of the form data. The code from the previous answer is getting javascript to hunt out the cookie value and put it into the form data. Thats a lovely way of doing it from a technical point of view, but it does look a bit verbose.\n\nIn the past, I have done it more simply by getting the javascript to put the token value into the post data.\n\nIf you use {% csrf_token %} in your template, you will get a hidden form field emitted that carries the value. But, if you use {{ csrf_token }} you will just get the bare value of the token, so you can use this in javascript like this....\n\ncsrf_token = \"{{ csrf_token }}\";\n\n\nThen you can include that, with the required key name in the hash you then submit as the data to the ajax call.\n    ",
        "votes": 17,
        "comentarios": [
            {
                "decripcion": "@aehlke You can have static files. In the source code, you can see a nice example, where you register django variables in the window object, so they are accessible afterwards. Even in static files.",
                "fecha": { "$date" : "2014-03-20T18:36:37Z" },
                "usuario": "KitKat",
                "usuario_id": 2796
            },
            {
                "decripcion": "@KitKat indeed :) Sorry for my ancient, ignorant comment here. Good point.",
                "fecha": { "$date" : "2014-03-21T19:59:32Z" },
                "usuario": "aehlke",
                "usuario_id": 2797
            },
            {
                "decripcion": "re static files.  Not an issue, if you don't mind a tiny bit of js your html.  I just put {{ csrf_token }} in the main html template, not far from the requirejs incantations.  worked like a charm.",
                "fecha": { "$date" : "2015-04-03T16:31:35Z" },
                "usuario": "JL Peyret",
                "usuario_id": 1372
            }
        ],
        "usuario": "fatgeekuk",
        "usuario_id": 2798
    },
    {
        "_id": 1571,
        "fecha": { "$date" : "2014-08-16T13:36:06Z" },
        "decripcion": "\nNon-jquery answer:\n\nvar csrfcookie = function() {\n    var cookieValue = null,\n        name = 'csrftoken';\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            if (cookie.substring(0, name.length + 1) == (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n};\n\n\nusage:\n\nvar request = new XMLHttpRequest();\nrequest.open('POST', url, true);\nrequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\nrequest.setRequestHeader('X-CSRFToken', csrfcookie());\nrequest.onload = callback;\nrequest.send(data);\n\n    ",
        "votes": 12,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1572,
        "fecha": { "$date" : "2017-10-08T08:28:38Z" },
        "decripcion": "\nIt seems nobody has mentioned how to do this in pure JS using the X-CSRFToken header and {{ csrf_token }}, so here's a simple solution where you don't need to search through the cookies or the DOM:\n\nvar xhttp = new XMLHttpRequest();\nxhttp.open(\"POST\", url, true);\nxhttp.setRequestHeader(\"X-CSRFToken\", \"{{ csrf_token }}\");\nxhttp.send();\n\n    ",
        "votes": 9,
        "comentarios": [],
        "usuario": "Alex",
        "usuario_id": 24
    },
    {
        "_id": 1573,
        "fecha": { "$date" : "2011-09-13T10:05:55Z" },
        "decripcion": "\nIf your form posts correctly in Django without JS, you should be able to progressively enhance it with ajax without any hacking or messy passing of the csrf token. Just serialize the whole form and that will automatically pick up all your form fields including the hidden csrf field:\n\n$('#myForm').submit(function(){\n    var action = $(this).attr('action');\n    var that = $(this);\n    $.ajax({\n        url: action,\n        type: 'POST',\n        data: that.serialize()\n        ,success: function(data){\n            console.log('Success!');\n        }\n    });\n    return false;\n});\n\n\nI've tested this with Django 1.3+ and jQuery 1.5+. Obviously this will work for any HTML form, not just Django apps.\n    ",
        "votes": 8,
        "comentarios": [],
        "usuario": "GivP",
        "usuario_id": 2799
    },
    {
        "_id": 1574,
        "fecha": { "$date" : "2020-09-15T21:54:28Z" },
        "decripcion": "\nThe accepted answer is most likely a red herring. The difference between Django 1.2.4 and 1.2.5 was the requirement for a CSRF token for AJAX requests.\nI came across this problem on Django 1.3 and it was caused by the CSRF cookie not being set in the first place. Django will not set the cookie unless it has to. So an exclusively or heavily ajax site running on Django 1.2.4 would potentially never have sent a token to the client and then the upgrade requiring the token would cause the 403 errors.\nThe ideal fix is here:\nhttp://docs.djangoproject.com/en/dev/ref/contrib/csrf/#page-uses-ajax-without-any-html-form\nbut you'd have to wait for 1.4 unless this is just documentation catching up with the code\nEdit\nNote also that the later Django docs note a bug in jQuery 1.5 so ensure you are using 1.5.1 or later with the Django suggested code:\nhttps://docs.djangoproject.com/en/dev/ref/csrf/#ajax\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "My answer was accurate at the time of writing it :) It was just after Django was updated from 1.2.4 to 1.2.5. It was also when newest jQuery version was 1.5. It turns out the source of the problem was bugged jQuery (1.5) and this information is now added to Django doc, as you have stated. In my case: the cookie WAS set and the token was NOT added to the AJAX request. Given fix worked for bugged jQuery 1.5. As of now, you can simply stick to the official docs, using example code given there and using newest jQuery. Your problem had different source than problems discussed here :)",
                "fecha": { "$date" : "2011-09-03T17:33:23Z" },
                "usuario": "Jakub Goc\u0142awski",
                "usuario_id": 2791
            },
            {
                "decripcion": "There is now a decorator called ensure_csrf_cookie that you can wrap around a view to ensure it sends the cookie.",
                "fecha": { "$date" : "2011-12-04T03:42:51Z" },
                "usuario": "Brian Neal",
                "usuario_id": 2746
            },
            {
                "decripcion": "This is the issue I was having, there's no csrftoken cookie in the first place, thanks!",
                "fecha": { "$date" : "2017-01-02T12:47:08Z" },
                "usuario": "crhodes",
                "usuario_id": 2800
            }
        ],
        "usuario": "Steven",
        "usuario_id": 2801
    },
    {
        "_id": 1575,
        "fecha": { "$date" : "2011-02-24T05:44:13Z" },
        "decripcion": "\nUse Firefox with Firebug. Open the 'Console' tab while firing the ajax request. With DEBUG=True you get the nice django error page as response and you can even see the rendered html of the ajax response in the console tab.\n\nThen you will know what the error is.\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "jammon",
        "usuario_id": 2802
    },
    {
        "_id": 1576,
        "fecha": { "$date" : "2018-08-09T12:19:22Z" },
        "decripcion": "\nAs it is not stated anywhere in the current answers, the fastest solution if you are not embedding js into your template is: \n\nPut <script type=\"text/javascript\"> window.CSRF_TOKEN = \"{{ csrf_token }}\"; </script> before your reference to script.js file in your template, then add csrfmiddlewaretoken into your data dictionary in your js file:\n\n$.ajax({\n            type: 'POST',\n            url: somepathname + \"do_it/\",\n            data: {csrfmiddlewaretoken: window.CSRF_TOKEN},\n            success: function() {\n                console.log(\"Success!\");\n            }\n        })\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Marek \u017didek",
        "usuario_id": 2803
    },
    {
        "_id": 1577,
        "fecha": { "$date" : "2011-05-06T05:33:12Z" },
        "decripcion": "\nI've just encountered a bit different but similar situation. Not 100% sure if it'd be a resolution to your case, but I resolved the issue for Django 1.3 by setting a POST parameter 'csrfmiddlewaretoken' with the proper cookie value string which is usually returned within the form of your home HTML by Django's template system with '{% csrf_token %}' tag. I did not try on the older Django, just happened and resolved on Django1.3.\nMy problem was that the first request submitted via Ajax from a form was successfully done but the second attempt from the exact same from failed, resulted in 403 state even though the header 'X-CSRFToken' is correctly placed with the CSRF token value as well as in the case of the first attempt.\nHope this helps.\n\nRegards,\n\nHiro\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Hiroaki Kishimoto",
        "usuario_id": 2804
    },
    {
        "_id": 1578,
        "fecha": { "$date" : "2020-10-26T13:01:33Z" },
        "decripcion": "\nYou can paste this js into your html file, remember put it before other js function\n<script>\n  // using jQuery\n  function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie != '') {\n      var cookies = document.cookie.split(';');\n      for (var i = 0; i < cookies.length; i++) {\n        var cookie = jQuery.trim(cookies[i]);\n        // Does this cookie string begin with the name we want?\n        if (cookie.substring(0, name.length + 1) == (name + '=')) {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  }\n\n  function csrfSafeMethod(method) {\n    // these HTTP methods do not require CSRF protection\n    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));\n  }\n\n  $(document).ready(function() {\n    var csrftoken = getCookie('csrftoken');\n    $.ajaxSetup({\n      beforeSend: function(xhr, settings) {\n        if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n          xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n        }\n      }\n    });\n  });\n</script>\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "csrftoken still null tho. any idea? Sorry, adding this, <script type=\"text/javascript\">   window.CSRF_TOKEN = \"{{ csrf_token }}\"; </script> works",
                "fecha": { "$date" : "2021-05-13T11:43:00Z" },
                "usuario": "swdev",
                "usuario_id": 2805
            }
        ],
        "usuario": "nooobpan",
        "usuario_id": 2806
    },
    {
        "_id": 1579,
        "fecha": { "$date" : "2016-04-19T09:02:42Z" },
        "decripcion": "\nOne CSRF token is assigned to every session ( i.e. every time you log in).\nSo before you wish to get some data entered by user and send that as ajax call to some function which is protected by csrf_protect decorator, try to find the functions that are being called before you are getting this data from user. E.g. some template must be being rendered on which your user is entering data.\nThat template is being rendered by some function.\nIn this function you can get csrf  token as follows:\ncsrf = request.COOKIES['csrftoken']\nNow pass this csrf value in context dictionary against which template in question is being rendered.\nNow in that template write this line:  \nNow in your javascript function, before making ajax request, write this:\n var csrf = $('#csrf').val()   this will pick value of token passed to template and store it in variable csrf.\nNow while making ajax call, in your post data, pass this value as well :\n\"csrfmiddlewaretoken\": csrf \n\nThis will work even if you are not implementing django forms.\n\nIn fact, logic over here is : You need token which you can get from request.\nSo you just need to figure out the function being called immediately after log in. Once you have this token, either make another ajax call to get it or pass it to some template which is accessible by your ajax.\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "Not very well structured, but well explained. My issue was, I was sending csrf in this manner: csrftoken: csrftoken, rather than csrfmiddlwaretoken: csrftoken. After the change, it worked. Thanks",
                "fecha": { "$date" : "2017-04-04T03:02:14Z" },
                "usuario": "almost a beginner",
                "usuario_id": 2807
            }
        ],
        "usuario": "AMIT PRAKASH PANDEY",
        "usuario_id": 2808
    },
    {
        "_id": 1580,
        "fecha": { "$date" : "2017-07-21T13:01:20Z" },
        "decripcion": "\nfor someone who comes across this and is trying to debug:\n\n1) the django csrf check (assuming you're sending one) is here\n\n2) In my case, settings.CSRF_HEADER_NAME was set to 'HTTP_X_CSRFTOKEN' and my AJAX call was sending a header named 'HTTP_X_CSRF_TOKEN' so stuff wasn't working. I could either change it in the AJAX call, or django setting.\n\n3) If you opt to change it server-side, find your install location of django and throw a breakpoint in the csrf middleware.f you're using virtualenv, it'll be something like: ~/.envs/my-project/lib/python2.7/site-packages/django/middleware/csrf.py\n\nimport ipdb; ipdb.set_trace() # breakpoint!!\nif request_csrf_token == \"\":\n    # Fall back to X-CSRFToken, to make things easier for AJAX,\n    # and possible for PUT/DELETE.\n    request_csrf_token = request.META.get(settings.CSRF_HEADER_NAME, '')\n\n\nThen, make sure the csrf token is correctly sourced from request.META\n\n4) If you need to change your header, etc - change that variable in your settings file\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "daino3",
        "usuario_id": 2809
    },
    {
        "_id": 1581,
        "fecha": { "$date" : "2017-08-22T07:35:44Z" },
        "decripcion": "\nIf someone is strugling with axios to make this work this helped me:\n\nimport axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\n\nSource: https://cbuelter.wordpress.com/2017/04/10/django-csrf-with-axios/\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Mikko P",
        "usuario_id": 2810
    },
    {
        "_id": 1582,
        "fecha": { "$date" : "2017-12-19T00:20:38Z" },
        "decripcion": "\nHere's a less verbose solution provided by Django:\n\n<script type=\"text/javascript\">\n// using jQuery\nvar csrftoken = jQuery(\"[name=csrfmiddlewaretoken]\").val();\n\nfunction csrfSafeMethod(method) {\n    // these HTTP methods do not require CSRF protection\n    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));\n}\n// set csrf header\n$.ajaxSetup({\n    beforeSend: function(xhr, settings) {\n        if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n            xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n        }\n    }\n});\n\n// Ajax call here\n$.ajax({\n    url:\"{% url 'members:saveAccount' %}\",\n    data: fd,\n    processData: false,\n    contentType: false,\n    type: 'POST',\n    success: function(data) {\n        alert(data);\n        }\n    });\n</script>\n\n\nSource: https://docs.djangoproject.com/en/1.11/ref/csrf/\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "Worked great! Just a note: Make sure to put Django expression tag {% csrf_token %} inside the <form> element to make var csrftoken = jQuery(\"[name=csrfmiddlewaretoken]\").val(); this working. Another way to get csrftoken: var csrftoken = '{{ csrf_token }}';",
                "fecha": { "$date" : "2021-08-12T13:58:18Z" },
                "usuario": "Saurav Kumar",
                "usuario_id": 2811
            }
        ],
        "usuario": "Braden Holt",
        "usuario_id": 2812
    },
    {
        "_id": 1583,
        "fecha": { "$date" : "2020-10-27T10:08:39Z" },
        "decripcion": "\nEasy ajax calls with Django\n(26.10.2020)\nThis is in my opinion much cleaner and simpler than the correct answer.\nThe view\n@login_required\ndef some_view(request):\n    \"\"\"Returns a json response to an ajax call. (request.user is available in view)\"\"\"\n    # Fetch the attributes from the request body\n    data_attribute = request.GET.get('some_attribute')  # Make sure to use POST/GET correctly\n    # DO SOMETHING...\n    return JsonResponse(data={}, status=200)\n\nurls.py\nurlpatterns = [\n    path('some-view-does-something/', views.some_view, name='doing-something'),\n]\n\nThe ajax call\nThe ajax call is quite simple, but is sufficient for most cases. You can fetch some values and put them in the data object, then in the view depicted above you can fetch their values again via their names.\nYou can find the csrftoken function in django's documentation. Basically just copy it and make sure it is rendered before your ajax call so that the csrftoken variable is defined.\n$.ajax({\n    url: \"{% url 'doing-something' %}\",\n    headers: {'X-CSRFToken': csrftoken},\n    data: {'some_attribute': some_value},\n    type: \"GET\",\n    dataType: 'json',\n    success: function (data) {\n        if (data) {\n            console.log(data);\n            // call function to do something with data\n            process_data_function(data);\n        }\n    }\n});\n\nAdd HTML to current page with ajax\nThis might be a bit off topic but I have rarely seen this used and it is a great way to minimize window relocations as well as manual html string creation in javascript.\nThis is very similar to the one above but this time we are rendering html from the response without reloading the current window.\nIf you intended to render some kind of html from the data you would receive as a response to the ajax call, it might be easier to send a HttpResponse back from the view instead of a JsonResponse. That allows you to create html easily which can then be inserted into an element.\nThe view\n# The login required part is of course optional\n@login_required\ndef create_some_html(request):\n    \"\"\"In this particular example we are filtering some model by a constraint sent in by \n    ajax and creating html to send back for those models who match the search\"\"\"\n    # Fetch the attributes from the request body (sent in ajax data)\n    search_input = request.GET.get('search_input')\n\n    # Get some data that we want to render to the template\n    if search_input:\n        data = MyModel.objects.filter(name__contains=search_input) # Example\n    else:\n        data = []\n\n    # Creating an html string using template and some data\n    html_response = render_to_string('path/to/creation_template.html', context = {'models': data})\n\n    return HttpResponse(html_response, status=200)\n\nThe html creation template for view\ncreation_template.html\n{% for model in models %}\n   <li class=\"xyz\">{{ model.name }}</li>\n{% endfor %}\n\nurls.py\nurlpatterns = [\n    path('get-html/', views.create_some_html, name='get-html'),\n]\n\nThe main template and ajax call\nThis is the template where we want to add the data to. In this example in particular we have a search input and a button that sends the search input's value to the view. The view then sends a HttpResponse back displaying data matching the search that we can render inside an element.\n{% extends 'base.html' %}\n{% load static %}\n{% block content %}\n    <input id=\"search-input\" placeholder=\"Type something...\" value=\"\">\n    <button id=\"add-html-button\" class=\"btn btn-primary\">Add Html</button>\n    <ul id=\"add-html-here\">\n        <!-- This is where we want to render new html -->\n    </ul>\n{% end block %}\n\n{% block extra_js %}\n    <script>\n        // When button is pressed fetch inner html of ul\n        $(\"#add-html-button\").on('click', function (e){\n            e.preventDefault();\n            let search_input = $('#search-input').val();\n            let target_element = $('#add-html-here');\n            $.ajax({\n                url: \"{% url 'get-html' %}\",\n                headers: {'X-CSRFToken': csrftoken},\n                data: {'search_input': search_input},\n                type: \"GET\",\n                dataType: 'html',\n                success: function (data) {\n                    if (data) {\n                        /* You could also use json here to get multiple html to\n                        render in different places */\n                        console.log(data);\n                        // Add the http response to element\n                        target_element.html(data);\n                    }\n                }\n            });\n        })\n    </script>\n{% endblock %}\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Hauksson",
        "usuario_id": 2813
    },
    {
        "_id": 1584,
        "fecha": { "$date" : "2015-12-21T12:08:47Z" },
        "decripcion": "\nIn my case the problem was with the nginx config that I've copied from main server to a temporary one with disabling https that is not needed on the second one in the process.\n\nI had to comment out these two lines in the config to make it work again:\n\n# uwsgi_param             UWSGI_SCHEME    https;\n# uwsgi_pass_header       X_FORWARDED_PROTO;\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "int_ua",
        "usuario_id": 2814
    },
    {
        "_id": 1585,
        "fecha": { "$date" : "2020-07-25T17:49:38Z" },
        "decripcion": "\nRelated to the chosen Answer, just want to add on to the chosen Answer.\nIn that answer, regarding the solution with .ajaxSetup(...). In your Django settings.py, if you have\nCSRF_USE_SESSIONS = True\n\nIt would cause the chosen Answer to not work at all. Deleting that line, or setting it to False worked for me while implementing the chosen Answer's solution.\nInterestingly, if you set the following in your Django settings.py\nCSRF_COOKIE_HTTPONLY = True\n\nThis variable will not cause the chosen Answer's solution to stop functioning.\nBoth CSRF_USE_SESSIONS and CSRF_COOKIE_HTTPONLY comes from this official Django doc https://docs.djangoproject.com/en/2.2/ref/csrf/\n(I do not have enough rep to comment, so I am posting my inputs an Answer)\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Yi Zong Kuang",
        "usuario_id": 2815
    },
    {
        "_id": 1586,
        "fecha": { "$date" : "2020-09-13T12:32:27Z" },
        "decripcion": "\nI have a solution. in my JS I have two functions.\nFirst to get Cookies (ie. csrftoken):\nfunction getCookie(name) {\nlet cookieValue = null;\nif (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        // Does this cookie string begin with the name we want?\n        if (cookie.substring(0, name.length + 1) === (name + '=')) {\n            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n            break;\n        }\n    }\n}\nreturn cookieValue;\n\n}\nSecond one is my ajax function. in this case it's for login and in fact doesn't return any thing, just pass values to set a session:\nfunction LoginAjax() {\n\n\n    //get scrftoken:\n    const csrftoken = getCookie('csrftoken');\n\n    var req = new XMLHttpRequest();\n    var userName = document.getElementById(\"Login-Username\");\n    var password = document.getElementById(\"Login-Password\");\n\n    req.onreadystatechange = function () {\n        if (this.readyState == 4 && this.status == 200) {            \n            //read response loggedIn JSON show me if user logged in or not\n            var respond = JSON.parse(this.responseText);            \n            alert(respond.loggedIn);\n\n        }\n    }\n\n    req.open(\"POST\", \"login\", true);\n\n    //following header set scrftoken to resolve problem\n    req.setRequestHeader('X-CSRFToken', csrftoken);\n\n    req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n    req.send(\"UserName=\" + userName.value + \"&Password=\" + password.value);\n}\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Farshid Ahmadi",
        "usuario_id": 2816
    },
    {
        "_id": 1587,
        "fecha": { "$date" : "2020-10-12T11:17:14Z" },
        "decripcion": "\nUsing Django 3.1.1 and all solutions I tried failed. However, adding the \"csrfmiddlewaretoken\" key to my POST body worked. Here's the call I made:\n$.post(url, {\n  csrfmiddlewaretoken: window.CSRF_TOKEN,\n  method: \"POST\",\n  data: JSON.stringify(data),\n  dataType: 'JSON',\n});\n\n\nAnd in the HTML template:\n<script type=\"text/javascript\">\n  window.CSRF_TOKEN = \"{{ csrf_token }}\";\n</script>\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Parth Thakur",
        "usuario_id": 2817
    },
    {
        "_id": 1588,
        "fecha": { "$date" : "2009-09-16T06:42:13Z" },
        "decripcion": "\nThis is how I do it, using jQuery:\n\nMy template:\n\n<h3>My Services</h3>\n{{ serviceFormset.management_form }}\n{% for form in serviceFormset.forms %}\n    <div class='table'>\n    <table class='no_error'>\n        {{ form.as_table }}\n    </table>\n    </div>\n{% endfor %}\n<input type=\"button\" value=\"Add More\" id=\"add_more\">\n<script>\n    $('#add_more').click(function() {\n        cloneMore('div.table:last', 'service');\n    });\n</script>\n\n\nIn a javascript file:\n\nfunction cloneMore(selector, type) {\n    var newElement = $(selector).clone(true);\n    var total = $('#id_' + type + '-TOTAL_FORMS').val();\n    newElement.find(':input').each(function() {\n        var name = $(this).attr('name').replace('-' + (total-1) + '-','-' + total + '-');\n        var id = 'id_' + name;\n        $(this).attr({'name': name, 'id': id}).val('').removeAttr('checked');\n    });\n    newElement.find('label').each(function() {\n        var newFor = $(this).attr('for').replace('-' + (total-1) + '-','-' + total + '-');\n        $(this).attr('for', newFor);\n    });\n    total++;\n    $('#id_' + type + '-TOTAL_FORMS').val(total);\n    $(selector).after(newElement);\n}\n\n\nWhat it does:\n\ncloneMore accepts selector as the first argument, and the type of formset as the 2nd one. What the selector should do is pass it what it should duplicate. In this case, I pass it div.table:last so that jQuery looks for the last table with a class of table. The :last part of it is important because the selector is also used to determine what the new form will be inserted after. More than likely you'd want it at the end of the rest of the forms. The type argument is so that we can update the management_form field, notably TOTAL_FORMS, as well as the actual form fields. If you have a formset full of, say, Client models, the management fields will have IDs of id_clients-TOTAL_FORMS and id_clients-INITIAL_FORMS, while the form fields will be in a format of id_clients-N-fieldname with N being the form number, starting with 0. So with the type argument the cloneMore function looks at how many forms there currently are, and goes through every input and label inside the new form replacing all the field names/ids from something like id_clients-(N)-name to id_clients-(N+1)-name and so on. After it is finished, it updates the TOTAL_FORMS field to reflect the new form and adds it to the end of the set.\n\nThis function is particularly helpful to me because the way it is setup it allows me to use it throughout the app when I want to provide more forms in a formset, and doesn't make me need to have a hidden \"template\" form to duplicate as long as I pass it the formset name and the format in which the forms are laid out. Hope it helps.\n    ",
        "votes": 230,
        "comentarios": [
            {
                "decripcion": "In IE, a clone from a cloned element is represented as <undefined> when selecting in JS, why?",
                "fecha": { "$date" : "2009-10-13T14:46:57Z" },
                "usuario": "panchicore",
                "usuario_id": 2820
            },
            {
                "decripcion": "I found that in Django 1.1 you'll need to assign a value to the prefix member of the Formset Object. This should the same value as the type argument for the cloneMore function.",
                "fecha": { "$date" : "2010-02-11T18:46:54Z" },
                "usuario": "Derek Reynolds",
                "usuario_id": 2821
            },
            {
                "decripcion": "I modified this to take the selector without :last and used var total = $(selector).length; to get my total because a refresh of the page would remove my formsets but leave the TOTAL increase leading to the wrong number being saved. I then added :last to the selector as needed. Thank for this.",
                "fecha": { "$date" : "2010-11-05T00:47:27Z" },
                "usuario": "Greg",
                "usuario_id": 2822
            },
            {
                "decripcion": "I have found that this using  $(this).attr({'name': name, 'id': id}).val('').removeAttr('checked'); To clear the input will mess up checkboxes. Setting val('') gives the checkboxes an empty value attribute. And since checkboxes don't use the value attribute this will never be updated - no matter how many times you click it. But it seems that value has higher priority than the \"checked\" attributed of checkboxes. Which will mean that you will always post non checked checkboxes.",
                "fecha": { "$date" : "2011-07-14T19:28:02Z" },
                "usuario": "niklasdstrom",
                "usuario_id": 2823
            },
            {
                "decripcion": "please paolo can you check my problem stackoverflow.com/questions/62252867/\u2026",
                "fecha": { "$date" : "2020-06-09T14:47:07Z" },
                "usuario": "art_cs",
                "usuario_id": 2824
            }
        ],
        "usuario": "Paolo Bergantino",
        "usuario_id": 2825
    },
    {
        "_id": 1589,
        "fecha": { "$date" : "2014-03-28T09:42:33Z" },
        "decripcion": "\nSimplified version of Paolo's answer using empty_form as a template.\n\n<h3>My Services</h3>\n{{ serviceFormset.management_form }}\n<div id=\"form_set\">\n    {% for form in serviceFormset.forms %}\n        <table class='no_error'>\n            {{ form.as_table }}\n        </table>\n    {% endfor %}\n</div>\n<input type=\"button\" value=\"Add More\" id=\"add_more\">\n<div id=\"empty_form\" style=\"display:none\">\n    <table class='no_error'>\n        {{ serviceFormset.empty_form.as_table }}\n    </table>\n</div>\n<script>\n    $('#add_more').click(function() {\n        var form_idx = $('#id_form-TOTAL_FORMS').val();\n        $('#form_set').append($('#empty_form').html().replace(/__prefix__/g, form_idx));\n        $('#id_form-TOTAL_FORMS').val(parseInt(form_idx) + 1);\n    });\n</script>\n\n    ",
        "votes": 121,
        "comentarios": [
            {
                "decripcion": "how can i deal this in the view? when i use CompetitorFormSet = modelformset_factory(ProjectCompetitor, formset=CompetitorFormSets)  ctx['competitor_form_set'] = CompetitorFormSet(request.POST) i Only get one form, in in clean method. can you please explain how to deal this in views?",
                "fecha": { "$date" : "2014-05-06T07:28:10Z" },
                "usuario": "A.J.",
                "usuario_id": 2826
            },
            {
                "decripcion": "Brilliant \u2013 thank you. Makes excellent use of the available Django helpers (like empty_form), which I appreciate.",
                "fecha": { "$date" : "2019-06-14T18:53:28Z" },
                "usuario": "BigglesZX",
                "usuario_id": 2827
            },
            {
                "decripcion": "@BigglesZX - I have adapted the solution and the new rows of empty forms are getting generated. However the select boxes are generating a list of FK (available) choices, instead of drop downs which are otherwise being generated for the original set of forms. Has any issue of this nature been reported?",
                "fecha": { "$date" : "2020-02-17T05:10:44Z" },
                "usuario": "user12379095",
                "usuario_id": 2828
            },
            {
                "decripcion": "@Dave could you update answer for later versions i.e 3.x ? it's simple and clear but it's not working for me",
                "fecha": { "$date" : "2020-04-09T06:49:05Z" },
                "usuario": "Poula Adel",
                "usuario_id": 2829
            },
            {
                "decripcion": "@PoulaAdel What isn't working? I just tried this on Django 3.0.5 and it still works for me. Surprising after 8 years, but I guess Django and jQuery have good backward compatibility with older code.",
                "fecha": { "$date" : "2020-04-10T16:51:21Z" },
                "usuario": "Dave",
                "usuario_id": 546
            }
        ],
        "usuario": "Dave",
        "usuario_id": 546
    },
    {
        "_id": 1590,
        "fecha": { "$date" : "2009-04-21T12:52:17Z" },
        "decripcion": "\nPaolo's suggestion works beautifully with one caveat - the browser's back/forward buttons.\n\nThe dynamic elements created with Paolo's script will not be rendered if the user returns to the formset using the back/forward button. An issue that may be a deal breaker for some. \n\nExample:\n\n1) User adds two new forms to the formset using the \"add-more\" button\n\n2) User populates the forms and submits the formset\n\n3) User clicks the back button in the browser\n\n4) Formset is now reduced to the original form, all dynamically added forms are not there\n\nThis is not a defect with Paolo's script at all; but a fact of life with dom manipulation and browser's cache.\n\nI suppose one could store the values of the form in the session and have some ajax magic when the formset loads to create the elements again and reload the values from the session; but depending on how anal you want to be about the same user and multiple instances of the form this may become very complicated.\n\nAnyone has a good suggestion for dealing with this?\n\nThanks!\n    ",
        "votes": 18,
        "comentarios": [
            {
                "decripcion": "If you redirect after successful submission, the back button isn't a problem.  If you fill the forms from the DB on the next visit, all the forms appear initially.  If you fail the forms due to invalid input, all of them should be there on the redisplay with errors.  Unless I'm not understanding your statements....  That post submission redirect is really important in a good working app, one that lots of coders just don't get based on the number of poorly behaving apps I run into on the web.",
                "fecha": { "$date" : "2013-03-20T14:08:27Z" },
                "usuario": "boatcoder",
                "usuario_id": 2830
            }
        ],
        "usuario": "cethegeek",
        "usuario_id": 2831
    },
    {
        "_id": 1591,
        "fecha": { "$date" : "2009-02-09T20:49:11Z" },
        "decripcion": "\nSimulate and imitate:\n\n\nCreate a formset which corresponds to the situation before clicking the \"add\" button.\nLoad the page, view the source and take a note of all <input> fields.\nModify the formset to correspond to the situation after clicking the \"add\" button (change the number of extra fields).\nLoad the page, view the source and take a note of how the <input> fields changed.\nCreate some JavaScript which modifies the DOM in a suitable way to move it from the before state to the after state.\nAttach that JavaScript to the \"add\" button.\n\n\nWhile I do know formsets use special hidden <input> fields and know approximately what the script must do, I don't recall the details off the top of my head. What I described above is what I would do in your situation.\n    ",
        "votes": 11,
        "comentarios": [],
        "usuario": "akaihola",
        "usuario_id": 2623
    },
    {
        "_id": 1592,
        "fecha": { "$date" : "2009-02-02T00:49:35Z" },
        "decripcion": "\nOne option would be to create a formset with every possible form, but initially set the unrequired forms to hidden - ie, display: none;.  When it's necessary to display a form, set it's css display to block or whatever is appropriate.\n\nWithout know more details of what your \"Ajax\" is doing, it's hard to give a more detailed response.\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Daniel Naab",
        "usuario_id": 2832
    },
    {
        "_id": 1593,
        "fecha": { "$date" : "2010-11-04T14:00:25Z" },
        "decripcion": "\nAnother cloneMore version, which allows for selective sanitization of fields. Use it when you need to prevent several fields from being erased.\n\n$('table tr.add-row a').click(function() {\n    toSanitize = new Array('id', 'product', 'price', 'type', 'valid_from', 'valid_until');\n    cloneMore('div.formtable table tr.form-row:last', 'form', toSanitize);\n});\n\nfunction cloneMore(selector, type, sanitize) {\n    var newElement = $(selector).clone(true);\n    var total = $('#id_' + type + '-TOTAL_FORMS').val();\n    newElement.find(':input').each(function() {\n        var namePure = $(this).attr('name').replace(type + '-' + (total-1) + '-', '');\n        var name = $(this).attr('name').replace('-' + (total-1) + '-','-' + total + '-');\n        var id = 'id_' + name;\n        $(this).attr({'name': name, 'id': id}).removeAttr('checked');\n\n        if ($.inArray(namePure, sanitize) != -1) {\n            $(this).val('');\n        }\n\n    });\n    newElement.find('label').each(function() {\n        var newFor = $(this).attr('for').replace('-' + (total-1) + '-','-' + total + '-');\n        $(this).attr('for', newFor);\n    });\n    total++;\n    $('#id_' + type + '-TOTAL_FORMS').val(total);\n    $(selector).after(newElement);\n}\n\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "can you help me stackoverflow.com/questions/62285767/\u2026 , i've tried alot  but didnt get an answer ! i much appreciate you",
                "fecha": { "$date" : "2020-06-09T18:58:29Z" },
                "usuario": "art_cs",
                "usuario_id": 2824
            }
        ],
        "usuario": "xaralis",
        "usuario_id": 2833
    },
    {
        "_id": 1594,
        "fecha": { "$date" : "2018-03-03T14:53:19Z" },
        "decripcion": "\nFor the coders out there who are hunting resources to understand the above solutions a little better:\n\nDjango Dynamic Formsets\n\nAfter reading the above link, the Django documentation and previous solutions should make a lot more sense.\n\nDjango Formset Documentation\n\nAs a quick summary of what I was getting confused by: The Management Form contains an overview of the forms within. You must keep that information accurate in order for Django to be aware of the forms you add. (Community, please give me suggestions if some of my wording is off here. Im new to Django.)\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Ryan Buchmeier",
        "usuario_id": 2834
    },
    {
        "_id": 1595,
        "fecha": { "$date" : "2010-06-07T21:22:30Z" },
        "decripcion": "\nThere is a small issue with the cloneMore function. Since it's also cleaning the value of the django auto-generated hidden fields, it causes django to complain if you try to save a formset with more than one empty form.\n\nHere is a fix:\n\nfunction cloneMore(selector, type) {\n    var newElement = $(selector).clone(true);\n    var total = $('#id_' + type + '-TOTAL_FORMS').val();\n    newElement.find(':input').each(function() {\n        var name = $(this).attr('name').replace('-' + (total-1) + '-','-' + total + '-');\n        var id = 'id_' + name;\n\n        if ($(this).attr('type') != 'hidden') {\n            $(this).val('');\n        }\n        $(this).attr({'name': name, 'id': id}).removeAttr('checked');\n    });\n    newElement.find('label').each(function() {\n        var newFor = $(this).attr('for').replace('-' + (total-1) + '-','-' + total + '-');\n        $(this).attr('for', newFor);\n    });\n    total++;\n    $('#id_' + type + '-TOTAL_FORMS').val(total);\n    $(selector).after(newElement);\n}\n\n    ",
        "votes": 2,
        "comentarios": [
            {
                "decripcion": "Sorry @art_cs, I haven't worked with Django in several years. Please study the answers to this question carefully, and use the debugger in your browser's developer tools, I'm sure it's fairly easy to solve. I'd also look around for a pre-packaged solution.",
                "fecha": { "$date" : "2020-06-27T20:39:04Z" },
                "usuario": "akaihola",
                "usuario_id": 2623
            }
        ],
        "usuario": "Cesar Canassa",
        "usuario_id": 2835
    },
    {
        "_id": 1596,
        "fecha": { "$date" : "2012-08-09T01:05:17Z" },
        "decripcion": "\nYea I'd also recommend just rendering them out in the html if you have a finite number of entries. (If you don't you'll have to user another method).\n\nYou can hide them like this:\n\n{% for form in spokenLanguageFormset %}\n    <fieldset class=\"languages-{{forloop.counter0 }} {% if spokenLanguageFormset.initial_forms|length < forloop.counter and forloop.counter != 1 %}hidden-form{% endif %}\">\n\n\nThen the js is really simple:\n\naddItem: function(e){\n    e.preventDefault();\n    var maxForms = parseInt($(this).closest(\"fieldset\").find(\"[name*='MAX_NUM_FORMS']\").val(), 10);\n    var initialForms = parseInt($(this).closest(\"fieldset\").find(\"[name*='INITIAL_FORMS']\").val(), 10);\n    // check if we can add\n    if (initialForms < maxForms) {\n        $(this).closest(\"fieldset\").find(\"fieldset:hidden\").first().show();\n        if ($(this).closest(\"fieldset\").find(\"fieldset:visible\").length == maxForms ){\n            // here I'm just hiding my 'add' link\n            $(this).closest(\".control-group\").hide();\n        };\n    };\n}\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Bob Spryn",
        "usuario_id": 2836
    },
    {
        "_id": 1597,
        "fecha": { "$date" : "2017-04-03T16:40:57Z" },
        "decripcion": "\nBecause all answers above use jQuery and make some things a bit complex I wrote following script:\n\nfunction $(selector, element) {\n    if (!element) {\n        element = document\n    }\n    return element.querySelector(selector)\n}\n\nfunction $$(selector, element) {\n    if (!element) {\n        element = document\n    }\n    return element.querySelectorAll(selector)\n}\n\nfunction hasReachedMaxNum(type, form) {\n    var total = parseInt(form.elements[type + \"-TOTAL_FORMS\"].value);\n    var max = parseInt(form.elements[type + \"-MAX_NUM_FORMS\"].value);\n    return total >= max\n}\n\nfunction cloneMore(element, type, form) {\n    var totalElement = form.elements[type + \"-TOTAL_FORMS\"];\n    total = parseInt(totalElement.value);\n    newElement = element.cloneNode(true);\n    for (var input of $$(\"input\", newElement)) {\n        input.name = input.name.replace(\"-\" + (total - 1) + \"-\", \"-\" + total + \"-\");\n        input.value = null\n    }\n    total++;\n    element.parentNode.insertBefore(newElement, element.nextSibling);\n    totalElement.value = total;\n    return newElement\n}\nvar addChoiceButton = $(\"#add-choice\");\naddChoiceButton.onclick = function() {\n    var choices = $(\"#choices\");\n    var createForm = $(\"#create\");\n    cloneMore(choices.lastElementChild, \"choice_set\", createForm);\n    if (hasReachedMaxNum(\"choice_set\", createForm)) {\n        this.disabled = true\n    }\n};\n\n\nFirst you should set auto_id to false and so disable the duplication of id and name. Because the input names have to be unique in there form, all identification is done with them and not with id's.\nYou also have to replace the form, type and the container of the formset. (In the example above choices)\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1598,
        "fecha": { "$date" : "2020-09-15T08:02:34Z" },
        "decripcion": "\nWrite a custom template filter:\nfrom django.template.defaulttags import register\n...\n@register.filter\ndef get_item(dictionary, key):\n    return dictionary.get(key)\n\n(I use .get so that if the key is absent, it returns none. If you do dictionary[key] it will raise a KeyError then.)\nusage:\n{{ mydict|get_item:item.NAME }}\n\n    ",
        "votes": 411,
        "comentarios": [
            {
                "decripcion": "Django Custom Template Tag documentation, for those finding this in the future.",
                "fecha": { "$date" : "2012-08-25T21:26:32Z" },
                "usuario": "Jeff",
                "usuario_id": 1912
            },
            {
                "decripcion": "Why is this not built in by default? :-(",
                "fecha": { "$date" : "2012-12-28T15:23:07Z" },
                "usuario": "Berislav Lopac",
                "usuario_id": 2840
            },
            {
                "decripcion": "I think @Jeff meant Django Custom Template Filter documentation",
                "fecha": { "$date" : "2013-07-24T10:08:17Z" },
                "usuario": "Jorge Leitao",
                "usuario_id": 2841
            },
            {
                "decripcion": "in Jinja2 {{ mydict[key] }}",
                "fecha": { "$date" : "2014-11-12T02:45:20Z" },
                "usuario": "Evgeny",
                "usuario_id": 696
            },
            {
                "decripcion": "Does the filter go in views.py, some extra filters.py, or what file?",
                "fecha": { "$date" : "2015-06-28T18:10:10Z" },
                "usuario": "AlanSE",
                "usuario_id": 2842
            }
        ],
        "usuario": "culebr\u00f3n",
        "usuario_id": 2843
    },
    {
        "_id": 1599,
        "fecha": { "$date" : "2015-07-12T01:13:26Z" },
        "decripcion": "\nFetch both the key and the value from the dictionary in the loop:\n\n{% for key, value in mydict.items %}\n    {{ value }}\n{% endfor %}\n\n\nI find this easier to read and it avoids the need for special coding. I usually need the key and the value inside the loop anyway.\n    ",
        "votes": 70,
        "comentarios": [
            {
                "decripcion": "He did not ask to enumerate a dict (as you show) - he asked to get the dict's value given a variable key.  Your proposal does not provide solution.",
                "fecha": { "$date" : "2015-11-09T18:11:10Z" },
                "usuario": "staggart",
                "usuario_id": 2844
            },
            {
                "decripcion": "It is a solution (just very inefficient) since you can enumerate the items of the dict and then match with the key from the list.",
                "fecha": { "$date" : "2016-08-25T12:43:04Z" },
                "usuario": "DylanYoung",
                "usuario_id": 2753
            },
            {
                "decripcion": "Note that this does not work if the dictionary you are trying to access contains another dictionary inside.",
                "fecha": { "$date" : "2017-06-17T19:33:01Z" },
                "usuario": "J0ANMM",
                "usuario_id": 2845
            },
            {
                "decripcion": "If your values are dicts, you can include another for loop to process their keys and values but is likely that the complexity is taking you towards it being worth using a custom filter as described in @culebron's answer.",
                "fecha": { "$date" : "2017-06-18T20:35:50Z" },
                "usuario": "Paul Whipp",
                "usuario_id": 2846
            }
        ],
        "usuario": "Paul Whipp",
        "usuario_id": 2846
    },
    {
        "_id": 1600,
        "fecha": { "$date" : "2018-04-02T00:06:38Z" },
        "decripcion": "\nYou can't by default. The dot is the separator / trigger for attribute lookup / key lookup / slice.\n\n\n  Dots have a special meaning in template rendering. A dot in a variable\n  name signifies a lookup. Specifically, when the template system\n  encounters a dot in a variable name, it tries the following lookups,\n  in this order:\n  \n  \n  Dictionary lookup. Example: foo[\"bar\"] \n  Attribute lookup. Example: foo.bar \n  List-index lookup. Example: foo[bar]\n  \n\n\nBut you can make a filter which lets you pass in an argument:\n\nhttps://docs.djangoproject.com/en/dev/howto/custom-template-tags/#writing-custom-template-filters\n\n@register.filter(name='lookup')\ndef lookup(value, arg):\n    return value[arg]\n\n{{ mydict|lookup:item.name }}\n\n    ",
        "votes": 42,
        "comentarios": [
            {
                "decripcion": "I would still use return value.get(arg) because that would not throw a KeyError exception if the key is not present.",
                "fecha": { "$date" : "2020-01-16T00:45:25Z" },
                "usuario": "slajma",
                "usuario_id": 2847
            }
        ],
        "usuario": "Yuji 'Tomita' Tomita",
        "usuario_id": 2848
    },
    {
        "_id": 1601,
        "fecha": { "$date" : "2017-06-29T19:12:06Z" },
        "decripcion": "\nFor me creating a python file named template_filters.py in my App with below content did the job\n\n# coding=utf-8\nfrom django.template.base import Library\n\nregister = Library()\n\n\n@register.filter\ndef get_item(dictionary, key):\n    return dictionary.get(key)\n\n\nusage is like what culebr\u00f3n said :\n\n{{ mydict|get_item:item.NAME }}\n\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "Why register = Library() ? What does it do ?",
                "fecha": { "$date" : "2017-12-13T10:03:31Z" },
                "usuario": "MD. Khairul Basar",
                "usuario_id": 2849
            },
            {
                "decripcion": "If you want all your templates to know about your new filter, then you have to register it under django.template.base.Library class. by register = Library() we instantiate that class and use filter function annotator inside it to reach our need.",
                "fecha": { "$date" : "2017-12-14T10:57:04Z" },
                "usuario": "AmiNadimi",
                "usuario_id": 2850
            }
        ],
        "usuario": "AmiNadimi",
        "usuario_id": 2850
    },
    {
        "_id": 1602,
        "fecha": { "$date" : "2016-10-07T00:39:55Z" },
        "decripcion": "\nI had a similar situation. However I used a different solution.\n\nIn my model I create a property that does the dictionary lookup. In the template I then use the property.\n\nIn my model: -\n\n@property\ndef state_(self):\n    \"\"\" Return the text of the state rather than an integer \"\"\"\n    return self.STATE[self.state]\n\n\nIn my template: -\n\nThe state is: {{ item.state_ }}\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "sexybear2",
        "usuario_id": 2851
    },
    {
        "_id": 1603,
        "fecha": { "$date" : "2020-06-07T15:22:10Z" },
        "decripcion": "\nEnvironment: Django 2.2\n\n\nExample code:\n\n\n\n\n    from django.template.defaulttags import register\n\n    @register.filter(name='lookup')\n    def lookup(value, arg):\n        return value.get(arg)\n\n\n\nI put this code in a file named template_filters.py in my project folder named portfoliomgr\n\n\nNo matter where you put your filter code, make sure you have __init__.py in that folder\nAdd that file to libraries section in templates section in your projectfolder/settings.py file. For me, it is portfoliomgr/settings.py\n\n\n\n\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'DIRS': [os.path.join(BASE_DIR, 'templates')],\n            'APP_DIRS': True,\n            'OPTIONS': {\n                'context_processors': [\n                    'django.template.context_processors.debug',\n                    'django.template.context_processors.request',\n                    'django.contrib.auth.context_processors.auth',\n                    'django.contrib.messages.context_processors.messages',\n                ],\n                'libraries':{\n                    'template_filters': 'portfoliomgr.template_filters',\n                }\n            },\n        },\n    ]\n\n\n\n\nIn your html code load the library\n\n\n{% load template_filters %}\n\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Krishna",
        "usuario_id": 1811
    },
    {
        "_id": 1604,
        "fecha": { "$date" : "2020-08-21T01:40:15Z" },
        "decripcion": "\nSince I can't comment, let me do this in the form of an answer:\nto build on culebr\u00f3n's answer or Yuji 'Tomita' Tomita's answer, the dictionary passed into the function is in the form of a string, so perhaps use ast.literal_eval to convert the string to a dictionary first, like in this example.\nWith this edit, the code should look like this:\n# code for custom template tag\n@register.filter(name='lookup')\ndef lookup(value, arg):\n    value_dict = ast.literal_eval(value)\n    return value_dict.get(arg)\n\n<!--template tag (in the template)-->\n{{ mydict|lookup:item.name }}\n\n    ",
        "votes": 1,
        "comentarios": [
            {
                "decripcion": "Is it possible to assign the value returned({{ mydict|lookup:item.name }}) to a variable",
                "fecha": { "$date" : "2020-08-19T17:03:42Z" },
                "usuario": "Jibin",
                "usuario_id": 2852
            },
            {
                "decripcion": "@Jibin I am not sure what you mean by your question. Perhaps my code was confusing; I have corrected it and added comments since then.",
                "fecha": { "$date" : "2020-08-21T01:46:26Z" },
                "usuario": "BurntIce",
                "usuario_id": 2853
            }
        ],
        "usuario": "BurntIce",
        "usuario_id": 2853
    },
    {
        "_id": 1605,
        "fecha": { "$date" : "2019-03-06T02:42:29Z" },
        "decripcion": "\nenv: django 2.1.7\n\nview: \n\ndict_objs[query_obj.id] = {'obj': query_obj, 'tag': str_tag}\nreturn render(request, 'obj.html', {'dict_objs': dict_objs})\n\n\ntemplate: \n\n{% for obj_id,dict_obj in dict_objs.items %}\n<td>{{ dict_obj.obj.obj_name }}</td>\n<td style=\"display:none\">{{ obj_id }}</td>\n<td>{{ forloop.counter }}</td>\n<td>{{ dict_obj.obj.update_timestamp|date:\"Y-m-d H:i:s\"}}</td>\n\n    ",
        "votes": -2,
        "comentarios": [
            {
                "decripcion": "The template code {{ dict_obj.obj.obj_name }} is in this case equivalent to Python code dict_obj[\"obj\"][\"obj_name\"], however, the question is about the equivalent of dict_obj[obj][obj_name].",
                "fecha": { "$date" : "2019-06-18T11:18:16Z" },
                "usuario": "Flimm",
                "usuario_id": 2854
            },
            {
                "decripcion": "How is the answer used, inside a template?",
                "fecha": { "$date" : "2020-11-24T14:25:12Z" },
                "usuario": "Martins",
                "usuario_id": 2855
            }
        ],
        "usuario": "Yi Yang Apollo",
        "usuario_id": 2856
    },
    {
        "_id": 1606,
        "fecha": { "$date" : "2013-09-13T15:42:32Z" },
        "decripcion": "\nThe related_name attribute specifies the name of the reverse relation from the User model back to your model.\n\nIf you don't specify a related_name, Django automatically creates one using the name of your model with the suffix _set, for instance User.map_set.all(). \n\nIf you do specify, e.g. related_name=maps on the User model, User.map_set will still work, but the User.maps. syntax is obviously a bit cleaner and less clunky; so for example, if you had a user object current_user, you could use current_user.maps.all() to get all instances of your Map model that have a relation to current_user. \n\nThe Django documentation has more details.\n    ",
        "votes": 723,
        "comentarios": [
            {
                "decripcion": "Okay, I know this is an old post. But I'm just trying to figure this out - what's the + trick at the end of the related name? For instance, what happens if I did related_name='maps+' in the example above?",
                "fecha": { "$date" : "2014-05-07T04:12:33Z" },
                "usuario": "Sidd",
                "usuario_id": 2858
            },
            {
                "decripcion": "if you add the +, django disables the mapping",
                "fecha": { "$date" : "2014-06-16T15:04:21Z" },
                "usuario": "josephmisiti",
                "usuario_id": 2859
            },
            {
                "decripcion": "for OneToOneField default related_name will be small case class name. For example in the given example if members would be OneToOnefield then \"User.map\" will work.",
                "fecha": { "$date" : "2014-11-12T09:44:36Z" },
                "usuario": "ancho",
                "usuario_id": 2860
            },
            {
                "decripcion": "if you specify related_name, does _set still work in django1.11 > ??",
                "fecha": { "$date" : "2018-09-03T14:54:16Z" },
                "usuario": "Esir Kings",
                "usuario_id": 2861
            },
            {
                "decripcion": "I use Django 2.1.3 and I can note those are exclusive. Once related_name is specified, _set does not work anymore.",
                "fecha": { "$date" : "2018-12-03T21:07:13Z" },
                "usuario": "stockersky",
                "usuario_id": 2862
            }
        ],
        "usuario": "Wogan",
        "usuario_id": 2863
    },
    {
        "_id": 1607,
        "fecha": { "$date" : "2016-04-28T13:52:42Z" },
        "decripcion": "\nTo add to existing  answer - related name is a must in case there 2 FKs in the model that point to the same table. For example in case of Bill of material\n\n@with_author \nclass BOM(models.Model): \n    name = models.CharField(max_length=200,null=True, blank=True)\n    description = models.TextField(null=True, blank=True)\n    tomaterial =  models.ForeignKey(Material, related_name = 'tomaterial')\n    frommaterial =  models.ForeignKey(Material, related_name = 'frommaterial')\n    creation_time = models.DateTimeField(auto_now_add=True, blank=True)\n    quantity = models.DecimalField(max_digits=19, decimal_places=10)\n\n\nSo when you will have to access this data \nyou only can use related name \n\n bom = material.tomaterial.all().order_by('-creation_time')\n\n\nIt is not working otherwise (at least I was not able to skip the usage of related name in case of 2 FK's to the same table.)\n    ",
        "votes": 112,
        "comentarios": [
            {
                "decripcion": "You have to pick a related_name at least for one of them. The other one doesn't enecssarily require.",
                "fecha": { "$date" : "2016-11-22T22:05:24Z" },
                "usuario": "Csaba Toth",
                "usuario_id": 2864
            },
            {
                "decripcion": "related_name should be plural. Because ForeignKey relations   return multiple objects.",
                "fecha": { "$date" : "2016-11-30T06:40:58Z" },
                "usuario": "Mesut Tasci",
                "usuario_id": 2865
            },
            {
                "decripcion": "sorry for the necro posting =) Mesut's comment has merit.  an example of what they are mentioning would be class Employee(models.Model):     manager = models.ForeignKey('self', related_name = 'manages', on_delete=models.CASCADE, blank=False, null=False)  google: \"Django Tips #22 Designing Better Models\" for more",
                "fecha": { "$date" : "2020-07-13T20:59:41Z" },
                "usuario": "boar",
                "usuario_id": 2866
            }
        ],
        "usuario": "Ilya Bibik",
        "usuario_id": 2867
    },
    {
        "_id": 1608,
        "fecha": { "$date" : "2018-12-13T16:02:09Z" },
        "decripcion": "\nThe related_name argument is also useful if you have more complex related class names. For example, if you have a foreign key relationship:\n\nclass UserMapDataFrame(models.Model):\n    user = models.ForeignKey(User) \n\n\nIn order to access UserMapDataFrame objects from the related User, the default call would be User.usermapdataframe_set.all(), which it is quite difficult to read. \n\nUsing the related_name allows you to specify a simpler or more legible name to get the reverse relation. In this case, if you specify user = models.ForeignKey(User, related_name='map_data'), the call would then be User.map_data.all().\n    ",
        "votes": 21,
        "comentarios": [],
        "usuario": "Daniel Holmes",
        "usuario_id": 2868
    },
    {
        "_id": 1609,
        "fecha": { "$date" : "2020-08-24T09:07:33Z" },
        "decripcion": "\nThe essentials of your question are as follows.\nSince you have Map and User models and you have defined ManyToManyField in Map model, if you want to get access to members of the Map then you have the option of map_instance.members.all() since you have defined members field.\nHowever, say you want to access all maps a user is a part of then what option do you have.\nBy default, Django provided you with user_instance.modelname_set.all() and this will translate to the user.map_set.all() in this case.\nmaps is much better than map_set.\nrelated_name provides you an ability to let Django know how you are going to access Map from User model or in general how you can access reverse models which is the whole point in creating ManyToMany fields and using ORM in that sense.\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "Visit revsys.com/tidbits/tips-using-djangos-manytomanyfield for more information about ManyToMany field in Django",
                "fecha": { "$date" : "2020-07-29T17:37:39Z" },
                "usuario": "Mr. Suryaa Jha",
                "usuario_id": 2869
            }
        ],
        "usuario": "Mr. Suryaa Jha",
        "usuario_id": 2869
    },
    {
        "_id": 1610,
        "fecha": { "$date" : "2018-08-17T08:36:48Z" },
        "decripcion": "\nThe related name parameter is actually an option. If we do not set it, Django\nautomatically creates the other side of the relation for us. In the case of the Map model,\nDjango would have created a map_set attribute, allowing access via m.map_set in your\nexample(m being your class instance). The formula Django uses is the name of the model followed by the\nstring _set. The related name parameter thus simply overrides Django\u2019s default rather\nthan providing new behavior.\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "AbrarWali",
        "usuario_id": 2870
    },
    {
        "_id": 1611,
        "fecha": { "$date" : "2019-10-12T17:09:56Z" },
        "decripcion": "\nprefetch_related use for prefetch data for Many to many and many to one relationship data.\nselect_related is to select data from a single value relationship. Both of these are used to fetch data from their relationships from a model. For example, you build a model and a model that has a relationship with other models. When a request comes you will also query for their relationship data and Django has very good mechanisms To access data from their relationship like book.author.name but when you iterate a list of models for fetching their relationship data Django create each request for every single relationship data. To overcome this we do have  prefetchd_related and selected_related\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Jamil Noyda",
        "usuario_id": 2871
    },
    {
        "_id": 1612,
        "fecha": { "$date" : "2019-07-29T13:31:39Z" },
        "decripcion": "\nI've used a simple technique that works nicely for small cases with no special tags and no additional context.  Sometimes this comes in handy\n\n{% for i in '0123456789'|make_list %}\n    {{ forloop.counter }}\n{% endfor %}\n\n    ",
        "votes": 431,
        "comentarios": [
            {
                "decripcion": "FWIW, 012 == 12, so it will only loop over 1 and 2.",
                "fecha": { "$date" : "2012-07-11T19:10:44Z" },
                "usuario": "Bagee",
                "usuario_id": 2877
            },
            {
                "decripcion": "{% for i in '0123456789'|make_list %} to iterate over all 10, not skipping 0.",
                "fecha": { "$date" : "2012-08-18T02:44:07Z" },
                "usuario": "Rick",
                "usuario_id": 2878
            },
            {
                "decripcion": "very clever.  what about a list comprehension though?  Kind of takes the hackishness out but uses the same idea x = 5, y=[i for i in range(x)]  context={'iterateover':y}",
                "fecha": { "$date" : "2013-07-26T15:03:47Z" },
                "usuario": "Dave_750",
                "usuario_id": 2879
            },
            {
                "decripcion": "@Dave_750 context={'iterateover': range(x)} would work just as well",
                "fecha": { "$date" : "2013-09-04T19:39:23Z" },
                "usuario": "Izkata",
                "usuario_id": 2880
            },
            {
                "decripcion": "Generate a string of arbitrary length with 'rjust' {% for i in \"x\"|rjust:\"100\" %}",
                "fecha": { "$date" : "2016-03-30T19:48:59Z" },
                "usuario": "Aaron",
                "usuario_id": 2881
            }
        ],
        "usuario": "Udi",
        "usuario_id": 2631
    },
    {
        "_id": 1613,
        "fecha": { "$date" : "2013-01-17T22:12:04Z" },
        "decripcion": "\n{% with ''|center:n as range %}\n{% for _ in range %}\n    {{ forloop.counter }}\n{% endfor %}\n{% endwith %}\n\n    ",
        "votes": 140,
        "comentarios": [
            {
                "decripcion": "Great answer. Works because center creates a string of n spaces that are then looped over. Each space char is then ignored, but the current value in range can be found from forloop.counter (or forloop.counter0). See docs.djangoproject.com/en/dev/ref/templates/builtins/#center",
                "fecha": { "$date" : "2016-05-22T16:50:10Z" },
                "usuario": "isedwards",
                "usuario_id": 2882
            }
        ],
        "usuario": "Tomasz \u017by\u017aniewski",
        "usuario_id": 2883
    },
    {
        "_id": 1614,
        "fecha": { "$date" : "2009-07-10T05:00:58Z" },
        "decripcion": "\nUnfortunately, that's not supported in the Django template language. There are a couple  of suggestions, but they seem a little complex. I would just put a variable in the context:\n\n...\nrender_to_response('foo.html', {..., 'range': range(10), ...}, ...)\n...\n\n\nand in the template:\n\n{% for i in range %}\n     ...\n{% endfor %}\n\n    ",
        "votes": 115,
        "comentarios": [
            {
                "decripcion": "The motivations the Django authors had for disallowing plain python in templates seem pointless and inconsequential compared to the pain and lost time involved in working around not having it, not to mention the need to invent an entirely new langauge when a perfectly awesome one (python!) is already right there!",
                "fecha": { "$date" : "2016-02-11T16:40:49Z" },
                "usuario": "Bogatyr",
                "usuario_id": 2884
            },
            {
                "decripcion": "@Bogatyr If that's what you want, just use Jinja2: docs.djangoproject.com/en/1.9/topics/templates/\u2026",
                "fecha": { "$date" : "2016-02-11T21:02:56Z" },
                "usuario": "tghw",
                "usuario_id": 2885
            },
            {
                "decripcion": "@Bogatyr Because obviously nothing bad happens, when you can call clear_full_page_cache() in a template (seen in php/magento store, took considerable time to debug). Finally, it's not very sensible to let a server render this, when client side this can be done just as easy and cheaper, given that no data is associated with it (else you just iterate the data).",
                "fecha": { "$date" : "2021-03-24T19:13:35Z" },
                "usuario": "Melvyn",
                "usuario_id": 2886
            }
        ],
        "usuario": "tghw",
        "usuario_id": 2885
    },
    {
        "_id": 1615,
        "fecha": { "$date" : "2021-03-24T18:50:30Z" },
        "decripcion": "\nMy take on this issue, i think is the most pythonic. Create a my_filters.py in your apps templatetags directory.\n@register.filter(name='times') \ndef times(number):\n    return range(number)\n\nUsage in your template:\n{% load my_filters %}\n{% for i in 15|times %}\n    <li>Item</li>\n{% endfor %}\n\n    ",
        "votes": 102,
        "comentarios": [
            {
                "decripcion": "I think this is right solution. Do range(1, 16) to get numbers starting from 1, not 0.",
                "fecha": { "$date" : "2015-02-16T10:30:19Z" },
                "usuario": "chhantyal",
                "usuario_id": 2683
            },
            {
                "decripcion": "Also create an empty file _ init _.py in templatetags directory. Also add these line to top of my_filters.py  from django.template import Library;register = Library()",
                "fecha": { "$date" : "2015-03-23T05:42:48Z" },
                "usuario": "Ajeeb.K.P",
                "usuario_id": 2887
            },
            {
                "decripcion": "Add a second filter parameter and you get the full range function built into python. @register.filter(name='range') def filter_range(start, end):   return range(start, end) Then gets used as {% for i in 1|range:6 %}{% endfor %}. See full answer below....",
                "fecha": { "$date" : "2016-09-05T07:13:40Z" },
                "usuario": "Paul Kenjora",
                "usuario_id": 1251
            },
            {
                "decripcion": "I altered this slightly (excuse formatting): try:  return range(number)  except:  return [].  That way it never raises an error and returns an empty array (similar to how most template functions work).",
                "fecha": { "$date" : "2017-09-28T16:14:37Z" },
                "usuario": "Tim Tisdall",
                "usuario_id": 2888
            },
            {
                "decripcion": "In order to have a python solution, this seemed to me the best one",
                "fecha": { "$date" : "2020-07-07T18:51:54Z" },
                "usuario": "artu-hnrq",
                "usuario_id": 2889
            }
        ],
        "usuario": "Guillermo Siliceo Trueba",
        "usuario_id": 2890
    },
    {
        "_id": 1616,
        "fecha": { "$date" : "2016-04-13T00:46:31Z" },
        "decripcion": "\nYou can pass a binding of\n\n{'n' : range(n) }\n\n\nto the template, then do\n\n{% for i in n %}\n...\n{% endfor %}\n\n\nNote that you'll get 0-based behavior (0, 1, ... n-1).\n\n(Updated for Python3 compatibility)\n    ",
        "votes": 46,
        "comentarios": [
            {
                "decripcion": "Use range(n) in python 3, if I remember it correctly, xrange was deprecated on it",
                "fecha": { "$date" : "2016-04-11T13:20:24Z" },
                "usuario": "Fel\u00edcio",
                "usuario_id": 2891
            },
            {
                "decripcion": "Indeed yes. And that was one of two lines of code I had to chance in transitioning an app to Python3.",
                "fecha": { "$date" : "2016-04-13T00:45:36Z" },
                "usuario": "Dave W. Smith",
                "usuario_id": 2892
            }
        ],
        "usuario": "Dave W. Smith",
        "usuario_id": 2892
    },
    {
        "_id": 1617,
        "fecha": { "$date" : "2014-04-13T21:58:27Z" },
        "decripcion": "\nMaybe like this?\n\n{% for i in \"x\"|rjust:\"100\" %}\n...\n{% endfor %}\n\n    ",
        "votes": 43,
        "comentarios": [
            {
                "decripcion": "Works but not easy to read for another dev that comes along and sees it.",
                "fecha": { "$date" : "2021-03-24T18:47:35Z" },
                "usuario": "radtek",
                "usuario_id": 2893
            }
        ],
        "usuario": "CruelSilence",
        "usuario_id": 2894
    },
    {
        "_id": 1618,
        "fecha": { "$date" : "2018-06-25T10:45:53Z" },
        "decripcion": "\nYou can pass :\n\n{ 'n' : range(n) }\n\nTo use template :\n\n{% for i in n %}\n...\n{% endfor %}\n    ",
        "votes": 14,
        "comentarios": [
            {
                "decripcion": "readable and simple, easy to understand what's happening if you're the next guy maintaining the code",
                "fecha": { "$date" : "2019-07-03T15:39:39Z" },
                "usuario": "rossdavidh",
                "usuario_id": 2895
            }
        ],
        "usuario": "rkoots",
        "usuario_id": 2896
    },
    {
        "_id": 1619,
        "fecha": { "$date" : "2009-07-10T05:05:02Z" },
        "decripcion": "\nYou don't pass n itself, but rather range(n) [the list of integers from 0 to n-1 included], from your view to your template, and in the latter you do {% for i in therange %} (if you absolutely insist on 1-based rather than the normal 0-based index you can use forloop.counter in the loop's body;-).\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "Alex Martelli",
        "usuario_id": 288
    },
    {
        "_id": 1620,
        "fecha": { "$date" : "2017-05-23T12:26:37Z" },
        "decripcion": "\nI tried very hard on this question, and I find the best answer here: \n(from how to loop 7 times in the django templates)\n\nYou can even access the idx!\n\nviews.py:\n\ncontext['loop_times'] = range(1, 8)\n\n\nhtml:\n\n{% for i in loop_times %}\n        <option value={{ i }}>{{ i }}</option>\n{% endfor %}\n\n    ",
        "votes": 10,
        "comentarios": [],
        "usuario": "KKlalala",
        "usuario_id": 2897
    },
    {
        "_id": 1621,
        "fecha": { "$date" : "2010-02-14T22:50:48Z" },
        "decripcion": "\nJust incase anyone else comes across this question\u2026 I've created a template tag which lets you create a range(...): http://www.djangosnippets.org/snippets/1926/\n\nAccepts the same arguments as the 'range' builtin and creates a list containing\nthe result of 'range'.\n\nSyntax:\n    {% mkrange [start,] stop[, step] as context_name %}\n\nFor example:\n    {% mkrange 5 10 2 as some_range %}\n    {% for i in some_range %}\n      {{ i }}: Something I want to repeat\\n\n    {% endfor %}\n\nProduces:\n    5: Something I want to repeat \n    7: Something I want to repeat \n    9: Something I want to repeat\n\n\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "-1 in favour of Alex Pi's snippet which adds support of variable arguments.",
                "fecha": { "$date" : "2012-08-17T15:29:08Z" },
                "usuario": "m000",
                "usuario_id": 2898
            }
        ],
        "usuario": "David Wolever",
        "usuario_id": 2899
    },
    {
        "_id": 1622,
        "fecha": { "$date" : "2016-09-05T07:20:34Z" },
        "decripcion": "\nI'm just taking the popular answer a bit further and making it more robust.  This lets you specify any start point, so 0 or 1 for example.  It also uses python's range feature where the end is one less so it can be used directly with list lengths for example.\n\n@register.filter(name='range')\ndef filter_range(start, end):\n  return range(start, end)\n\n\nThen in your template just include the above template tag file and use the following:\n\n{% for c in 1|range:6 %}\n{{ c }}\n{% endfor %}\n\n\nNow you can do 1-6 instead of just 0-6 or hard coding it.  Adding a step would require a template tag, this should cover more uses cases so it's a step forward.\n    ",
        "votes": 9,
        "comentarios": [
            {
                "decripcion": "This is an extension of @guillermo-siliceo-trueba answer.",
                "fecha": { "$date" : "2016-09-05T07:22:35Z" },
                "usuario": "Paul Kenjora",
                "usuario_id": 1251
            },
            {
                "decripcion": "Great answer, you saved my time",
                "fecha": { "$date" : "2020-07-17T06:44:47Z" },
                "usuario": "Shamsul Arefin Sajib",
                "usuario_id": 2900
            }
        ],
        "usuario": "Paul Kenjora",
        "usuario_id": 1251
    },
    {
        "_id": 1623,
        "fecha": { "$date" : "2016-02-23T04:52:45Z" },
        "decripcion": "\nThis method supports all the functionality of the standard range([start,] stop[, step]) function\n\n<app>/templatetags/range.py\n\nfrom django import template\n\nregister = template.Library()\n\n\n@register.filter(name='range')\ndef _range(_min, args=None):\n    _max, _step = None, None\n    if args:\n        if not isinstance(args, int):\n            _max, _step = map(int, args.split(','))\n        else:\n            _max = args\n    args = filter(None, (_min, _max, _step))\n    return range(*args)\n\n\nUsage:\n\n{% load range %}\n\n<p>stop 5\n{% for value in 5|range %}\n{{ value }}\n{% endfor %}\n</p>\n\n<p>start 5 stop 10\n{% for value in 5|range:10 %}\n{{ value }}\n{% endfor %}\n</p>\n\n<p>start 5 stop 10 step 2\n{% for value in 5|range:\"10,2\" %}\n{{ value }}\n{% endfor %}\n</p>\n\n\nOutput\n\n<p>stop 5\n0 1 2 3 4\n</p>\n\n<p>start 5 stop 10\n5 6 7 8 9\n</p>\n\n<p>start 5 stop 10 step 2\n5 7 9\n</p>\n\n    ",
        "votes": 8,
        "comentarios": [
            {
                "decripcion": "your solution does not work on for value in 0|range:\"10,2\". You have to change your code as follow: args = filter(lambda x: isinstance(x, int) and x >= 0, (_min, _max, _step))",
                "fecha": { "$date" : "2020-02-28T03:05:28Z" },
                "usuario": "Bedilbek",
                "usuario_id": 2901
            },
            {
                "decripcion": "@Bedilbek this code mimics the standard python range. even it doesn't support negative ranges without an explicit step parameter. >>> list(range(10,2)) [] >>> list(range(10,2,-1)) [10, 9, 8, 7, 6, 5, 4, 3]",
                "fecha": { "$date" : "2020-02-28T08:31:05Z" },
                "usuario": "Rebs",
                "usuario_id": 2902
            }
        ],
        "usuario": "Rebs",
        "usuario_id": 2902
    },
    {
        "_id": 1624,
        "fecha": { "$date" : "2012-08-15T03:30:23Z" },
        "decripcion": "\nYou should use \"slice\" in template, a example like this:\n\nin views.py\n\ncontexts = {\n    'ALL_STORES': Store.objects.all(),\n}\n\nreturn render_to_response('store_list.html', contexts, RequestContext(request, processors=[custom_processor]))\n\n\nin store_list.html:\n\n<ul>\n{% for store in ALL_STORES|slice:\":10\" %}\n    <li class=\"store_item\">{{ store.name }}</li>\n{% endfor %}\n</ul>\n\n    ",
        "votes": 7,
        "comentarios": [
            {
                "decripcion": "Not sure if this is what the OP was looking for, but it's exactly what I was looking for. =)",
                "fecha": { "$date" : "2014-03-21T17:49:27Z" },
                "usuario": "GChorn",
                "usuario_id": 2903
            }
        ],
        "usuario": "Vinta",
        "usuario_id": 2904
    },
    {
        "_id": 1625,
        "fecha": { "$date" : "2017-02-27T16:27:40Z" },
        "decripcion": "\nThis essentially requires a range function. A Django feature ticket was raised (https://code.djangoproject.com/ticket/13088) for this but closed as \"won't fix\" with the following comment.\n\n\n  My impression of this idea is that it is trying to lead to programming in the template. If you have a list of options that need to be rendered, they should be computed in the view, not in the template. If that's as simple as a range of values, then so be it.\n\n\nThey have a good point - Templates are supposed to be very simple representations of the view. You should create the limited required data in the view and pass to the template in the context.\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "The view should be for data, the template should be for presentation. The view should not require knowledge of the contents of the template, specifically ranges. Django's reason for ignoring these feature requests is utter rubbish.",
                "fecha": { "$date" : "2017-05-17T05:40:57Z" },
                "usuario": "Rebs",
                "usuario_id": 2902
            }
        ],
        "usuario": "Alastair McCormack",
        "usuario_id": 2905
    },
    {
        "_id": 1626,
        "fecha": { "$date" : "2011-03-10T18:45:11Z" },
        "decripcion": "\nIf the number is coming from a model, I found this to be a nice patch to the model:\n\ndef iterableQuantity(self):\n    return range(self.quantity)\n\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "Not sure why you're getting down voted, it's a valid answer. I don't like this solution compared to implementing a proper filter as I've provided above. DB models should be kept lean. But it's still better than the majority accepted answer.",
                "fecha": { "$date" : "2017-05-17T05:42:13Z" },
                "usuario": "Rebs",
                "usuario_id": 2902
            },
            {
                "decripcion": "I don't even know\u2026",
                "fecha": { "$date" : "2017-05-18T20:18:36Z" },
                "usuario": "Alper",
                "usuario_id": 2906
            },
            {
                "decripcion": "I am 9 years too late but I upvoted you fam, don't even worry about it.",
                "fecha": { "$date" : "2019-06-08T04:21:29Z" },
                "usuario": "Sahil",
                "usuario_id": 2907
            }
        ],
        "usuario": "Alper",
        "usuario_id": 2906
    },
    {
        "_id": 1627,
        "fecha": { "$date" : "2016-09-14T23:14:17Z" },
        "decripcion": "\nYou can use:\n{% with ''|center: i as range %}\n    ",
        "votes": 3,
        "comentarios": [
            {
                "decripcion": "Can you provide an example/explanation of how this works?",
                "fecha": { "$date" : "2017-05-17T05:42:55Z" },
                "usuario": "Rebs",
                "usuario_id": 2902
            }
        ],
        "usuario": "rkoots",
        "usuario_id": 2896
    },
    {
        "_id": 1628,
        "fecha": { "$date" : "2020-03-14T03:06:51Z" },
        "decripcion": "\nFor those who are looking to simple answer, just needing  to display an amount of values, let say 3 from 100 posts for example just add {% for post in posts|slice:\"3\" %} and loop it normally and only 3 posts will be added. \n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Elias Prado",
        "usuario_id": 2908
    },
    {
        "_id": 1629,
        "fecha": { "$date" : "2020-08-28T11:21:02Z" },
        "decripcion": "\nThis shows 1 to 20 numbers:\n{% for i in \"x\"|rjust:\"20\"|make_list %}\n {{ forloop.counter }}\n{% endfor %}\n\nalso this can help you:\n(count_all_slider_objects come from views)\n{% for i in \"x\"|rjust:count_all_slider_objects %}\n  {{ forloop.counter }}\n{% endfor %}\n\nor\n  {% with counter=count_all_slider_objects %}\n    {% if list_all_slider_objects %}\n      {%  for slide in list_all_slider_objects %}\n        {{forloop.counter|add:\"-1\"}}\n        {% endfor%}\n      {% endif %}\n    {% endwith %}\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "namjoo.org",
        "usuario_id": 2909
    },
    {
        "_id": 1630,
        "fecha": { "$date" : "2021-02-04T23:41:35Z" },
        "decripcion": "\n{% for _ in ''|center:13 %}\n    {{ forloop.counter }}\n{% endfor %}\n\n    ",
        "votes": 0,
        "comentarios": [
            {
                "decripcion": "While this code may provide a solution to the question, it's better to add context as to why/how it works. This can help future users learn and eventually apply that knowledge to their own code.  You are also likely to have positive-feedback/upvotes from users, when the code is explained.",
                "fecha": { "$date" : "2021-02-05T11:27:53Z" },
                "usuario": "Amit Verma",
                "usuario_id": 2910
            },
            {
                "decripcion": "@AmitVerma I forgot what I said in the last two replies to your comment that someone deleted. Sorry about that.",
                "fecha": { "$date" : "2021-09-08T22:37:41Z" },
                "usuario": "Jan Kyu Peblik",
                "usuario_id": 2911
            }
        ],
        "usuario": "Jan Kyu Peblik",
        "usuario_id": 2911
    },
    {
        "_id": 1631,
        "fecha": { "$date" : "2021-08-07T21:04:33Z" },
        "decripcion": "\nYou can pass range(n) instead of n in the context in views.py. This will give you an iterable list.\ncontext['range']= range(n)\n\nThen you can iterate in your template this way:\n{% for i in range %}\n   <!-- your code -->\n{% endfor %}\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Srishti Ahuja",
        "usuario_id": 2912
    },
    {
        "_id": 1632,
        "fecha": { "$date" : "2019-11-14T15:18:17Z" },
        "decripcion": "\n{% for i in range(10) %}\n   {{ i }}\n\n{% endfor %}\n\n    ",
        "votes": -8,
        "comentarios": [
            {
                "decripcion": "While this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.",
                "fecha": { "$date" : "2019-11-14T15:37:17Z" },
                "usuario": "xiawi",
                "usuario_id": 2913
            }
        ],
        "usuario": "Muhammad Abdullah",
        "usuario_id": 2914
    },
    {
        "_id": 1633,
        "fecha": { "$date" : "2021-04-13T11:14:55Z" },
        "decripcion": "\nIf you mean to do aggregation you can use the aggregation features of the ORM:\nfrom django.db.models import Count\nresult = (Members.objects\n    .values('designation')\n    .annotate(dcount=Count('designation'))\n    .order_by()\n)\n\nThis results in a query similar to\nSELECT designation, COUNT(designation) AS dcount\nFROM members GROUP BY designation\n\nand the output would be of the form\n[{'designation': 'Salesman', 'dcount': 2}, \n {'designation': 'Manager', 'dcount': 2}]\n\nIf you don't include the order_by(), you may get incorrect results if the default sorting is not what you expect.\nIf you want to include multiple fields in the results, just add them as arguments to values, for example:\n    .values('designation', 'first_name', 'last_name')\n\nReferences:\n\nDjango documentation: values(), annotate(), and Count\nDjango documentation: Aggregation, and in particular the section entitled Interaction with default ordering or order_by()\n\n    ",
        "votes": 602,
        "comentarios": [
            {
                "decripcion": "@Harry: You can chain it. Something like: Members.objects.filter(date=some_date).values('designation').annotate(dcount=Count('designation'))",
                "fecha": { "$date" : "2013-05-15T23:14:47Z" },
                "usuario": "Eli",
                "usuario_id": 585
            },
            {
                "decripcion": "i have a question, this query is only returning designation and dcount, what if i want to get other values of the table too?",
                "fecha": { "$date" : "2014-03-05T08:02:39Z" },
                "usuario": "A.J.",
                "usuario_id": 2826
            },
            {
                "decripcion": "Note that if your sorting is a field other than designation, it will not work without resetting the sort. See stackoverflow.com/a/1341667/202137",
                "fecha": { "$date" : "2014-05-05T19:41:13Z" },
                "usuario": "Gidgidonihah",
                "usuario_id": 2916
            },
            {
                "decripcion": "@Gidgidonihah True, the example should read Members.objects.order_by('disignation').values('designation').annotate(dcount=Count('designation'))",
                "fecha": { "$date" : "2014-10-30T15:16:33Z" },
                "usuario": "bjunix",
                "usuario_id": 2917
            },
            {
                "decripcion": "i have a question, this query is only returning designation and dcount, what if i want to get other values of the table too?",
                "fecha": { "$date" : "2016-10-26T02:18:39Z" },
                "usuario": "Yann\u53f6",
                "usuario_id": 2918
            }
        ],
        "usuario": "Gu\u00f0mundur H",
        "usuario_id": 2919
    },
    {
        "_id": 1634,
        "fecha": { "$date" : "2019-04-07T18:23:30Z" },
        "decripcion": "\nAn easy solution, but not the proper way is to use raw SQL:\n\nresults = Members.objects.raw('SELECT * FROM myapp_members GROUP BY designation')\n\n\nAnother solution is to use the group_by property:\n\nquery = Members.objects.all().query\nquery.group_by = ['designation']\nresults = QuerySet(query=query, model=Members)\n\n\nYou can now iterate over the results variable to retrieve your results. Note that group_by is not documented and may be changed in future version of Django.\n\nAnd... why do you want to use group_by? If you don't use aggregation, you can use order_by to achieve an alike result.\n    ",
        "votes": 63,
        "comentarios": [
            {
                "decripcion": "Can you please tell me how to do it using order_by??",
                "fecha": { "$date" : "2009-03-10T11:19:29Z" },
                "usuario": "simplyharsh",
                "usuario_id": 2920
            },
            {
                "decripcion": "Hi, if you are not using aggregation you could emulate group_by by using an order_by and eliminate the entries you don't need. Of course, this is an emulation and is only useable when using not a lot of data. Since he didn't speak of aggregation, I thought it could be a solution.",
                "fecha": { "$date" : "2009-03-11T10:28:17Z" },
                "usuario": "Michael",
                "usuario_id": 303
            },
            {
                "decripcion": "Hey this is great - can you please explain how to the use execute_sql  it doesn't appear to work..",
                "fecha": { "$date" : "2012-07-12T23:47:28Z" },
                "usuario": "rh0dium",
                "usuario_id": 2921
            },
            {
                "decripcion": "Note this no longer works on Django 1.9.  stackoverflow.com/questions/35558120/\u2026",
                "fecha": { "$date" : "2017-03-08T18:46:37Z" },
                "usuario": "grokpot",
                "usuario_id": 2922
            },
            {
                "decripcion": "This is kind of a hack-ish way to use the ORM. You shouldn't have to instantiate new querysets passing in old ones manually.",
                "fecha": { "$date" : "2018-04-19T13:34:41Z" },
                "usuario": "Ian Kirkpatrick",
                "usuario_id": 2923
            }
        ],
        "usuario": "ANON",
        "usuario_id": 63
    },
    {
        "_id": 1635,
        "fecha": { "$date" : "2021-09-03T19:24:54Z" },
        "decripcion": "\nYou can also use the regroup template tag to group by attributes. From the docs:\ncities = [\n    {'name': 'Mumbai', 'population': '19,000,000', 'country': 'India'},\n    {'name': 'Calcutta', 'population': '15,000,000', 'country': 'India'},\n    {'name': 'New York', 'population': '20,000,000', 'country': 'USA'},\n    {'name': 'Chicago', 'population': '7,000,000', 'country': 'USA'},\n    {'name': 'Tokyo', 'population': '33,000,000', 'country': 'Japan'},\n]\n\n...\n\n{% regroup cities by country as countries_list %}\n\n<ul>\n    {% for country in countries_list %}\n        <li>{{ country.grouper }}\n            <ul>\n            {% for city in country.list %}\n                <li>{{ city.name }}: {{ city.population }}</li>\n            {% endfor %}\n            </ul>\n        </li>\n    {% endfor %}\n</ul>\n\nLooks like this:\n\nIndia\n\nMumbai: 19,000,000\nCalcutta: 15,000,000\n\n\nUSA\n\nNew York: 20,000,000\nChicago: 7,000,000\n\n\nJapan\n\nTokyo: 33,000,000\n\n\n\nIt also works on QuerySets I believe.\nsource: https://docs.djangoproject.com/en/2.1/ref/templates/builtins/#regroup\nedit: note the regroup tag does not work as you would expect it to if your list of dictionaries is not key-sorted. It works iteratively. So sort your list (or query set) by the key of the grouper before passing it to the regroup tag.\n    ",
        "votes": 48,
        "comentarios": [
            {
                "decripcion": "This is perfect!  I've searched a lot for a simple way to do this. And it works on querysets as well, that's how I used it.",
                "fecha": { "$date" : "2018-02-27T11:43:23Z" },
                "usuario": "CarmenA",
                "usuario_id": 2924
            },
            {
                "decripcion": "this is totally wrong if you read from database big set of data and then just use aggregated values.",
                "fecha": { "$date" : "2018-03-02T12:34:30Z" },
                "usuario": "S\u0142awomir Lenart",
                "usuario_id": 2652
            },
            {
                "decripcion": "@S\u0142awomirLenart sure, this might not be as efficient as a straight DB query. But for simple use cases it can be a nice solution",
                "fecha": { "$date" : "2018-03-02T18:55:54Z" },
                "usuario": "inostia",
                "usuario_id": 2925
            },
            {
                "decripcion": "This will work if the result shown in template. But, for JsonResponse or other indirect response. this solution will not work.",
                "fecha": { "$date" : "2018-07-20T08:53:05Z" },
                "usuario": "Willy satrio nugroho",
                "usuario_id": 2926
            },
            {
                "decripcion": "@Willysatrionugroho if you wanted to do it in a view, for example, stackoverflow.com/questions/477820/\u2026 might work for you",
                "fecha": { "$date" : "2018-07-20T17:32:06Z" },
                "usuario": "inostia",
                "usuario_id": 2925
            }
        ],
        "usuario": "inostia",
        "usuario_id": 2925
    },
    {
        "_id": 1636,
        "fecha": { "$date" : "2015-11-12T18:06:20Z" },
        "decripcion": "\nDjango does not support free group by queries. I learned it in the very bad way. ORM is not designed to support stuff like what you want to do, without using custom SQL. You are limited to:\n\n\nRAW sql (i.e. MyModel.objects.raw())\ncr.execute sentences (and a hand-made parsing of the result).\n.annotate() (the group by sentences are performed in the child model for .annotate(), in examples like aggregating lines_count=Count('lines'))).\n\n\nOver a queryset qs you can call qs.query.group_by = ['field1', 'field2', ...] but it is risky if you don't know what query are you editing and have no guarantee that it will work and not break internals of the QuerySet object. Besides, it is an internal (undocumented) API you should not access directly without risking the code not being anymore compatible with future Django versions.\n    ",
        "votes": 7,
        "comentarios": [
            {
                "decripcion": "indeed you are limited not only in free group-by, so try SQLAlchemy instead of Django ORM.",
                "fecha": { "$date" : "2018-03-02T12:38:01Z" },
                "usuario": "S\u0142awomir Lenart",
                "usuario_id": 2652
            }
        ],
        "usuario": "Luis Masuelli",
        "usuario_id": 2927
    },
    {
        "_id": 1637,
        "fecha": { "$date" : "2009-03-10T10:24:57Z" },
        "decripcion": "\nYou need to do custom SQL as exemplified in this snippet:\n\nCustom SQL via subquery\n\nOr in a custom manager as shown in the online Django docs:\n\nAdding extra Manager methods\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "Kind of round-trip solution. I would have used it, if i had some extended use of that. But here i just need the number of members per designation thats all.",
                "fecha": { "$date" : "2009-03-10T11:22:06Z" },
                "usuario": "simplyharsh",
                "usuario_id": 2920
            },
            {
                "decripcion": "No problem.  I thought about mentioning 1.1 aggregation features but made the assumption you were using the release version :)",
                "fecha": { "$date" : "2009-03-10T11:26:44Z" },
                "usuario": "Van Gale",
                "usuario_id": 2755
            },
            {
                "decripcion": "It's all about using raw queries, which show the weakness of Django's ORM.",
                "fecha": { "$date" : "2018-03-02T12:46:45Z" },
                "usuario": "S\u0142awomir Lenart",
                "usuario_id": 2652
            }
        ],
        "usuario": "Van Gale",
        "usuario_id": 2755
    },
    {
        "_id": 1638,
        "fecha": { "$date" : "2020-06-26T09:06:38Z" },
        "decripcion": "\nThe following module allows you to group Django models and still work with a QuerySet in the result: https://github.com/kako-nawao/django-group-by\nFor example:\nfrom django_group_by import GroupByMixin\n\nclass BookQuerySet(QuerySet, GroupByMixin):\n    pass\n\nclass Book(Model):\n    title = TextField(...)\n    author = ForeignKey(User, ...)\n    shop = ForeignKey(Shop, ...)\n    price = DecimalField(...)\n\n\nclass GroupedBookListView(PaginationMixin, ListView):\n    template_name = 'book/books.html'\n    model = Book\n    paginate_by = 100\n\n    def get_queryset(self):\n        return Book.objects.group_by('title', 'author').annotate(\n            shop_count=Count('shop'), price_avg=Avg('price')).order_by(\n            'name', 'author').distinct()\n\n    def get_context_data(self, **kwargs):\n        return super().get_context_data(total_count=self.get_queryset().count(), **kwargs)\n\n'book/books.html'\n<ul>\n{% for book in object_list %}\n    <li>\n        <h2>{{ book.title }}</td>\n        <p>{{ book.author.last_name }}, {{ book.author.first_name }}</p>\n        <p>{{ book.shop_count }}</p>\n        <p>{{ book.price_avg }}</p>\n    </li>\n{% endfor %}\n</ul>\n\nThe difference to the annotate/aggregate basic Django queries is the use of the attributes of a related field, e.g. book.author.last_name.\nIf you need the PKs of the instances that have been grouped together, add the following annotation:\n.annotate(pks=ArrayAgg('id'))\n\nNOTE: ArrayAgg is a Postgres specific function, available from Django 1.9 onwards: https://docs.djangoproject.com/en/1.10/ref/contrib/postgres/aggregates/#arrayagg\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "This django-group-by is an alternative to the values method. It's for different purpose I think.",
                "fecha": { "$date" : "2017-07-06T09:21:13Z" },
                "usuario": "LShi",
                "usuario_id": 2928
            },
            {
                "decripcion": "@LShi It's not an alternative to values, of course not. values is an SQL select while group_by is an SQL group by (as the name indicates...). Why the downvote? We are using such code in production to implement complex group_by statements.",
                "fecha": { "$date" : "2017-07-07T11:56:28Z" },
                "usuario": "Risadinha",
                "usuario_id": 2929
            },
            {
                "decripcion": "Its doc says group_by \"behaves mostly like the values method, but with one difference...\" The doc doesn't mention SQL GROUP BY and the use case it provides doesn't suggest it has anything to do with SQL GROUP BY. I will draw back the down-vote when someone has made this clear, but that doc is really misleading.",
                "fecha": { "$date" : "2017-07-07T14:00:29Z" },
                "usuario": "LShi",
                "usuario_id": 2928
            },
            {
                "decripcion": "After reading the doc for values, I found I missed that values itself works like a GROUP BY. It's my fault. I think it's simpler to use itertools.groupby than this django-group-by when values is insufficient.",
                "fecha": { "$date" : "2017-07-07T15:37:21Z" },
                "usuario": "LShi",
                "usuario_id": 2928
            },
            {
                "decripcion": "It is impossible to do the group by from above with a simple values call -with or without annotate and without fetching everything from the database. Your suggestion of itertools.groupby works for small datasets but not for several thousands of datasets that you probably want to page. Of course, at that point you'll have to think about a special search index that contains prepared (already grouped) data, anyway.",
                "fecha": { "$date" : "2017-07-08T17:24:28Z" },
                "usuario": "Risadinha",
                "usuario_id": 2929
            }
        ],
        "usuario": "Risadinha",
        "usuario_id": 2929
    },
    {
        "_id": 1639,
        "fecha": { "$date" : "2021-07-02T10:21:57Z" },
        "decripcion": "\nThe documentation says that you can use values to group the queryset .\nclass Travel(models.Model):\n    interest = models.ForeignKey(Interest)\n    user = models.ForeignKey(User)\n    time = models.DateTimeField(auto_now_add=True)\n\n# Find the travel and group by the interest:\n\n>>> Travel.objects.values('interest').annotate(Count('user'))\n<QuerySet [{'interest': 5, 'user__count': 2}, {'interest': 6, 'user__count': 1}]>\n# the interest(id=5) had been visited for 2 times, \n# and the interest(id=6) had only been visited for 1 time.\n\n>>> Travel.objects.values('interest').annotate(Count('user', distinct=True)) \n<QuerySet [{'interest': 5, 'user__count': 1}, {'interest': 6, 'user__count': 1}]>\n# the interest(id=5) had been visited by only one person (but this person had \n#  visited the interest for 2 times\n\nYou can find all the books and group them by name using this code:\nBook.objects.values('name').annotate(Count('id')).order_by() # ensure you add the order_by()\n\nYou can watch some cheat sheet here.\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "Why you need group_by() to return the right result?",
                "fecha": { "$date" : "2020-10-05T14:55:34Z" },
                "usuario": "realnot",
                "usuario_id": 2930
            }
        ],
        "usuario": "ramwin",
        "usuario_id": 2931
    },
    {
        "_id": 1640,
        "fecha": { "$date" : "2021-03-05T11:47:58Z" },
        "decripcion": "\nIf, in other words, you need to just \"remove duplicates\" based on some field, and otherwise just to query the ORM objects as they are, I came up with the following workaround:\nfrom django.db.models import OuterRef, Exists\n\nqs = Members.objects.all()\nqs = qs.annotate(is_duplicate=Exists(\n    Members.objects.filter(\n        id__lt=OuterRef('id'),\n        designation=OuterRef('designation')))\nqs = qs.filter(is_duplicate=False)\n\nSo, basically we're just annotating the is_duplicate value by using some convenient filtering (which might vary based on your model and requirements), and then simply using that field to filter out the duplicates.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Raekkeri",
        "usuario_id": 2932
    },
    {
        "_id": 1641,
        "fecha": { "$date" : "2021-08-27T10:29:24Z" },
        "decripcion": "\nYou could also use pythons built-in itertools.groupby directly:\nfrom itertools import groupby\n\ndesignation_key_func = lambda member: member.designation\nqueryset = Members.objects.all().select_related(\"designation\")\n\nfor designation, member_group in groupby(queryset, designation_key_func):\n    print(f\"{designation} : {list(member_group)}\")\n\nNo raw sql, subqueries, third-party-libs or templatetags needed and pythonic and explicit in my eyes.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "ralfzen",
        "usuario_id": 2933
    },
    {
        "_id": 1642,
        "fecha": { "$date" : "2018-09-24T03:51:14Z" },
        "decripcion": "\nfrom django.db.models import Sum\nMembers.objects.annotate(total=Sum(designation))\n\n\nfirst you need to import Sum\nthen ..\n    ",
        "votes": -4,
        "comentarios": [],
        "usuario": "Kiran S youtube channel",
        "usuario_id": 2934
    },
    {
        "_id": 1643,
        "fecha": { "$date" : "2019-02-13T18:04:50Z" },
        "decripcion": "\nAs pointed out in this answer, Django 1.9 added the Field.disabled attribute:\n\n\n  The disabled boolean argument, when set to True, disables a form field using the disabled HTML attribute so that it won\u2019t be editable by users. Even if a user tampers with the field\u2019s value submitted to the server, it will be ignored in favor of the value from the form\u2019s initial data.\n\n\nWith Django 1.8 and earlier, to disable entry on the widget and prevent malicious POST hacks you must scrub the input in addition to setting the readonly attribute on the form field:\n\nclass ItemForm(ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(ItemForm, self).__init__(*args, **kwargs)\n        instance = getattr(self, 'instance', None)\n        if instance and instance.pk:\n            self.fields['sku'].widget.attrs['readonly'] = True\n\n    def clean_sku(self):\n        instance = getattr(self, 'instance', None)\n      \u00a0 if instance and instance.pk:\n        \u00a0 \u00a0 return instance.sku\n      \u00a0 else:\n        \u00a0 \u00a0 return self.cleaned_data['sku']\n\n\nOr, replace if instance and instance.pk with another condition indicating you're editing.  You could also set the attribute disabled on the input field, instead of readonly.\n\nThe clean_sku function will ensure that the readonly value won't be overridden by a POST.\n\nOtherwise, there is no built-in Django form field which will render a value while rejecting bound input data.  If this is what you desire, you should instead create a separate ModelForm that excludes the uneditable field(s), and just print them inside your template.\n    ",
        "votes": 463,
        "comentarios": [
            {
                "decripcion": "Daniel, Thanks for posting an answer. It is not clear to me how to use this code? wouldn't this code work for same for new as well update mode? Can you edit your answer to give examples on how to use it for new and update forms? Thanks.",
                "fecha": { "$date" : "2008-11-29T16:29:09Z" },
                "usuario": "X10",
                "usuario_id": 2935
            },
            {
                "decripcion": "The key to Daniel's example is testing the .id field. Newly created objects will have id==None. By the way, one of the oldest open Django tickets is about this issue. See code.djangoproject.com/ticket/342 .",
                "fecha": { "$date" : "2008-11-29T16:52:31Z" },
                "usuario": "Peter Rowell",
                "usuario_id": 2936
            },
            {
                "decripcion": "@moadeep add a clean_description method to the form class.",
                "fecha": { "$date" : "2015-04-17T16:41:14Z" },
                "usuario": "Daniel Naab",
                "usuario_id": 2832
            },
            {
                "decripcion": "on linux (ubuntu 15 ) / chrome v45, readonly changes the pointer to a \"disabled hand\" but the field is then clickable. with disabled it works as expected",
                "fecha": { "$date" : "2015-10-08T10:19:48Z" },
                "usuario": "simone cittadini",
                "usuario_id": 2937
            },
            {
                "decripcion": "This answer needs to be updated. A new field argument disabled is added in Django 1.9. If Field.disabled is set to True, then POST value for that Field is ignored. So if you're using 1.9, there's no need to override clean, just set disabled = True. Check this answer.",
                "fecha": { "$date" : "2016-06-05T05:09:05Z" },
                "usuario": "narendra-choudhary",
                "usuario_id": 2938
            }
        ],
        "usuario": "Daniel Naab",
        "usuario_id": 2832
    },
    {
        "_id": 1644,
        "fecha": { "$date" : "2019-02-13T14:34:37Z" },
        "decripcion": "\nDjango 1.9 added the Field.disabled attribute: https://docs.djangoproject.com/en/stable/ref/forms/fields/#disabled\n\n\n  The disabled boolean argument, when set to True, disables a form field using the disabled HTML attribute so that it won\u2019t be editable by users. Even if a user tampers with the field\u2019s value submitted to the server, it will be ignored in favor of the value from the form\u2019s initial data.\n\n    ",
        "votes": 190,
        "comentarios": [
            {
                "decripcion": "Nothing for 1.8 LTS ?",
                "fecha": { "$date" : "2016-04-11T15:02:59Z" },
                "usuario": "dnit13",
                "usuario_id": 2939
            },
            {
                "decripcion": "any idea how we can use this on an UpdateView ? As it generates the fields from the model...",
                "fecha": { "$date" : "2016-07-01T18:54:49Z" },
                "usuario": "bcsanches",
                "usuario_id": 2940
            },
            {
                "decripcion": "Correct answer. My solution \tclass MyChangeForm(forms.ModelForm):  \t    def __init__(self, *args, **kwargs): \t        super(MyChangeForm, self).__init__(*args, **kwargs) \t        self.fields['my_field'].disabled = True",
                "fecha": { "$date" : "2017-01-18T20:03:30Z" },
                "usuario": "Vijay Katam",
                "usuario_id": 2941
            },
            {
                "decripcion": "This is a problematic answer - setting disabled=True will cause the model to be  spat back to the user with validation errors.",
                "fecha": { "$date" : "2018-01-11T21:55:32Z" },
                "usuario": "Ben",
                "usuario_id": 183
            },
            {
                "decripcion": "Would be awesome if you could include an example",
                "fecha": { "$date" : "2018-08-23T15:00:11Z" },
                "usuario": "geoidesic",
                "usuario_id": 2942
            }
        ],
        "usuario": "MDB",
        "usuario_id": 2943
    },
    {
        "_id": 1645,
        "fecha": { "$date" : "2020-02-05T15:31:54Z" },
        "decripcion": "\nSetting readonly on a widget only makes the input in the browser read-only. Adding a clean_sku which returns instance.sku ensures the field value will not change on form level.\n\ndef clean_sku(self):\n    if self.instance: \n        return self.instance.sku\n    else: \n        return self.fields['sku']\n\n\nThis way you can use model's (unmodified save) and avoid getting the field required error.\n    ",
        "votes": 99,
        "comentarios": [
            {
                "decripcion": "+1 This is a great way to avoid more complicated save() overrides.  However, you'd want to do an instance check before the return (in newline-less comment mode): \"if self.instance: return self.instance.sku; else: return self.fields['sku']\"",
                "fecha": { "$date" : "2009-01-25T06:08:02Z" },
                "usuario": "Daniel Naab",
                "usuario_id": 2832
            },
            {
                "decripcion": "For the last line, would return self.cleaned_data['sku'] be as good or better? The docs seem to suggest using cleaned_data: \"The return value of this method replaces the existing value in cleaned_data, so it must be the field\u2019s value from cleaned_data (even if this method didn\u2019t change it) or a new cleaned value.\"",
                "fecha": { "$date" : "2019-07-24T18:28:50Z" },
                "usuario": "pianoJames",
                "usuario_id": 2944
            }
        ],
        "usuario": "muhuk",
        "usuario_id": 2945
    },
    {
        "_id": 1646,
        "fecha": { "$date" : "2017-05-23T11:47:36Z" },
        "decripcion": "\nawalker's answer helped me a lot!\n\nI've changed his example to work with Django 1.3, using get_readonly_fields.\n\nUsually you should declare something like this in app/admin.py:\n\nclass ItemAdmin(admin.ModelAdmin):\n    ...\n    readonly_fields = ('url',)\n\n\nI've adapted in this way:\n\n# In the admin.py file\nclass ItemAdmin(admin.ModelAdmin):\n    ...\n    def get_readonly_fields(self, request, obj=None):\n        if obj:\n            return ['url']\n        else:\n            return []\n\n\nAnd it works fine. Now if you add an Item, the url field is read-write, but on change it becomes read-only.\n    ",
        "votes": 76,
        "comentarios": [],
        "usuario": "chirale",
        "usuario_id": 2946
    },
    {
        "_id": 1647,
        "fecha": { "$date" : "2019-03-07T17:27:47Z" },
        "decripcion": "\nTo make this work for a ForeignKey field, a few changes need to be made.  Firstly, the SELECT HTML tag does not have the readonly attribute.  We need to use disabled=\"disabled\" instead.  However, then the browser doesn't send any form data back for that field.  So we need to set that field to not be required so that the field validates correctly.  We then need to reset the value back to what it used to be so it's not set to blank.  \n\nSo for foreign keys you will need to do something like:\n\nclass ItemForm(ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        super(ItemForm, self).__init__(*args, **kwargs)\n        instance = getattr(self, 'instance', None)\n        if instance and instance.id:\n            self.fields['sku'].required = False\n            self.fields['sku'].widget.attrs['disabled'] = 'disabled'\n\n    def clean_sku(self):\n        # As shown in the above answer.\n        instance = getattr(self, 'instance', None)\n        if instance:\n            return instance.sku\n        else:\n            return self.cleaned_data.get('sku', None)\n\n\nThis way the browser won't let the user change the field, and will always POST as it it was left blank.  We then override the clean method to set the field's value to be what was originally in the instance.\n    ",
        "votes": 61,
        "comentarios": [
            {
                "decripcion": "I tried to use it as form in TabularInline, but failed because attrs were shared between widget instances and all but the first row, including the newly added, rendered read only.",
                "fecha": { "$date" : "2016-04-01T09:58:13Z" },
                "usuario": "dhill",
                "usuario_id": 2947
            },
            {
                "decripcion": "A great (update) solution! Unfortunately this and the rest have issues when there are form errors as all \"disabled\" values get emptied.",
                "fecha": { "$date" : "2016-05-23T06:48:48Z" },
                "usuario": "Michael Thompson",
                "usuario_id": 2948
            }
        ],
        "usuario": "Humphrey",
        "usuario_id": 2949
    },
    {
        "_id": 1648,
        "fecha": { "$date" : "2016-05-15T18:26:02Z" },
        "decripcion": "\nFor Django 1.2+, you can override the field like so:\n\nsku = forms.CharField(widget = forms.TextInput(attrs={'readonly':'readonly'}))\n\n    ",
        "votes": 35,
        "comentarios": [
            {
                "decripcion": "This does not allow the field to be edited at add time either, which is what the original question is about.",
                "fecha": { "$date" : "2011-02-28T05:36:46Z" },
                "usuario": "Matt S.",
                "usuario_id": 2950
            },
            {
                "decripcion": "This is the answer that I'm looking for. Field disabled doesn't do what I want because it disables the field, but also removes label / make it invisible.",
                "fecha": { "$date" : "2016-06-29T13:33:54Z" },
                "usuario": "sivabudh",
                "usuario_id": 2951
            }
        ],
        "usuario": "StefanNch",
        "usuario_id": 2952
    },
    {
        "_id": 1649,
        "fecha": { "$date" : "2016-05-15T18:30:27Z" },
        "decripcion": "\nI made a MixIn class which you may inherit to be able to add a read_only iterable field which will disable and secure fields on the non-first edit:\n\n(Based on Daniel's and Muhuk's answers)\n\nfrom django import forms\nfrom django.db.models.manager import Manager\n\n# I used this instead of lambda expression after scope problems\ndef _get_cleaner(form, field):\n    def clean_field():\n         value = getattr(form.instance, field, None)\n         if issubclass(type(value), Manager):\n             value = value.all()\n         return value\n    return clean_field\n\nclass ROFormMixin(forms.BaseForm):\n    def __init__(self, *args, **kwargs):\n        super(ROFormMixin, self).__init__(*args, **kwargs)\n        if hasattr(self, \"read_only\"):\n            if self.instance and self.instance.pk:\n                for field in self.read_only:\n                    self.fields[field].widget.attrs['readonly'] = \"readonly\"\n                    setattr(self, \"clean_\" + field, _get_cleaner(self, field))\n\n# Basic usage\nclass TestForm(AModelForm, ROFormMixin):\n    read_only = ('sku', 'an_other_field')\n\n    ",
        "votes": 18,
        "comentarios": [],
        "usuario": "christophe31",
        "usuario_id": 2953
    },
    {
        "_id": 1650,
        "fecha": { "$date" : "2013-02-28T11:46:27Z" },
        "decripcion": "\nI've just created the simplest possible widget for a readonly field - I don't really see why forms don't have this already:\n\nclass ReadOnlyWidget(widgets.Widget):\n    \"\"\"Some of these values are read only - just a bit of text...\"\"\"\n    def render(self, _, value, attrs=None):\n        return value\n\n\nIn the form:\n\nmy_read_only = CharField(widget=ReadOnlyWidget())\n\n\nVery simple - and gets me just output. Handy in a formset with a bunch of read only values.\nOf course - you could also be a bit more clever and give it a div with the attrs so you can append classes to it.\n    ",
        "votes": 12,
        "comentarios": [
            {
                "decripcion": "Looks sexy, but how to handle foreign key?",
                "fecha": { "$date" : "2015-04-08T14:00:48Z" },
                "usuario": "andilabs",
                "usuario_id": 2795
            },
            {
                "decripcion": "Make that unicode(value) in the return instead perhaps. Assuming the unicode dunder is sensible, you'd then get that.",
                "fecha": { "$date" : "2015-04-08T15:24:40Z" },
                "usuario": "Danny Staple",
                "usuario_id": 2954
            },
            {
                "decripcion": "For foreign keys, you'll need to add a \"model\" attribute and use \"get(value)\". Check my gist",
                "fecha": { "$date" : "2017-07-04T14:30:19Z" },
                "usuario": "Shadi",
                "usuario_id": 2955
            }
        ],
        "usuario": "Danny Staple",
        "usuario_id": 2954
    },
    {
        "_id": 1651,
        "fecha": { "$date" : "2021-08-03T16:09:23Z" },
        "decripcion": "\nI ran across a similar problem.\nIt looks like I was able to solve it by defining a get_readonly_fields method in my ModelAdmin class.\nSomething like this:\n# In the admin.py file\n\nclass ItemAdmin(admin.ModelAdmin):\n\n    def get_readonly_display(self, request, obj=None):\n        if obj:\n            return ['sku']\n        else:\n            return []\n\nThe nice thing is that obj will be None when you are adding a new Item, or it will be the object being edited when you are changing an existing Item.\nget_readonly_display is documented here.\n    ",
        "votes": 11,
        "comentarios": [
            {
                "decripcion": "I guess get_readonly_display should now be get_readonly_fields...",
                "fecha": { "$date" : "2021-08-03T16:13:13Z" },
                "usuario": "djvg",
                "usuario_id": 2956
            }
        ],
        "usuario": "awalker",
        "usuario_id": 2957
    },
    {
        "_id": 1652,
        "fecha": { "$date" : "2017-07-24T15:34:58Z" },
        "decripcion": "\nHow I do it with Django 1.11 : \n\nclass ItemForm(ModelForm):\n    disabled_fields = ('added_by',)\n\n    class Meta:\n        model = Item\n        fields = '__all__'\n\n    def __init__(self, *args, **kwargs):\n        super(ItemForm, self).__init__(*args, **kwargs)\n        for field in self.disabled_fields:\n            self.fields[field].disabled = True\n\n    ",
        "votes": 7,
        "comentarios": [
            {
                "decripcion": "this will only block from fronted. any one can bypass.  this will make a security problem if you doing on sensitive data",
                "fecha": { "$date" : "2020-02-12T16:02:52Z" },
                "usuario": "Sarath Ak",
                "usuario_id": 2958
            },
            {
                "decripcion": "It's safe; it also blocks in backend since Django >= 1.10 docs.djangoproject.com/en/1.10/ref/forms/fields/\u2026",
                "fecha": { "$date" : "2020-03-26T18:29:09Z" },
                "usuario": "Tim Diels",
                "usuario_id": 2959
            }
        ],
        "usuario": "Lucas B",
        "usuario_id": 2960
    },
    {
        "_id": 1653,
        "fecha": { "$date" : "2016-05-15T18:28:11Z" },
        "decripcion": "\nOne simple option is to just type form.instance.fieldName in the template instead of form.fieldName.\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "And how about the verbos_name or label of field? How can I show `label in django template ? @alzclarke",
                "fecha": { "$date" : "2019-06-05T16:12:52Z" },
                "usuario": "Whale 52Hz",
                "usuario_id": 2961
            }
        ],
        "usuario": "alzclarke",
        "usuario_id": 2962
    },
    {
        "_id": 1654,
        "fecha": { "$date" : "2020-09-16T01:05:27Z" },
        "decripcion": "\nYet again, I am going to offer one more solution :) I was using Humphrey's code, so this is based off of that.\nHowever, I ran into issues with the field being a ModelChoiceField. Everything would work on the first request. However, if the formset tried to add a new item and failed validation, something was going wrong with the \"existing\" forms where the SELECTED option was being reset to the default ---------.\nAnyway, I couldn't figure out how to fix that. So instead, (and I think this is actually cleaner in the form), I made the fields HiddenInputField(). This just means you have to do a little more work in the template.\nSo the fix for me was to simplify the Form:\nclass ItemForm(ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        super(ItemForm, self).__init__(*args, **kwargs)\n        instance = getattr(self, 'instance', None)\n        if instance and instance.id:\n            self.fields['sku'].widget=HiddenInput()\n\nAnd then in the template, you'll need to do some manual looping of the formset.\nSo, in this case you would do something like this in the template:\n<div>\n    {{ form.instance.sku }} <!-- This prints the value -->\n    {{ form }} <!-- Prints form normally, and makes the hidden input -->\n</div>\n\nThis worked a little better for me and with less form manipulation.\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "JamesD",
        "usuario_id": 2963
    },
    {
        "_id": 1655,
        "fecha": { "$date" : "2020-09-20T11:11:02Z" },
        "decripcion": "\nFor django 1.9+\nYou can use Fields disabled argument to make field disable.\ne.g. In following code snippet from forms.py file , I have made employee_code field disabled\nclass EmployeeForm(forms.ModelForm):\n    employee_code = forms.CharField(disabled=True)\n    class Meta:\n        model = Employee\n        fields = ('employee_code', 'designation', 'salary')\n\nReference\nhttps://docs.djangoproject.com/en/dev/ref/forms/fields/#disabled\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Ajinkya Bhosale",
        "usuario_id": 2964
    },
    {
        "_id": 1656,
        "fecha": { "$date" : "2017-05-23T11:55:19Z" },
        "decripcion": "\nAs a useful addition to Humphrey's post, I had some issues with django-reversion, because it still registered disabled fields as 'changed'. The following code fixes the problem.\n\nclass ItemForm(ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        super(ItemForm, self).__init__(*args, **kwargs)\n        instance = getattr(self, 'instance', None)\n        if instance and instance.id:\n            self.fields['sku'].required = False\n            self.fields['sku'].widget.attrs['disabled'] = 'disabled'\n\n    def clean_sku(self):\n        # As shown in the above answer.\n        instance = getattr(self, 'instance', None)\n        if instance:\n            try:\n                self.changed_data.remove('sku')\n            except ValueError, e:\n                pass\n            return instance.sku\n        else:\n            return self.cleaned_data.get('sku', None)\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Evan Brumley",
        "usuario_id": 2965
    },
    {
        "_id": 1657,
        "fecha": { "$date" : "2017-05-23T12:34:59Z" },
        "decripcion": "\nAs I can't yet comment (muhuk's solution), I'll response as a separate answer. This is a complete code example, that worked for me:\n\ndef clean_sku(self):\n  if self.instance and self.instance.pk:\n    return self.instance.sku\n  else:\n    return self.cleaned_data['sku']\n\n    ",
        "votes": 5,
        "comentarios": [],
        "usuario": "Madis",
        "usuario_id": 2966
    },
    {
        "_id": 1658,
        "fecha": { "$date" : "2014-02-09T03:02:45Z" },
        "decripcion": "\nI was going into the same problem so I created a Mixin that seems to work for my use cases.\n\nclass ReadOnlyFieldsMixin(object):\n    readonly_fields =()\n\n    def __init__(self, *args, **kwargs):\n        super(ReadOnlyFieldsMixin, self).__init__(*args, **kwargs)\n        for field in (field for name, field in self.fields.iteritems() if name in self.readonly_fields):\n            field.widget.attrs['disabled'] = 'true'\n            field.required = False\n\n    def clean(self):\n        cleaned_data = super(ReadOnlyFieldsMixin,self).clean()\n        for field in self.readonly_fields:\n           cleaned_data[field] = getattr(self.instance, field)\n\n        return cleaned_data\n\n\nUsage, just define which ones must be read only:\n\nclass MyFormWithReadOnlyFields(ReadOnlyFieldsMixin, MyForm):\n    readonly_fields = ('field1', 'field2', 'fieldx')\n\n    ",
        "votes": 4,
        "comentarios": [
            {
                "decripcion": "I suppose it's a bit more readable than my own mixin I suggested here. Even probably more efficient, as those cleans don't raise validations errors\u2026",
                "fecha": { "$date" : "2015-03-21T17:09:43Z" },
                "usuario": "christophe31",
                "usuario_id": 2953
            },
            {
                "decripcion": "I get an error: 'collections.OrderedDict' object has no attribute 'iteritems'",
                "fecha": { "$date" : "2018-08-23T15:52:51Z" },
                "usuario": "geoidesic",
                "usuario_id": 2942
            }
        ],
        "usuario": "Michael",
        "usuario_id": 303
    },
    {
        "_id": 1659,
        "fecha": { "$date" : "2017-05-23T12:18:33Z" },
        "decripcion": "\nBased on Yamikep's answer, I found a better and very simple solution which also handles ModelMultipleChoiceField fields.\n\nRemoving field from form.cleaned_data prevents fields from being saved:\n\nclass ReadOnlyFieldsMixin(object):\n    readonly_fields = ()\n\n    def __init__(self, *args, **kwargs):\n        super(ReadOnlyFieldsMixin, self).__init__(*args, **kwargs)\n        for field in (field for name, field in self.fields.iteritems() if\n                      name in self.readonly_fields):\n            field.widget.attrs['disabled'] = 'true'\n            field.required = False\n\n    def clean(self):\n        for f in self.readonly_fields:\n            self.cleaned_data.pop(f, None)\n        return super(ReadOnlyFieldsMixin, self).clean()\n\n\nUsage:\n\nclass MyFormWithReadOnlyFields(ReadOnlyFieldsMixin, MyForm):\n    readonly_fields = ('field1', 'field2', 'fieldx')\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "darklow",
        "usuario_id": 2967
    },
    {
        "_id": 1660,
        "fecha": { "$date" : "2016-08-19T10:13:11Z" },
        "decripcion": "\nif your need multiple read-only fields.you can use any of methods given below \n\nmethod 1\n\nclass ItemForm(ModelForm):\n    readonly = ('sku',)\n\n    def __init__(self, *arg, **kwrg):\n        super(ItemForm, self).__init__(*arg, **kwrg)\n        for x in self.readonly:\n            self.fields[x].widget.attrs['disabled'] = 'disabled'\n\n    def clean(self):\n        data = super(ItemForm, self).clean()\n        for x in self.readonly:\n            data[x] = getattr(self.instance, x)\n        return data\n\n\nmethod 2 \n\ninheritance method\n\nclass AdvancedModelForm(ModelForm):\n\n\n    def __init__(self, *arg, **kwrg):\n        super(AdvancedModelForm, self).__init__(*arg, **kwrg)\n        if hasattr(self, 'readonly'):\n            for x in self.readonly:\n                self.fields[x].widget.attrs['disabled'] = 'disabled'\n\n    def clean(self):\n        data = super(AdvancedModelForm, self).clean()\n        if hasattr(self, 'readonly'):\n            for x in self.readonly:\n                data[x] = getattr(self.instance, x)\n        return data\n\n\nclass ItemForm(AdvancedModelForm):\n    readonly = ('sku',)\n\n    ",
        "votes": 4,
        "comentarios": [],
        "usuario": "Sarath Ak",
        "usuario_id": 2958
    },
    {
        "_id": 1661,
        "fecha": { "$date" : "2013-11-27T21:38:51Z" },
        "decripcion": "\nTwo more (similar) approaches with one generalized example:\n\n1) first approach - removing field in save() method, e.g. (not tested ;) ):\n\ndef save(self, *args, **kwargs):\n    for fname in self.readonly_fields:\n        if fname in self.cleaned_data:\n            del self.cleaned_data[fname]\n    return super(<form-name>, self).save(*args,**kwargs)\n\n\n2) second approach - reset field to initial value in clean method:\n\ndef clean_<fieldname>(self):\n    return self.initial[<fieldname>] # or getattr(self.instance, fieldname)\n\n\nBased on second approach I generalized it like this:\n\nfrom functools                 import partial\n\nclass <Form-name>(...):\n\n    def __init__(self, ...):\n        ...\n        super(<Form-name>, self).__init__(*args, **kwargs)\n        ...\n        for i, (fname, field) in enumerate(self.fields.iteritems()):\n            if fname in self.readonly_fields:\n                field.widget.attrs['readonly'] = \"readonly\"\n                field.required = False\n                # set clean method to reset value back\n                clean_method_name = \"clean_%s\" % fname\n                assert clean_method_name not in dir(self)\n                setattr(self, clean_method_name, partial(self._clean_for_readonly_field, fname=fname))\n\n    def _clean_for_readonly_field(self, fname):\n        \"\"\" will reset value to initial - nothing will be changed \n            needs to be added dynamically - partial, see init_fields\n        \"\"\"\n        return self.initial[fname] # or getattr(self.instance, fieldname)\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Robert Lujo",
        "usuario_id": 2968
    },
    {
        "_id": 1662,
        "fecha": { "$date" : "2016-05-15T18:36:25Z" },
        "decripcion": "\nFor the Admin version, I think this is a more compact way if you have more than one field:\n\ndef get_readonly_fields(self, request, obj=None):\n    skips = ('sku', 'other_field')\n    fields = super(ItemAdmin, self).get_readonly_fields(request, obj)\n\n    if not obj:\n        return [field for field in fields if not field in skips]\n    return fields\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Hassek",
        "usuario_id": 2969
    },
    {
        "_id": 1663,
        "fecha": { "$date" : "2020-08-02T14:04:32Z" },
        "decripcion": "\nYou can elegantly add readonly in the widget:\nclass SurveyModaForm(forms.ModelForm):\n    class Meta:\n        model  = Survey\n        fields = ['question_no']\n        widgets = {\n        'question_no':forms.NumberInput(attrs={'class':'form-control','readonly':True}),\n        }\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "MbeforeL",
        "usuario_id": 2970
    },
    {
        "_id": 1664,
        "fecha": { "$date" : "2018-04-18T23:28:48Z" },
        "decripcion": "\nHere is a slightly more involved version, based on christophe31's answer. It does not rely on the \"readonly\" attribute. This makes its problems, like select boxes still being changeable and datapickers still popping up, go away.\n\nInstead, it wraps the form fields widget in a readonly widget, thus making the form still validate. The content of the original widget is displayed inside <span class=\"hidden\"></span> tags. If the widget has a render_readonly() method it uses that as the visible text, otherwise it parses the HTML of the original widget and tries to guess the best representation.\n\nimport django.forms.widgets as f\nimport xml.etree.ElementTree as etree\nfrom django.utils.safestring import mark_safe\n\ndef make_readonly(form):\n    \"\"\"\n    Makes all fields on the form readonly and prevents it from POST hacks.\n    \"\"\"\n\n    def _get_cleaner(_form, field):\n        def clean_field():\n            return getattr(_form.instance, field, None)\n        return clean_field\n\n    for field_name in form.fields.keys():\n        form.fields[field_name].widget = ReadOnlyWidget(\n            initial_widget=form.fields[field_name].widget)\n        setattr(form, \"clean_\" + field_name, \n                _get_cleaner(form, field_name))\n\n    form.is_readonly = True\n\nclass ReadOnlyWidget(f.Select):\n    \"\"\"\n    Renders the content of the initial widget in a hidden <span>. If the\n    initial widget has a ``render_readonly()`` method it uses that as display\n    text, otherwise it tries to guess by parsing the html of the initial widget.\n    \"\"\"\n\n    def __init__(self, initial_widget, *args, **kwargs):\n        self.initial_widget = initial_widget\n        super(ReadOnlyWidget, self).__init__(*args, **kwargs)\n\n    def render(self, *args, **kwargs):\n        def guess_readonly_text(original_content):\n            root = etree.fromstring(\"<span>%s</span>\" % original_content)\n\n            for element in root:\n                if element.tag == 'input':\n                    return element.get('value')\n\n                if element.tag == 'select':\n                    for option in element:\n                        if option.get('selected'):\n                            return option.text\n\n                if element.tag == 'textarea':\n                    return element.text\n\n            return \"N/A\"\n\n        original_content = self.initial_widget.render(*args, **kwargs)\n        try:\n            readonly_text = self.initial_widget.render_readonly(*args, **kwargs)\n        except AttributeError:\n            readonly_text = guess_readonly_text(original_content)\n\n        return mark_safe(\"\"\"<span class=\"hidden\">%s</span>%s\"\"\" % (\n            original_content, readonly_text))\n\n# Usage example 1.\nself.fields['my_field'].widget = ReadOnlyWidget(self.fields['my_field'].widget)\n\n# Usage example 2.\nform = MyForm()\nmake_readonly(form)\n\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Rune Kaagaard",
        "usuario_id": 2971
    },
    {
        "_id": 1665,
        "fecha": { "$date" : "2014-02-11T21:17:06Z" },
        "decripcion": "\nIs this the simplest way?\n\nRight in a view code something like this: \n\ndef resume_edit(request, r_id):\n    .....    \n    r = Resume.get.object(pk=r_id)\n    resume = ResumeModelForm(instance=r)\n    .....\n    resume.fields['email'].widget.attrs['readonly'] = True \n    .....\n    return render(request, 'resumes/resume.html', context)\n\n\nIt works fine!\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "fly_frog",
        "usuario_id": 2972
    },
    {
        "_id": 1666,
        "fecha": { "$date" : "2018-09-04T05:45:50Z" },
        "decripcion": "\nIf you are working with Django ver < 1.9 (the 1.9 has added Field.disabled attribute) you could try to add following decorator to your form __init__ method:\n\ndef bound_data_readonly(_, initial):\n    return initial\n\n\ndef to_python_readonly(field):\n    native_to_python = field.to_python\n\n    def to_python_filed(_):\n        return native_to_python(field.initial)\n\n    return to_python_filed\n\n\ndef disable_read_only_fields(init_method):\n\n    def init_wrapper(*args, **kwargs):\n        self = args[0]\n        init_method(*args, **kwargs)\n        for field in self.fields.values():\n            if field.widget.attrs.get('readonly', None):\n                field.widget.attrs['disabled'] = True\n                setattr(field, 'bound_data', bound_data_readonly)\n                setattr(field, 'to_python', to_python_readonly(field))\n\n    return init_wrapper\n\n\nclass YourForm(forms.ModelForm):\n\n    @disable_read_only_fields\n    def __init__(self, *args, **kwargs):\n        ...\n\n\nThe main idea is that if field is readonly you don't need any other value except initial.\n\nP.S: Don't forget to set yuor_form_field.widget.attrs['readonly'] = True\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Yaroslav Varkhol",
        "usuario_id": 2973
    },
    {
        "_id": 1667,
        "fecha": { "$date" : "2015-03-24T06:37:40Z" },
        "decripcion": "\nIf you are using Django admin, here is the simplest solution.\n\nclass ReadonlyFieldsMixin(object):\n    def get_readonly_fields(self, request, obj=None):\n        if obj:\n            return super(ReadonlyFieldsMixin, self).get_readonly_fields(request, obj)\n        else:\n            return tuple()\n\nclass MyAdmin(ReadonlyFieldsMixin, ModelAdmin):\n    readonly_fields = ('sku',)\n\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "utapyngo",
        "usuario_id": 2974
    },
    {
        "_id": 1668,
        "fecha": { "$date" : "2016-05-15T18:40:27Z" },
        "decripcion": "\nI think your best option would just be to include the readonly attribute in your template rendered in a <span> or <p> rather than include it in the form if it's readonly.\n\nForms are for collecting data, not displaying it. That being said, the options to display in a readonly widget and scrub POST data are fine solutions.\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "austinheiman",
        "usuario_id": 2975
    },
    {
        "_id": 1669,
        "fecha": { "$date" : "2011-10-03T19:55:15Z" },
        "decripcion": "\nIf you still need to server static locally (e.g. for testing without debug) you can run devserver in insecure mode:\n\nmanage.py runserver --insecure\n\n    ",
        "votes": 536,
        "comentarios": [
            {
                "decripcion": "Whilst this flag does work, it does not serve the content from the collectstatic folder",
                "fecha": { "$date" : "2013-08-14T14:05:44Z" },
                "usuario": "Howie",
                "usuario_id": 2976
            },
            {
                "decripcion": "That's magic. Thank you sir, you're a hero. This answer should be merged with the accepted answer as it solves the problem without having to serve static using another way than django itself.",
                "fecha": { "$date" : "2014-09-08T09:44:06Z" },
                "usuario": "Depado",
                "usuario_id": 2977
            },
            {
                "decripcion": "This was all I needed. Although the best practice would be to use environment variable to differentiate between development and production environment and Debug toggle.",
                "fecha": { "$date" : "2016-12-27T13:53:36Z" },
                "usuario": "Neeraj Gupta",
                "usuario_id": 2978
            },
            {
                "decripcion": "can someone tell me though what is so insecure about this",
                "fecha": { "$date" : "2018-11-20T19:40:28Z" },
                "usuario": "Kavi Vaidya",
                "usuario_id": 2979
            },
            {
                "decripcion": "@KaviVaidya - It's only insecure because it hasn't been carefully checked to have confidence that it is secure. See stackoverflow.com/a/31097709/303056 for details. IMHO this is a really poor choice of naming, conflating FUD about security with clear performance limitations.",
                "fecha": { "$date" : "2020-03-30T21:16:36Z" },
                "usuario": "Leopd",
                "usuario_id": 2980
            }
        ],
        "usuario": "Dmitry Shevchenko",
        "usuario_id": 2981
    },
    {
        "_id": 1670,
        "fecha": { "$date" : "2011-04-29T19:53:49Z" },
        "decripcion": "\nWith debug turned off Django won't handle static files for you any more - your production web server (Apache or something) should take care of that.\n    ",
        "votes": 428,
        "comentarios": [
            {
                "decripcion": "This actually settles my curiosity, so now it makes sense, and i can indeed take care of it with Apache if need be then. I'd thought it was a problem with my own settings. Thanks",
                "fecha": { "$date" : "2011-04-29T20:07:37Z" },
                "usuario": "JWL",
                "usuario_id": 2733
            },
            {
                "decripcion": "I found this answer very helpful. Just in case someone else is in my same situation (using Google App Engine for the app with nonrel django): don't forget to update app.yaml.",
                "fecha": { "$date" : "2011-08-20T16:14:46Z" },
                "usuario": "Lyndsey Ferguson",
                "usuario_id": 2982
            },
            {
                "decripcion": "handlers: - url: /static   static_dir: static",
                "fecha": { "$date" : "2011-08-20T16:15:26Z" },
                "usuario": "Lyndsey Ferguson",
                "usuario_id": 2982
            },
            {
                "decripcion": "Doesn't make sense to me. I would like to test it locally somehow with Debug=False",
                "fecha": { "$date" : "2020-06-23T13:55:07Z" },
                "usuario": "Philipp S.",
                "usuario_id": 2983
            },
            {
                "decripcion": "manage.py runserver --insecure works for serving static files with debug=True",
                "fecha": { "$date" : "2021-04-13T07:08:21Z" },
                "usuario": "Sami",
                "usuario_id": 2984
            }
        ],
        "usuario": "Marek Sapota",
        "usuario_id": 2985
    },
    {
        "_id": 1671,
        "fecha": { "$date" : "2018-04-08T20:59:29Z" },
        "decripcion": "\nIn urls.py I added this line: \n\nfrom django.views.static import serve \n\n\nadd those two urls in urlpatterns: \n\nurl(r'^media/(?P<path>.*)$', serve,{'document_root': settings.MEDIA_ROOT}), \nurl(r'^static/(?P<path>.*)$', serve,{'document_root': settings.STATIC_ROOT}), \n\n\nand both static and media files were accesible when DEBUG=FALSE.\nHope it helps :)\n    ",
        "votes": 72,
        "comentarios": [
            {
                "decripcion": "AWESOME! Don't forget to set STATIC_ROOT and manage.py collectstatic.",
                "fecha": { "$date" : "2019-11-17T22:19:59Z" },
                "usuario": "DomingoR",
                "usuario_id": 2986
            },
            {
                "decripcion": "Nowadays replace url( with re_path(",
                "fecha": { "$date" : "2020-03-30T19:28:37Z" },
                "usuario": "Leopd",
                "usuario_id": 2980
            }
        ],
        "usuario": "stathoula",
        "usuario_id": 2987
    },
    {
        "_id": 1672,
        "fecha": { "$date" : "2020-06-25T05:04:41Z" },
        "decripcion": "\nYou can use WhiteNoise to serve static files in production.\nInstall:\npip install WhiteNoise==2.0.6\n\nAnd change your wsgi.py file to this:\nfrom django.core.wsgi import get_wsgi_application\nfrom whitenoise.django import DjangoWhiteNoise\n\napplication = get_wsgi_application()\napplication = DjangoWhiteNoise(application)\n\nAnd you're good to go!\nCredit to Handlebar Creative Blog.\nBUT, it's really not recommended serving static files this way in production. Your production web server(like nginx) should take care of that.\n    ",
        "votes": 45,
        "comentarios": [
            {
                "decripcion": "Sounds interesting, but didn't work for me by just adding that line to the wgsi.py file. The documentation you linked seems to give other instructions for using WhiteNoise. Will try other ways and update you here.",
                "fecha": { "$date" : "2018-04-17T23:25:22Z" },
                "usuario": "DarkCygnus",
                "usuario_id": 2988
            },
            {
                "decripcion": "+1 as this was what eventually led me to the solution. I added an answer where I included the additional steps I took to actually make it work.",
                "fecha": { "$date" : "2018-04-18T00:19:59Z" },
                "usuario": "DarkCygnus",
                "usuario_id": 2988
            },
            {
                "decripcion": "manage.py runserver --insecure didn't work for me. This one does, though.",
                "fecha": { "$date" : "2018-07-09T06:48:36Z" },
                "usuario": "Eje",
                "usuario_id": 2989
            },
            {
                "decripcion": "Note that with WhiteNoise release 4.0, the configuration changed. Do not add these lines to wsgi.py. Instead, just add 'whitenoise.middleware.WhiteNoiseMiddleware' to middleware. See release notes from the changelog",
                "fecha": { "$date" : "2019-11-07T15:44:23Z" },
                "usuario": "Doug Harris",
                "usuario_id": 2990
            },
            {
                "decripcion": "Why is *not recommended? I've been using it for years in several sites, works great. Even Heroku uses it in their Django template.",
                "fecha": { "$date" : "2020-05-02T23:27:51Z" },
                "usuario": "Omar Gonzalez",
                "usuario_id": 2991
            }
        ],
        "usuario": "Johnny Zhao",
        "usuario_id": 2992
    },
    {
        "_id": 1673,
        "fecha": { "$date" : "2018-10-03T00:07:57Z" },
        "decripcion": "\nJohnny's answer is great, but still didn't work for me just by adding those lines described there. Based on that answer, the steps that actually worked for me where:\n\n\nInstall WhiteNoise as described:\n\npip install WhiteNoise\n\nCreate the STATIC_ROOT variable and add WhiteNoise to your MIDDLEWARE variable in settings.py:\n\n#settings.py\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware', #add whitenoise\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    ...\n]\n\n#...\n\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') ##specify static root\n\nThen, modify your wsgi.py file as explained in Johnny's answer:\n\n#wsgi.py\nfrom django.core.wsgi import get_wsgi_application\nfrom whitenoise.django import DjangoWhiteNoise\n\napplication = get_wsgi_application()\napplication = DjangoWhiteNoise(application)\n\nAfter that, deploy your changes to your server (with git or whatever you use).\nFinally, run the collectstatic option from your manage.py on your server. This will copy all files from your static folders into the STATIC_ROOT directory we specified before:\n\n$ python manage.py collectstatic\n\n\nYou will now see a new folder named staticfiles that contains such elements. \n\n\nAfter following these steps you can now run your server and will be able to see your static files while in Production mode.\n\nUpdate: In case you had version < 4 the changelog indicates that it's no longer necessary to declare the WSGI_APPLICATION = 'projectName.wsgi.application' on your settings.py file.\n    ",
        "votes": 22,
        "comentarios": [
            {
                "decripcion": "I did it accordingly, and on development it served fine, but not in production. Still have the same issue when DEBUG == False",
                "fecha": { "$date" : "2019-09-17T14:29:52Z" },
                "usuario": "Anna Huang",
                "usuario_id": 2993
            },
            {
                "decripcion": "@AnnaHuang What do you mean by in development and in production? Do you have separate environments or machines? Are they configured the same way?",
                "fecha": { "$date" : "2019-09-17T17:00:31Z" },
                "usuario": "DarkCygnus",
                "usuario_id": 2988
            },
            {
                "decripcion": "@DarkCygnus did you mean \"version > 4\"?",
                "fecha": { "$date" : "2021-03-03T14:59:17Z" },
                "usuario": "Zack Plauch\u00e9",
                "usuario_id": 2994
            },
            {
                "decripcion": "@AnnaHuang did you checkout the Update at the bottom of this post? After I deleted the \"WSGI_APPLICATION\" setting it started working in production.",
                "fecha": { "$date" : "2021-03-03T15:00:10Z" },
                "usuario": "Zack Plauch\u00e9",
                "usuario_id": 2994
            }
        ],
        "usuario": "DarkCygnus",
        "usuario_id": 2988
    },
    {
        "_id": 1674,
        "fecha": { "$date" : "2011-04-29T19:58:19Z" },
        "decripcion": "\nIf you are using the static serve view in development, you have to have DEBUG = True :\n\n\n  Warning\n  \n  This will only work if DEBUG is True.\n  \n  That's because this view is grossly\n  inefficient and probably insecure.\n  This is only intended for local\n  development, and should never be used\n  in production.\n\n\nDocs: serving static files in developent\n\nEDIT: You could add some urls just to test your 404 and 500 templates, just use the generic view direct_to_template in your urls.\n\nfrom django.views.generic.simple import direct_to_template\n\nurlpatterns = patterns('',\n    ('^404testing/$', direct_to_template, {'template': '404.html'})\n)\n\n    ",
        "votes": 19,
        "comentarios": [
            {
                "decripcion": "How does one, then serve the static files on production? NVM, I just saw that. Thanks.",
                "fecha": { "$date" : "2011-04-29T19:57:46Z" },
                "usuario": "NA",
                "usuario_id": 53
            },
            {
                "decripcion": "you would set up your web server to host a specific directory. Most commonly you'd be using Apache or Nginx. The Docs go into it a bit.",
                "fecha": { "$date" : "2011-04-29T20:01:18Z" },
                "usuario": "j_syk",
                "usuario_id": 2995
            },
            {
                "decripcion": "thanks @j_syk, I\u2019d already tried this approach of viewing the 404.html and 500.html  via some other non-error mechanism similar to what u suggest. But i wanted to know whether it was totally impossible to have my pages render correctly as they would in production, while still merely running on my testing server - the delegation of static file handling to Apache when Debug is Off settles it for me. Thanks for contributing.",
                "fecha": { "$date" : "2011-04-29T20:12:04Z" },
                "usuario": "JWL",
                "usuario_id": 2733
            },
            {
                "decripcion": "@mcnemesis I'm not sure exactly what will happen- but try setting TEMPLATE_DEBUG=False, and DEBUG=True. If you turn off the pretty errors I'm not sure if it goes to the 404/500 templates instead",
                "fecha": { "$date" : "2011-04-29T20:21:13Z" },
                "usuario": "j_syk",
                "usuario_id": 2995
            },
            {
                "decripcion": "like expected, doing this didn't yield any positive results.But thanks still.",
                "fecha": { "$date" : "2011-04-29T23:28:04Z" },
                "usuario": "JWL",
                "usuario_id": 2733
            }
        ],
        "usuario": "j_syk",
        "usuario_id": 2995
    },
    {
        "_id": 1675,
        "fecha": { "$date" : "2014-09-14T10:00:06Z" },
        "decripcion": "\nYou actually can serve static files in a production Django app, securely and without DEBUG=True.\n\nRather than using Django itself, use dj_static in your WSGI file (github):\n\n# requirements.txt:\n\n...\ndj-static==0.0.6\n\n\n# YOURAPP/settings.py:\n\n...\nSTATIC_ROOT = 'staticdir'\nSTATIC_URL = '/staticpath/'\n\n# YOURAPP/wsgi.py:\n\n...\nfrom django.core.wsgi import get_wsgi_application\nfrom dj_static import Cling\n\napplication = Cling(get_wsgi_application())\n\n    ",
        "votes": 15,
        "comentarios": [
            {
                "decripcion": "I've since discovered whitenoise, which may be more full-featured.",
                "fecha": { "$date" : "2016-08-30T18:18:06Z" },
                "usuario": "Robin Winslow",
                "usuario_id": 2996
            }
        ],
        "usuario": "Robin Winslow",
        "usuario_id": 2996
    },
    {
        "_id": 1676,
        "fecha": { "$date" : "2018-01-27T13:29:13Z" },
        "decripcion": "\nYou can debug this in many different ways. Here's my approach.\n\nlocalsettings.py:\n\nDEBUG = False\nDEBUG404 = True\n\n\nurls.py:\n\nfrom django.conf import settings\nimport os\n\nif settings.DEBUG404:\n    urlpatterns += patterns('',\n        (r'^static/(?P<path>.*)$', 'django.views.static.serve',\n         {'document_root': os.path.join(os.path.dirname(__file__), 'static')} ),\n    )\n\n\nBe sure to read the docs ;)\n\nhttps://docs.djangoproject.com/en/2.0/howto/static-files/#limiting-use-to-debug-true\n    ",
        "votes": 6,
        "comentarios": [],
        "usuario": "Conrado",
        "usuario_id": 2997
    },
    {
        "_id": 1677,
        "fecha": { "$date" : "2021-08-01T20:31:46Z" },
        "decripcion": "\nFor last versions of Django please look at the answer here: https://stackoverflow.com/a/7639983/6180987\nFor django version below 1.10 the solution should work:\nJust open your project urls.py, then find this if statement.\nif settings.DEBUG:\n    urlpatterns += patterns(\n        'django.views.static',\n        (r'^media/(?P<path>.*)','serve',{'document_root': settings.MEDIA_ROOT}), )\n\nYou can change settings.DEBUG on True and it will work always. But if your project is a something serious then you should to think about other solutions mentioned above.\nif True:\n    urlpatterns += patterns(\n        'django.views.static',\n        (r'^media/(?P<path>.*)','serve',{'document_root': settings.MEDIA_ROOT}), )\n\nIn django 1.10 you can write so:\nurlpatterns += [ url(r'^media/(?P<path>.*)$', serve, { 'document_root': settings.MEDIA_ROOT, }), url(r'^static/(?P<path>.*)$', serve, { 'document_root': settings.STATIC_ROOT }), ]\n\n    ",
        "votes": 6,
        "comentarios": [
            {
                "decripcion": "Your code is correct, but in Django 1.10, the configuration is for media and static is: urlpatterns += [     url(r'^media/(?P<path>.*)$', serve, {         'document_root': settings.MEDIA_ROOT,     }),      url(r'^static/(?P<path>.*)$', serve, {     \t'document_root': settings.STATIC_ROOT     }), ]",
                "fecha": { "$date" : "2016-08-05T00:23:58Z" },
                "usuario": "Roberth Sol\u00eds",
                "usuario_id": 2998
            }
        ],
        "usuario": "Sergey Luchko",
        "usuario_id": 2999
    },
    {
        "_id": 1678,
        "fecha": { "$date" : "2020-06-18T05:43:26Z" },
        "decripcion": "\nThis is Exactly you must type on terminal to run your project without DEBUG = TRUE\nand then you see all assets (static) file is loading correctly On local server .\n\npython manage.py runserver --insecure \n\n\n--insecure : it means you can run server without security mode\n    ",
        "votes": 5,
        "comentarios": [
            {
                "decripcion": "easiest answer. adding middleware just to debug 404 styles in development is an overkill. funny thing is i went looking for this flag but could find no mention of it on django's manage.py documentation page",
                "fecha": { "$date" : "2021-06-17T11:44:57Z" },
                "usuario": "Ranjit Chawla",
                "usuario_id": 3000
            }
        ],
        "usuario": "Alireza Atashnejad",
        "usuario_id": 3001
    },
    {
        "_id": 1679,
        "fecha": { "$date" : "2020-06-19T06:19:33Z" },
        "decripcion": "\nI agree with Marek Sapkota answer; But you can still use django URFConf to reallocate the url, if static file is requested.\n\nStep 1: Define a STATIC_ROOT path in settings.py\n\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n\n\nStep 2: Then collect the static files\n\n$ python manage.py collectstatic\n\n\nStep 3: Now define your URLConf that if static is in the beginning of url, access files from the static folder staticfiles. NOTE: This is your project's urls.py file:\n\nfrom django.urls import re_path\nfrom django.views.static import serve\n\nurlpattern += [\n  re_path(r'^static/(?:.*)$', serve, {'document_root': settings.STATIC_ROOT, })\n]\n\n    ",
        "votes": 3,
        "comentarios": [],
        "usuario": "Pax",
        "usuario_id": 3002
    },
    {
        "_id": 1680,
        "fecha": { "$date" : "2021-05-22T13:01:19Z" },
        "decripcion": "\nThis is normal and intended behavior.\nWarning\n\nThis will only work if DEBUG is True.  \nyou can actually view custom error views until Debug is Off  \n\nIf Django is just reading from the filesystem and sending out a file, then it has no advantage over a normal web server, all web servers are capable to server the files on it's own.\nFurthermore, if you serve static files with Django, you will keep the Python process busy for the duration of the request and it will be unable to serve the dynamic requests to which it is more suited.\nFor these reasons, the Django static view is designed only for use during development and will not work if your DEBUG setting is False.\nSince during development we only usually have one person accessing the site at a time (the\ndeveloper), Django is fine to serve static files.\n    ",
        "votes": 2,
        "comentarios": [],
        "usuario": "Piyush Pranjal",
        "usuario_id": 3003
    },
    {
        "_id": 1681,
        "fecha": { "$date" : "2016-01-20T10:50:42Z" },
        "decripcion": "\nSupport for string view arguments to url() is deprecated and will be removed in Django 1.10\n\nMy solution is just small correction to Conrado solution above.\n\nfrom django.conf import settings\nimport os\nfrom django.views.static import serve as staticserve\n\nif settings.DEBUG404:\n    urlpatterns += patterns('',\n        (r'^static/(?P<path>.*)$', staticserve,\n            {'document_root': os.path.join(os.path.dirname(__file__), 'static')} ),\n        )\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "be_good_do_good",
        "usuario_id": 3004
    },
    {
        "_id": 1682,
        "fecha": { "$date" : "2021-03-11T14:43:56Z" },
        "decripcion": "\nI did the following changes to my project/urls.py and it worked for me\nAdd this line  :\nfrom django.conf.urls import url\nand add :\nurl(r'^media/(?P<path>.*)$', serve, {'document_root': settings.MEDIA_ROOT, }),\nin urlpatterns.\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Namrata Sharma",
        "usuario_id": 3005
    },
    {
        "_id": 1683,
        "fecha": { "$date" : "2021-04-03T12:53:07Z" },
        "decripcion": "\nUltimate solution:-\n\nSo basically when you make debug = False, Django doesn't want to take care of your static files.\n\nSo we want something that can take care of our files.\n\nThe answer is whitenoise.\n\n\n\npip install whitenoise in your environment\n\n\n\nAdd 'whitenoise.middleware.WhiteNoiseMiddleware' in your middleware list in settings.py.\nThis should be added just below the 'django.middleware.security.SecurityMiddleware' and above all the remaining middleware. So that your middleware list will look like this:-\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    # add it exactlyhere\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    '...'\n]\n\n\nAdd 'whitenoise.runserver_nostatic' on top of your installed apps\nSo that your installed apps list will look like this:-\nINSTALLED_APPS = [\n    'whitenoise.runserver_nostatic',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    '...'\n]\n\n\n\nDone, you will be able to serve static files in production now!!\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "Chhinna",
        "usuario_id": 3006
    },
    {
        "_id": 1684,
        "fecha": { "$date" : "2021-05-06T08:28:32Z" },
        "decripcion": "\nnginx,settings and url configs\nIf you're on linux this may help.\nnginx file\nyour_machn:/#vim etc/nginx/sites-available/nginxfile\nserver {\n    server_name xyz.com;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /var/www/your_prj;\n    }\n\n    location /media/ {\n        root /var/www/your_prj;\n    }\n...........\n......\n}\n\nurls.py\n.........\n   .....\n    urlpatterns = [\n        path('admin/', admin.site.urls),\n        path('test/', test_viewset.TestServer_View.as_view()),\n        path('api/private/', include(router_admin.urls)),\n        path('api/public/', include(router_public.urls)),    \n        ]\n    \n    if settings.DEBUG:\n        import debug_toolbar\n        urlpatterns += static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)\n        urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n\nsettings.py\n.....\n........\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\n\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static/')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n.....\n....\n\nEnsure to run:\n(venv)yourPrj$ ./manage.py collectstatic\nyourSys# systemctrl daemon-reload\n\n    ",
        "votes": 1,
        "comentarios": [],
        "usuario": "7guyo",
        "usuario_id": 3007
    },
    {
        "_id": 1685,
        "fecha": { "$date" : "2016-10-29T18:31:40Z" },
        "decripcion": "\nAlthough it's not safest, but you can change in the source code. navigate to Python/2.7/site-packages/django/conf/urls/static.py\n\nThen edit like following:\n\nif settings.DEBUG or (prefix and '://' in prefix):\n\n\nSo then if settings.debug==False it won't effect on the code, also after running try python manage.py runserver --runserver to run static files.\n\nNOTE: Information should only be used for testing only\n    ",
        "votes": 0,
        "comentarios": [],
        "usuario": "Natuto",
        "usuario_id": 3008
    }
]